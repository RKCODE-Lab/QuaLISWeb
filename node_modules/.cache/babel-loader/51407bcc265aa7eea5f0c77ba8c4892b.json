{"ast":null,"code":"import React from'react';import FormInput from'../components/form-input/form-input.component';import{Row,Col}from'react-bootstrap';import{injectIntl}from'react-intl';import{MediaHeader}from'./App.styles';var AddLanguageSynonym=function AddLanguageSynonym(props){var fieldName=props.fieldName||'displayname';var jsondataKeys=[];delete props.selectedJsondata['salertdisplaystatus'];jsondataKeys=Object.keys(props.selectedJsondata);var headerName=props.needheader;return/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,jsondataKeys.map(function(item){return/*#__PURE__*/React.createElement(React.Fragment,null,headerName&&headerName===\"true\"?/*#__PURE__*/React.createElement(MediaHeader,{className:\"mb-3\"},props.intl.formatMessage({id:\"IDS_\"+(fieldName=item).toUpperCase()})):\"\",fieldName===item?props.languages.map(function(lang){return/*#__PURE__*/React.createElement(FormInput,{label:lang.label,name:lang.value,type:\"text\",onChange:function onChange(event){return props.onInputOnChange(event,lang.label,item,fieldName);},placeholder:lang.label,value:props.selectedFieldRecord[fieldName]&&props.selectedFieldRecord[fieldName][lang.value]?props.selectedFieldRecord[fieldName][lang.value]:\"\",isMandatory:lang.value==\"en-US\"?true:false,required:true,readOnly:false,maxLength:\"30\"});}):\"\");})//)\n));};//     return (\n//         name2.map(item =>\n//             <>\n//                 {screenName && screenName === \"true\" ? \n//                 <MediaHeader className='mb-3'>\n//                     {fieldName=item}\n//                 </MediaHeader>:\"\"}\n//             </>\n//         )\n//     )\n// }\nexport default injectIntl(AddLanguageSynonym);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/AddLanguages.jsx"],"names":["React","FormInput","Row","Col","injectIntl","MediaHeader","AddLanguageSynonym","props","fieldName","jsondataKeys","selectedJsondata","Object","keys","headerName","needheader","map","item","intl","formatMessage","id","toUpperCase","languages","lang","label","value","event","onInputOnChange","selectedFieldRecord"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,+CAAtB,CACA,OAASC,GAAT,CAAcC,GAAd,KAAyB,iBAAzB,CACA,OAASC,UAAT,KAA2B,YAA3B,CACA,OAASC,WAAT,KAA4B,cAA5B,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAW,CAClC,GAAIC,CAAAA,SAAS,CAAGD,KAAK,CAACC,SAAN,EAAmB,aAAnC,CACA,GAAIC,CAAAA,YAAY,CAAG,EAAnB,CACA,MAAQF,CAAAA,KAAK,CAACG,gBAAN,CAAuB,qBAAvB,CAAR,CACAD,YAAY,CAAGE,MAAM,CAACC,IAAP,CAAYL,KAAK,CAACG,gBAAlB,CAAf,CACA,GAAMG,CAAAA,UAAU,CAAGN,KAAK,CAACO,UAAzB,CACA,mBACI,oBAAC,GAAD,mBACI,oBAAC,GAAD,MAEQL,YAAY,CAACM,GAAb,CAAiB,SAACC,IAAD,CAAU,CACvB,mBACI,wCACKH,UAAU,EAAIA,UAAU,GAAK,MAA7B,cACG,oBAAC,WAAD,EAAa,SAAS,CAAC,MAAvB,EACKN,KAAK,CAACU,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAE,OAAS,CAACX,SAAS,CAAGQ,IAAb,EAAmBI,WAAnB,EAAf,CAAzB,CADL,CADH,CAGoB,EAJzB,CAKKZ,SAAS,GAAKQ,IAAd,CACGT,KAAK,CAACc,SAAN,CAAgBN,GAAhB,CAAoB,SAAAO,IAAI,CAAI,CACxB,mBACI,oBAAC,SAAD,EACI,KAAK,CAAEA,IAAI,CAACC,KADhB,CAEI,IAAI,CAAED,IAAI,CAACE,KAFf,CAGI,IAAI,CAAC,MAHT,CAII,QAAQ,CAAE,kBAACC,KAAD,QAAWlB,CAAAA,KAAK,CAACmB,eAAN,CAAsBD,KAAtB,CAA6BH,IAAI,CAACC,KAAlC,CAAyCP,IAAzC,CAA+CR,SAA/C,CAAX,EAJd,CAKI,WAAW,CAAEc,IAAI,CAACC,KALtB,CAMI,KAAK,CAAEhB,KAAK,CAACoB,mBAAN,CAA0BnB,SAA1B,GAAwCD,KAAK,CAACoB,mBAAN,CAA0BnB,SAA1B,EAAqCc,IAAI,CAACE,KAA1C,CAAxC,CAA2FjB,KAAK,CAACoB,mBAAN,CAA0BnB,SAA1B,EAAqCc,IAAI,CAACE,KAA1C,CAA3F,CAA8I,EANzJ,CAOI,WAAW,CAAEF,IAAI,CAACE,KAAL,EAAc,OAAd,CAAwB,IAAxB,CAA+B,KAPhD,CAQI,QAAQ,CAAE,IARd,CASI,QAAQ,CAAE,KATd,CAUI,SAAS,CAAE,IAVf,EADJ,CAcH,CAfD,CADH,CAiBO,EAtBZ,CADJ,CA4BH,CA7BD,CA+BA;AAjCR,CADJ,CADJ,CAyCH,CA/CD,CAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAepB,CAAAA,UAAU,CAACE,kBAAD,CAAzB","sourcesContent":["import React from 'react';\r\nimport FormInput from '../components/form-input/form-input.component';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { MediaHeader } from './App.styles';\r\n\r\nconst AddLanguageSynonym = (props) => {\r\n    let fieldName = props.fieldName || 'displayname'\r\n    let jsondataKeys = [];\r\n    delete (props.selectedJsondata['salertdisplaystatus']);\r\n    jsondataKeys = Object.keys(props.selectedJsondata);\r\n    const headerName = props.needheader;\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                {\r\n                    jsondataKeys.map((item) => {\r\n                        return (\r\n                            <>\r\n                                {headerName && headerName === \"true\" ?\r\n                                    <MediaHeader className='mb-3'>\r\n                                        {props.intl.formatMessage({ id: \"IDS_\" + (fieldName = item).toUpperCase() })}\r\n                                    </MediaHeader> : \"\"}\r\n                                {fieldName === item ?\r\n                                    props.languages.map(lang => {\r\n                                        return (\r\n                                            <FormInput\r\n                                                label={lang.label}\r\n                                                name={lang.value}\r\n                                                type=\"text\"\r\n                                                onChange={(event) => props.onInputOnChange(event, lang.label, item, fieldName)}\r\n                                                placeholder={lang.label}\r\n                                                value={props.selectedFieldRecord[fieldName] && props.selectedFieldRecord[fieldName][lang.value] ? props.selectedFieldRecord[fieldName][lang.value] : \"\"}\r\n                                                isMandatory={lang.value == \"en-US\" ? true : false}\r\n                                                required={true}\r\n                                                readOnly={false}\r\n                                                maxLength={\"30\"}\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                    ) : \"\"}\r\n\r\n\r\n                            </>\r\n                        )\r\n                    }\r\n                    )\r\n                    //)\r\n                }\r\n\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n//     return (\r\n//         name2.map(item =>\r\n//             <>\r\n//                 {screenName && screenName === \"true\" ? \r\n//                 <MediaHeader className='mb-3'>\r\n//                     {fieldName=item}\r\n//                 </MediaHeader>:\"\"}\r\n//             </>\r\n//         )\r\n//     )\r\n// }\r\nexport default injectIntl(AddLanguageSynonym)"]},"metadata":{},"sourceType":"module"}