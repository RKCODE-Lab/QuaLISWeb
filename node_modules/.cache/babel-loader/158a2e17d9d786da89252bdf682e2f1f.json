{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntry.jsx\";\nimport React, { Component } from 'react';\nimport { faPlay, faAddressBook, faCheckCircle, faEye, faPencilRuler, faFileImport, faSync, faBorderAll, faLink, faComment, faComments, faPaperclip, faCommentDots, faChevronRight, faMicroscope, faFlask, faHistory, faBookMedical, faNotesMedical, faCalculator, faFileExcel, faBolt } from '@fortawesome/free-solid-svg-icons';\nimport { Card, Col, Row, Nav, Button, Modal } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport Axios from \"axios\";\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileInvoice } from '@fortawesome/free-solid-svg-icons';\nimport SplitterLayout from \"react-splitter-layout\";\nimport { ContentPanel } from '../../components/App.styles';\nimport PortalModal from '../../PortalModal';\nimport Iframe from 'react-iframe';\nimport ReactTooltip from 'react-tooltip';\nimport { ReactComponent as RefreshIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/refresh.svg\";\nimport { ReactComponent as SaveIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/save_icon.svg\"; //ALPD-4156--Vignesh R(15-05-2024)-->Result Entry - Option to change section for the test(s)\t\n\nimport { ReactComponent as SectionChange } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/section-change.svg\";\nimport ScheduleSection from '../joballocation/ScheduleSection';\nimport { crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule, fetchMaterialRecord, completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord, fetchTaskRecord, parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType, getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus, viewAttachment, validateEsignCredentialComplete, getAttachmentCombo, deleteAttachment, getCommentsCombo, updateTestMethodSource, resultImportFile, filterTransactionList, validateEsignCredential, getSampleChildTabREDetail, updateParameterComments, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial, previewSampleReport, getMeanCalculationTestParameter, getAvailableMaterialQuantity, testStart, getSubSampleChildTabDetail, getSampleChildTabDetail, getREFilterTemplate, getAverageResult, getREMaterialComboGet, getPredefinedData, getELNTestValidation, getResultEntryFilter //,deleteResultUsedMaterial\n, getConfigurationFilter, getTestBasedBatchWorklist, addREAdhocParamter, createAdhocParamter, addREAdhocTestParamter, createAdhocTestParamter // ,getPredefinedData,getConfigurationFilter,getTestBasedBatchWorklist//,deleteResultUsedMaterial\n, enforceResult //,deleteResultUsedMaterial\n, ResultEntryViewPatientDetails, resultEntryGetParameter, resultEntryGetSpec, resultEntryGetComponent, CompletePopupAction, exportAction, getSectionChange, updateSectionTest, filterObject, toTimestamp, rearrangeDateFormatforKendoDataTool } from '../../actions'; //import { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone,CF_encryptionData } from '../../components/CommonScript';\n\nimport { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone, Lims_JSON_stringify, CF_encryptionData, onSaveMandatoryValidation, replaceBackSlash, sortDataForDate, convertDateTimetoStringDBFormat } from '../../components/CommonScript';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { SampleType, parameterType, ResultEntry as ResultEntryGrade, transactionStatus, RegistrationType, RegistrationSubType, FORMULAFIELDTYPE, designProperties, SideBarSeqno, SideBarTabIndex, checkBoxOperation } from '../../components/Enumeration';\nimport { ProductList } from '../product/product.styled';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ResultEntryResultsTab from './ResultEntryResultsTab';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ResultEntryFilter from './ResultEntryFilter';\nimport ResultEntryInstrumentForm from './ResultEntryInstrumentForm';\nimport ResultEntryForm from './ResultEntryForm';\nimport ResultEntryParameterForm from './ResultEntryParameterForm';\nimport TestEditForm from './TestEditForm';\nimport SampleInfoView from '../approval/SampleInfoView';\nimport SampleInfoGrid from '../approval/SampleInfoGrid';\nimport ApprovalInstrumentTab from '../approval/ApprovalInstrumentTab';\nimport ResultEntryTaskTab from './ResultEntryTaskTab';\nimport ResultEntryTaskForm from './ResultEntryTaskForm';\nimport ResultEntryParamCommetsForm from './ResultEntryParamCommetsForm';\nimport TemplateForm from '../checklist/checklist/TemplateForm';\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\nimport { numberConversion, numericGrade } from './ResultEntryValidation';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport ResultEntryFormulaForm from './ResultEntryFormulaForm';\nimport SampleApprovalHistory from '../approval/SampleApprovalHistory';\nimport ResultChangeHistoryTab from '../approval/ResultChangeHistoryTab';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveSampleAttachment, onSaveTestAttachment, onSaveSubSampleAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport { onSaveSampleComments, onSaveTestComments, onSaveSubSampleComments } from '../attachmentscomments/comments/CommentFunctions';\nimport ResultEntryImport from './ResultEntryImport';\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'; // import ReactTooltip from 'react-tooltip';\n\nimport ResultEntryMean from './ResultEntryMean';\nimport ScrollBar from 'react-perfect-scrollbar';\nimport ResultEntryMaterialForm from './ResultEntryMaterialForm';\nimport AddAdhocParameter from './AddAdhocParameter';\nimport ResultUsedMaterial from './UsedMaterial';\nimport { FontIconWrap } from '../../components/data-grid/data-grid.styles';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\nimport ModalShow from '../../components/ModalShow';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { process } from '@progress/kendo-data-query';\nimport ResultEntryPredefinedComments from './ResultEntryPredefinedComments';\nimport ResultEntryEnforceResult from './ResultEntryEnforceResult';\nimport SpecificationInfo from '../testgroup/SpecificationInfo';\nimport fullviewExpand from \"../../assets/image/fullview-expand.svg\";\nimport fullviewCollapse from \"../../assets/image/fullview-collapse.svg\";\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { ReactComponent as Resultentry } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/Result entry.svg\";\nimport ResultEntryAdhocParameter from './ResultEntryAdhocParameter';\nimport ResultEntryCompleteForm from './ResultEntryCompleteForm';\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter';\nimport { intl } from '../../components/App';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport CustomPopover from '../../components/customPopover';\nimport MoveToStoreage from '../registration/MoveToStoreage';\n\nclass ResultEntry extends Component {\n  constructor(props) {\n    super(props);\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.props.Login.masterData.selectedImportFile;\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: { ...this.props.Login.masterData,\n            selectedImportFile: selectedRecord\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteAttachmentParameterFile = (event, file, fieldName, index) => {\n      let selectedRecordParameter = this.state.selectedRecord.ResultParameter[index];\n      selectedRecordParameter[fieldName] = deleteAttachmentDropZone(selectedRecordParameter[fieldName], file);\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord['ResultParameter'][index]['editable'] = true; // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { masterData: { ...this.props.Login.masterData, ResultParameter.editable\n      //         //selectedImportFile: selectedRecord \n      //     } }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      this.setState({\n        selectedRecord: selectedRecord //fileToDelete:file.name \n\n      });\n    };\n\n    this.closeModalShowForFilter = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let modalShow = this.props.Login.modalShow;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        loadEsign = false;\n      } else {\n        modalShow = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          modalShow,\n          selectedRecord,\n          selectedId: null,\n          loadEsign\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModalShow = () => {\n      let showAlertGrid = this.props.Login.showAlertGrid;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let masterData = this.props.Login.masterData && this.props.Login.masterData;\n      masterData['RESelectedTest'].forEach(object => {\n        object['expanded'] && delete object['expanded'];\n      });\n      selectedRecord['ntestgrouptestpredefsubcode'] && delete selectedRecord['ntestgrouptestpredefsubcode'];\n      showAlertGrid = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showAlertGrid,\n          masterData,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onTabChangeRulesEngine = tabProps => {\n      let masterData = this.props.Login.masterData && this.props.Login.masterData;\n      masterData['RESelectedTest'].forEach(object => {\n        object['expanded'] && delete object['expanded'];\n      });\n      masterData['activeTabName'] = tabProps.activeTabName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleExpandChange = mapobject => {\n      let childListMap = new Map();\n      let keylst = Object.keys(mapobject);\n      keylst.map(key => {\n        childListMap.set(parseInt(key), Object.values(mapobject[key]));\n      });\n      this.setState({\n        childListMap\n      });\n    };\n\n    this.availableTestFilter = data => {\n      let lstntransactionsamplecode = [];\n\n      if (this.props.Login.RegistrationTestAlert) {\n        let keylst = Object.keys(this.props.Login.RegistrationTestAlert); // keylst.map(x=>{ \n        //    this.props.Login.RegistrationTestAlert[x].map(y=> lstntransactionsamplecode.push(y['ntransactionsamplecode'])) \n        // }); \n        // let boolean1 = keylst.includes(data.ntestgrouptestcode.toString())\n\n        let boolean1 = keylst.includes(data.ntransactiontestcode.toString()); //  let boolean2 = lstntransactionsamplecode.includes(data.ntransactionsamplecode)\n\n        if (boolean1 //&&boolean2\n        ) {\n          return data;\n        }\n      }\n    };\n\n    this.unavailableTestFilter = data => {\n      let lstntransactionsamplecode = [];\n\n      if (this.props.Login.NewTestGroupTestAlert) {\n        let keylst = Object.keys(this.props.Login.NewTestGroupTestAlert); // keylst.map(x=>{ \n        //     this.props.Login.NewTestGroupTestAlert[x].map(y=> lstntransactionsamplecode.push(y['ntransactionsamplecode'])) \n        // });\n        // let boolean1 = keylst.includes(data.ntestgrouptestcode.toString())\n\n        let boolean1 = keylst.includes(data.ntransactiontestcode.toString()); //  let boolean2 = lstntransactionsamplecode.includes(data.ntransactionsamplecode)\n\n        if (boolean1 //&&boolean2\n        ) {\n          return data;\n        }\n      }\n    };\n\n    this.dataStateAvailabletestAlert = event => {\n      this.setState({\n        dataStateavailabletest: event.dataState\n      });\n    };\n\n    this.dataStateUnAvailabletestAlert = event => {\n      this.setState({\n        dataStateunavailabletest: event.dataState\n      });\n    };\n\n    this.tabAlertRulesEngine = () => {\n      const tabMap = new Map();\n      {\n        this.props.Login.RegistrationTestAlert && this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.filter(this.availableTestFilter).length > 0 && //this.props.Login.RegistrationTestAlert.length>0 &&\n        tabMap.set(\"IDS_AVAILABLETESTUNDERSAMPLE\", /*#__PURE__*/React.createElement(DataGrid, {\n          primaryKeyField: \"ntransactiontestcode\",\n          dataResult: process(sortData(this.props.Login.masterData.RESelectedTest.filter(this.availableTestFilter), 'descending', 'ntransactiontestcode') || [], this.state.dataStateavailabletest ? this.state.dataStateavailabletest : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStateavailabletest ? this.state.dataStateavailabletest : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateAvailabletestAlert,\n          extractedColumnList: [{\n            \"idsName\": \"IDS_RULEAPPLIEDTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: true,\n          selectedId: 0,\n          gridHeight: '350px',\n          gridWidth: '700px',\n          expandField: \"expanded\",\n          handleExpandChange: () => {\n            this.handleExpandChange(this.props.Login.RegistrationTestAlert);\n          },\n          hasChild: true,\n          childMappingField: 'ntransactiontestcode',\n          childColumnList: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? [{\n            \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_SAMPLEARNO\",\n            \"dataField\": \"samplearno\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_ARNO\",\n            \"dataField\": \"sarno\",\n            \"width\": \"200px\"\n          }] : [{\n            \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_ARNO\",\n            \"dataField\": \"sarno\",\n            \"width\": \"200px\"\n          }],\n          childList: this.state.childListMap,\n          activeTabName: \"IDS_AVAILABLETESTUNDERSAMPLE\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 21\n          }\n        }));\n        this.props.Login.NewTestGroupTestAlert && this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.filter(this.unavailableTestFilter).length > 0 && //this.props.Login.NewTestGroupTestAlert.length>0  &&\n        tabMap.set(\"IDS_TESTSNOTAVAILABLEUNDERSAMPLE\", /*#__PURE__*/React.createElement(DataGrid, {\n          primaryKeyField: \"ntransactiontestcode\",\n          dataResult: process(sortData(this.props.Login.masterData.RESelectedTest.filter(this.unavailableTestFilter), 'descending', 'ntransactiontestcode') || [], this.state.dataStateunavailabletest ? this.state.dataStateunavailabletest : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStateunavailabletest ? this.state.dataStateunavailabletest : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateUnAvailabletestAlert,\n          extractedColumnList: [{\n            \"idsName\": \"IDS_RULEAPPLIEDTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: true,\n          selectedId: 0,\n          expandField: \"expanded\",\n          handleExpandChange: () => {\n            this.handleExpandChange(this.props.Login.NewTestGroupTestAlert);\n          },\n          gridHeight: '350px',\n          gridWidth: '700px',\n          hasChild: true,\n          childMappingField: 'ntransactiontestcode',\n          childColumnList: [{\n            \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          childList: this.state.childListMap,\n          activeTabName: \"IDS_TESTSNOTAVAILABLEUNDERSAMPLE\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 21\n          }\n        }));\n      }\n      return tabMap;\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecordAdhocParameter = this.state.selectedRecordAdhocParameter || {};\n      let openTemplateModal = this.props.Login.openTemplateModal;\n      let selectedRecord = this.props.Login.selectedRecord; //let additionInfo=this.props.Login.additionInfo ||{};\n\n      let screenName = this.props.Login.screenName;\n      let operation = this.props.Login.operation;\n      let loadFile = this.props.Login.loadFile;\n      let selectedId = this.props.Login.selectedId;\n      let multiFilterLoad = this.props.Login.multiFilterLoad;\n      let updateInfo = {}; //additionInfo={...selectedRecord};\n\n      if (screenName === \"IDS_RESULTFORMULA\") {\n        screenName = \"IDS_RESULTENTRY\";\n        operation = \"update\";\n        let showValidate = !this.props.Login.showValidate;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName,\n            operation,\n            showValidate,\n            validateFormulaMandyFields: []\n          }\n        };\n      } else {\n        if (this.props.Login.loadEsign) {\n          if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"complete\" || this.props.Login.operation === \"default\" || this.props.Login.operation === \"deleteTask\" || this.props.Login.operation === \"deleteInstrument\" || this.props.Login.operation === \"deleteMaterial\") {\n            loadEsign = false;\n            openModal = false;\n            selectedRecord = {};\n          } else if (this.props.Login.operation === \"updatechecklist\") {\n            loadEsign = false;\n            openModal = false;\n          } else {\n            loadEsign = false;\n            selectedRecord['esignpassword'] = \"\";\n            selectedRecord['esigncomments'] = \"\";\n            selectedRecord['esignreason'] = \"\";\n          }\n        } else {\n          openModal = false;\n          openTemplateModal = false;\n          selectedRecord = {};\n          selectedRecordAdhocParameter = {};\n          loadFile = false;\n          selectedId = null;\n          multiFilterLoad = false;\n        }\n\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            loadEsign,\n            openTemplateModal,\n            screenName,\n            selectedRecord,\n            loadFile,\n            selectedId,\n            selectedRecordAdhocParameter,\n            multiFilterLoad\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveMultiFilterClick = () => {\n      const startDate = this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date();\n      const endDate = this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date();\n      let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\n      const fromDate = obj.fromDate;\n      const toDate = obj.toDate;\n      const searchedSample = this.state.filterSampleList ? sortDataForDate(this.state.filterSampleList, 'dtransactiondate', 'npreregno') : [];\n      const kendoFilterList = this.state.kendoFilterList || [];\n      const emptyFilterList = [];\n\n      if (kendoFilterList.filters && kendoFilterList.filters.length > 0) {\n        kendoFilterList.filters.map(item => {\n          if (item.value === \"\") {\n            emptyFilterList.push(item);\n          }\n        });\n      }\n\n      if (emptyFilterList.length > 0) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_PROVIDEVALUESFORINPUTS\"\n        }));\n      } else {\n        const selectedSample = [];\n        const masterData = this.props.Login.masterData;\n\n        if (searchedSample.length === 0) {\n          let searchSampleRef = this.searchSampleRef;\n          searchSampleRef.current.value = \"\";\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...masterData,\n                selectedSample: [],\n                selectedSubSample: [],\n                selectedTest: [],\n                searchedSample: [],\n                searchedSubSample: undefined,\n                searchedTest: undefined,\n                RegistrationAttachment: [],\n                RE_SUBSAMPLE: [],\n                RE_TEST: [],\n                RegistrationTestComment: [],\n                RegistrationParameter: [],\n                RegistrationTestAttachment: [],\n                RegistrationComment: [],\n                RegistrationSampleAttachment: [],\n                RegistrationSampleComment: []\n              },\n              multiFilterLoad: false,\n              openModal: false,\n              searchSampleRef\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          selectedSample.push(searchedSample[0]);\n          let inputData = {\n            userinfo: this.props.Login.userInfo,\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n            fromdate: fromDate,\n            todate: toDate,\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n            activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\n            testskip: 0,\n            testtake: this.state.testtake,\n            subSampleSkip: 0,\n            subSampleTake: this.state.subSampleTake,\n            skip: 0,\n            resultDataState: this.state.resultDataState,\n            instrumentDataState: this.state.instrumentDataState,\n            materialDataState: this.state.materialDataState,\n            taskDataState: this.state.taskDataState,\n            documentDataState: this.state.documentDataState,\n            resultChangeDataState: this.state.resultChangeDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            sampleChangeDataState: this.state.sampleChangeDataState,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n            searchSubSampleRef: this.searchSubSampleRef,\n            searchTestRef: this.searchTestRef,\n            nneedtemplatebasedflow: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow || false,\n            checkBoxOperation: checkBoxOperation.SINGLESELECT,\n            nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n            nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1,\n            activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 8 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 8 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\n            activeSampleTab: masterData.activeSampleTab,\n            activeSubSampleTab: masterData.activeSubSampleTab,\n            activeTestTab: masterData.activeTestTab,\n            childTabsKey: [\"RegistrationAttachment\", \"RE_SUBSAMPLE\", \"RE_TEST\", \"SampleApprovalHistory\", \"RegistrationComment\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"],\n            nneedsubsample: masterData.nneedsubsample,\n            npreregno: selectedSample[0].npreregno && selectedSample[0].npreregno.toString(),\n            ntransactionstatus: String(this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus),\n            removeElementFromArray: masterData.selectedSample,\n            sample: selectedSample,\n            RESelectedSample: selectedSample,\n            searchSampleRef: this.searchSampleRef,\n            masterData: { ...masterData,\n              searchedSample,\n              selectedSample,\n              kendoFilterList: kendoFilterList\n            },\n            openModal: false,\n            multiFilterLoad: false\n          };\n          this.props.getsubSampleREDetail(inputData, true);\n        }\n      }\n    };\n\n    this.onFilterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        let inputData = [];\n\n        if (fieldname === \"fromDate\") {\n          let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\n            realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\n            nflag: 2,\n            fromdate: dateObj.fromDate,\n            //this.OnDateConverstion(event, fieldname),\n            todate: dateObj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            transcode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\n            nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\n            nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        }\n\n        if (fieldname === \"toDate\") {\n          let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo);\n          inputData = {\n            realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\n            realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\n            nflag: 2,\n            fromdate: dateObj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: dateObj.toDate,\n            //this.OnDateConverstion(event, fieldname),\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            transcode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\n            nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\n            nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        } // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \n        //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \n\n\n        if (fieldname === \"nsampletypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"] || this.props.Login.masterData.fromDate, this.state.selectedRecord && this.state.selectedRecord[\"toDate\"] || this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\n            realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\n            nflag: 2,\n            nsampletypecode: parseInt(event.value),\n            fromdate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            userinfo: this.props.Login.userInfo,\n            defaultSampleType: event.item,\n            masterData: this.props.Login.masterData,\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\n          };\n          this.props.getRERegistrationType(inputData);\n        } else if (fieldname === \"nregtypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"] || this.props.Login.masterData.fromDate, this.state.selectedRecord && this.state.selectedRecord[\"toDate\"] || this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\n            realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\n            nflag: 3,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            fromdate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            nregtypecode: parseInt(event.value),\n            userinfo: this.props.Login.userInfo,\n            defaultRegistrationType: event.item,\n            masterData: this.props.Login.masterData,\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\n          };\n          this.props.getRERegistrationSubType(inputData);\n        } else if (fieldname === \"nregsubtypecode\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\n            realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\n            nflag: 4,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultRegistrationSubType: event.item,\n            masterData: this.props.Login.masterData,\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\n            nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\n            nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        } else if (fieldname === 'ndesigntemplatemappingcode') {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          const inputParamData = {\n            nflag: 3,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            //defaultFilterStatus: event.item,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            nneedsubsample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\n            // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n            //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\n            ndesigntemplatemappingcode: event.value,\n            DesignTemplateMappingValue: event.item,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\n            nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\n            nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\n          }; //this.props.getREFilterTestData(inputParamData)\n\n          this.props.getREFilterTemplate(inputParamData);\n        } else if (fieldname === \"version\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 4,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultApprovalConfigVersion: event.item,\n            masterData: this.props.Login.masterData,\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\n            nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\n            nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\n          };\n          this.props.getREJobStatus(inputData);\n        } else if (fieldname === \"jobstatus\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultjobstatus: event.item,\n            masterData: this.props.Login.masterData,\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\n            nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\n            nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\n          };\n          this.props.getREFilterStatus(inputData);\n        } else if (fieldname === \"filter\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: 1,\n            // parseInt(this.props.Login.masterData.defaultjobstatus.njobstatuscode),\n            ntranscode: event.value === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(event.value),\n            userinfo: this.props.Login.userInfo,\n            defaultFilterStatus: event.item,\n            masterData: this.props.Login.masterData,\n            DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType,\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\n            nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\n            nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\n          };\n          this.props.getREFilterTestData(inputData);\n        } else if (fieldname === \"test\") {\n          let defaultTestvalues = event.item;\n          this.props.Login.masterData.defaultTestvalues = defaultTestvalues; // const updateInfo = {\n          //     typeName: DEFAULT_RETURN,\n          //     data: { masterData: { ...this.props.Login.masterData } }\n          // }\n          // this.props.updateStore(updateInfo);\n\n          inputData = {\n            defaultTestvalues,\n            ntestcode: this.props.Login.masterData.defaultTestvalues.ntestcode,\n            masterData: this.props.Login.masterData,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            userinfo: this.props.Login.userInfo,\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\n            nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\n            nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\n          };\n          this.props.getConfigurationFilter(inputData);\n        } else if (fieldname === \"nconfigfiltercode\") {\n          let defaultConfigurationFilterValue = event.item;\n          this.props.Login.masterData.defaultConfigurationFilterValue = defaultConfigurationFilterValue;\n          this.props.Login.masterData.realdefaultConfigurationFilterValue = defaultConfigurationFilterValue;\n          inputData = {\n            defaultConfigurationFilterValue,\n            nconfigfiltercode: parseInt(this.props.Login.masterData.defaultConfigurationFilterValue.nconfigfiltercode),\n            ntestcode: this.props.Login.masterData.defaultTestvalues.ntestcode,\n            masterData: this.props.Login.masterData,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            //ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\n            nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\n            nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\n          };\n          this.props.getTestBasedBatchWorklist(inputData);\n        } else if (fieldname === \"nworklistcode\") {\n          let defaultWorklistvalue = event.item;\n          this.props.Login.masterData.defaultWorklistvalue = defaultWorklistvalue;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          if (fieldname === \"nbatchmastercode\") {\n            let defaultBatchvalue = event.item;\n            this.props.Login.masterData.defaultBatchvalue = defaultBatchvalue;\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...this.props.Login.masterData\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        }\n      } else {\n        if (fieldname === \"nconfigfiltercode\") {\n          this.props.Login.masterData.defaultConfigurationFilterValue = [];\n          this.props.Login.masterData.defaultWorklistvalue = [];\n          this.props.Login.masterData.defaultBatchvalue = [];\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.OnDateConverstion = (date, fieldname) => {\n      const month = validateTwoDigitDate(String(date.getMonth() + 1));\n      const day = validateTwoDigitDate(String(date.getDate()));\n\n      if (fieldname === \"fromDate\") {\n        date = date.getFullYear() + '-' + month + '-' + day + \"T00:00:00\";\n      } else {\n        date = date.getFullYear() + '-' + month + '-' + day + \"T23:59:00\";\n      }\n\n      return date;\n    };\n\n    this.onReload = () => {\n      let {\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realApproveConfigVersion,\n        realFilterStatusValue,\n        realTestcodeValue,\n        realWorklistCodeValue,\n        realDesignTemplateMapping\n      } = this.props.Login.masterData; //let obj = this.covertDatetoString(realFromDate, realToDate)\n\n      let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate: obj.fromDate,\n        realToDate: obj.toDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApproveConfigVersion,\n        realTestcodeValue\n      };\n      let inputData = {\n        nsampletypecode: realSampleTypeValue && realSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: realRegTypeValue && realRegTypeValue.nregtypecode || -1,\n        nregsubtypecode: realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode || -1,\n        napprovalversioncode: realApproveConfigVersion && realApproveConfigVersion.napprovalconfigversioncode || -1,\n        ntranscode: String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\n        //ntestcode: realTestcodeValue && realTestcodeValue.ntestcode || -1,\n        ntestcode: realTestcodeValue && realTestcodeValue.ntestcode !== undefined && realTestcodeValue.ntestcode !== null ? realTestcodeValue.ntestcode : -1,\n        ndesigntemplatemappingcode: realDesignTemplateMapping && realDesignTemplateMapping.ndesigntemplatemappingcode || -1,\n        ntransactiontestcode: 0,\n        njobstatuscode: this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode || 1,\n        fromdate: obj.fromDate,\n        todate: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n        showTest: true,\n        showSample: false,\n        //checkBoxOperation: 3,\n        checkBoxOperation: checkBoxOperation.SINGLESELECT,\n        //ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        nworlistcode: realWorklistCodeValue && realWorklistCodeValue.nworklistcode || -1,\n        nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\n      };\n      const inpuParamData = {\n        inputData,\n        masterData,\n        refs: {\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef\n        },\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        historyDataState: this.state.historyDataState\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1 && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== -1) {\n        // ALPD-4132 to clear Addition Filter Config upon refresh and clear all data - ATE-241\n        inpuParamData.masterData[\"kendoFilterList\"] = undefined;\n        this.props.getResultEntryDetails(inpuParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onDesignTemplateChange = (event, fieldName, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openFilterName = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          modalShow: true,\n          operation: \"create\",\n          modalTitle: this.props.intl.formatMessage({\n            id: \"IDS_SAVEFILTER\"\n          })\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveModalFilterName = () => {\n      const obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        fromdate: obj.fromDate,\n        todate: obj.toDate,\n        sfiltername: this.state.selectedRecord && this.state.selectedRecord.sfiltername !== null ? this.state.selectedRecord.sfiltername : \"\",\n        needExtraKeys: true,\n        sampleTypeValue: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue,\n        regTypeValue: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue,\n        regSubTypeValue: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue,\n        approvalConfigValue: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion,\n        filterStatusValue: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue,\n        testValue: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue,\n        designTemplateMappingValue: this.props.Login.masterData.realDesignTemplateMapping && this.props.Login.masterData.realDesignTemplateMapping,\n        worklistValue: this.props.Login.masterData.realWorklistvalue && this.props.Login.masterData.realWorklistvalue,\n        batchValue: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napproveconfversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntranscode: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        ndesigntemplatemappingcode: this.props.Login.masterData.realDesignTemplateMapping && this.props.Login.masterData.realDesignTemplateMapping.ndesigntemplatemappingcode,\n        nworklistcode: this.props.Login.masterData.realWorklistvalue && this.props.Login.masterData.realWorklistvalue.nworklistcode,\n        nbatchcode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchcode\n      };\n      let inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"FilterName\",\n        inputData: inputData,\n        operation: this.props.Login.operation\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1 && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== undefined) {\n        // if (showEsign(this.props.Login.userRoleControlRights,this.props.Login.userInfo.nformcode,this.props.Login.ncontrolCode)) {\n        //   const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //       openModal:true,\n        //       modalShow: false,\n        //       loadEsign: true,\n        //       screenData: { inputParam, masterData },\n        //     },\n        //   };\n        //   this.props.updateStore(updateInfo);\n        // } else {\n        this.props.crudMaster(inputParam, masterData, \"modalShow\"); // }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.clickFilterDetail = value => {\n      // if(this.props.Login.nfilternamecode!==value.nfilternamecode){\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let realSampleTypeValue = this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType;\n      let realRegTypeValue = this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType;\n      let realRegSubTypeValue = this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType;\n      let realApproveConfigVersion = this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion;\n      let realFilterStatusValue = this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus;\n      let realTestcodeValue = this.props.Login.masterData.defaultTestvalues && this.props.Login.masterData.defaultTestvalues;\n      let realWorklistCodeValue = this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue;\n      let realBatchCodeValue = this.props.Login.masterData.defaultBatchvalue && this.props.Login.masterData.defaultBatchvalue;\n      let realDesignTemplateMapping = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue;\n      let realDesignTemplateMappingList = this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping;\n      let realApprovalConfigVersionList = this.props.Login.masterData.ApprovalConfigVersion && this.props.Login.masterData.ApprovalConfigVersion;\n      let realFilterStatusList = this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.REFilterStatus;\n      let realRegistrationTypeList = this.props.Login.masterData.RegistrationType && this.props.Login.masterData.RegistrationType;\n      let realRegistrationSubTypeList = this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType; // let realBatchvaluesList=this.props.Login.masterData.RegistrationType\n      // let  RealWorklistvaluesList=this.props.Login.masterData.RegistrationType\n\n      let realConfigurationFilterValuesList = this.props.Login.masterData.ConfigurationFilterValues && this.props.Login.masterData.ConfigurationFilterValues; //let obj = this.covertDatetoString(realFromDate, realToDate)\n\n      let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate: obj.fromDate,\n        realToDate: obj.toDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApproveConfigVersion,\n        realTestcodeValue,\n        realWorklistCodeValue,\n        realBatchCodeValue,\n        realDesignTemplateMapping,\n        realDesignTemplateMappingList,\n        realApprovalConfigVersionList,\n        realFilterStatusList,\n        realRegistrationTypeList,\n        realRegistrationSubTypeList,\n        realConfigurationFilterValuesList\n      };\n      let inputData = {\n        npreregno: \"0\",\n        nfilternamecode: value && value.nfilternamecode ? value.nfilternamecode : -1,\n        nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\n        userinfo: this.props.Login.userInfo,\n        activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n        showTest: true,\n        showSample: false,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\n        //checkBoxOperation: 3,\n        checkBoxOperation: checkBoxOperation.SINGLESELECT,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napproveconfversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntranscode: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n        ntestcode: parseInt(this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode),\n        ndesigntemplatemappingcode: this.props.Login.masterData.realDesignTemplateMapping && this.props.Login.masterData.realDesignTemplateMapping.ndesigntemplatemappingcode,\n        nworklistcode: this.props.Login.masterData.realWorklistvalue && this.props.Login.masterData.realWorklistvalue.nworklistcode,\n        nbatchcode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchcode,\n        FromDate: obj.fromDate,\n        ToDate: obj.toDate\n      };\n      const inpuParamData = {\n        inputData,\n        masterData,\n        refs: {\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef\n        },\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        historyDataState: this.state.historyDataState\n      }; // ALPD-4132 to Clear Additional Filter Config\n\n      inpuParamData.masterData['kendoFilterList'] = undefined;\n      this.props.getResultEntryFilter(inpuParamData); // }\n      // else{\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDFILTERALREADYLOADED\" }));  \n      // }\n    };\n\n    this.onREFilterSubmit = event => {\n      // let realFromDate = new Date(this.props.Login.masterData.fromDate)\n      // let realToDate = new Date(this.props.Login.masterData.toDate)\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let realSampleTypeValue = this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType;\n      let realRegTypeValue = this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType;\n      let realRegSubTypeValue = this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType;\n      let realApproveConfigVersion = this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion;\n      let realFilterStatusValue = this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus;\n      let realTestcodeValue = this.props.Login.masterData.defaultTestvalues && this.props.Login.masterData.defaultTestvalues;\n      let realWorklistCodeValue = this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue;\n      let realBatchCodeValue = this.props.Login.masterData.defaultBatchvalue && this.props.Login.masterData.defaultBatchvalue;\n      let realDesignTemplateMapping = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue;\n      let realDesignTemplateMappingList = this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping;\n      let realApprovalConfigVersionList = this.props.Login.masterData.ApprovalConfigVersion && this.props.Login.masterData.ApprovalConfigVersion;\n      let realFilterStatusList = this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.REFilterStatus;\n      let realRegistrationTypeList = this.props.Login.masterData.RegistrationType && this.props.Login.masterData.RegistrationType;\n      let realRegistrationSubTypeList = this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType; // let realBatchvaluesList=this.props.Login.masterData.RegistrationType\n      // let  RealWorklistvaluesList=this.props.Login.masterData.RegistrationType\n\n      let realConfigurationFilterValuesList = this.props.Login.masterData.ConfigurationFilterValues && this.props.Login.masterData.ConfigurationFilterValues; //let obj = this.covertDatetoString(realFromDate, realToDate)\n\n      let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate: obj.fromDate,\n        realToDate: obj.toDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApproveConfigVersion,\n        realTestcodeValue,\n        realWorklistCodeValue,\n        realBatchCodeValue,\n        realDesignTemplateMapping,\n        realDesignTemplateMappingList,\n        realApprovalConfigVersionList,\n        realFilterStatusList,\n        realRegistrationTypeList,\n        realRegistrationSubTypeList,\n        realConfigurationFilterValuesList\n      };\n      let inputData = {\n        needExtraKeys: true,\n        saveFilterSubmit: true,\n        //ALPD-4870 to insert the filter data's in filterdetail table when submit the filter,done by Dhanushya RI\n        sampleTypeValue: this.props.Login.masterData && this.props.Login.masterData.defaultSampleType,\n        regTypeValue: this.props.Login.masterData && this.props.Login.masterData.defaultRegistrationType,\n        regSubTypeValue: this.props.Login.masterData && this.props.Login.masterData.defaultRegistrationSubType,\n        filterStatusValue: this.props.Login.masterData && this.props.Login.masterData.defaultFilterStatus,\n        approvalConfigValue: this.props.Login.masterData && this.props.Login.masterData.defaultApprovalConfigVersion,\n        designTemplateMappingValue: this.props.Login.masterData && this.props.Login.masterData.DesignTemplateMappingValue,\n        testValue: this.props.Login.masterData && this.props.Login.masterData.defaultTestvalues,\n        worklistValue: this.props.Login.masterData & this.props.Login.masterData.defaultWorklistvalue,\n        batchValue: this.props.Login.masterData && this.props.Login.masterData.defaultBatchvalue,\n        nsampletypecode: this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType.nsampletypecode || -1,\n        nregtypecode: this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType.nregtypecode || -1,\n        nregsubtypecode: this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode || -1,\n        napprovalversioncode: this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode || -1,\n        ntranscode: this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n        //ntranscode: String(this.props.Login.masterData.defaultFilterStatus ? this.props.Login.masterData.defaultFilterStatus.ntransactionstatus : -1),\n        ntestcode: this.props.Login.masterData.defaultTestvalues ? this.props.Login.masterData.defaultTestvalues.ntestcode : -1,\n        ntransactiontestcode: 0,\n        njobstatuscode: this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode || 1,\n        fromdate: obj.fromDate,\n        todate: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n        showTest: true,\n        showSample: false,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\n        //checkBoxOperation: 3,\n        checkBoxOperation: checkBoxOperation.SINGLESELECT,\n        ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode || -1,\n        nneedtemplatebasedflow: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow || false,\n        nworlistcode: this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue.nworklistcode || -1,\n        nbatchmastercode: this.props.Login.masterData.defaultBatchvalue && this.props.Login.masterData.defaultBatchvalue.nbatchmastercode || -1,\n        nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\n      };\n      const inpuParamData = {\n        inputData,\n        masterData,\n        refs: {\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef\n        },\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        historyDataState: this.state.historyDataState\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1 && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== undefined) {\n        // ALPD-4132 to Clear Additional Filter Config\n        inpuParamData.masterData['kendoFilterList'] = undefined;\n        this.props.getResultEntryDetails(inpuParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onMultiFilterClick = () => {\n      var _this$props$Login$mas;\n\n      const filterFields = this.state.sampledisplayfields || [];\n      const samplefilteritem = this.state.samplefilteritem || [];\n      const languageTypeCode = this.props.Login.userInfo.slanguagetypecode;\n      const datefileds = [];\n      let updFilterFields = [];\n      filterFields.length > 0 && filterFields.map(item => {\n        let obj = {};\n        obj[\"filterinputtype\"] = item[3];\n        obj[\"displayname\"] = item[1];\n        obj[\"columnname\"] = item[2];\n        updFilterFields.push(obj);\n      });\n      const fields = [];\n      const kendoFilterList = ((_this$props$Login$mas = this.props.Login.masterData) === null || _this$props$Login$mas === void 0 ? void 0 : _this$props$Login$mas.kendoFilterList) || [];\n\n      if (kendoFilterList.length === 0 || kendoFilterList.filters && kendoFilterList.filters.length === 0) {\n        kendoFilterList[\"logic\"] = \"and\";\n        kendoFilterList[\"filters\"] = [];\n        samplefilteritem.length > 0 && samplefilteritem.map(item => {\n          let obj = {};\n          obj[\"field\"] = item[2];\n          obj[\"value\"] = \"\";\n\n          if (item[3] === \"date\" || item[3] === \"numeric\") {\n            obj[\"operator\"] = \"eq\";\n          } else {\n            obj[\"operator\"] = \"contains\";\n          }\n\n          kendoFilterList[\"filters\"].push(obj);\n        });\n      }\n\n      updFilterFields.length > 0 && updFilterFields.map(item => {\n        fields.push(filterObject(item, languageTypeCode, null, null, true));\n\n        if (item.filterinputtype === \"date\") {\n          datefileds.push(item.columnname);\n        }\n      });\n      const sampleList = this.props.Login.masterData.RE_SAMPLE || [];\n      const kendoOptionList = sampleList.length > 0 ? sampleList.map(item => {\n        datefileds.map(x => {\n          item[x + \"timestamp\"] = toTimestamp(rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, item[x]));\n        });\n        return item;\n      }) : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          masterData: { ...this.props.Login.masterData,\n            fields,\n            kendoFilterList,\n            kendoOptionList\n          },\n          multiFilterLoad: true,\n          screenName: \"IDS_ADDITIONALFILTER\",\n          //ALPD-4225-Vignesh R(24-05-2024)--The operation has been removed to concatenate with the screen.\n          operation: \"\",\n          skip: undefined\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.parentCallBack = (data, filter) => {\n      this.setState({\n        filterSampleList: data,\n        kendoFilterList: filter\n      });\n    };\n\n    this.handleFilterChange = event => {\n      let masterData = this.props.Login.masterData || {};\n      masterData['kendoFilterList'] = event.filter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSecondaryPaneSizeChange = (e, val) => {// let hGrand = this.state.grandparentheight\n      // let check = e - 400;\n      // if (check > 1) {\n      //     hGrand = this.state.parentHeight + check\n      // }\n      // this.setState({\n      //     paneHeight: e - val,\n      //     secondPaneHeight: hGrand - e - 70,\n      //     grandparentheight: hGrand\n      // })\n      // this.setState({\n      //     paneHeight: e - val,\n      //     secondPaneHeight: this.state.parentHeight - e - 70\n      // })\n    };\n\n    this.onComboCategoryChange = (event, fieldname) => {\n      if (event !== null) {\n        let uRL = \"\";\n        let inputData = [];\n        uRL = 'resultentrybysample/getResultUsedInstrumentCombo';\n\n        if (fieldname === \"ninstrumentcatcode\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 2,\n            ninstrumentcatcode: event.value,\n            ncalibrationRequired: event.item.ncalibrationreq\n          };\n        }\n\n        rsapi.post(uRL, inputData).then(response => {\n          const TagInstrument = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n          const TagListInstrument = TagInstrument.get(\"OptionList\");\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData,\n                Instrument: TagListInstrument\n              },\n              selectedRecord: { ...this.props.Login.selectedRecord,\n                [fieldname]: event,\n                ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : []\n              }\n            }\n          };\n          this.props.updateStore(updateInfo); // const selectedRecord = this.state.selectedRecord || {};\n          // selectedRecord[fieldname] = event;\n          // this.setState({ selectedRecord });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }\n    };\n\n    this.testRETabDetail = () => {\n      const testTabMap = new Map(); //let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.RE_TEST || [];\n      testList = testList.slice(testskip, testskip + testtake);\n      const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode;\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      testTabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(ResultEntryResultsTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.dataStateChange,\n        fetchRecord: this.props.parameterRecord,\n        editpredefinedcomments: this.editpredefinedcomments,\n        enforceResult: this.enforceResult,\n        formulaCalculation: this.formulaCalculation,\n        controlMap: this.state.controlMap,\n        parameterParam: {\n          primaryKeyField: \"ntransactionresultcode\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        checkListRecord: this.checkListRecord,\n        checklistParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        selectedId: this.props.Login.selectedId || null,\n        viewFile: this.props.viewAttachment,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_RESULTS\",\n        getMeanTestParameter: this.props.getMeanCalculationTestParameter,\n        meanParam: {\n          \"userInfo\": this.props.Login.userInfo,\n          ncontrolCode: meanControlId\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1479,\n          columnNumber: 39\n        }\n      }));\n      testTabMap.set(\"IDS_INSTRUMENT\", /*#__PURE__*/React.createElement(ApprovalInstrumentTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedInstrument\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.instrumentDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteInstrumentRecord,\n        fetchRecord: this.fetchInstrumentRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_INSTRUMENT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1501,\n          columnNumber: 42\n        }\n      }));\n      testTabMap.set(\"IDS_MATERIAL\", /*#__PURE__*/React.createElement(ResultUsedMaterial, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedMaterial\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.materialDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteMaterialRecord,\n        fetchRecord: this.props.fetchMaterialRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_MATERIAL\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1519,\n          columnNumber: 40\n        }\n      }));\n      testTabMap.set(\"IDS_TASK\", /*#__PURE__*/React.createElement(ResultEntryTaskTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedTask\",\n        addResultEntryTask: this.addResultEntryTask,\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\n        },\n        dataState: this.state.taskDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteTaskRecord,\n        fetchRecord: this.fetchTaskRecord //fetchRecord={this.fetchInstrumentRecord}\n        ,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_TASK\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1537,\n          columnNumber: 36\n        }\n      }));\n      testTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        subFields: [{\n          [designProperties.VALUE]: \"stestsynonym\"\n        }, {\n          [designProperties.VALUE]: \"dcreateddate\"\n        }],\n        userInfo: this.props.Login.userInfo,\n        isneedReport: false,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: selectedTestList //this.props.Login.masterData.RESelectedTest\n\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1562,\n          columnNumber: 47\n        }\n      }));\n      testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        isSampleTestComment: true,\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onCommentsSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.dataStateChange,\n        masterData: this.props.Login.masterData,\n        isTestComment: true,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          masterList: this.props.Login.masterData.RESelectedTest,\n          ncontrolCode: this.state.controlMap.has(\"DeleteTestComment\") && this.state.controlMap.get(\"DeleteTestComment\").ncontrolcode\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RESelectedTest,\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1605,\n          columnNumber: 44\n        }\n      }));\n      testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", /*#__PURE__*/React.createElement(ResultChangeHistoryTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        ApprovalResultChangeHistory: this.props.Login.masterData.ResultChangeHistory || [],\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultChangeDataState,\n        dataStateChange: this.dataStateChange,\n        screenName: \"IDS_RESULTCHANGEHISTORY\",\n        controlMap: this.state.controlMap,\n        masterData: this.props.Login.masterData,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedId: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1655,\n          columnNumber: 51\n        }\n      }));\n      return testTabMap;\n    };\n\n    this.sampleDataStateChange = event => {\n      switch (this.props.Login.activeSampleKey) {\n        case \"IDS_APPROVALHISTORY\":\n          this.setState({\n            sampleHistoryDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sampleGridDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.sampleGridDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.dataStateChange = event => {\n      switch (this.props.Login.activeTestKey) {\n        case \"IDS_RESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_MATERIAL\":\n          this.setState({\n            materialDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TASK\":\n          this.setState({\n            taskDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          this.setState({\n            documentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          this.setState({\n            resultChangeDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SAMPLECOMMENTS\":\n          this.setState({\n            sampleChangeDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.dataResultStateChange = event => {\n      this.setState({\n        dataState: event.dataState\n      });\n    };\n\n    this.subsampleTabDetail = () => {\n      let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\n      let {\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n      tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        isneedHeader: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1903,\n          columnNumber: 48\n        }\n      }));\n      tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"RESelectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        masterData: this.props.Login.masterData,\n        isTestComment: false,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1946,\n          columnNumber: 45\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          RESelectedSample: this.props.Login.masterData.RESelectedSample,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab,\n          activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\n        };\n        this.props.getSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.onTestTabChange = tabProps => {\n      const activeTestKey = tabProps.screenName;\n\n      if (activeTestKey !== this.props.Login.activeTestKey) {\n        if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n            RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\n            // ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\n            //     this.props.Login.masterData.selectedTestCode : this.props.Login.masterData.RESelectedTest ?\n            //         String(this.props.Login.masterData.RESelectedTest.ntransactiontestcode) : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: activeTestKey,\n            screenName: activeTestKey,\n            resultDataState: this.state.resultDataState,\n            instrumentDataState: this.state.instrumentDataState,\n            materialDataState: this.state.materialDataState,\n            taskDataState: this.state.taskDataState,\n            documentDataState: this.state.documentDataState,\n            resultChangeDataState: this.state.resultChangeDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            sampleChangeDataState: this.state.sampleChangeDataState\n          };\n          this.props.getTestChildTabREDetail(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.openStoredSampleData = inputData => {\n      const operation = \"MovesendToStore\"; //let StoreDataRecord = [];\n\n      let dataToShow;\n      let needsubsample = inputData.masterData && inputData.masterData.nneedsubsample;\n      let masterData = inputData.masterData;\n\n      if (inputData[\"mastersendtostore\"] && inputData[\"mastersendtostore\"][\"storage\"] === true) {\n        if (needsubsample === true) {\n          if (masterData[\"RESelectedSubSample\"].length > 1 || masterData[\"RESelectedSubSample\"].findIndex(x => x['ntransactionsamplecode'] === inputData[\"mastersendtostore\"]['ntransactionsamplecode']) === -1) {\n            inputData[\"mastersendtostore\"][\"getSampleChildDetail\"] = true;\n          }\n\n          masterData[\"RESelectedSubSample\"] = [];\n          masterData[\"RESelectedSubSample\"].push(inputData[\"mastersendtostore\"]);\n          dataToShow = inputData.masterData.RESelectedSubSample[0];\n        } else {\n          if (masterData[\"RESelectedSample\"].length > 1 || masterData[\"RESelectedSample\"].findIndex(x => x['npreregno'] === inputData[\"mastersendtostore\"]['npreregno']) === -1) {\n            inputData[\"mastersendtostore\"][\"getSampleChildDetail\"] = true;\n          }\n\n          masterData[\"RESelectedSample\"] = [];\n          masterData[\"RESelectedSample\"].push(inputData[\"mastersendtostore\"]);\n          dataToShow = inputData.masterData.RESelectedSample[0];\n        } // if(inputData.masterData && inputData.masterData.nneedsubsample === true){\n        //     dataToShow=inputData.masterData.RESelectedSubSample[0];\n        // }else{\n        //     dataToShow=inputData.masterData.RESelectedSample[0];\n        // }\n\n\n        masterData[\"StoreDataRecord\"] = { ...dataToShow,\n          \"needdatashow\": true\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            operation,\n            screenName: \"IDS_STORAGE\",\n            openModal: true,\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLENOTSTORED\"\n        }));\n      }\n    };\n\n    this.openClosePortal = test => {\n      if (this.props.Login.openELNSheet === undefined || !this.props.Login.openELNSheet) {\n        this.props.Login.masterData.enlLink = \"\"; // if(test.RESelectedTest.length === 1)\n        // {           \n\n        this.props.getELNTestValidation(test, this.props.Login.integrationSettings); // }\n        // else{\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTONLYONETEST\" }));\n        // }\n      } else {\n        //this.props.Login.masterData.enlLink=undefined;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openELNSheet: false,\n            masterData: {\n              openELNSheet: false,\n              ...this.props.Login.masterData,\n              enlLink: \"\"\n            }\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n      /*openClosePortal = (test) => {\r\n          if(this.state.openELNSheet === false )\r\n          {\r\n              this.props.Login.masterData.enlLink=\"\";\r\n          // if(test.RESelectedTest.length === 1)\r\n          // {           \r\n                  this.props.getELNTestValidation(test,this.props.Login.integrationSettings);            \r\n          // }\r\n          // else{\r\n          //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTONLYONETEST\" }));\r\n          // }\r\n      }\r\n          else{\r\n             //this.props.Login.masterData.enlLink=undefined;\r\n                    // const updateInfo = {\r\n              //    typeName: DEFAULT_RETURN,\r\n              //     data: {\r\n              //         openELNSheet: false,\r\n              //         masterData: {\r\n              //             openELNSheet: false,\r\n              //             ...this.props.Login.masterData,  \r\n              //             enlLink:\"\"\r\n              //         },\r\n              //         enlLink:\"\"                 \r\n              //     }\r\n                  \r\n              // }\r\n              //this.props.updateStore(updateInfo);\r\n              this.setState({ openELNSheet: false,  enlLink:\"\" })\r\n          }\r\n          // if (this.state.openELNSheet === false) {\r\n              // if (test.test.selensheetname !== null) {\r\n                  /*let enlLink = \"\";\r\n                     const elnuser= {\r\n                       usercode: test.elnUserInfo.nelncode,\r\n                       username: test.elnUserInfo.selnusername,\r\n                       userfullname: test.elnUserInfo.selnusername,\r\n                      lsusergroup: {\r\n                       usergroupcode: test.elnUserInfo.nelnusergroupcode,\r\n                       usergroupname: test.elnUserInfo.nelnusergroupcode,\r\n                       },\r\n                      //  lssitemaster:{ sitecode:sitecode }\r\n                      }\r\n                            const user = CF_encryptionData(elnuser).EncryptData;\r\n                  const enlcredential = {\r\n                      ElnUser: CF_encryptionData(this.props.Login.settings[20]).EncryptData,\r\n                      Elntenant: CF_encryptionData(\"-1\").EncryptData,\r\n                      Elnloginfrom: CF_encryptionData(\"-1\").EncryptData,\r\n                      //Elntoken: CF_encryptionData(\"\").EncryptData,\r\n                      Elnpassword: CF_encryptionData(this.props.Login.settings[21]).EncryptData,\r\n                      Elnsitecode: CF_encryptionData(this.props.Login.settings[22]).EncryptData,\r\n                      Elnsitename: CF_encryptionData(this.props.Login.settings[23]).EncryptData,\r\n                      Elnusergroupname: CF_encryptionData(this.props.Login.settings[24]).EncryptData,\r\n                      Elnusergroupcode: CF_encryptionData(this.props.Login.settings[25]).EncryptData,\r\n                  }\r\n                        //Axios.post(\"http://5.189.171.17:8095/ELN-0.0.1-SNAPSHOT/authenticate\",inputou)\r\n                  //Axios.post(this.props.Login.settings[27], inputou)\r\n                  // Axios.post(\"https://logilabelntesting.azurewebsites.net/\", user)\r\n                  //     .then(response => {\r\n                          const testname = test.test.stestname.substring(0, test.test.stestname.indexOf(\"[\")).trim();\r\n                                //const batchId = test.test.sarno+'-'+test.test.stestname;\r\n                          const batchId = test.test.sarno + '-' + testname;\r\n                          const ntransactiontestcode = CF_encryptionData(batchId//test.RESelectedTest[0].ntransactiontestcode\r\n                          ).EncryptData;\r\n                          // const Elntoken = CF_encryptionData(\"Bearer \" + response.data.token).EncryptData;\r\n        \r\n                          // const link =\r\n                          //     //window.location.href.toString() \r\n                          //     \"\" +\r\n                          //     '#{\"orderid\":\"' +\r\n                          //     ntransactiontestcode +\r\n                          //     '\",\"u\":\"' +\r\n                          //     enlcredential.ElnUser +\r\n                          //     '\",\"t\":\"' +\r\n                          //     enlcredential.Elntenant +\r\n                          //     '\",\"l\":\"' +\r\n                          //     enlcredential.Elnloginfrom +\r\n                          //     '\",\"k\":\"' +\r\n                          //     Elntoken +\r\n                          //     //response.data.token+\r\n                          //     '\",\"uc\":\"' +\r\n                          //     enlcredential.Elnusergroupcode +\r\n                          //     '\",\"ug\":\"' +\r\n                          //     enlcredential.Elnusergroupname +\r\n                          //     '\",\"sc\":\"' +\r\n                          //     enlcredential.Elnsitecode +\r\n                          //     '\",\"sn\":\"' +\r\n                          //     enlcredential.Elnsitename +\r\n                          //     '\",\"LO\":\"' +\r\n                          //     ntransactiontestcode +\r\n                          //     '\"}';\r\n                                const link =\r\n                              //window.location.href.toString() \r\n                              \"\" +\r\n                              '#{\"orderid\":\"' +\r\n                              ntransactiontestcode +\r\n                              '\",\"user\":\"' +\r\n                              user +\r\n                              '\",\"batchid\":\"' +\r\n                              ntransactiontestcode +\r\n                              '\"}';\r\n                          \r\n                          //enlLink = \"https://logilabelntest.azurewebsites.net/vieworder\".concat(link);\r\n                          enlLink=\"https://logilabelntesting.azurewebsites.net/\";\r\n                          console.log(\"eln link:\", enlLink);\r\n                          //}\r\n                          // this.setState({ openELNSheet: !this.state.openELNSheet, nflag: 1, enlLink })\r\n                          this.setState({ openELNSheet: true, nflag: 1, enlLink })\r\n                          //this.props.encryptionData(test);\r\n                      // })\r\n                      //this.getActiveTestURL() \r\n                      // .catch(response => { })\r\n              // }\r\n              // else {\r\n              //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_NOSHEETFORTHISTEST\" }));\r\n                    // }\r\n      /*}\r\n      else {\r\n              this.setState({ openELNSheet: !this.state.openELNSheet, nflag: 1 })\r\n                    let testChildGetREParam = {\r\n                  masterData: this.props.Login.masterData,\r\n                  userinfo: this.props.Login.userInfo,\r\n                  nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                  nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                  nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                  napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                  ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n                  ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                  npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                  ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                  activeTestKey: 'IDS_RESULTS',\r\n                  testskip: this.state.testskip,\r\n                  testtake: this.state.testtake,\r\n                  resultDataState: this.state.resultDataState,\r\n                  instrumentDataState: this.state.instrumentDataState,\r\n                  materialDataState: this.state.materialDataState,\r\n                  taskDataState: this.state.taskDataState,\r\n                  documentDataState: this.state.documentDataState,\r\n                  resultChangeDataState: this.state.resultChangeDataState,\r\n                  testCommentDataState: this.state.testCommentDataState,\r\n                  RESelectedTest: this.props.Login.masterData.RESelectedTest\r\n              }\r\n                    this.props.getTestChildTabREDetail(testChildGetREParam, true)\r\n        \r\n                    //this.filterTestParam\r\n          }*/\n\n    };\n\n    this.onSubSampleTabChange = tabProps => {\n      const activeSubSampleTab = tabProps.screenName;\n\n      if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSubSampleTab,\n          activeSubSampleTab,\n          subSampleCommentDataState: this.state.subSampleCommentDataState,\n          subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\n          activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\n        };\n        this.props.getSubSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.viewSample = viewdetails => {\n      this.props.ResultEntryViewPatientDetails(this.props.Login.masterData, \"IDS_PREVIOUSRESULTVIEW\", this.props.Login.userInfo, viewdetails);\n    };\n\n    this.subSampledataStateChange = event => {\n      switch (this.props.Login.activeSubSampleTab) {\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          this.setState({\n            subSampleCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          this.setState({\n            subSampleAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testMethodSourceEdit = test => {\n      this.props.testMethodSourceEdit(test);\n    };\n\n    this.addREInstrument = test => {\n      this.props.addREInstrument(test);\n    };\n\n    this.adhocParameter = test => {\n      const inputData = {\n        ntestcode: test.test.ntestcode,\n        ntestgrouptestcode: test.test.ntestgrouptestcode,\n        ntransactiontestcode: test.test.ntransactiontestcode,\n        npreregno: test.test.npreregno,\n        masterData: this.props.Login.masterData,\n        userinfo: test.userInfo,\n        adhocId: test.adhocId\n      };\n\n      if (this.props.Login.masterData.realSampleTypeValue.nclinicaltyperequired === transactionStatus.YES) {\n        this.props.addREAdhocParamter(inputData);\n      } else {\n        this.props.addREAdhocTestParamter(inputData);\n      }\n    };\n\n    this.deleteInstrumentRecord = test => {\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      test = { ...test,\n        'ndesigntemplatemappingcode': ndesigntemplatemappingcode\n      };\n      let inputParam = {\n        inputData: { ...test,\n          'ndesigntemplatemappingcode': ndesigntemplatemappingcode,\n          'userinfo': this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        operation: \"deleteInstrument\",\n        screenName: \"deleteInstrumentAction\",\n        displayName: this.props.Login.inputParam.displayName //, postParam,\n        //test: test\n\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteInstrumentAction\",\n            operation: \"deleteInstrument\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.deleteInstrumentRecord(test);\n      }\n    };\n\n    this.fetchInstrumentRecord = test => {\n      this.props.fetchInstrumentRecord(test);\n    };\n\n    this.fetchMaterialRecord = test => {\n      this.props.fetchMaterialRecord(test);\n    };\n\n    this.deleteMaterialRecord = test => {\n      const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n      const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      test = { ...test,\n        nregtypecode: nregtypecode,\n        nregsubtypecode: nregsubtypecode,\n        ndesigntemplatemappingcode: ndesigntemplatemappingcode\n      };\n      let inputParam = {\n        inputData: { ...test.selectedRecord,\n          nregtypecode: nregtypecode,\n          nregsubtypecode: nregsubtypecode,\n          ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n          ntransactiontestcode: test.masterData.RESelectedTest ? test.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n          userinfo: this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        classUrl: 'resultentrybysample',\n        methodUrl: \"ResultUsedMaterial\",\n        operation: \"delete\",\n        //screenName: \"deleteMaterialAction\",\n        displayName: this.props.Login.inputParam.displayName,\n        //, postParam,\n        //test: test\n        nresultusedmaterialcode: test.selectedRecord.nresultusedmaterialcode\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteMaterialAction\",\n            operation: \"deleteMaterial\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\"); //this.props.deleteResultUsedMaterial(test)\n      }\n    };\n\n    this.deleteTaskRecord = test => {\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      test = { ...test,\n        ndesigntemplatemappingcode: ndesigntemplatemappingcode\n      };\n      let inputParam = {\n        inputData: { ...test,\n          'userinfo': this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        operation: \"deleteTask\",\n        displayName: this.props.Login.inputParam.displayName //, postParam,\n        //test: test\n\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteTaskaction\",\n            operation: \"deleteTask\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.deleteTaskRecord(test);\n      }\n    };\n\n    this.fetchTaskRecord = test => {\n      this.props.fetchTaskRecord(test);\n    };\n\n    this.addResultEntryTask = inputData => {\n      let selectedRecord = {};\n      let selectedRecordTaskForm = {};\n      selectedRecord = {\n        npreregno: inputData.npreregno,\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        stestsynonym: inputData.stestsynonym\n      };\n      selectedRecordTaskForm = {\n        npreregno: inputData.npreregno,\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        stestsynonym: inputData.stestsynonym\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: selectedRecord,\n          selectedRecordTaskForm: selectedRecordTaskForm,\n          operation: \"create\",\n          screenName: \"IDS_TASK\",\n          openModal: true,\n          activeTestKey: \"IDS_TASK\",\n          isTaskInitialRender: true,\n          ncontrolcode: inputData.addResultUsedTaskId,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.checkListRecord = parameterData => {\n      this.props.checkListRecord(parameterData, this.props.Login.userInfo);\n    };\n\n    this.getFormula = (parameterData, userInfo, masterData, index, event) => {\n      this.setState({\n        modalEvent: event.currentTarget\n      });\n      this.props.getFormula(parameterData, userInfo, masterData, index, this.state.selectedRecord);\n    };\n\n    this.getAverageResult = (event, parameterData, index, selectedForumulaInput, masterData, selectedRecord) => {\n      if (!selectedRecord.selectedForumulaInput[index].senableAverage) {\n        this.props.getAverageResult(parameterData, index, selectedForumulaInput, this.props.Login.userInfo, masterData, selectedRecord);\n      } else {\n        selectedForumulaInput[index].senableAverage = !selectedRecord.selectedForumulaInput[index].senableAverage;\n        selectedForumulaInput[index].svalues = selectedForumulaInput[index].soldvalue;\n        this.setState({\n          selectedRecord: { ...selectedRecord,\n            selectedForumulaInput\n          }\n        });\n      }\n    };\n\n    this.calculateFormula = () => {\n      const selectedRecord = this.state.selectedRecord || [];\n      const selectedForumulaInput = selectedRecord.selectedForumulaInput || [];\n      let lstDynamicFields = [];\n\n      if (selectedForumulaInput) {\n        selectedForumulaInput.map(dynamicfields => lstDynamicFields.push(dynamicfields));\n        const inputData = {\n          masterData: this.props.Login.masterData,\n          lstDynamicFields: lstDynamicFields,\n          userInfo: this.props.Login.userInfo,\n          selectedRecord: selectedRecord,\n          selectedResultGrade: this.state.selectedRecord.selectedResultGrade,\n          ResultParameter: this.state.selectedRecord.ResultParameter || {}\n        };\n        this.props.calculateFormula(inputData);\n      }\n    };\n\n    this.exportExcelHeader = (SampleList, userInfo, exportId) => {\n      if (SampleList && SampleList.length > 0) {\n        let inputParam = {};\n        let Map = {\n          nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n          ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n          ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n          ncontrolcode: exportId,\n          npreregno: SampleList ? SampleList.map(sample => sample.npreregno).join(\",\") : \"\",\n          userinfo: userInfo,\n          operation: 'exportAction'\n        };\n        inputParam = {\n          inputData: Map\n        };\n        this.props.exportAction(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTEST\"\n        }));\n      }\n    };\n\n    this.resultImport = importId => {\n      this.props.Login.masterData.selectedImportFile = [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName: \"IDS_RESULTIMPORTFILE\",\n          openModal: true,\n          loadFile: true,\n          activeTestKey: \"IDS_RESULTS\",\n          masterData: this.props.Login.masterData,\n          importId: importId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      let inputValues = {\n        SampleType: this.props.Login.masterData.realSampleTypeList || [],\n        SampleTypeValue: this.props.Login.masterData.realSampleTypeValue || {},\n        RegistrationType: this.props.Login.masterData.realRegistrationTypeList || [],\n        RegTypeValue: this.props.Login.masterData.realRegTypeValue || {},\n        RegistrationSubType: this.props.Login.masterData.realRegistrationSubTypeList || [],\n        RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue || {},\n        DesignTemplateMappingValue: this.props.Login.masterData.realDesignTemplateMapping || {},\n        DesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMappingList || [],\n        REFilterStatus: this.props.Login.masterData.realFilterStatusList || [],\n        FilterStatusValue: this.props.Login.masterData.realFilterStatusValue || {},\n        ApprovalConfigVersion: this.props.Login.masterData.realApprovalConfigVersionList || [],\n        ApprovalVersionValue: this.props.Login.masterData.realApproveConfigVersion || {},\n        // REJobStatus:this.state.REJobStatus || [],\n        JobStatusValue: this.props.Login.masterData.defaultjobstatus || {},\n        Testvalues: this.props.Login.masterData.realTestvaluesList || [],\n        Batchvalues: this.props.Login.masterData.realBatchvaluesList || [],\n        BatchValue: this.props.Login.masterData.realBatchvalue || {},\n        Worklistvalues: this.props.Login.masterData.RealWorklistvaluesList || [],\n        WorklistValue: this.props.Login.masterData.realWorklistvalue || {},\n        TestValue: this.props.Login.masterData.realTestcodeValue || {},\n        ConfigurationFilterValues: this.props.Login.masterData.realConfigurationFilterValuesList || [],\n        ConfigurationFilterValue: this.props.Login.masterData.realdefaultConfigurationFilterValue || {},\n        defaultSampleType: this.props.Login.masterData.realSampleTypeValue || {},\n        defaultRegistrationType: this.props.Login.masterData.realRegTypeValue || {},\n        defaultRegistrationSubType: this.props.Login.masterData.realRegSubTypeValue || {},\n        defaultFilterStatus: this.props.Login.masterData.realFilterStatusValue || {},\n        defaultApprovalConfigVersion: this.props.Login.masterData.realApproveConfigVersion || {},\n        defaultBatchvalue: this.props.Login.masterData.realBatchvalue || {},\n        defaultWorklistvalue: this.props.Login.masterData.realWorklistvalue || {},\n        defaultTestvalues: this.props.Login.masterData.realTestcodeValue || {},\n        defaultConfigurationFilterValue: this.props.Login.masterData.realdefaultConfigurationFilterValue || {},\n        fromDate: this.props.Login.masterData.realFromDate || new Date(),\n        toDate: this.props.Login.masterData.realToDate || new Date() // DynamicDesignMapping:this.state.stateDynamicDesign || []\n\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false,\n          masterData: { ...this.props.Login.masterData,\n            ...inputValues\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      }); //setTimeout(() => { this._scrollBarRef.updateScroll() })\n    };\n\n    this.handleSubSamplePageChange = e => {\n      this.setState({\n        subSampleSkip: e.skip,\n        subSampleTake: e.take\n      }); //setTimeout(() => { this._scrollBarRef.updateScroll() })\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take,\n        sampletakeDataState: e.take\n      });\n    };\n\n    this.verticalPaneSizeChange = val => {\n      if (this.state.enableAutoHeight) {\n        this.setState({\n          initialVerticalWidth: val - 150\n        });\n      }\n    };\n\n    this.changeSplitterOption = () => {\n      this.setState({\n        enableAutoHeight: !this.state.enableAutoHeight,\n        initialVerticalWidth: \"57vh\"\n      });\n    };\n\n    this.sideNavDetail = screenName => {\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTest ? [...this.props.Login.masterData.searchedTest] : this.props.Login.masterData.RE_TEST || [];\n      const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\"); // let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      return screenName == \"IDS_RESULTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_RESULTS\",\n        tabDetail: this.resultTabDetail(),\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2799,\n          columnNumber: 17\n        }\n      }) : screenName == \"IDS_ATTACHMENTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\",\n        tabDetail: this.attachmentTabDetail(),\n        destroyInactiveTabPane: true,\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2801,\n          columnNumber: 21\n        }\n      }) : screenName == \"IDS_COMMENTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_TESTCOMMENTS\",\n        tabDetail: this.commentTabDetail(),\n        destroyInactiveTabPane: true,\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2803,\n          columnNumber: 25\n        }\n      }) : screenName == \"IDS_INSTRUMENT\" ? /*#__PURE__*/React.createElement(ApprovalInstrumentTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedInstrument\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.instrumentDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteInstrumentRecord,\n        fetchRecord: this.fetchInstrumentRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_INSTRUMENT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2806,\n          columnNumber: 29\n        }\n      }) : screenName == \"IDS_MATERIAL\" ? /*#__PURE__*/React.createElement(ResultUsedMaterial, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedMaterial\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.materialDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteMaterialRecord,\n        fetchRecord: this.props.fetchMaterialRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_MATERIAL\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2826,\n          columnNumber: 33\n        }\n      }) : screenName == \"IDS_TASK\" ? /*#__PURE__*/React.createElement(ResultEntryTaskTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedTask\",\n        addResultEntryTask: this.addResultEntryTask,\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\n        },\n        dataState: this.state.taskDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteTaskRecord,\n        fetchRecord: this.fetchTaskRecord //fetchRecord={this.fetchInstrumentRecord}\n        ,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_TASK\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2846,\n          columnNumber: 37\n        }\n      }) : screenName == \"IDS_SAMPLEDETAILS\" ? this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n        data: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {},\n        SingleItem: this.state.SingleItem,\n        screenName: \"IDS_SAMPLEINFO\",\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2874,\n          columnNumber: 45\n        }\n      }) : /*#__PURE__*/React.createElement(SampleInfoGrid, {\n        selectedSample: this.props.Login.masterData.RESelectedSample,\n        dataState: this.state.sampleGridDataState,\n        dataStateChange: this.sampleGridDataStateChange,\n        extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n        detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        screenName: \"IDS_SAMPLEGRID\",\n        jsonField: \"jsondata\",\n        expandField: \"expanded\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2882,\n          columnNumber: 45\n        }\n      }) : \"\";\n    };\n\n    this.resultTabDetail = () => {\n      const resultTabMap = new Map(); //let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      // let { testskip, testtake } = this.state\n      // let testList = this.props.Login.masterData.RE_TEST || [];\n      // testList = testList.slice(testskip, testskip + testtake);\n\n      const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode; //let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      resultTabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(ResultEntryResultsTab, {\n        tabSequence: SideBarSeqno.TEST,\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.dataStateChange,\n        fetchRecord: this.props.parameterRecord,\n        controlMap: this.state.controlMap,\n        parameterParam: {\n          primaryKeyField: \"ntransactionresultcode\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        checkListRecord: this.checkListRecord,\n        editpredefinedcomments: this.editpredefinedcomments,\n        enforceResult: this.enforceResult,\n        formulaCalculation: this.formulaCalculation,\n        checklistParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        selectedId: this.props.Login.selectedId || null,\n        viewFile: this.props.viewAttachment,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_RESULTS\",\n        getMeanTestParameter: this.props.getMeanCalculationTestParameter,\n        meanParam: {\n          \"userInfo\": this.props.Login.userInfo,\n          ncontrolCode: meanControlId\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2910,\n          columnNumber: 41\n        }\n      }));\n      resultTabMap.set(\"IDS_RESULTCHANGEHISTORY\", /*#__PURE__*/React.createElement(ResultChangeHistoryTab, {\n        tabSequence: SideBarSeqno.TEST,\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        ApprovalResultChangeHistory: this.props.Login.masterData.ResultChangeHistory || [],\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultChangeDataState,\n        dataStateChange: this.dataStateChange,\n        screenName: \"IDS_RESULTCHANGEHISTORY\",\n        controlMap: this.state.controlMap,\n        masterData: this.props.Login.masterData,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedId: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2935,\n          columnNumber: 13\n        }\n      }));\n      return resultTabMap;\n    };\n\n    this.attachmentTabDetail = () => {\n      const attachmentTabMap = new Map();\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let {\n        skip,\n        take,\n        testskip,\n        testtake,\n        subSampleSkip,\n        subSampleTake\n      } = this.state;\n      let testList = this.props.Login.masterData.RE_TEST || [];\n      testList = testList.slice(testskip, testskip + testtake);\n      const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode;\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\n      subsampleList = subsampleList.slice(subSampleSkip, subSampleSkip + subSampleTake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\"); //ALPD-3732  \n\n      let sampleList = this.props.Login.masterData.RE_SAMPLE || [];\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\n      attachmentTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        tabSequence: SideBarSeqno.TEST,\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        subFields: [{\n          [designProperties.VALUE]: \"stestsynonym\"\n        }, {\n          [designProperties.VALUE]: \"screateddate\"\n        }],\n        userInfo: this.props.Login.userInfo,\n        isneedReport: false,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: selectedTestList //this.props.Login.masterData.RESelectedTest\n\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        isneedHeader: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2974,\n          columnNumber: 53\n        }\n      }));\n      this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample && attachmentTabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        tabSequence: SideBarSeqno.SUBSAMPLE,\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: selectedSubSampleList,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        isneedHeader: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3021,\n          columnNumber: 62\n        }\n      }));\n      attachmentTabMap.set(\"IDS_SAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        tabSequence: SideBarSeqno.SAMPLE,\n        selectedMaster: this.props.Login.masterData.RESelectedSample,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        onSaveClick: this.onAttachmentSaveClick,\n        masterList: selectedSampleList,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHEMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: this.props.Login.screenName\n        },\n        editParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RESelectedSample\n        },\n        selectedListName: \"IDS_ARNUMBER\",\n        displayName: \"sarno\",\n        isneedHeader: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3066,\n          columnNumber: 13\n        }\n      }));\n      return attachmentTabMap;\n    };\n\n    this.testDataStateChange = event => {\n      switch (this.props.Login.activeTestTab) {\n        case \"IDS_TEST\":\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.commentTabDetail = () => {\n      const commentTabMap = new Map();\n      let {\n        skip,\n        take,\n        testskip,\n        testtake,\n        subSampleSkip,\n        subSampleTake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTest ? [...this.props.Login.masterData.searchedTest] : this.props.Login.masterData.RE_TEST || [];\n      const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      const ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\n      subsampleList = subsampleList.slice(subSampleSkip, subSampleSkip + subSampleTake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\"); //ALPD-3732\n\n      let sampleList = this.props.Login.masterData.RE_SAMPLE || [];\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\n      commentTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        isSampleTestComment: true,\n        tabSequence: SideBarSeqno.TEST,\n        selectedMaster: selectedTestList,\n        onSaveClick: this.onCommentsSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        isTestComment: false,\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        masterData: this.props.Login.masterData,\n        isneedReport: false,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: selectedTestList,\n          ncontrolCode: editTestCommentsId\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3155,\n          columnNumber: 47\n        }\n      }));\n      this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample && commentTabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        tabSequence: SideBarSeqno.SUBSAMPLE,\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        masterData: this.props.Login.masterData,\n        isTestComment: false,\n        masterList: selectedSubSampleList,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3204,\n          columnNumber: 56\n        }\n      }));\n      commentTabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        tabSequence: SideBarSeqno.SAMPLE,\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"RESelectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        masterData: this.props.Login.masterData,\n        addName: \"AddSampleComment\",\n        editName: \"EditSampleComment\",\n        deleteName: \"DeleteSampleComment\",\n        methodUrl: \"SampleComment\",\n        isTestComment: false,\n        masterList: selectedSampleList,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nregcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.dataStateChange,\n        deleteParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RESelectedSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_ARNUMBER\",\n        displayName: \"sarno\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3250,\n          columnNumber: 49\n        }\n      }));\n      return commentTabMap;\n    };\n\n    this.onInputSwitchOnChange = event => {\n      if (event.target.name == \"PopupNav\") {\n        this.setState({\n          enablePropertyPopup: !this.state.enablePropertyPopup\n        });\n      } else {\n        this.setState({\n          enableAutoClick: !this.state.enableAutoClick\n        });\n      }\n    };\n\n    this.changePropertyViewClose = id => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          activeTabIndex: undefined,\n          activeTestTab: undefined,\n          activeTabId: id\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.changePropertyView = (index, screenName, event, status) => {\n      let id = false;\n\n      if (event && event.ntransactiontestcode) {\n        id = event.ntransactiontestcode;\n      } else if (event && event.ntransactionsamplecode) {\n        id = event.ntransactionsamplecode;\n      } else if (event && event.npreregno) {\n        id = event.npreregno;\n      } //console.log(this.state.activeTabId, id , \"=======>\")\n\n\n      let activeTabIndex;\n      let activeTabId;\n\n      if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false; //activeTabId = this.state.activeTabIndex !== index ? true:false;\n      }\n\n      if (status != \"click\") {\n        if (index) {\n          const tabProps = {\n            tabSequence: SideBarSeqno.TEST,\n            screenName: screenName == \"IDS_COMMENTS\" ? \"IDS_TESTCOMMENTS\" : screenName === \"IDS_ATTACHMENTS\" ? \"IDS_TESTATTACHMENTS\" : screenName,\n            activeTabIndex //activeTabId\n\n          };\n          this.onTabChange(tabProps);\n        } // if (index == SideBarTabIndex.RESULT) {\n        //     const tabProps = {\n        //         tabSequence: SideBarSeqno.TEST,\n        //         screenName: \"IDS_RESULTS\",\n        //         activeTabIndex,\n        //         //activeTabId\n        //     }\n        //     this.onTabChange(tabProps);\n        // }\n        // else if (index == SideBarTabIndex.ATTACHMENTS) {\n        //     const tabProps = {\n        //         tabSequence: SideBarSeqno.TEST,\n        //         screenName: \"IDS_TESTATTACHMENTS\",\n        //         activeTabIndex,\n        //        // activeTabId\n        //     }\n        //     this.onTabChange(tabProps);\n        // }\n        // else if (index == SideBarTabIndex.COMMENTS) {\n        //     const tabProps = {\n        //         tabSequence: SideBarSeqno.TEST,\n        //         screenName: \"IDS_TESTCOMMENTS\",\n        //         activeTabIndex,\n        //         //activeTabId\n        //     }\n        //     this.onTabChange(tabProps);\n        // }\n        // else {\n        //     if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        //         const updateInfo = {\n        //             typeName: DEFAULT_RETURN,\n        //             data: {\n        //                 activeTabIndex: this.state.activeTabIndex !== index ? index : id ? index : false,\n        //                 activeTabId: id\n        //             }\n        //         }\n        //         this.props.updateStore(updateInfo);\n        //     }\n        // }\n\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n      const tabseqno = tabProps.tabSequence; // if (activeTestTab !== this.props.Login.activeTestTab) {\n\n      if (tabseqno == SideBarSeqno.TEST) {\n        if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n            RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: activeTestTab,\n            screenName: activeTestTab,\n            //activeTestTab,\n            resultDataState: this.state.resultDataState,\n            instrumentDataState: this.state.instrumentDataState,\n            materialDataState: this.state.materialDataState,\n            taskDataState: this.state.taskDataState,\n            documentDataState: this.state.documentDataState,\n            resultChangeDataState: this.state.resultChangeDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\n            activeTabId: tabProps.activeTabId ? tabProps.activeTabId : this.state.activeTabId\n          };\n          this.props.getTestChildTabREDetail(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      } else if (tabseqno == SideBarSeqno.SUBSAMPLE) {\n        if (activeTestTab !== this.props.Login.activeTestTab) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            screenName: activeTestTab,\n            activeTestTab,\n            activeSubSampleTab: activeTestTab,\n            subSampleCommentDataState: this.state.subSampleCommentDataState,\n            subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\n            activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\n          };\n          this.props.getSubSampleChildTabDetail(inputData);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSAMPLE\"\n          }));\n        }\n      } else {\n        if (activeTestTab !== this.props.Login.activeTestTab) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            RESelectedSample: this.props.Login.masterData.RESelectedSample,\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            screenName: activeTestTab,\n            activeSampleTab: activeTestTab,\n            activeTestTab,\n            sampleChangeDataState: this.state.sampleChangeDataState,\n            activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\n          };\n          this.props.getSampleChildTabDetail(inputData);\n        }\n      } //}\n\n    };\n\n    this.mandatoryFieldsForAdditionalInfo = () => {\n      let mandatoryFieldsAdditionalInfo = [];\n\n      if (this.props.Login.showMultiSelectCombo) {\n        mandatoryFieldsAdditionalInfo.push({\n          \"idsName\": this.props.Login.masterData['salertmessage'],\n          \"dataField\": \"ntestgrouptestpredefsubcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"file\"\n        });\n      } else {\n        mandatoryFieldsAdditionalInfo.push({\n          \"idsName\": this.props.Login.masterData['salertmessage'],\n          \"dataField\": \"ntestgrouptestpredefsubcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"file\"\n        });\n      }\n\n      return mandatoryFieldsAdditionalInfo;\n    };\n\n    this.defaultActions = (testChildGetREParam, RESelectedTest, RESelectedSample, setDefaultId, testskip, testtake) => {\n      const nregtypecode = this.props.Login.masterData.realRegTypeValue.nregtypecode;\n      const nregsubtypecode = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"completeTest\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'nregtypecode': nregtypecode,\n            'nregsubtypecode': nregsubtypecode,\n            'ncontrolcode': setDefaultId,\n            \"nneedReceivedInLab\": parseInt(this.props.Login.settings && this.props.Login.settings['43'])\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"default\",\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: { ...testChildGetREParam,\n            ncontrolcode: setDefaultId\n          },\n          RESelectedTest: acceptTestList,\n          RESelectedSample: RESelectedSample,\n          ndesigntemplatemappingcode: parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode)\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, setDefaultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"defaultaction\",\n              operation: \"default\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.defaultTest(inputParam.testChildGetREParam, acceptTestList, RESelectedSample, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTTEST\"\n        }));\n      }\n    };\n\n    this.formulaCalculation = dataItem => {\n      let selectedSpec = getSameRecordFromTwoArrays(this.props.Login.masterData.RESelectedSample, this.props.Login.masterData.RegistrationParameter, \"npreregno\");\n      let stransactiontestcode = \"\";\n      let transactiontestcodeforvalidation = \"\";\n      this.props.Login.masterData.RESelectedTest.map(x => {\n        stransactiontestcode += x['ntransactiontestcode'] + \",\";\n      });\n      let inputData = {\n        \"ntransactiontestcode\": stransactiontestcode.substring(0, stransactiontestcode.length - 1),\n        \"ntransactionresultcode\": dataItem.ntransactionresultcode,\n        \"ntestgrouptestparametercode\": dataItem.ntestgrouptestparametercode,\n        \"nispredefinedformula\": dataItem.nispredefinedformula,\n        \"nroundingdigits\": dataItem.nroundingdigits,\n        \"npredefinedformulacode\": dataItem.npredefinedformulacode,\n        \"npreregno\": dataItem.npreregno,\n        \"nallottedspeccode\": selectedSpec[0].nallottedspeccode,\n        'userinfo': this.props.Login.userInfo,\n        'transactiontestcodeforvalidation': dataItem['ntransactiontestcode'],\n        'ncontrolcode': dataItem['ncontrolcode']\n      };\n      let inputParam = {\n        classUrl: 'resultentrybysample',\n        methodUrl: \"FormulaCalculation\",\n        inputData: inputData,\n        operation: \"update\",\n        screenName: \"formulacalculation\",\n        displayName: this.props.Login.inputParam.displayName //postParam\n\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            }\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.completePopup = (testChildGetREParam, userInfo, completeResultId, testskip, testtake, validation) => {\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {};\n        let array = []; // let sectionflag = true; \n        // let tempsection = 0;\n        // let sectionvalue = 0;\n        // acceptTestList.forEach((item) => {\n        //     sectionvalue = item.nsectioncode;\n        //     if (sectionvalue !== tempsection && tempsection !== 0) {\n        //         sectionflag = false;\n        //     } else {\n        //         tempsection = sectionvalue;\n        //         if(!array.includes(tempsection)){\n        //             array.push(tempsection);\n        //         }\n\n        acceptTestList && acceptTestList.map(item => {\n          if (!array.includes(item.nsectioncode)) {\n            array.push(item.nsectioncode);\n          }\n        }); //if(sectionflag){\n\n        let Map = {\n          nregtypecode: testChildGetREParam.nregtypecode,\n          nregsubtypecode: testChildGetREParam.nregsubtypecode,\n          ncontrolcode: completeResultId,\n          nsectioncode: array.map(nsectioncode => nsectioncode).join(\",\"),\n          transactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n          RESelectedTest: acceptTestList,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake,\n          subSampleSkip: this.state.subSampleSkip,\n          subSampleTake: this.state.subSampleTake,\n          basedrulesengine: validation,\n          userinfo: userInfo,\n          // operation: 'CompletePopup',\n          \"nneedReceivedInLab\": parseInt(this.props.Login.settings && this.props.Login.settings['43'])\n        };\n        inputParam = {\n          inputData: Map\n        };\n        this.props.CompletePopupAction(inputParam); // }else {\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMESECTIONTEST\" }));\n        // }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCOMPLETE\"\n        }));\n      }\n    };\n\n    this.completeActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake, validation) => {\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"completeTest\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'ncontrolcode': completeResultId,\n            'nportalrequired': this.props.Login.masterData.realSampleTypeValue.nportalrequired,\n            \"nneedReceivedInLab\": parseInt(this.props.Login.settings && this.props.Login.settings['43']),\n            \"ninsertMaterialInventoryTrans\": parseInt(this.props.Login.settings && this.props.Login.settings['53'])\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"complete\",\n          postParamList: this.postParamList,\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: testChildGetREParam,\n          RESelectedTest: acceptTestList,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake,\n          subSampleSkip: this.state.subSampleSkip,\n          subSampleTake: this.state.subSampleTake,\n          basedrulesengine: validation,\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef,\n          nsettingcode: this.props.Login.settings && parseInt(this.props.Login.settings[45]) === transactionStatus.YES ? transactionStatus.YES : transactionStatus.NO,\n          nusercode: this.props.Login.settings && parseInt(this.props.Login.settings[45]) === transactionStatus.YES ? this.state.selectedRecordCompleteForm.nusercode.value : \"\",\n          susername: this.props.Login.settings && parseInt(this.props.Login.settings[45]) === transactionStatus.YES ? this.state.selectedRecordCompleteForm.nusercode.label : -1\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"complete\",\n              operation: \"complete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.completeTest(inputParam, acceptTestList, userInfo, completeResultId, false, {\n            basedrulesengine: validation\n          });\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCOMPLETE\"\n        }));\n      }\n    };\n\n    this.testStartActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"testInitiated\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'ncontrolcode': completeResultId,\n            'subSampleNeeded': this.props.Login.masterData.defaultRegistrationSubType.nneedsubsample,\n            'nneedmyjob': this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob,\n            'nneedjoballocation': this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\n            'NeedJobAllocationAndMyjob': parseInt(this.props.Login.settings[41]),\n            \"nneedReceivedInLab\": parseInt(this.props.Login.settings && this.props.Login.settings['43']),\n            \"nneedtestinitiate\": this.props.Login.masterData.defaultRegistrationSubType.nneedtestinitiate\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"testinitiate\",\n          postParamList: this.postParamList,\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: testChildGetREParam,\n          RESelectedTest: acceptTestList,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          progressTimerStart: true,\n          testtake: this.state.testtake\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"complete\",\n              operation: \"complete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.testStart(inputParam, acceptTestList, userInfo, completeResultId);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOINITIATE\"\n        }));\n      }\n    };\n\n    this.onSaveCheckList = (selectedRecord, userInfo, nregtypecode, nregsubtypecode) => {\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        let inputParam = {\n          \"inputData\": {\n            userinfo: userInfo\n          }\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              selectedRecord,\n              userInfo,\n              nregtypecode,\n              nregsubtypecode,\n              ndesigntemplatemappingcode,\n              operation: \"updatechecklist\",\n              inputParam\n            },\n            openModal: true,\n            operation: \"updatechecklist\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode);\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.props.Login.operation === 'testinitiate' || this.props.Login.operation === 'complete' || this.props.Login.operation === 'default' || this.props.Login.operation === \"updatechecklist\" || this.props.Login.operation === 'deleteInstrument' || this.props.Login.operation === 'createMethod' || this.props.Login.operation === 'deleteTask' || this.props.Login.operation === 'updateParameterComments' || this.props.Login.operation === 'import' || this.props.Login.operation === 'updateSection') {\n        this.props.validateEsignCredentialComplete(inputParam, \"openModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onChildDataChange = childData => {\n      if (this.props.Login.screenName === 'IDS_MATERIAL') {\n        this.setState({\n          selectedRecordMaterialForm: { ...childData\n          },\n          isMaterialInitialRender: false\n        });\n      } else if (this.props.Login.screenName === 'IDS_RESULTENTRYCOMPLETE') {\n        this.setState({\n          selectedRecordCompleteForm: { ...childData\n          },\n          isCompleteInitialRender: false\n        });\n      } else if (this.props.Login.screenName === 'IDS_INSTRUMENT') {\n        this.setState({\n          selectedRecordInstrumentForm: { ...childData\n          },\n          isInstrumentInitialRender: false\n        });\n      }\n    };\n\n    this.onInputOnChange = (event, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      switch (name) {\n        case 'ntestgroupmaterial':\n          const ntestgrouptestcode = selectedRecord.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1;\n          this.props.getREMaterialComboGet({\n            ntestgroupmaterial: selectedRecord.ntestgroupmaterial,\n            ntestgrouptestcode,\n            RESelectedTest: this.props.Login.masterData.RESelectedTest,\n            test: this.props.Login.masterData.RESelectedTest[0],\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        default:\n          this.setState({\n            selectedRecord\n          });\n      }\n    };\n\n    this.onSaveFileClick = (saveType, formRef) => {\n      const selectedImportFile = this.props.Login.masterData.selectedImportFile;\n      const acceptedFile = selectedImportFile ? selectedImportFile.sfilename : [];\n      const formData = new FormData();\n\n      if (acceptedFile && acceptedFile.length > 0) {\n        acceptedFile.forEach((file, index) => {\n          formData.append(\"uploadedFile\", file);\n        });\n        formData.append(\"filecount\", acceptedFile.length);\n      } else {\n        return toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYONEFILETOSUBMIT\"\n        }));\n      }\n\n      formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n      formData.append(\"nregtypecode\", this.props.Login.masterData.realRegTypeValue.nregtypecode);\n      formData.append(\"nregsubtypecode\", this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n      formData.append(\"ndesigntemplatemappingcode\", this.props.Login.masterData && this.props.Login.masterData.ndesigntemplatemappingcode);\n      formData.append(\"ncontrolcode\", this.props.Login.importId);\n      formData.append(\"ntransactiontestcode\", this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : -1); //formData.append(\"ntestgrouptestcode\", this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntestgrouptestcode).join(\",\") : -1);  //Commented by sonia on 05th jan 2025 for jira id:ALPD-5174\n\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        screenName: \"IDS_RESULTIMPORTFILE\"\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_RESULTIMPORTFILE\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.resultImportFile(inputParam, this.props.Login.masterData);\n      }\n    };\n\n    this.onSaveClickAdhocParam = saveType => {\n      if (Object.keys(this.state.selectedRecord).length > 0) {\n        let Map = {};\n        let testParameter = [];\n        this.state.selectedRecord && this.state.selectedRecord.nparamtercode.forEach((data, index) => testParameter.push(data.item));\n        Map[\"ntestparametercode\"] = testParameter.map(ntestgroupparamtercode => ntestgroupparamtercode.item.ntestparametercode).join(\",\");\n        Map[\"ntestgrouptestcode\"] = testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestgrouptestcode).join(\",\");\n        Map[\"ntestcode\"] = testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestcode).join(\",\");\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"npreregno\"] = this.props.Login.adhocpreregno;\n        Map[\"ntransactiontestcode\"] = this.props.Login.adhoctransactiontestcode;\n        Map[\"masterData\"] = this.props.Login.masterData;\n        Map[\"multiselecttransactiontestcode\"] = this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\");\n        Map[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData.nneedsubsample;\n        let inputParam = {\n          inputData: Map,\n          action: 'createAdhocParameter',\n          operation: \"create\",\n          methodUrl: \"AdhocParamter\",\n          classUrl: \"resultentrybysample\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.adhocId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"IDS_ADHOCPARAMETER\",\n              operation: \"adhocTestParameter\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.createAdhocParamter(inputParam);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }));\n      }\n    };\n\n    this.onsaveClickAdhocparameter = saveType => {\n      if (this.state.selectedRecordAdhocParameter && this.state.selectedRecordAdhocParameter.nparamtercode && this.state.selectedRecordAdhocParameter.nparamtercode.length > 0) {\n        let Map = {};\n        let testParameter = [];\n        this.state.selectedRecordAdhocParameter && this.state.selectedRecordAdhocParameter.nparamtercode.forEach((data, index) => testParameter.push(data.item));\n        Map[\"ntestparametercode\"] = testParameter.map(ntestgroupparamtercode => ntestgroupparamtercode.item.ntestparametercode).join(\",\");\n        Map[\"ntestgrouptestcode\"] = this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode; //testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestgrouptestcode).join(\",\");\n\n        Map[\"ntestcode\"] = testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestcode).join(\",\");\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"npreregno\"] = this.props.Login.adhocpreregno;\n        Map[\"ntransactiontestcode\"] = this.props.Login.adhoctransactiontestcode;\n        Map[\"masterData\"] = this.props.Login.masterData;\n        Map[\"multiselecttransactiontestcode\"] = this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\");\n        Map[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData.nneedsubsample;\n        Map[\"nisvisible\"] = this.state.selectedRecordAdhocParameter && this.state.selectedRecordAdhocParameter.nvisibleadhocparameter === transactionStatus.YES ? transactionStatus.YES : transactionStatus.NO;\n        Map[\"nclinicaltyperequired\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nclinicaltyperequired;\n        let inputParam = {\n          inputData: Map,\n          action: 'createAdhocTestParamter',\n          operation: \"create\",\n          methodUrl: \"AdhocTestParamter\",\n          classUrl: \"resultentrybysample\",\n          selectedRecord: { ...(this.state.selectedRecordAdhocParameter || {})\n          }\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.adhocId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"IDS_ADHOCPARAMETER\",\n              operation: \"adhocTestParameter\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.createAdhocTestParamter(inputParam);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }));\n      }\n    };\n\n    this.onDropFile = acceptedFile => {\n      this.props.Login.masterData.selectedImportFile['sfilename'] = acceptedFile;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: this.props.Login.masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFormulaInputChange = (event, index, fields) => {\n      let selectedRecord = this.state.selectedRecord;\n      let selectedForumulaInput = this.state.selectedRecord.selectedForumulaInput || [];\n      let selectedMandatory = this.state.selectedRecord.selectedMandatory || [];\n      let dynamicformulafields = {};\n\n      if (event) {\n        if (fields.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER) {\n          const value = event.target.value.replace(/[^-^0-9]/g, '');\n\n          if (/^-?\\d*?$/.test(value) || value === \"\") {\n            if (this.state.selectedRecord.formulainput) {\n              dynamicformulafields.svalues = value;\n              dynamicformulafields.sparameter = fields.sdescription;\n              selectedForumulaInput[index] = dynamicformulafields;\n              selectedMandatory[index] = event.target.value;\n            }\n          }\n\n          selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\n          selectedRecord[\"selectedMandatory\"] = selectedMandatory;\n          this.setState({\n            selectedRecord: selectedRecord\n          });\n        } else {\n          const value = event.target.value.replace(/[^-^0-9.]/g, '');\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(value) || value === \"\") {\n            if (this.state.selectedRecord.formulainput) {\n              dynamicformulafields.svalues = value;\n              dynamicformulafields.sparameter = fields.sdescription;\n              selectedForumulaInput[index] = dynamicformulafields;\n              selectedMandatory[index] = event.target.value;\n            }\n          }\n\n          selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\n          selectedRecord[\"selectedMandatory\"] = selectedMandatory;\n          this.setState({\n            selectedRecord: selectedRecord\n          });\n        }\n      }\n    };\n\n    this.onTemplateInputChange = (event, control) => {\n      let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateComboChange = (comboData, control) => {\n      let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateDateChange = (dateData, control) => {\n      let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.viewAdditionalInfo = currentAlertResultCode => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let additionalInfo = selectedRecord['additionalInfo'];\n      let showAlertGrid = this.props.Login.showAlertGrid;\n      let additionalInfoView = this.props.Login.additionalInfoView;\n\n      if (additionalInfo[currentAlertResultCode]) {\n        showAlertGrid = true;\n        additionalInfoView = true;\n        selectedRecord['additionalResultData'] = additionalInfo[currentAlertResultCode];\n      } // this.setState({selectedRecord,additionalInfoView});\n\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: selectedRecord,\n          showAlertGrid,\n          additionalInfoView\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onModalSave = () => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let currentAlertResultCode = this.state.currentAlertResultCode || 0;\n      let currentntestgrouptestpredefcode = this.state.currentntestgrouptestpredefcode || 0;\n      let bool = this.state.selectedRecord.ResultParameter.some(x => x['ntransactionresultcode'] === currentAlertResultCode);\n\n      if (bool) {\n        this.state.selectedRecord.ResultParameter.map(Parameter => {\n          if (Parameter['ntransactionresultcode'] === currentAlertResultCode) {\n            Parameter['additionalInfoUidata'] = {\n              ntestgrouptestpredefsubcode: selectedRecord['ntestgrouptestpredefsubcode']\n            };\n\n            if (selectedRecord['ntestgrouptestpredefsubcode']) {\n              if (typeof selectedRecord['ntestgrouptestpredefsubcode'] === 'string') {\n                Parameter['additionalInfo'] = selectedRecord['ntestgrouptestpredefsubcode'];\n              } else {\n                Parameter['additionalInfo'] = \"\"; // selectedRecord['ntestgrouptestpredefsubcode'].map(x=>{ \n                //     Parameter['additionalInfo']+= x.label+\",\"  \n                // }).join('\\n')\n\n                Parameter['additionalInfo'] = selectedRecord['ntestgrouptestpredefsubcode'].map(x => x.label + \",\").join('\\n');\n                Parameter['additionalInfo'] = Parameter['additionalInfo'].substring(0, Parameter['additionalInfo'].length - 1);\n              }\n            } else {\n              Parameter['additionalInfo'] = \"\";\n              Parameter['additionalInfoUidata'] && delete Parameter['additionalInfoUidata'];\n            }\n\n            Parameter['ntestgrouptestpredefcode'] = currentntestgrouptestpredefcode;\n          }\n        });\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: selectedRecord,\n          showAlertGrid: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onskiprule = () => {\n      const startDate = this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date();\n      const endDate = this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date(); // let obj = this.covertDatetoString(startDate, endDate)\n\n      let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\n      const fromDate = obj.fromDate;\n      const toDate = obj.toDate;\n      const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode;\n      let testChildGetREParam = {\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\n        ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample && sample.ntransactionsamplecode).join(\",\"),\n        activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n        fromdate: fromDate,\n        todate: toDate,\n        testskip: this.state.testskip,\n        testtake: this.state.testtake,\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\n        //activeTabIndex: this.state.enableAutoClick ? this.state.activeTabIndex : this.state.activeTabIndex ? this.state.activeTabIndex : 1,\n        nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n        nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n      };\n      this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake, 4);\n    };\n\n    this.ontaskInputChange = (Data, name) => {\n      const selectedRecordTaskForm = this.state.selectedRecordTaskForm || [];\n      selectedRecordTaskForm[name] = Data.target.value;\n      this.setState({\n        selectedRecordTaskForm: { ...selectedRecordTaskForm\n        },\n        isTaskInitialRender: false\n      });\n    };\n\n    this.ontaskNumericChange = (numericData, numericName) => {\n      const selectedRecordTaskForm = this.state.selectedRecordTaskForm || [];\n\n      if (numericData) {\n        if (numericName !== \"scomments\") {\n          selectedRecordTaskForm[numericName] = numericData;\n        } else {\n          selectedRecordTaskForm[numericName] = numericData.target.value;\n        }\n      } else {\n        selectedRecordTaskForm[numericName] = \"\";\n      }\n\n      this.setState({\n        selectedRecordTaskForm: { ...selectedRecordTaskForm\n        },\n        isTaskInitialRender: false\n      });\n    };\n\n    this.onAdhocParameterInputChange = (Data, name) => {\n      const selectedRecordAdhocParameter = { ...this.state.selectedRecordAdhocParameter\n      } || [];\n      selectedRecordAdhocParameter[name] = Data.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      ;\n      this.setState({\n        selectedRecordAdhocParameter: { ...selectedRecordAdhocParameter\n        },\n        isAdhocParameterInitialRender: false\n      });\n    };\n\n    this.onAdhocParameterComboChange = (comboData, comboName) => {\n      const selectedRecordAdhocParameter = { ...this.state.selectedRecordAdhocParameter\n      } || [];\n\n      if (comboData) {\n        selectedRecordAdhocParameter[comboName] = comboData;\n      } else {\n        selectedRecordAdhocParameter[comboName] = [];\n      }\n\n      this.setState({\n        selectedRecordAdhocParameter: { ...selectedRecordAdhocParameter\n        },\n        isAdhocParameterInitialRender: false\n      });\n    };\n\n    this.onInputChange = (Data, name) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let currentAlertResultCode = this.state.currentAlertResultCode || 0;\n\n      if (Data) {\n        if (name === 'ntestgrouptestpredefsubcode') {// if(!selectedRecord['additionalInfo']){\n          //     selectedRecord['additionalInfo']=[] \n          // } \n          // if(selectedRecord['additionalInfo']){\n          //     selectedRecord['additionalInfo'][currentAlertResultCode]= Data.target.value\n          // } \n          // let bool=this.state.selectedRecord.ResultParameter.some(x=>x['ntransactionresultcode']===currentAlertResultCode) \n          // if(bool){\n          //   this.state.selectedRecord.ResultParameter.map(Parameter=>\n          //       {\n          //           if(Parameter['ntransactionresultcode']===currentAlertResultCode){\n          //               Parameter[\"jsondata\"]={};\n          //               Parameter['additionalInfo']=selectedRecord['additionalInfo'][currentAlertResultCode]\n          //             //   Parameter[\"jsondata\"] = { \n          //             //       ...Parameter[\"jsondata\"],\n          //             //       additionalInfo:selectedRecord['additionalInfo'][currentAlertResultCode]\n          //             //   }\n          //           }\n          //       }\n          //       );  \n          // }\n          //  selectedRecord[name] = Data.target.value;\n        } //else{\n\n\n        selectedRecord[name] = Data.target.value; //  } \n      } else {\n        selectedRecord[name] = [];\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericChange = (numericData, numericName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (numericData) {\n        if (numericName !== \"scomments\") {\n          selectedRecord[numericName] = numericData;\n        } else {\n          selectedRecord[numericName] = numericData.target.value;\n        }\n      } else {\n        selectedRecord[numericName] = \"\";\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDateChange = (dateName, dateValue) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      selectedRecord[dateName] = dateValue;\n\n      if (dateName === \"dfromdate\" || dateName === \"dtodate\") {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      let meanTestParameterList = this.state.meanTestParameterList || [];\n      let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\n\n      if (checked) {\n        const data = meanTestParameterList.map(item => {\n          item.selected = checked;\n          selectedMeanTestParam.set(item.ntransactionresultcode, item.sresult);\n          return item;\n        });\n        let selectedTestParam = \"\";\n        let selectedTestParamMean = 0;\n        let size = 0;\n\n        if (selectedMeanTestParam.size > 0) {\n          [...selectedMeanTestParam.values()].forEach(item => item !== null && item !== \"\" ? (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item, size = size + 1, selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\");\n          selectedTestParamMean = selectedTestParamMean / size;\n        }\n\n        this.setState({\n          meanTestParameterList: data,\n          selectedMeanTestParam,\n          selectedTestParam,\n          testMean: selectedTestParamMean,\n          selectAll: checked\n        });\n      } else {\n        const data = meanTestParameterList.map(item => {\n          item.selected = checked;\n          return item;\n        });\n        this.setState({\n          meanTestParameterList: data,\n          selectedMeanTestParam: new Map(),\n          selectedTestParam: \"\",\n          testMean: \"\",\n          selectAll: checked\n        });\n      }\n    };\n\n    this.selectionChange = event => {\n      let meanTestParameterList = this.state.meanTestParameterList || [];\n      let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\n      meanTestParameterList.map(item => {\n        if (item.ntransactionresultcode === event.dataItem.ntransactionresultcode) {\n          item.selected = !event.dataItem.selected;\n        }\n\n        return item;\n      });\n\n      if (event.dataItem.selected) {\n        selectedMeanTestParam.set(event.dataItem.ntransactionresultcode, event.dataItem.sresult);\n      } else {\n        if (selectedMeanTestParam.has(event.dataItem.ntransactionresultcode)) {\n          selectedMeanTestParam.delete(event.dataItem.ntransactionresultcode);\n        }\n      }\n\n      let selectedTestParam = \"\";\n      let selectedTestParamMean = 0;\n      let size = 0;\n\n      if (selectedMeanTestParam.size > 0) {\n        [...selectedMeanTestParam.values()].forEach(item => item !== null && item !== \"\" ? (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item, size = size + 1, selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\");\n        selectedTestParamMean = selectedTestParamMean / size;\n      }\n\n      this.setState({\n        meanTestParameterList,\n        selectedMeanTestParam,\n        selectedTestParam,\n        testMean: selectedTestParamMean,\n        selectAll: this.valiateCheckAll(meanTestParameterList)\n      });\n    };\n\n    this.onMeanComboChange = (comboData, comboName) => {\n      const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\n      selectedMeanTestParam[comboName] = comboData[0];\n      let data = \"\";\n\n      if (selectedMeanTestParam[\"parametervalue\"] === undefined) {\n        data = comboData[0].value;\n      } else {\n        data = selectedMeanTestParam[\"parametervalue\"] + \"+\" + comboData[0].value;\n      }\n\n      selectedMeanTestParam[\"parametervalue\"] = data;\n      this.setState({\n        selectedMeanTestParam\n      });\n    };\n\n    this.onMaterialComboChange = (comboData, comboName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      const ntestgrouptestcode = selectedRecord.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1;\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData; //this.setState({ selectedRecord });\n      } else {\n        selectedRecord[comboName] = []; //this.setState({ selectedRecord });\n      }\n\n      switch (comboName) {\n        case 'nmaterialtypecode':\n          this.props.getREMaterialCategoryByType({\n            ntestgrouptestcode,\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        case 'nmaterialcatcode':\n          selectedRecord['nsectioncode'] = selectedRecord.nmaterialcatcode.item.needSectionwise == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].nsectioncode : -1;\n          this.props.getREMaterialByCategory({\n            ntestgrouptestcode,\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        case 'nmaterialcode':\n          this.props.getREMaterialInvertoryByMaterial({\n            ntestgrouptestcode,\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        default:\n          this.props.getAvailableMaterialQuantity({\n            ntestgrouptestcode,\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n      }\n    };\n\n    this.onComboChange = (comboData, comboName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let currentAlertResultCode = this.state.currentAlertResultCode || 0;\n\n      if (comboData) {\n        // if(comboName==='ntestgrouptestpredefsubcode'){\n        //     if(!selectedRecord['additionalInfo']){\n        //         selectedRecord['additionalInfo']=[] \n        //     }  \n        //         selectedRecord['additionalInfo'][currentAlertResultCode]=\"\"\n        //         comboData.map(x=>{ \n        //             selectedRecord['additionalInfo'][currentAlertResultCode]+= x.label+\",\"//+<br/> \n        //         })\n        //         selectedRecord['additionalInfo'][currentAlertResultCode]=selectedRecord['additionalInfo'][currentAlertResultCode].substring(0,\n        //             selectedRecord['additionalInfo'][currentAlertResultCode].length-1) \n        // } \n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const selectedsubcode = [];\n\n      if (comboData !== null) {\n        switch (caseNo) {\n          case 1:\n            selectedRecord[fieldName] = comboData;\n            delete selectedRecord[\"ResultParameter\"];\n            this.setState({\n              selectedsubcode\n            });\n            this.props.resultEntryGetComponent(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo, this.props.Login.ncontrolcode, this.state.testskip, this.state.testtake);\n            break;\n\n          case 2:\n            selectedRecord[fieldName] = comboData;\n            delete selectedRecord[\"ResultParameter\"];\n            this.setState({\n              selectedsubcode\n            });\n            this.props.resultEntryGetParameter(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo, this.props.Login.ncontrolcode, this.state.testskip, this.state.testtake);\n            break;\n\n          default:\n            break;\n        }\n      } // else {\n      //   if (selectedRecord[\"nsectioncode\"]) {\n      //     delete selectedRecord[\"nsectioncode\"];\n      //     delete selectedRecord[\"nusercode\"];\n      //   }\n      //   const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord,selectedsubcode:undefined }\n      //   }\n      //   this.props.updateStore(updateInfo);\n      // }\n\n    };\n\n    this.onGradeEvent = (ResultParameter, index, parameter) => {\n      if (ResultParameter.length > 0 && ResultParameter[index] !== undefined && ResultParameter[index].sresult !== null) {\n        let selectedRecord = this.state.selectedRecord || [];\n        let selectedResultGrade = this.state.selectedRecord.selectedResultGrade || [];\n\n        if (parameter.nparametertypecode === parameterType.NUMERIC) {\n          selectedResultGrade[index] = {\n            ngradecode: ResultParameter[index].sresult !== \"\" ? numericGrade(parameter, numberConversion(parseFloat(ResultParameter[index].sresult), parseInt(parameter.nroundingdigits))) : -1\n          };\n        }\n\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n          if (ResultParameter[index].sresult !== null) {\n            selectedResultGrade[index] = {\n              ngradecode: ResultParameter[index].ngradecode\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: 0\n            };\n          }\n        }\n\n        if (parameter.nparametertypecode === parameterType.CHARACTER) {\n          if (ResultParameter[index].sresult !== null && ResultParameter[index].sresult.trim() !== \"\") {\n            //selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\n            selectedResultGrade[index] = {\n              ngradecode: 4\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: -1\n            };\n          }\n        } //this.props.Login.masterData[\"selectedResultGrade\"] = selectedResultGrade;\n\n\n        selectedRecord.selectedResultGrade = selectedResultGrade;\n        this.setState({\n          selectedRecord\n        }); // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: { masterData: this.props.Login.masterData }\n        // }\n        // this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = [...this.props.Login.masterData.RE_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, selectedTestList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subSampleTake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleComments(saveParam, acceptList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let {\n        testskip,\n        testtake,\n        skip,\n        take\n      } = this.state;\n      let testList = [...this.props.Login.masterData.RE_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let sampleList = [...this.props.Login.masterData.RE_SAMPLE];\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestAttachment(saveParam, selectedTestList);\n      } else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.RESelectedSubSample);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n      }\n    };\n\n    this.onKeyPress = (event, index, paremterResultcode) => {\n      if (event.keyCode === 13) {\n        for (let i = 0; i < event.target.form.elements.length; i++) {\n          if (parseInt(event.target.form.elements[i].id) === paremterResultcode[index + 1]) {\n            event.target.form.elements[i].focus();\n            break;\n          }\n        }\n\n        event.preventDefault();\n      }\n    };\n\n    this.onResultInputChange = parameterResults => {\n      this.setState({\n        parameterResults: [...parameterResults],\n        isParameterInitialRender: false // currentAlertResultCode,\n        //  currentntestgrouptestpredefcode\n\n      });\n    };\n\n    this.onSampleAdd = selectedsubcode => {\n      this.setState({\n        selectedsubcode: [...selectedsubcode],\n        isaddSampleRender: false // currentAlertResultCode,\n        //  currentntestgrouptestpredefcode\n\n      });\n    };\n\n    this.onSaveMean = saveType => {\n      const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n      const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n      let resultParameter = this.props.Login.selectedTestParameterMean || {}; //let resultParameter = { };\n\n      resultParameter[\"ncalculatedresult\"] = 4;\n      resultParameter[\"sresult\"] = this.state.testMean;\n      resultParameter[\"sfinal\"] = numberConversion(parseFloat(this.state.testMean), parseInt(resultParameter.nroundingdigit));\n      resultParameter[\"ngradecode\"] = numericGrade(resultParameter, parseInt(this.state.testMean));\n      resultParameter['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n      resultParameter['nenteredby'] = this.props.Login.userInfo.nusercode; // resultParameter['ntransactionresultcode'] = meanParameter.ntransactionresultcode;\n      // resultParameter['ntransactiontestcode'] = meanParameter.ntransactiontestcode;\n      // resultParameter['nparametertypecode'] = meanParameter.nparametertypecode;\n      //console.log(\"result:\", resultParameter);\n\n      const formData = new FormData();\n      formData.append(\"filecount\", 0);\n      formData.append(\"nregtypecode\", nregtypecode);\n      formData.append(\"nregsubtypecode\", nregsubtypecode);\n      formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\n      formData.append(\"transactiontestcode\", resultParameter.ntransactiontestcode); //formData.append(\"resultData\", JSON.stringify([resultParameter]));\n\n      formData.append(\"resultData\", resultParameter);\n      const inputParam = {\n        classUrl: \"resultentrybysample\",\n        methodUrl: \"TestParameterResult\",\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: \"update\",\n        displayName: this.props.Login.inputParam.displayName,\n        saveType\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.editpredefinedcomments = dataItem => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName: \"IDS_RESULTPARAMETERCOMMENTS\",\n          openModal: true,\n          selectedRecord: {\n            'sresultcomment': dataItem['sresultcomment'],\n            'selectedPredefinedComments': dataItem\n          },\n          operation: \"update\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.enforceResult = dataItem => {\n      let inputParam = {};\n      inputParam = {\n        dataItem: dataItem,\n        masterData: this.props.Login.masterData,\n        screenName: \"IDS_ENFORCERESULT\",\n        openModal: true,\n        operation: \"update\",\n        ncontrolcode: dataItem['ncontrolcode']\n      };\n      this.props.enforceResult(inputParam, this.props.Login.userInfo);\n    };\n\n    this.onSavePredefinedComments = saveType => {\n      let inputParam = {};\n      let stransactiontestcode = \"\";\n      this.props.Login.masterData.RESelectedTest.map(x => {\n        stransactiontestcode += x['ntransactiontestcode'] + \",\";\n      });\n      let inputData = {\n        'selectedPredefinedComments': this.state.selectedRecord['selectedPredefinedComments'],\n        'ntransactionresultcode': this.state.selectedRecord['selectedPredefinedComments']['ntransactionresultcode'],\n        'sresultcomment': this.state.selectedRecord['sresultcomment'],\n        'ntransactiontestcode': stransactiontestcode.substring(0, stransactiontestcode.length - 1),\n        //this.state.selectedRecord['selectedPredefinedComments']['ntransactiontestcode'],\n        'userinfo': this.props.Login.userInfo\n      };\n      inputParam = {\n        classUrl: 'resultentrybysample',\n        methodUrl: \"PredefinedComments\",\n        inputData: inputData,\n        //    isFileupload: false,\n        //  activeTestKey: \"IDS_INSTRUMENT\",\n        operation: this.props.Login.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        saveType //postParam\n\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveEnforceResult = saveType => {\n      let inputParam = {};\n      let stransactiontestcode = \"\";\n      const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n      const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode); // this.props.Login.masterData.RESelectedTest.map(x=>{ \n      //     stransactiontestcode+=x['ntransactiontestcode']+\",\"\n      // }\n      //   )\n\n      let inputData = {\n        'ResultParameter': {\n          //  ngradecode:this.state.selectedRecord['ngradecode'].value,\n          nparametertypecode: parameterType.CHARACTER,\n          sfinal: this.state.selectedRecord['senforceresult'],\n          senforceresultcomment: this.state.selectedRecord['senforceresultcomment'],\n          ntransactiontestcode: this.state.selectedRecord['ntransactiontestcode'],\n          ntransactionresultcode: this.state.selectedRecord['ntransactionresultcode']\n        },\n        'ntransactionresultcode': this.state.selectedRecord['ntransactionresultcode'],\n        \"nregtypecode\": nregtypecode,\n        \"nregsubtypecode\": nregsubtypecode,\n        \"ndesigntemplatemappingcode\": ndesigntemplatemappingcode,\n        'userinfo': this.props.Login.userInfo\n      };\n      inputParam = {\n        classUrl: 'resultentrybysample',\n        methodUrl: \"EnforceResult\",\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        saveType //postParam\n\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveClick = (saveType, data) => {\n      if (this.props.Login.screenName === \"IDS_MEANPARAMETER\") {\n        this.onSaveMean(saveType);\n      } else if (this.props.Login.screenName === \"IDS_RESULTPARAMETERCOMMENTS\") {\n        this.onSavePredefinedComments(saveType);\n      } else if (this.props.Login.screenName === \"IDS_ENFORCERESULT\") {\n        this.onSaveEnforceResult(saveType);\n      } else if (this.props.Login.screenName === \"IDS_RESULTENTRYCOMPLETE\") {\n        const startDate = this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date();\n        const endDate = this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date();\n        let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\n        const fromDate = obj.fromDate;\n        const toDate = obj.toDate;\n        const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode;\n        let testChildGetREParam = {\n          masterData: this.props.Login.masterData,\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n          nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n          napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n          ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n          ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n          npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample && sample.ntransactionsamplecode).join(\",\"),\n          activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n          fromdate: fromDate,\n          todate: toDate,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake,\n          resultDataState: this.state.resultDataState,\n          instrumentDataState: this.state.instrumentDataState,\n          materialDataState: this.state.materialDataState,\n          taskDataState: this.state.taskDataState,\n          documentDataState: this.state.documentDataState,\n          resultChangeDataState: this.state.resultChangeDataState,\n          testCommentDataState: this.state.testCommentDataState,\n          ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n          activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\n          nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n          nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n        };\n        this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake, 3);\n      } else if (this.props.Login.screenName === \"IDS_SECTION\") {\n        this.onSaveSection(saveType);\n      } else {\n        let ResultParameter = this.state.parameterResults; //this.props.Login.parameterResults\n        //let ResultParameter = this.state.selectedRecord.ResultParameter || [];\n        //    let ResultParameter = this.props.Login.parameterResults || [];\n        // let ResultParameter = saveType.parameterResults || [];\n\n        let selectedRecord = this.state.selectedRecord || {};\n        let selectedRecordMaterialForm = this.state.selectedRecordMaterialForm || {};\n        let selectedRecordInstrumentForm = this.state.selectedRecordInstrumentForm || {};\n        let selectedRecordTaskForm = this.state.selectedRecordTaskForm || {};\n        let selectedId = this.props.Login.selectedId || null;\n        let additionalInfo = this.state.selectedRecord.additionalInfo || [];\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n        const classUrl = \"resultentrybysample\";\n        const formData = new FormData();\n        let neditable = 0;\n        let resultParameters = [];\n        let inputParam = {};\n        let inputData = [];\n        let i = 0;\n        let j = 0; //const postParam = {inputListName: \"RESelectedTest\", selectedObject: \"RESelectedTest\", primaryKeyField: \"ntransactionstestcode\" };\n\n        if (this.props.Login.screenName === \"IDS_RESULTENTRY\") {\n          if (ResultParameter.length > 0 && ResultParameter !== undefined) {\n            ResultParameter.map((resultData, index) => {\n              let results = {};\n\n              if (resultData.editable === true) {\n                neditable = 1;\n\n                switch (resultData.nparametertypecode) {\n                  case 1:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: resultData[\"ncalculatedresult\"],\n                      sresult: resultData.sresult,\n                      sfinal: resultData.sresult !== \"\" ? resultData.sresult.includes('e') ? resultData.sresult : numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\",\n                      ngradecode: resultData.sresult !== \"\" ? numericGrade(resultData, results[\"sfinal\"]) : -1,\n                      nresultaccuracycode: resultData.resultaccuracycode ? resultData.resultaccuracycode.value : -1,\n                      sresultaccuracyname: resultData.resultaccuracycode ? resultData.resultaccuracycode.label : \"\",\n                      nunitcode: resultData.unitcode.value,\n                      sunitname: resultData.unitcode.label\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"sfinal\"] = resultData.sresult !== \"\" ? resultData.sresult.includes('e') ? resultData.sresult : numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\n                    results[\"ngradecode\"] = resultData.sresult !== \"\" ? numericGrade(resultData, results[\"sfinal\"]) : -1;\n                    results[\"nunitcode\"] = resultData.unitcode.value;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 2:\n                    if (resultData['additionalInfoUidata'] !== undefined && resultData['additionalInfoUidata'] !== null && resultData['additionalInfoUidata'].hasOwnProperty('ntestgrouptestpredefsubcode')) {\n                      if (typeof resultData['additionalInfoUidata']['ntestgrouptestpredefsubcode'] === 'string') {\n                        resultData['additionalInfoUidata']['ntestgrouptestpredefsubcode'] = Lims_JSON_stringify(resultData['additionalInfoUidata']['ntestgrouptestpredefsubcode'], false);\n                      } else {\n                        resultData['additionalInfoUidata']['ntestgrouptestpredefsubcode'].length > 0 && resultData['additionalInfoUidata']['ntestgrouptestpredefsubcode'].map(item => {\n                          item['label'] = Lims_JSON_stringify(item['label'], false);\n                          item['item']['ssubcodedresult'] = Lims_JSON_stringify(item['item']['ssubcodedresult'], false);\n                        });\n                      }\n                    }\n\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: 4,\n                      sresult: Lims_JSON_stringify(replaceBackSlash(resultData.sresult)),\n                      sfinal: Lims_JSON_stringify(replaceBackSlash(resultData.sfinal)),\n                      sresultcomment: resultData.sresultcomment === 'null' ? \"-\" : Lims_JSON_stringify(resultData.sresultcomment),\n                      salertmessage: Lims_JSON_stringify(resultData.salertmessage, false),\n                      additionalInfo: resultData['additionalInfo'] !== null ? Lims_JSON_stringify(resultData['additionalInfo'], false) : resultData['additionalInfo'],\n                      additionalInfoUidata: resultData['additionalInfoUidata'] === undefined ? \"\" : resultData['additionalInfoUidata'],\n                      ntestgrouptestpredefcode: resultData.ntestgrouptestpredefcode\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"ncalculatedresult\"] = 4;\n                    results[\"sfinal\"] = resultData.sresult;\n                    results[\"ngradecode\"] = resultData.ngradecode;\n                    results[\"nunitcode\"] = -1;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 3:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: 4,\n                      sresult: Lims_JSON_stringify(replaceBackSlash(resultData.sresult)),\n                      sfinal: Lims_JSON_stringify(replaceBackSlash(resultData.sresult))\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"ncalculatedresult\"] = 4;\n                    results[\"sfinal\"] = resultData.sresult;\n                    results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : ResultEntryGrade.RESULTSTATUS_FIO;\n                    results[\"nunitcode\"] = -1;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 4:\n                    if (resultData.sfinal.length > 0) {\n                      const splittedFileName = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\n                      const fileExtension = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\n                      const uniquefilename = create_UUID() + '.' + fileExtension;\n                      results[\"jsondata\"] = {\n                        ssystemfilename: uniquefilename,\n                        nfilesize: resultData.sfinal[0] && resultData.sfinal[0].size,\n                        ncalculatedresult: 4,\n                        sresult: Lims_JSON_stringify(resultData.sresult, false),\n                        sfinal: Lims_JSON_stringify(resultData.sresult, false)\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"ncalculatedresult\"] = 4;\n                      results[\"sresult\"] = resultData.sresult;\n                      results[\"sfinal\"] = resultData.sresult;\n                      results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : ResultEntryGrade.RESULTSTATUS_FIO;\n                      results[\"nunitcode\"] = -1;\n                      results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\n                      results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\n                      results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\n                      results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results[\"ssystemfilename\"] = uniquefilename;\n                      results[\"nfilesize\"] = resultData.sfinal[0] && resultData.sfinal[0].size;\n                      formData.append(\"uploadedFile\" + j, resultData.sfinal[0] && resultData.sfinal[0]);\n                      formData.append(\"uniquefilename\" + j, uniquefilename);\n                      formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\n                      i++;\n                      j++;\n                    } else {\n                      const splittedFileName = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\n                      const fileExtension = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\n                      const uniquefilename = \"\";\n                      results[\"jsondata\"] = {\n                        ssystemfilename: uniquefilename,\n                        nfilesize: resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].size : \"\",\n                        ncalculatedresult: 4,\n                        sresult: \"\",\n                        sfinal: \"\"\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"ncalculatedresult\"] = 4;\n                      results[\"sresult\"] = \"\";\n                      results[\"sfinal\"] = \"\";\n                      results[\"ngradecode\"] = -1;\n                      results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\n                      results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\n                      results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\n                      results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results[\"ssystemfilename\"] = \"\";\n                      results[\"nfilesize\"] = \"\";\n                      formData.append(\"uploadedFile\" + index, \"\");\n                      formData.append(\"uniquefilename\" + index, \"\");\n                      formData.append(\"ntransactiontestcode\", \"\");\n                    }\n\n                    break;\n\n                  default:\n                    break;\n                }\n\n                if (Object.values(results).length > 0) {\n                  resultParameters.push(results);\n                }\n              }\n\n              return null;\n            });\n\n            if (neditable === 0) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loading: false,\n                  openModal: false,\n                  parameterResults: [],\n                  selectedRecord: {}\n                }\n              };\n              return this.props.updateStore(updateInfo);\n            }\n\n            formData.append(\"filecount\", i);\n            formData.append(\"nregtypecode\", nregtypecode);\n            formData.append(\"nregsubtypecode\", nregsubtypecode);\n            formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\n            formData.append(\"ndesigntemplatemappingcode\", ndesigntemplatemappingcode);\n            formData.append(\"resultData\", JSON.stringify(resultParameters));\n            const tests = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\";\n            formData.append(\"transactiontestcode\", tests); //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\n\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"TestParameterResult\",\n              inputData: {\n                userinfo: this.props.Login.userInfo\n              },\n              formData: formData,\n              isFileupload: true,\n              operation: \"update\",\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //, postParam\n\n            };\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loading: false,\n                openModal: false\n              }\n            };\n            return this.props.updateStore(updateInfo);\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_RESULTENTRYPARAMETER\") {\n          if (this.state.selectedsubcode && this.state.selectedsubcode.length > 0 && this.state.selectedsubcode !== undefined) {\n            if (ResultParameter.length > 0 && ResultParameter !== undefined) {\n              ResultParameter.map((resultData, index) => {\n                let results = {};\n\n                if (resultData.editable === true) {\n                  neditable = 1;\n\n                  switch (resultData.nparametertypecode) {\n                    case 1:\n                      results[\"jsondata\"] = {\n                        ncalculatedresult: resultData[\"ncalculatedresult\"],\n                        sresult: resultData.sresult,\n                        sfinal: resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\"\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\n                      results[\"sresult\"] = resultData.sresult;\n                      results[\"sfinal\"] = resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\n                      results[\"ngradecode\"] = resultData.sresult !== \"\" ? numericGrade(resultData, results[\"sfinal\"]) : -1;\n                      results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                      results['nenteredby'] = this.props.Login.userInfo.nusercode; //results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                      //results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\n                      break;\n\n                    case 2:\n                      results[\"jsondata\"] = {\n                        ncalculatedresult: 4,\n                        sresult: Lims_JSON_stringify(resultData.sresult, false),\n                        sfinal: Lims_JSON_stringify(resultData.sfinal, false),\n                        sresultcomment: resultData.sresultcomment === 'null' ? \"-\" : resultData.sresultcomment,\n                        salertmessage: resultData.salertmessage,\n                        additionalInfo: resultData['additionalInfo'],\n                        additionalInfoUidata: resultData['additionalInfoUidata'] === undefined ? \"\" : resultData['additionalInfoUidata'],\n                        ntestgrouptestpredefcode: resultData.ntestgrouptestpredefcode\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"sresult\"] = resultData.sresult;\n                      results[\"ncalculatedresult\"] = 4;\n                      results[\"sfinal\"] = resultData.sresult;\n                      results[\"ngradecode\"] = resultData.ngradecode;\n                      results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                      results['nenteredby'] = this.props.Login.userInfo.nusercode; //results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                      //results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\n                      break;\n\n                    case 3:\n                      results[\"jsondata\"] = {\n                        ncalculatedresult: 4,\n                        sresult: Lims_JSON_stringify(resultData.sresult, false),\n                        sfinal: Lims_JSON_stringify(resultData.sresult, false)\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"sresult\"] = resultData.sresult;\n                      results[\"ncalculatedresult\"] = 4;\n                      results[\"sfinal\"] = resultData.sresult;\n                      results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : ResultEntryGrade.RESULTSTATUS_FIO;\n                      results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                      results['nenteredby'] = this.props.Login.userInfo.nusercode; //results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                      //results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\n                      break;\n\n                    case 4:\n                      if (resultData.sfinal.length > 0) {\n                        const splittedFileName = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\n                        const fileExtension = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\n                        const uniquefilename = create_UUID() + '.' + fileExtension;\n                        results[\"jsondata\"] = {\n                          ssystemfilename: uniquefilename,\n                          nfilesize: resultData.sfinal[0] && resultData.sfinal[0].size,\n                          ncalculatedresult: 4,\n                          sresult: Lims_JSON_stringify(resultData.sresult, false),\n                          sfinal: Lims_JSON_stringify(resultData.sresult, false)\n                        };\n                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                        results[\"ncalculatedresult\"] = 4;\n                        results[\"sresult\"] = resultData.sresult;\n                        results[\"sfinal\"] = resultData.sresult;\n                        results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : ResultEntryGrade.RESULTSTATUS_FIO;\n                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\n                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode; //results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\n                        //results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\n\n                        results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\n                        results['nparametertypecode'] = resultData.nparametertypecode;\n                        results[\"ssystemfilename\"] = uniquefilename;\n                        results[\"nfilesize\"] = resultData.sfinal[0] && resultData.sfinal[0].size;\n                        formData.append(\"uploadedFile\" + index, resultData.sfinal[0] && resultData.sfinal[0]);\n                        formData.append(\"uniquefilename\" + index, uniquefilename); //formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\n\n                        i++;\n                      } else {\n                        const splittedFileName = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\n                        const fileExtension = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\n                        const uniquefilename = \"\";\n                        results[\"jsondata\"] = {\n                          ssystemfilename: uniquefilename,\n                          nfilesize: resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].size : \"\",\n                          ncalculatedresult: 4,\n                          sresult: \"\",\n                          sfinal: \"\"\n                        };\n                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                        results[\"ncalculatedresult\"] = 4;\n                        results[\"sresult\"] = \"\";\n                        results[\"sfinal\"] = \"\";\n                        results[\"ngradecode\"] = -1;\n                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\n                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode; //results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\n                        //results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\n\n                        results['nparametertypecode'] = resultData.nparametertypecode;\n                        results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\n                        results[\"ssystemfilename\"] = \"\";\n                        results[\"nfilesize\"] = \"\";\n                        formData.append(\"uploadedFile\" + index, \"\");\n                        formData.append(\"uniquefilename\" + index, \"\"); //formData.append(\"ntransactiontestcode\", \"\");\n                      }\n\n                      break;\n\n                    default:\n                      break;\n                  }\n\n                  if (Object.values(results).length > 0) {\n                    resultParameters.push(results);\n                  }\n                }\n\n                return null;\n              });\n\n              if (neditable === 0) {\n                const updateInfo = {\n                  typeName: DEFAULT_RETURN,\n                  data: {\n                    loading: false,\n                    openModal: false,\n                    parameterResults: [],\n                    selectedRecord: {}\n                  }\n                };\n                return this.props.updateStore(updateInfo);\n              }\n\n              formData.append(\"filecount\", i);\n              formData.append(\"nregtypecode\", nregtypecode);\n              formData.append(\"nregsubtypecode\", nregsubtypecode);\n              formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\n              formData.append(\"ndesigntemplatemappingcode\", ndesigntemplatemappingcode);\n              formData.append(\"resultData\", JSON.stringify(resultParameters));\n              const tests = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\";\n              const sampleid = this.state.selectedsubcode ? this.state.selectedsubcode.map(test => test.ssampleid).join(\"','\") : \"\";\n              formData.append(\"transactiontestcode\", tests);\n              formData.append(\"sampleid\", sampleid);\n              formData.append(\"ntestcode\", this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode);\n              formData.append(\"nallottedspeccode\", this.state.selectedRecord.nallottedspeccode.value);\n              formData.append(\"nspecsampletypecode\", this.state.selectedRecord.ncomponentcode.value); //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\n\n              inputParam = {\n                classUrl: classUrl,\n                methodUrl: \"MultiSampleTestParameterResult\",\n                inputData: {\n                  userinfo: this.props.Login.userInfo\n                },\n                formData: formData,\n                isFileupload: true,\n                operation: \"update\",\n                displayName: this.props.Login.inputParam.displayName,\n                saveType //, postParam\n\n              };\n            } else {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loading: false,\n                  openModal: false\n                }\n              };\n              return this.props.updateStore(updateInfo);\n            }\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loading: false\n              }\n            };\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ADDSAMPLE\"\n            }));\n            return this.props.updateStore(updateInfo);\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_TESTMETHODSOURCE\") {\n          inputData = {\n            ntype: 3,\n            nflag: 3,\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n            nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n            ntranscode: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString(),\n            ntestcode: this.props.Login.masterData.realTestcodeValue.ntestcode,\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n            nmethodcode: selectedRecord.nmethodcode.value,\n            nsourcecode: selectedRecord.nsourcecode.value,\n            ntransactiontestcode: selectedRecord.ntransactiontestcode,\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: \"IDS_RESULTS\",\n            ncontrolcode: this.props.Login.ncontrolcode\n          }; // inputParam = {\n          //     classUrl: classUrl,\n          //     methodUrl: \"TestMethodSource\",\n          //     inputData: inputData,\n          //     isFileupload: false,\n          //     operation: \"update\",\n          //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\n          // }\n\n          this.updateTestMethodSource(inputData, this.props.Login.masterData, this.props.Login.ncontrolcode);\n          return;\n        }\n\n        if (this.props.Login.screenName === \"IDS_INSTRUMENT\") {\n          //ALPD-5032 added by Dhanushya RI,To insert and jsonObject when add or edit instrument    \n          let inputData = {};\n          inputData[\"InstrumentJson\"] = {};\n\n          if (selectedRecordInstrumentForm) {\n            inputData[\"InstrumentJson\"] = {\n              \"InstrumentCategory\": {\n                label: selectedRecordInstrumentForm.ninstrumentcatcode.label,\n                value: selectedRecordInstrumentForm.ninstrumentcatcode.value\n              },\n              \"InstrumentName\": {\n                label: selectedRecordInstrumentForm.ninstrumentnamecode && selectedRecordInstrumentForm.ninstrumentnamecode.label || 'NA',\n                value: selectedRecordInstrumentForm.ninstrumentnamecode && selectedRecordInstrumentForm.ninstrumentnamecode.value || -1\n              },\n              \"InstrumentId\": {\n                label: selectedRecordInstrumentForm.ninstrumentcode && selectedRecordInstrumentForm.ninstrumentcode.label || 'NA',\n                value: selectedRecordInstrumentForm.ninstrumentcode && selectedRecordInstrumentForm.ninstrumentcode.value || -1\n              },\n              \"InstrumentStartDate\": selectedRecordInstrumentForm.dfromdate ? convertDateTimetoStringDBFormat(selectedRecordInstrumentForm.dfromdate, this.props.Login.userInfo) : \"\",\n              \"InstrumentEndDate\": selectedRecordInstrumentForm.dtodate ? convertDateTimetoStringDBFormat(selectedRecordInstrumentForm.dtodate, this.props.Login.userInfo) : \"\"\n            };\n          }\n\n          if (this.props.Login.operation === \"update\") {\n            inputData = {\n              ResultUsedInstrument: {\n                nresultusedinstrumentcode: selectedRecordInstrumentForm.nresultusedinstrumentcode,\n                npreregno: selectedRecordInstrumentForm.npreregno,\n                ninstrumentcatcode: selectedRecordInstrumentForm.ninstrumentcatcode.value,\n                ninstrumentnamecode: selectedRecordInstrumentForm.ninstrumentnamecode.value,\n                ninstrumentcode: selectedRecordInstrumentForm.ninstrumentcode.value,\n                dfromdate: formatInputDate(selectedRecordInstrumentForm.dfromdate, false),\n                dtodate: formatInputDate(selectedRecordInstrumentForm.dtodate, false),\n                stzfromdate: selectedRecordInstrumentForm.ntzfromdate.label,\n                stztodate: selectedRecordInstrumentForm.ntztodate.label,\n                ntzfromdate: selectedRecordInstrumentForm.ntzfromdate.value,\n                ntztodate: selectedRecordInstrumentForm.ntztodate.value,\n                ntransactiontestcode: selectedRecordInstrumentForm.ntransactiontestcode\n              },\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode,\n              ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n              ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n              jsondata: JSON.stringify(inputData[\"InstrumentJson\"]) //ALPD-5032\n\n            };\n          } else {\n            inputData = {\n              ResultUsedInstrument: {\n                ntransactiontestcode: selectedRecordInstrumentForm.ntransactiontestcode,\n                npreregno: selectedRecordInstrumentForm.npreregno,\n                ninstrumentcatcode: selectedRecordInstrumentForm.ninstrumentcatcode.value,\n                ninstrumentnamecode: selectedRecordInstrumentForm.ninstrumentnamecode.value,\n                ninstrumentcode: selectedRecordInstrumentForm.ninstrumentcode.value,\n                dfromdate: formatInputDate(selectedRecordInstrumentForm.dfromdate, false),\n                dtodate: formatInputDate(selectedRecordInstrumentForm.dtodate, false),\n                stzfromdate: selectedRecordInstrumentForm.ntzfromdate.label,\n                stztodate: selectedRecordInstrumentForm.ntztodate.label,\n                ntzfromdate: selectedRecordInstrumentForm.ntzfromdate.value,\n                ntztodate: selectedRecordInstrumentForm.ntztodate.value\n              },\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode,\n              jsondata: JSON.stringify(inputData[\"InstrumentJson\"]),\n              ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n              transactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\"\n            };\n          }\n\n          inputParam = {\n            classUrl: classUrl,\n            methodUrl: \"ResultUsedInstrument\",\n            inputData: inputData,\n            selectedId,\n            isFileupload: false,\n            activeTestKey: \"IDS_INSTRUMENT\",\n            operation: this.props.Login.operation,\n            displayName: this.props.Login.inputParam.displayName,\n            saveType //postParam\n\n          };\n        }\n\n        if (this.props.Login.screenName === \"IDS_MATERIAL\") {\n          let inputData = [];\n\n          if (this.state.selectedRecordMaterialForm.nmaterialcode != \"\") {\n            if (this.state.selectedRecordMaterialForm.nmaterialinventorycode != \"\") {\n              if (parseFloat(this.state.selectedRecordMaterialForm.susedquantity) <= parseFloat(this.state.selectedRecordMaterialForm.savailablequantity)) {\n                if (this.props.Login.operation === \"update\") {\n                  inputData = {\n                    ResultUsedMaterial: {\n                      nresultusedmaterialcode: selectedRecordMaterialForm.nresultusedmaterialcode,\n                      ntransactiontestcode: selectedRecordMaterialForm.ntransactiontestcode,\n                      npreregno: selectedRecordMaterialForm.npreregno,\n                      nmaterialtypecode: selectedRecordMaterialForm.nmaterialtypecode.value,\n                      nmaterialcategorycode: selectedRecordMaterialForm.nmaterialcategorycode.value,\n                      nmaterialcode: selectedRecordMaterialForm.nmaterialcode.value,\n                      ninventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecordMaterialForm.nsectioncode,\n                      jsondata: {\n                        sarno: selectedRecordMaterialForm.sarno,\n                        ssamplearno: selectedRecordMaterialForm.ssamplearno,\n                        stestsynonym: selectedRecordMaterialForm.stestsynonym,\n                        smaterialcatname: selectedRecordMaterialForm.nmaterialcatcode.label,\n                        smaterialname: selectedRecordMaterialForm.nmaterialcode.label,\n                        sinventoryid: selectedRecordMaterialForm.nmaterialinventorycode.label,\n                        nqtyused: selectedRecordMaterialForm.susedquantity,\n                        scarriergas: selectedRecordMaterialForm.scarriergas,\n                        smobilephase: selectedRecordMaterialForm.smobilephase,\n                        sremarks: selectedRecordMaterialForm.sremarks,\n                        susername: this.props.Login.userInfo.susername,\n                        nsectioncode: selectedRecordMaterialForm.nsectioncode,\n                        ssectionname: selectedRecordMaterialForm.ssectionname,\n                        ntestgroupmaterial: selectedRecordMaterialForm.ntestgroupmaterial,\n                        ntestgrouptestcode: selectedRecordMaterialForm.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1\n                      }\n                    },\n                    MaterialInventoryTrans: {\n                      nmaterialinventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecordMaterialForm.nsectioncode,\n                      jsondata: {\n                        IDS_INVENTORYID: selectedRecordMaterialForm.nmaterialinventorycode.label,\n                        nqtyused: selectedRecordMaterialForm.susedquantity\n                      }\n                    },\n                    userinfo: this.props.Login.userInfo,\n                    nregtypecode: nregtypecode,\n                    nregsubtypecode: nregsubtypecode,\n                    ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n                    nresultusedmaterialcode: selectedRecordMaterialForm.nresultusedmaterialcode,\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\"\n                  };\n                } else {\n                  inputData = {\n                    ResultUsedMaterial: {\n                      ntransactiontestcode: selectedRecordMaterialForm.ntransactiontestcode,\n                      npreregno: selectedRecordMaterialForm.npreregno,\n                      nmaterialtypecode: selectedRecordMaterialForm.nmaterialtypecode.value,\n                      nmaterialcategorycode: selectedRecordMaterialForm.nmaterialcatcode.value,\n                      nmaterialcode: selectedRecordMaterialForm.nmaterialcode.value,\n                      ninventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecordMaterialForm.nsectioncode,\n                      jsondata: {\n                        sarno: selectedRecordMaterialForm.sarno,\n                        ssamplearno: selectedRecordMaterialForm.ssamplearno,\n                        stestsynonym: selectedRecordMaterialForm.stestsynonym,\n                        smaterialcatname: selectedRecordMaterialForm.nmaterialcatcode.label,\n                        smaterialname: selectedRecordMaterialForm.nmaterialcode.label,\n                        sinventoryid: selectedRecordMaterialForm.nmaterialinventorycode.label,\n                        nqtyused: selectedRecordMaterialForm.susedquantity,\n                        scarriergas: selectedRecordMaterialForm.scarriergas,\n                        smobilephase: selectedRecordMaterialForm.smobilephase,\n                        sremarks: selectedRecordMaterialForm.sremarks,\n                        smaterialtypename: selectedRecordMaterialForm.nmaterialtypecode.label,\n                        nsectioncode: selectedRecordMaterialForm.nsectioncode,\n                        ntestgroupmaterial: selectedRecordMaterialForm.ntestgroupmaterial,\n                        ssectionname: selectedRecordMaterialForm.ssectionname,\n                        ntestgrouptestcode: selectedRecordMaterialForm.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1\n                      }\n                    },\n                    MaterialInventoryTrans: {\n                      nmaterialinventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecordMaterialForm.nsectioncode,\n                      jsondata: {\n                        nqtyused: selectedRecordMaterialForm.susedquantity,\n                        IDS_INVENTORYID: selectedRecordMaterialForm.nmaterialinventorycode.label\n                      }\n                    },\n                    userinfo: this.props.Login.userInfo,\n                    nregtypecode: nregtypecode,\n                    nregsubtypecode: nregsubtypecode,\n                    ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n                    transactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\"\n                  };\n                }\n\n                inputParam = {\n                  classUrl: classUrl,\n                  methodUrl: \"ResultUsedMaterial\",\n                  inputData: inputData,\n                  selectedId,\n                  isFileupload: false,\n                  activeTestKey: \"IDS_MATERIAL\",\n                  operation: this.props.Login.operation,\n                  displayName: this.props.Login.inputParam.displayName,\n                  saveType //postParam\n\n                };\n              } else {\n                toast.warn(this.props.intl.formatMessage({\n                  id: \"Quantity Not available\"\n                }));\n                return null;\n              }\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"Select Material Inventory\"\n              }));\n              return null;\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"Select Material\"\n            }));\n            return null;\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_TASK\") {\n          // if ((selectedRecord.sanalysistime && selectedRecord.sanalysistime !== \"\")\n          //     || (selectedRecord.smisctime && selectedRecord.smisctime !== \"\")\n          //     || (selectedRecord.spreanalysistime && selectedRecord.spreanalysistime !== \"\")\n          //     || (selectedRecord.spreparationtime && selectedRecord.spreparationtime !== \"\")\n          //     || (selectedRecord.scomments && selectedRecord.scomments !== \"\")) {\n          //     if (this.props.Login.operation === \"update\") {\n          if (selectedRecordTaskForm.sanalysistime && selectedRecordTaskForm.sanalysistime !== \"\" || selectedRecordTaskForm.smisctime && selectedRecordTaskForm.smisctime !== \"\" || selectedRecordTaskForm.spreanalysistime && selectedRecordTaskForm.spreanalysistime !== \"\" || selectedRecordTaskForm.spreparationtime && selectedRecordTaskForm.spreparationtime !== \"\" || selectedRecordTaskForm.scomments && selectedRecordTaskForm.scomments !== \"\") {\n            if (this.props.Login.operation === \"update\") {\n              inputData = {\n                ResultUsedTasks: {\n                  nresultusedtaskcode: selectedRecordTaskForm.nresultusedtaskcode,\n                  jsondata: {\n                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                    sarno: this.props.Login.masterData.RESelectedTest[0].sarno,\n                    ssamplearno: this.props.Login.masterData.RESelectedTest[0].ssamplearno,\n                    stestsynonym: selectedRecordTaskForm.stestsynonym,\n                    sanalysistime: selectedRecordTaskForm.sanalysistime ? selectedRecordTaskForm.sanalysistime : \"\",\n                    sanalyst: this.props.Login.userInfo.susername,\n                    smisctime: selectedRecordTaskForm.smisctime ? selectedRecordTaskForm.smisctime : \"\",\n                    spreanalysistime: selectedRecordTaskForm.spreanalysistime ? selectedRecordTaskForm.spreanalysistime : \"\",\n                    spreparationtime: selectedRecordTaskForm.spreparationtime ? selectedRecordTaskForm.spreparationtime : \"\",\n                    staskprocedure: selectedRecordTaskForm.staskprocedure ? selectedRecordTaskForm.staskprocedure : \"\",\n                    scomments: selectedRecordTaskForm.scomments ? selectedRecordTaskForm.scomments : \"\"\n                  }\n                },\n                userinfo: this.props.Login.userInfo,\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\n                nregtypecode: nregtypecode,\n                nregsubtypecode: nregsubtypecode,\n                ndesigntemplatemappingcode: ndesigntemplatemappingcode\n              };\n            } else {\n              let taskArry = [];\n              this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(test => taskArry.push({\n                //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                ntransactiontestcode: parseInt(test.ntransactiontestcode),\n                npreregno: parseInt(test.npreregno),\n                // sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\n                // sanalyst: this.props.Login.userInfo.susername,\n                // smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\n                // spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\n                // spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\n                // scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\",\n                // npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n                jsondata: {\n                  //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                  sarno: test.sarno,\n                  ssamplearno: test.ssamplearno,\n                  stestsynonym: test.stestsynonym,\n                  sanalysistime: selectedRecordTaskForm.sanalysistime ? selectedRecordTaskForm.sanalysistime : \"\",\n                  sanalyst: this.props.Login.userInfo.susername,\n                  smisctime: selectedRecordTaskForm.smisctime ? selectedRecordTaskForm.smisctime : \"\",\n                  spreanalysistime: selectedRecordTaskForm.spreanalysistime ? selectedRecordTaskForm.spreanalysistime : \"\",\n                  spreparationtime: selectedRecordTaskForm.spreparationtime ? selectedRecordTaskForm.spreparationtime : \"\",\n                  staskprocedure: selectedRecordTaskForm.staskprocedure ? selectedRecordTaskForm.staskprocedure : \"\",\n                  scomments: selectedRecordTaskForm.scomments ? selectedRecordTaskForm.scomments : \"\"\n                }\n              }));\n              inputData = {\n                ResultUsedTasks: taskArry,\n                userinfo: this.props.Login.userInfo,\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\n                nregtypecode: nregtypecode,\n                nregsubtypecode: nregsubtypecode,\n                ndesigntemplatemappingcode: ndesigntemplatemappingcode\n              };\n            }\n\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"ResultUsedTasks\",\n              inputData: inputData,\n              selectedId,\n              activeTestKey: \"IDS_TASK\",\n              isFileupload: false,\n              operation: this.props.Login.operation,\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //postParam\n\n            };\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_ENTERTASKTIME\"\n            }));\n            return;\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_PARAMETERCOMMENTS\") {\n          inputData = {\n            ntransactiontestcode: selectedRecord.ntransactiontestcode,\n            ntransactionresultcode: selectedRecord.ntransactionresultcode,\n            sresultcomment: selectedRecord.sresultcomment,\n            transactiontestcode: selectedRecord.transactiontestcode,\n            userinfo: this.props.Login.userInfo,\n            nregtypecode: nregtypecode,\n            nregsubtypecode: nregsubtypecode,\n            ncontrolcode: this.props.Login.ncontrolcode\n          }; // inputParam = {\n          //     classUrl: classUrl,\n          //     methodUrl: \"ParameterComments\",\n          //     inputData: inputData, selectedId,\n          //     isFileupload: false,\n          //     operation: this.props.Login.operation,\n          //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\n          // }\n\n          this.updateParameterComments(inputData, this.props.Login.masterData, selectedRecord.ncontrolcode);\n          return;\n        }\n\n        if (this.props.Login.screenName === \"IDS_CHECKLISTRESULT\") {\n          let lstResultCheckList = [];\n\n          if (selectedRecord && selectedRecord.editedQB) {\n            selectedRecord.editedQB.map(qbcode => lstResultCheckList.push(selectedRecord[qbcode]));\n            inputData = {\n              ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\n              ntransactionresultcode: selectedRecord.ntransactionresultcode,\n              transactiontestcode: selectedRecord.transactiontestcode,\n              ResultCheckList: lstResultCheckList,\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode\n            };\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"ResultEntryChecklist\",\n              inputData: inputData,\n              selectedId,\n              isFileupload: false,\n              operation: this.props.Login.operation,\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //postParam\n\n            };\n          }\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.childRef = React.createRef();\n    this.state = {\n      subSampleCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      subSampleAttachmentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      instrumentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      materialDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      taskDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      documentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }]\n\n      },\n      resultChangeDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }]\n\n      },\n      testCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'stestsynonym' }] \n\n      },\n      sampleHistoryDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      masterStatus: \"\",\n      error: \"\",\n      operation: \"\",\n      showSample: false,\n      showSubSample: false,\n      showTest: true,\n      tabPane: 0,\n      subsampleskip: 0,\n      sampleListColumns: [],\n      subSampleListColumns: [],\n      testListColumns: [],\n      TableExpandableItem: [],\n      SingleItem: [],\n      SampleGridItem: [],\n      SampleGridExpandableItem: [],\n      sampleListMainField: [],\n      subSampleListMainField: [],\n      testListMainField: [],\n      testMoreField: [],\n      selectedRecord: {},\n      selectedRecordMaterialForm: {},\n      selectedRecordInstrumentForm: {},\n      selectedRecordCompleteForm: {},\n      selectedRecordTaskForm: {},\n      validateFormulaMandyFields: [],\n      splitChangeWidthPercentage: 22,\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      subSampleSkip: 0,\n      subSampleTake: this.props.Login.settings && this.props.Login.settings[12],\n      // subsampletake: this.props.Login.settings\n      // && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      testskip: 0,\n      testtake: this.props.Login.settings && this.props.Login.settings[12],\n      initialVerticalWidth: \"57vh\",\n      enablePin: false,\n      openELNSheet: false,\n      enlLink: \"\",\n      sampleSearchField: [],\n      subsampleSearchField: [],\n      testSearchField: [],\n      selectedRecordAdhocParameter: {},\n      filterSampleList: []\n    }; //openELNSheet: false\n\n    this.formRef = React.createRef(); //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n  }\n\n  showRESampleInfo() {\n    this.setState({\n      showSample: true,\n      showTest: false\n    });\n  }\n\n  showRETestList() {\n    this.setState({\n      showTest: true,\n      showSample: false,\n      showSubSample: false\n    });\n  } // getMeanTestParameter =(meanParam)=>{\n  //     const inputData = {npreregno:meanParam.selectedRecord.npreregno,\n  //                        userinfo:this.props.Login.userInfo}\n  //     return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\n  //         .then(response => {\n  //            const list =  response.data || [];\n  //            const optionList = [];\n  //            list.map(item=>{optionList.push({item:item, label:item.stestsynonym+\"-\"+item.sparametername+\"-\"+item.sresult, value:item.ntransactiontestresultcode})})\n  //            this.setState({meanTestParameterList:optionList});                \n  //         })\n  //         .catch(error => {\n  //             if (error.response.status === 500) {\n  //                 toast.error(error.message);\n  //             } else {\n  //                 toast.warn(error.response.data);\n  //             }\n  //         })\n  // }\n\n\n  showRESubSampleinfo() {\n    this.setState({\n      showSample: false,\n      showTest: true,\n      showSubSample: !this.state.showSubSample\n    });\n  }\n\n  // sampleTabDetail = () => {\n  //     const tabMap = new Map();\n  //     {\n  //         this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\n  //             tabMap.set(\"IDS_SAMPLEINFO\", <SampleInfoView\n  //                 data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\n  //                 SingleItem={this.state.SingleItem}\n  //                 screenName=\"IDS_SAMPLEINFO\"\n  //             />) :\n  //             tabMap.set(\"IDS_SAMPLEGRID\", <SampleInfoGrid\n  //                 selectedSample={this.props.Login.masterData.RESelectedSample}\n  //                 dataState={this.state.dataState}\n  //                 dataStateChange={this.dataStateChange}\n  //                 detailedFieldList={this.state.SampleGridExpandableItem}\n  //                 extractedColumnList={this.state.SampleGridItem}\n  //                 userInfo={this.props.Login.userInfo}\n  //                 inputParam={this.props.Login.inputParam}\n  //                 screenName=\"IDS_SAMPLEGRID\"\n  //             />)\n  //         // tabMap.set(\"IDS_SAMPLEATTACHMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SAMPLECOMMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <></>)\n  //         return tabMap;\n  //     }\n  // }\n  sampleTabDetail() {\n    const tabMap = new Map();\n    let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n    tabMap.set(\"IDS_SAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n      screenName: \"IDS_SAMPLEATTACHMENTS\",\n      selectedMaster: this.props.Login.masterData.RESelectedSample,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      attachments: this.props.Login.masterData.RegistrationAttachment || [],\n      deleteRecord: this.props.deleteAttachment,\n      onSaveClick: this.onAttachmentSaveClick,\n      masterList: this.props.Login.masterData.RESelectedSample,\n      masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHEMENT\",\n      fetchRecord: this.props.getAttachmentCombo,\n      addName: \"AddSampleAttachment\",\n      editName: \"EditSampleAttachment\",\n      deleteName: \"DeleteSampleAttachment\",\n      viewName: \"ViewSampleAttachment\",\n      methodUrl: \"SampleAttachment\",\n      nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n      userInfo: this.props.Login.userInfo,\n      deleteParam: {\n        methodUrl: \"SampleAttachment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: this.props.Login.screenName\n      },\n      editParam: {\n        methodUrl: \"SampleAttachment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        masterList: this.props.Login.masterData.RESelectedSample\n      },\n      selectedListName: \"IDS_ARNUMBER\",\n      displayName: \"sarno\",\n      isneedHeader: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1786,\n        columnNumber: 13\n      }\n    }));\n    tabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n      screenName: \"IDS_SAMPLECOMMENTS\",\n      onSaveClick: this.onCommentsSaveClick,\n      selectedMaster: \"RESelectedSample\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      Comments: this.props.Login.masterData.RegistrationComment || [],\n      fetchRecord: this.props.getCommentsCombo,\n      masterData: this.props.Login.masterData,\n      addName: \"AddSampleComment\",\n      editName: \"EditSampleComment\",\n      deleteName: \"DeleteSampleComment\",\n      methodUrl: \"SampleComment\",\n      isTestComment: false,\n      masterList: this.props.Login.masterData.RESelectedSample,\n      masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n      primaryKeyField: \"nregcommentcode\",\n      dataState: this.state.testCommentDataState,\n      dataStateChange: this.testDataStateChange,\n      deleteParam: {\n        methodUrl: \"SampleComment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: \"IDS_SAMPLECOMMENTS\"\n      },\n      editParam: {\n        methodUrl: \"SampleComment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        operation: \"update\",\n        masterList: this.props.Login.masterData.RESelectedSample || [],\n        ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n      },\n      selectedListName: \"IDS_ARNUMBER\",\n      displayName: \"sarno\",\n      selectedId: this.props.Login.selectedId || null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1828,\n        columnNumber: 42\n      }\n    }));\n    tabMap.set(\"IDS_SAMPLEAPPROVALHISTORY\", /*#__PURE__*/React.createElement(SampleApprovalHistory, {\n      userInfo: this.props.Login.userInfo,\n      ApprovalHistory: this.props.Login.masterData.SampleApprovalHistory,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleHistoryDataState,\n      dataStateChange: this.sampleDataStateChange,\n      masterData: this.props.Login.masterData,\n      screenName: \"IDS_SAMPLEAPPROVALHISTORY\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      selectedId: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1875,\n        columnNumber: 13\n      }\n    }));\n    return tabMap;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height\n      });\n    }\n  }\n\n  getActiveTestURL() {\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (this.props.Login.activeTestKey) {\n      case \"IDS_RESULTS\":\n        url = \"resultentrybysample/getTestbasedParameter\";\n        break;\n\n      case \"IDS_INSTRUMENT\":\n        url = \"resultentrybysample/getResultUsedInstrument\";\n        break;\n\n      case \"IDS_MATERIAL\":\n        url = \"resultentrybysample/getResultUsedMaterial\";\n        break;\n\n      case \"IDS_TASK\":\n        url = \"resultentrybysample/getResultUsedTask\";\n        break;\n\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_RESULTCHANGEHISTORY\":\n        url = \"resultentrybysample/getResultChangeHistory\";\n        break;\n\n      case \"IDS_APPROVALHISTORY\":\n        url = \"resultentrybysample/getSampleApprovalHistory\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      default:\n        url = \"resultentrybysample/getTestbasedParameter\";\n        break;\n    }\n\n    return url;\n  } //Added by sonia for ALPD-4084 on May 2 2024 Export action\n  // exportExcelHeader = (testChildGetREParam,RESelectedTest,userInfo, exportId, testskip,testtake) => {\n  //     let TestList = [...this.props.Login.masterData.RE_TEST];\n  //     TestList = TestList.splice(testskip, testskip + testtake);\n  //     let exportTestList = getSameRecordFromTwoArrays(TestList, RESelectedTest, \"ntransactiontestcode\");\n  //     if (exportTestList && exportTestList.length > 0) {\n  //         let inputParam ={};      \n  //             let Map = {\n  //                 nregtypecode : testChildGetREParam.nregtypecode,\n  //                 nregsubtypecode : testChildGetREParam.nregsubtypecode,\n  //                 ncontrolcode: exportId,\n  //                 transactiontestcode: exportTestList ? exportTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n  //                 RESelectedTest: exportTestList,\n  //                 skip: this.state.skip,\n  //                 take: this.state.take,\n  //                 testskip: this.state.testskip,\n  //                 testtake: this.state.testtake,\n  //                 subSampleSkip: this.state.subSampleSkip,\n  //                 subSampleTake: this.state.subSampleTake,\n  //                 userinfo: userInfo,\n  //                 operation: 'exportAction',\n  //             }  \n  //             inputParam = {\n  //                 inputData: Map,\n  //             }            \n  //             this.props.exportAction(inputParam);            \n  //     }\n  //     else {\n  //         toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }));\n  //     }\n  // }\n  //Added by sonia for ALPD-4084 on May  17 2024 Export action\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.Login.openModal && this.props.Login.screenName === 'IDS_MATERIAL' && nextState.isMaterialInitialRender === false && nextState.selectedRecordMaterialForm !== this.state.selectedRecordMaterialForm) {\n      return false;\n    } else if (this.props.Login.openModal && this.props.Login.screenName === 'IDS_INSTRUMENT' && nextState.isInstrumentInitialRender === false && nextState.selectedRecordInstrumentForm !== this.state.selectedRecordInstrumentForm) {\n      return false;\n    } else if (this.props.Login.openModal && this.props.Login.screenName === 'IDS_RESULTENTRYCOMPLETE' && nextState.isCompleteInitialRender === false && nextState.selectedRecordCompleteForm !== this.state.selectedRecordCompleteForm) {\n      return false;\n    } else if (this.props.Login.openModal && this.props.Login.screenName === 'IDS_RESULTENTRY' && nextState.isParameterInitialRender === false && nextState.parameterResults !== this.state.parameterResults) {\n      return false;\n    } else if (this.props.Login.openModal && this.props.Login.screenName === 'IDS_RESULTENTRYPARAMETER' && nextState.isaddSampleRender === false && nextState.parameterResults1 !== this.state.parameterResults1) {\n      return false;\n    } else if (this.props.Login.openModal && this.props.Login.screenName === 'IDS_TASK' && nextState.isTaskInitialRender === false && nextState.selectedRecordTaskForm !== this.state.selectedRecordTaskForm) {\n      return false;\n    } else if (this.props.Login.openModal && this.props.Login.screenName === 'IDS_ADHOCPARAMETER' && nextState.isAdhocParameterInitialRender === false && nextState.selectedRecordAdhocParameter !== this.state.selectedRecordAdhocParameter) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    // const auditInfoFields = [{ \"fieldName\": \"sarno\", \"label\": \"IDS_ARNO\" }, \n    // { \"fieldName\": \"spatientid\", \"label\": \"IDS_PATIENTID\" },   \n    // { \"fieldName\": \"sfirstname\", \"label\": \"IDS_PATIENTNAME\" },\n    // { \"fieldName\": \"sage\", \"label\": \"IDS_AGE\" },\n    // { \"fieldName\": \"sgendername\", \"label\": \"IDS_GENDER\" },\n    // { \"fieldName\": \"stestsynonym\", \"label\": \"IDS_TEST\" },\n    // { \"fieldName\": \"sregdate\", \"label\": \"IDS_REGISTRATIONDATE\" },\n    // { \"fieldName\": \"scompletedate\", \"label\": \"IDS_COMPLETEDDATEANDTIME\" }\n    // ];\n    const auditInfoFields = [{\n      \"label\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      \"fieldName\": \"sarno\"\n    }, {\n      \"fieldName\": \"stestsynonym\",\n      \"label\": \"IDS_TEST\"\n    }, {\n      \"fieldName\": \"sfirstname\",\n      \"label\": \"IDS_PATIENTNAME\"\n    }, {\n      \"fieldName\": \"sgendername\",\n      \"label\": \"IDS_GENDER\"\n    }]; // this.feildsForGrid =\n    // [\n    //   // { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }, \n    //   { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"100px\" },\n    //   { \"idsName\": \"IDS_SUBSAMPLE\", \"dataField\": \"ssamplearno\", \"width\": \"100px\" },      \n    //   { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametersynonym\", \"width\": \"100px\" },\n    //   { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sfinal\", \"width\": \"100px\" },\n    //   { \"idsName\": \"IDS_GRADE\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\n    // ];\n\n    this.feildsForGrid = [// { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\n    {\n      \"idsName\": \"IDS_REPORTREFNO\",\n      \"dataField\": \"sreportno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      \"dataField\": \"ssamplearno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARAMETER\",\n      \"dataField\": \"sparametersynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_RESULT\",\n      \"dataField\": \"sfinal\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_GRADE\",\n      \"dataField\": \"sgradename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REGISTRATIONDATE\",\n      \"dataField\": \"sregdate\",\n      \"width\": \"200px\"\n    }]; // console.log(this.state.enlLink);\n    // console.log(this.state.enlLink);\n\n    let sampleListRE = this.props.Login.masterData.RE_SAMPLE ? sortData(this.props.Login.masterData.RE_SAMPLE, \"descending\", \"npreregno\") : []; //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\n    //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\n    //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ?  this.props.Login.masterData.RE_SUBSAMPLE : []\n    //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\n    //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\n\n    let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? this.props.Login.masterData.RE_SUBSAMPLE : []; //let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : []\n\n    let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : [];\n    const startDate = this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date();\n    const endDate = this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date(); // let obj = this.covertDatetoString(startDate, endDate)\n\n    let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\n    const fromDate = obj.fromDate;\n    const toDate = obj.toDate;\n    let subSampleGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\n      fromdate: fromDate,\n      todate: toDate,\n      activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n      activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      subSampleSkip: this.state.subSampleSkip,\n      subSampleTake: this.state.subSampleTake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      sampleChangeDataState: this.state.sampleChangeDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      searchSubSampleRef: this.searchSubSampleRef,\n      searchTestRef: this.searchTestRef,\n      nneedtemplatebasedflow: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow || false,\n      //Aravindh\n      //  checkBoxOperation: 3,\n      checkBoxOperation: checkBoxOperation.SINGLESELECT,\n      nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n      nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1,\n      activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 8 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 8 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\n      nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\n    };\n    let testGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntranscode: String(this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString()),\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\n      activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n      activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\n      activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      subSampleSkip: this.state.subSampleSkip,\n      subSampleTake: this.state.subSampleTake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      historyDataState: this.state.historyDataState,\n      samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\n      sampleHistoryDataState: this.state.sampleHistoryDataState,\n      // activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : 0,\n      activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\n      nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n      nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1,\n      nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\n      searchTestRef: this.searchTestRef\n    };\n    let testChildGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\n      ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample && sample.ntransactionsamplecode).join(\",\"),\n      activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n      fromdate: fromDate,\n      todate: toDate,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\n      //activeTabIndex: this.state.enableAutoClick ? this.state.activeTabIndex : this.state.activeTabIndex ? this.state.activeTabIndex : 1,\n      nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n      nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1,\n      nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\n    };\n    const filterSampleParam = {\n      inputListName: \"RE_SAMPLE\",\n      selectedObject: \"RESelectedSample\",\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      skip: 0,\n      take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      fecthInputObject: {\n        ntype: 2,\n        nflag: 2,\n        ntransactiontestcode: 0,\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n        fromdate: fromDate,\n        todate: toDate,\n        activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n        //nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? true : false,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        // checkBoxOperation: 3,\n        checkBoxOperation: checkBoxOperation.SINGLESELECT,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1,\n        nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n        nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1,\n        nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\n      },\n      masterData: this.props.Login.masterData,\n      // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\n      searchFieldList: this.state.sampleSearchField,\n      changeList: [\"RE_SUBSAMPLE\", \"RE_TEST\", \"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedSample\", \"RESelectedSubSample\", \"RESelectedTest\"]\n    };\n    const filterSubSampleParam = {\n      inputListName: \"RE_SUBSAMPLE\",\n      selectedObject: \"RESelectedSubSample\",\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"resultentrybysample/getResultEntrySubSampleDetails\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      fecthInputObject: {\n        ntype: 3,\n        nflag: 3,\n        ntransactiontestcode: 0,\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n        fromdate: fromDate,\n        todate: toDate,\n        activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? true : false,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        // checkBoxOperation: 3,\n        checkBoxOperation: checkBoxOperation.SINGLESELECT,\n        nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n        nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1,\n        nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\n      },\n      masterData: this.props.Login.masterData,\n      // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\n      searchFieldList: this.state.subsampleSearchField,\n      changeList: [\"RE_TEST\", \"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedSubSample\", \"RESelectedTest\"]\n    };\n    let filterTestParam = {\n      inputListName: \"RE_TEST\",\n      selectedObject: \"RESelectedTest\",\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      fecthInputObject: {\n        ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n        userinfo: this.props.Login.userInfo,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1,\n        nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n        nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.state.testSearchField,\n      changeList: [\"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedTest\"],\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? true : false,\n      // checkBoxOperation: 3,\n      checkBoxOperation: checkBoxOperation.SINGLESELECT,\n      //nworlistcode : (this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue.nworklistcode) || -1\n      nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\n    };\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      fecthInputObject: filterSampleParam,\n      selectedObject: \"RESelectedSample\",\n      inputListName: \"RE_SAMPLE\",\n      updatedListname: \"\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedSubSample\",\n      updatedListname: \"updatedSubSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSubSampleRef,\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      fecthInputObject: testGetREParam,\n      selectedObject: \"RESelectedSubSample\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      inputListName: \"RE_SUBSAMPLE\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedTest\",\n      clearFilter: \"no\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchSampleRef,\n        childFilteredListName: \"\"\n      }],\n      fecthInputObject: testChildGetREParam,\n      selectedObject: \"RESelectedTest\",\n      inputListName: \"RE_TEST\",\n      updatedListname: \"RE_TEST\",\n      //\"updatedTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }];\n    this.breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto\n    }, // {\n    //     \"label\": \"IDS_SAMPLETYPE\",\n    //     \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\n    // }, \n    {\n      \"label\": \"IDS_REGISTRATIONTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\" // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\n      // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\n\n    }, {\n      \"label\": \"IDS_REGISTRATIONSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\n    }, // {\n    //     \"label\": \"IDS_CONFIGVERSION\",\n    //     \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\n    // },\n    {\n      \"label\": \"IDS_TEST\",\n      \"value\": this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.stestsynonym ? this.props.Login.masterData.realTestcodeValue.stestsynonym : \"NA\"\n    }, {\n      \"label\": \"IDS_TESTSTATUS\",\n      \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus : \"NA\"\n    }];\n\n    if (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) {\n      this.breadCrumbData.push({\n        \"label\": \"IDS_WORKLIST\",\n        \"value\": this.props.Login.masterData.realWorklistCodeValue ? this.props.Login.masterData.realWorklistCodeValue.sworklistno : \"NA\"\n      });\n    }\n\n    if (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) {\n      this.breadCrumbData.push({\n        \"label\": \"IDS_BATCH\",\n        \"value\": this.props.Login.masterData.realBatchCodeValue ? this.props.Login.masterData.realBatchCodeValue.sbatcharno : \"NA\"\n      });\n    }\n\n    const testStartId = this.state.controlMap.has(\"TestStart\") && this.state.controlMap.get(\"TestStart\").ncontrolcode;\n    const resultEnterId = this.state.controlMap.has(\"ResultEnter\") && this.state.controlMap.get(\"ResultEnter\").ncontrolcode;\n    const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode;\n    const exportId = this.state.controlMap.has(\"ExportResult\") && this.state.controlMap.get(\"ExportResult\").ncontrolcode;\n    const importId = this.state.controlMap.has(\"ImportResult\") && this.state.controlMap.get(\"ImportResult\").ncontrolcode;\n    const setDefaultId = this.state.controlMap.has(\"SetDefaultResult\") && this.state.controlMap.get(\"SetDefaultResult\").ncontrolcode;\n    const editSourceMethodId = this.state.controlMap.has(\"EditSourceMethod\") && this.state.controlMap.get(\"EditSourceMethod\").ncontrolcode;\n    const addResultUsedInstrumentId = this.state.controlMap.has(\"AddResultUsedInstrument\") && this.state.controlMap.get(\"AddResultUsedInstrument\").ncontrolcode;\n    const addResultUsedMaterailId = this.state.controlMap.has(\"AddResultUsedMaterial\") && this.state.controlMap.get(\"AddResultUsedMaterial\").ncontrolcode;\n    const adhocId = this.state.controlMap.has(\"AdhocParameter\") && this.state.controlMap.get(\"AdhocParameter\").ncontrolcode;\n    const openELNSheet = this.state.controlMap.has(\"OpenELNSheet\") && this.state.controlMap.get(\"OpenELNSheet\").ncontrolcode;\n    const patientPreviousResultView = this.state.controlMap.has(\"PatientPreviousResultView\") && this.state.controlMap.get(\"PatientPreviousResultView\").ncontrolcode;\n    const identicalResultEnterId = this.state.controlMap.has(\"IdenticalResultEnter\") && this.state.controlMap.get(\"IdenticalResultEnter\").ncontrolcode;\n    const testSectionChangeID = this.state.controlMap.has(\"ChangeTestSection\") ? this.state.controlMap.get(\"ChangeTestSection\").ncontrolcode : -1;\n    const filterNameId = this.state.controlMap.has(\"FilterName\") ? this.state.controlMap.get(\"FilterName\").ncontrolcode : -1;\n    const filterDetailId = this.state.controlMap.has(\"FilterDetail\") ? this.state.controlMap.get(\"FilterDetail\").ncontrolcode : -1;\n    const mandatoryFieldsInstrument = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n      \"dataField\": \"ninstrumentcatcode\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INSTRUMENTNAME\",\n      \"dataField\": \"ninstrumentnamecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INSTRUMENTID\",\n      \"dataField\": \"ninstrumentcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_FORMDATE\",\n      \"dataField\": \"dfromdate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TODATE\",\n      \"dataField\": \"dtodate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntzfromdate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntztodate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFieldsMaterial = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MATERIALTYPE\",\n      \"dataField\": \"nmaterialtypecode\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MATERIALCATEGORY\",\n      \"dataField\": \"nmaterialcatcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MATERIAL\",\n      \"dataField\": \"nmaterialcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MATERIALINVENTORY\",\n      \"dataField\": \"nmaterialinventorycode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_AVAILABLEQUANTITY\",\n      \"dataField\": \"savailablequantity\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_USEDQTY\",\n      \"dataField\": \"susedquantity\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_UNIT\",\n      \"dataField\": \"sunitname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFieldsTask = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PREANALYSISTIME\",\n      \"dataField\": \"spreanalysistime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PREPARATIONTIME\",\n      \"dataField\": \"spreparationtime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_ANALYSISTIME\",\n      \"dataField\": \"sanalysistime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MISCTIME\",\n      \"dataField\": \"smisctime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const mandatoryFieldsTestMethodSource = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SOURCE\",\n      \"dataField\": \"nsourcecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_METHOD\",\n      \"dataField\": \"nmethodcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryEnforceResult = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_RESULTS\",\n      \"dataField\": \"senforceresult\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"senforceresultcomment\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    } // { \"mandatory\": true, \"idsName\": \"IDS_PASSFLAG\", \"dataField\": \"ngradecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\n    ];\n    const mandatoryFieldsParameter = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PARAMETERCOMMENTS\",\n      \"dataField\": \"sresultcomment\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const mandatoryFieldsComplete = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_USER\",\n      \"dataField\": \"nusercode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFieldsSection = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SECTION\",\n      \"dataField\": \"nsectioncode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFieldsFilter = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_FILTERNAME\",\n      \"dataField\": \"sfiltername\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const validateFormulaMandyFields = this.state.validateFormulaMandyFields;\n    const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode;\n    const testDesign = /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3971,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3972,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3973,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3974,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3975,\n        columnNumber: 25\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    })))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0 sm-pager\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3978,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      progressTimerStart: this.props.Login.progressTimerStart || false,\n      clickIconGroup: true,\n      cardHead: 94 //paneHeight={this.state.initialVerticalWidth}\n      // paneHeight={`${testListRE && testListRE !== null && testListRE.length > 0 ? testListRE.length * 13 : 5}vh`}\n      ,\n      masterList: this.props.Login.masterData.searchedTest || testListRE,\n      selectedMaster: this.props.Login.masterData.RESelectedTest,\n      primaryKeyField: \"ntransactiontestcode\" //getMasterDetail={this.props.getTestChildTabREDetail}\n      ,\n      getMasterDetail: (event, status) => {\n        this.props.getTestChildTabREDetail(event, status);\n        this.changePropertyView(1, \"IDS_RESULTS\", event, \"click\");\n      },\n      inputParam: testChildGetREParam,\n      subFieldsLabel: true,\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"RESelectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      showStatusName: true,\n      selectionFieldName: \"sfilterstatus\",\n      childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\" // , \"RegistrationComment\"\n      ] // selectionList={this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.REFilterStatus : []}\n      ,\n      selectionList: this.state.selectedFilter,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      handlePageChange: this.handleTestPageChange,\n      selectionColorField: \"scolorhexcode\",\n      showMoreResetList: true,\n      showMoreResetListName: \"RE_SAMPLE\",\n      buttonCount: 5,\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_OPENELNSHEET\"\n        }),\n        controlname: \"elnimage\",\n        hidden: this.state.userRoleControlRights.indexOf(openELNSheet) === -1,\n        onClick: this.openClosePortal,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          elnUserInfo: this.props.Login.elnUserInfo,\n          elnSite: this.props.Login.elnSite\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_PREVIOUSRESULTVIEW\"\n        }),\n        controlname: \"faEye\",\n        dataplace: \"left\",\n        hidden: this.state.userRoleControlRights.indexOf(patientPreviousResultView) === -1,\n        onClick: this.viewSample,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDITMETHODSSOURCE\"\n        }),\n        controlname: \"faPencilAlt\",\n        dataplace: \"left\",\n        hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1,\n        onClick: this.testMethodSourceEdit,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editSourceMethodId\n        }\n      }, //commend for nfc bug issues\n      //--start\n      // { title: this.props.intl.formatMessage({ id: \"IDS_ADHOCPARAMETER\" }), controlname: \"faAdhocParameter\", dataplace: \"left\",\n      //  hidden: this.state.userRoleControlRights.indexOf(adhocId) === -1,\n      //  onClick: this.adhocParameter, objectName: \"test\",\n      //       inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, adhocId } },\n      //end\n      // { title: this.props.intl.formatMessage({ id: \"IDS_ADHOCPARAMETER\" }), controlname: \"faAdhocParameter\", dataplace: \"left\", \n      //       hidden: this.state.userRoleControlRights.indexOf(adhocId) === -1,\n      //       onClick: this.adhocTestParameter, objectName: \"test\",\n      //           inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, adhocId } },\n      //{ title: this.props.intl.formatMessage({ id: \"IDS_EDITMETHODSSOURCE\" }), controlname: \"faPencilAlt\", dataplace: \"left\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDINSTRUMENT\"\n        }),\n        controlname: \"faMicroscope\",\n        hidden: false,\n        onClick: this.addREInstrument,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          addResultUsedInstrumentId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDMATERIAL\"\n        }),\n        controlname: \"faFlask\",\n        hidden: false,\n        onClick: this.props.addREMaterial,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          addResultUsedMaterailId\n        }\n      } // { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }\n      ],\n      commonActions:\n      /*#__PURE__*/\n      // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\n      React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4052,\n          columnNumber: 29\n        }\n      }, testListRE.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\"\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CHANGESECTION\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(testSectionChangeID) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.getSectionChange(testSectionChangeID, this.state.testskip, this.state.testtake, 'updateSection'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4060,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(SectionChange, {\n        className: \"custom_icons\",\n        width: \"20\",\n        height: \"30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4064,\n          columnNumber: 45\n        }\n      })), this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtestinitiate ? /*#__PURE__*/React.createElement(FontIconWrap //  data-for=\"tooltip-common-wrap\" \n      , {\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_TESTSTART\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(testStartId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4069,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4075,\n          columnNumber: 49\n        }\n      })) : \"\", /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\"\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ENTERRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(resultEnterId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.props.resultGetModule(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4081,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faAddressBook,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4084,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\" \n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_FILLDEFAULTRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(setDefaultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.defaultActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.masterData.RESelectedSample, setDefaultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4086,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilRuler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4089,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\"\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_COMPLETE\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(completeResultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.props.Login.settings && parseInt(this.props.Login.settings[45]) === transactionStatus.YES ? this.completePopup(testChildGetREParam, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake, 3) : this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake, 3),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4091,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCheckCircle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4096,\n          columnNumber: 45\n        }\n      }))) : \"\") // </Tooltip>\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3979,\n        columnNumber: 21\n      }\n    }))));\n    let mainDesign = \"\";\n\n    if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) {\n      mainDesign = /*#__PURE__*/React.createElement(SplitterLayout, {\n        borderColor: \"#999\",\n        primaryIndex: 1,\n        percentage: true,\n        secondaryInitialSize: this.state.splitChangeWidthPercentage,\n        onSecondaryPaneSizeChange: this.paneSizeChange,\n        primaryMinSize: 40,\n        secondaryMinSize: 30,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4112,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4119,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        style: {\n          borderBottom: \"0px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4120,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          display: \"inline-block\",\n          marginTop: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4121,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"card-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4122,\n          columnNumber: 29\n        }\n      }, this.props.intl.formatMessage({\n        id: \"IDS_SUBSAMPLE\"\n      })))), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"p-0 sm-pager\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4125,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n        cardHead: 94 //paneHeight={this.state.initialVerticalWidth}\n        ,\n        masterList: this.props.Login.masterData.searchedSubSample || subSampleListRE,\n        selectedMaster: this.props.Login.masterData.RESelectedSubSample //ALPD-5367 Result Entry -> In the stored button was enable sub sample & sample. \n        ,\n        actionIcons: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample === true ? [{\n          title: this.props.intl.formatMessage({\n            id: \"IDS_STORED\"\n          }),\n          controlname: \"faArrowRight\",\n          objectName: \"mastersendtostore\",\n          hidden: false,\n          onClick: this.openStoredSampleData,\n          inputData: {\n            masterData: this.props.Login.masterData,\n            userInfo: this.props.Login.userInfo,\n            ncontrolCode: -1\n          }\n        }] : \"\" //ALPD-5367 Result Entry -> In the stored button was enable sub sample & sample. \n        ,\n        primaryKeyField: \"ntransactionsamplecode\",\n        getMasterDetail: this.props.getTestREDetail,\n        inputParam: testGetREParam,\n        additionalParam: [],\n        mainField: \"ssamplearno\",\n        selectedListName: \"RESelectedSubSample\",\n        objectName: \"subSample\",\n        listName: \"IDS_SUBSAMPLE\",\n        jsonField: 'jsondata',\n        jsonDesignFields: true,\n        subFields: this.state.DynamicSubSampleColumns,\n        moreField: this.state.subSampleMoreField,\n        needValidation: false,\n        needMultiSelect: true,\n        needFilter: false,\n        skip: this.state.subSampleSkip,\n        take: this.state.subSampleTake,\n        pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n        handlePageChange: this.handleSubSamplePageChange,\n        showStatusLink: true,\n        showStatusName: false,\n        selectionList: this.state.selectedFilter,\n        statusFieldName: \"stransdisplaystatus\",\n        statusField: \"ntransactionstatus\",\n        selectionFieldName: \"sfilterstatus\",\n        selectionField: \"ntransactionstatus\",\n        secondaryField: \"storage\" //ALPD-5367 Result Entry -> In the stored button was enable sub sample & sample. \n        ,\n        showSecondaryStatusName: true,\n        childTabsKey: [\"RE_TEST\", \"Registration\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"],\n        filterColumnData: this.props.filterTransactionList,\n        searchListName: \"searchedSubSample\",\n        searchRef: this.searchSubSampleRef,\n        filterParam: filterSubSampleParam,\n        subFieldsFile: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4126,\n          columnNumber: 25\n        }\n      }))), testDesign);\n    } else {\n      mainDesign = testDesign;\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap new-breadcrumb toolbar-top-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4198,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4199,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fixed-buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4200,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      //ALPD-4870 Add filter name and filter details button,done by Dhanushya RI\n      className: \"btn btn-circle outline-grey ml-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_SAVEFILTER\"\n      }) // data-for=\"tooltip-common-wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(filterNameId) === -1,\n      onClick: () => this.openFilterName(filterNameId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4201,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SaveIcon, {\n      width: \"20px\",\n      height: \"20px\",\n      className: \"custom_icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4207,\n        columnNumber: 29\n      }\n    })), this.state.userRoleControlRights.indexOf(filterDetailId) !== -1 && this.props.Login.masterData && this.props.Login.masterData.FilterName.length > 0 ? /*#__PURE__*/React.createElement(CustomPopover, {\n      icon: faBolt,\n      nav: true,\n      data: this.props.Login.masterData.FilterName,\n      btnClasses: \"btn-circle btn_grey ml-2 spacesremovefromaction\" //dynamicButton={(value) => this.props.getAcceptTestTestWise(value,testGetParam,this.props.Login.masterData.MJSelectedTest,this.props.Login.userInfo)}\n      ,\n      dynamicButton: value => this.clickFilterDetail(value),\n      textKey: \"sfiltername\",\n      iconKey: \"nfiltercode\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4212,\n        columnNumber: 33\n      }\n    }) : \"\"), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      bsPrefix: \"toolbar-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4226,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4228,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: `vertical-tab-top ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4229,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"} ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4230,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage //onSecondaryPaneSizeChange={this.paneSizeChange} \n      ,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4231,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolbar-top-inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4235,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      clickIconGroup: true // paneHeight={this.state.parentHeight}\n      ,\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedSample || sampleListRE,\n      selectedMaster: this.props.Login.masterData.RESelectedSample,\n      primaryKeyField: \"npreregno\",\n      getMasterDetail: this.props.getsubSampleREDetail,\n      inputParam: subSampleGetREParam,\n      additionalParam: ['napprovalversioncode'],\n      mainField: \"sarno\",\n      selectedListName: \"RESelectedSample\",\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      needValidation: false,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      subFields: this.state.DynamicSampleColumns || [],\n      moreField: this.state.sampleMoreField,\n      needFilter: true,\n      needMultiSelect: true,\n      showFilter: this.props.Login.showFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onREFilterSubmit,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedSample\",\n      searchRef: this.searchSampleRef,\n      handlePageChange: this.handlePageChange,\n      filterParam: filterSampleParam,\n      skip: this.state.skip,\n      take: this.state.take,\n      hidePaging: false,\n      showStatusLink: true,\n      showStatusName: true,\n      needMultiValueFilter: true,\n      clearAllFilter: this.onReload,\n      onMultiFilterClick: this.onMultiFilterClick,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\" //splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\n      ,\n      childTabsKey: [\"RegistrationAttachment\", \"RE_SUBSAMPLE\", \"RE_TEST\", \"SampleApprovalHistory\", \"RegistrationComment\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"],\n      selectionList: this.state.selectedFilter,\n      selectionColorField: \"scolorhexcode\",\n      selectionFieldName: \"stransdisplaystatus\",\n      selectionField: \"ntransactionstatus\",\n      secondaryField: \"storage\",\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      callCloseFunction: true,\n      viewSampleStatus: true,\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(ResultEntryFilter, {\n          fromDate: this.props.Login.masterData.fromDate ? //new Date(this.props.Login.masterData.fromDate) \n          rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\n          toDate: this.props.Login.masterData.toDate ? //new Date(this.props.Login.masterData.toDate) \n          rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\n          SampleType: this.state.SampleType || [],\n          SampleTypeValue: this.props.Login.masterData.defaultSampleType || [],\n          RegType: this.state.RegistrationType || [],\n          RegTypeValue: this.props.Login.masterData.defaultRegistrationType || [],\n          RegSubType: this.state.RegistrationSubType || [],\n          RegSubTypeValue: this.props.Login.masterData.defaultRegistrationSubType || [],\n          DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue || [],\n          FilterStatus: this.state.REFilterStatus || [],\n          FilterStatusValue: this.props.Login.masterData.defaultFilterStatus || [],\n          ApprovalVersion: this.state.ApprovalConfigVersion || [],\n          ApprovalVersionValue: this.props.Login.masterData.defaultApprovalConfigVersion || [],\n          REJobStatus: this.state.REJobStatus || [],\n          JobStatusValue: this.props.Login.masterData.defaultjobstatus || [],\n          Test: this.state.Testvalues || [],\n          Batch: this.state.Batchvalues || [],\n          BatchValue: this.props.Login.masterData.defaultBatchvalue || [],\n          Worklist: this.state.Worklistvalues || [],\n          WorklistValue: this.props.Login.masterData.defaultWorklistvalue || [],\n          TestValue: this.props.Login.masterData.defaultTestvalues || [],\n          ConfigurationFilter: this.state.ConfigurationFilterValues || [],\n          ConfigurationFilterValue: this.props.Login.masterData.defaultConfigurationFilterValue || [],\n          onFilterComboChange: this.onFilterComboChange,\n          handleDateChange: this.handleDateChange,\n          userInfo: this.props.Login.userInfo,\n          onDesignTemplateChange: this.onDesignTemplateChange,\n          DynamicDesignMapping: this.state.stateDynamicDesign || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 4288,\n            columnNumber: 74\n          }\n        })\n      }],\n      actionIcons: [this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ? {\n        title: \"Report\",\n        controlname: \"reports\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\n        onClick: this.props.previewSampleReport,\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: reportPreviewId\n        }\n      } : {}, //ALPD-5367 Result Entry -> In the stored button was enable sub sample & sample. \n      this.props.Login.masterData && this.props.Login.masterData.nneedsubsample === false ? {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_STORED\"\n        }),\n        controlname: \"faArrowRight\",\n        objectName: \"mastersendtostore\",\n        hidden: false,\n        onClick: this.openStoredSampleData,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolCode: -1\n        }\n      } : {}],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4357,\n          columnNumber: 57\n        }\n      }, this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE ? /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\"\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ENTERIDENTICALRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(identicalResultEnterId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.props.resultEntryGetSpec(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4359,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(Resultentry, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4363,\n          columnNumber: 69\n        }\n      })) : \"\", /*#__PURE__*/React.createElement(Nav.Link, {\n        //data-for=\"tooltip-common-wrap\" \n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_EXPORTSAMPLES\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(exportId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\" // onClick={() => this.exportExcelHeader(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, exportId, this.state.testskip, this.state.testtake)}>\n        ,\n        onClick: () => this.exportExcelHeader(this.props.Login.masterData.RE_SAMPLE, this.props.Login.userInfo, exportId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4366,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faFileExcel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4373,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        //data-for=\"tooltip-common-wrap\" \n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_IMPORTRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(importId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.resultImport(importId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4375,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faFileImport,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4381,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2 p-0\",\n        variant: \"link\",\n        onClick: () => this.onReload(),\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4384,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(RefreshIcon, {\n        className: \"custom_icons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4388,\n          columnNumber: 65\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4236,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4395,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4396,\n        columnNumber: 45\n      }\n    }, mainDesign)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4404,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      style: {\n        width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4405,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: ` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyViewClose(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4406,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faChevronRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4406,\n        columnNumber: 178\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common sm-view-v-t position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4407,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4408,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4410,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4411,\n        columnNumber: 53\n      }\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 1 ? this.sideNavDetail(\"IDS_RESULTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4416,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4417,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4419,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4420,\n        columnNumber: 53\n      }\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 2 ? this.sideNavDetail(\"IDS_ATTACHMENTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid-tab position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4425,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4426,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4428,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4429,\n        columnNumber: 53\n      }\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 3 ? this.sideNavDetail(\"IDS_COMMENTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4434,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4435,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4437,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4438,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4441,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_INSTRUMENT\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 4 ? this.sideNavDetail(\"IDS_INSTRUMENT\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4446,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4447,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4449,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4450,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4453,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MATERIAL\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 5 ? this.sideNavDetail(\"IDS_MATERIAL\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4458,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4459,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4461,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4462,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4465,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TASK\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 6 ? this.sideNavDetail(\"IDS_TASK\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 7 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4470,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4471,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4473,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4474,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4477,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TESTAPPROVALHISTORY\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 7 ? this.sideNavDetail(\"IDS_TESTAPPROVALHISTORY\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4482,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4483,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4485,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4486,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4489,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 8 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tab-head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4495,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4496,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(1, \"IDS_RESULTS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4497,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileInvoice,\n      \"data-for\": \"tooltip-common-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RESULT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4498,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4501,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_RESULT\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(2, \"IDS_ATTACHMENTS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4505,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4506,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4507,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_ATTACHMENTS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(3, \"IDS_COMMENTS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4511,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4512,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4513,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_COMMENTS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(4, \"IDS_INSTRUMENT\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4517,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faMicroscope,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4518,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4519,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_INSTRUMENT\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(5, \"IDS_MATERIAL\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4523,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFlask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4524,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4525,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MATERIAL\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(6, \"IDS_TASK\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4529,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCommentDots,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4530,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4531,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TASK\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(8, \"IDS_SAMPLEDETAILS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4541,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4542,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4543,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    })))), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tab-click-toggle-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4548,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch // label={\"Auto Show\"}\n    , {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_AUTOSHOW\"\n      }),\n      type: \"switch\",\n      name: \"Auto Click\",\n      onChange: event => this.onInputSwitchOnChange(event),\n      defaultValue: this.state.enableAutoClick,\n      isMandatory: false,\n      required: true,\n      checked: this.state.enableAutoClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4549,\n        columnNumber: 45\n      }\n    })))))))), /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4583,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4584,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      centered: true,\n      scrollable: true,\n      bsPrefix: \"model model_zindex\",\n      show: this.props.Login.openELNSheet // show={this.state.openELNSheet}\n      ,\n      onHide: this.openClosePortal,\n      dialogClassName: `${this.props.nflag && this.props.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`,\n      backdrop: \"static\",\n      keyboard: false,\n      enforceFocus: false,\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4585,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4598,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      style: {\n        \"line-height\": \"1.0\"\n      },\n      id: \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4599,\n        columnNumber: 33\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_ELNSHEET\"\n    })), /*#__PURE__*/React.createElement(ReactTooltip, {\n      globalEventOff: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4602,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4605,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-inner-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4606,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Iframe, {\n      url: this.props.Login.masterData.enlLink,\n      width: \"98%\",\n      height: \"1000px\",\n      id: \"reportviewID\",\n      className: \"reportview\" //display=\"initial\"\n      /// position=\"relative\" \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4608,\n        columnNumber: 37\n      }\n    })))))), /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4622,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalShow, {\n      modalShow: this.props.Login.showAlertGrid,\n      modalTitle: this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? this.props.intl.formatMessage({\n        id: \"IDS_ADDITIONALINFOREQURIED\"\n      }) //this.props.Login.onlyAlertMsgAvailable?\"Alert\":this.props.Login.masterData['salertmessage']\n      // :this.props.intl.formatMessage({ id: \"IDS_COMPLETETHEFOLLOWINGTESTS\" })} \n      : this.props.intl.formatMessage({\n        id: \"IDS_RULECOMPLETEVALIDATION\"\n      }) //  needCloseButton={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\n      ,\n      closeModal: this.closeModalShow,\n      rulesenginealret: true,\n      onSaveClick: this.props.Login.showAlertGrid == true ? this.onskiprule : this.onModalSave,\n      removeCancel: this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? true : false // needSubmit={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\n      ,\n      needSubmit: true,\n      needSave: this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? \"\" : true,\n      selectedRecord: this.state.selectedRecord || {} // mandatoryFields={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?\n      //     this.mandatoryFieldsForAdditionalInfo():\"\"}\n      ,\n      size: this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? \"\" : 'lg',\n      showAlertMsg: this.props.Login.showAlertForPredefined ? true : false,\n      modalBody: this.props.Login.additionalInfoView ? this.state.selectedRecord['additionalResultData'] : this.props.Login.showAlertForPredefined ? /*#__PURE__*/React.createElement(ResultEntryPredefinedComments, {\n        onlyAlertMsgAvailable: this.props.Login.onlyAlertMsgAvailable,\n        salertmessage: this.props.Login.masterData['salertmessage'],\n        showMultiSelectCombo: this.props.Login.showMultiSelectCombo,\n        testgrouptestpredefsubresultOptions: this.props.Login.masterData.testgrouptestpredefsubresultOptions || [],\n        selectedRecord: this.state.selectedRecord || {},\n        onInputChange: this.onInputChange,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4644,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(CustomTabs, {\n        tabDetail: this.tabAlertRulesEngine(),\n        onTabChange: this.onTabChangeRulesEngine,\n        destroyInactiveTabPane: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4653,\n          columnNumber: 33\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4623,\n        columnNumber: 21\n      }\n    })), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: this.props.Login.screenName === 'IDS_MEANPARAMETER' || this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" || this.props.Login.screenName === \"IDS_RESULTENTRY\" ? \"xl\" : \"lg\",\n      closeModal: this.closeModal,\n      showCalculate: this.props.Login.screenName === 'IDS_RESULTFORMULA' ? true : false,\n      operation: // this.props.Login.screenName === 'IDS_RESULTPARAMETERCOMMENTS'?\"\":\n      this.props.Login.screenName === \"IDS_STORAGE\" ? \"\" : this.props.Login.screenName === 'IDS_RESULTENTRY' || this.props.Login.screenName === 'IDS_ENFORCERESULT' || this.props.Login.screenName === 'IDS_RESULTENTRYPARAMETER' ? \"\" : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName === \"IDS_RESULTENTRYPARAMETER\" ? this.props.Login.masterData.realTestcodeValue.stestsynonym : this.props.Login.screenName,\n      selectedRecord: this.props.Login.screenName === \"IDS_RESULTENTRYCOMPLETE\" && !!this.props.Login.loadEsign ? this.state.selectedRecordCompleteForm : this.props.Login.screenName === 'IDS_INSTRUMENT' && !this.props.Login.loadEsign ? this.state.selectedRecordInstrumentForm : this.props.Login.screenName === 'IDS_MATERIAL' && !this.props.Login.loadEsign ? this.state.selectedRecordMaterialForm : this.props.Login.screenName === 'IDS_TASK' && !this.props.Login.loadEsign ? this.state.selectedRecordTaskForm : this.props.Login.screenName === 'IDS_RESULTFORMULA' ? this.state.selectedRecord.selectedMandatory : this.state.selectedRecord || {},\n      mandatoryFields: //  this.props.Login.screenName === 'IDS_INSTRUMENT' ? mandatoryFieldsInstrument :\n      //  this.props.Login.screenName === 'IDS_TASK' ? mandatoryFieldsTask :\n      this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? mandatoryFieldsTestMethodSource : this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? mandatoryFieldsParameter : this.props.Login.screenName === 'IDS_RESULTFORMULA' ? validateFormulaMandyFields : this.props.Login.screenName === 'IDS_ENFORCERESULT' ? mandatoryEnforceResult : this.props.Login.screenName === 'IDS_SECTION' ? mandatoryFieldsSection : [],\n      esign: this.props.Login.loadEsign,\n      innerPopup: this.props.Login.screenName,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.props.Login.screenName === \"IDS_RESULTENTRYCOMPLETE\" ? e => onSaveMandatoryValidation(this.state.selectedRecordCompleteForm, mandatoryFieldsComplete, this.onSaveClick) : this.props.Login.multiFilterLoad ? this.onSaveMultiFilterClick : this.props.Login.screenName === 'IDS_INSTRUMENT' ? e => onSaveMandatoryValidation(this.state.selectedRecordInstrumentForm, mandatoryFieldsInstrument, this.onSaveClick) : this.props.Login.screenName === 'IDS_MATERIAL' ? e => onSaveMandatoryValidation(this.state.selectedRecordMaterialForm, mandatoryFieldsMaterial, this.onSaveClick) : this.props.Login.showValidate ? this.calculateFormula : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? this.onSaveFileClick : this.props.Login.screenName === 'IDS_ADHOCPARAMETER' ? this.props.Login.masterData.realSampleTypeValue.nclinicaltyperequired === transactionStatus.YES ? this.onSaveClickAdhocParam : this.onsaveClickAdhocparameter : this.onSaveClick,\n      showValidate: this.props.Login.screenName === 'IDS_RESULTFORMULA' ? false : this.props.Login.showValidate,\n      modalEvent: this.state.modalEvent,\n      hideSave: this.props.Login.screenName === \"IDS_STORAGE\" ? true : this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" ? true : false,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4720,\n          columnNumber: 33\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTENTRY' ? this.state.selectedRecord.ResultParameter && this.state.selectedRecord.ResultParameter.map((parameterResult, index) => {\n        return /*#__PURE__*/React.createElement(ResultEntryForm, {\n          index: index //  wrappedComponentRef={ref => this.resultEntryFormRef = ref}\n          //   ref={this.resultEntryFormRef}\n          //  getPredefinedData={this.props.getPredefinedData}\n          ,\n          ResultParameter: [...this.state.selectedRecord.ResultParameter],\n          predefinedValues: this.props.Login.masterData.PredefinedValues,\n          defaultPredefinedValues: this.props.Login.masterData.PredefinedValues,\n          gradeValues: this.props.Login.masterData.GradeValues || [],\n          selectedNumericData: this.props.Login.masterData.selectedNumericData,\n          selectedResultGrade: this.state.selectedRecord.selectedResultGrade || [],\n          paremterResultcode: this.props.Login.masterData.paremterResultcode || [],\n          parameterResults: parameterResult //this.state.selectedRecord.ResultParameter\n          || [],\n          Login: this.props.Login,\n          handleClose: this.handleClose,\n          onSaveClick: this.onSaveClick,\n          onResultInputChange: this.onResultInputChange //onGradeEvent={this.onGradeEvent}\n          ,\n          getFormula: this.getFormula,\n          onDropTestFile: this.onDropTestFile,\n          onKeyPress: this.onKeyPress,\n          deleteAttachmentParamFile: this.deleteAttachmentParameterFile,\n          viewAdditionalInfo: this.viewAdditionalInfo,\n          needSubSample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n          intl: this.props.intl,\n          ResultAccuracy: this.props.Login.ResultAccuracy,\n          Unit: this.props.Login.Unit,\n          selectedRecord: this.state.selectedRecord || {},\n          onComboChange: this.onComboChange,\n          formFields: this.props.Login.formFields || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 4729,\n            columnNumber: 48\n          }\n        });\n      }) : //ALPD-4156--Vignesh R(15-05-2024)-->Result Entry - Option to change section for the test(s)\t\n      this.props.Login.screenName === \"IDS_SECTION\" ? /*#__PURE__*/React.createElement(ScheduleSection, {\n        selectedRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        section: this.props.Login.section,\n        operation: this.props.Login.operation,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4768,\n          columnNumber: 41\n        }\n      }) : this.props.Login.screenName === \"IDS_RESULTENTRYCOMPLETE\" ? /*#__PURE__*/React.createElement(ResultEntryCompleteForm, {\n        onComboChange: this.onComboChange,\n        Users: this.props.Login.Users,\n        selecteRecord: this.state.selectedRecord || {},\n        selectedRecordCompleteForm: this.props.Login.selectedRecordCompleteForm || {},\n        userInfo: this.props.Login.userInfo,\n        onChildDataChange: this.onChildDataChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4779,\n          columnNumber: 45\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTENTRYPARAMETER' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4792,\n          columnNumber: 53\n        }\n      }, this.state.selectedRecord.selectedSpecification && /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_PROFILETREE\"\n        }) + ' / ' + this.props.intl.formatMessage({\n          id: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Specification\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]\n        }),\n        isSearchable: true,\n        name: \"nallottedspeccode\",\n        isDisabled: false,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        isClearable: false,\n        options: this.state.selectedRecord.selectedSpecification || [],\n        value: this.state.selectedRecord.nallottedspeccode && this.state.selectedRecord.nallottedspeccode || \"\",\n        defaultValue: this.state.selectedRecord.selectedSpecification && this.state.selectedRecord.selectedSpecification[\"nallottedspeccode\"] || \"\",\n        onChange: event => this.onChange(event, \"nallottedspeccode\", 1),\n        closeMenuOnSelect: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4794,\n          columnNumber: 61\n        }\n      }), this.state.selectedRecord.selectedComponent && /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formLabel: this.props.intl.formatMessage({\n          id: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]\n        }),\n        isSearchable: true,\n        name: \"ncomponentcode\",\n        isDisabled: false,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        isClearable: false,\n        options: this.state.selectedRecord.selectedComponent || [],\n        value: this.state.selectedRecord.ncomponentcode && this.state.selectedRecord.ncomponentcode || \"\",\n        defaultValue: this.state.selectedRecord.selectedComponent && this.state.selectedRecord.selectedComponent[\"ncomponentcode\"] || \"\",\n        onChange: event => this.onChange(event, \"ncomponentcode\", 2),\n        closeMenuOnSelect: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4811,\n          columnNumber: 61\n        }\n      })), this.state.selectedRecord.ResultParameter && this.state.selectedRecord.ResultParameter.map((parameterResult, index) => {\n        return /*#__PURE__*/React.createElement(ResultEntryParameterForm, {\n          index: index //  wrappedComponentRef={ref => this.resultEntryFormRef = ref}\n          //   ref={this.resultEntryFormRef}\n          //  getPredefinedData={this.props.getPredefinedData}\n          ,\n          ResultParameter: [...this.state.selectedRecord.ResultParameter],\n          predefinedValues: this.props.Login.masterData.PredefinedValues,\n          defaultPredefinedValues: this.props.Login.masterData.PredefinedValues,\n          gradeValues: this.props.Login.masterData.GradeValues || [],\n          selectedNumericData: this.props.Login.masterData.selectedNumericData,\n          selectedResultGrade: this.state.selectedRecord.selectedResultGrade || [],\n          paremterResultcode: this.props.Login.masterData.paremterResultcode || [],\n          parameterResults: parameterResult //this.state.selectedRecord.ResultParameter\n          || [],\n          Login: this.props.Login,\n          handleClose: this.handleClose,\n          onSaveClick: this.onSaveClick,\n          onResultInputChange: this.onResultInputChange,\n          onSampleAdd: this.onSampleAdd //onGradeEvent={this.onGradeEvent}\n          ,\n          getFormula: this.getFormula,\n          onDropTestFile: this.onDropTestFile,\n          onKeyPress: this.onKeyPress,\n          deleteAttachmentParamFile: this.deleteAttachmentParameterFile,\n          viewAdditionalInfo: this.viewAdditionalInfo,\n          needSubSample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n          intl: this.props.intl,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 4831,\n            columnNumber: 68\n          }\n        });\n      })) : this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? /*#__PURE__*/React.createElement(TestEditForm, {\n        methodValues: this.props.Login.masterData.MethodData,\n        sourceValues: this.props.Login.masterData.SourceData,\n        selecteRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4866,\n          columnNumber: 53\n        }\n      }) : this.props.Login.screenName === 'IDS_INSTRUMENT' ? /*#__PURE__*/React.createElement(ResultEntryInstrumentForm, {\n        selectedRecordInstrumentForm: this.props.Login.selectedRecordInstrumentForm,\n        instrumentcatValue: this.props.Login.masterData.InstrumentCategory,\n        instrumentNameValue: this.props.Login.masterData.InstrumentName,\n        instrumentIdValue: this.props.Login.masterData.InstrumentId,\n        selecteRecord: this.state.selectedRecord || {},\n        timeZoneListData: this.props.Login.timeZoneList || [],\n        onComboChange: this.onComboChange,\n        onComboCategoryChange: this.onComboCategoryChange,\n        onComboNameChange: this.onComboNameChange,\n        onDateChange: this.onDateChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        onChildDataChange: this.onChildDataChange,\n        userInfo: this.props.Login.userInfo,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4875,\n          columnNumber: 57\n        }\n      }) : this.props.Login.screenName === 'IDS_MATERIAL' ? /*#__PURE__*/React.createElement(ResultEntryMaterialForm, {\n        Login: this.props.Login,\n        materialType: this.props.Login.materialType,\n        materialCategory: this.props.Login.materialCat,\n        material: this.props.Login.material,\n        materialInventory: this.props.Login.materialInventory,\n        selectedRecord: this.state.selectedRecord || {},\n        selectedRecordMaterialForm: this.state.selectedRecordMaterialForm || {},\n        onMaterialComboChange: this.onMaterialComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onChildDataChange: this.onChildDataChange,\n        onDateChange: this.onDateChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        userInfo: this.props.Login.userInfo,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4893,\n          columnNumber: 61\n        }\n      }) : this.props.Login.screenName === 'IDS_TASK' ? /*#__PURE__*/React.createElement(ResultEntryTaskForm, {\n        selectedRecordTaskForm: this.state.selectedRecordTaskForm || {},\n        selectedRecord: this.state.selectedRecord || {},\n        onNumericChange: this.ontaskNumericChange,\n        onInputChange: this.ontaskInputChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4911,\n          columnNumber: 65\n        }\n      }) : this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? /*#__PURE__*/React.createElement(ResultEntryParamCommetsForm, {\n        selecteRecord: this.state.selectedRecord || {},\n        onInputChange: this.onInputChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4920,\n          columnNumber: 69\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTFORMULA' ? /*#__PURE__*/React.createElement(ResultEntryFormulaForm, {\n        DynamicFields: this.props.Login.masterData.DynamicFormulaFields // formRef={this.formRef}\n        ,\n        masterData: this.props.Login.masterData,\n        handleClose: this.handleClose,\n        screenName: this.props.Login.screenName,\n        selectedForumulaInput: this.state.selectedForumulaInput || [],\n        onFormulaInputChange: this.onFormulaInputChange,\n        getAverageResult: this.getAverageResult,\n        Login: this.props.Login,\n        showValidate: this.props.Login.showValidate,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4926,\n          columnNumber: 73\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? /*#__PURE__*/React.createElement(ResultEntryImport, {\n        handleClose: this.handleClose,\n        screenName: this.props.Login.screenName,\n        onDropFile: this.onDropFile,\n        selectedImportFile: this.props.Login.masterData.selectedImportFile || {},\n        deleteAttachment: this.deleteAttachment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4940,\n          columnNumber: 77\n        }\n      }) : this.props.Login.screenName === 'IDS_MEANPARAMETER' ? /*#__PURE__*/React.createElement(ResultEntryMean // onInputOnChange={this.onMeanInputOnChange}\n      // onComboChange={this.onMeanComboChange}\n      , {\n        screenName: this.props.Login.screenName,\n        headerSelectionChange: this.headerSelectionChange,\n        selectionChange: this.selectionChange,\n        selectAll: this.state.selectAll,\n        testMean: this.state.testMean,\n        userInfo: this.props.Login.userInfo,\n        meanTestParameterList: this.state.meanTestParameterList || [],\n        selectedTestParam: this.state.selectedTestParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4948,\n          columnNumber: 81\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTPARAMETERCOMMENTS' ? /*#__PURE__*/React.createElement(ResultEntryPredefinedComments, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputChange: this.onInputChange,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4961,\n          columnNumber: 85\n        }\n      }) : this.props.Login.screenName === 'IDS_ENFORCERESULT' ? /*#__PURE__*/React.createElement(ResultEntryEnforceResult, {\n        selectedRecord: this.state.selectedRecord || {},\n        GradeList: this.props.Login.masterData.GradeList && this.props.Login.masterData.GradeList,\n        onInputChange: this.onInputChange,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4967,\n          columnNumber: 89\n        }\n      }) : this.props.Login.screenName === 'IDS_PREVIOUSRESULTVIEW' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n        className: \"one\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4979,\n          columnNumber: 101\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4980,\n          columnNumber: 105\n        }\n      }, /*#__PURE__*/React.createElement(SpecificationInfo, {\n        controlMap: this.state.controlMap,\n        auditInfoFields: auditInfoFields,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedSpecification: this.props.Login.masterData.viewdetails,\n        userInfo: this.props.Login.userInfo,\n        selectedNode: this.props.Login.masterData.selectedNode,\n        selectedRecord: this.state.filterData,\n        approvalRoleActionDetail: this.props.Login.masterData.ApprovalRoleActionDetail,\n        screenName: \"IDS_PREVIOUSRESULTVIEW\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4981,\n          columnNumber: 109\n        }\n      }))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4995,\n          columnNumber: 101\n        }\n      }), /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"ntransactiontestcode\" //data={this.props.Login.addComponentDataList || []}\n        ,\n        data: this.props.Login.masterData.AuditModifiedComments || [],\n        detailedFieldList: this.feildsForGrid,\n        extractedColumnList: this.feildsForGrid //dataResult={this.props.Login.masterData.AuditModifiedComments && this.props.Login.masterData.AuditModifiedComments.length > 0\n        // && process(this.props.Login.masterData.AuditModifiedComments, { skip: 0, take: 10 })}\n        // dataState={{ skip: 0, take: 10 }}\n        ,\n        dataResult: this.props.Login.masterData.AuditModifiedComments && this.props.Login.masterData.AuditModifiedComments.length > 0 && process(this.props.Login.masterData.AuditModifiedComments, this.state.dataState ? this.state.dataState : {\n          skip: 0,\n          take: 10\n        }) //dataState={{ skip: 0, take: 10 }}\n        ,\n        dataState: this.state.dataState ? this.state.dataState : {\n          skip: 0,\n          take: 10\n        },\n        pageable: true,\n        scrollable: 'scrollable',\n        dataStateChange: this.dataResultStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4997,\n          columnNumber: 101\n        }\n      })) : this.props.Login.screenName === 'IDS_ADHOCPARAMETER' ? this.props.Login.masterData.realSampleTypeValue.nclinicaltyperequired === transactionStatus.YES ? /*#__PURE__*/React.createElement(AddAdhocParameter, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        adhocParamter: this.props.Login.masterData.AdhocParamter || {} //operation={this.props.operation}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 5022,\n          columnNumber: 101\n        }\n      }) : /*#__PURE__*/React.createElement(ResultEntryAdhocParameter, {\n        selectedRecordAdhocParameter: this.props.Login.selectedRecordAdhocParameter || {},\n        adhocParamter: this.props.Login.masterData.AdhocParamter || {},\n        onSaveClick: this.onSaveClick,\n        onAdhocParameterInputChange: this.onAdhocParameterInputChange,\n        onAdhocParameterComboChange: this.onAdhocParameterComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 5028,\n          columnNumber: 106\n        }\n      }) //  Start of ALPD-4132 Additional Filter Render Component ATE-241\n      : this.props.Login.multiFilterLoad ? /*#__PURE__*/React.createElement(KendoDatatoolFilter, {\n        filter: this.props.Login.masterData['kendoFilterList'] || {\n          logic: \"and\",\n          filters: []\n        },\n        handleFilterChange: this.handleFilterChange,\n        filterData: this.props.Login.masterData.kendoOptionList || [],\n        fields: this.props.Login.masterData[\"fields\"] || [],\n        userInfo: this.props.Login.userInfo,\n        static: true,\n        parentCallBack: this.parentCallBack,\n        needParentCallBack: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 5037,\n          columnNumber: 101\n        }\n      }) : //ALPD-5367 Result Entry -> In the stored button was enable sub sample & sample.\n      this.props.Login.operation === 'MovesendToStore' ? /*#__PURE__*/React.createElement(MoveToStoreage, {\n        selectedRecord: this.props.Login.masterData.StoreDataRecord,\n        isSendToStore: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 5052,\n          columnNumber: 97\n        }\n      }) : \"\" //  End of ALPD-4132 Additional Filter render Component\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4658,\n        columnNumber: 21\n      }\n    }) : \"\", this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ? /*#__PURE__*/React.createElement(TemplateForm, {\n      templateData: this.props.Login.masterData.ChecklistData,\n      nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode),\n      nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode),\n      needSaveButton: this.props.Login.needSaveButton,\n      formRef: this.formRef,\n      onTemplateInputChange: this.onTemplateInputChange,\n      handleClose: this.closeModal,\n      onTemplateComboChange: this.onTemplateComboChange,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveCheckList,\n      Login: this.props.Login,\n      viewScreen: this.props.Login.openTemplateModal,\n      selectedRecord: this.state.selectedRecord || [],\n      onTemplateDateChange: this.onTemplateDateChange,\n      needValidation: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5065,\n        columnNumber: 25\n      }\n    }) : \"\", this.props.Login.modalShow ?\n    /*#__PURE__*/\n    //ALPD-4870-To show the add popup to get input of filter name,done by Dhanushya RI\n    React.createElement(ModalShow, {\n      modalShow: this.props.Login.modalShow,\n      closeModal: this.closeModalShowForFilter,\n      onSaveClick: this.onSaveModalFilterName,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      mandatoryFields: mandatoryFieldsFilter,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      modalTitle: this.props.Login.modalTitle,\n      modalBody: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 5096,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 5104,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormTextarea, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_FILTERNAME\"\n        }),\n        name: \"sfiltername\" // type=\"text\"\n        ,\n        onChange: this.onInputOnChange,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_FILTERNAME\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord.sfiltername : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: \"50\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 5105,\n          columnNumber: 37\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5084,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  //ALPD-4156--Vignesh R(15-05-2024)-->Result Entry - Option to change section for the test(s)\t\n  getSectionChange(controlcode, testskip, testtake, operation) {\n    if (this.props.Login.masterData.RESelectedTest.length > 0) {\n      let testList = [];\n\n      if (this.props.Login.masterData.searchedTest !== undefined) {\n        testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.searchedTest.slice(testskip, testskip + testtake), \"ntransactiontestcode\");\n      } else {\n        testList = this.props.Login.masterData.RE_TEST && this.props.Login.masterData.RE_TEST.slice(testskip, testskip + testtake);\n      }\n\n      let selectedTestList = getSameRecordFromTwoArrays(testList || [], this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let array = [];\n      let tempsection = 0;\n      let sectionvalue = 0;\n      let sectionflag = true;\n      selectedTestList.forEach(item => {\n        sectionvalue = item.nsectioncode;\n\n        if (sectionvalue !== tempsection && tempsection !== 0) {\n          sectionflag = false;\n        } else {\n          tempsection = sectionvalue;\n        }\n      });\n      selectedTestList && selectedTestList.map(item => {\n        if (!array.includes(item.nsectioncode)) {\n          array.push(item.nsectioncode);\n        }\n      });\n\n      if (sectionflag) {\n        let inputParam = {};\n        let Map = {\n          nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n          nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n          ndesigntemplatemappingcode: this.props.Login.masterData.realDesignTemplateMapping.ndesigntemplatemappingcode,\n          napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion.napprovalversioncode,\n          nsectioncode: array.map(nsectioncode => nsectioncode).join(\",\"),\n          npreregno: selectedTestList ? selectedTestList.map(sample => sample.npreregno).join(\",\") : \"\",\n          ntransactionsamplecode: selectedTestList ? selectedTestList.map(subsample => subsample.ntransactionsamplecode).join(\",\") : \"\",\n          ntransactiontestcode: selectedTestList ? selectedTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n          nselectedtestcode: selectedTestList ? selectedTestList.map(sample => sample.ntestcode).join(\",\") : \"\",\n          ncontrolcode: controlcode,\n          nneedsubsample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n          userinfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          operation: operation,\n          screenName: \"IDS_SECTION\"\n        };\n        inputParam = {\n          inputData: Map,\n          selectedRecord: this.state.selectedRecord\n        };\n        this.props.getSectionChange(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMESECTIONTEST\"\n        }));\n      }\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_SELECTTEST\"\n      }));\n    }\n  }\n\n  valiateCheckAll(data) {\n    let selectAll = true;\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false;\n        }\n      });\n    } else {\n      selectAll = false;\n    }\n\n    return selectAll;\n  }\n\n  // onResultInputChange = (event, index, parameter) => {\n  //     //let ResultParameter = this.props.Login.masterData.ResultParameter ? this.props.Login.masterData.ResultParameter : [];\n  //     let selectedRecord = this.state.selectedRecord || [];\n  //     let ResultParameter = this.state.selectedRecord.ResultParameter ? this.state.selectedRecord.ResultParameter : [];\n  //     let sresult = \"\";\n  //     let sfinal = \"\";\n  //     let sresultpredefinedname= \"\";\n  //     let salertmessage = \"\";\n  //     let sresultcomment = \"\";\n  //     let value = -1;\n  //     let acceptedFile = [];\n  //     let ncalculatedresult; \n  //     let currentAlertResultCode=0;\n  //     let currentntestgrouptestpredefcode=0;\n  //     let inputData={}\n  //     if (parameter.nparametertypecode === parameterType.NUMERIC) {\n  //         if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\n  //             sresult = event.target.value;\n  //             ncalculatedresult = 4\n  //         } else {\n  //             sresult = ResultParameter[index]['sresult'] === null ? \"\" : ResultParameter[index]['sresult'];\n  //             ncalculatedresult = ResultParameter[index]['ncalculatedresult'];\n  //         }\n  //     }\n  //     if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n  //          currentAlertResultCode= event.item.ntransactionresultcode ;\n  //          currentntestgrouptestpredefcode= event.item.ntestgrouptestpredefcode ;\n  //         if (event != null) {\n  //             sresult = event.item.spredefinedname;\n  //             sresultpredefinedname = event.item.sresultpredefinedname;\n  //             sfinal=event.item.spredefinedsynonym\n  //             value = event.item.ngradecode;\n  //             salertmessage=event.item.salertmessage?event.item.salertmessage:\"\";\n  //             sresultcomment= event.item.spredefinedcomments?event.item.spredefinedcomments:\"\";\n  //             ncalculatedresult = 4; \n  //         }\n  //         else {\n  //             sresult = \"\";\n  //             sfinal = \"\";\n  //             sresultpredefinedname= \"\";\n  //             value = -1;\n  //             ncalculatedresult = 4\n  //         }\n  //         inputData={\n  //             'ntestgrouptestpredefcode':event.item.ntestgrouptestpredefcode,\n  //             'salertmessage':salertmessage,\n  //             'nneedresultentryalert':event.item.nneedresultentryalert,\n  //             'nneedsubcodedresult':event.item.nneedsubcodedresult\n  //         }\n  //         // ResultParameter[index]['additionalInfo']&& delete ResultParameter[index]['additionalInfo'] \n  //         // ResultParameter[index]['additionalInfo']&& delete ResultParameter[index]['additionalInfoUidata']  \n  //         if(event.item.nneedresultentryalert===transactionStatus.NO&&\n  //             event.item.nneedsubcodedresult===transactionStatus.NO){\n  //                 if(ResultParameter[index]['additionalInfo']){ \n  //                     ResultParameter[index]['additionalInfo']=\"\" \n  //                 } \n  //                 if(ResultParameter[index]['additionalInfoUidata']){  \n  //                     ResultParameter[index]['additionalInfoUidata']=\"\" \n  //                 } \n  //             }\n  //     }\n  //     if (parameter.nparametertypecode === parameterType.CHARACTER) {\n  //         sresult = event.target.value;\n  //         if (event.target.value.trim() === \"\")\n  //             ncalculatedresult = -1;\n  //         else\n  //             ncalculatedresult = 4;\n  //     }\n  //     if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\n  //         sresult = event[0] && event[0].name;\n  //         sfinal= event;\n  //         ncalculatedresult = 4\n  //     }\n  //     ResultParameter[index]['sresult'] = sresult\n  //     ResultParameter[index]['sfinal'] = sfinal\n  //     ResultParameter[index]['sresultpredefinedname'] = sresultpredefinedname\n  //     ResultParameter[index]['sresultcomment'] = sresultcomment\n  //     ResultParameter[index]['salertmessage'] = salertmessage\n  //     ResultParameter[index]['acceptedFile'] = acceptedFile\n  //     ResultParameter[index]['editable'] = true\n  //     ResultParameter[index]['ngradecode'] = value\n  //     ResultParameter[index]['ncalculatedresult'] = ncalculatedresult \n  //     // this.props.Login.masterData.ResultParameter = ResultParameter;\n  //     selectedRecord.ResultParameter = ResultParameter\n  //     if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n  //         this.props.getPredefinedData(inputData,selectedRecord,currentAlertResultCode,this.props.Login.masterData) \n  //     }\n  //     this.setState({\n  //         selectedRecord: selectedRecord,\n  //         currentAlertResultCode,\n  //         currentntestgrouptestpredefcode\n  //     });\n  //     // const updateInfo = {\n  //     //     typeName: DEFAULT_RETURN,\n  //     //     data: { masterData: this.props.Login.masterData }\n  //     // }\n  //     // this.props.updateStore(updateInfo);\n  // }\n  updateTestMethodSource(inputData, masterData, ncontrolcode) {\n    let inputParam = {\n      inputData: { ...inputData,\n        'userinfo': this.props.Login.userInfo,\n        ncontrolcode\n      },\n      // formData: formData,\n      // isFileupload: true,\n      operation: \"createMethod\",\n      screenName: \"IDS_TESTMETHODSOURCE\",\n      displayName: this.props.Login.inputParam.displayName,\n      //, postParam,\n      //inputData1: inputData,\n      masterData: masterData\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          //screenName: \"completeaction\",\n          operation: \"createMethod\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateTestMethodSource(inputData, masterData);\n    }\n  }\n\n  updateParameterComments(inputData, masterData, ncontrolcode) {\n    // let inputData1 = { ...inputData, ncontrolcode }\n    const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n    inputData = { ...inputData,\n      ndesigntemplatemappingcode: ndesigntemplatemappingcode\n    };\n    let inputParam = {\n      inputData: { ...inputData,\n        ncontrolcode,\n        'userinfo': this.props.Login.userInfo\n      },\n      operation: this.props.Login.operation,\n      screenName: \"IDS_RESULT\",\n      displayName: this.props.Login.inputParam.displayName,\n      //, postParam,\n      //inputData: inputData1,\n      masterData: masterData\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          //screenName: \"completeaction\",\n          operation: \"updateParameterComments\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateParameterComments(inputData, masterData);\n    }\n  }\n\n  //ALPD-4156--Vignesh R(15-05-2024)-->Result Entry - Option to change section for the test(s)\t\n  onSaveSection(saveType) {\n    let inputParam = {};\n    let resultEntryData = {};\n    let testList = [];\n    let {\n      testskip,\n      testtake,\n      sampleskip,\n      sampletake\n    } = this.state;\n\n    if (this.props.Login.masterData.searchedTest !== undefined) {\n      testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.searchedTest.slice(testskip, testskip + testtake), \"ntransactiontestcode\");\n    } else {\n      testList = this.props.Login.masterData.RE_TEST && this.props.Login.masterData.RE_TEST.slice(testskip, testskip + testtake);\n    }\n\n    let subSampleList = [];\n\n    if (this.props.Login.masterData.searchedSubSample !== undefined) {\n      subSampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.searchedSubSample.slice(testskip, testskip + testtake), \"ntransactionsamplecode\");\n    } else {\n      subSampleList = this.props.Login.masterData.RE_SUBSAMPLE && this.props.Login.masterData.RE_SUBSAMPLE.slice(testskip, testskip + testtake);\n    }\n\n    let sampleList = [];\n\n    if (this.props.Login.masterData.searchedSample !== undefined) {\n      sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.searchedSample.slice(sampleskip, sampleskip + sampletake), \"npreregno\");\n    } else {\n      sampleList = this.props.Login.masterData.RE_SAMPLE && this.props.Login.masterData.RE_SAMPLE.slice(sampleskip, sampleskip + sampletake);\n    } //\n\n\n    let sectionList = getSameRecordFromTwoArrays(testList || [], this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n    let sampleListCount = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.RESelectedSample, \"npreregno\");\n    resultEntryData[\"npreregno\"] = sectionList ? sectionList.map(sample => sample.npreregno).join(\",\") : \"\";\n    resultEntryData[\"ntransactionsamplecode\"] = sectionList ? sectionList.map(sample => sample.ntransactionsamplecode).join(\",\") : \"\";\n    resultEntryData[\"ntransactiontestcode\"] = sectionList ? sectionList.map(sample => sample.ntransactiontestcode).join(\",\") : \"\";\n    resultEntryData[\"nneedsubsample\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false;\n    resultEntryData[\"nsectioncode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nsectioncode\"].value;\n    resultEntryData[\"nneedsubsample\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false;\n\n    if (!(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample)) {\n      resultEntryData[\"ntansactionSubSamplecode\"] = subSampleList ? subSampleList.map(sample => sample.ntransactionsamplecode).join(\",\") : \"\";\n    }\n\n    resultEntryData[\"userinfo\"] = this.props.Login.userInfo;\n    resultEntryData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.realDesignTemplateMapping.ndesigntemplatemappingcode;\n    resultEntryData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue.nregtypecode;\n    resultEntryData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\n    resultEntryData[\"ntestcode\"] = this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode === 0 ? this.props.Login.masterData.Test.map(test => test.ntestcode).join(',') : String(this.props.Login.masterData.realTestValue.ntestcode) : null;\n    resultEntryData[\"masterData\"] = this.props.Login.masterData;\n    resultEntryData[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n    resultEntryData[\"activeTestTab\"] = this.props.Login.activeTestTab || 'IDS_TESTATTACHMENTS';\n    resultEntryData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode;\n    resultEntryData[\"napprovalversioncode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode; // joballocationData[\"sfilterSection\"] = this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode.toString() : \"-1\";\n\n    let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n    resultEntryData[\"fromdate\"] = obj.fromDate;\n    resultEntryData[\"todate\"] = obj.toDate;\n    resultEntryData[\"activeSampleTab\"] = this.props.Login.activeTestTab || \"IDS_SAMPLEATTACHMENTS\";\n    resultEntryData[\"nregistrationsectioncode\"] = this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(item1 => item1.nregistrationsectioncode).join(\",\");\n    resultEntryData[\"ncontrolcode\"] = this.props.Login.ncontrolcode;\n    resultEntryData[\"nbatchmastercode\"] = this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1;\n    resultEntryData[\"nworlistcode\"] = this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1;\n    resultEntryData[\"nneedjoballocation\"] = this.props.Login.masterData.realRegSubTypeValue.nneedjoballocation;\n    resultEntryData[\"nneedReceivedInLab\"] = parseInt(this.props.Login.settings && this.props.Login.settings['43']);\n    inputParam = {\n      classUrl: \"resultentrybysample\",\n      methodUrl: \"Test\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: resultEntryData,\n      //selectedId: this.state.selectedRecord[\"njoballocationcode\"],\n      operation: \"updateSection\",\n      saveType,\n      searchRef: this.searchRef,\n      postParamList: this.postParamList,\n      action: \"updateSection\",\n      selectedRecord: this.state.selectedRecord,\n      RESelectedTest: this.props.Login.masterData.RESelectedTest\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          screenName: \"IDS_SECTION\",\n          operation: this.props.Login.operation\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateSectionTest(inputParam);\n    }\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\",\n        \"dataType\": [option[designProperties.LISTITEM]]\n      };\n    });\n    return temparray;\n  }\n\n  constructDesign(list) {\n    let newList = [];\n\n    if (list.length > 0) {\n      list.map(i => {\n        newList.push({\n          [designProperties.LABEL]: i,\n          [designProperties.VALUE]: i\n        });\n      });\n    }\n\n    return newList;\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      showTest,\n      showSample,\n      userRoleControlRights,\n      controlMap,\n      resultDataState,\n      instrumentDataState,\n      materialDataState,\n      taskDataState,\n      documentDataState,\n      resultChangeDataState,\n      testCommentDataState,\n      historyDataState,\n      sampleListColumns,\n      subSampleListColumns,\n      testListColumns,\n      SingleItem,\n      sampleListMainField,\n      subSampleListMainField,\n      testListMainField,\n      SampleGridItem,\n      SampleGridExpandableItem,\n      sampleMoreField,\n      subSampleMoreField,\n      testMoreField,\n      selectedRecord,\n      SampleType,\n      RegistrationType,\n      RegistrationSubType,\n      REFilterStatus,\n      REJobStatus,\n      Testvalues,\n      ApprovalConfigVersion,\n      DynamicSampleColumns,\n      DynamicSubSampleColumns,\n      DynamicTestColumns,\n      DynamicGridItem,\n      DynamicGridMoreField,\n      validateFormulaMandyFields,\n      skip,\n      take,\n      testskip,\n      testtake,\n      selectedFilter,\n      stateDynamicDesign,\n      activeTabIndex,\n      activeTabId,\n      sampleChangeDataState,\n      testSearchField,\n      AdhocParamter,\n      Batchvalues,\n      Worklistvalues,\n      ConfigurationFilterValues,\n      enlLink,\n      openELNSheet,\n      parameterResults,\n      isParameterInitialRender,\n      isaddSampleRender,\n      selectedRecordTaskForm,\n      isTaskInitialRender,\n      selectedRecordMaterialForm,\n      isMaterialInitialRender,\n      selectedRecordInstrumentForm,\n      isInstrumentInitialRender,\n      selectedRecordCompleteForm,\n      isCompleteInitialRender,\n      subSampleSkip,\n      subSampleTake,\n      sampleSearchField,\n      subsampleSearchField,\n      selectedRecordAdhocParameter,\n      samplefilteritem,\n      sampledisplayfields\n    } = this.state; //,currentAlertResultCode,currentntestgrouptestpredefcode\n\n    let bool = false;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        bool = true;\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n    }\n\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n      DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\n      DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n      DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n      DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n      SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : []; // testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\n      // testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\n\n      testMoreField = dynamicColumn.testListFields.testlistmoreitems ? dynamicColumn.testListFields.testlistmoreitems : [];\n      testListColumns = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\n      testSearchField = dynamicColumn.testListFields.testsearchfields ? dynamicColumn.testListFields.testsearchfields : [];\n      sampleSearchField = dynamicColumn.samplesearchfields ? dynamicColumn.samplesearchfields : [];\n      subsampleSearchField = dynamicColumn.subsamplesearchfields ? dynamicColumn.subsamplesearchfields : [];\n      samplefilteritem = dynamicColumn.samplefilteritem || [];\n      sampledisplayfields = dynamicColumn.sampledisplayfields || [];\n      this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample && DynamicSubSampleColumns.push({\n        1: {\n          'en-US': 'Specimen',\n          'ru-RU': 'Образец',\n          'tg-TG': 'Намуна'\n        },\n        2: \"scomponentname\"\n      });\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n      let dataState = {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \n\n      };\n      bool = true;\n      resultDataState = dataState;\n      instrumentDataState = dataState;\n      materialDataState = dataState;\n      taskDataState = dataState;\n      documentDataState = dataState;\n      resultChangeDataState = dataState;\n      historyDataState = dataState;\n      testCommentDataState = dataState;\n      sampleChangeDataState = dataState;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      bool = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.selectedRecordAdhocParameter !== previousProps.Login.selectedRecordAdhocParameter) {\n      bool = true;\n      selectedRecordAdhocParameter = this.props.Login.selectedRecordAdhocParameter;\n    }\n\n    if (this.props.Login.selectedRecordTaskForm !== previousProps.Login.selectedRecordTaskForm) {\n      bool = true;\n      selectedRecordTaskForm = this.props.Login.selectedRecordTaskForm;\n    }\n\n    if (this.props.Login.selectedRecordMaterialForm !== previousProps.Login.selectedRecordMaterialForm) {\n      bool = true;\n      selectedRecordMaterialForm = this.props.Login.selectedRecordMaterialForm;\n    }\n\n    if (this.props.Login.selectedRecordInstrumentForm !== previousProps.Login.selectedRecordInstrumentForm) {\n      bool = true;\n      selectedRecordInstrumentForm = this.props.Login.selectedRecordInstrumentForm;\n    }\n\n    if (this.props.Login.selectedRecordCompleteForm !== previousProps.Login.selectedRecordCompleteForm) {\n      bool = true;\n      selectedRecordCompleteForm = this.props.Login.selectedRecordCompleteForm;\n    }\n\n    if (this.props.Login.parameterResults !== previousProps.Login.parameterResults) {\n      bool = true;\n      parameterResults = this.props.Login.parameterResults;\n    }\n\n    if (this.props.Login.isTaskInitialRender !== previousProps.Login.isTaskInitialRender) {\n      bool = true;\n      isTaskInitialRender = this.props.Login.isTaskInitialRender;\n    }\n\n    if (this.props.Login.isParameterInitialRender !== previousProps.Login.isParameterInitialRender) {\n      bool = true;\n      isParameterInitialRender = this.props.Login.isParameterInitialRender;\n    }\n\n    if (this.props.Login.isaddSampleRender !== previousProps.Login.isaddSampleRender) {\n      bool = true;\n      isaddSampleRender = this.props.Login.isaddSampleRender;\n    } // if (this.props.Login.currentAlertResultCode !== previousProps.Login.currentAlertResultCode) {\n    //     bool = true;\n    //     currentAlertResultCode = this.props.Login.currentAlertResultCode;\n    // }\n    // if (this.props.Login.currentntestgrouptestpredefcode !== previousProps.Login.currentntestgrouptestpredefcode) {\n    //     bool = true;\n    //     currentntestgrouptestpredefcode = this.props.Login.currentntestgrouptestpredefcode;\n    // }\n\n\n    if (this.props.Login.validateFormulaMandyFields !== previousProps.Login.validateFormulaMandyFields) {\n      bool = true;\n      validateFormulaMandyFields = this.props.Login.validateFormulaMandyFields;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\n      RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      REFilterStatus = constructOptionList(this.props.Login.masterData.REFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", \"nsorter\", 'ascending', \"ntransactionstatus\", false);\n      REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\n      Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestsynonym', 'ascending', 'ntestcode', false);\n      Batchvalues = constructOptionList(this.props.Login.masterData.Batchvalues || [], 'nbatchmastercode', 'sbatcharno', 'ascending', 'nbatchmastercode', false);\n      Worklistvalues = constructOptionList(this.props.Login.masterData.Worklistvalues || [], 'nworklistcode', 'sworklistno', 'ascending', 'nworklistcode', false);\n      ConfigurationFilterValues = constructOptionList(this.props.Login.masterData.ConfigurationFilterValues || [], 'nconfigfiltercode', 'sfiltername', 'ascending', 'nconfigfiltercode', false);\n      ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname', 'ascending', 'napprovalconfigversioncode', false); // AdhocParamter = constructOptionList(this.props.Login.masterData.AdhocParamter || [], 'ntestparametercode', 'sparametersynonym',\n      //     'ascending', 'ntestparametercode', false);\n\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      subSampleSkip = this.props.Login.subSampleSkip === undefined ? subSampleSkip : this.props.Login.subSampleSkip;\n      subSampleTake = this.props.Login.subSampleTake || subSampleTake;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\n        instrumentDataState = this.props.Login.instrumentDataState;\n      }\n\n      if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\n        taskDataState = this.props.Login.taskDataState;\n      }\n\n      if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\n        resultChangeDataState = this.props.Login.resultChangeDataState;\n      }\n\n      if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\n        historyDataState = this.props.Login.historyDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      }\n\n      if (this.props.Login.sampleChangeDataState && this.props.Login.sampleChangeDataState !== previousProps.Login.sampleChangeDataState) {\n        sampleChangeDataState = this.props.Login.sampleChangeDataState;\n      } // if (this.props.Login.enlLink !== previousProps.Login.enlLink) {\n      //     bool = true;\n      //     enlLink = this.props.Login.enlLink;\n      //     openELNSheet=true;\n      //     }\n\n\n      let selectFilterStatus = {\n        ntransactionstatus: transactionStatus.PARTIAL,\n        sfilterstatus: this.props.intl.formatMessage({\n          id: \"IDS_PARTIAL\"\n        }),\n        scolorhexcode: \"#800000\"\n      };\n      const selectedFilters = this.props.Login.masterData.REFilterStatus || [];\n      const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\n      const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL);\n\n      if (selectedFiltersNew.length > 0 && index === -1) {\n        selectedFiltersNew.push(selectFilterStatus);\n      }\n\n      selectedFilter = selectedFiltersNew; // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {masterData: this.props.Login.masterData,showTest,showSample }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      SampleType = SampleType.get(\"OptionList\");\n      RegistrationType = RegistrationType.get(\"OptionList\");\n      RegistrationSubType = RegistrationSubType.get(\"OptionList\");\n      REFilterStatus = REFilterStatus.get(\"OptionList\");\n      REJobStatus = REJobStatus.get(\"OptionList\");\n      Testvalues = Testvalues.get(\"OptionList\");\n      Batchvalues = Batchvalues.get(\"OptionList\");\n      Worklistvalues = Worklistvalues.get(\"OptionList\");\n      ConfigurationFilterValues = ConfigurationFilterValues.get(\"OptionList\");\n      ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\"); // AdhocParamter=AdhocParamter.get(\"OptionList\")\n    }\n\n    if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\n      activeTabIndex = this.props.Login.activeTabIndex;\n      activeTabId = this.props.Login.activeTabId;\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\n      const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\", \"sregtemplatename\", undefined, undefined, false);\n      stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\");\n    }\n\n    if (bool) {\n      this.setState({\n        showTest,\n        showSample,\n        userRoleControlRights,\n        controlMap,\n        resultDataState,\n        instrumentDataState,\n        materialDataState,\n        taskDataState,\n        documentDataState,\n        resultChangeDataState,\n        testCommentDataState,\n        historyDataState,\n        sampleListColumns,\n        subSampleListColumns,\n        testListColumns,\n        SingleItem,\n        sampleListMainField,\n        subSampleListMainField,\n        testListMainField,\n        SampleGridItem,\n        SampleGridExpandableItem,\n        sampleMoreField,\n        subSampleMoreField,\n        testMoreField,\n        selectedRecord,\n        SampleType,\n        RegistrationType,\n        RegistrationSubType,\n        REFilterStatus,\n        REJobStatus,\n        Testvalues,\n        Batchvalues,\n        Worklistvalues,\n        ConfigurationFilterValues,\n        ApprovalConfigVersion,\n        validateFormulaMandyFields,\n        skip,\n        take,\n        testskip,\n        testtake,\n        selectedFilter,\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        stateDynamicDesign,\n        activeTabIndex,\n        activeTabId,\n        sampleChangeDataState,\n        testSearchField,\n        AdhocParamter,\n        parameterResults,\n        isParameterInitialRender,\n        isaddSampleRender,\n        selectedRecordTaskForm,\n        isTaskInitialRender,\n        selectedRecordMaterialForm,\n        isMaterialInitialRender,\n        selectedRecordInstrumentForm,\n        isInstrumentInitialRender,\n        selectedRecordCompleteForm,\n        isCompleteInitialRender //,currentAlertResultCode,currentntestgrouptestpredefcode\n        ,\n        subSampleSkip,\n        subSampleTake,\n        sampleSearchField,\n        subsampleSearchField,\n        selectedRecordAdhocParameter,\n        samplefilteritem,\n        sampledisplayfields\n      });\n    }\n\n    if (this.props.Login.meanTestParameterList !== previousProps.Login.meanTestParameterList) {\n      this.setState({\n        meanTestParameterList: this.props.Login.meanTestParameterList\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        activeTabIndex: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    } // if (props.Login.selectedRecord !== state.selectedRecord) {\n    //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\n    // }\n\n\n    return null;\n  }\n\n}\n\nconst mapStatetoProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStatetoProps, {\n  crudMaster,\n  updateStore,\n  getsubSampleREDetail,\n  getTestREDetail,\n  getTestChildTabREDetail,\n  resultGetModule,\n  completeTest,\n  testMethodSourceEdit,\n  addREInstrument,\n  addREMaterial,\n  deleteInstrumentRecord,\n  fetchInstrumentRecord,\n  deleteTaskRecord,\n  fetchTaskRecord,\n  parameterRecord,\n  checkListRecord,\n  onSaveCheckList,\n  defaultTest,\n  getFormula,\n  getRERegistrationType,\n  getRERegistrationSubType,\n  fetchMaterialRecord,\n  getREApprovalConfigVersion,\n  getResultEntryDetails,\n  calculateFormula,\n  getREFilterStatus,\n  getREFilterTestData,\n  getREJobStatus,\n  getSampleChildTabREDetail,\n  viewAttachment,\n  getAttachmentCombo,\n  deleteAttachment,\n  resultImportFile,\n  validateEsignCredentialComplete,\n  getCommentsCombo,\n  updateTestMethodSource,\n  filterTransactionList,\n  validateEsignCredential,\n  updateParameterComments,\n  previewSampleReport,\n  getMeanCalculationTestParameter,\n  getREMaterialCategoryByType,\n  getREMaterialByCategory,\n  getREMaterialInvertoryByMaterial,\n  getAvailableMaterialQuantity,\n  testStart,\n  getSubSampleChildTabDetail,\n  getSampleChildTabDetail,\n  getREFilterTemplate,\n  getAverageResult,\n  getREMaterialComboGet //,deleteResultUsedMaterial\n  ,\n  getPredefinedData,\n  getELNTestValidation,\n  getConfigurationFilter,\n  getTestBasedBatchWorklist,\n  addREAdhocParamter,\n  createAdhocParamter,\n  enforceResult,\n  ResultEntryViewPatientDetails,\n  resultEntryGetParameter,\n  resultEntryGetSpec,\n  resultEntryGetComponent,\n  addREAdhocTestParamter,\n  createAdhocTestParamter,\n  CompletePopupAction,\n  exportAction,\n  getSectionChange,\n  updateSectionTest,\n  getResultEntryFilter\n})(injectIntl(ResultEntry));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntry.jsx"],"names":["React","Component","faPlay","faAddressBook","faCheckCircle","faEye","faPencilRuler","faFileImport","faSync","faBorderAll","faLink","faComment","faComments","faPaperclip","faCommentDots","faChevronRight","faMicroscope","faFlask","faHistory","faBookMedical","faNotesMedical","faCalculator","faFileExcel","faBolt","Card","Col","Row","Nav","Button","Modal","FormattedMessage","injectIntl","connect","Axios","ListWrapper","FontAwesomeIcon","faFileInvoice","SplitterLayout","ContentPanel","PortalModal","Iframe","ReactTooltip","ScheduleSection","crudMaster","updateStore","getsubSampleREDetail","getTestREDetail","getTestChildTabREDetail","resultGetModule","fetchMaterialRecord","completeTest","testMethodSourceEdit","addREInstrument","addREMaterial","deleteInstrumentRecord","fetchInstrumentRecord","deleteTaskRecord","fetchTaskRecord","parameterRecord","checkListRecord","onSaveCheckList","defaultTest","getFormula","getRERegistrationType","getRERegistrationSubType","getREApprovalConfigVersion","getResultEntryDetails","calculateFormula","getREFilterStatus","getREFilterTestData","getREJobStatus","viewAttachment","validateEsignCredentialComplete","getAttachmentCombo","deleteAttachment","getCommentsCombo","updateTestMethodSource","resultImportFile","filterTransactionList","validateEsignCredential","getSampleChildTabREDetail","updateParameterComments","getREMaterialCategoryByType","getREMaterialByCategory","getREMaterialInvertoryByMaterial","previewSampleReport","getMeanCalculationTestParameter","getAvailableMaterialQuantity","testStart","getSubSampleChildTabDetail","getSampleChildTabDetail","getREFilterTemplate","getAverageResult","getREMaterialComboGet","getPredefinedData","getELNTestValidation","getResultEntryFilter","getConfigurationFilter","getTestBasedBatchWorklist","addREAdhocParamter","createAdhocParamter","addREAdhocTestParamter","createAdhocTestParamter","enforceResult","ResultEntryViewPatientDetails","resultEntryGetParameter","resultEntryGetSpec","resultEntryGetComponent","CompletePopupAction","exportAction","getSectionChange","updateSectionTest","filterObject","toTimestamp","rearrangeDateFormatforKendoDataTool","sortData","create_UUID","getControlMap","listDataFromDynamicArray","formatInputDate","validateTwoDigitDate","showEsign","constructOptionList","deleteAttachmentDropZone","Lims_JSON_stringify","CF_encryptionData","onSaveMandatoryValidation","replaceBackSlash","sortDataForDate","convertDateTimetoStringDBFormat","rsapi","toast","SampleType","parameterType","ResultEntry","ResultEntryGrade","transactionStatus","RegistrationType","RegistrationSubType","FORMULAFIELDTYPE","designProperties","SideBarSeqno","SideBarTabIndex","checkBoxOperation","ProductList","CustomTabs","ResultEntryResultsTab","DEFAULT_RETURN","SlideOutModal","Esign","BreadcrumbComponent","ResultEntryFilter","ResultEntryInstrumentForm","ResultEntryForm","ResultEntryParameterForm","TestEditForm","SampleInfoView","SampleInfoGrid","ApprovalInstrumentTab","ResultEntryTaskTab","ResultEntryTaskForm","ResultEntryParamCommetsForm","TemplateForm","templateChangeHandler","numberConversion","numericGrade","PerfectScrollbar","ResultEntryFormulaForm","SampleApprovalHistory","ResultChangeHistoryTab","Attachments","Comments","onSaveSampleAttachment","onSaveTestAttachment","onSaveSubSampleAttachment","onSaveSampleComments","onSaveTestComments","onSaveSubSampleComments","ResultEntryImport","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","ResultEntryMean","ScrollBar","ResultEntryMaterialForm","AddAdhocParameter","ResultUsedMaterial","FontIconWrap","CustomSwitch","TransactionListMasterJsonView","ModalShow","DataGrid","process","ResultEntryPredefinedComments","ResultEntryEnforceResult","SpecificationInfo","FormSelectSearch","ResultEntryAdhocParameter","ResultEntryCompleteForm","KendoDatatoolFilter","intl","FormTextarea","CustomPopover","MoveToStoreage","constructor","props","paneSizeChange","d","setState","splitChangeWidthPercentage","event","file","fieldName","selectedRecord","Login","masterData","selectedImportFile","updateInfo","typeName","data","deleteAttachmentParameterFile","index","selectedRecordParameter","state","ResultParameter","closeModalShowForFilter","loadEsign","modalShow","selectedId","closeModalShow","showAlertGrid","forEach","object","onTabChangeRulesEngine","tabProps","activeTabName","handleExpandChange","mapobject","childListMap","Map","keylst","Object","keys","map","key","set","parseInt","values","availableTestFilter","lstntransactionsamplecode","RegistrationTestAlert","boolean1","includes","ntransactiontestcode","toString","unavailableTestFilter","NewTestGroupTestAlert","dataStateAvailabletestAlert","dataStateavailabletest","dataState","dataStateUnAvailabletestAlert","dataStateunavailabletest","tabAlertRulesEngine","tabMap","RESelectedTest","filter","length","skip","take","controlMap","userRoleControlRights","realRegSubTypeValue","nneedsubsample","closeModal","openModal","selectedRecordAdhocParameter","openTemplateModal","screenName","operation","loadFile","multiFilterLoad","showValidate","validateFormulaMandyFields","onSaveMultiFilterClick","startDate","realFromDate","fromDate","Date","endDate","realToDate","toDate","obj","userInfo","searchedSample","filterSampleList","kendoFilterList","emptyFilterList","filters","item","value","push","warn","formatMessage","id","selectedSample","searchSampleRef","current","selectedSubSample","selectedTest","searchedSubSample","undefined","searchedTest","RegistrationAttachment","RE_SUBSAMPLE","RE_TEST","RegistrationTestComment","RegistrationParameter","RegistrationTestAttachment","RegistrationComment","RegistrationSampleAttachment","RegistrationSampleComment","inputData","userinfo","nsampletypecode","realSampleTypeValue","nregtypecode","realRegTypeValue","nregsubtypecode","napprovalversioncode","realApproveConfigVersion","napprovalconfigversioncode","ntestcode","realTestcodeValue","fromdate","todate","activeTestKey","activeTestTab","activeSampleKey","testskip","testtake","subSampleSkip","subSampleTake","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","sampleChangeDataState","ndesigntemplatemappingcode","searchSubSampleRef","searchTestRef","nneedtemplatebasedflow","SINGLESELECT","nworlistcode","realWorklistCodeValue","nworklistcode","nbatchmastercode","realBatchCodeValue","activeTabIndex","enableAutoClick","nneedReceivedInLab","settings","activeSampleTab","activeSubSampleTab","childTabsKey","npreregno","ntransactionstatus","String","realFilterStatusValue","removeElementFromArray","sample","RESelectedSample","onFilterComboChange","fieldname","dateObj","realDesignTemplateMapping","realApprovalConfigVersionList","realDesignTemplateMappingList","realFilterStatusList","realRegistrationSubTypeList","realRegistrationTypeList","realTestvaluesList","nflag","defaultSampleType","defaultRegistrationType","defaultRegistrationSubType","transcode","defaultFilterStatus","REFilterStatus","join","nneedjoballocation","nneedmyjob","inputParamData","ApprovalConfigVersion","ntranscode","DesignTemplateMappingValue","defaultApprovalConfigVersion","njobstatuscode","defaultjobstatus","defaultTestvalues","defaultConfigurationFilterValue","realdefaultConfigurationFilterValue","nconfigfiltercode","defaultWorklistvalue","defaultBatchvalue","OnDateConverstion","date","month","getMonth","day","getDate","getFullYear","onReload","showTest","showSample","inpuParamData","refs","historyDataState","onDesignTemplateChange","labelname","openFilterName","modalTitle","onSaveModalFilterName","sfiltername","needExtraKeys","sampleTypeValue","regTypeValue","regSubTypeValue","approvalConfigValue","filterStatusValue","testValue","designTemplateMappingValue","worklistValue","realWorklistvalue","batchValue","napproveconfversioncode","nbatchcode","inputParam","classUrl","methodUrl","clickFilterDetail","DesignTemplateMapping","realConfigurationFilterValuesList","ConfigurationFilterValues","nfilternamecode","FromDate","ToDate","onREFilterSubmit","saveFilterSubmit","onMultiFilterClick","filterFields","sampledisplayfields","samplefilteritem","languageTypeCode","slanguagetypecode","datefileds","updFilterFields","fields","filterinputtype","columnname","sampleList","RE_SAMPLE","kendoOptionList","x","parentCallBack","handleFilterChange","onSecondaryPaneSizeChange","e","val","onComboCategoryChange","uRL","ninstrumentcatcode","ncalibrationRequired","ncalibrationreq","post","then","response","TagInstrument","Instrument","TagListInstrument","get","ninstrumentcode","catch","error","status","message","testRETabDetail","testTabMap","test","testList","slice","meanControlId","has","ncontrolcode","selectedTestList","genericLabel","dataStateChange","editpredefinedcomments","formulaCalculation","primaryKeyField","ncontrolCode","deleteMaterialRecord","addResultEntryTask","onAttachmentSaveClick","VALUE","esignRights","masterList","onCommentsSaveClick","ResultChangeHistory","sampleDataStateChange","sampleHistoryDataState","sampleGridDataState","sampleGridDataStateChange","dataResultStateChange","subsampleTabDetail","ntransactionsamplecode","RESelectedSubSample","subsampleList","subsampleskip","subsampletake","selectedSubSampleList","attachmentskip","attachmenttake","subSampleCommentDataState","subSampledataStateChange","onSampleTabChange","onTestTabChange","preregno","openStoredSampleData","dataToShow","needsubsample","findIndex","info","openClosePortal","openELNSheet","enlLink","integrationSettings","onSubSampleTabChange","subSampleAttachmentDataState","viewSample","viewdetails","popUptestDataState","adhocParameter","ntestgrouptestcode","adhocId","nclinicaltyperequired","YES","displayName","nformcode","screenData","nresultusedmaterialcode","selectedRecordTaskForm","stestsynonym","isTaskInitialRender","addResultUsedTaskId","parameterData","modalEvent","currentTarget","selectedForumulaInput","senableAverage","svalues","soldvalue","lstDynamicFields","dynamicfields","selectedResultGrade","exportExcelHeader","SampleList","exportId","resultImport","importId","closeFilter","inputValues","realSampleTypeList","SampleTypeValue","RegTypeValue","RegSubTypeValue","FilterStatusValue","ApprovalVersionValue","JobStatusValue","Testvalues","Batchvalues","realBatchvaluesList","BatchValue","realBatchvalue","Worklistvalues","RealWorklistvaluesList","WorklistValue","TestValue","ConfigurationFilterValue","showFilter","handlePageChange","handleSubSamplePageChange","handleTestPageChange","sampletakeDataState","verticalPaneSizeChange","enableAutoHeight","initialVerticalWidth","changeSplitterOption","sideNavDetail","editTestCommentsId","resultTabDetail","onTabChange","attachmentTabDetail","commentTabDetail","SingleItem","gridfillingColumn","DynamicGridItem","DynamicGridMoreField","resultTabMap","TEST","attachmentTabMap","selectedSampleList","SUBSAMPLE","SAMPLE","testDataStateChange","testAttachmentDataState","commentTabMap","onInputSwitchOnChange","target","name","enablePropertyPopup","changePropertyViewClose","activeTabId","changePropertyView","window","innerWidth","tabSequence","tabseqno","mandatoryFieldsForAdditionalInfo","mandatoryFieldsAdditionalInfo","showMultiSelectCombo","defaultActions","testChildGetREParam","setDefaultId","TestList","splice","acceptTestList","dataItem","selectedSpec","stransactiontestcode","transactiontestcodeforvalidation","substring","ntransactionresultcode","ntestgrouptestparametercode","nispredefinedformula","nroundingdigits","npredefinedformulacode","nallottedspeccode","completePopup","completeResultId","validation","array","nsectioncode","transactiontestcode","basedrulesengine","completeActions","nportalrequired","postParamList","nsettingcode","NO","nusercode","selectedRecordCompleteForm","susername","label","testStartActions","nneedtestinitiate","progressTimerStart","validateEsign","sreason","nreasoncode","spredefinedreason","password","onEsignInputOnChange","type","checked","onChildDataChange","childData","selectedRecordMaterialForm","isMaterialInitialRender","isCompleteInitialRender","selectedRecordInstrumentForm","isInstrumentInitialRender","onInputOnChange","ntestgroupmaterial","onSaveFileClick","saveType","formRef","acceptedFile","sfilename","formData","FormData","append","JSON","stringify","isFileupload","onSaveClickAdhocParam","testParameter","nparamtercode","ntestgroupparamtercode","ntestparametercode","adhocpreregno","adhoctransactiontestcode","action","onsaveClickAdhocparameter","nvisibleadhocparameter","onDropFile","onFormulaInputChange","selectedMandatory","dynamicformulafields","ndynamicformulafieldcode","INTEGER","replace","formulainput","sparameter","sdescription","onTemplateInputChange","control","onTemplateComboChange","comboData","onTemplateDateChange","dateData","handleDateChange","dateName","dateValue","viewAdditionalInfo","currentAlertResultCode","additionalInfo","additionalInfoView","onModalSave","currentntestgrouptestpredefcode","bool","some","Parameter","ntestgrouptestpredefsubcode","onskiprule","ontaskInputChange","Data","ontaskNumericChange","numericData","numericName","onAdhocParameterInputChange","isAdhocParameterInitialRender","onAdhocParameterComboChange","comboName","onInputChange","onNumericChange","onDateChange","headerSelectionChange","syntheticEvent","meanTestParameterList","selectedMeanTestParam","selected","sresult","selectedTestParam","selectedTestParamMean","size","testMean","selectAll","selectionChange","delete","valiateCheckAll","onMeanComboChange","onMaterialComboChange","nmaterialcatcode","needSectionwise","onComboChange","onChange","caseNo","selectedsubcode","onGradeEvent","parameter","nparametertypecode","NUMERIC","ngradecode","parseFloat","PREDEFINED","CHARACTER","trim","saveParam","isTestComment","acceptList","selectedMaster","onKeyPress","paremterResultcode","keyCode","i","form","elements","focus","preventDefault","onResultInputChange","parameterResults","isParameterInitialRender","onSampleAdd","isaddSampleRender","onSaveMean","resultParameter","selectedTestParameterMean","nroundingdigit","nuserrole","onSavePredefinedComments","onSaveEnforceResult","sfinal","senforceresultcomment","onSaveClick","onSaveSection","neditable","resultParameters","j","resultData","results","editable","ncalculatedresult","nresultaccuracycode","resultaccuracycode","sresultaccuracyname","nunitcode","unitcode","sunitname","hasOwnProperty","sresultcomment","salertmessage","additionalInfoUidata","ntestgrouptestpredefcode","RESULTSTATUS_FIO","splittedFileName","split","fileExtension","uniquefilename","ssystemfilename","nfilesize","loading","tests","sampleid","ssampleid","ncomponentcode","ntype","nmethodcode","nsourcecode","ninstrumentnamecode","dfromdate","dtodate","ResultUsedInstrument","nresultusedinstrumentcode","stzfromdate","ntzfromdate","stztodate","ntztodate","jsondata","nmaterialcode","nmaterialinventorycode","susedquantity","savailablequantity","nmaterialtypecode","nmaterialcategorycode","ninventorycode","sarno","ssamplearno","smaterialcatname","smaterialname","sinventoryid","nqtyused","scarriergas","smobilephase","sremarks","ssectionname","MaterialInventoryTrans","IDS_INVENTORYID","smaterialtypename","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","ResultUsedTasks","nresultusedtaskcode","sanalyst","staskprocedure","taskArry","lstResultCheckList","editedQB","qbcode","ResultCheckList","createRef","childRef","masterStatus","showSubSample","tabPane","sampleListColumns","subSampleListColumns","testListColumns","TableExpandableItem","SampleGridItem","SampleGridExpandableItem","sampleListMainField","subSampleListMainField","testListMainField","testMoreField","enablePin","sampleSearchField","subsampleSearchField","testSearchField","showRESampleInfo","showRETestList","showRESubSampleinfo","sampleTabDetail","componentDidMount","parentHeight","height","clientHeight","firstPane","getActiveTestURL","url","shouldComponentUpdate","nextProps","nextState","parameterResults1","render","auditInfoFields","feildsForGrid","sampleListRE","subSampleListRE","testListRE","subSampleGetREParam","testGetREParam","samplePrintHistoryDataState","filterSampleParam","inputListName","selectedObject","fetchUrl","childRefs","ref","childFilteredListName","fecthInputObject","searchFieldList","changeList","filterSubSampleParam","filterTestParam","filteredListName","clearFilter","searchRef","updatedListname","unchangeList","breadCrumbData","breadCrumbFrom","breadCrumbto","sregtypename","sregsubtypename","sfilterstatus","sworklistno","sbatcharno","testStartId","resultEnterId","editSourceMethodId","addResultUsedInstrumentId","addResultUsedMaterailId","patientPreviousResultView","identicalResultEnterId","testSectionChangeID","filterNameId","filterDetailId","mandatoryFieldsInstrument","mandatoryFieldsMaterial","mandatoryFieldsTask","mandatoryFieldsTestMethodSource","mandatoryEnforceResult","mandatoryFieldsParameter","mandatoryFieldsComplete","mandatoryFieldsSection","mandatoryFieldsFilter","reportPreviewId","testDesign","borderBottom","display","setting","selectedFilter","title","controlname","hidden","indexOf","onClick","objectName","elnUserInfo","elnSite","dataplace","mainDesign","marginTop","DynamicSubSampleColumns","subSampleMoreField","FilterName","DynamicSampleColumns","sampleMoreField","REJobStatus","stateDynamicDesign","PLASMA_POOL","CLINICALTYPE","width","propertyPopupWidth","fullviewExpand","fullviewCollapse","showAlertForPredefined","onlyAlertMsgAvailable","testgrouptestpredefsubresultOptions","parameterResult","PredefinedValues","GradeValues","selectedNumericData","handleClose","onDropTestFile","ResultAccuracy","Unit","formFields","section","Users","selectedSpecification","selectedComponent","MethodData","SourceData","InstrumentCategory","InstrumentName","InstrumentId","timeZoneList","onComboNameChange","materialType","materialCat","material","materialInventory","DynamicFormulaFields","GradeList","selectedNode","filterData","ApprovalRoleActionDetail","AuditModifiedComments","AdhocParamter","logic","StoreDataRecord","ChecklistData","needSaveButton","controlcode","tempsection","sectionvalue","sectionflag","subsample","nselectedtestcode","resultEntryData","sampleskip","sampletake","subSampleList","sectionList","sampleListCount","realTestValue","Test","item1","nregistrationsectioncode","temparray","option","LABEL","LISTITEM","constructDesign","list","newList","componentDidUpdate","previousProps","DynamicTestColumns","DynamicDesign","dynamicColumn","parse","samplelistitem","subsamplelistitem","testlistitem","samplegriditem","samplegridmoreitem","testListFields","testlistmoreitems","testsearchfields","samplesearchfields","subsamplesearchfields","selectFilterStatus","PARTIAL","scolorhexcode","selectedFilters","selectedFiltersNew","DesignTemplateMappingMap","componentWillUnmount","getDerivedStateFromProps","errorCode","mapStatetoProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { faPlay, faAddressBook, faCheckCircle, faEye, faPencilRuler, faFileImport, faSync, faBorderAll, faLink, faComment, faComments, faPaperclip, faCommentDots, faChevronRight, faMicroscope, faFlask, faHistory, faBookMedical, faNotesMedical, faCalculator, faFileExcel, faBolt, } from '@fortawesome/free-solid-svg-icons';\r\nimport { Card, Col, Row, Nav, Button, Modal } from 'react-bootstrap';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport Axios from \"axios\";\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileInvoice } from '@fortawesome/free-solid-svg-icons';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport PortalModal from '../../PortalModal';\r\nimport Iframe from 'react-iframe';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { ReactComponent as RefreshIcon } from '../../assets/image/refresh.svg';\r\nimport { ReactComponent as SaveIcon } from '../../assets/image/save_icon.svg';\r\n//ALPD-4156--Vignesh R(15-05-2024)-->Result Entry - Option to change section for the test(s)\t\r\nimport { ReactComponent as SectionChange } from '../../assets/image/section-change.svg';\r\nimport ScheduleSection from '../joballocation/ScheduleSection';\r\n\r\nimport {\r\n    crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule, fetchMaterialRecord,\r\n    completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord,\r\n    fetchTaskRecord, parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType,\r\n    getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus,\r\n    viewAttachment, validateEsignCredentialComplete, getAttachmentCombo, deleteAttachment, getCommentsCombo, updateTestMethodSource, resultImportFile,\r\n    filterTransactionList, validateEsignCredential, getSampleChildTabREDetail, updateParameterComments, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial,\r\n    previewSampleReport, getMeanCalculationTestParameter, getAvailableMaterialQuantity, testStart, getSubSampleChildTabDetail, getSampleChildTabDetail,\r\n    getREFilterTemplate, getAverageResult, getREMaterialComboGet, getPredefinedData\r\n    , getELNTestValidation, getResultEntryFilter\r\n    //,deleteResultUsedMaterial\r\n\r\n    , getConfigurationFilter, getTestBasedBatchWorklist,\r\n    addREAdhocParamter, createAdhocParamter, addREAdhocTestParamter, createAdhocTestParamter\r\n    // ,getPredefinedData,getConfigurationFilter,getTestBasedBatchWorklist//,deleteResultUsedMaterial\r\n    , enforceResult//,deleteResultUsedMaterial\r\n    , ResultEntryViewPatientDetails, resultEntryGetParameter, resultEntryGetSpec, resultEntryGetComponent, CompletePopupAction, exportAction, getSectionChange, updateSectionTest\r\n    , filterObject, toTimestamp, rearrangeDateFormatforKendoDataTool\r\n} from '../../actions';\r\n//import { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone,CF_encryptionData } from '../../components/CommonScript';\r\nimport {\r\n    sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate,\r\n    validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone,\r\n    Lims_JSON_stringify, CF_encryptionData, onSaveMandatoryValidation, replaceBackSlash, sortDataForDate,\r\n    convertDateTimetoStringDBFormat\r\n} from '../../components/CommonScript';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { SampleType, parameterType, ResultEntry as ResultEntryGrade, transactionStatus, RegistrationType, RegistrationSubType, FORMULAFIELDTYPE, designProperties, SideBarSeqno, SideBarTabIndex, checkBoxOperation } from '../../components/Enumeration';\r\nimport { ProductList } from '../product/product.styled';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\n\r\nimport ResultEntryResultsTab from './ResultEntryResultsTab';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ResultEntryFilter from './ResultEntryFilter';\r\nimport ResultEntryInstrumentForm from './ResultEntryInstrumentForm';\r\nimport ResultEntryForm from './ResultEntryForm';\r\nimport ResultEntryParameterForm from './ResultEntryParameterForm';\r\nimport TestEditForm from './TestEditForm';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\nimport SampleInfoGrid from '../approval/SampleInfoGrid';\r\nimport ApprovalInstrumentTab from '../approval/ApprovalInstrumentTab';\r\nimport ResultEntryTaskTab from './ResultEntryTaskTab';\r\nimport ResultEntryTaskForm from './ResultEntryTaskForm';\r\nimport ResultEntryParamCommetsForm from './ResultEntryParamCommetsForm';\r\nimport TemplateForm from '../checklist/checklist/TemplateForm';\r\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\r\nimport { numberConversion, numericGrade } from './ResultEntryValidation';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport ResultEntryFormulaForm from './ResultEntryFormulaForm';\r\nimport SampleApprovalHistory from '../approval/SampleApprovalHistory';\r\nimport ResultChangeHistoryTab from '../approval/ResultChangeHistoryTab';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveSampleAttachment, onSaveTestAttachment, onSaveSubSampleAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport { onSaveSampleComments, onSaveTestComments, onSaveSubSampleComments } from '../attachmentscomments/comments/CommentFunctions';\r\nimport ResultEntryImport from './ResultEntryImport';\r\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'\r\n// import ReactTooltip from 'react-tooltip';\r\nimport ResultEntryMean from './ResultEntryMean';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport ResultEntryMaterialForm from './ResultEntryMaterialForm';\r\nimport AddAdhocParameter from './AddAdhocParameter';\r\nimport ResultUsedMaterial from './UsedMaterial';\r\nimport { FontIconWrap } from '../../components/data-grid/data-grid.styles';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\nimport ModalShow from '../../components/ModalShow';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport ResultEntryPredefinedComments from './ResultEntryPredefinedComments';\r\nimport ResultEntryEnforceResult from './ResultEntryEnforceResult';\r\nimport SpecificationInfo from '../testgroup/SpecificationInfo';\r\nimport fullviewExpand from '../../assets/image/fullview-expand.svg';\r\nimport fullviewCollapse from '../../assets/image/fullview-collapse.svg';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { ReactComponent as Resultentry } from '../../assets/image/Result entry.svg';\r\nimport ResultEntryAdhocParameter from './ResultEntryAdhocParameter'\r\nimport ResultEntryCompleteForm from './ResultEntryCompleteForm';\r\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter';\r\nimport { intl } from '../../components/App';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport CustomPopover from '../../components/customPopover';\r\nimport MoveToStoreage from '../registration/MoveToStoreage';\r\n\r\nclass ResultEntry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef();\r\n        this.childRef = React.createRef();\r\n        this.state = {\r\n\r\n            subSampleCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            subSampleAttachmentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            resultDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            instrumentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            materialDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            taskDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            documentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }]\r\n            },\r\n            resultChangeDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }]\r\n            },\r\n            testCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            historyDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'stestsynonym' }] \r\n            },\r\n            sampleHistoryDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            operation: \"\",\r\n            showSample: false,\r\n            showSubSample: false,\r\n            showTest: true,\r\n            tabPane: 0,\r\n            subsampleskip: 0,\r\n            sampleListColumns: [],\r\n            subSampleListColumns: [],\r\n            testListColumns: [],\r\n            TableExpandableItem: [],\r\n            SingleItem: [],\r\n            SampleGridItem: [],\r\n            SampleGridExpandableItem: [],\r\n            sampleListMainField: [],\r\n            subSampleListMainField: [],\r\n            testListMainField: [],\r\n            testMoreField: [],\r\n            selectedRecord: {},\r\n            selectedRecordMaterialForm: {},\r\n            selectedRecordInstrumentForm: {},\r\n            selectedRecordCompleteForm: {},\r\n            selectedRecordTaskForm: {},\r\n            validateFormulaMandyFields: [],\r\n            splitChangeWidthPercentage: 22,\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            subSampleSkip: 0,\r\n            subSampleTake: this.props.Login.settings && this.props.Login.settings[12],\r\n            // subsampletake: this.props.Login.settings\r\n            // && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            testskip: 0,\r\n            testtake: this.props.Login.settings && this.props.Login.settings[12],\r\n            initialVerticalWidth: \"57vh\",\r\n            enablePin: false,\r\n            openELNSheet: false,\r\n            enlLink: \"\",\r\n            sampleSearchField: [],\r\n            subsampleSearchField: [],\r\n            testSearchField: [],\r\n            selectedRecordAdhocParameter: {},\r\n            filterSampleList: [],\r\n        }\r\n        //openELNSheet: false\r\n        this.formRef = React.createRef();\r\n        //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n    }\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.props.Login.masterData.selectedImportFile\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData: { ...this.props.Login.masterData, selectedImportFile: selectedRecord } }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    deleteAttachmentParameterFile = (event, file, fieldName, index) => {\r\n        let selectedRecordParameter = this.state.selectedRecord.ResultParameter[index];\r\n\r\n        selectedRecordParameter[fieldName] = deleteAttachmentDropZone(selectedRecordParameter[fieldName],\r\n            file)\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord['ResultParameter'][index]['editable'] = true;\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { masterData: { ...this.props.Login.masterData, ResultParameter.editable\r\n        //         //selectedImportFile: selectedRecord \r\n        //     } }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({\r\n            selectedRecord: selectedRecord//fileToDelete:file.name \r\n        });\r\n\r\n    }\r\n    closeModalShowForFilter = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let modalShow = this.props.Login.modalShow;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            loadEsign = false;\r\n        } else {\r\n            modalShow = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { modalShow, selectedRecord, selectedId: null, loadEsign },\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    closeModalShow = () => {\r\n        let showAlertGrid = this.props.Login.showAlertGrid;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let masterData = this.props.Login.masterData && this.props.Login.masterData\r\n        masterData['RESelectedTest'].forEach(object => {\r\n            object['expanded'] && delete object['expanded'];\r\n        });\r\n        selectedRecord['ntestgrouptestpredefsubcode'] && delete selectedRecord['ntestgrouptestpredefsubcode']\r\n        showAlertGrid = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showAlertGrid, masterData, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onTabChangeRulesEngine = (tabProps) => {\r\n        let masterData = this.props.Login.masterData && this.props.Login.masterData\r\n        masterData['RESelectedTest'].forEach(object => {\r\n            object['expanded'] && delete object['expanded'];\r\n        });\r\n        masterData['activeTabName'] = tabProps.activeTabName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    handleExpandChange = (mapobject) => {\r\n        let childListMap = new Map();\r\n        let keylst = Object.keys(mapobject);\r\n        keylst.map((key) => {\r\n            childListMap.set(parseInt(key),\r\n                Object.values(mapobject[key]));\r\n        })\r\n        this.setState({ childListMap })\r\n    }\r\n    availableTestFilter = (data) => {\r\n        let lstntransactionsamplecode = [];\r\n        if (this.props.Login.RegistrationTestAlert) {\r\n            let keylst = Object.keys(this.props.Login.RegistrationTestAlert);\r\n            // keylst.map(x=>{ \r\n            //    this.props.Login.RegistrationTestAlert[x].map(y=> lstntransactionsamplecode.push(y['ntransactionsamplecode'])) \r\n            // }); \r\n            // let boolean1 = keylst.includes(data.ntestgrouptestcode.toString())\r\n            let boolean1 = keylst.includes(data.ntransactiontestcode.toString())\r\n            //  let boolean2 = lstntransactionsamplecode.includes(data.ntransactionsamplecode)\r\n            if (boolean1//&&boolean2\r\n            ) {\r\n                return data;\r\n            }\r\n        }\r\n    }\r\n    unavailableTestFilter = (data) => {\r\n        let lstntransactionsamplecode = [];\r\n        if (this.props.Login.NewTestGroupTestAlert) {\r\n            let keylst = Object.keys(this.props.Login.NewTestGroupTestAlert);\r\n            // keylst.map(x=>{ \r\n            //     this.props.Login.NewTestGroupTestAlert[x].map(y=> lstntransactionsamplecode.push(y['ntransactionsamplecode'])) \r\n            // });\r\n            // let boolean1 = keylst.includes(data.ntestgrouptestcode.toString())\r\n            let boolean1 = keylst.includes(data.ntransactiontestcode.toString())\r\n            //  let boolean2 = lstntransactionsamplecode.includes(data.ntransactionsamplecode)\r\n            if (boolean1//&&boolean2\r\n            ) {\r\n                return data;\r\n            }\r\n        }\r\n    }\r\n    dataStateAvailabletestAlert = (event) => {\r\n        this.setState({\r\n            dataStateavailabletest: event.dataState\r\n        });\r\n    }\r\n    dataStateUnAvailabletestAlert = (event) => {\r\n        this.setState({\r\n            dataStateunavailabletest: event.dataState\r\n        });\r\n    }\r\n    tabAlertRulesEngine = () => {\r\n        const tabMap = new Map();\r\n        {\r\n            this.props.Login.RegistrationTestAlert && this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.filter(this.availableTestFilter).length > 0 &&//this.props.Login.RegistrationTestAlert.length>0 &&\r\n                tabMap.set(\"IDS_AVAILABLETESTUNDERSAMPLE\",\r\n                    <DataGrid\r\n                        primaryKeyField=\"ntransactiontestcode\"\r\n                        dataResult={process(sortData(this.props.Login.masterData.RESelectedTest.filter(this.availableTestFilter), 'descending', 'ntransactiontestcode') || [],\r\n                            this.state.dataStateavailabletest ? this.state.dataStateavailabletest : { skip: 0, take: 10 })}\r\n                        dataState={this.state.dataStateavailabletest ? this.state.dataStateavailabletest : { skip: 0, take: 10 }}\r\n                        dataStateChange={this.dataStateAvailabletestAlert}\r\n                        extractedColumnList={[\r\n                            { \"idsName\": \"IDS_RULEAPPLIEDTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }\r\n                        ]}\r\n                        controlMap={this.state.controlMap}\r\n                        userRoleControlRights={this.state.userRoleControlRights}\r\n                        pageable={true}\r\n                        scrollable={'scrollable'}\r\n                        hideColumnFilter={true}\r\n                        selectedId={0}\r\n                        gridHeight={'350px'}\r\n                        gridWidth={'700px'}\r\n                        expandField=\"expanded\"\r\n                        handleExpandChange={() => { this.handleExpandChange(this.props.Login.RegistrationTestAlert) }}\r\n                        hasChild={true}\r\n                        childMappingField={'ntransactiontestcode'}\r\n                        childColumnList={\r\n                            this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ?\r\n                                [\r\n                                    { \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n                                    { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"samplearno\", \"width\": \"200px\" },\r\n                                    { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"200px\" }\r\n                                ] : [\r\n                                    { \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n                                    { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"200px\" }\r\n                                ]}\r\n                        childList={this.state.childListMap}\r\n                        activeTabName={\"IDS_AVAILABLETESTUNDERSAMPLE\"}\r\n                    >\r\n                    </DataGrid>)\r\n            this.props.Login.NewTestGroupTestAlert && this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.filter(this.unavailableTestFilter).length > 0 &&//this.props.Login.NewTestGroupTestAlert.length>0  &&\r\n                tabMap.set(\"IDS_TESTSNOTAVAILABLEUNDERSAMPLE\",\r\n                    <DataGrid\r\n                        primaryKeyField=\"ntransactiontestcode\"\r\n                        dataResult={process(sortData(this.props.Login.masterData.RESelectedTest.filter(this.unavailableTestFilter), 'descending', 'ntransactiontestcode') || [],\r\n                            this.state.dataStateunavailabletest ? this.state.dataStateunavailabletest : { skip: 0, take: 10 })}\r\n                        dataState={this.state.dataStateunavailabletest ? this.state.dataStateunavailabletest : { skip: 0, take: 10 }}\r\n                        dataStateChange={this.dataStateUnAvailabletestAlert}\r\n                        extractedColumnList={[\r\n                            { \"idsName\": \"IDS_RULEAPPLIEDTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }\r\n                        ]}\r\n                        controlMap={this.state.controlMap}\r\n                        userRoleControlRights={this.state.userRoleControlRights}\r\n                        pageable={true}\r\n                        scrollable={'scrollable'}\r\n                        hideColumnFilter={true}\r\n                        selectedId={0}\r\n                        expandField=\"expanded\"\r\n                        handleExpandChange={() => { this.handleExpandChange(this.props.Login.NewTestGroupTestAlert) }}\r\n                        gridHeight={'350px'}\r\n                        gridWidth={'700px'}\r\n                        hasChild={true}\r\n                        childMappingField={'ntransactiontestcode'}\r\n                        childColumnList={[\r\n                            { \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }\r\n                        ]}\r\n                        childList={this.state.childListMap}\r\n                        activeTabName={\"IDS_TESTSNOTAVAILABLEUNDERSAMPLE\"}\r\n                    >\r\n                    </DataGrid>\r\n                )\r\n        }\r\n        return tabMap;\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecordAdhocParameter = this.state.selectedRecordAdhocParameter || {}\r\n        let openTemplateModal = this.props.Login.openTemplateModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        //let additionInfo=this.props.Login.additionInfo ||{};\r\n        let screenName = this.props.Login.screenName;\r\n        let operation = this.props.Login.operation;\r\n        let loadFile = this.props.Login.loadFile;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let multiFilterLoad = this.props.Login.multiFilterLoad;\r\n        let updateInfo = {};\r\n        //additionInfo={...selectedRecord};\r\n        if (screenName === \"IDS_RESULTFORMULA\") {\r\n            screenName = \"IDS_RESULTENTRY\";\r\n            operation = \"update\";\r\n            let showValidate = !this.props.Login.showValidate;\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { screenName, operation, showValidate, validateFormulaMandyFields: [] }\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.loadEsign) {\r\n                if (this.props.Login.operation === \"delete\"\r\n                    || this.props.Login.operation === \"complete\"\r\n                    || this.props.Login.operation === \"default\"\r\n                    || this.props.Login.operation === \"deleteTask\"\r\n                    || this.props.Login.operation === \"deleteInstrument\" || this.props.Login.operation === \"deleteMaterial\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                    selectedRecord = {};\r\n                }\r\n                else if (this.props.Login.operation === \"updatechecklist\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                }\r\n                else {\r\n                    loadEsign = false;\r\n                    selectedRecord['esignpassword'] = \"\";\r\n                    selectedRecord['esigncomments'] = \"\";\r\n                    selectedRecord['esignreason'] = \"\";\r\n                }\r\n            } else {\r\n                openModal = false;\r\n                openTemplateModal = false;\r\n                selectedRecord = {};\r\n                selectedRecordAdhocParameter = {}\r\n                loadFile = false;\r\n                selectedId = null;\r\n                multiFilterLoad = false;\r\n            }\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModal, loadEsign, openTemplateModal, screenName, selectedRecord, loadFile, selectedId, selectedRecordAdhocParameter, multiFilterLoad, }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    // Start of ALPD-4132 on Save Additional Filter handler ATE-241\r\n    onSaveMultiFilterClick = () => {\r\n\r\n        const startDate = (this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date());\r\n        const endDate = (this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date());\r\n\r\n        let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\r\n\r\n        const fromDate = obj.fromDate;\r\n        const toDate = obj.toDate;\r\n        const searchedSample = this.state.filterSampleList ? sortDataForDate(this.state.filterSampleList, 'dtransactiondate', 'npreregno') : [];\r\n        const kendoFilterList = this.state.kendoFilterList || [];\r\n        const emptyFilterList = [];\r\n        if (kendoFilterList.filters && kendoFilterList.filters.length > 0) {\r\n            kendoFilterList.filters.map(item => {\r\n                if (item.value === \"\") {\r\n                    emptyFilterList.push(item);\r\n                }\r\n            })\r\n        }\r\n        if (emptyFilterList.length > 0) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_PROVIDEVALUESFORINPUTS\" }));\r\n        } else {\r\n            const selectedSample = [];\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (searchedSample.length === 0) {\r\n                let searchSampleRef = this.searchSampleRef;\r\n                searchSampleRef.current.value = \"\";\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            selectedSample: [],\r\n                            selectedSubSample: [],\r\n                            selectedTest: [],\r\n                            searchedSample: [],\r\n                            searchedSubSample: undefined,\r\n                            searchedTest: undefined,\r\n                            RegistrationAttachment: [],\r\n                            RE_SUBSAMPLE: [],\r\n                            RE_TEST: [],\r\n                            RegistrationTestComment: [],\r\n                            RegistrationParameter: [],\r\n                            RegistrationTestAttachment: [],\r\n                            RegistrationComment: [],\r\n                            RegistrationSampleAttachment: [],\r\n                            RegistrationSampleComment: [],\r\n\r\n                        },\r\n                        multiFilterLoad: false,\r\n                        openModal: false,\r\n                        searchSampleRef,\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                selectedSample.push(searchedSample[0]);\r\n                let inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                    napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                    ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                    fromdate: fromDate,\r\n                    todate: toDate,\r\n                    activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n                    activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\r\n                    testskip: 0,\r\n                    testtake: this.state.testtake,\r\n                    subSampleSkip: 0,\r\n                    subSampleTake: this.state.subSampleTake,\r\n                    skip: 0,\r\n                    resultDataState: this.state.resultDataState,\r\n                    instrumentDataState: this.state.instrumentDataState,\r\n                    materialDataState: this.state.materialDataState,\r\n                    taskDataState: this.state.taskDataState,\r\n                    documentDataState: this.state.documentDataState,\r\n                    resultChangeDataState: this.state.resultChangeDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    sampleChangeDataState: this.state.sampleChangeDataState,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                    searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchTestRef: this.searchTestRef,\r\n                    nneedtemplatebasedflow: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow) || false,\r\n                    checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n                    nworlistcode: (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n                    nbatchmastercode: (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1,\r\n                    activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 8 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 8 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\r\n                    nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n                    activeSampleTab: masterData.activeSampleTab,\r\n                    activeSubSampleTab: masterData.activeSubSampleTab,\r\n                    activeTestTab: masterData.activeTestTab,\r\n                    childTabsKey: [\"RegistrationAttachment\", \"RE_SUBSAMPLE\", \"RE_TEST\", \"SampleApprovalHistory\", \"RegistrationComment\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"],\r\n                    nneedsubsample: masterData.nneedsubsample,\r\n                    npreregno: selectedSample[0].npreregno && selectedSample[0].npreregno.toString(),\r\n                    ntransactionstatus: String(this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus),\r\n                    removeElementFromArray: masterData.selectedSample,\r\n                    sample: selectedSample,\r\n                    RESelectedSample: selectedSample,\r\n                    searchSampleRef: this.searchSampleRef,\r\n                    masterData: { ...masterData, searchedSample, selectedSample, kendoFilterList: kendoFilterList },\r\n                    openModal: false,\r\n                    multiFilterLoad: false,\r\n                };\r\n                this.props.getsubSampleREDetail(inputData, true);\r\n            }\r\n        }\r\n    }\r\n    //  End of ALPD-4132 -ATE-241\r\n\r\n    onFilterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let inputData = [];\r\n\r\n            if (fieldname === \"fromDate\") {\r\n                let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n                inputData = {\r\n                    realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\r\n                    realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\r\n                    realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\r\n                    realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\r\n                    realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n                    realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\r\n                    nflag: 2,\r\n                    fromdate: dateObj.fromDate,//this.OnDateConverstion(event, fieldname),\r\n                    todate: dateObj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    transcode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ?\r\n                        this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n                    nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\r\n                    nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n            if (fieldname === \"toDate\") {\r\n\r\n                let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo)\r\n\r\n                inputData = {\r\n                    realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\r\n                    realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\r\n                    realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\r\n                    realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\r\n                    realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n                    realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\r\n                    nflag: 2,\r\n                    fromdate: dateObj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: dateObj.toDate,//this.OnDateConverstion(event, fieldname),\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    transcode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ?\r\n                        this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n                    nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\r\n                    nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \r\n            //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \r\n\r\n            if (fieldname === \"nsampletypecode\") {\r\n\r\n                let obj = convertDateValuetoString((this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    (this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\r\n                    realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\r\n                    realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\r\n                    realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\r\n                    realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n                    realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\r\n                    nflag: 2,\r\n                    nsampletypecode: parseInt(event.value),\r\n                    fromdate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultSampleType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n\r\n                }\r\n                this.props.getRERegistrationType(inputData)\r\n            }\r\n            else if (fieldname === \"nregtypecode\") {\r\n\r\n                let obj = convertDateValuetoString((this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    (this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n\r\n                inputData = {\r\n                    realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\r\n                    realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\r\n                    realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\r\n                    realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\r\n                    realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n                    realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\r\n                    nflag: 3,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    fromdate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    nregtypecode: parseInt(event.value),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultRegistrationType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\r\n                }\r\n                this.props.getRERegistrationSubType(inputData)\r\n            }\r\n            else if (fieldname === \"nregsubtypecode\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\r\n                    realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\r\n                    realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\r\n                    realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\r\n                    realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n                    realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\r\n                    nflag: 4,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultRegistrationSubType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n                    nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\r\n                    nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            else if (fieldname === 'ndesigntemplatemappingcode') {\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                const inputParamData = {\r\n                    nflag: 3,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    //defaultFilterStatus: event.item,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ?\r\n                        this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    nneedsubsample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\r\n                    // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                    //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\r\n                    ndesigntemplatemappingcode: event.value,\r\n                    DesignTemplateMappingValue: event.item,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n                    nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\r\n                    nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\r\n                }\r\n                //this.props.getREFilterTestData(inputParamData)\r\n                this.props.getREFilterTemplate(inputParamData)\r\n\r\n            }\r\n\r\n            else if (fieldname === \"version\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 4,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultApprovalConfigVersion: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ?\r\n                        this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n                    nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\r\n                    nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\r\n                }\r\n                this.props.getREJobStatus(inputData)\r\n            }\r\n            else if (fieldname === \"jobstatus\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultjobstatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n                    nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\r\n                    nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\r\n                }\r\n                this.props.getREFilterStatus(inputData)\r\n            }\r\n            else if (fieldname === \"filter\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: 1,// parseInt(this.props.Login.masterData.defaultjobstatus.njobstatuscode),\r\n                    ntranscode: event.value === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(event.value),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultFilterStatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType,\r\n                    nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n                    nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\r\n                    nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\r\n                }\r\n                this.props.getREFilterTestData(inputData)\r\n            }\r\n            else if (fieldname === \"test\") {\r\n\r\n                let defaultTestvalues = event.item;\r\n                this.props.Login.masterData.defaultTestvalues = defaultTestvalues;\r\n                // const updateInfo = {\r\n                //     typeName: DEFAULT_RETURN,\r\n                //     data: { masterData: { ...this.props.Login.masterData } }\r\n                // }\r\n                // this.props.updateStore(updateInfo);\r\n                inputData = {\r\n                    defaultTestvalues,\r\n                    ntestcode: this.props.Login.masterData.defaultTestvalues.ntestcode,\r\n                    masterData: this.props.Login.masterData,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ?\r\n                        this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n                    nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\r\n                    nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\r\n\r\n                }\r\n                this.props.getConfigurationFilter(inputData)\r\n            }\r\n            else if (fieldname === \"nconfigfiltercode\") {\r\n\r\n                let defaultConfigurationFilterValue = event.item;\r\n                this.props.Login.masterData.defaultConfigurationFilterValue = defaultConfigurationFilterValue;\r\n                this.props.Login.masterData.realdefaultConfigurationFilterValue = defaultConfigurationFilterValue;\r\n                inputData = {\r\n                    defaultConfigurationFilterValue,\r\n                    nconfigfiltercode: parseInt(this.props.Login.masterData.defaultConfigurationFilterValue.nconfigfiltercode),\r\n                    ntestcode: this.props.Login.masterData.defaultTestvalues.ntestcode,\r\n                    masterData: this.props.Login.masterData,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    //ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ?\r\n                        this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n                    nneedjoballocation: this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation,\r\n                    nneedmyjob: this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob\r\n                }\r\n                this.props.getTestBasedBatchWorklist(inputData)\r\n            }\r\n            else if (fieldname === \"nworklistcode\") {\r\n\r\n                let defaultWorklistvalue = event.item;\r\n                this.props.Login.masterData.defaultWorklistvalue = defaultWorklistvalue;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData: { ...this.props.Login.masterData } }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                if (fieldname === \"nbatchmastercode\") {\r\n                    let defaultBatchvalue = event.item;\r\n                    this.props.Login.masterData.defaultBatchvalue = defaultBatchvalue;\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { masterData: { ...this.props.Login.masterData } }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (fieldname === \"nconfigfiltercode\") {\r\n                this.props.Login.masterData.defaultConfigurationFilterValue = [];\r\n                this.props.Login.masterData.defaultWorklistvalue = [];\r\n                this.props.Login.masterData.defaultBatchvalue = [];\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData: { ...this.props.Login.masterData } }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n    }\r\n    OnDateConverstion = (date, fieldname) => {\r\n        const month = validateTwoDigitDate(String(date.getMonth() + 1));\r\n        const day = validateTwoDigitDate(String(date.getDate()));\r\n        if (fieldname === \"fromDate\") {\r\n            date = date.getFullYear() + '-' + month + '-' + day + \"T00:00:00\";\r\n        }\r\n        else {\r\n            date = date.getFullYear() + '-' + month + '-' + day + \"T23:59:00\";\r\n        }\r\n        return date;\r\n    }\r\n    onReload = () => {\r\n        let { realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realApproveConfigVersion,\r\n            realFilterStatusValue, realTestcodeValue, realWorklistCodeValue, realDesignTemplateMapping } = this.props.Login.masterData\r\n        //let obj = this.covertDatetoString(realFromDate, realToDate)\r\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\r\n        let masterData = { ...this.props.Login.masterData, realFromDate: obj.fromDate, realToDate: obj.toDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApproveConfigVersion, realTestcodeValue }\r\n        let inputData = {\r\n            nsampletypecode: (realSampleTypeValue && realSampleTypeValue.nsampletypecode) || -1,\r\n            nregtypecode: (realRegTypeValue && realRegTypeValue.nregtypecode) || -1,\r\n            nregsubtypecode: (realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode) || -1,\r\n            napprovalversioncode: (realApproveConfigVersion && realApproveConfigVersion.napprovalconfigversioncode) || -1,\r\n            ntranscode: String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\r\n            //ntestcode: realTestcodeValue && realTestcodeValue.ntestcode || -1,\r\n            ntestcode: (realTestcodeValue && realTestcodeValue.ntestcode !== undefined && realTestcodeValue.ntestcode !== null) ? realTestcodeValue.ntestcode : -1,\r\n            ndesigntemplatemappingcode: (realDesignTemplateMapping && realDesignTemplateMapping.ndesigntemplatemappingcode) || -1,\r\n\r\n            ntransactiontestcode: 0,\r\n            njobstatuscode: (this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode) || 1,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\r\n            showTest: true,\r\n            showSample: false,\r\n            //checkBoxOperation: 3,\r\n            checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n            //ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            nworlistcode: (realWorklistCodeValue && realWorklistCodeValue.nworklistcode) || -1,\r\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\r\n        }\r\n\r\n        const inpuParamData = {\r\n            inputData,\r\n            masterData,\r\n            refs: { searchSampleRef: this.searchSampleRef, searchSubSampleRef: this.searchSubSampleRef, searchTestRef: this.searchTestRef },\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n        }\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1\r\n            && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== -1) {\r\n            // ALPD-4132 to clear Addition Filter Config upon refresh and clear all data - ATE-241\r\n            inpuParamData.masterData[\"kendoFilterList\"] = undefined;\r\n            this.props.getResultEntryDetails(inpuParamData)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    onDesignTemplateChange = (event, fieldName, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    //ALPD-4870 To open the save popup of filtername,done by Dhanushya RI\r\n    openFilterName = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { modalShow: true, operation: \"create\", modalTitle: this.props.intl.formatMessage({ id: \"IDS_SAVEFILTER\" }) }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    //ALPD-4870 to insert the filter name in filtername table,done by Dhanushya RI\r\n\r\n    onSaveModalFilterName = () => {\r\n\r\n        const obj = convertDateValuetoString(this.props.Login.masterData.realFromDate,\r\n            this.props.Login.masterData.realToDate, this.props.Login.userInfo)\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            sfiltername: this.state.selectedRecord && this.state.selectedRecord.sfiltername !== null\r\n                ? this.state.selectedRecord.sfiltername : \"\",\r\n            needExtraKeys: true,\r\n            sampleTypeValue: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue,\r\n            regTypeValue: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue,\r\n            regSubTypeValue: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue,\r\n            approvalConfigValue: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion,\r\n            filterStatusValue: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue,\r\n            testValue: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue,\r\n            designTemplateMappingValue: this.props.Login.masterData.realDesignTemplateMapping && this.props.Login.masterData.realDesignTemplateMapping,\r\n            worklistValue: this.props.Login.masterData.realWorklistvalue && this.props.Login.masterData.realWorklistvalue,\r\n            batchValue: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napproveconfversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntranscode: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.realDesignTemplateMapping && this.props.Login.masterData.realDesignTemplateMapping.ndesigntemplatemappingcode,\r\n            nworklistcode: this.props.Login.masterData.realWorklistvalue && this.props.Login.masterData.realWorklistvalue.nworklistcode,\r\n            nbatchcode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchcode,\r\n\r\n\r\n        }\r\n\r\n\r\n        let inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"FilterName\",\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n        };\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1\r\n            && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== undefined) {\r\n\r\n            // if (showEsign(this.props.Login.userRoleControlRights,this.props.Login.userInfo.nformcode,this.props.Login.ncontrolCode)) {\r\n            //   const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //       openModal:true,\r\n            //       modalShow: false,\r\n            //       loadEsign: true,\r\n            //       screenData: { inputParam, masterData },\r\n            //     },\r\n            //   };\r\n            //   this.props.updateStore(updateInfo);\r\n            // } else {\r\n            this.props.crudMaster(inputParam, masterData, \"modalShow\");\r\n            // }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n    //ALPD-4870-To get previously saved filter details when click the filter name,,done by Dhanushya RI\r\n    clickFilterDetail = (value) => {\r\n        // if(this.props.Login.nfilternamecode!==value.nfilternamecode){\r\n        let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n        let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n        let realSampleTypeValue = this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType\r\n        let realRegTypeValue = this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType\r\n        let realRegSubTypeValue = this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType\r\n        let realApproveConfigVersion = this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion\r\n        let realFilterStatusValue = this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus\r\n        let realTestcodeValue = this.props.Login.masterData.defaultTestvalues && this.props.Login.masterData.defaultTestvalues\r\n        let realWorklistCodeValue = this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue\r\n        let realBatchCodeValue = this.props.Login.masterData.defaultBatchvalue && this.props.Login.masterData.defaultBatchvalue\r\n        let realDesignTemplateMapping = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue\r\n        let realDesignTemplateMappingList = this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping\r\n        let realApprovalConfigVersionList = this.props.Login.masterData.ApprovalConfigVersion && this.props.Login.masterData.ApprovalConfigVersion\r\n        let realFilterStatusList = this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.REFilterStatus\r\n        let realRegistrationTypeList = this.props.Login.masterData.RegistrationType && this.props.Login.masterData.RegistrationType\r\n        let realRegistrationSubTypeList = this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType\r\n        // let realBatchvaluesList=this.props.Login.masterData.RegistrationType\r\n        // let  RealWorklistvaluesList=this.props.Login.masterData.RegistrationType\r\n        let realConfigurationFilterValuesList = this.props.Login.masterData.ConfigurationFilterValues && this.props.Login.masterData.ConfigurationFilterValues\r\n\r\n\r\n\r\n        //let obj = this.covertDatetoString(realFromDate, realToDate)\r\n\r\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\r\n        let masterData = {\r\n            ...this.props.Login.masterData, realFromDate: obj.fromDate,\r\n            realToDate: obj.toDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue,\r\n            realApproveConfigVersion, realTestcodeValue, realWorklistCodeValue, realBatchCodeValue\r\n            , realDesignTemplateMapping, realDesignTemplateMappingList, realApprovalConfigVersionList, realFilterStatusList, realRegistrationTypeList, realRegistrationSubTypeList,\r\n            realConfigurationFilterValuesList\r\n        }\r\n        let inputData = {\r\n            npreregno: \"0\",\r\n            nfilternamecode: value && value.nfilternamecode ? value.nfilternamecode : -1,\r\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\r\n            showTest: true,\r\n            showSample: false,\r\n            nneedsubsample: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) || false,\r\n            //checkBoxOperation: 3,\r\n            checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napproveconfversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntranscode: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: parseInt(this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.realDesignTemplateMapping && this.props.Login.masterData.realDesignTemplateMapping.ndesigntemplatemappingcode,\r\n            nworklistcode: this.props.Login.masterData.realWorklistvalue && this.props.Login.masterData.realWorklistvalue.nworklistcode,\r\n            nbatchcode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchcode,\r\n            FromDate: obj.fromDate,\r\n            ToDate: obj.toDate,\r\n        }\r\n\r\n        const inpuParamData = {\r\n            inputData,\r\n            masterData,\r\n            refs: { searchSampleRef: this.searchSampleRef, searchSubSampleRef: this.searchSubSampleRef, searchTestRef: this.searchTestRef },\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState\r\n        }\r\n        // ALPD-4132 to Clear Additional Filter Config\r\n        inpuParamData.masterData['kendoFilterList'] = undefined;\r\n        this.props.getResultEntryFilter(inpuParamData)\r\n\r\n        // }\r\n        // else{\r\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDFILTERALREADYLOADED\" }));  \r\n        // }\r\n    }\r\n\r\n    onREFilterSubmit = (event) => {\r\n        // let realFromDate = new Date(this.props.Login.masterData.fromDate)\r\n        // let realToDate = new Date(this.props.Login.masterData.toDate)\r\n        let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n        let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n        let realSampleTypeValue = this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType\r\n        let realRegTypeValue = this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType\r\n        let realRegSubTypeValue = this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType\r\n        let realApproveConfigVersion = this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion\r\n        let realFilterStatusValue = this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus\r\n        let realTestcodeValue = this.props.Login.masterData.defaultTestvalues && this.props.Login.masterData.defaultTestvalues\r\n        let realWorklistCodeValue = this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue\r\n        let realBatchCodeValue = this.props.Login.masterData.defaultBatchvalue && this.props.Login.masterData.defaultBatchvalue\r\n        let realDesignTemplateMapping = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue\r\n        let realDesignTemplateMappingList = this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping\r\n        let realApprovalConfigVersionList = this.props.Login.masterData.ApprovalConfigVersion && this.props.Login.masterData.ApprovalConfigVersion\r\n        let realFilterStatusList = this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.REFilterStatus\r\n        let realRegistrationTypeList = this.props.Login.masterData.RegistrationType && this.props.Login.masterData.RegistrationType\r\n        let realRegistrationSubTypeList = this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType\r\n        // let realBatchvaluesList=this.props.Login.masterData.RegistrationType\r\n        // let  RealWorklistvaluesList=this.props.Login.masterData.RegistrationType\r\n        let realConfigurationFilterValuesList = this.props.Login.masterData.ConfigurationFilterValues && this.props.Login.masterData.ConfigurationFilterValues\r\n\r\n\r\n\r\n        //let obj = this.covertDatetoString(realFromDate, realToDate)\r\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\r\n        let masterData = {\r\n            ...this.props.Login.masterData, realFromDate: obj.fromDate,\r\n            realToDate: obj.toDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue,\r\n            realApproveConfigVersion, realTestcodeValue, realWorklistCodeValue, realBatchCodeValue\r\n            , realDesignTemplateMapping, realDesignTemplateMappingList, realApprovalConfigVersionList, realFilterStatusList, realRegistrationTypeList, realRegistrationSubTypeList,\r\n            realConfigurationFilterValuesList\r\n        }\r\n        let inputData = {\r\n            needExtraKeys: true,\r\n            saveFilterSubmit: true, //ALPD-4870 to insert the filter data's in filterdetail table when submit the filter,done by Dhanushya RI\r\n            sampleTypeValue: this.props.Login.masterData && this.props.Login.masterData.defaultSampleType,\r\n            regTypeValue: this.props.Login.masterData && this.props.Login.masterData.defaultRegistrationType,\r\n            regSubTypeValue: this.props.Login.masterData && this.props.Login.masterData.defaultRegistrationSubType,\r\n            filterStatusValue: this.props.Login.masterData && this.props.Login.masterData.defaultFilterStatus,\r\n            approvalConfigValue: this.props.Login.masterData && this.props.Login.masterData.defaultApprovalConfigVersion,\r\n            designTemplateMappingValue: this.props.Login.masterData && this.props.Login.masterData.DesignTemplateMappingValue,\r\n            testValue: this.props.Login.masterData && this.props.Login.masterData.defaultTestvalues,\r\n            worklistValue: this.props.Login.masterData & this.props.Login.masterData.defaultWorklistvalue,\r\n            batchValue: this.props.Login.masterData && this.props.Login.masterData.defaultBatchvalue,\r\n            nsampletypecode: (this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType.nsampletypecode) || -1,\r\n            nregtypecode: (this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType.nregtypecode) || -1,\r\n            nregsubtypecode: (this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode) || -1,\r\n            napprovalversioncode: (this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode) || -1,\r\n            ntranscode: this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ?\r\n                this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus ? this.props.Login.masterData.defaultFilterStatus.ntransactionstatus : -1),\r\n            ntestcode: this.props.Login.masterData.defaultTestvalues ? this.props.Login.masterData.defaultTestvalues.ntestcode : -1,\r\n            ntransactiontestcode: 0,\r\n            njobstatuscode: (this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode) || 1,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\r\n            showTest: true,\r\n            showSample: false,\r\n            nneedsubsample: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) || false,\r\n            //checkBoxOperation: 3,\r\n            checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n            ndesigntemplatemappingcode: (this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode) || -1,\r\n            nneedtemplatebasedflow: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow) || false,\r\n            nworlistcode: (this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue.nworklistcode) || -1,\r\n            nbatchmastercode: (this.props.Login.masterData.defaultBatchvalue && this.props.Login.masterData.defaultBatchvalue.nbatchmastercode) || -1,\r\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\r\n        }\r\n\r\n        const inpuParamData = {\r\n            inputData,\r\n            masterData,\r\n            refs: { searchSampleRef: this.searchSampleRef, searchSubSampleRef: this.searchSubSampleRef, searchTestRef: this.searchTestRef },\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState\r\n        }\r\n\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1\r\n            && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== undefined) {\r\n            // ALPD-4132 to Clear Additional Filter Config\r\n            inpuParamData.masterData['kendoFilterList'] = undefined;\r\n            this.props.getResultEntryDetails(inpuParamData)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    // Start of ALPD-4132 on Additional Filter Click handler ATE-241\r\n    onMultiFilterClick = () => {\r\n        const filterFields = this.state.sampledisplayfields || [];\r\n        const samplefilteritem = this.state.samplefilteritem || [];\r\n        const languageTypeCode = this.props.Login.userInfo.slanguagetypecode;\r\n        const datefileds = [];\r\n\r\n        let updFilterFields = [];\r\n        filterFields.length > 0 && filterFields.map(item => {\r\n            let obj = {};\r\n            obj[\"filterinputtype\"] = item[3];\r\n            obj[\"displayname\"] = item[1];\r\n            obj[\"columnname\"] = item[2];\r\n            updFilterFields.push(obj)\r\n        });\r\n        const fields = [];\r\n        const kendoFilterList = this.props.Login.masterData?.kendoFilterList || [];\r\n        if (kendoFilterList.length === 0 || (kendoFilterList.filters && kendoFilterList.filters.length === 0)) {\r\n            kendoFilterList[\"logic\"] = \"and\";\r\n            kendoFilterList[\"filters\"] = [];\r\n            samplefilteritem.length > 0 && samplefilteritem.map(item => {\r\n                let obj = {};\r\n                obj[\"field\"] = item[2];\r\n                obj[\"value\"] = \"\";\r\n                if (item[3] === \"date\" || item[3] === \"numeric\") {\r\n                    obj[\"operator\"] = \"eq\";\r\n                } else {\r\n                    obj[\"operator\"] = \"contains\";\r\n                }\r\n                kendoFilterList[\"filters\"].push(obj);\r\n            });\r\n        }\r\n        updFilterFields.length > 0 && updFilterFields.map(item => {\r\n            fields.push(filterObject(item, languageTypeCode, null, null, true));\r\n            if (item.filterinputtype === \"date\") {\r\n                datefileds.push(item.columnname)\r\n            }\r\n        });\r\n        const sampleList = this.props.Login.masterData.RE_SAMPLE || [];\r\n        const kendoOptionList = sampleList.length > 0 ? sampleList.map(item => {\r\n\r\n            datefileds.map(x => {\r\n                item[x + \"timestamp\"] = toTimestamp(rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, item[x]))\r\n            })\r\n\r\n            return item;\r\n        }) : [];\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true,\r\n                masterData: {\r\n                    ...this.props.Login.masterData, fields,\r\n                    kendoFilterList, kendoOptionList\r\n                },\r\n                multiFilterLoad: true,\r\n                screenName: \"IDS_ADDITIONALFILTER\",\r\n                //ALPD-4225-Vignesh R(24-05-2024)--The operation has been removed to concatenate with the screen.\r\n                operation: \"\",\r\n                skip: undefined\r\n            }\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    // ALPD-4132 Additional Filter parent call Back function ATE241\r\n    parentCallBack = (data, filter) => {\r\n        this.setState({\r\n            filterSampleList: data,\r\n            kendoFilterList: filter\r\n        });\r\n    }\r\n\r\n    // ALPD-4132 Additional Filter change event hadler ATE-241\r\n    handleFilterChange = (event) => {\r\n\r\n        let masterData = this.props.Login.masterData || {};\r\n        masterData['kendoFilterList'] = event.filter;\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData,\r\n            }\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    //  End of ALPD-4132 ATE241\r\n\r\n    // covertDatetoString(startDateValue, endDateValue) {\r\n    //     const startDate = new Date(startDateValue);\r\n    //     const endDate = new Date(endDateValue);\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n\r\n    //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay;\r\n    //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay;\r\n\r\n    //     const fromDate = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay + \"T00:00:00\";\r\n    //     const toDate = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay + \"T23:59:59\";\r\n    //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    // }\r\n    onSecondaryPaneSizeChange = (e, val) => {\r\n\r\n        // let hGrand = this.state.grandparentheight\r\n        // let check = e - 400;\r\n        // if (check > 1) {\r\n        //     hGrand = this.state.parentHeight + check\r\n        // }\r\n        // this.setState({\r\n        //     paneHeight: e - val,\r\n        //     secondPaneHeight: hGrand - e - 70,\r\n        //     grandparentheight: hGrand\r\n        // })\r\n        // this.setState({\r\n        //     paneHeight: e - val,\r\n        //     secondPaneHeight: this.state.parentHeight - e - 70\r\n        // })\r\n    }\r\n\r\n    onComboCategoryChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let uRL = \"\";\r\n            let inputData = [];\r\n            uRL = 'resultentrybysample/getResultUsedInstrumentCombo';\r\n            if (fieldname === \"ninstrumentcatcode\") {\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 2,\r\n                    ninstrumentcatcode: event.value,\r\n                    ncalibrationRequired: event.item.ncalibrationreq\r\n                }\r\n            }\r\n            rsapi.post(uRL, inputData)\r\n                .then(response => {\r\n                    const TagInstrument = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                        \"sinstrumentid\", undefined, undefined, undefined);\r\n                    const TagListInstrument = TagInstrument.get(\"OptionList\")\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            masterData: { ...this.props.Login.masterData, Instrument: TagListInstrument },\r\n                            selectedRecord: {\r\n                                ...this.props.Login.selectedRecord,\r\n                                [fieldname]: event,\r\n                                ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n                    // const selectedRecord = this.state.selectedRecord || {};\r\n                    // selectedRecord[fieldname] = event;\r\n                    // this.setState({ selectedRecord });\r\n\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    showRESampleInfo() {\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n\r\n    showRETestList() {\r\n        this.setState({ showTest: true, showSample: false, showSubSample: false })\r\n    }\r\n\r\n    // getMeanTestParameter =(meanParam)=>{\r\n    //     const inputData = {npreregno:meanParam.selectedRecord.npreregno,\r\n    //                        userinfo:this.props.Login.userInfo}\r\n    //     return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n    //         .then(response => {\r\n    //            const list =  response.data || [];\r\n    //            const optionList = [];\r\n    //            list.map(item=>{optionList.push({item:item, label:item.stestsynonym+\"-\"+item.sparametername+\"-\"+item.sresult, value:item.ntransactiontestresultcode})})\r\n    //            this.setState({meanTestParameterList:optionList});                \r\n    //         })\r\n    //         .catch(error => {\r\n    //             if (error.response.status === 500) {\r\n    //                 toast.error(error.message);\r\n    //             } else {\r\n    //                 toast.warn(error.response.data);\r\n    //             }\r\n    //         })\r\n    // }\r\n\r\n    showRESubSampleinfo() {\r\n        this.setState({ showSample: false, showTest: true, showSubSample: !this.state.showSubSample })\r\n    }\r\n    testRETabDetail = () => {\r\n        const testTabMap = new Map();\r\n        //let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.RE_TEST || [];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n\r\n        const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode\r\n\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        testTabMap.set(\"IDS_RESULTS\", <ResultEntryResultsTab\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            fetchRecord={this.props.parameterRecord}\r\n            editpredefinedcomments={this.editpredefinedcomments}\r\n            enforceResult={this.enforceResult}\r\n            formulaCalculation={this.formulaCalculation}\r\n            controlMap={this.state.controlMap}\r\n            parameterParam={{ primaryKeyField: \"ntransactionresultcode\", masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            checkListRecord={this.checkListRecord}\r\n            checklistParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            viewFile={this.props.viewAttachment}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_RESULTS\"\r\n            getMeanTestParameter={this.props.getMeanCalculationTestParameter}\r\n            meanParam={{ \"userInfo\": this.props.Login.userInfo, ncontrolCode: meanControlId }}\r\n        />)\r\n        testTabMap.set(\"IDS_INSTRUMENT\", <ApprovalInstrumentTab\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedInstrument\"}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            dataState={this.state.instrumentDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteInstrumentRecord}\r\n            fetchRecord={this.fetchInstrumentRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_INSTRUMENT\"\r\n        />)\r\n        testTabMap.set(\"IDS_MATERIAL\", <ResultUsedMaterial\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedMaterial\"}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            dataState={this.state.materialDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteMaterialRecord}\r\n            fetchRecord={this.props.fetchMaterialRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_MATERIAL\"\r\n        />)\r\n        testTabMap.set(\"IDS_TASK\", <ResultEntryTaskTab\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedTask\"}\r\n            addResultEntryTask={this.addResultEntryTask}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{\r\n                masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\r\n            }}\r\n            editParam={{\r\n                masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\r\n            }}\r\n            dataState={this.state.taskDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteTaskRecord}\r\n            fetchRecord={this.fetchTaskRecord}\r\n            //fetchRecord={this.fetchInstrumentRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_TASK\" />)\r\n        testTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n            subFields={[{ [designProperties.VALUE]: \"stestsynonym\" }, { [designProperties.VALUE]: \"dcreateddate\" }]}\r\n            userInfo={this.props.Login.userInfo}\r\n            isneedReport={false}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: selectedTestList//this.props.Login.masterData.RESelectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            isSampleTestComment={true}\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDCOMMENTS\"}\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            masterData={this.props.Login.masterData}\r\n            isTestComment={true}\r\n\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\",\r\n                    masterList: this.props.Login.masterData.RESelectedTest,\r\n                    ncontrolCode: this.state.controlMap.has(\"DeleteTestComment\") && this.state.controlMap.get(\"DeleteTestComment\").ncontrolcode\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedTest,\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n        testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", <ResultChangeHistoryTab\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel={this.props.Login.genericLabel}\r\n            ApprovalResultChangeHistory={this.props.Login.masterData.ResultChangeHistory || []}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultChangeDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            screenName=\"IDS_RESULTCHANGEHISTORY\"\r\n            controlMap={this.state.controlMap}\r\n            masterData={this.props.Login.masterData}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            selectedId={null}\r\n\r\n        />)\r\n\r\n        return testTabMap;\r\n    }\r\n\r\n    sampleDataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleKey) {\r\n            case \"IDS_APPROVALHISTORY\":\r\n                this.setState({\r\n                    sampleHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sampleGridDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    sampleGridDataStateChange = (event) => {\r\n        this.setState({ sampleGridDataState: event.dataState })\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                this.setState({\r\n                    materialDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TASK\":\r\n                this.setState({\r\n                    taskDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                this.setState({\r\n                    documentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                this.setState({\r\n                    resultChangeDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SAMPLECOMMENTS\":\r\n                this.setState({\r\n                    sampleChangeDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    dataResultStateChange = (event) => {\r\n        this.setState({ dataState: event.dataState })\r\n    }\r\n\r\n    // sampleTabDetail = () => {\r\n    //     const tabMap = new Map();\r\n\r\n    //     {\r\n    //         this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\r\n    //             tabMap.set(\"IDS_SAMPLEINFO\", <SampleInfoView\r\n    //                 data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\r\n    //                 SingleItem={this.state.SingleItem}\r\n    //                 screenName=\"IDS_SAMPLEINFO\"\r\n    //             />) :\r\n    //             tabMap.set(\"IDS_SAMPLEGRID\", <SampleInfoGrid\r\n    //                 selectedSample={this.props.Login.masterData.RESelectedSample}\r\n    //                 dataState={this.state.dataState}\r\n    //                 dataStateChange={this.dataStateChange}\r\n    //                 detailedFieldList={this.state.SampleGridExpandableItem}\r\n    //                 extractedColumnList={this.state.SampleGridItem}\r\n    //                 userInfo={this.props.Login.userInfo}\r\n    //                 inputParam={this.props.Login.inputParam}\r\n    //                 screenName=\"IDS_SAMPLEGRID\"\r\n    //             />)\r\n    //         // tabMap.set(\"IDS_SAMPLEATTACHMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SAMPLECOMMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <></>)\r\n    //         return tabMap;\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n    sampleTabDetail() {\r\n        const tabMap = new Map();\r\n        let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        tabMap.set(\"IDS_SAMPLEATTACHMENTS\",\r\n            <Attachments\r\n                screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n                selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                masterList={this.props.Login.masterData.RESelectedSample}\r\n                masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHEMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                addName={\"AddSampleAttachment\"}\r\n                editName={\"EditSampleAttachment\"}\r\n                deleteName={\"DeleteSampleAttachment\"}\r\n                viewName={\"ViewSampleAttachment\"}\r\n                methodUrl={\"SampleAttachment\"}\r\n                nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SampleAttachment\",\r\n                        npreregno,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: this.props.Login.screenName\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RESelectedSample\r\n\r\n                }}\r\n                selectedListName=\"IDS_ARNUMBER\"\r\n                displayName=\"sarno\"\r\n                isneedHeader={true}\r\n            />)\r\n        tabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"RESelectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            masterData={this.props.Login.masterData}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={this.props.Login.masterData.RESelectedSample}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_ARNUMBER\"\r\n            displayName=\"sarno\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n\r\n        tabMap.set(\"IDS_SAMPLEAPPROVALHISTORY\",\r\n            <SampleApprovalHistory\r\n                userInfo={this.props.Login.userInfo}\r\n                ApprovalHistory={this.props.Login.masterData.SampleApprovalHistory}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.sampleHistoryDataState}\r\n                dataStateChange={this.sampleDataStateChange}\r\n                masterData={this.props.Login.masterData}\r\n                screenName=\"IDS_SAMPLEAPPROVALHISTORY\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                selectedId={null}\r\n            />)\r\n\r\n\r\n        return tabMap;\r\n    }\r\n\r\n\r\n\r\n    subsampleTabDetail = () => {\r\n        let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ?\r\n            this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n        let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\r\n        let { subsampleskip, subsampletake } = this.state\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n\r\n        tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.RESelectedSubSample}\r\n            masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSubSampleAttachment\"}\r\n            editName={\"EditSubSampleAttachment\"}\r\n            deleteName={\"DeleteSubSampleAttachment\"}\r\n            viewName={\"ViewSubSampleAttachment\"}\r\n            methodUrl={\"SubSampleAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            userInfo={this.props.Login.userInfo}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleAttachment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLEARNO\"\r\n            displayName=\"ssamplearno\"\r\n            isneedHeader={true}\r\n        />)\r\n        tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"RESelectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSubSampleComment\"}\r\n            editName={\"EditSubSampleComment\"}\r\n            deleteName={\"DeleteSubSampleComment\"}\r\n            methodUrl={\"SubSampleComment\"}\r\n            masterData={this.props.Login.masterData}\r\n            isTestComment={false}\r\n            masterList={this.props.Login.masterData.RESelectedSubSample}\r\n            masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nsamplecommentcode\"}\r\n            dataState={this.state.subSampleCommentDataState}\r\n            dataStateChange={this.subSampledataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleComment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLEARNO\"\r\n            displayName=\"ssamplearno\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    onSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                RESelectedSample: this.props.Login.masterData.RESelectedSample,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab,\r\n                activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\r\n            }\r\n            this.props.getSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    onTestTabChange = (tabProps) => {\r\n        const activeTestKey = tabProps.screenName;\r\n        if (activeTestKey !== this.props.Login.activeTestKey) {\r\n            if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                    RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\r\n                    // ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                    //     this.props.Login.masterData.selectedTestCode : this.props.Login.masterData.RESelectedTest ?\r\n                    //         String(this.props.Login.masterData.RESelectedTest.ntransactiontestcode) : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: activeTestKey,\r\n                    screenName: activeTestKey,\r\n                    resultDataState: this.state.resultDataState,\r\n                    instrumentDataState: this.state.instrumentDataState,\r\n                    materialDataState: this.state.materialDataState,\r\n                    taskDataState: this.state.taskDataState,\r\n                    documentDataState: this.state.documentDataState,\r\n                    resultChangeDataState: this.state.resultChangeDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    sampleChangeDataState: this.state.sampleChangeDataState\r\n                }\r\n                this.props.getTestChildTabREDetail(inputData, true);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    //ALPD-5367 Result Entry -> In the stored button was enable sub sample & sample. \r\n    openStoredSampleData = (inputData) => {\r\n\r\n        const operation = \"MovesendToStore\";\r\n        //let StoreDataRecord = [];\r\n        let dataToShow;\r\n        let needsubsample=inputData.masterData && inputData.masterData.nneedsubsample;\r\n        let masterData=inputData.masterData;\r\n        if(inputData[\"mastersendtostore\"] && inputData[\"mastersendtostore\"][\"storage\"] === true){\r\n        if(needsubsample === true){\r\n\r\n            if (masterData[\"RESelectedSubSample\"].length > 1 ||\r\n                masterData[\"RESelectedSubSample\"]\r\n                    .findIndex(x => x['ntransactionsamplecode'] === inputData[\"mastersendtostore\"]['ntransactionsamplecode'])\r\n                === -1) {\r\n                    inputData[\"mastersendtostore\"][\"getSampleChildDetail\"] = true;\r\n            }\r\n            masterData[\"RESelectedSubSample\"] = [];\r\n            masterData[\"RESelectedSubSample\"].push(inputData[\"mastersendtostore\"]);\r\n\r\n            dataToShow=inputData.masterData.RESelectedSubSample[0];\r\n        }else{\r\n\r\n            if (masterData[\"RESelectedSample\"].length > 1 ||\r\n                masterData[\"RESelectedSample\"]\r\n                    .findIndex(x => x['npreregno'] === inputData[\"mastersendtostore\"]['npreregno'])\r\n                === -1) {\r\n                    inputData[\"mastersendtostore\"][\"getSampleChildDetail\"] = true;\r\n            }\r\n            masterData[\"RESelectedSample\"] = [];\r\n            masterData[\"RESelectedSample\"].push(inputData[\"mastersendtostore\"]);\r\n\r\n            dataToShow=inputData.masterData.RESelectedSample[0];\r\n        }\r\n\r\n        // if(inputData.masterData && inputData.masterData.nneedsubsample === true){\r\n        //     dataToShow=inputData.masterData.RESelectedSubSample[0];\r\n        // }else{\r\n        //     dataToShow=inputData.masterData.RESelectedSample[0];\r\n        // }\r\n\r\n        masterData[\"StoreDataRecord\"]={\r\n            ...dataToShow,\"needdatashow\":true\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                operation,\r\n                screenName: \"IDS_STORAGE\",\r\n                openModal:true,\r\n                masterData\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }else{\r\n        toast.info(this.props.intl.formatMessage({ id: \"IDS_SAMPLENOTSTORED\" }));\r\n    }\r\n\r\n    }\r\n    //ALPD-5367 Result Entry -> In the stored button was enable sub sample & sample.\r\n\r\n    openClosePortal = (test) => {\r\n        if (this.props.Login.openELNSheet === undefined || !this.props.Login.openELNSheet) {\r\n            this.props.Login.masterData.enlLink = \"\";\r\n            // if(test.RESelectedTest.length === 1)\r\n            // {           \r\n            this.props.getELNTestValidation(test, this.props.Login.integrationSettings);\r\n            // }\r\n            // else{\r\n            //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTONLYONETEST\" }));\r\n            // }\r\n        }\r\n        else {\r\n            //this.props.Login.masterData.enlLink=undefined;\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openELNSheet: false,\r\n                    masterData: {\r\n                        openELNSheet: false,\r\n                        ...this.props.Login.masterData,\r\n                        enlLink: \"\"\r\n                    }\r\n\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n        /*openClosePortal = (test) => {\r\n            if(this.state.openELNSheet === false )\r\n            {\r\n                this.props.Login.masterData.enlLink=\"\";\r\n            // if(test.RESelectedTest.length === 1)\r\n            // {           \r\n                    this.props.getELNTestValidation(test,this.props.Login.integrationSettings);            \r\n            // }\r\n            // else{\r\n            //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTONLYONETEST\" }));\r\n            // }\r\n        }\r\n            else{\r\n               //this.props.Login.masterData.enlLink=undefined;\r\n    \r\n                // const updateInfo = {\r\n                //    typeName: DEFAULT_RETURN,\r\n                //     data: {\r\n                //         openELNSheet: false,\r\n                //         masterData: {\r\n                //             openELNSheet: false,\r\n                //             ...this.props.Login.masterData,  \r\n                //             enlLink:\"\"\r\n                //         },\r\n                //         enlLink:\"\"                 \r\n                //     }\r\n                    \r\n                // }\r\n                //this.props.updateStore(updateInfo);\r\n                this.setState({ openELNSheet: false,  enlLink:\"\" })\r\n            }\r\n            // if (this.state.openELNSheet === false) {\r\n                // if (test.test.selensheetname !== null) {\r\n                    /*let enlLink = \"\";\r\n                       const elnuser= {\r\n                         usercode: test.elnUserInfo.nelncode,\r\n                         username: test.elnUserInfo.selnusername,\r\n                         userfullname: test.elnUserInfo.selnusername,\r\n                        lsusergroup: {\r\n                         usergroupcode: test.elnUserInfo.nelnusergroupcode,\r\n                         usergroupname: test.elnUserInfo.nelnusergroupcode,\r\n                         },\r\n                        //  lssitemaster:{ sitecode:sitecode }\r\n                        }\r\n    \r\n                        const user = CF_encryptionData(elnuser).EncryptData;\r\n                    const enlcredential = {\r\n                        ElnUser: CF_encryptionData(this.props.Login.settings[20]).EncryptData,\r\n                        Elntenant: CF_encryptionData(\"-1\").EncryptData,\r\n                        Elnloginfrom: CF_encryptionData(\"-1\").EncryptData,\r\n                        //Elntoken: CF_encryptionData(\"\").EncryptData,\r\n                        Elnpassword: CF_encryptionData(this.props.Login.settings[21]).EncryptData,\r\n                        Elnsitecode: CF_encryptionData(this.props.Login.settings[22]).EncryptData,\r\n                        Elnsitename: CF_encryptionData(this.props.Login.settings[23]).EncryptData,\r\n                        Elnusergroupname: CF_encryptionData(this.props.Login.settings[24]).EncryptData,\r\n                        Elnusergroupcode: CF_encryptionData(this.props.Login.settings[25]).EncryptData,\r\n                    }\r\n    \r\n                    //Axios.post(\"http://5.189.171.17:8095/ELN-0.0.1-SNAPSHOT/authenticate\",inputou)\r\n                    //Axios.post(this.props.Login.settings[27], inputou)\r\n                    // Axios.post(\"https://logilabelntesting.azurewebsites.net/\", user)\r\n                    //     .then(response => {\r\n                            const testname = test.test.stestname.substring(0, test.test.stestname.indexOf(\"[\")).trim();\r\n    \r\n                            //const batchId = test.test.sarno+'-'+test.test.stestname;\r\n                            const batchId = test.test.sarno + '-' + testname;\r\n                            const ntransactiontestcode = CF_encryptionData(batchId//test.RESelectedTest[0].ntransactiontestcode\r\n                            ).EncryptData;\r\n                            // const Elntoken = CF_encryptionData(\"Bearer \" + response.data.token).EncryptData;\r\n    \r\n    \r\n                            // const link =\r\n                            //     //window.location.href.toString() \r\n                            //     \"\" +\r\n                            //     '#{\"orderid\":\"' +\r\n                            //     ntransactiontestcode +\r\n                            //     '\",\"u\":\"' +\r\n                            //     enlcredential.ElnUser +\r\n                            //     '\",\"t\":\"' +\r\n                            //     enlcredential.Elntenant +\r\n                            //     '\",\"l\":\"' +\r\n                            //     enlcredential.Elnloginfrom +\r\n                            //     '\",\"k\":\"' +\r\n                            //     Elntoken +\r\n                            //     //response.data.token+\r\n                            //     '\",\"uc\":\"' +\r\n                            //     enlcredential.Elnusergroupcode +\r\n                            //     '\",\"ug\":\"' +\r\n                            //     enlcredential.Elnusergroupname +\r\n                            //     '\",\"sc\":\"' +\r\n                            //     enlcredential.Elnsitecode +\r\n                            //     '\",\"sn\":\"' +\r\n                            //     enlcredential.Elnsitename +\r\n                            //     '\",\"LO\":\"' +\r\n                            //     ntransactiontestcode +\r\n                            //     '\"}';\r\n    \r\n                            const link =\r\n                                //window.location.href.toString() \r\n                                \"\" +\r\n                                '#{\"orderid\":\"' +\r\n                                ntransactiontestcode +\r\n                                '\",\"user\":\"' +\r\n                                user +\r\n                                '\",\"batchid\":\"' +\r\n                                ntransactiontestcode +\r\n                                '\"}';\r\n                            \r\n                            //enlLink = \"https://logilabelntest.azurewebsites.net/vieworder\".concat(link);\r\n                            enlLink=\"https://logilabelntesting.azurewebsites.net/\";\r\n                            console.log(\"eln link:\", enlLink);\r\n                            //}\r\n                            // this.setState({ openELNSheet: !this.state.openELNSheet, nflag: 1, enlLink })\r\n                            this.setState({ openELNSheet: true, nflag: 1, enlLink })\r\n                            //this.props.encryptionData(test);\r\n                        // })\r\n                        //this.getActiveTestURL() \r\n                        // .catch(response => { })\r\n                // }\r\n                // else {\r\n                //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_NOSHEETFORTHISTEST\" }));\r\n    \r\n                // }\r\n    /*}\r\n    else {\r\n                this.setState({ openELNSheet: !this.state.openELNSheet, nflag: 1 })\r\n    \r\n                let testChildGetREParam = {\r\n                    masterData: this.props.Login.masterData,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                    napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                    ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n                    ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                    npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                    ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                    activeTestKey: 'IDS_RESULTS',\r\n                    testskip: this.state.testskip,\r\n                    testtake: this.state.testtake,\r\n                    resultDataState: this.state.resultDataState,\r\n                    instrumentDataState: this.state.instrumentDataState,\r\n                    materialDataState: this.state.materialDataState,\r\n                    taskDataState: this.state.taskDataState,\r\n                    documentDataState: this.state.documentDataState,\r\n                    resultChangeDataState: this.state.resultChangeDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    RESelectedTest: this.props.Login.masterData.RESelectedTest\r\n                }\r\n    \r\n                this.props.getTestChildTabREDetail(testChildGetREParam, true)\r\n    \r\n    \r\n    \r\n                //this.filterTestParam\r\n            }*/\r\n\r\n    }\r\n\r\n    onSubSampleTabChange = (tabProps) => {\r\n        const activeSubSampleTab = tabProps.screenName;\r\n        if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSubSampleTab,\r\n                activeSubSampleTab,\r\n                subSampleCommentDataState: this.state.subSampleCommentDataState,\r\n                subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\r\n                activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\r\n            }\r\n            this.props.getSubSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n\r\n    viewSample = (viewdetails) => {\r\n        this.props.ResultEntryViewPatientDetails(this.props.Login.masterData, \"IDS_PREVIOUSRESULTVIEW\", this.props.Login.userInfo, viewdetails);\r\n    };\r\n\r\n    subSampledataStateChange = (event) => {\r\n        switch (this.props.Login.activeSubSampleTab) {\r\n            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                this.setState({\r\n                    subSampleCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                this.setState({\r\n                    subSampleAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    testMethodSourceEdit = (test) => {\r\n        this.props.testMethodSourceEdit(test)\r\n    }\r\n\r\n    addREInstrument = (test) => {\r\n        this.props.addREInstrument(test)\r\n    }\r\n    adhocParameter = (test) => {\r\n        const inputData = {\r\n            ntestcode: test.test.ntestcode,\r\n            ntestgrouptestcode: test.test.ntestgrouptestcode,\r\n            ntransactiontestcode: test.test.ntransactiontestcode,\r\n            npreregno: test.test.npreregno,\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: test.userInfo,\r\n            adhocId: test.adhocId\r\n        }\r\n        if (this.props.Login.masterData.realSampleTypeValue.nclinicaltyperequired === transactionStatus.YES) {\r\n            this.props.addREAdhocParamter(inputData)\r\n        } else {\r\n            this.props.addREAdhocTestParamter(inputData)\r\n        }\r\n    }\r\n    // adhocTestParameter=(test)=>{\r\n    //     const inputData = {\r\n    //         ntestcode: test.test.ntestcode,\r\n    //         ntestgrouptestcode: test.test.ntestgrouptestcode,\r\n    //         ntransactiontestcode: test.test.ntransactiontestcode,\r\n    //         npreregno:test.test.npreregno,\r\n    //         masterData: this.props.Login.masterData,\r\n    //         userinfo: test.userInfo,\r\n    //         adhocId:test.adhocId\r\n    //     }\r\n    //         this.props.addREAdhocTestParamter(inputData)\r\n    // }\r\n\r\n    deleteInstrumentRecord = (test) => {\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n        test = { ...test, 'ndesigntemplatemappingcode': ndesigntemplatemappingcode }\r\n        let inputParam = {\r\n            inputData: { ...test, 'ndesigntemplatemappingcode': ndesigntemplatemappingcode, 'userinfo': this.props.Login.userInfo },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"deleteInstrument\",\r\n            screenName: \"deleteInstrumentAction\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteInstrumentAction\",\r\n                    operation: \"deleteInstrument\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.deleteInstrumentRecord(test)\r\n        }\r\n\r\n\r\n    }\r\n    fetchInstrumentRecord = (test) => {\r\n        this.props.fetchInstrumentRecord(test)\r\n    }\r\n    fetchMaterialRecord = (test) => {\r\n        this.props.fetchMaterialRecord(test)\r\n    }\r\n\r\n    //Aravindh\r\n    deleteMaterialRecord = (test) => {\r\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        test = { ...test, nregtypecode: nregtypecode, nregsubtypecode: nregsubtypecode, ndesigntemplatemappingcode: ndesigntemplatemappingcode }\r\n        let inputParam = {\r\n            inputData: {\r\n                ...test.selectedRecord,\r\n                nregtypecode: nregtypecode, nregsubtypecode: nregsubtypecode, ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                ntransactiontestcode: test.masterData.RESelectedTest ?\r\n                    test.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n\r\n            classUrl: 'resultentrybysample',\r\n            methodUrl: \"ResultUsedMaterial\",\r\n            operation: \"delete\",\r\n            //screenName: \"deleteMaterialAction\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n            nresultusedmaterialcode: test.selectedRecord.nresultusedmaterialcode,\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteMaterialAction\",\r\n                    operation: \"deleteMaterial\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            //this.props.deleteResultUsedMaterial(test)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    deleteTaskRecord = (test) => {\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        test = { ...test, ndesigntemplatemappingcode: ndesigntemplatemappingcode }\r\n        let inputParam = {\r\n            inputData: { ...test, 'userinfo': this.props.Login.userInfo },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"deleteTask\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteTaskaction\",\r\n                    operation: \"deleteTask\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.deleteTaskRecord(test)\r\n        }\r\n\r\n    }\r\n    fetchTaskRecord = (test) => {\r\n        this.props.fetchTaskRecord(test)\r\n    }\r\n    addResultEntryTask = (inputData) => {\r\n        let selectedRecord = {}\r\n        let selectedRecordTaskForm = {}\r\n        selectedRecord = {\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            stestsynonym: inputData.stestsynonym\r\n        }\r\n        selectedRecordTaskForm = {\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            stestsynonym: inputData.stestsynonym\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: selectedRecord,\r\n                selectedRecordTaskForm: selectedRecordTaskForm,\r\n                operation: \"create\",\r\n                screenName: \"IDS_TASK\",\r\n                openModal: true,\r\n                activeTestKey: \"IDS_TASK\",\r\n                isTaskInitialRender: true,\r\n                ncontrolcode: inputData.addResultUsedTaskId,\r\n                selectedId: null\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    checkListRecord = (parameterData) => {\r\n        this.props.checkListRecord(parameterData, this.props.Login.userInfo)\r\n    }\r\n    getFormula = (parameterData, userInfo, masterData, index, event) => {\r\n        this.setState({\r\n            modalEvent: event.currentTarget\r\n        })\r\n        this.props.getFormula(parameterData, userInfo, masterData, index, this.state.selectedRecord)\r\n    }\r\n\r\n    getAverageResult = (event, parameterData, index, selectedForumulaInput, masterData, selectedRecord) => {\r\n\r\n        if (!selectedRecord.selectedForumulaInput[index].senableAverage) {\r\n            this.props.getAverageResult(parameterData, index, selectedForumulaInput, this.props.Login.userInfo, masterData, selectedRecord);\r\n        }\r\n        else {\r\n            selectedForumulaInput[index].senableAverage = !selectedRecord.selectedForumulaInput[index].senableAverage;\r\n            selectedForumulaInput[index].svalues = selectedForumulaInput[index].soldvalue;\r\n\r\n            this.setState({\r\n                selectedRecord: {\r\n                    ...selectedRecord,\r\n                    selectedForumulaInput\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    calculateFormula = () => {\r\n        const selectedRecord = this.state.selectedRecord || []\r\n        const selectedForumulaInput = selectedRecord.selectedForumulaInput || []\r\n        let lstDynamicFields = [];\r\n\r\n        if (selectedForumulaInput) {\r\n            selectedForumulaInput.map(dynamicfields =>\r\n                lstDynamicFields.push(dynamicfields)\r\n            );\r\n            const inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                lstDynamicFields: lstDynamicFields,\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord: selectedRecord,\r\n                selectedResultGrade: this.state.selectedRecord.selectedResultGrade,\r\n                ResultParameter: this.state.selectedRecord.ResultParameter || {}\r\n            }\r\n            this.props.calculateFormula(inputData)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height\r\n            });\r\n        }\r\n    }\r\n    getActiveTestURL() {\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (this.props.Login.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n    //Added by sonia for ALPD-4084 on May 2 2024 Export action\r\n    // exportExcelHeader = (testChildGetREParam,RESelectedTest,userInfo, exportId, testskip,testtake) => {\r\n\r\n    //     let TestList = [...this.props.Login.masterData.RE_TEST];\r\n    //     TestList = TestList.splice(testskip, testskip + testtake);\r\n    //     let exportTestList = getSameRecordFromTwoArrays(TestList, RESelectedTest, \"ntransactiontestcode\");\r\n    //     if (exportTestList && exportTestList.length > 0) {\r\n    //         let inputParam ={};      \r\n    //             let Map = {\r\n    //                 nregtypecode : testChildGetREParam.nregtypecode,\r\n    //                 nregsubtypecode : testChildGetREParam.nregsubtypecode,\r\n    //                 ncontrolcode: exportId,\r\n    //                 transactiontestcode: exportTestList ? exportTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n    //                 RESelectedTest: exportTestList,\r\n    //                 skip: this.state.skip,\r\n    //                 take: this.state.take,\r\n    //                 testskip: this.state.testskip,\r\n    //                 testtake: this.state.testtake,\r\n    //                 subSampleSkip: this.state.subSampleSkip,\r\n    //                 subSampleTake: this.state.subSampleTake,\r\n    //                 userinfo: userInfo,\r\n    //                 operation: 'exportAction',\r\n    //             }  \r\n    //             inputParam = {\r\n    //                 inputData: Map,\r\n    //             }            \r\n    //             this.props.exportAction(inputParam);            \r\n\r\n\r\n    //     }\r\n    //     else {\r\n    //         toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }));\r\n    //     }\r\n\r\n\r\n\r\n\r\n    // }\r\n\r\n    //Added by sonia for ALPD-4084 on May  17 2024 Export action\r\n    exportExcelHeader = (SampleList, userInfo, exportId) => {\r\n        if (SampleList && SampleList.length > 0) {\r\n            let inputParam = {};\r\n            let Map = {\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n                ncontrolcode: exportId,\r\n                npreregno: SampleList ? SampleList.map(sample => sample.npreregno).join(\",\") : \"\",\r\n                userinfo: userInfo,\r\n                operation: 'exportAction',\r\n            }\r\n            inputParam = {\r\n                inputData: Map,\r\n            }\r\n            this.props.exportAction(inputParam);\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }));\r\n        }\r\n    }\r\n\r\n    //Added by sonia for ALPD-4084 on May 2 2024 Import action\r\n    resultImport = (importId) => {\r\n        this.props.Login.masterData.selectedImportFile = []\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                screenName: \"IDS_RESULTIMPORTFILE\",\r\n                openModal: true,\r\n                loadFile: true,\r\n                activeTestKey: \"IDS_RESULTS\",\r\n                masterData: this.props.Login.masterData,\r\n                importId: importId\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n        let inputValues = {\r\n            SampleType: this.props.Login.masterData.realSampleTypeList || [],\r\n            SampleTypeValue: this.props.Login.masterData.realSampleTypeValue || {},\r\n            RegistrationType: this.props.Login.masterData.realRegistrationTypeList || [],\r\n            RegTypeValue: this.props.Login.masterData.realRegTypeValue || {},\r\n            RegistrationSubType: this.props.Login.masterData.realRegistrationSubTypeList || [],\r\n            RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue || {},\r\n            DesignTemplateMappingValue: this.props.Login.masterData.realDesignTemplateMapping || {},\r\n            DesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMappingList || [],\r\n            REFilterStatus: this.props.Login.masterData.realFilterStatusList || [],\r\n            FilterStatusValue: this.props.Login.masterData.realFilterStatusValue || {},\r\n            ApprovalConfigVersion: this.props.Login.masterData.realApprovalConfigVersionList || [],\r\n            ApprovalVersionValue: this.props.Login.masterData.realApproveConfigVersion || {},\r\n            // REJobStatus:this.state.REJobStatus || [],\r\n            JobStatusValue: this.props.Login.masterData.defaultjobstatus || {},\r\n            Testvalues: this.props.Login.masterData.realTestvaluesList || [],\r\n            Batchvalues: this.props.Login.masterData.realBatchvaluesList || [],\r\n            BatchValue: this.props.Login.masterData.realBatchvalue || {},\r\n            Worklistvalues: this.props.Login.masterData.RealWorklistvaluesList || [],\r\n            WorklistValue: this.props.Login.masterData.realWorklistvalue || {},\r\n            TestValue: this.props.Login.masterData.realTestcodeValue || {},\r\n            ConfigurationFilterValues: this.props.Login.masterData.realConfigurationFilterValuesList || [],\r\n            ConfigurationFilterValue: this.props.Login.masterData.realdefaultConfigurationFilterValue || {},\r\n            defaultSampleType: this.props.Login.masterData.realSampleTypeValue || {},\r\n            defaultRegistrationType: this.props.Login.masterData.realRegTypeValue || {},\r\n            defaultRegistrationSubType: this.props.Login.masterData.realRegSubTypeValue || {},\r\n            defaultFilterStatus: this.props.Login.masterData.realFilterStatusValue || {},\r\n            defaultApprovalConfigVersion: this.props.Login.masterData.realApproveConfigVersion || {},\r\n            defaultBatchvalue: this.props.Login.masterData.realBatchvalue || {},\r\n            defaultWorklistvalue: this.props.Login.masterData.realWorklistvalue || {},\r\n            defaultTestvalues: this.props.Login.masterData.realTestcodeValue || {},\r\n            defaultConfigurationFilterValue: this.props.Login.masterData.realdefaultConfigurationFilterValue || {},\r\n            fromDate: this.props.Login.masterData.realFromDate || new Date(),\r\n            toDate: this.props.Login.masterData.realToDate || new Date()\r\n            // DynamicDesignMapping:this.state.stateDynamicDesign || []\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false, masterData: { ...this.props.Login.masterData, ...inputValues } }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        //setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    }\r\n    handleSubSamplePageChange = e => {\r\n        this.setState({\r\n            subSampleSkip: e.skip,\r\n            subSampleTake: e.take\r\n        });\r\n        //setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    }\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take,\r\n            sampletakeDataState: e.take\r\n        });\r\n    };\r\n    verticalPaneSizeChange = (val) => {\r\n        if (this.state.enableAutoHeight) {\r\n            this.setState({\r\n                initialVerticalWidth: val - 150\r\n            })\r\n        }\r\n    }\r\n    changeSplitterOption = () => {\r\n        this.setState({\r\n            enableAutoHeight: !this.state.enableAutoHeight,\r\n            initialVerticalWidth: \"57vh\"\r\n\r\n        })\r\n    }\r\n\r\n\r\n    sideNavDetail = (screenName) => {\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTest ? [...this.props.Login.masterData.searchedTest] : this.props.Login.masterData.RE_TEST || [];\r\n        const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        // let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n\r\n        return (\r\n            screenName == \"IDS_RESULTS\" ?\r\n                <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_RESULTS\"} tabDetail={this.resultTabDetail()} onTabChange={this.onTabChange} />\r\n                : screenName == \"IDS_ATTACHMENTS\" ?\r\n                    <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\"} tabDetail={this.attachmentTabDetail()} destroyInactiveTabPane={true} onTabChange={this.onTabChange} />\r\n                    : screenName == \"IDS_COMMENTS\" ?\r\n                        <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_TESTCOMMENTS\"} tabDetail={this.commentTabDetail()} destroyInactiveTabPane={true} onTabChange={this.onTabChange} />\r\n                        :\r\n                        screenName == \"IDS_INSTRUMENT\" ?\r\n                            <ApprovalInstrumentTab\r\n                                userInfo={this.props.Login.userInfo}\r\n                                genericLabel={this.props.Login.genericLabel}\r\n                                masterData={this.props.Login.masterData}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                methodUrl={\"ResultUsedInstrument\"}\r\n                                controlMap={this.state.controlMap}\r\n                                deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                dataState={this.state.instrumentDataState}\r\n                                selectedId={this.props.Login.selectedId || null}\r\n                                isActionRequired={true}\r\n                                dataStateChange={this.dataStateChange}\r\n                                deleteRecord={this.deleteInstrumentRecord}\r\n                                fetchRecord={this.fetchInstrumentRecord}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                screenName=\"IDS_INSTRUMENT\"\r\n                            />\r\n                            :\r\n                            screenName == \"IDS_MATERIAL\" ?\r\n                                <ResultUsedMaterial\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    genericLabel={this.props.Login.genericLabel}\r\n                                    masterData={this.props.Login.masterData}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    methodUrl={\"ResultUsedMaterial\"}\r\n                                    controlMap={this.state.controlMap}\r\n                                    deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                    editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                    dataState={this.state.materialDataState}\r\n                                    selectedId={this.props.Login.selectedId || null}\r\n                                    isActionRequired={true}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    deleteRecord={this.deleteMaterialRecord}\r\n                                    fetchRecord={this.props.fetchMaterialRecord}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    screenName=\"IDS_MATERIAL\"\r\n                                />\r\n                                :\r\n                                screenName == \"IDS_TASK\" ?\r\n                                    <ResultEntryTaskTab\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        genericLabel={this.props.Login.genericLabel}\r\n                                        masterData={this.props.Login.masterData}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        methodUrl={\"ResultUsedTask\"}\r\n                                        addResultEntryTask={this.addResultEntryTask}\r\n                                        controlMap={this.state.controlMap}\r\n                                        deleteParam={{\r\n                                            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                                            ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\r\n                                        }}\r\n                                        editParam={{\r\n                                            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                                            ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\r\n                                        }}\r\n                                        dataState={this.state.taskDataState}\r\n                                        selectedId={this.props.Login.selectedId || null}\r\n                                        isActionRequired={true}\r\n                                        dataStateChange={this.dataStateChange}\r\n                                        deleteRecord={this.deleteTaskRecord}\r\n                                        fetchRecord={this.fetchTaskRecord}\r\n                                        //fetchRecord={this.fetchInstrumentRecord}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        screenName=\"IDS_TASK\" />\r\n                                    :\r\n                                    screenName == \"IDS_SAMPLEDETAILS\" ?\r\n                                        this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\r\n                                            <SampleInfoView\r\n                                                data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0\r\n                                                    ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\r\n                                                SingleItem={this.state.SingleItem}\r\n\r\n                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                            /> :\r\n                                            <SampleInfoGrid\r\n                                                selectedSample={this.props.Login.masterData.RESelectedSample}\r\n                                                dataState={this.state.sampleGridDataState}\r\n                                                dataStateChange={this.sampleGridDataStateChange}\r\n                                                extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                screenName=\"IDS_SAMPLEGRID\"\r\n                                                jsonField={\"jsondata\"}\r\n                                                expandField=\"expanded\"\r\n                                            />\r\n\r\n                                        : \"\"\r\n        )\r\n    }\r\n\r\n\r\n    resultTabDetail = () => {\r\n        const resultTabMap = new Map();\r\n        //let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        // let { testskip, testtake } = this.state\r\n        // let testList = this.props.Login.masterData.RE_TEST || [];\r\n        // testList = testList.slice(testskip, testskip + testtake);\r\n        const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode\r\n        //let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n\r\n        resultTabMap.set(\"IDS_RESULTS\", <ResultEntryResultsTab\r\n            tabSequence={SideBarSeqno.TEST}\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            fetchRecord={this.props.parameterRecord}\r\n            controlMap={this.state.controlMap}\r\n            parameterParam={{ primaryKeyField: \"ntransactionresultcode\", masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            checkListRecord={this.checkListRecord}\r\n            editpredefinedcomments={this.editpredefinedcomments}\r\n            enforceResult={this.enforceResult}\r\n            formulaCalculation={this.formulaCalculation}\r\n            checklistParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            viewFile={this.props.viewAttachment}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_RESULTS\"\r\n            getMeanTestParameter={this.props.getMeanCalculationTestParameter}\r\n            meanParam={{ \"userInfo\": this.props.Login.userInfo, ncontrolCode: meanControlId }}\r\n        />)\r\n\r\n        resultTabMap.set(\"IDS_RESULTCHANGEHISTORY\",\r\n            <ResultChangeHistoryTab\r\n                tabSequence={SideBarSeqno.TEST}\r\n                userInfo={this.props.Login.userInfo}\r\n                genericLabel={this.props.Login.genericLabel}\r\n                ApprovalResultChangeHistory={this.props.Login.masterData.ResultChangeHistory || []}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.resultChangeDataState}\r\n                dataStateChange={this.dataStateChange}\r\n                screenName=\"IDS_RESULTCHANGEHISTORY\"\r\n                controlMap={this.state.controlMap}\r\n                masterData={this.props.Login.masterData}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                selectedId={null}\r\n\r\n            />)\r\n\r\n        return resultTabMap;\r\n    }\r\n\r\n    attachmentTabDetail = () => {\r\n        const attachmentTabMap = new Map();\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let { skip, take, testskip, testtake, subSampleSkip, subSampleTake } = this.state\r\n        let testList = this.props.Login.masterData.RE_TEST || [];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ?\r\n            this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\r\n        subsampleList = subsampleList.slice(subSampleSkip, subSampleSkip + subSampleTake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n        //ALPD-3732  \r\n        let sampleList = this.props.Login.masterData.RE_SAMPLE || [];\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\r\n\r\n\r\n        attachmentTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            tabSequence={SideBarSeqno.TEST}\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n            subFields={[{ [designProperties.VALUE]: \"stestsynonym\" }, { [designProperties.VALUE]: \"screateddate\" }]}\r\n            userInfo={this.props.Login.userInfo}\r\n            isneedReport={false}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: selectedTestList//this.props.Login.masterData.RESelectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n            isneedHeader={true}\r\n        />)\r\n\r\n        this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample &&\r\n            attachmentTabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n                tabSequence={SideBarSeqno.SUBSAMPLE}\r\n                screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                selectedMaster=\"selectedSubSample\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                masterList={selectedSubSampleList}\r\n                masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                viewFile={this.props.viewAttachment}\r\n                addName={\"AddSubSampleAttachment\"}\r\n                editName={\"EditSubSampleAttachment\"}\r\n                deleteName={\"DeleteSubSampleAttachment\"}\r\n                viewName={\"ViewSubSampleAttachment\"}\r\n                methodUrl={\"SubSampleAttachment\"}\r\n                nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n                take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SubSampleAttachment\",\r\n                        ntransactionsamplecode,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\r\n\r\n                }}\r\n                selectedListName=\"IDS_SAMPLEARNO\"\r\n                displayName=\"ssamplearno\"\r\n                isneedHeader={true}\r\n            />)\r\n        attachmentTabMap.set(\"IDS_SAMPLEATTACHMENTS\",\r\n            <Attachments\r\n                screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n                tabSequence={SideBarSeqno.SAMPLE}\r\n                selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                masterList={selectedSampleList}\r\n                masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHEMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                addName={\"AddSampleAttachment\"}\r\n                editName={\"EditSampleAttachment\"}\r\n                deleteName={\"DeleteSampleAttachment\"}\r\n                viewName={\"ViewSampleAttachment\"}\r\n                methodUrl={\"SampleAttachment\"}\r\n                nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SampleAttachment\",\r\n                        npreregno,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: this.props.Login.screenName\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RESelectedSample\r\n\r\n                }}\r\n                selectedListName=\"IDS_ARNUMBER\"\r\n                displayName=\"sarno\"\r\n                isneedHeader={true}\r\n            />)\r\n        return attachmentTabMap;\r\n    }\r\n    testDataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n    commentTabDetail = () => {\r\n        const commentTabMap = new Map();\r\n        let { skip, take, testskip, testtake, subSampleSkip, subSampleTake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTest ? [...this.props.Login.masterData.searchedTest] : this.props.Login.masterData.RE_TEST || [];\r\n        const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        const ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\r\n        subsampleList = subsampleList.slice(subSampleSkip, subSampleSkip + subSampleTake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n        //ALPD-3732\r\n        let sampleList = this.props.Login.masterData.RE_SAMPLE || [];\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\r\n\r\n\r\n        commentTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            isSampleTestComment={true}\r\n            tabSequence={SideBarSeqno.TEST}\r\n            selectedMaster={selectedTestList}\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDCOMMENTS\"}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            isTestComment={false}\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            masterData={this.props.Login.masterData}\r\n            isneedReport={false}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: selectedTestList,\r\n                ncontrolCode: editTestCommentsId\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n        this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample &&\r\n            commentTabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n                screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n                tabSequence={SideBarSeqno.SUBSAMPLE}\r\n                onSaveClick={this.onCommentsSaveClick}\r\n                selectedMaster=\"selectedSubSample\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n                fetchRecord={this.props.getCommentsCombo}\r\n                addName={\"AddSubSampleComment\"}\r\n                editName={\"EditSubSampleComment\"}\r\n                deleteName={\"DeleteSubSampleComment\"}\r\n                methodUrl={\"SubSampleComment\"}\r\n                masterData={this.props.Login.masterData}\r\n                isTestComment={false}\r\n                masterList={selectedSubSampleList}\r\n                masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n                primaryKeyField={\"nsamplecommentcode\"}\r\n                dataState={this.state.subSampleCommentDataState}\r\n                dataStateChange={this.subSampledataStateChange}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SubSampleComment\",\r\n                        ntransactionsamplecode,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                    operation: \"update\",\r\n                    masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\r\n                    ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n                }}\r\n                selectedListName=\"IDS_SAMPLEARNO\"\r\n                displayName=\"ssamplearno\"\r\n                selectedId={this.props.Login.selectedId || null}\r\n            />)\r\n        commentTabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            tabSequence={SideBarSeqno.SAMPLE}\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"RESelectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            masterData={this.props.Login.masterData}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_ARNUMBER\"\r\n            displayName=\"sarno\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n\r\n        return commentTabMap;\r\n    }\r\n\r\n\r\n    onInputSwitchOnChange = (event) => {\r\n        if (event.target.name == \"PopupNav\") {\r\n            this.setState({\r\n                enablePropertyPopup: !this.state.enablePropertyPopup\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                enableAutoClick: !this.state.enableAutoClick\r\n            })\r\n        }\r\n    }\r\n    changePropertyViewClose = (id) => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined,\r\n                activeTestTab: undefined,\r\n                activeTabId: id\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    changePropertyView = (index, screenName, event, status) => {\r\n\r\n        let id = false;\r\n        if (event && event.ntransactiontestcode) {\r\n            id = event.ntransactiontestcode\r\n        } else if (event && event.ntransactionsamplecode) {\r\n            id = event.ntransactionsamplecode\r\n        } else if (event && event.npreregno) {\r\n            id = event.npreregno\r\n        }\r\n        //console.log(this.state.activeTabId, id , \"=======>\")\r\n        let activeTabIndex\r\n        let activeTabId\r\n        if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n            activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\r\n            //activeTabId = this.state.activeTabIndex !== index ? true:false;\r\n        }\r\n        if (status != \"click\") {\r\n            if (index) {\r\n                const tabProps = {\r\n                    tabSequence: SideBarSeqno.TEST,\r\n                    screenName: screenName == \"IDS_COMMENTS\" ? \"IDS_TESTCOMMENTS\" : screenName === \"IDS_ATTACHMENTS\" ? \"IDS_TESTATTACHMENTS\" : screenName,\r\n                    activeTabIndex,\r\n                    //activeTabId\r\n                }\r\n                this.onTabChange(tabProps);\r\n            }\r\n            // if (index == SideBarTabIndex.RESULT) {\r\n            //     const tabProps = {\r\n            //         tabSequence: SideBarSeqno.TEST,\r\n            //         screenName: \"IDS_RESULTS\",\r\n            //         activeTabIndex,\r\n            //         //activeTabId\r\n            //     }\r\n            //     this.onTabChange(tabProps);\r\n            // }\r\n\r\n            // else if (index == SideBarTabIndex.ATTACHMENTS) {\r\n            //     const tabProps = {\r\n            //         tabSequence: SideBarSeqno.TEST,\r\n            //         screenName: \"IDS_TESTATTACHMENTS\",\r\n            //         activeTabIndex,\r\n            //        // activeTabId\r\n            //     }\r\n            //     this.onTabChange(tabProps);\r\n            // }\r\n            // else if (index == SideBarTabIndex.COMMENTS) {\r\n            //     const tabProps = {\r\n            //         tabSequence: SideBarSeqno.TEST,\r\n            //         screenName: \"IDS_TESTCOMMENTS\",\r\n            //         activeTabIndex,\r\n            //         //activeTabId\r\n            //     }\r\n            //     this.onTabChange(tabProps);\r\n            // }\r\n            // else {\r\n            //     if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n\r\n            //         const updateInfo = {\r\n            //             typeName: DEFAULT_RETURN,\r\n            //             data: {\r\n            //                 activeTabIndex: this.state.activeTabIndex !== index ? index : id ? index : false,\r\n            //                 activeTabId: id\r\n            //             }\r\n            //         }\r\n            //         this.props.updateStore(updateInfo);\r\n            //     }\r\n            // }\r\n        }\r\n    }\r\n\r\n\r\n    onTabChange = (tabProps) => {\r\n        const activeTestTab = tabProps.screenName;\r\n        const tabseqno = tabProps.tabSequence;\r\n        // if (activeTestTab !== this.props.Login.activeTestTab) {\r\n        if (tabseqno == SideBarSeqno.TEST) {\r\n            if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                    RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    //activeTestTab,\r\n                    resultDataState: this.state.resultDataState,\r\n                    instrumentDataState: this.state.instrumentDataState,\r\n                    materialDataState: this.state.materialDataState,\r\n                    taskDataState: this.state.taskDataState,\r\n                    documentDataState: this.state.documentDataState,\r\n                    resultChangeDataState: this.state.resultChangeDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\r\n                    activeTabId: tabProps.activeTabId ? tabProps.activeTabId : this.state.activeTabId\r\n                }\r\n                this.props.getTestChildTabREDetail(inputData, true);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }));\r\n            }\r\n        }\r\n        else if (tabseqno == SideBarSeqno.SUBSAMPLE) {\r\n            if (activeTestTab !== this.props.Login.activeTestTab) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\r\n                    ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    screenName: activeTestTab,\r\n                    activeTestTab,\r\n                    activeSubSampleTab: activeTestTab,\r\n                    subSampleCommentDataState: this.state.subSampleCommentDataState,\r\n                    subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\r\n                    activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\r\n                }\r\n                this.props.getSubSampleChildTabDetail(inputData)\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }))\r\n            }\r\n        }\r\n        else {\r\n\r\n            if (activeTestTab !== this.props.Login.activeTestTab) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    RESelectedSample: this.props.Login.masterData.RESelectedSample,\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    screenName: activeTestTab,\r\n                    activeSampleTab: activeTestTab,\r\n                    activeTestTab,\r\n                    sampleChangeDataState: this.state.sampleChangeDataState,\r\n                    activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\r\n                }\r\n                this.props.getSampleChildTabDetail(inputData)\r\n            }\r\n        }\r\n\r\n        //}\r\n    }\r\n    mandatoryFieldsForAdditionalInfo = () => {\r\n        let mandatoryFieldsAdditionalInfo = []\r\n        if (this.props.Login.showMultiSelectCombo) {\r\n            mandatoryFieldsAdditionalInfo.push({\r\n                \"idsName\": this.props.Login.masterData['salertmessage'], \"dataField\": \"ntestgrouptestpredefsubcode\", \"mandatory\": true,\r\n                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"file\"\r\n            })\r\n        } else {\r\n            mandatoryFieldsAdditionalInfo.push({\r\n                \"idsName\": this.props.Login.masterData['salertmessage'], \"dataField\": \"ntestgrouptestpredefsubcode\", \"mandatory\": true,\r\n                \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"file\"\r\n            })\r\n        }\r\n        return mandatoryFieldsAdditionalInfo;\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.props.Login.openModal &&\r\n            this.props.Login.screenName === 'IDS_MATERIAL' && nextState.isMaterialInitialRender === false &&\r\n            (nextState.selectedRecordMaterialForm !== this.state.selectedRecordMaterialForm)) {\r\n            return false;\r\n        }\r\n        else if (this.props.Login.openModal &&\r\n            this.props.Login.screenName === 'IDS_INSTRUMENT' && nextState.isInstrumentInitialRender === false &&\r\n            (nextState.selectedRecordInstrumentForm !== this.state.selectedRecordInstrumentForm)) {\r\n            return false;\r\n        }\r\n        else if (this.props.Login.openModal &&\r\n            this.props.Login.screenName === 'IDS_RESULTENTRYCOMPLETE' && nextState.isCompleteInitialRender === false &&\r\n            (nextState.selectedRecordCompleteForm !== this.state.selectedRecordCompleteForm)) {\r\n            return false;\r\n        }\r\n        else if (this.props.Login.openModal &&\r\n            this.props.Login.screenName === 'IDS_RESULTENTRY' && nextState.isParameterInitialRender === false &&\r\n            (nextState.parameterResults !== this.state.parameterResults)) {\r\n            return false;\r\n        }\r\n        else if (this.props.Login.openModal &&\r\n            this.props.Login.screenName === 'IDS_RESULTENTRYPARAMETER' && nextState.isaddSampleRender === false &&\r\n            (nextState.parameterResults1 !== this.state.parameterResults1)) {\r\n            return false;\r\n\r\n        }\r\n\r\n        else if (\r\n            this.props.Login.openModal &&\r\n            this.props.Login.screenName === 'IDS_TASK' && nextState.isTaskInitialRender === false &&\r\n            (nextState.selectedRecordTaskForm !== this.state.selectedRecordTaskForm)) {\r\n            return false;\r\n        } else if (\r\n            this.props.Login.openModal &&\r\n            this.props.Login.screenName === 'IDS_ADHOCPARAMETER' && nextState.isAdhocParameterInitialRender === false &&\r\n            (nextState.selectedRecordAdhocParameter !== this.state.selectedRecordAdhocParameter)) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    render() {\r\n        // const auditInfoFields = [{ \"fieldName\": \"sarno\", \"label\": \"IDS_ARNO\" }, \r\n        // { \"fieldName\": \"spatientid\", \"label\": \"IDS_PATIENTID\" },   \r\n        // { \"fieldName\": \"sfirstname\", \"label\": \"IDS_PATIENTNAME\" },\r\n        // { \"fieldName\": \"sage\", \"label\": \"IDS_AGE\" },\r\n        // { \"fieldName\": \"sgendername\", \"label\": \"IDS_GENDER\" },\r\n        // { \"fieldName\": \"stestsynonym\", \"label\": \"IDS_TEST\" },\r\n        // { \"fieldName\": \"sregdate\", \"label\": \"IDS_REGISTRATIONDATE\" },\r\n        // { \"fieldName\": \"scompletedate\", \"label\": \"IDS_COMPLETEDDATEANDTIME\" }\r\n\r\n        // ];\r\n\r\n        const auditInfoFields = [\r\n            { \"label\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], \"fieldName\": \"sarno\", },\r\n            { \"fieldName\": \"stestsynonym\", \"label\": \"IDS_TEST\" },\r\n            { \"fieldName\": \"sfirstname\", \"label\": \"IDS_PATIENTNAME\" },\r\n            { \"fieldName\": \"sgendername\", \"label\": \"IDS_GENDER\" },\r\n\r\n\r\n        ];\r\n        // this.feildsForGrid =\r\n        // [\r\n        //   // { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }, \r\n        //   { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"100px\" },\r\n        //   { \"idsName\": \"IDS_SUBSAMPLE\", \"dataField\": \"ssamplearno\", \"width\": \"100px\" },      \r\n        //   { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametersynonym\", \"width\": \"100px\" },\r\n        //   { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sfinal\", \"width\": \"100px\" },\r\n        //   { \"idsName\": \"IDS_GRADE\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\r\n        // ];\r\n        this.feildsForGrid =\r\n            [\r\n                // { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_REPORTREFNO\", \"dataField\": \"sreportno\", \"width\": \"200px\" },\r\n                { \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\": \"sarno\", \"width\": \"200px\" },\r\n                { \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sfinal\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_GRADE\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_REGISTRATIONDATE\", \"dataField\": \"sregdate\", \"width\": \"200px\" },\r\n\r\n\r\n\r\n            ];\r\n        // console.log(this.state.enlLink);\r\n        // console.log(this.state.enlLink);\r\n        let sampleListRE = this.props.Login.masterData.RE_SAMPLE ? sortData(this.props.Login.masterData.RE_SAMPLE, \"descending\", \"npreregno\") : [];\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ?  this.props.Login.masterData.RE_SUBSAMPLE : []\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\r\n        let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? this.props.Login.masterData.RE_SUBSAMPLE : []\r\n\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : []\r\n        let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : []\r\n        const startDate = (this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date());\r\n        const endDate = (this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date());\r\n\r\n        // let obj = this.covertDatetoString(startDate, endDate)\r\n        let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\r\n\r\n        const fromDate = obj.fromDate;\r\n        const toDate = obj.toDate;\r\n\r\n\r\n        let subSampleGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\r\n            fromdate: fromDate,\r\n            todate: toDate,\r\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n            activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            subSampleSkip: this.state.subSampleSkip,\r\n            subSampleTake: this.state.subSampleTake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            sampleChangeDataState: this.state.sampleChangeDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            searchSubSampleRef: this.searchSubSampleRef,\r\n            searchTestRef: this.searchTestRef,\r\n            nneedtemplatebasedflow: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow) || false,\r\n            //Aravindh\r\n            //  checkBoxOperation: 3,\r\n            checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n            nworlistcode: (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n            nbatchmastercode: (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1,\r\n            activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 8 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 8 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\r\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\r\n        }\r\n        let testGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntranscode: String(this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus && (this.props.Login.masterData.realFilterStatusValue.ntransactionstatus).toString()),\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\r\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n            activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\r\n            activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            subSampleSkip: this.state.subSampleSkip,\r\n            subSampleTake: this.state.subSampleTake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n            samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\r\n            sampleHistoryDataState: this.state.sampleHistoryDataState,\r\n            // activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : 0,\r\n            activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\r\n            nworlistcode: (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n            nbatchmastercode: (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1,\r\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n            searchTestRef: this.searchTestRef\r\n\r\n        }\r\n        let testChildGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\r\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample && sample.ntransactionsamplecode).join(\",\"),\r\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n            fromdate: fromDate,\r\n            todate: toDate,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\r\n            //activeTabIndex: this.state.enableAutoClick ? this.state.activeTabIndex : this.state.activeTabIndex ? this.state.activeTabIndex : 1,\r\n            nworlistcode: (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n            nbatchmastercode: (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1,\r\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\r\n\r\n        }\r\n\r\n\r\n        const filterSampleParam = {\r\n            inputListName: \"RE_SAMPLE\",\r\n            selectedObject: \"RESelectedSample\",\r\n            primaryKeyField: \"npreregno\",\r\n            fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n            skip: 0,\r\n            take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\r\n            childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n            fecthInputObject: {\r\n                ntype: 2,\r\n                nflag: 2,\r\n                ntransactiontestcode: 0,\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                fromdate: fromDate,\r\n                todate: toDate,\r\n                activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n                //nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? true : false,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                // checkBoxOperation: 3,\r\n                checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1,\r\n                nworlistcode: (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n                nbatchmastercode: (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1,\r\n                nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\r\n            searchFieldList: this.state.sampleSearchField,\r\n            changeList: [\"RE_SUBSAMPLE\", \"RE_TEST\", \"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedSample\", \"RESelectedSubSample\", \"RESelectedTest\"]\r\n        };\r\n\r\n        const filterSubSampleParam = {\r\n            inputListName: \"RE_SUBSAMPLE\",\r\n            selectedObject: \"RESelectedSubSample\",\r\n            primaryKeyField: \"ntransactionsamplecode\",\r\n            fetchUrl: \"resultentrybysample/getResultEntrySubSampleDetails\",\r\n            childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n            fecthInputObject: {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                ntransactiontestcode: 0,\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                fromdate: fromDate,\r\n                todate: toDate,\r\n                activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n                nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? true : false,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                // checkBoxOperation: 3,\r\n                checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n                nworlistcode: (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n                nbatchmastercode: (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1,\r\n                nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\r\n            searchFieldList: this.state.subsampleSearchField,\r\n            changeList: [\"RE_TEST\", \"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedSubSample\", \"RESelectedTest\"]\r\n        };\r\n        let filterTestParam = {\r\n            inputListName: \"RE_TEST\",\r\n            selectedObject: \"RESelectedTest\",\r\n            primaryKeyField: \"ntransactiontestcode\",\r\n            fetchUrl: this.getActiveTestURL(),\r\n            fecthInputObject: {\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1,\r\n                nworlistcode: (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n                nbatchmastercode: (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: this.state.testSearchField,\r\n            changeList: [\"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedTest\"],\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? true : false,\r\n            // checkBoxOperation: 3,\r\n            checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n            //nworlistcode : (this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue.nworklistcode) || -1\r\n            nneedReceivedInLab: parseInt(this.props.Login.settings && this.props.Login.settings['43'])\r\n        }\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n                fecthInputObject: filterSampleParam,\r\n                selectedObject: \"RESelectedSample\",\r\n                inputListName: \"RE_SAMPLE\",\r\n                updatedListname: \"\",\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }, {\r\n                filteredListName: \"searchedSubSample\",\r\n                updatedListname: \"updatedSubSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSubSampleRef,\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n                fecthInputObject: testGetREParam,\r\n                selectedObject: \"RESelectedSubSample\",\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                inputListName: \"RE_SUBSAMPLE\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }, {\r\n                filteredListName: \"searchedTest\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: this.getActiveTestURL(),\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchSampleRef, childFilteredListName: \"\" }],\r\n                fecthInputObject: testChildGetREParam,\r\n                selectedObject: \"RESelectedTest\",\r\n                inputListName: \"RE_TEST\",\r\n                updatedListname: \"RE_TEST\",//\"updatedTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }];\r\n\r\n\r\n        this.breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto\r\n            },\r\n            // {\r\n            //     \"label\": \"IDS_SAMPLETYPE\",\r\n            //     \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\r\n            // }, \r\n            {\r\n                \"label\": \"IDS_REGISTRATIONTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\"\r\n                // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\r\n                // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_REGISTRATIONSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\r\n            },\r\n            // {\r\n            //     \"label\": \"IDS_CONFIGVERSION\",\r\n            //     \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\r\n            // },\r\n            {\r\n                \"label\": \"IDS_TEST\",\r\n                \"value\": this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.stestsynonym ? this.props.Login.masterData.realTestcodeValue.stestsynonym : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_TESTSTATUS\",\r\n                \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus : \"NA\"\r\n            }\r\n        ]\r\n\r\n        if (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) {\r\n            this.breadCrumbData.push({\r\n                \"label\": \"IDS_WORKLIST\",\r\n                \"value\": this.props.Login.masterData.realWorklistCodeValue ? this.props.Login.masterData.realWorklistCodeValue.sworklistno : \"NA\"\r\n            });\r\n        }\r\n        if (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) {\r\n            this.breadCrumbData.push({\r\n                \"label\": \"IDS_BATCH\",\r\n                \"value\": this.props.Login.masterData.realBatchCodeValue ? this.props.Login.masterData.realBatchCodeValue.sbatcharno : \"NA\"\r\n            });\r\n        }\r\n\r\n        const testStartId = this.state.controlMap.has(\"TestStart\") && this.state.controlMap.get(\"TestStart\").ncontrolcode\r\n        const resultEnterId = this.state.controlMap.has(\"ResultEnter\") && this.state.controlMap.get(\"ResultEnter\").ncontrolcode\r\n        const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode\r\n        const exportId = this.state.controlMap.has(\"ExportResult\") && this.state.controlMap.get(\"ExportResult\").ncontrolcode\r\n        const importId = this.state.controlMap.has(\"ImportResult\") && this.state.controlMap.get(\"ImportResult\").ncontrolcode\r\n        const setDefaultId = this.state.controlMap.has(\"SetDefaultResult\") && this.state.controlMap.get(\"SetDefaultResult\").ncontrolcode\r\n\r\n        const editSourceMethodId = this.state.controlMap.has(\"EditSourceMethod\") && this.state.controlMap.get(\"EditSourceMethod\").ncontrolcode\r\n        const addResultUsedInstrumentId = this.state.controlMap.has(\"AddResultUsedInstrument\") && this.state.controlMap.get(\"AddResultUsedInstrument\").ncontrolcode\r\n        const addResultUsedMaterailId = this.state.controlMap.has(\"AddResultUsedMaterial\") && this.state.controlMap.get(\"AddResultUsedMaterial\").ncontrolcode\r\n        const adhocId = this.state.controlMap.has(\"AdhocParameter\") && this.state.controlMap.get(\"AdhocParameter\").ncontrolcode\r\n        const openELNSheet = this.state.controlMap.has(\"OpenELNSheet\") && this.state.controlMap.get(\"OpenELNSheet\").ncontrolcode\r\n        const patientPreviousResultView = this.state.controlMap.has(\"PatientPreviousResultView\") && this.state.controlMap.get(\"PatientPreviousResultView\").ncontrolcode\r\n        const identicalResultEnterId = this.state.controlMap.has(\"IdenticalResultEnter\") && this.state.controlMap.get(\"IdenticalResultEnter\").ncontrolcode\r\n        const testSectionChangeID = this.state.controlMap.has(\"ChangeTestSection\") ? this.state.controlMap.get(\"ChangeTestSection\").ncontrolcode : -1;\r\n        const filterNameId = this.state.controlMap.has(\"FilterName\") ? this.state.controlMap.get(\"FilterName\").ncontrolcode : -1;\r\n        const filterDetailId = this.state.controlMap.has(\"FilterDetail\") ? this.state.controlMap.get(\"FilterDetail\").ncontrolcode : -1;\r\n\r\n\r\n        const mandatoryFieldsInstrument = [{ \"mandatory\": true, \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"ninstrumentcatcode\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_INSTRUMENTNAME\", \"dataField\": \"ninstrumentnamecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_INSTRUMENTID\", \"dataField\": \"ninstrumentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_FORMDATE\", \"dataField\": \"dfromdate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TODATE\", \"dataField\": \"dtodate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzfromdate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntztodate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n\r\n        const mandatoryFieldsMaterial = [{ \"mandatory\": true, \"idsName\": \"IDS_MATERIALTYPE\", \"dataField\": \"nmaterialtypecode\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_MATERIALCATEGORY\", \"dataField\": \"nmaterialcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_MATERIAL\", \"dataField\": \"nmaterialcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_MATERIALINVENTORY\", \"dataField\": \"nmaterialinventorycode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_AVAILABLEQUANTITY\", \"dataField\": \"savailablequantity\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_USEDQTY\", \"dataField\": \"susedquantity\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_UNIT\", \"dataField\": \"sunitname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n\r\n        ]\r\n        const mandatoryFieldsTask = [{ \"mandatory\": true, \"idsName\": \"IDS_PREANALYSISTIME\", \"dataField\": \"spreanalysistime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_PREPARATIONTIME\", \"dataField\": \"spreparationtime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_ANALYSISTIME\", \"dataField\": \"sanalysistime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_MISCTIME\", \"dataField\": \"smisctime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        ]\r\n\r\n        const mandatoryFieldsTestMethodSource = [{ \"mandatory\": true, \"idsName\": \"IDS_SOURCE\", \"dataField\": \"nsourcecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_METHOD\", \"dataField\": \"nmethodcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n\r\n\r\n        const mandatoryEnforceResult = [\r\n            { \"mandatory\": true, \"idsName\": \"IDS_RESULTS\", \"dataField\": \"senforceresult\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"senforceresultcomment\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            // { \"mandatory\": true, \"idsName\": \"IDS_PASSFLAG\", \"dataField\": \"ngradecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\r\n        ]\r\n\r\n\r\n        const mandatoryFieldsParameter = [{ \"mandatory\": true, \"idsName\": \"IDS_PARAMETERCOMMENTS\", \"dataField\": \"sresultcomment\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]\r\n\r\n        const mandatoryFieldsComplete = [{ \"mandatory\": true, \"idsName\": \"IDS_USER\", \"dataField\": \"nusercode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n        const mandatoryFieldsSection = [{ \"mandatory\": true, \"idsName\": \"IDS_SECTION\", \"dataField\": \"nsectioncode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n        const mandatoryFieldsFilter = [{ \"mandatory\": true, \"idsName\": \"IDS_FILTERNAME\", \"dataField\": \"sfiltername\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]\r\n\r\n\r\n        const validateFormulaMandyFields = this.state.validateFormulaMandyFields;\r\n\r\n        const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode\r\n        const testDesign = <ContentPanel>\r\n            <Card>\r\n                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                    <span style={{ display: \"inline-block\" }}>\r\n                        <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                    </span>\r\n                </Card.Header>\r\n                <Card.Body className='p-0 sm-pager'>\r\n                    <TransactionListMasterJsonView\r\n                        progressTimerStart={this.props.Login.progressTimerStart || false}\r\n                        clickIconGroup={true}\r\n                        cardHead={94}\r\n                        //paneHeight={this.state.initialVerticalWidth}\r\n                        // paneHeight={`${testListRE && testListRE !== null && testListRE.length > 0 ? testListRE.length * 13 : 5}vh`}\r\n                        masterList={this.props.Login.masterData.searchedTest || testListRE}\r\n                        selectedMaster={this.props.Login.masterData.RESelectedTest}\r\n                        primaryKeyField=\"ntransactiontestcode\"\r\n                        //getMasterDetail={this.props.getTestChildTabREDetail}\r\n                        getMasterDetail={(event, status) => { this.props.getTestChildTabREDetail(event, status); this.changePropertyView(1, \"IDS_RESULTS\", event, \"click\") }}\r\n                        inputParam={testChildGetREParam}\r\n                        subFieldsLabel={true}\r\n                        additionalParam={[]}\r\n                        mainField=\"stestsynonym\"\r\n                        selectedListName=\"RESelectedTest\"\r\n                        objectName=\"test\"\r\n                        listName=\"IDS_TEST\"\r\n                        pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                        showStatusLink={true}\r\n                        statusFieldName=\"stransdisplaystatus\"\r\n                        statusField=\"ntransactionstatus\"\r\n                        needMultiSelect={true}\r\n                        subFields={this.state.testListColumns || []}\r\n                        moreField={this.state.testMoreField}\r\n                        needValidation={false}\r\n                        needFilter={false}\r\n                        filterColumnData={this.props.filterTransactionList}\r\n                        searchListName=\"searchedTest\"\r\n                        searchRef={this.searchTestRef}\r\n                        filterParam={filterTestParam}\r\n                        selectionField=\"ntransactionstatus\"\r\n                        showStatusName={true}\r\n                        selectionFieldName=\"sfilterstatus\"\r\n                        childTabsKey={[\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                            \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                            // , \"RegistrationComment\"\r\n                        ]}\r\n                        // selectionList={this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.REFilterStatus : []}\r\n                        selectionList={this.state.selectedFilter}\r\n                        skip={this.state.testskip}\r\n                        take={this.state.testtake}\r\n                        handlePageChange={this.handleTestPageChange}\r\n                        selectionColorField=\"scolorhexcode\"\r\n                        showMoreResetList={true}\r\n                        showMoreResetListName=\"RE_SAMPLE\"\r\n                        buttonCount={5}\r\n                        jsonField={'jsondata'}\r\n                        jsonDesignFields={true}\r\n                        actionIcons={\r\n                            [\r\n                                { title: this.props.intl.formatMessage({ id: \"IDS_OPENELNSHEET\" }), controlname: \"elnimage\", hidden: this.state.userRoleControlRights.indexOf(openELNSheet) === -1, onClick: this.openClosePortal, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, elnUserInfo: this.props.Login.elnUserInfo, elnSite: this.props.Login.elnSite } },\r\n                                { title: this.props.intl.formatMessage({ id: \"IDS_PREVIOUSRESULTVIEW\" }), controlname: \"faEye\", dataplace: \"left\", hidden: this.state.userRoleControlRights.indexOf(patientPreviousResultView) === -1, onClick: this.viewSample, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo } },\r\n                                { title: this.props.intl.formatMessage({ id: \"IDS_EDITMETHODSSOURCE\" }), controlname: \"faPencilAlt\", dataplace: \"left\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                                //commend for nfc bug issues\r\n                                //--start\r\n                                // { title: this.props.intl.formatMessage({ id: \"IDS_ADHOCPARAMETER\" }), controlname: \"faAdhocParameter\", dataplace: \"left\",\r\n                                //  hidden: this.state.userRoleControlRights.indexOf(adhocId) === -1,\r\n                                //  onClick: this.adhocParameter, objectName: \"test\",\r\n                                //       inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, adhocId } },\r\n                                //end\r\n                                // { title: this.props.intl.formatMessage({ id: \"IDS_ADHOCPARAMETER\" }), controlname: \"faAdhocParameter\", dataplace: \"left\", \r\n                                //       hidden: this.state.userRoleControlRights.indexOf(adhocId) === -1,\r\n                                //       onClick: this.adhocTestParameter, objectName: \"test\",\r\n                                //           inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, adhocId } },\r\n                                //{ title: this.props.intl.formatMessage({ id: \"IDS_EDITMETHODSSOURCE\" }), controlname: \"faPencilAlt\", dataplace: \"left\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                                { title: this.props.intl.formatMessage({ id: \"IDS_ADDINSTRUMENT\" }), controlname: \"faMicroscope\", hidden: false, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                                { title: this.props.intl.formatMessage({ id: \"IDS_ADDMATERIAL\" }), controlname: \"faFlask\", hidden: false, onClick: this.props.addREMaterial, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedMaterailId } }\r\n                                // { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }\r\n                            ]\r\n                        }\r\n                        commonActions={\r\n                            // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n                            <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                {testListRE.length > 0 ?\r\n                                    <>\r\n                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                        {/* <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_TESTSTART\" })} hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                <FontAwesomeIcon icon={faPlay} />\r\n                                                                                            </Nav.Link> */}\r\n                                        {/*ALPD-4156--Vignesh R(15-05-2024)-->Result Entry - Option to change section for the test(s)*/}\r\n                                        <Nav.Link\r\n                                            // data-for=\"tooltip-common-wrap\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CHANGESECTION\" })} hidden={this.state.userRoleControlRights.indexOf(testSectionChangeID) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\"\r\n                                            onClick={() => this.getSectionChange(testSectionChangeID, this.state.testskip, this.state.testtake, 'updateSection')} >\r\n                                            <SectionChange className=\"custom_icons\" width=\"20\" height=\"30\" />\r\n                                        </Nav.Link>\r\n\r\n                                        {this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtestinitiate ?\r\n\r\n                                            <FontIconWrap\r\n                                                //  data-for=\"tooltip-common-wrap\" \r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_TESTSTART\" })} hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1}\r\n                                                className=\"btn btn-circle outline-grey ml-2\" role=\"button\"\r\n                                                onClick={() => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest,\r\n                                                    this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake)} >\r\n                                                <FontAwesomeIcon icon={faPlay} />\r\n\r\n                                            </FontIconWrap> : \"\"}\r\n\r\n\r\n\r\n                                        <Nav.Link\r\n                                            // data-for=\"tooltip-common-wrap\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ENTERRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(resultEnterId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.props.resultGetModule(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake)} >\r\n                                            <FontAwesomeIcon icon={faAddressBook} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link\r\n                                            // data-for=\"tooltip-common-wrap\" \r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_FILLDEFAULTRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(setDefaultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.defaultActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.masterData.RESelectedSample, setDefaultId, this.state.testskip, this.state.testtake)}>\r\n                                            <FontAwesomeIcon icon={faPencilRuler} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link\r\n                                            // data-for=\"tooltip-common-wrap\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })} hidden={this.state.userRoleControlRights.indexOf(completeResultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\"\r\n                                            onClick={() => this.props.Login.settings && parseInt(this.props.Login.settings[45]) === transactionStatus.YES ? this.completePopup(testChildGetREParam, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake, 3) :\r\n                                                this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake, 3)}>\r\n                                            <FontAwesomeIcon icon={faCheckCircle} />\r\n                                        </Nav.Link>\r\n                                    </>\r\n                                    : \"\"}\r\n                            </ProductList>\r\n\r\n                            // </Tooltip>\r\n                        }\r\n                    />\r\n                </Card.Body>\r\n            </Card>\r\n        </ContentPanel>\r\n\r\n        let mainDesign = \"\";\r\n        if (this.props.Login.masterData.realRegSubTypeValue &&\r\n            this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) {\r\n            mainDesign = <SplitterLayout borderColor=\"#999\"\r\n                primaryIndex={1} percentage={true}\r\n                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                primaryMinSize={40}\r\n                secondaryMinSize={30}\r\n            >\r\n                <Card>\r\n                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                            <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}</h4>\r\n                        </span>\r\n                    </Card.Header>\r\n                    <Card.Body className='p-0 sm-pager'>\r\n                        <TransactionListMasterJsonView\r\n                            cardHead={94}\r\n                            //paneHeight={this.state.initialVerticalWidth}\r\n                            masterList={this.props.Login.masterData.searchedSubSample || subSampleListRE}\r\n                            selectedMaster={this.props.Login.masterData.RESelectedSubSample}\r\n                        //ALPD-5367 Result Entry -> In the stored button was enable sub sample & sample. \r\n                            actionIcons={\r\n                                this.props.Login.masterData && this.props.Login.masterData.nneedsubsample === true ?\r\n                                    [\r\n                                        {\r\n                                            title: this.props.intl.formatMessage({ id: \"IDS_STORED\" }),\r\n                                            controlname: \"faArrowRight\",\r\n                                            objectName: \"mastersendtostore\",\r\n                                            hidden: false,\r\n                                            onClick: this.openStoredSampleData,\r\n                                            inputData: {\r\n                                                masterData: this.props.Login.masterData,\r\n                                                 userInfo: this.props.Login.userInfo,\r\n                                                 ncontrolCode: -1,\r\n                                            },\r\n                                        }\r\n                                    ]:\"\"\r\n                            }\r\n                            //ALPD-5367 Result Entry -> In the stored button was enable sub sample & sample. \r\n                            primaryKeyField=\"ntransactionsamplecode\"\r\n                            getMasterDetail={this.props.getTestREDetail}\r\n                            inputParam={testGetREParam}\r\n                            additionalParam={[]}\r\n                            mainField=\"ssamplearno\"\r\n                            selectedListName=\"RESelectedSubSample\"\r\n                            objectName=\"subSample\"\r\n                            listName=\"IDS_SUBSAMPLE\"\r\n                            jsonField={'jsondata'}\r\n                            jsonDesignFields={true}\r\n                            subFields={this.state.DynamicSubSampleColumns}\r\n                            moreField={this.state.subSampleMoreField}\r\n                            needValidation={false}\r\n                            needMultiSelect={true}\r\n                            needFilter={false}\r\n                            skip={this.state.subSampleSkip}\r\n                            take={this.state.subSampleTake}\r\n                            pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                            handlePageChange={this.handleSubSamplePageChange}\r\n                            showStatusLink={true}\r\n                            showStatusName={false}\r\n                            selectionList={this.state.selectedFilter}\r\n                            statusFieldName=\"stransdisplaystatus\"\r\n                            statusField=\"ntransactionstatus\"\r\n                            selectionFieldName=\"sfilterstatus\"\r\n                            selectionField=\"ntransactionstatus\"\r\n                            secondaryField={\"storage\"}\r\n                            //ALPD-5367 Result Entry -> In the stored button was enable sub sample & sample. \r\n                            showSecondaryStatusName={true}\r\n                            childTabsKey={[\"RE_TEST\", \"Registration\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"]}\r\n                            filterColumnData={this.props.filterTransactionList}\r\n                            searchListName=\"searchedSubSample\"\r\n                            searchRef={this.searchSubSampleRef}\r\n                            filterParam={filterSubSampleParam}\r\n                            subFieldsFile={true}\r\n                        />\r\n                    </Card.Body>\r\n                </Card>\r\n                {testDesign}\r\n            </SplitterLayout>\r\n        }\r\n        else {\r\n            mainDesign = testDesign\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {/* <PerfectScrollbar> */}\r\n                <ListWrapper className=\"client-listing-wrap new-breadcrumb toolbar-top-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    <div className='fixed-buttons'>\r\n                        <Nav.Link //ALPD-4870 Add filter name and filter details button,done by Dhanushya RI\r\n                            className=\"btn btn-circle outline-grey ml-2\"\r\n                            data-tip={this.props.intl.formatMessage({ id: \"IDS_SAVEFILTER\" })}\r\n                            // data-for=\"tooltip-common-wrap\"\r\n                            hidden={this.state.userRoleControlRights.indexOf(filterNameId) === -1}\r\n                            onClick={() => this.openFilterName(filterNameId)}>\r\n                            <SaveIcon width='20px' height='20px' className='custom_icons' />\r\n                        </Nav.Link>\r\n                        {\r\n                            this.state.userRoleControlRights.indexOf(filterDetailId) !== -1 &&\r\n                                this.props.Login.masterData && this.props.Login.masterData.FilterName.length > 0 ?\r\n                                <CustomPopover\r\n                                    icon={faBolt}\r\n                                    nav={true}\r\n                                    data={this.props.Login.masterData.FilterName}\r\n                                    btnClasses=\"btn-circle btn_grey ml-2 spacesremovefromaction\"\r\n                                    //dynamicButton={(value) => this.props.getAcceptTestTestWise(value,testGetParam,this.props.Login.masterData.MJSelectedTest,this.props.Login.userInfo)}\r\n                                    dynamicButton={(value) => this.clickFilterDetail(value)}\r\n                                    textKey=\"sfiltername\"\r\n                                    iconKey=\"nfiltercode\"\r\n                                >\r\n                                </CustomPopover>\r\n                                : \"\"\r\n                        }\r\n                    </div>\r\n                    <Row noGutters={true} bsPrefix=\"toolbar-top\">\r\n                        {/* sticky_head_parent ref={(parentHeight) => { this.parentHeight = parentHeight }} secondaryInitialSize={40}*/}\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            <ListWrapper className={`vertical-tab-top ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                <div className={`tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"} ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                    <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1}\r\n                                        secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                        //onSecondaryPaneSizeChange={this.paneSizeChange} \r\n                                        primaryMinSize={40} secondaryMinSize={20}>\r\n                                        <div className='toolbar-top-inner'>\r\n                                            <TransactionListMasterJsonView\r\n                                                clickIconGroup={true}\r\n                                                // paneHeight={this.state.parentHeight}\r\n                                                splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                                masterList={this.props.Login.masterData.searchedSample || sampleListRE}\r\n                                                selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                                                primaryKeyField=\"npreregno\"\r\n                                                getMasterDetail={this.props.getsubSampleREDetail}\r\n                                                inputParam={subSampleGetREParam}\r\n                                                additionalParam={['napprovalversioncode']}\r\n                                                mainField=\"sarno\"\r\n                                                selectedListName=\"RESelectedSample\"\r\n                                                objectName=\"sample\"\r\n                                                listName=\"IDS_SAMPLE\"\r\n                                                needValidation={false}\r\n                                                validationKey=\"napprovalversioncode\"\r\n                                                validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                                subFields={this.state.DynamicSampleColumns || []}\r\n                                                moreField={this.state.sampleMoreField}\r\n                                                needFilter={true}\r\n                                                needMultiSelect={true}\r\n                                                showFilter={this.props.Login.showFilter}\r\n                                                closeFilter={this.closeFilter}\r\n                                                onFilterSubmit={this.onREFilterSubmit}\r\n                                                filterColumnData={this.props.filterTransactionList}\r\n                                                searchListName=\"searchedSample\"\r\n                                                searchRef={this.searchSampleRef}\r\n                                                handlePageChange={this.handlePageChange}\r\n                                                filterParam={filterSampleParam}\r\n                                                skip={this.state.skip}\r\n                                                take={this.state.take}\r\n                                                hidePaging={false}\r\n                                                showStatusLink={true}\r\n                                                showStatusName={true}\r\n                                                needMultiValueFilter={true}\r\n                                                clearAllFilter={this.onReload}\r\n                                                onMultiFilterClick={this.onMultiFilterClick}\r\n                                                statusFieldName=\"stransdisplaystatus\"\r\n                                                statusField=\"ntransactionstatus\"\r\n                                                //splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                                childTabsKey={[\"RegistrationAttachment\", \"RE_SUBSAMPLE\", \"RE_TEST\", \"SampleApprovalHistory\", \"RegistrationComment\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"]}\r\n                                                selectionList={this.state.selectedFilter}\r\n                                                selectionColorField=\"scolorhexcode\"\r\n                                                selectionFieldName=\"stransdisplaystatus\"\r\n                                                selectionField=\"ntransactionstatus\"\r\n                                                secondaryField={\"storage\"}\r\n                                                jsonField={'jsondata'}\r\n                                                jsonDesignFields={true}\r\n                                                callCloseFunction={true}\r\n                                                viewSampleStatus={true}\r\n                                                filterComponent={[\r\n                                                    {\r\n                                                        \"Sample Filter\": <ResultEntryFilter\r\n                                                            fromDate={this.props.Login.masterData.fromDate ? //new Date(this.props.Login.masterData.fromDate) \r\n                                                                rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate)\r\n                                                                : new Date()}\r\n                                                            toDate={this.props.Login.masterData.toDate ? //new Date(this.props.Login.masterData.toDate) \r\n                                                                rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate)\r\n                                                                : new Date()}\r\n                                                            SampleType={this.state.SampleType || []}\r\n                                                            SampleTypeValue={this.props.Login.masterData.defaultSampleType || []}\r\n                                                            RegType={this.state.RegistrationType || []}\r\n                                                            RegTypeValue={this.props.Login.masterData.defaultRegistrationType || []}\r\n                                                            RegSubType={this.state.RegistrationSubType || []}\r\n                                                            RegSubTypeValue={this.props.Login.masterData.defaultRegistrationSubType || []}\r\n                                                            DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || []}\r\n                                                            FilterStatus={this.state.REFilterStatus || []}\r\n                                                            FilterStatusValue={this.props.Login.masterData.defaultFilterStatus || []}\r\n                                                            ApprovalVersion={this.state.ApprovalConfigVersion || []}\r\n                                                            ApprovalVersionValue={this.props.Login.masterData.defaultApprovalConfigVersion || []}\r\n                                                            REJobStatus={this.state.REJobStatus || []}\r\n                                                            JobStatusValue={this.props.Login.masterData.defaultjobstatus || []}\r\n                                                            Test={this.state.Testvalues || []}\r\n                                                            Batch={this.state.Batchvalues || []}\r\n                                                            BatchValue={this.props.Login.masterData.defaultBatchvalue || []}\r\n                                                            Worklist={this.state.Worklistvalues || []}\r\n                                                            WorklistValue={this.props.Login.masterData.defaultWorklistvalue || []}\r\n                                                            TestValue={this.props.Login.masterData.defaultTestvalues || []}\r\n                                                            ConfigurationFilter={this.state.ConfigurationFilterValues || []}\r\n                                                            ConfigurationFilterValue={this.props.Login.masterData.defaultConfigurationFilterValue || []}\r\n                                                            onFilterComboChange={this.onFilterComboChange}\r\n                                                            handleDateChange={this.handleDateChange}\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                            onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                                            DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                                        />\r\n                                                    }\r\n                                                ]}\r\n                                                actionIcons={\r\n                                                    [this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ?\r\n                                                        {\r\n                                                            title: \"Report\",\r\n                                                            controlname: \"reports\",\r\n                                                            objectName: \"sample\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\r\n                                                            onClick: this.props.previewSampleReport,\r\n                                                            inputData: {\r\n                                                                userinfo: this.props.Login.userInfo,\r\n                                                                ncontrolcode: reportPreviewId\r\n                                                            },\r\n                                                        } : {},\r\n                                                        //ALPD-5367 Result Entry -> In the stored button was enable sub sample & sample. \r\n                                                        this.props.Login.masterData && this.props.Login.masterData.nneedsubsample === false ?\r\n                                                        {\r\n                                                            title: this.props.intl.formatMessage({ id: \"IDS_STORED\" }),\r\n                                                            controlname: \"faArrowRight\",\r\n                                                            objectName: \"mastersendtostore\",\r\n                                                            hidden: false,\r\n                                                            onClick: this.openStoredSampleData,\r\n                                                            inputData: {\r\n                                                                masterData: this.props.Login.masterData,\r\n                                                                 userInfo: this.props.Login.userInfo,\r\n                                                                 ncontrolCode: -1,\r\n                                                            },\r\n                                                        }: {}\r\n                                                    ]\r\n                                               \r\n                                                }\r\n                                                commonActions={\r\n                                                    <>\r\n\r\n                                                        <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                            {this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE ?\r\n                                                                <Nav.Link\r\n                                                                    // data-for=\"tooltip-common-wrap\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_ENTERIDENTICALRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(identicalResultEnterId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.props.resultEntryGetSpec(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake)}   >\r\n                                                                    {/* <FontAwesomeIcon icon={faAddressBook} /> */}\r\n                                                                    <Resultentry />\r\n                                                                </Nav.Link>\r\n                                                                : \"\"}\r\n                                                            <Nav.Link\r\n                                                                //data-for=\"tooltip-common-wrap\" \r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EXPORTSAMPLES\" })}\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(exportId) === -1}\r\n                                                                className=\"btn btn-circle outline-grey ml-2\" role=\"button\"\r\n                                                                // onClick={() => this.exportExcelHeader(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, exportId, this.state.testskip, this.state.testtake)}>\r\n                                                                onClick={() => this.exportExcelHeader(this.props.Login.masterData.RE_SAMPLE, this.props.Login.userInfo, exportId)}>\r\n                                                                <FontAwesomeIcon icon={faFileExcel} />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link\r\n                                                                //data-for=\"tooltip-common-wrap\" \r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORTRESULT\" })}\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(importId) === -1}\r\n                                                                className=\"btn btn-circle outline-grey ml-2\" role=\"button\"\r\n                                                                onClick={() => this.resultImport(importId)}>\r\n                                                                <FontAwesomeIcon icon={faFileImport} />\r\n                                                            </Nav.Link>\r\n\r\n                                                            <Button className=\"btn btn-circle outline-grey ml-2 p-0\" variant=\"link\"\r\n                                                                onClick={() => this.onReload()}\r\n                                                                data-for=\"tooltip-common-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                                <RefreshIcon className='custom_icons' />\r\n                                                            </Button>\r\n                                                        </ProductList>\r\n                                                    </>\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                        <div>\r\n                                            <div style={this.state.showTest === true ? { display: \"block\" } : { display: \"none\" }} >\r\n                                                {mainDesign}\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </SplitterLayout>\r\n                                </div>\r\n\r\n                                <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`} >\r\n                                    <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`} style={{ width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\" }}>\r\n                                        <span className={` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`} onClick={() => this.changePropertyViewClose(false)}><FontAwesomeIcon icon={faChevronRight} /> </span>\r\n                                        <div className={` vertical-tab-content-common sm-view-v-t position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick={() => this.setState({ enablePropertyPopup: !this.state.enablePropertyPopup })}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 1 ? this.sideNavDetail(\"IDS_RESULTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick={() => this.setState({ enablePropertyPopup: !this.state.enablePropertyPopup })}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 2 ? this.sideNavDetail(\"IDS_ATTACHMENTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid-tab position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick={() => this.setState({ enablePropertyPopup: !this.state.enablePropertyPopup })}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 3 ? this.sideNavDetail(\"IDS_COMMENTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick={() => this.setState({ enablePropertyPopup: !this.state.enablePropertyPopup })}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_INSTRUMENT\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 4 ? this.sideNavDetail(\"IDS_INSTRUMENT\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick={() => this.setState({ enablePropertyPopup: !this.state.enablePropertyPopup })}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_MATERIAL\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 5 ? this.sideNavDetail(\"IDS_MATERIAL\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick={() => this.setState({ enablePropertyPopup: !this.state.enablePropertyPopup })}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_TASK\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 6 ? this.sideNavDetail(\"IDS_TASK\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 7 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick={() => this.setState({ enablePropertyPopup: !this.state.enablePropertyPopup })}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_TESTAPPROVALHISTORY\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 7 ? this.sideNavDetail(\"IDS_TESTAPPROVALHISTORY\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick={() => this.setState({ enablePropertyPopup: !this.state.enablePropertyPopup })}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 8 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\"}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className='tab-head'>\r\n                                        <ul>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(1, \"IDS_RESULTS\")}>\r\n                                                <FontAwesomeIcon icon={faFileInvoice}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_RESULT\" })} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_RESULT\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(2, \"IDS_ATTACHMENTS\")}>\r\n                                                <FontAwesomeIcon icon={faLink} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_ATTACHMENTS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(3, \"IDS_COMMENTS\")}>\r\n                                                <FontAwesomeIcon icon={faComments} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(4, \"IDS_INSTRUMENT\")}>\r\n                                                <FontAwesomeIcon icon={faMicroscope} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_INSTRUMENT\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(5, \"IDS_MATERIAL\")}>\r\n                                                <FontAwesomeIcon icon={faFlask} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_MATERIAL\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(6, \"IDS_TASK\")}>\r\n                                                <FontAwesomeIcon icon={faCommentDots} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_TASK\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            {/* <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 7 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(7)}>\r\n                                                <FontAwesomeIcon icon={faHistory} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_TESTAPPROVALHISTORY\" })}\r\n                                                </span>\r\n                                            </li> */}\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(8, \"IDS_SAMPLEDETAILS\")}>\r\n                                                <FontAwesomeIcon icon={faEye} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                        </ul>\r\n                                        <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                // label={\"Auto Show\"}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_AUTOSHOW\" })}\r\n                                                type=\"switch\"\r\n                                                name={\"Auto Click\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enableAutoClick}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enableAutoClick}\r\n                                            />\r\n                                        </span>\r\n                                        {/* <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                // label={\"Popup Nav\"}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_POPUPNAV\" })}\r\n                                                type=\"switch\"\r\n                                                name={\"PopupNav\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enablePropertyPopup}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enablePropertyPopup}\r\n                                            />\r\n                                        </span> */}\r\n                                    </div>\r\n                                </div>\r\n                            </ListWrapper >\r\n                            {/* </PerfectScrollbar> */}\r\n                        </Col >\r\n                    </Row >\r\n                </ListWrapper >\r\n                {/* </PerfectScrollbar> */}\r\n\r\n                <PortalModal>\r\n                    <div>\r\n                        <Modal\r\n                            centered\r\n                            scrollable\r\n                            bsPrefix=\"model model_zindex\"\r\n                            show={this.props.Login.openELNSheet}\r\n                            // show={this.state.openELNSheet}\r\n                            onHide={this.openClosePortal}\r\n                            dialogClassName={`${this.props.nflag && this.props.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`}\r\n                            backdrop=\"static\"\r\n                            keyboard={false}\r\n                            enforceFocus={false}\r\n                            aria-labelledby=\"example-custom-modal-styling-title\"\r\n                        >\r\n                            <Modal.Header closeButton>\r\n                                <Modal.Title style={{ \"line-height\": \"1.0\" }} id=\"example-custom-modal-styling-title\">\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_ELNSHEET\" })}\r\n                                </Modal.Title>\r\n                                <ReactTooltip globalEventOff=\"true\" />\r\n\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n                                <div className=\"modal-inner-content\">\r\n                                    {/* <Iframe url={this.state.enlLink} */}\r\n                                    <Iframe\r\n                                        url={this.props.Login.masterData.enlLink}\r\n                                        width=\"98%\"\r\n                                        height=\"1000px\"\r\n                                        id=\"reportviewID\"\r\n                                        className=\"reportview\"\r\n                                    //display=\"initial\"\r\n                                    /// position=\"relative\" \r\n                                    />\r\n                                </div>\r\n                            </Modal.Body>\r\n                        </Modal>\r\n                    </div>\r\n                </PortalModal>\r\n                <PortalModal>\r\n                    <ModalShow\r\n                        modalShow={this.props.Login.showAlertGrid}\r\n                        modalTitle={this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? this.props.intl.formatMessage({ id: \"IDS_ADDITIONALINFOREQURIED\" })//this.props.Login.onlyAlertMsgAvailable?\"Alert\":this.props.Login.masterData['salertmessage']\r\n                            // :this.props.intl.formatMessage({ id: \"IDS_COMPLETETHEFOLLOWINGTESTS\" })} \r\n                            : this.props.intl.formatMessage({ id: \"IDS_RULECOMPLETEVALIDATION\" })}\r\n                        //  needCloseButton={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\r\n                        closeModal={this.closeModalShow}\r\n                        rulesenginealret={true}\r\n                        onSaveClick={this.props.Login.showAlertGrid == true ? this.onskiprule : this.onModalSave}\r\n                        removeCancel={this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? true : false}\r\n                        // needSubmit={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\r\n                        needSubmit={true}\r\n                        needSave={this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? \"\" : true}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        // mandatoryFields={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?\r\n                        //     this.mandatoryFieldsForAdditionalInfo():\"\"}\r\n                        size={this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? \"\" : 'lg'}\r\n                        showAlertMsg={this.props.Login.showAlertForPredefined ? true : false}\r\n                        modalBody={this.props.Login.additionalInfoView ?\r\n                            this.state.selectedRecord['additionalResultData'] :\r\n                            this.props.Login.showAlertForPredefined ?\r\n                                <ResultEntryPredefinedComments\r\n                                    onlyAlertMsgAvailable={this.props.Login.onlyAlertMsgAvailable}\r\n                                    salertmessage={this.props.Login.masterData['salertmessage']}\r\n                                    showMultiSelectCombo={this.props.Login.showMultiSelectCombo}\r\n                                    testgrouptestpredefsubresultOptions={this.props.Login.masterData.testgrouptestpredefsubresultOptions || []}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputChange={this.onInputChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                /> :\r\n                                <CustomTabs tabDetail={this.tabAlertRulesEngine()} onTabChange={this.onTabChangeRulesEngine} destroyInactiveTabPane={true} />\r\n                        }\r\n                    />\r\n                </PortalModal>\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        size={this.props.Login.screenName === 'IDS_MEANPARAMETER' || this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" || this.props.Login.screenName === \"IDS_RESULTENTRY\" ? \"xl\" : \"lg\"}\r\n\r\n                        closeModal={this.closeModal}\r\n                        showCalculate={this.props.Login.screenName === 'IDS_RESULTFORMULA' ? true : false}\r\n                        operation={// this.props.Login.screenName === 'IDS_RESULTPARAMETERCOMMENTS'?\"\":\r\n                            this.props.Login.screenName === \"IDS_STORAGE\"? \"\":this.props.Login.screenName === 'IDS_RESULTENTRY' || this.props.Login.screenName === 'IDS_ENFORCERESULT' || this.props.Login.screenName === 'IDS_RESULTENTRYPARAMETER' ? \"\"\r\n                                : this.props.Login.operation\r\n                        }\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName === \"IDS_RESULTENTRYPARAMETER\" ? this.props.Login.masterData.realTestcodeValue.stestsynonym : this.props.Login.screenName}\r\n                        selectedRecord={\r\n                            this.props.Login.screenName === \"IDS_RESULTENTRYCOMPLETE\" && !!this.props.Login.loadEsign ?\r\n                                this.state.selectedRecordCompleteForm :\r\n                                this.props.Login.screenName === 'IDS_INSTRUMENT' && !this.props.Login.loadEsign ?\r\n                                    this.state.selectedRecordInstrumentForm :\r\n                                    this.props.Login.screenName === 'IDS_MATERIAL' && !this.props.Login.loadEsign ?\r\n                                        this.state.selectedRecordMaterialForm :\r\n                                        this.props.Login.screenName === 'IDS_TASK' && !this.props.Login.loadEsign ?\r\n                                            this.state.selectedRecordTaskForm :\r\n                                            this.props.Login.screenName === 'IDS_RESULTFORMULA' ?\r\n                                                this.state.selectedRecord.selectedMandatory : this.state.selectedRecord || {}\r\n                        }\r\n                        mandatoryFields={\r\n                            //  this.props.Login.screenName === 'IDS_INSTRUMENT' ? mandatoryFieldsInstrument :\r\n                            //  this.props.Login.screenName === 'IDS_TASK' ? mandatoryFieldsTask :\r\n                            this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? mandatoryFieldsTestMethodSource :\r\n                                this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? mandatoryFieldsParameter :\r\n                                    this.props.Login.screenName === 'IDS_RESULTFORMULA' ? validateFormulaMandyFields :\r\n                                        this.props.Login.screenName === 'IDS_ENFORCERESULT' ? mandatoryEnforceResult : this.props.Login.screenName === 'IDS_SECTION' ? mandatoryFieldsSection : []\r\n                        }\r\n                        esign={this.props.Login.loadEsign}\r\n                        innerPopup={this.props.Login.screenName}\r\n                        validateEsign={this.validateEsign}\r\n\r\n                        onSaveClick={\r\n                            this.props.Login.screenName === \"IDS_RESULTENTRYCOMPLETE\" ? (e) =>\r\n                                onSaveMandatoryValidation(this.state.selectedRecordCompleteForm, mandatoryFieldsComplete, this.onSaveClick) :\r\n                                this.props.Login.multiFilterLoad ? this.onSaveMultiFilterClick :\r\n\r\n                                    this.props.Login.screenName === 'IDS_INSTRUMENT' ?\r\n                                        (e) =>\r\n                                            onSaveMandatoryValidation(this.state.selectedRecordInstrumentForm, mandatoryFieldsInstrument,\r\n                                                this.onSaveClick) :\r\n                                        this.props.Login.screenName === 'IDS_MATERIAL' ?\r\n                                            (e) =>\r\n                                                onSaveMandatoryValidation(this.state.selectedRecordMaterialForm, mandatoryFieldsMaterial,\r\n                                                    this.onSaveClick) :\r\n                                            this.props.Login.showValidate ? this.calculateFormula\r\n                                                : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? this.onSaveFileClick\r\n                                                    : this.props.Login.screenName === 'IDS_ADHOCPARAMETER' ? this.props.Login.masterData.realSampleTypeValue.nclinicaltyperequired === transactionStatus.YES ? this.onSaveClickAdhocParam : this.onsaveClickAdhocparameter\r\n                                                        : this.onSaveClick\r\n\r\n\r\n\r\n                        }\r\n                        showValidate={this.props.Login.screenName === 'IDS_RESULTFORMULA' ? false : this.props.Login.showValidate}\r\n                        modalEvent={this.state.modalEvent}\r\n                        hideSave={ this.props.Login.screenName === \"IDS_STORAGE\"? true : this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" ? true : false}\r\n                        addComponent={\r\n                            this.props.Login.loadEsign ?\r\n                                <Esign\r\n                                    operation={this.props.Login.operation}\r\n                                    onInputOnChange={this.onEsignInputOnChange}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                /> :\r\n                                this.props.Login.screenName === 'IDS_RESULTENTRY' ?\r\n                                    this.state.selectedRecord.ResultParameter &&\r\n                                    this.state.selectedRecord.ResultParameter.map((parameterResult, index) => {\r\n                                        return <ResultEntryForm\r\n                                            index={index}\r\n                                            //  wrappedComponentRef={ref => this.resultEntryFormRef = ref}\r\n                                            //   ref={this.resultEntryFormRef}\r\n                                            //  getPredefinedData={this.props.getPredefinedData}\r\n                                            ResultParameter={[...this.state.selectedRecord.ResultParameter]}\r\n                                            predefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                            defaultPredefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                            gradeValues={this.props.Login.masterData.GradeValues || []}\r\n                                            selectedNumericData={this.props.Login.masterData.selectedNumericData}\r\n                                            selectedResultGrade={this.state.selectedRecord.selectedResultGrade || []}\r\n                                            paremterResultcode={this.props.Login.masterData.paremterResultcode || []}\r\n                                            parameterResults={parameterResult //this.state.selectedRecord.ResultParameter\r\n                                                || []}\r\n                                            Login={this.props.Login}\r\n                                            handleClose={this.handleClose}\r\n                                            onSaveClick={this.onSaveClick}\r\n                                            onResultInputChange={this.onResultInputChange}\r\n                                            //onGradeEvent={this.onGradeEvent}\r\n                                            getFormula={this.getFormula}\r\n                                            onDropTestFile={this.onDropTestFile}\r\n                                            onKeyPress={this.onKeyPress}\r\n                                            deleteAttachmentParamFile={this.deleteAttachmentParameterFile}\r\n                                            viewAdditionalInfo={this.viewAdditionalInfo}\r\n                                            needSubSample={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                                            intl={this.props.intl}\r\n                                            ResultAccuracy={this.props.Login.ResultAccuracy}\r\n                                            Unit={this.props.Login.Unit}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onComboChange={this.onComboChange}\r\n                                            formFields={this.props.Login.formFields || []}\r\n\r\n\r\n\r\n                                        />\r\n                                    })\r\n                                    :\r\n                                    //ALPD-4156--Vignesh R(15-05-2024)-->Result Entry - Option to change section for the test(s)\t\r\n                                    this.props.Login.screenName === \"IDS_SECTION\" ?\r\n                                        <ScheduleSection\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onComboChange={this.onComboChange}\r\n                                            section={this.props.Login.section}\r\n                                            operation={this.props.Login.operation}\r\n                                            userInfo={this.props.Login.userInfo}\r\n\r\n                                        />\r\n                                        :\r\n\r\n                                        this.props.Login.screenName === \"IDS_RESULTENTRYCOMPLETE\" ?\r\n                                            <ResultEntryCompleteForm\r\n                                                onComboChange={this.onComboChange}\r\n                                                Users={this.props.Login.Users}\r\n                                                selecteRecord={this.state.selectedRecord || {}}\r\n                                                selectedRecordCompleteForm={this.props.Login.selectedRecordCompleteForm || {}}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                onChildDataChange={this.onChildDataChange}\r\n                                            />\r\n\r\n                                            :\r\n\r\n                                            this.props.Login.screenName === 'IDS_RESULTENTRYPARAMETER' ?\r\n                                                <>\r\n                                                    <Row>\r\n                                                        {this.state.selectedRecord.selectedSpecification &&\r\n                                                            <FormSelectSearch\r\n                                                                formLabel={this.props.intl.formatMessage({ id: \"IDS_PROFILETREE\" }) + ' / ' + this.props.intl.formatMessage({ id: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Specification\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] })}\r\n                                                                isSearchable={true}\r\n                                                                name={\"nallottedspeccode\"}\r\n                                                                isDisabled={false}\r\n                                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                isClearable={false}\r\n                                                                options={this.state.selectedRecord.selectedSpecification || []}\r\n                                                                value={this.state.selectedRecord.nallottedspeccode && this.state.selectedRecord.nallottedspeccode || \"\"}\r\n                                                                defaultValue={this.state.selectedRecord.selectedSpecification && this.state.selectedRecord.selectedSpecification[\"nallottedspeccode\"] || \"\"}\r\n                                                                onChange={(event) => this.onChange(event, \"nallottedspeccode\", 1)}\r\n                                                                closeMenuOnSelect={true}\r\n                                                            >\r\n                                                            </FormSelectSearch>}\r\n\r\n\r\n                                                        {this.state.selectedRecord.selectedComponent &&\r\n                                                            <FormSelectSearch\r\n                                                                formLabel={this.props.intl.formatMessage({ id: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] })}\r\n                                                                isSearchable={true}\r\n                                                                name={\"ncomponentcode\"}\r\n                                                                isDisabled={false}\r\n                                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                isClearable={false}\r\n                                                                options={this.state.selectedRecord.selectedComponent || []}\r\n                                                                value={this.state.selectedRecord.ncomponentcode && this.state.selectedRecord.ncomponentcode || \"\"}\r\n                                                                defaultValue={this.state.selectedRecord.selectedComponent && this.state.selectedRecord.selectedComponent[\"ncomponentcode\"] || \"\"}\r\n                                                                onChange={(event) => this.onChange(event, \"ncomponentcode\", 2)}\r\n                                                                closeMenuOnSelect={true}\r\n                                                            >\r\n                                                            </FormSelectSearch>\r\n\r\n\r\n                                                        }\r\n                                                    </Row>\r\n                                                    {this.state.selectedRecord.ResultParameter &&\r\n                                                        this.state.selectedRecord.ResultParameter.map((parameterResult, index) => {\r\n                                                            return <ResultEntryParameterForm\r\n                                                                index={index}\r\n                                                                //  wrappedComponentRef={ref => this.resultEntryFormRef = ref}\r\n                                                                //   ref={this.resultEntryFormRef}\r\n                                                                //  getPredefinedData={this.props.getPredefinedData}\r\n                                                                ResultParameter={[...this.state.selectedRecord.ResultParameter]}\r\n                                                                predefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                                                defaultPredefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                                                gradeValues={this.props.Login.masterData.GradeValues || []}\r\n                                                                selectedNumericData={this.props.Login.masterData.selectedNumericData}\r\n                                                                selectedResultGrade={this.state.selectedRecord.selectedResultGrade || []}\r\n                                                                paremterResultcode={this.props.Login.masterData.paremterResultcode || []}\r\n                                                                parameterResults={parameterResult //this.state.selectedRecord.ResultParameter\r\n                                                                    || []}\r\n                                                                Login={this.props.Login}\r\n                                                                handleClose={this.handleClose}\r\n                                                                onSaveClick={this.onSaveClick}\r\n                                                                onResultInputChange={this.onResultInputChange}\r\n                                                                onSampleAdd={this.onSampleAdd}\r\n                                                                //onGradeEvent={this.onGradeEvent}\r\n                                                                getFormula={this.getFormula}\r\n                                                                onDropTestFile={this.onDropTestFile}\r\n                                                                onKeyPress={this.onKeyPress}\r\n                                                                deleteAttachmentParamFile={this.deleteAttachmentParameterFile}\r\n                                                                viewAdditionalInfo={this.viewAdditionalInfo}\r\n                                                                needSubSample={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                                                                intl={this.props.intl}\r\n                                                                controlMap={this.state.controlMap}\r\n                                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                            />\r\n                                                        })}\r\n\r\n                                                </>\r\n                                                :\r\n                                                this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ?\r\n                                                    <TestEditForm\r\n                                                        methodValues={this.props.Login.masterData.MethodData}\r\n                                                        sourceValues={this.props.Login.masterData.SourceData}\r\n                                                        selecteRecord={this.state.selectedRecord || {}}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        handleClose={this.handleClose}\r\n                                                        onSaveClick={this.onSaveClick}\r\n                                                    /> :\r\n                                                    this.props.Login.screenName === 'IDS_INSTRUMENT' ?\r\n                                                        <ResultEntryInstrumentForm\r\n                                                            selectedRecordInstrumentForm={this.props.Login.selectedRecordInstrumentForm}\r\n                                                            instrumentcatValue={this.props.Login.masterData.InstrumentCategory}\r\n                                                            instrumentNameValue={this.props.Login.masterData.InstrumentName}\r\n                                                            instrumentIdValue={this.props.Login.masterData.InstrumentId}\r\n                                                            selecteRecord={this.state.selectedRecord || {}}\r\n                                                            timeZoneListData={this.props.Login.timeZoneList || []}\r\n                                                            onComboChange={this.onComboChange}\r\n                                                            onComboCategoryChange={this.onComboCategoryChange}\r\n                                                            onComboNameChange={this.onComboNameChange}\r\n                                                            onDateChange={this.onDateChange}\r\n                                                            handleClose={this.handleClose}\r\n                                                            onSaveClick={this.onSaveClick}\r\n                                                            onChildDataChange={this.onChildDataChange}\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                            needSubSample={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                                                        /> :\r\n                                                        this.props.Login.screenName === 'IDS_MATERIAL' ?\r\n                                                            <ResultEntryMaterialForm\r\n                                                                Login={this.props.Login}\r\n                                                                materialType={this.props.Login.materialType}\r\n                                                                materialCategory={this.props.Login.materialCat}\r\n                                                                material={this.props.Login.material}\r\n                                                                materialInventory={this.props.Login.materialInventory}\r\n                                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                                selectedRecordMaterialForm={this.state.selectedRecordMaterialForm || {}}\r\n                                                                onMaterialComboChange={this.onMaterialComboChange}\r\n                                                                onInputOnChange={this.onInputOnChange}\r\n                                                                onChildDataChange={this.onChildDataChange}\r\n                                                                onDateChange={this.onDateChange}\r\n                                                                handleClose={this.handleClose}\r\n                                                                onSaveClick={this.onSaveClick}\r\n                                                                userInfo={this.props.Login.userInfo}\r\n                                                                needSubSample={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                                                            /> :\r\n                                                            this.props.Login.screenName === 'IDS_TASK' ?\r\n                                                                <ResultEntryTaskForm\r\n                                                                    selectedRecordTaskForm={this.state.selectedRecordTaskForm || {}}\r\n                                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                                    onNumericChange={this.ontaskNumericChange}\r\n                                                                    onInputChange={this.ontaskInputChange}\r\n                                                                    handleClose={this.handleClose}\r\n                                                                    onSaveClick={this.onSaveClick}\r\n                                                                /> :\r\n                                                                this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ?\r\n                                                                    <ResultEntryParamCommetsForm\r\n                                                                        selecteRecord={this.state.selectedRecord || {}}\r\n                                                                        onInputChange={this.onInputChange}\r\n                                                                        handleClose={this.handleClose}\r\n                                                                        onSaveClick={this.onSaveClick}\r\n                                                                    /> : this.props.Login.screenName === 'IDS_RESULTFORMULA' ?\r\n                                                                        <ResultEntryFormulaForm\r\n                                                                            DynamicFields={this.props.Login.masterData.DynamicFormulaFields}\r\n                                                                            // formRef={this.formRef}\r\n                                                                            masterData={this.props.Login.masterData}\r\n                                                                            handleClose={this.handleClose}\r\n                                                                            screenName={this.props.Login.screenName}\r\n                                                                            selectedForumulaInput={this.state.selectedForumulaInput || []}\r\n                                                                            onFormulaInputChange={this.onFormulaInputChange}\r\n                                                                            getAverageResult={this.getAverageResult}\r\n                                                                            Login={this.props.Login}\r\n                                                                            showValidate={this.props.Login.showValidate}\r\n                                                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                                                        />\r\n                                                                        : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ?\r\n                                                                            <ResultEntryImport\r\n                                                                                handleClose={this.handleClose}\r\n                                                                                screenName={this.props.Login.screenName}\r\n                                                                                onDropFile={this.onDropFile}\r\n                                                                                selectedImportFile={this.props.Login.masterData.selectedImportFile || {}}\r\n                                                                                deleteAttachment={this.deleteAttachment}\r\n                                                                            /> :\r\n                                                                            this.props.Login.screenName === 'IDS_MEANPARAMETER' ?\r\n                                                                                <ResultEntryMean\r\n                                                                                    // onInputOnChange={this.onMeanInputOnChange}\r\n                                                                                    // onComboChange={this.onMeanComboChange}\r\n                                                                                    screenName={this.props.Login.screenName}\r\n                                                                                    headerSelectionChange={this.headerSelectionChange}\r\n                                                                                    selectionChange={this.selectionChange}\r\n                                                                                    selectAll={this.state.selectAll}\r\n                                                                                    testMean={this.state.testMean}\r\n                                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                                    meanTestParameterList={this.state.meanTestParameterList || []}\r\n                                                                                    selectedTestParam={this.state.selectedTestParam}\r\n                                                                                /> :\r\n                                                                                this.props.Login.screenName === 'IDS_RESULTPARAMETERCOMMENTS' ?\r\n                                                                                    <ResultEntryPredefinedComments\r\n                                                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                                                        onInputChange={this.onInputChange}\r\n                                                                                        onComboChange={this.onComboChange}\r\n                                                                                    /> :\r\n                                                                                    this.props.Login.screenName === 'IDS_ENFORCERESULT' ?\r\n                                                                                        <ResultEntryEnforceResult\r\n                                                                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                                                                            GradeList={this.props.Login.masterData.GradeList &&\r\n                                                                                                this.props.Login.masterData.GradeList}\r\n                                                                                            onInputChange={this.onInputChange}\r\n                                                                                            onComboChange={this.onComboChange}\r\n                                                                                        /> :\r\n\r\n                                                                                        this.props.Login.screenName === 'IDS_PREVIOUSRESULTVIEW' ?\r\n                                                                                            (\r\n                                                                                                <>\r\n\r\n                                                                                                    <Card className='one' >\r\n                                                                                                        <Card.Body>\r\n                                                                                                            <SpecificationInfo\r\n                                                                                                                controlMap={this.state.controlMap}\r\n                                                                                                                auditInfoFields={auditInfoFields}\r\n                                                                                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                                                                selectedSpecification={this.props.Login.masterData.viewdetails}\r\n                                                                                                                userInfo={this.props.Login.userInfo}\r\n                                                                                                                selectedNode={this.props.Login.masterData.selectedNode}\r\n                                                                                                                selectedRecord={this.state.filterData}\r\n                                                                                                                approvalRoleActionDetail={this.props.Login.masterData.ApprovalRoleActionDetail}\r\n                                                                                                                screenName=\"IDS_PREVIOUSRESULTVIEW\"\r\n\r\n                                                                                                            />\r\n                                                                                                        </Card.Body>\r\n                                                                                                    </Card>\r\n                                                                                                    <br></br>\r\n\r\n                                                                                                    <DataGrid\r\n                                                                                                        primaryKeyField={\"ntransactiontestcode\"}\r\n                                                                                                        //data={this.props.Login.addComponentDataList || []}\r\n                                                                                                        data={this.props.Login.masterData.AuditModifiedComments || []}\r\n                                                                                                        detailedFieldList={this.feildsForGrid}\r\n                                                                                                        extractedColumnList={this.feildsForGrid}\r\n                                                                                                        //dataResult={this.props.Login.masterData.AuditModifiedComments && this.props.Login.masterData.AuditModifiedComments.length > 0\r\n                                                                                                        // && process(this.props.Login.masterData.AuditModifiedComments, { skip: 0, take: 10 })}\r\n                                                                                                        // dataState={{ skip: 0, take: 10 }}\r\n                                                                                                        dataResult={this.props.Login.masterData.AuditModifiedComments && this.props.Login.masterData.AuditModifiedComments.length > 0\r\n                                                                                                            && process(this.props.Login.masterData.AuditModifiedComments, this.state.dataState ? this.state.dataState : { skip: 0, take: 10 })}\r\n                                                                                                        //dataState={{ skip: 0, take: 10 }}\r\n                                                                                                        dataState={this.state.dataState\r\n                                                                                                            ? this.state.dataState : { skip: 0, take: 10 }}\r\n                                                                                                        pageable={true}\r\n                                                                                                        scrollable={'scrollable'}\r\n                                                                                                        dataStateChange={this.dataResultStateChange}\r\n\r\n\r\n                                                                                                    />\r\n                                                                                                </>\r\n                                                                                            )\r\n                                                                                            :\r\n                                                                                            this.props.Login.screenName === 'IDS_ADHOCPARAMETER' ?\r\n                                                                                                this.props.Login.masterData.realSampleTypeValue.nclinicaltyperequired === transactionStatus.YES ?\r\n                                                                                                    <AddAdhocParameter\r\n                                                                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                                                                        onInputOnChange={this.onInputOnChange}\r\n                                                                                                        onComboChange={this.onComboChange}\r\n                                                                                                        adhocParamter={this.props.Login.masterData.AdhocParamter || {}}\r\n                                                                                                    //operation={this.props.operation}\r\n                                                                                                    /> : <ResultEntryAdhocParameter\r\n                                                                                                        selectedRecordAdhocParameter={this.props.Login.selectedRecordAdhocParameter || {}}\r\n                                                                                                        adhocParamter={this.props.Login.masterData.AdhocParamter || {}}\r\n                                                                                                        onSaveClick={this.onSaveClick}\r\n                                                                                                        onAdhocParameterInputChange={this.onAdhocParameterInputChange}\r\n                                                                                                        onAdhocParameterComboChange={this.onAdhocParameterComboChange}\r\n                                                                                                    />\r\n                                                                                                //  Start of ALPD-4132 Additional Filter Render Component ATE-241\r\n                                                                                                : this.props.Login.multiFilterLoad ?\r\n                                                                                                    <KendoDatatoolFilter\r\n                                                                                                        filter={this.props.Login.masterData['kendoFilterList'] || {\r\n                                                                                                            logic: \"and\",\r\n                                                                                                            filters: []\r\n                                                                                                        }}\r\n                                                                                                        handleFilterChange={this.handleFilterChange}\r\n                                                                                                        filterData={this.props.Login.masterData.kendoOptionList || []}\r\n                                                                                                        fields={this.props.Login.masterData[\"fields\"] || []}\r\n                                                                                                        userInfo={this.props.Login.userInfo}\r\n                                                                                                        static={true}\r\n                                                                                                        parentCallBack={this.parentCallBack}\r\n                                                                                                        needParentCallBack={true}\r\n                                                                                                    /> :\r\n                                                                                                    //ALPD-5367 Result Entry -> In the stored button was enable sub sample & sample.\r\n                                                                                                     this.props.Login.operation === 'MovesendToStore' ?\r\n                                                                                                <MoveToStoreage\r\n                                                                                                        selectedRecord={ this.props.Login.masterData.StoreDataRecord}\r\n                                                                                                        isSendToStore={true}\r\n                                                                                                 />\r\n                                                                                                    :\"\"\r\n\r\n                            //  End of ALPD-4132 Additional Filter render Component\r\n\r\n                        }\r\n                    />\r\n                    : \"\"}\r\n                {\r\n                    this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ?\r\n                        <TemplateForm\r\n                            templateData={this.props.Login.masterData.ChecklistData}\r\n                            nregtypecode={parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode)}\r\n                            nregsubtypecode={parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode)}\r\n                            needSaveButton={this.props.Login.needSaveButton}\r\n                            formRef={this.formRef}\r\n                            onTemplateInputChange={this.onTemplateInputChange}\r\n                            handleClose={this.closeModal}\r\n                            onTemplateComboChange={this.onTemplateComboChange}\r\n                            screenName={this.props.Login.screenName}\r\n                            onSaveClick={this.onSaveCheckList}\r\n                            Login={this.props.Login}\r\n                            viewScreen={this.props.Login.openTemplateModal}\r\n                            selectedRecord={this.state.selectedRecord || []}\r\n                            onTemplateDateChange={this.onTemplateDateChange}\r\n                            needValidation={true}\r\n                        /> : \"\"\r\n                }\r\n                {this.props.Login.modalShow ? (//ALPD-4870-To show the add popup to get input of filter name,done by Dhanushya RI\r\n                    <ModalShow\r\n                        modalShow={this.props.Login.modalShow}\r\n                        closeModal={this.closeModalShowForFilter}\r\n                        onSaveClick={this.onSaveModalFilterName}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        mandatoryFields={mandatoryFieldsFilter}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        modalTitle={this.props.Login.modalTitle}\r\n                        modalBody={\r\n                            this.props.Login.loadEsign ?\r\n                                <Esign\r\n                                    operation={this.props.Login.operation}\r\n                                    onInputOnChange={this.onEsignInputOnChange}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                />\r\n                                :\r\n\r\n                                <Col md={12}>\r\n                                    <FormTextarea\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_FILTERNAME\" })}\r\n                                        name={\"sfiltername\"}\r\n                                        // type=\"text\"\r\n                                        onChange={this.onInputOnChange}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_FILTERNAME\" })}\r\n                                        value={this.state.selectedRecord ? this.state.selectedRecord.sfiltername : \"\"}\r\n                                        isMandatory={true}\r\n                                        required={true}\r\n                                        maxLength={\"50\"}\r\n                                    />\r\n                                </Col>\r\n                        }\r\n                    />\r\n                )\r\n                    : (\r\n                        \"\"\r\n                    )}\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    defaultActions = (testChildGetREParam, RESelectedTest, RESelectedSample, setDefaultId, testskip, testtake) => {\r\n        const nregtypecode = this.props.Login.masterData.realRegTypeValue.nregtypecode;\r\n        const nregsubtypecode = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"completeTest\",\r\n                inputData: {\r\n                    'userinfo': this.props.Login.userInfo, 'nregtypecode': nregtypecode, 'nregsubtypecode': nregsubtypecode, 'ncontrolcode': setDefaultId,\r\n                    \"nneedReceivedInLab\": parseInt(this.props.Login.settings && this.props.Login.settings['43'])\r\n                },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"default\",\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: { ...testChildGetREParam, ncontrolcode: setDefaultId },\r\n                RESelectedTest: acceptTestList,\r\n                RESelectedSample: RESelectedSample,\r\n                ndesigntemplatemappingcode: parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode)\r\n\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, setDefaultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"defaultaction\",\r\n                        operation: \"default\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.defaultTest(inputParam.testChildGetREParam, acceptTestList, RESelectedSample, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTTEST\" }));\r\n        }\r\n\r\n    }\r\n    formulaCalculation = (dataItem) => {\r\n\r\n        let selectedSpec = getSameRecordFromTwoArrays(this.props.Login.masterData.RESelectedSample, this.props.Login.masterData.RegistrationParameter, \"npreregno\");\r\n        let stransactiontestcode = \"\";\r\n        let transactiontestcodeforvalidation = \"\";\r\n        this.props.Login.masterData.RESelectedTest.map(x => {\r\n            stransactiontestcode += x['ntransactiontestcode'] + \",\"\r\n        }\r\n        )\r\n        let inputData = {\r\n            \"ntransactiontestcode\": stransactiontestcode.substring(0, stransactiontestcode.length - 1),\r\n            \"ntransactionresultcode\": dataItem.ntransactionresultcode,\r\n            \"ntestgrouptestparametercode\": dataItem.ntestgrouptestparametercode,\r\n            \"nispredefinedformula\": dataItem.nispredefinedformula,\r\n            \"nroundingdigits\": dataItem.nroundingdigits,\r\n            \"npredefinedformulacode\": dataItem.npredefinedformulacode,\r\n            \"npreregno\": dataItem.npreregno,\r\n            \"nallottedspeccode\": selectedSpec[0].nallottedspeccode,\r\n            'userinfo': this.props.Login.userInfo,\r\n            'transactiontestcodeforvalidation': dataItem['ntransactiontestcode'],\r\n            'ncontrolcode': dataItem['ncontrolcode']\r\n        }\r\n        let inputParam = {\r\n            classUrl: 'resultentrybysample',\r\n            methodUrl: \"FormulaCalculation\",\r\n            inputData: inputData,\r\n            operation: \"update\",\r\n            screenName: \"formulacalculation\",\r\n            displayName: this.props.Login.inputParam.displayName//postParam\r\n\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n    completePopup = (testChildGetREParam, userInfo, completeResultId, testskip, testtake, validation) => {\r\n\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n\r\n\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {};\r\n            let array = [];\r\n            // let sectionflag = true; \r\n            // let tempsection = 0;\r\n            // let sectionvalue = 0;\r\n            // acceptTestList.forEach((item) => {\r\n            //     sectionvalue = item.nsectioncode;\r\n            //     if (sectionvalue !== tempsection && tempsection !== 0) {\r\n            //         sectionflag = false;\r\n            //     } else {\r\n            //         tempsection = sectionvalue;\r\n            //         if(!array.includes(tempsection)){\r\n            //             array.push(tempsection);\r\n            //         }\r\n\r\n            acceptTestList && acceptTestList.map((item) => {\r\n                if (!array.includes(item.nsectioncode)) {\r\n                    array.push(item.nsectioncode)\r\n                }\r\n            })\r\n\r\n\r\n            //if(sectionflag){\r\n            let Map = {\r\n                nregtypecode: testChildGetREParam.nregtypecode,\r\n                nregsubtypecode: testChildGetREParam.nregsubtypecode,\r\n                ncontrolcode: completeResultId,\r\n                nsectioncode: array.map(nsectioncode => nsectioncode).join(\",\"),\r\n                transactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                RESelectedTest: acceptTestList,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n                subSampleSkip: this.state.subSampleSkip,\r\n                subSampleTake: this.state.subSampleTake,\r\n                basedrulesengine: validation,\r\n                userinfo: userInfo,\r\n                // operation: 'CompletePopup',\r\n                \"nneedReceivedInLab\": parseInt(this.props.Login.settings && this.props.Login.settings['43'])\r\n\r\n            }\r\n            inputParam = {\r\n                inputData: Map,\r\n            }\r\n            this.props.CompletePopupAction(inputParam);\r\n            // }else {\r\n            //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMESECTIONTEST\" }));\r\n            // }\r\n\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCOMPLETE\" }));\r\n        }\r\n\r\n    }\r\n\r\n\r\n    completeActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake, validation) => {\r\n\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"completeTest\",\r\n                inputData: {\r\n                    'userinfo': this.props.Login.userInfo, 'ncontrolcode': completeResultId, 'nportalrequired': this.props.Login.masterData.realSampleTypeValue.nportalrequired,\r\n                    \"nneedReceivedInLab\": parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n                    \"ninsertMaterialInventoryTrans\": parseInt(this.props.Login.settings && this.props.Login.settings['53'])\r\n                },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"complete\",\r\n                postParamList: this.postParamList,\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: testChildGetREParam,\r\n                RESelectedTest: acceptTestList,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n                subSampleSkip: this.state.subSampleSkip,\r\n                subSampleTake: this.state.subSampleTake,\r\n                basedrulesengine: validation,\r\n                searchSampleRef: this.searchSampleRef,\r\n                searchSubSampleRef: this.searchSubSampleRef,\r\n                searchTestRef: this.searchTestRef,\r\n                nsettingcode: this.props.Login.settings && parseInt(this.props.Login.settings[45]) === transactionStatus.YES ? transactionStatus.YES : transactionStatus.NO,\r\n                nusercode: this.props.Login.settings && parseInt(this.props.Login.settings[45]) === transactionStatus.YES ? this.state.selectedRecordCompleteForm.nusercode.value : \"\",\r\n                susername: this.props.Login.settings && parseInt(this.props.Login.settings[45]) === transactionStatus.YES ? this.state.selectedRecordCompleteForm.nusercode.label : -1\r\n\r\n\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"complete\",\r\n                        operation: \"complete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.completeTest(inputParam, acceptTestList, userInfo, completeResultId, false, { basedrulesengine: validation })\r\n\r\n\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCOMPLETE\" }));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    testStartActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"testInitiated\",\r\n                inputData: {\r\n                    'userinfo': this.props.Login.userInfo, 'ncontrolcode': completeResultId, 'subSampleNeeded': this.props.Login.masterData.defaultRegistrationSubType.nneedsubsample, 'nneedmyjob': this.props.Login.masterData.defaultRegistrationSubType.nneedmyjob, 'nneedjoballocation': this.props.Login.masterData.defaultRegistrationSubType.nneedjoballocation, 'NeedJobAllocationAndMyjob': parseInt(this.props.Login.settings[41]),\r\n                    \"nneedReceivedInLab\": parseInt(this.props.Login.settings && this.props.Login.settings['43']),\r\n                    \"nneedtestinitiate\": this.props.Login.masterData.defaultRegistrationSubType.nneedtestinitiate\r\n                },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"testinitiate\",\r\n                postParamList: this.postParamList,\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: testChildGetREParam,\r\n                RESelectedTest: acceptTestList,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                progressTimerStart: true,\r\n                testtake: this.state.testtake,\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"complete\",\r\n                        operation: \"complete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.testStart(inputParam, acceptTestList, userInfo, completeResultId)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOINITIATE\" }));\r\n        }\r\n    }\r\n\r\n    //ALPD-4156--Vignesh R(15-05-2024)-->Result Entry - Option to change section for the test(s)\t\r\n    getSectionChange(controlcode, testskip, testtake, operation) {\r\n        if (this.props.Login.masterData.RESelectedTest.length > 0) {\r\n            let testList = [];\r\n            if (this.props.Login.masterData.searchedTest !== undefined) {\r\n                testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.searchedTest.slice(testskip, testskip + testtake), \"ntransactiontestcode\");\r\n\r\n            } else {\r\n                testList = this.props.Login.masterData.RE_TEST && this.props.Login.masterData.RE_TEST.slice(testskip, testskip + testtake);\r\n\r\n            }\r\n            let selectedTestList = getSameRecordFromTwoArrays(testList || [], this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n            let array = [];\r\n            let tempsection = 0;\r\n            let sectionvalue = 0;\r\n            let sectionflag = true;\r\n            selectedTestList.forEach((item) => {\r\n                sectionvalue = item.nsectioncode;\r\n                if (sectionvalue !== tempsection && tempsection !== 0) {\r\n                    sectionflag = false;\r\n                } else {\r\n                    tempsection = sectionvalue;\r\n                }\r\n            });\r\n            selectedTestList && selectedTestList.map((item) => {\r\n                if (!array.includes(item.nsectioncode)) {\r\n                    array.push(item.nsectioncode)\r\n                }\r\n            })\r\n\r\n            if (sectionflag) {\r\n                let inputParam = {};\r\n                let Map = {\r\n                    nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.realDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion.napprovalversioncode,\r\n                    nsectioncode: array.map(nsectioncode => nsectioncode).join(\",\"),\r\n                    npreregno: selectedTestList ? selectedTestList.map(sample => sample.npreregno).join(\",\") : \"\",\r\n                    ntransactionsamplecode: selectedTestList ? selectedTestList.map(subsample => subsample.ntransactionsamplecode).join(\",\") : \"\",\r\n                    ntransactiontestcode: selectedTestList ? selectedTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                    nselectedtestcode: selectedTestList ? selectedTestList.map(sample => sample.ntestcode).join(\",\") : \"\",\r\n                    ncontrolcode: controlcode,\r\n                    nneedsubsample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    operation: operation,\r\n                    screenName: \"IDS_SECTION\",\r\n                };\r\n                inputParam = {\r\n                    inputData: Map, selectedRecord: this.state.selectedRecord\r\n                }\r\n                this.props.getSectionChange(inputParam);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMESECTIONTEST\" }));\r\n\r\n            }\r\n        }\r\n\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }));\r\n\r\n        }\r\n    }\r\n\r\n    onSaveCheckList = (selectedRecord, userInfo, nregtypecode, nregsubtypecode) => {\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            let inputParam = {\r\n                \"inputData\": { userinfo: userInfo }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: {\r\n                        selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode,\r\n                        operation: \"updatechecklist\", inputParam,\r\n                    },\r\n                    openModal: true,\r\n                    operation: \"updatechecklist\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode)\r\n        }\r\n\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        if (this.props.Login.operation === 'testinitiate' || this.props.Login.operation === 'complete' || this.props.Login.operation === 'default' || this.props.Login.operation === \"updatechecklist\" ||\r\n            this.props.Login.operation === 'deleteInstrument' || this.props.Login.operation === 'createMethod' || this.props.Login.operation === 'deleteTask' || this.props.Login.operation === 'updateParameterComments' ||\r\n            this.props.Login.operation === 'import' || this.props.Login.operation === 'updateSection') {\r\n            this.props.validateEsignCredentialComplete(inputParam, \"openModal\");\r\n        }\r\n\r\n        else {\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n    onChildDataChange = (childData) => {\r\n        if (this.props.Login.screenName === 'IDS_MATERIAL') {\r\n            this.setState({ selectedRecordMaterialForm: { ...childData }, isMaterialInitialRender: false })\r\n        } else if (this.props.Login.screenName === 'IDS_RESULTENTRYCOMPLETE') {\r\n            this.setState({ selectedRecordCompleteForm: { ...childData }, isCompleteInitialRender: false })\r\n        } else if (this.props.Login.screenName === 'IDS_INSTRUMENT') {\r\n            this.setState({ selectedRecordInstrumentForm: { ...childData }, isInstrumentInitialRender: false })\r\n        }\r\n    }\r\n    onInputOnChange = (event, name) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        switch (name) {\r\n            case 'ntestgroupmaterial':\r\n                const ntestgrouptestcode = selectedRecord.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1\r\n                this.props.getREMaterialComboGet({ ntestgroupmaterial: selectedRecord.ntestgroupmaterial, ntestgrouptestcode, RESelectedTest: this.props.Login.masterData.RESelectedTest, test: this.props.Login.masterData.RESelectedTest[0], userInfo: this.props.Login.userInfo })\r\n                break;\r\n            default:\r\n                this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onSaveFileClick = (saveType, formRef) => {\r\n        const selectedImportFile = this.props.Login.masterData.selectedImportFile;\r\n        const acceptedFile = selectedImportFile ? selectedImportFile.sfilename : [];\r\n        const formData = new FormData();\r\n\r\n        if (acceptedFile && acceptedFile.length > 0) {\r\n            acceptedFile.forEach((file, index) => {\r\n                formData.append(\"uploadedFile\", file);\r\n            });\r\n            formData.append(\"filecount\", acceptedFile.length);\r\n        } else {\r\n            return toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEFILETOSUBMIT\" }))\r\n        }\r\n\r\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"nregtypecode\", this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n        formData.append(\"nregsubtypecode\", this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n        formData.append(\"ndesigntemplatemappingcode\", this.props.Login.masterData && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n        formData.append(\"ncontrolcode\", this.props.Login.importId);\r\n        formData.append(\"ntransactiontestcode\", this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : -1);\r\n        //formData.append(\"ntestgrouptestcode\", this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntestgrouptestcode).join(\",\") : -1);  //Commented by sonia on 05th jan 2025 for jira id:ALPD-5174\r\n\r\n\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            screenName: \"IDS_RESULTIMPORTFILE\",\r\n\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData, },\r\n                    openModal: true, screenName: \"IDS_RESULTIMPORTFILE\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.resultImportFile(inputParam, this.props.Login.masterData);\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClickAdhocParam = (saveType) => {\r\n        if (Object.keys(this.state.selectedRecord).length > 0) {\r\n\r\n            let Map = {};\r\n            let testParameter = [];\r\n            this.state.selectedRecord && this.state.selectedRecord.nparamtercode.forEach((data, index) =>\r\n                testParameter.push(data.item));\r\n\r\n            Map[\"ntestparametercode\"] = testParameter.map(ntestgroupparamtercode => ntestgroupparamtercode.item.ntestparametercode).join(\",\");\r\n            Map[\"ntestgrouptestcode\"] = testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestgrouptestcode).join(\",\");\r\n            Map[\"ntestcode\"] = testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestcode).join(\",\");\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"npreregno\"] = this.props.Login.adhocpreregno;\r\n            Map[\"ntransactiontestcode\"] = this.props.Login.adhoctransactiontestcode;\r\n            Map[\"masterData\"] = this.props.Login.masterData;\r\n            Map[\"multiselecttransactiontestcode\"] = this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\");\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData.nneedsubsample;\r\n            let inputParam = {\r\n                inputData: Map,\r\n                action: 'createAdhocParameter',\r\n                operation: \"create\",\r\n                methodUrl: \"AdhocParamter\",\r\n                classUrl: \"resultentrybysample\"\r\n\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.adhocId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"IDS_ADHOCPARAMETER\",\r\n                        operation: \"adhocTestParameter\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.createAdhocParamter(inputParam);\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" }))\r\n        }\r\n    }\r\n    onsaveClickAdhocparameter = (saveType) => {\r\n        if (this.state.selectedRecordAdhocParameter && this.state.selectedRecordAdhocParameter.nparamtercode && this.state.selectedRecordAdhocParameter.nparamtercode.length > 0) {\r\n            let Map = {};\r\n            let testParameter = [];\r\n            this.state.selectedRecordAdhocParameter && this.state.selectedRecordAdhocParameter.nparamtercode.forEach((data, index) =>\r\n                testParameter.push(data.item));\r\n\r\n            Map[\"ntestparametercode\"] = testParameter.map(ntestgroupparamtercode => ntestgroupparamtercode.item.ntestparametercode).join(\",\");\r\n            Map[\"ntestgrouptestcode\"] = this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode\r\n            //testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestgrouptestcode).join(\",\");\r\n            Map[\"ntestcode\"] = testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestcode).join(\",\");\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"npreregno\"] = this.props.Login.adhocpreregno;\r\n            Map[\"ntransactiontestcode\"] = this.props.Login.adhoctransactiontestcode;\r\n            Map[\"masterData\"] = this.props.Login.masterData;\r\n            Map[\"multiselecttransactiontestcode\"] = this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\");\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData.nneedsubsample;\r\n            Map[\"nisvisible\"] = this.state.selectedRecordAdhocParameter && this.state.selectedRecordAdhocParameter.nvisibleadhocparameter === transactionStatus.YES ? transactionStatus.YES : transactionStatus.NO;\r\n            Map[\"nclinicaltyperequired\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nclinicaltyperequired\r\n            let inputParam = {\r\n                inputData: Map,\r\n                action: 'createAdhocTestParamter',\r\n                operation: \"create\",\r\n                methodUrl: \"AdhocTestParamter\",\r\n                classUrl: \"resultentrybysample\",\r\n                selectedRecord: { ...this.state.selectedRecordAdhocParameter || {} }\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.adhocId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"IDS_ADHOCPARAMETER\",\r\n                        operation: \"adhocTestParameter\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.createAdhocTestParamter(inputParam);\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" }))\r\n        }\r\n    }\r\n    onDropFile = (acceptedFile) => {\r\n        this.props.Login.masterData.selectedImportFile['sfilename'] = acceptedFile\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData: this.props.Login.masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFormulaInputChange = (event, index, fields) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        let selectedForumulaInput = this.state.selectedRecord.selectedForumulaInput || [];\r\n        let selectedMandatory = this.state.selectedRecord.selectedMandatory || [];\r\n        let dynamicformulafields = {};\r\n\r\n        if (event) {\r\n            if (fields.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER) {\r\n                const value = event.target.value.replace(/[^-^0-9]/g, '');\r\n                if (/^-?\\d*?$/.test(value) || value === \"\") {\r\n                    if (this.state.selectedRecord.formulainput) {\r\n                        dynamicformulafields.svalues = value;\r\n                        dynamicformulafields.sparameter = fields.sdescription;\r\n                        selectedForumulaInput[index] = dynamicformulafields;\r\n                        selectedMandatory[index] = event.target.value;\r\n                    }\r\n                }\r\n                selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\r\n                selectedRecord[\"selectedMandatory\"] = selectedMandatory;\r\n\r\n                this.setState({ selectedRecord: selectedRecord });\r\n            } else {\r\n                const value = event.target.value.replace(/[^-^0-9.]/g, '');\r\n                if (/^-?\\d*?\\.?\\d*?$/.test(value) || value === \"\") {\r\n                    if (this.state.selectedRecord.formulainput) {\r\n                        dynamicformulafields.svalues = value;\r\n                        dynamicformulafields.sparameter = fields.sdescription;\r\n                        selectedForumulaInput[index] = dynamicformulafields;\r\n                        selectedMandatory[index] = event.target.value;\r\n                    }\r\n                }\r\n                selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\r\n                selectedRecord[\"selectedMandatory\"] = selectedMandatory;\r\n\r\n                this.setState({ selectedRecord: selectedRecord });\r\n            }\r\n        }\r\n    }\r\n\r\n    onTemplateInputChange = (event, control) => {\r\n        let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onTemplateComboChange = (comboData, control) => {\r\n        let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onTemplateDateChange = (dateData, control) => {\r\n        let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    viewAdditionalInfo = (currentAlertResultCode) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        let additionalInfo = selectedRecord['additionalInfo'];\r\n        let showAlertGrid = this.props.Login.showAlertGrid;\r\n        let additionalInfoView = this.props.Login.additionalInfoView\r\n        if (additionalInfo[currentAlertResultCode]) {\r\n            showAlertGrid = true;\r\n            additionalInfoView = true;\r\n            selectedRecord['additionalResultData'] = additionalInfo[currentAlertResultCode]\r\n        }\r\n        // this.setState({selectedRecord,additionalInfoView});\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedRecord: selectedRecord, showAlertGrid, additionalInfoView }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onModalSave = () => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        let currentAlertResultCode = this.state.currentAlertResultCode || 0;\r\n        let currentntestgrouptestpredefcode = this.state.currentntestgrouptestpredefcode || 0;\r\n        let bool = this.state.selectedRecord.ResultParameter.some(x => x['ntransactionresultcode'] === currentAlertResultCode)\r\n        if (bool) {\r\n            this.state.selectedRecord.ResultParameter.map(Parameter => {\r\n                if (Parameter['ntransactionresultcode'] === currentAlertResultCode) {\r\n                    Parameter['additionalInfoUidata'] = { ntestgrouptestpredefsubcode: selectedRecord['ntestgrouptestpredefsubcode'] }\r\n                    if (selectedRecord['ntestgrouptestpredefsubcode']) {\r\n                        if (typeof selectedRecord['ntestgrouptestpredefsubcode'] === 'string') {\r\n                            Parameter['additionalInfo'] = selectedRecord['ntestgrouptestpredefsubcode']\r\n                        } else {\r\n                            Parameter['additionalInfo'] = \"\"\r\n                            // selectedRecord['ntestgrouptestpredefsubcode'].map(x=>{ \r\n                            //     Parameter['additionalInfo']+= x.label+\",\"  \r\n                            // }).join('\\n')\r\n                            Parameter['additionalInfo'] = selectedRecord['ntestgrouptestpredefsubcode'].map(x => x.label + \",\").join('\\n')\r\n                            Parameter['additionalInfo'] = Parameter['additionalInfo'].substring(0,\r\n                                Parameter['additionalInfo'].length - 1)\r\n                        }\r\n                    } else {\r\n                        Parameter['additionalInfo'] = \"\"\r\n                        Parameter['additionalInfoUidata'] && delete Parameter['additionalInfoUidata']\r\n                    }\r\n                    Parameter['ntestgrouptestpredefcode'] = currentntestgrouptestpredefcode\r\n                }\r\n            }\r\n            );\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedRecord: selectedRecord, showAlertGrid: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    onskiprule = () => {\r\n        const startDate = (this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date());\r\n        const endDate = (this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date());\r\n\r\n        // let obj = this.covertDatetoString(startDate, endDate)\r\n        let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\r\n\r\n        const fromDate = obj.fromDate;\r\n        const toDate = obj.toDate;\r\n        const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode;\r\n        let testChildGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\r\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample && sample.ntransactionsamplecode).join(\",\"),\r\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n            fromdate: fromDate,\r\n            todate: toDate,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\r\n            //activeTabIndex: this.state.enableAutoClick ? this.state.activeTabIndex : this.state.activeTabIndex ? this.state.activeTabIndex : 1,\r\n            nworlistcode: (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n            nbatchmastercode: (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n        }\r\n\r\n        this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake, 4)\r\n    }\r\n\r\n    ontaskInputChange = (Data, name) => {\r\n        const selectedRecordTaskForm = this.state.selectedRecordTaskForm || [];\r\n        selectedRecordTaskForm[name] = Data.target.value;\r\n        this.setState({ selectedRecordTaskForm: { ...selectedRecordTaskForm }, isTaskInitialRender: false });\r\n    }\r\n    ontaskNumericChange = (numericData, numericName) => {\r\n        const selectedRecordTaskForm = this.state.selectedRecordTaskForm || [];\r\n        if (numericData) {\r\n            if (numericName !== \"scomments\") {\r\n                selectedRecordTaskForm[numericName] = numericData;\r\n            } else {\r\n                selectedRecordTaskForm[numericName] = numericData.target.value;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecordTaskForm[numericName] = \"\";\r\n        }\r\n        this.setState({ selectedRecordTaskForm: { ...selectedRecordTaskForm }, isTaskInitialRender: false });\r\n    }\r\n    onAdhocParameterInputChange = (Data, name) => {\r\n        const selectedRecordAdhocParameter = { ...this.state.selectedRecordAdhocParameter } || [];\r\n        selectedRecordAdhocParameter[name] = Data.target.checked === true ? transactionStatus.YES : transactionStatus.NO;;\r\n        this.setState({ selectedRecordAdhocParameter: { ...selectedRecordAdhocParameter }, isAdhocParameterInitialRender: false });\r\n\r\n    }\r\n    onAdhocParameterComboChange = (comboData, comboName) => {\r\n        const selectedRecordAdhocParameter = { ...this.state.selectedRecordAdhocParameter } || [];\r\n        if (comboData) {\r\n            selectedRecordAdhocParameter[comboName] = comboData;\r\n        } else {\r\n            selectedRecordAdhocParameter[comboName] = []\r\n        }\r\n        this.setState({ selectedRecordAdhocParameter: { ...selectedRecordAdhocParameter }, isAdhocParameterInitialRender: false });\r\n    }\r\n\r\n\r\n\r\n    onInputChange = (Data, name) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        let currentAlertResultCode = this.state.currentAlertResultCode || 0;\r\n        if (Data) {\r\n            if (name === 'ntestgrouptestpredefsubcode') {\r\n                // if(!selectedRecord['additionalInfo']){\r\n                //     selectedRecord['additionalInfo']=[] \r\n                // } \r\n                // if(selectedRecord['additionalInfo']){\r\n                //     selectedRecord['additionalInfo'][currentAlertResultCode]= Data.target.value\r\n                // } \r\n                // let bool=this.state.selectedRecord.ResultParameter.some(x=>x['ntransactionresultcode']===currentAlertResultCode) \r\n                // if(bool){\r\n                //   this.state.selectedRecord.ResultParameter.map(Parameter=>\r\n                //       {\r\n                //           if(Parameter['ntransactionresultcode']===currentAlertResultCode){\r\n                //               Parameter[\"jsondata\"]={};\r\n                //               Parameter['additionalInfo']=selectedRecord['additionalInfo'][currentAlertResultCode]\r\n                //             //   Parameter[\"jsondata\"] = { \r\n                //             //       ...Parameter[\"jsondata\"],\r\n                //             //       additionalInfo:selectedRecord['additionalInfo'][currentAlertResultCode]\r\n                //             //   }\r\n                //           }\r\n                //       }\r\n                //       );  \r\n                // }\r\n                //  selectedRecord[name] = Data.target.value;\r\n            }\r\n            //else{\r\n            selectedRecord[name] = Data.target.value;\r\n            //  } \r\n        }\r\n        else {\r\n            selectedRecord[name] = [];\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericChange = (numericData, numericName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (numericData) {\r\n            if (numericName !== \"scomments\") {\r\n                selectedRecord[numericName] = numericData;\r\n            } else {\r\n                selectedRecord[numericName] = numericData.target.value;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[numericName] = \"\";\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onDateChange = (dateName, dateValue) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        selectedRecord[dateName] = dateValue;\r\n        if (dateName === \"dfromdate\" || dateName === \"dtodate\") {\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    headerSelectionChange = (event) => {\r\n        const checked = event.syntheticEvent.target.checked;\r\n        let meanTestParameterList = this.state.meanTestParameterList || [];\r\n        let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\r\n        if (checked) {\r\n            const data = meanTestParameterList.map(item => {\r\n                item.selected = checked;\r\n                selectedMeanTestParam.set(item.ntransactionresultcode, item.sresult);\r\n                return item;\r\n            });\r\n\r\n            let selectedTestParam = \"\";\r\n            let selectedTestParamMean = 0;\r\n            let size = 0;\r\n            if (selectedMeanTestParam.size > 0) {\r\n                [...selectedMeanTestParam.values()].forEach(item => (\r\n                    item !== null && item !== \"\" ?\r\n                        (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item,\r\n                            size = size + 1,\r\n                            selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\"\r\n                ));\r\n                selectedTestParamMean = selectedTestParamMean / size;\r\n            }\r\n\r\n            this.setState({\r\n                meanTestParameterList: data, selectedMeanTestParam, selectedTestParam,\r\n                testMean: selectedTestParamMean,\r\n                selectAll: checked\r\n            });\r\n        }\r\n        else {\r\n            const data = meanTestParameterList.map(item => {\r\n                item.selected = checked;\r\n                return item;\r\n            });\r\n\r\n            this.setState({\r\n                meanTestParameterList: data, selectedMeanTestParam: new Map(),\r\n                selectedTestParam: \"\",\r\n                testMean: \"\",\r\n                selectAll: checked\r\n            });\r\n        }\r\n    }\r\n\r\n    selectionChange = (event) => {\r\n        let meanTestParameterList = this.state.meanTestParameterList || [];\r\n        let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\r\n        meanTestParameterList.map(item => {\r\n            if (item.ntransactionresultcode === event.dataItem.ntransactionresultcode) {\r\n                item.selected = !event.dataItem.selected;\r\n            }\r\n            return item;\r\n        });\r\n        if (event.dataItem.selected) {\r\n            selectedMeanTestParam.set(event.dataItem.ntransactionresultcode, event.dataItem.sresult);\r\n        }\r\n        else {\r\n            if (selectedMeanTestParam.has(event.dataItem.ntransactionresultcode)) {\r\n                selectedMeanTestParam.delete(event.dataItem.ntransactionresultcode)\r\n            }\r\n        }\r\n        let selectedTestParam = \"\";\r\n        let selectedTestParamMean = 0;\r\n        let size = 0;\r\n        if (selectedMeanTestParam.size > 0) {\r\n            [...selectedMeanTestParam.values()].forEach(item => (\r\n                item !== null && item !== \"\" ?\r\n                    (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item,\r\n                        size = size + 1,\r\n                        selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\"\r\n            ));\r\n            selectedTestParamMean = selectedTestParamMean / size;\r\n        }\r\n        this.setState({\r\n            meanTestParameterList, selectedMeanTestParam, selectedTestParam, testMean: selectedTestParamMean,\r\n            selectAll: this.valiateCheckAll(meanTestParameterList)\r\n        });\r\n    }\r\n\r\n    valiateCheckAll(data) {\r\n        let selectAll = true;\r\n        if (data && data.length > 0) {\r\n            data.forEach(dataItem => {\r\n                if (dataItem.selected) {\r\n                    if (dataItem.selected === false) {\r\n                        selectAll = false;\r\n                    }\r\n                }\r\n                else {\r\n                    selectAll = false;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            selectAll = false;\r\n        }\r\n        return selectAll;\r\n    }\r\n\r\n    onMeanComboChange = (comboData, comboName) => {\r\n        const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\r\n        selectedMeanTestParam[comboName] = comboData[0];\r\n        let data = \"\";\r\n        if (selectedMeanTestParam[\"parametervalue\"] === undefined) {\r\n            data = comboData[0].value;\r\n        }\r\n        else {\r\n            data = selectedMeanTestParam[\"parametervalue\"] + \"+\" + comboData[0].value;\r\n        }\r\n        selectedMeanTestParam[\"parametervalue\"] = data;\r\n        this.setState({ selectedMeanTestParam });\r\n    }\r\n\r\n    onMaterialComboChange = (comboData, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        const ntestgrouptestcode = selectedRecord.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1;\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n            //this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n            //this.setState({ selectedRecord });\r\n        }\r\n        switch (comboName) {\r\n            case 'nmaterialtypecode':\r\n                this.props.getREMaterialCategoryByType({ ntestgrouptestcode, selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            case 'nmaterialcatcode':\r\n                selectedRecord['nsectioncode'] = selectedRecord.nmaterialcatcode.item.needSectionwise == transactionStatus.YES ?\r\n                    this.props.Login.masterData.RESelectedTest[0].nsectioncode : -1;\r\n                this.props.getREMaterialByCategory({ ntestgrouptestcode, selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            case 'nmaterialcode':\r\n                this.props.getREMaterialInvertoryByMaterial({ ntestgrouptestcode, selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            default:\r\n                this.props.getAvailableMaterialQuantity({ ntestgrouptestcode, selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        let currentAlertResultCode = this.state.currentAlertResultCode || 0;\r\n        if (comboData) {\r\n            // if(comboName==='ntestgrouptestpredefsubcode'){\r\n\r\n            //     if(!selectedRecord['additionalInfo']){\r\n            //         selectedRecord['additionalInfo']=[] \r\n            //     }  \r\n            //         selectedRecord['additionalInfo'][currentAlertResultCode]=\"\"\r\n            //         comboData.map(x=>{ \r\n            //             selectedRecord['additionalInfo'][currentAlertResultCode]+= x.label+\",\"//+<br/> \r\n            //         })\r\n            //         selectedRecord['additionalInfo'][currentAlertResultCode]=selectedRecord['additionalInfo'][currentAlertResultCode].substring(0,\r\n            //             selectedRecord['additionalInfo'][currentAlertResultCode].length-1) \r\n            // } \r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n\r\n    onChange = (comboData, fieldName, caseNo) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const selectedsubcode = [];\r\n        if (comboData !== null) {\r\n            switch (caseNo) {\r\n\r\n                case 1:\r\n                    selectedRecord[fieldName] = comboData;\r\n                    delete selectedRecord[\"ResultParameter\"];\r\n\r\n                    this.setState({ selectedsubcode })\r\n                    this.props.resultEntryGetComponent(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo, this.props.Login.ncontrolcode, this.state.testskip, this.state.testtake)\r\n                    break;\r\n                case 2:\r\n                    selectedRecord[fieldName] = comboData;\r\n                    delete selectedRecord[\"ResultParameter\"];\r\n                    this.setState({ selectedsubcode })\r\n                    this.props.resultEntryGetParameter(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo, this.props.Login.ncontrolcode, this.state.testskip, this.state.testtake)\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        // else {\r\n        //   if (selectedRecord[\"nsectioncode\"]) {\r\n        //     delete selectedRecord[\"nsectioncode\"];\r\n        //     delete selectedRecord[\"nusercode\"];\r\n\r\n        //   }\r\n        //   const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord,selectedsubcode:undefined }\r\n        //   }\r\n        //   this.props.updateStore(updateInfo);\r\n        // }\r\n    };\r\n\r\n    onGradeEvent = (ResultParameter, index, parameter) => {\r\n        if (ResultParameter.length > 0 && ResultParameter[index] !== undefined && ResultParameter[index].sresult !== null) {\r\n            let selectedRecord = this.state.selectedRecord || [];\r\n            let selectedResultGrade = this.state.selectedRecord.selectedResultGrade || [];\r\n            if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n                selectedResultGrade[index] = {\r\n                    ngradecode: ResultParameter[index].sresult !== \"\" ?\r\n                        numericGrade(parameter, numberConversion(parseFloat(ResultParameter[index].sresult), parseInt(parameter.nroundingdigits))) : -1\r\n                };\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n                if (ResultParameter[index].sresult !== null) {\r\n                    selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: 0 };\r\n                }\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n                if (ResultParameter[index].sresult !== null && ResultParameter[index].sresult.trim() !== \"\") {\r\n                    //selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\r\n                    selectedResultGrade[index] = { ngradecode: 4 };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: -1 };\r\n                }\r\n            }\r\n            //this.props.Login.masterData[\"selectedResultGrade\"] = selectedResultGrade;\r\n            selectedRecord.selectedResultGrade = selectedResultGrade;\r\n\r\n            this.setState({\r\n                selectedRecord\r\n            });\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { masterData: this.props.Login.masterData }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let { testskip, testtake } = this.state\r\n        let testList = [...this.props.Login.masterData.RE_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, selectedTestList);\r\n        }\r\n        if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n        if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n\r\n\r\n        if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subSampleTake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        }\r\n    }\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let { testskip, testtake, skip, take } = this.state\r\n        let testList = [...this.props.Login.masterData.RE_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let sampleList = [...this.props.Login.masterData.RE_SAMPLE];\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestAttachment(saveParam, selectedTestList);\r\n        }\r\n\r\n        else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.RESelectedSubSample);\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n        }\r\n    }\r\n\r\n    onKeyPress = (event, index, paremterResultcode) => {\r\n        if (event.keyCode === 13) {\r\n            for (let i = 0; i < event.target.form.elements.length; i++) {\r\n                if (parseInt(event.target.form.elements[i].id) === paremterResultcode[index + 1]) {\r\n                    event.target.form.elements[i].focus();\r\n                    break;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    onResultInputChange = (parameterResults) => {\r\n        this.setState({\r\n            parameterResults: [...parameterResults],\r\n            isParameterInitialRender: false\r\n            // currentAlertResultCode,\r\n            //  currentntestgrouptestpredefcode\r\n        });\r\n    }\r\n\r\n    onSampleAdd = (selectedsubcode) => {\r\n        this.setState({\r\n            selectedsubcode: [...selectedsubcode],\r\n            isaddSampleRender: false\r\n            // currentAlertResultCode,\r\n            //  currentntestgrouptestpredefcode\r\n        });\r\n    }\r\n\r\n    // onResultInputChange = (event, index, parameter) => {\r\n    //     //let ResultParameter = this.props.Login.masterData.ResultParameter ? this.props.Login.masterData.ResultParameter : [];\r\n    //     let selectedRecord = this.state.selectedRecord || [];\r\n    //     let ResultParameter = this.state.selectedRecord.ResultParameter ? this.state.selectedRecord.ResultParameter : [];\r\n    //     let sresult = \"\";\r\n    //     let sfinal = \"\";\r\n    //     let sresultpredefinedname= \"\";\r\n    //     let salertmessage = \"\";\r\n    //     let sresultcomment = \"\";\r\n    //     let value = -1;\r\n    //     let acceptedFile = [];\r\n    //     let ncalculatedresult; \r\n    //     let currentAlertResultCode=0;\r\n    //     let currentntestgrouptestpredefcode=0;\r\n    //     let inputData={}\r\n    //     if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n    //         if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\r\n    //             sresult = event.target.value;\r\n    //             ncalculatedresult = 4\r\n    //         } else {\r\n    //             sresult = ResultParameter[index]['sresult'] === null ? \"\" : ResultParameter[index]['sresult'];\r\n    //             ncalculatedresult = ResultParameter[index]['ncalculatedresult'];\r\n    //         }\r\n    //     }\r\n    //     if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n    //          currentAlertResultCode= event.item.ntransactionresultcode ;\r\n    //          currentntestgrouptestpredefcode= event.item.ntestgrouptestpredefcode ;\r\n    //         if (event != null) {\r\n    //             sresult = event.item.spredefinedname;\r\n    //             sresultpredefinedname = event.item.sresultpredefinedname;\r\n    //             sfinal=event.item.spredefinedsynonym\r\n    //             value = event.item.ngradecode;\r\n    //             salertmessage=event.item.salertmessage?event.item.salertmessage:\"\";\r\n    //             sresultcomment= event.item.spredefinedcomments?event.item.spredefinedcomments:\"\";\r\n    //             ncalculatedresult = 4; \r\n    //         }\r\n    //         else {\r\n    //             sresult = \"\";\r\n    //             sfinal = \"\";\r\n    //             sresultpredefinedname= \"\";\r\n    //             value = -1;\r\n    //             ncalculatedresult = 4\r\n    //         }\r\n    //         inputData={\r\n    //             'ntestgrouptestpredefcode':event.item.ntestgrouptestpredefcode,\r\n    //             'salertmessage':salertmessage,\r\n    //             'nneedresultentryalert':event.item.nneedresultentryalert,\r\n    //             'nneedsubcodedresult':event.item.nneedsubcodedresult\r\n    //         }\r\n    //         // ResultParameter[index]['additionalInfo']&& delete ResultParameter[index]['additionalInfo'] \r\n    //         // ResultParameter[index]['additionalInfo']&& delete ResultParameter[index]['additionalInfoUidata']  \r\n    //         if(event.item.nneedresultentryalert===transactionStatus.NO&&\r\n    //             event.item.nneedsubcodedresult===transactionStatus.NO){\r\n    //                 if(ResultParameter[index]['additionalInfo']){ \r\n    //                     ResultParameter[index]['additionalInfo']=\"\" \r\n    //                 } \r\n    //                 if(ResultParameter[index]['additionalInfoUidata']){  \r\n    //                     ResultParameter[index]['additionalInfoUidata']=\"\" \r\n    //                 } \r\n    //             }\r\n\r\n    //     }\r\n    //     if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n    //         sresult = event.target.value;\r\n    //         if (event.target.value.trim() === \"\")\r\n    //             ncalculatedresult = -1;\r\n    //         else\r\n    //             ncalculatedresult = 4;\r\n    //     }\r\n    //     if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\r\n    //         sresult = event[0] && event[0].name;\r\n    //         sfinal= event;\r\n    //         ncalculatedresult = 4\r\n    //     }\r\n    //     ResultParameter[index]['sresult'] = sresult\r\n    //     ResultParameter[index]['sfinal'] = sfinal\r\n    //     ResultParameter[index]['sresultpredefinedname'] = sresultpredefinedname\r\n    //     ResultParameter[index]['sresultcomment'] = sresultcomment\r\n    //     ResultParameter[index]['salertmessage'] = salertmessage\r\n    //     ResultParameter[index]['acceptedFile'] = acceptedFile\r\n    //     ResultParameter[index]['editable'] = true\r\n    //     ResultParameter[index]['ngradecode'] = value\r\n    //     ResultParameter[index]['ncalculatedresult'] = ncalculatedresult \r\n\r\n    //     // this.props.Login.masterData.ResultParameter = ResultParameter;\r\n    //     selectedRecord.ResultParameter = ResultParameter\r\n    //     if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n    //         this.props.getPredefinedData(inputData,selectedRecord,currentAlertResultCode,this.props.Login.masterData) \r\n    //     }\r\n    //     this.setState({\r\n    //         selectedRecord: selectedRecord,\r\n    //         currentAlertResultCode,\r\n    //         currentntestgrouptestpredefcode\r\n    //     });\r\n\r\n    //     // const updateInfo = {\r\n    //     //     typeName: DEFAULT_RETURN,\r\n    //     //     data: { masterData: this.props.Login.masterData }\r\n    //     // }\r\n    //     // this.props.updateStore(updateInfo);\r\n    // }\r\n\r\n    updateTestMethodSource(inputData, masterData, ncontrolcode) {\r\n        let inputParam = {\r\n\r\n            inputData: { ...inputData, 'userinfo': this.props.Login.userInfo, ncontrolcode },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"createMethod\",\r\n            screenName: \"IDS_TESTMETHODSOURCE\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //inputData1: inputData,\r\n            masterData: masterData\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    //screenName: \"completeaction\",\r\n                    operation: \"createMethod\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateTestMethodSource(inputData, masterData)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    updateParameterComments(inputData, masterData, ncontrolcode) {\r\n        // let inputData1 = { ...inputData, ncontrolcode }\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n        inputData = { ...inputData, ndesigntemplatemappingcode: ndesigntemplatemappingcode }\r\n        let inputParam = {\r\n            inputData: { ...inputData, ncontrolcode, 'userinfo': this.props.Login.userInfo },\r\n            operation: this.props.Login.operation,\r\n            screenName: \"IDS_RESULT\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //inputData: inputData1,\r\n            masterData: masterData\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    //screenName: \"completeaction\",\r\n                    operation: \"updateParameterComments\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateParameterComments(inputData, masterData)\r\n        }\r\n    }\r\n\r\n    onSaveMean = (saveType) => {\r\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n\r\n        let resultParameter = this.props.Login.selectedTestParameterMean || {};\r\n        //let resultParameter = { };\r\n\r\n        resultParameter[\"ncalculatedresult\"] = 4;\r\n        resultParameter[\"sresult\"] = this.state.testMean;\r\n        resultParameter[\"sfinal\"] = numberConversion(parseFloat(this.state.testMean), parseInt(resultParameter.nroundingdigit));\r\n\r\n        resultParameter[\"ngradecode\"] = numericGrade(resultParameter, parseInt(this.state.testMean));\r\n        resultParameter['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n        resultParameter['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n        // resultParameter['ntransactionresultcode'] = meanParameter.ntransactionresultcode;\r\n        // resultParameter['ntransactiontestcode'] = meanParameter.ntransactiontestcode;\r\n        // resultParameter['nparametertypecode'] = meanParameter.nparametertypecode;\r\n        //console.log(\"result:\", resultParameter);\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"filecount\", 0);\r\n        formData.append(\"nregtypecode\", nregtypecode);\r\n        formData.append(\"nregsubtypecode\", nregsubtypecode);\r\n        formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\r\n        formData.append(\"transactiontestcode\", resultParameter.ntransactiontestcode);\r\n        //formData.append(\"resultData\", JSON.stringify([resultParameter]));\r\n        formData.append(\"resultData\", resultParameter);\r\n\r\n        const inputParam = {\r\n            classUrl: \"resultentrybysample\",\r\n            methodUrl: \"TestParameterResult\",\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: \"update\",\r\n            displayName: this.props.Login.inputParam.displayName, saveType\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    editpredefinedcomments = (dataItem) => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                screenName: \"IDS_RESULTPARAMETERCOMMENTS\",\r\n                openModal: true,\r\n                selectedRecord: { 'sresultcomment': dataItem['sresultcomment'], 'selectedPredefinedComments': dataItem },\r\n                operation: \"update\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    enforceResult = (dataItem) => {\r\n        let inputParam = {}\r\n        inputParam = {\r\n            dataItem: dataItem,\r\n            masterData: this.props.Login.masterData,\r\n            screenName: \"IDS_ENFORCERESULT\",\r\n            openModal: true,\r\n            operation: \"update\",\r\n            ncontrolcode: dataItem['ncontrolcode']\r\n        }\r\n        this.props.enforceResult(inputParam, this.props.Login.userInfo);\r\n    }\r\n    onSavePredefinedComments = (saveType) => {\r\n        let inputParam = {}\r\n        let stransactiontestcode = \"\";\r\n        this.props.Login.masterData.RESelectedTest.map(x => {\r\n            stransactiontestcode += x['ntransactiontestcode'] + \",\"\r\n        }\r\n        )\r\n        let inputData = {\r\n            'selectedPredefinedComments': this.state.selectedRecord['selectedPredefinedComments'],\r\n            'ntransactionresultcode': this.state.selectedRecord['selectedPredefinedComments']['ntransactionresultcode']\r\n            ,\r\n            'sresultcomment': this.state.selectedRecord['sresultcomment'],\r\n            'ntransactiontestcode': stransactiontestcode.substring(0, stransactiontestcode.length - 1),//this.state.selectedRecord['selectedPredefinedComments']['ntransactiontestcode'],\r\n            'userinfo': this.props.Login.userInfo\r\n        }\r\n        inputParam = {\r\n            classUrl: 'resultentrybysample',\r\n            methodUrl: \"PredefinedComments\",\r\n            inputData: inputData,\r\n            //    isFileupload: false,\r\n            //  activeTestKey: \"IDS_INSTRUMENT\",\r\n            operation: this.props.Login.operation,\r\n            displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    //ALPD-4156--Vignesh R(15-05-2024)-->Result Entry - Option to change section for the test(s)\t\r\n    onSaveSection(saveType) {\r\n        let inputParam = {};\r\n        let resultEntryData = {};\r\n        let testList = [];\r\n\r\n        let { testskip, testtake, sampleskip, sampletake } = this.state\r\n        if (this.props.Login.masterData.searchedTest !== undefined) {\r\n            testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.searchedTest.slice(testskip, testskip + testtake), \"ntransactiontestcode\");\r\n        } else {\r\n            testList = this.props.Login.masterData.RE_TEST\r\n                && this.props.Login.masterData.RE_TEST.slice(testskip, testskip + testtake);\r\n        }\r\n        let subSampleList = [];\r\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n            subSampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.searchedSubSample.slice(testskip, testskip + testtake), \"ntransactionsamplecode\");\r\n        } else {\r\n            subSampleList = this.props.Login.masterData.RE_SUBSAMPLE\r\n                && this.props.Login.masterData.RE_SUBSAMPLE.slice(testskip, testskip + testtake);\r\n        }\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.searchedSample.slice(sampleskip, sampleskip + sampletake), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RE_SAMPLE\r\n                && this.props.Login.masterData.RE_SAMPLE.slice(sampleskip, sampleskip + sampletake);\r\n        }\r\n        //\r\n        let sectionList = getSameRecordFromTwoArrays(testList || [], this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let sampleListCount = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.RESelectedSample, \"npreregno\");\r\n\r\n        resultEntryData[\"npreregno\"] = sectionList ? sectionList.map(sample => sample.npreregno).join(\",\") : \"\";\r\n        resultEntryData[\"ntransactionsamplecode\"] = sectionList ? sectionList.map(sample => sample.ntransactionsamplecode).join(\",\") : \"\";\r\n        resultEntryData[\"ntransactiontestcode\"] = sectionList ? sectionList.map(sample => sample.ntransactiontestcode).join(\",\") : \"\";\r\n        resultEntryData[\"nneedsubsample\"] = (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) || false;\r\n\r\n        resultEntryData[\"nsectioncode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nsectioncode\"].value;\r\n        resultEntryData[\"nneedsubsample\"] = (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) || false;\r\n        if (!(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample)) {\r\n            resultEntryData[\"ntansactionSubSamplecode\"] = subSampleList ? subSampleList.map(sample => sample.ntransactionsamplecode).join(\",\") : \"\";\r\n        }\r\n\r\n\r\n        resultEntryData[\"userinfo\"] = this.props.Login.userInfo;\r\n        resultEntryData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.realDesignTemplateMapping.ndesigntemplatemappingcode;\r\n        resultEntryData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue.nregtypecode;\r\n        resultEntryData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\r\n        resultEntryData[\"ntestcode\"] = this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode === 0 ? this.props.Login.masterData.Test.map(test => test.ntestcode).join(',') : String(this.props.Login.masterData.realTestValue.ntestcode) : null;\r\n        resultEntryData[\"masterData\"] = this.props.Login.masterData;\r\n        resultEntryData[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n        resultEntryData[\"activeTestTab\"] = this.props.Login.activeTestTab || 'IDS_TESTATTACHMENTS';\r\n        resultEntryData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode;\r\n        resultEntryData[\"napprovalversioncode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode;\r\n\r\n        // joballocationData[\"sfilterSection\"] = this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode.toString() : \"-1\";\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n        resultEntryData[\"fromdate\"] = obj.fromDate;\r\n        resultEntryData[\"todate\"] = obj.toDate;\r\n        resultEntryData[\"activeSampleTab\"] = this.props.Login.activeTestTab || \"IDS_SAMPLEATTACHMENTS\";\r\n        resultEntryData[\"nregistrationsectioncode\"] = this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(item1 => item1.nregistrationsectioncode).join(\",\");\r\n        resultEntryData[\"ncontrolcode\"] = this.props.Login.ncontrolcode;\r\n        resultEntryData[\"nbatchmastercode\"] = (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1;\r\n        resultEntryData[\"nworlistcode\"] = (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1;\r\n        resultEntryData[\"nneedjoballocation\"] = this.props.Login.masterData.realRegSubTypeValue.nneedjoballocation;\r\n        resultEntryData[\"nneedReceivedInLab\"] = parseInt(this.props.Login.settings && this.props.Login.settings['43'])\r\n        inputParam = {\r\n            classUrl: \"resultentrybysample\",\r\n            methodUrl: \"Test\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: resultEntryData,\r\n            //selectedId: this.state.selectedRecord[\"njoballocationcode\"],\r\n            operation: \"updateSection\",\r\n            saveType,\r\n            searchRef: this.searchRef,\r\n            postParamList: this.postParamList,\r\n            action: \"updateSection\",\r\n            selectedRecord: this.state.selectedRecord,\r\n            RESelectedTest: this.props.Login.masterData.RESelectedTest\r\n\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: \"IDS_SECTION\",\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.updateSectionTest(inputParam);\r\n\r\n        }\r\n    }\r\n\r\n    onSaveEnforceResult = (saveType) => {\r\n        let inputParam = {}\r\n        let stransactiontestcode = \"\";\r\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        // this.props.Login.masterData.RESelectedTest.map(x=>{ \r\n        //     stransactiontestcode+=x['ntransactiontestcode']+\",\"\r\n        // }\r\n        //   )\r\n        let inputData = {\r\n            'ResultParameter': {\r\n                //  ngradecode:this.state.selectedRecord['ngradecode'].value,\r\n                nparametertypecode: parameterType.CHARACTER,\r\n                sfinal: this.state.selectedRecord['senforceresult'],\r\n                senforceresultcomment: this.state.selectedRecord['senforceresultcomment'],\r\n                ntransactiontestcode: this.state.selectedRecord['ntransactiontestcode'],\r\n                ntransactionresultcode: this.state.selectedRecord['ntransactionresultcode']\r\n            },\r\n            'ntransactionresultcode': this.state.selectedRecord['ntransactionresultcode'],\r\n            \"nregtypecode\": nregtypecode,\r\n            \"nregsubtypecode\": nregsubtypecode,\r\n            \"ndesigntemplatemappingcode\": ndesigntemplatemappingcode,\r\n            'userinfo': this.props.Login.userInfo\r\n        }\r\n        inputParam = {\r\n            classUrl: 'resultentrybysample',\r\n            methodUrl: \"EnforceResult\",\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    // callbackToParent=(childData)=>{\r\n    //     console.log('childData',childData)\r\n    //     this.setState({childData})\r\n    // }\r\n    onSaveClick = (saveType, data) => {\r\n        if (this.props.Login.screenName === \"IDS_MEANPARAMETER\") {\r\n            this.onSaveMean(saveType);\r\n        } else if (this.props.Login.screenName === \"IDS_RESULTPARAMETERCOMMENTS\") {\r\n            this.onSavePredefinedComments(saveType);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_ENFORCERESULT\") {\r\n            this.onSaveEnforceResult(saveType);\r\n        } else if (this.props.Login.screenName === \"IDS_RESULTENTRYCOMPLETE\") {\r\n\r\n            const startDate = (this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date());\r\n            const endDate = (this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date());\r\n\r\n            let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\r\n\r\n            const fromDate = obj.fromDate;\r\n            const toDate = obj.toDate;\r\n            const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode;\r\n            let testChildGetREParam = {\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample && sample.ntransactionsamplecode).join(\",\"),\r\n                activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n                fromdate: fromDate,\r\n                todate: toDate,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n                resultDataState: this.state.resultDataState,\r\n                instrumentDataState: this.state.instrumentDataState,\r\n                materialDataState: this.state.materialDataState,\r\n                taskDataState: this.state.taskDataState,\r\n                documentDataState: this.state.documentDataState,\r\n                resultChangeDataState: this.state.resultChangeDataState,\r\n                testCommentDataState: this.state.testCommentDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\r\n                nworlistcode: (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n                nbatchmastercode: (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n            }\r\n\r\n            this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake, 3)\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_SECTION\") {\r\n            this.onSaveSection(saveType)\r\n\r\n\r\n        }\r\n        else {\r\n            let ResultParameter = this.state.parameterResults//this.props.Login.parameterResults\r\n\r\n            //let ResultParameter = this.state.selectedRecord.ResultParameter || [];\r\n            //    let ResultParameter = this.props.Login.parameterResults || [];\r\n            // let ResultParameter = saveType.parameterResults || [];\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            let selectedRecordMaterialForm = this.state.selectedRecordMaterialForm || {};\r\n            let selectedRecordInstrumentForm = this.state.selectedRecordInstrumentForm || {};\r\n            let selectedRecordTaskForm = this.state.selectedRecordTaskForm || {};\r\n            let selectedId = this.props.Login.selectedId || null;\r\n            let additionalInfo = this.state.selectedRecord.additionalInfo || [];\r\n            const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n            const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n            const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n            const classUrl = \"resultentrybysample\";\r\n            const formData = new FormData();\r\n            let neditable = 0;\r\n            let resultParameters = [];\r\n            let inputParam = {};\r\n            let inputData = [];\r\n            let i = 0;\r\n            let j = 0;\r\n            //const postParam = {inputListName: \"RESelectedTest\", selectedObject: \"RESelectedTest\", primaryKeyField: \"ntransactionstestcode\" };\r\n            if (this.props.Login.screenName === \"IDS_RESULTENTRY\") {\r\n                if (ResultParameter.length > 0 && ResultParameter !== undefined) {\r\n                    ResultParameter.map((resultData, index) => {\r\n                        let results = {};\r\n                        if (resultData.editable === true) {\r\n                            neditable = 1;\r\n                            switch (resultData.nparametertypecode) {\r\n                                case 1:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: resultData[\"ncalculatedresult\"],\r\n                                        sresult: resultData.sresult,\r\n                                        sfinal: resultData.sresult !== \"\" ? resultData.sresult.includes('e') ? resultData.sresult : numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\",\r\n                                        ngradecode: resultData.sresult !== \"\" ? numericGrade(resultData, results[\"sfinal\"]) : -1,\r\n                                        nresultaccuracycode: resultData.resultaccuracycode ? resultData.resultaccuracycode.value : -1,\r\n                                        sresultaccuracyname: resultData.resultaccuracycode ? resultData.resultaccuracycode.label : \"\",\r\n                                        nunitcode: resultData.unitcode.value,\r\n                                        sunitname: resultData.unitcode.label\r\n\r\n\r\n\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"sfinal\"] = resultData.sresult !== \"\" ? resultData.sresult.includes('e') ? resultData.sresult : numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\r\n                                    results[\"ngradecode\"] = resultData.sresult !== \"\" ?\r\n                                        numericGrade(resultData, results[\"sfinal\"]) : -1;\r\n                                    results[\"nunitcode\"] = resultData.unitcode.value;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 2:\r\n                                    if (resultData['additionalInfoUidata'] !== undefined && resultData['additionalInfoUidata'] !== null\r\n                                        && resultData['additionalInfoUidata'].hasOwnProperty('ntestgrouptestpredefsubcode')) {\r\n                                        if (typeof resultData['additionalInfoUidata']['ntestgrouptestpredefsubcode'] === 'string') {\r\n                                            resultData['additionalInfoUidata']['ntestgrouptestpredefsubcode'] = Lims_JSON_stringify(resultData['additionalInfoUidata']['ntestgrouptestpredefsubcode'], false);\r\n                                        } else {\r\n                                            resultData['additionalInfoUidata']['ntestgrouptestpredefsubcode'].length > 0 &&\r\n                                                resultData['additionalInfoUidata']['ntestgrouptestpredefsubcode'].map(item => {\r\n                                                    item['label'] = Lims_JSON_stringify(item['label'], false);\r\n                                                    item['item']['ssubcodedresult'] = Lims_JSON_stringify(item['item']['ssubcodedresult'], false);\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: 4,\r\n                                        sresult: Lims_JSON_stringify(replaceBackSlash(resultData.sresult)),\r\n                                        sfinal: Lims_JSON_stringify(replaceBackSlash(resultData.sfinal)),\r\n                                        sresultcomment: resultData.sresultcomment === 'null' ? \"-\" : Lims_JSON_stringify(resultData.sresultcomment),\r\n                                        salertmessage: Lims_JSON_stringify(resultData.salertmessage, false),\r\n                                        additionalInfo: resultData['additionalInfo'] !== null ? Lims_JSON_stringify(resultData['additionalInfo'], false) : resultData['additionalInfo'],\r\n                                        additionalInfoUidata: resultData['additionalInfoUidata'] === undefined ? \"\" : resultData['additionalInfoUidata'],\r\n                                        ntestgrouptestpredefcode: resultData.ntestgrouptestpredefcode\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n\r\n\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n\r\n                                    results[\"ncalculatedresult\"] = 4;\r\n                                    results[\"sfinal\"] = resultData.sresult;\r\n                                    results[\"ngradecode\"] = resultData.ngradecode;\r\n                                    results[\"nunitcode\"] = -1;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 3:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: 4,\r\n                                        sresult: Lims_JSON_stringify(replaceBackSlash(resultData.sresult)),\r\n                                        sfinal: Lims_JSON_stringify(replaceBackSlash(resultData.sresult))\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"ncalculatedresult\"] = 4;\r\n                                    results[\"sfinal\"] = resultData.sresult;\r\n                                    results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : ResultEntryGrade.RESULTSTATUS_FIO;\r\n                                    results[\"nunitcode\"] = -1;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 4:\r\n                                    if (resultData.sfinal.length > 0) {\r\n                                        const splittedFileName = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\r\n                                        const fileExtension = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\r\n                                        const uniquefilename = create_UUID() + '.' + fileExtension;\r\n                                        results[\"jsondata\"] = {\r\n                                            ssystemfilename: uniquefilename,\r\n                                            nfilesize: resultData.sfinal[0] && resultData.sfinal[0].size,\r\n                                            ncalculatedresult: 4,\r\n                                            sresult: Lims_JSON_stringify(resultData.sresult, false),\r\n                                            sfinal: Lims_JSON_stringify(resultData.sresult, false)\r\n                                        }\r\n                                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                        results[\"ncalculatedresult\"] = 4;\r\n                                        results[\"sresult\"] = resultData.sresult;\r\n                                        results[\"sfinal\"] = resultData.sresult;\r\n                                        results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : ResultEntryGrade.RESULTSTATUS_FIO;\r\n                                        results[\"nunitcode\"] = -1;\r\n                                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\r\n                                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\r\n                                        results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\r\n                                        results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\r\n                                        results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                        results[\"ssystemfilename\"] = uniquefilename;\r\n                                        results[\"nfilesize\"] = resultData.sfinal[0] && resultData.sfinal[0].size;\r\n                                        formData.append(\"uploadedFile\" + j, resultData.sfinal[0] && resultData.sfinal[0]);\r\n                                        formData.append(\"uniquefilename\" + j, uniquefilename);\r\n                                        formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\r\n                                        i++;\r\n                                        j++;\r\n                                    }\r\n                                    else {\r\n                                        const splittedFileName = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\r\n                                        const fileExtension = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\r\n                                        const uniquefilename = \"\";\r\n                                        results[\"jsondata\"] = {\r\n                                            ssystemfilename: uniquefilename,\r\n                                            nfilesize: resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].size : \"\",\r\n                                            ncalculatedresult: 4,\r\n                                            sresult: \"\",\r\n                                            sfinal: \"\"\r\n                                        }\r\n                                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                        results[\"ncalculatedresult\"] = 4;\r\n                                        results[\"sresult\"] = \"\";\r\n                                        results[\"sfinal\"] = \"\";\r\n                                        results[\"ngradecode\"] = -1;\r\n                                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\r\n                                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\r\n                                        results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\r\n                                        results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\r\n                                        results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                        results[\"ssystemfilename\"] = \"\";\r\n                                        results[\"nfilesize\"] = \"\";\r\n                                        formData.append(\"uploadedFile\" + index, \"\");\r\n                                        formData.append(\"uniquefilename\" + index, \"\");\r\n                                        formData.append(\"ntransactiontestcode\", \"\");\r\n                                    }\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            if (Object.values(results).length > 0) {\r\n                                resultParameters.push(results);\r\n                            }\r\n                        }\r\n                        return null;\r\n                    });\r\n\r\n                    if (neditable === 0) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: { loading: false, openModal: false, parameterResults: [], selectedRecord: {} }\r\n                        }\r\n                        return this.props.updateStore(updateInfo);\r\n                    }\r\n\r\n                    formData.append(\"filecount\", i);\r\n                    formData.append(\"nregtypecode\", nregtypecode);\r\n                    formData.append(\"nregsubtypecode\", nregsubtypecode);\r\n                    formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\r\n                    formData.append(\"ndesigntemplatemappingcode\", ndesigntemplatemappingcode);\r\n\r\n                    formData.append(\"resultData\", JSON.stringify(resultParameters));\r\n                    const tests = this.props.Login.masterData.RESelectedTest ?\r\n                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                    formData.append(\"transactiontestcode\", tests);\r\n                    //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"TestParameterResult\",\r\n                        inputData: { userinfo: this.props.Login.userInfo },\r\n                        formData: formData,\r\n                        isFileupload: true,\r\n                        operation: \"update\",\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//, postParam\r\n                    }\r\n                }\r\n                else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { loading: false, openModal: false }\r\n                    }\r\n                    return this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n            if (this.props.Login.screenName === \"IDS_RESULTENTRYPARAMETER\") {\r\n                if (this.state.selectedsubcode && this.state.selectedsubcode.length > 0 && this.state.selectedsubcode !== undefined) {\r\n                    if (ResultParameter.length > 0 && ResultParameter !== undefined) {\r\n                        ResultParameter.map((resultData, index) => {\r\n                            let results = {};\r\n                            if (resultData.editable === true) {\r\n                                neditable = 1;\r\n                                switch (resultData.nparametertypecode) {\r\n                                    case 1:\r\n                                        results[\"jsondata\"] = {\r\n                                            ncalculatedresult: resultData[\"ncalculatedresult\"],\r\n                                            sresult: resultData.sresult,\r\n                                            sfinal: resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\"\r\n                                        }\r\n                                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                        results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\r\n                                        results[\"sresult\"] = resultData.sresult;\r\n                                        results[\"sfinal\"] = resultData.sresult !== \"\" ?\r\n                                            numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\r\n                                        results[\"ngradecode\"] = resultData.sresult !== \"\" ?\r\n                                            numericGrade(resultData, results[\"sfinal\"]) : -1;\r\n                                        results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                        results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                        //results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                        //results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                        results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                        results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\r\n                                        break;\r\n                                    case 2:\r\n                                        results[\"jsondata\"] = {\r\n                                            ncalculatedresult: 4,\r\n                                            sresult: Lims_JSON_stringify(resultData.sresult, false),\r\n                                            sfinal: Lims_JSON_stringify(resultData.sfinal, false),\r\n                                            sresultcomment: resultData.sresultcomment === 'null' ? \"-\" : resultData.sresultcomment,\r\n                                            salertmessage: resultData.salertmessage,\r\n                                            additionalInfo: resultData['additionalInfo'],\r\n                                            additionalInfoUidata: resultData['additionalInfoUidata'] === undefined ? \"\" : resultData['additionalInfoUidata'],\r\n                                            ntestgrouptestpredefcode: resultData.ntestgrouptestpredefcode\r\n                                        }\r\n                                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                        results[\"sresult\"] = resultData.sresult;\r\n\r\n                                        results[\"ncalculatedresult\"] = 4;\r\n                                        results[\"sfinal\"] = resultData.sresult;\r\n                                        results[\"ngradecode\"] = resultData.ngradecode;\r\n                                        results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                        results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                        //results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                        //results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                        results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                        results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\r\n                                        break;\r\n                                    case 3:\r\n                                        results[\"jsondata\"] = {\r\n                                            ncalculatedresult: 4,\r\n                                            sresult: Lims_JSON_stringify(resultData.sresult, false),\r\n                                            sfinal: Lims_JSON_stringify(resultData.sresult, false)\r\n                                        }\r\n                                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                        results[\"sresult\"] = resultData.sresult;\r\n                                        results[\"ncalculatedresult\"] = 4;\r\n                                        results[\"sfinal\"] = resultData.sresult;\r\n                                        results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : ResultEntryGrade.RESULTSTATUS_FIO;\r\n                                        results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                        results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                        //results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                        //results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                        results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                        results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\r\n                                        break;\r\n                                    case 4:\r\n                                        if (resultData.sfinal.length > 0) {\r\n                                            const splittedFileName = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\r\n                                            const fileExtension = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\r\n                                            const uniquefilename = create_UUID() + '.' + fileExtension;\r\n                                            results[\"jsondata\"] = {\r\n                                                ssystemfilename: uniquefilename,\r\n                                                nfilesize: resultData.sfinal[0] && resultData.sfinal[0].size,\r\n                                                ncalculatedresult: 4,\r\n                                                sresult: Lims_JSON_stringify(resultData.sresult, false),\r\n                                                sfinal: Lims_JSON_stringify(resultData.sresult, false)\r\n                                            }\r\n                                            results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                            results[\"ncalculatedresult\"] = 4;\r\n                                            results[\"sresult\"] = resultData.sresult;\r\n                                            results[\"sfinal\"] = resultData.sresult;\r\n                                            results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : ResultEntryGrade.RESULTSTATUS_FIO;\r\n                                            results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\r\n                                            results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\r\n                                            //results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\r\n                                            //results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\r\n                                            results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\r\n                                            results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                            results[\"ssystemfilename\"] = uniquefilename;\r\n                                            results[\"nfilesize\"] = resultData.sfinal[0] && resultData.sfinal[0].size;\r\n                                            formData.append(\"uploadedFile\" + index, resultData.sfinal[0] && resultData.sfinal[0]);\r\n                                            formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                                            //formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\r\n                                            i++;\r\n                                        }\r\n                                        else {\r\n                                            const splittedFileName = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\r\n                                            const fileExtension = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\r\n                                            const uniquefilename = \"\";\r\n                                            results[\"jsondata\"] = {\r\n                                                ssystemfilename: uniquefilename,\r\n                                                nfilesize: resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].size : \"\",\r\n                                                ncalculatedresult: 4,\r\n                                                sresult: \"\",\r\n                                                sfinal: \"\"\r\n                                            }\r\n                                            results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                            results[\"ncalculatedresult\"] = 4;\r\n                                            results[\"sresult\"] = \"\";\r\n                                            results[\"sfinal\"] = \"\";\r\n                                            results[\"ngradecode\"] = -1;\r\n                                            results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\r\n                                            results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\r\n                                            //results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\r\n                                            //results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\r\n                                            results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                            results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\r\n                                            results[\"ssystemfilename\"] = \"\";\r\n                                            results[\"nfilesize\"] = \"\";\r\n                                            formData.append(\"uploadedFile\" + index, \"\");\r\n                                            formData.append(\"uniquefilename\" + index, \"\");\r\n                                            //formData.append(\"ntransactiontestcode\", \"\");\r\n                                        }\r\n                                        break;\r\n                                    default:\r\n                                        break;\r\n                                }\r\n                                if (Object.values(results).length > 0) {\r\n                                    resultParameters.push(results);\r\n                                }\r\n                            }\r\n                            return null;\r\n                        });\r\n\r\n                        if (neditable === 0) {\r\n                            const updateInfo = {\r\n                                typeName: DEFAULT_RETURN,\r\n                                data: { loading: false, openModal: false, parameterResults: [], selectedRecord: {} }\r\n                            }\r\n                            return this.props.updateStore(updateInfo);\r\n                        }\r\n\r\n                        formData.append(\"filecount\", i);\r\n                        formData.append(\"nregtypecode\", nregtypecode);\r\n                        formData.append(\"nregsubtypecode\", nregsubtypecode);\r\n                        formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\r\n                        formData.append(\"ndesigntemplatemappingcode\", ndesigntemplatemappingcode);\r\n\r\n                        formData.append(\"resultData\", JSON.stringify(resultParameters));\r\n                        const tests = this.props.Login.masterData.RESelectedTest ?\r\n                            this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                        const sampleid = this.state.selectedsubcode ?\r\n                            this.state.selectedsubcode.map(test => test.ssampleid).join(\"','\") : \"\"\r\n\r\n                        formData.append(\"transactiontestcode\", tests);\r\n                        formData.append(\"sampleid\", sampleid);\r\n                        formData.append(\"ntestcode\", this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode)\r\n                        formData.append(\"nallottedspeccode\", this.state.selectedRecord.nallottedspeccode.value);\r\n                        formData.append(\"nspecsampletypecode\", this.state.selectedRecord.ncomponentcode.value);\r\n                        //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\r\n                        inputParam = {\r\n                            classUrl: classUrl,\r\n                            methodUrl: \"MultiSampleTestParameterResult\",\r\n                            inputData: { userinfo: this.props.Login.userInfo },\r\n                            formData: formData,\r\n                            isFileupload: true,\r\n                            operation: \"update\",\r\n                            displayName: this.props.Login.inputParam.displayName, saveType//, postParam\r\n                        }\r\n                    }\r\n                    else {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: { loading: false, openModal: false }\r\n                        }\r\n                        return this.props.updateStore(updateInfo);\r\n                    }\r\n                }\r\n                else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { loading: false }\r\n                    }\r\n\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDSAMPLE\" }));\r\n                    return this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n\r\n\r\n            if (this.props.Login.screenName === \"IDS_TESTMETHODSOURCE\") {\r\n                inputData = {\r\n                    ntype: 3,\r\n                    nflag: 3,\r\n                    nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                    ntranscode: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString(),\r\n                    ntestcode: this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                    npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                    ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                    nmethodcode: selectedRecord.nmethodcode.value,\r\n                    nsourcecode: selectedRecord.nsourcecode.value,\r\n                    ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: \"IDS_RESULTS\",\r\n                    ncontrolcode: this.props.Login.ncontrolcode\r\n                }\r\n                // inputParam = {\r\n                //     classUrl: classUrl,\r\n                //     methodUrl: \"TestMethodSource\",\r\n                //     inputData: inputData,\r\n                //     isFileupload: false,\r\n                //     operation: \"update\",\r\n                //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                // }\r\n\r\n                this.updateTestMethodSource(inputData, this.props.Login.masterData, this.props.Login.ncontrolcode);\r\n                return;\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_INSTRUMENT\") {\r\n\r\n                //ALPD-5032 added by Dhanushya RI,To insert and jsonObject when add or edit instrument    \r\n                let inputData = {};\r\n                inputData[\"InstrumentJson\"] = {};\r\n                if (selectedRecordInstrumentForm) {\r\n                    inputData[\"InstrumentJson\"] = {\r\n                        \"InstrumentCategory\": {\r\n                            label: selectedRecordInstrumentForm.ninstrumentcatcode.label,\r\n                            value: selectedRecordInstrumentForm.ninstrumentcatcode.value\r\n                        },\r\n                        \"InstrumentName\": {\r\n                            label: selectedRecordInstrumentForm.ninstrumentnamecode && selectedRecordInstrumentForm.ninstrumentnamecode.label || 'NA',\r\n                            value: selectedRecordInstrumentForm.ninstrumentnamecode && selectedRecordInstrumentForm.ninstrumentnamecode.value || -1\r\n                        },\r\n                        \"InstrumentId\": {\r\n                            label: selectedRecordInstrumentForm.ninstrumentcode && selectedRecordInstrumentForm.ninstrumentcode.label || 'NA',\r\n                            value: selectedRecordInstrumentForm.ninstrumentcode && selectedRecordInstrumentForm.ninstrumentcode.value || -1\r\n                        },\r\n                        \"InstrumentStartDate\": selectedRecordInstrumentForm.dfromdate ? convertDateTimetoStringDBFormat(selectedRecordInstrumentForm.dfromdate, this.props.Login.userInfo) : \"\",\r\n                        \"InstrumentEndDate\": selectedRecordInstrumentForm.dtodate ? convertDateTimetoStringDBFormat(selectedRecordInstrumentForm.dtodate, this.props.Login.userInfo) : \"\",\r\n\r\n                    }\r\n                }\r\n                if (this.props.Login.operation === \"update\") {\r\n                    inputData = {\r\n                        ResultUsedInstrument: {\r\n                            nresultusedinstrumentcode: selectedRecordInstrumentForm.nresultusedinstrumentcode,\r\n                            npreregno: selectedRecordInstrumentForm.npreregno,\r\n                            ninstrumentcatcode: selectedRecordInstrumentForm.ninstrumentcatcode.value,\r\n                            ninstrumentnamecode: selectedRecordInstrumentForm.ninstrumentnamecode.value,\r\n                            ninstrumentcode: selectedRecordInstrumentForm.ninstrumentcode.value,\r\n                            dfromdate: formatInputDate(selectedRecordInstrumentForm.dfromdate, false),\r\n                            dtodate: formatInputDate(selectedRecordInstrumentForm.dtodate, false),\r\n                            stzfromdate: selectedRecordInstrumentForm.ntzfromdate.label,\r\n                            stztodate: selectedRecordInstrumentForm.ntztodate.label,\r\n                            ntzfromdate: selectedRecordInstrumentForm.ntzfromdate.value,\r\n                            ntztodate: selectedRecordInstrumentForm.ntztodate.value,\r\n                            ntransactiontestcode: selectedRecordInstrumentForm.ntransactiontestcode\r\n                        },\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode,\r\n                        ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                        ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                            this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                        jsondata: JSON.stringify(inputData[\"InstrumentJson\"]) //ALPD-5032\r\n\r\n                    }\r\n                }\r\n                else {\r\n                    inputData = {\r\n                        ResultUsedInstrument: {\r\n                            ntransactiontestcode: selectedRecordInstrumentForm.ntransactiontestcode,\r\n                            npreregno: selectedRecordInstrumentForm.npreregno,\r\n                            ninstrumentcatcode: selectedRecordInstrumentForm.ninstrumentcatcode.value,\r\n                            ninstrumentnamecode: selectedRecordInstrumentForm.ninstrumentnamecode.value,\r\n                            ninstrumentcode: selectedRecordInstrumentForm.ninstrumentcode.value,\r\n                            dfromdate: formatInputDate(selectedRecordInstrumentForm.dfromdate, false),\r\n                            dtodate: formatInputDate(selectedRecordInstrumentForm.dtodate, false),\r\n                            stzfromdate: selectedRecordInstrumentForm.ntzfromdate.label,\r\n                            stztodate: selectedRecordInstrumentForm.ntztodate.label,\r\n                            ntzfromdate: selectedRecordInstrumentForm.ntzfromdate.value,\r\n                            ntztodate: selectedRecordInstrumentForm.ntztodate.value\r\n\r\n                        },\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode,\r\n                        jsondata: JSON.stringify(inputData[\"InstrumentJson\"]),\r\n                        ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                        transactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                            this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    }\r\n                }\r\n                inputParam = {\r\n                    classUrl: classUrl,\r\n                    methodUrl: \"ResultUsedInstrument\",\r\n\r\n                    inputData: inputData, selectedId,\r\n                    isFileupload: false,\r\n                    activeTestKey: \"IDS_INSTRUMENT\",\r\n                    operation: this.props.Login.operation,\r\n                    displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_MATERIAL\") {\r\n                let inputData = [];\r\n                if (this.state.selectedRecordMaterialForm.nmaterialcode != \"\") {\r\n                    if (this.state.selectedRecordMaterialForm.nmaterialinventorycode != \"\") {\r\n                        if (parseFloat(this.state.selectedRecordMaterialForm.susedquantity) <= parseFloat(this.state.selectedRecordMaterialForm.savailablequantity)) {\r\n                            if (this.props.Login.operation === \"update\") {\r\n                                inputData = {\r\n                                    ResultUsedMaterial: {\r\n                                        nresultusedmaterialcode: selectedRecordMaterialForm.nresultusedmaterialcode,\r\n                                        ntransactiontestcode: selectedRecordMaterialForm.ntransactiontestcode,\r\n                                        npreregno: selectedRecordMaterialForm.npreregno,\r\n                                        nmaterialtypecode: selectedRecordMaterialForm.nmaterialtypecode.value,\r\n                                        nmaterialcategorycode: selectedRecordMaterialForm.nmaterialcategorycode.value,\r\n                                        nmaterialcode: selectedRecordMaterialForm.nmaterialcode.value,\r\n                                        ninventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecordMaterialForm.nsectioncode,\r\n                                        jsondata: {\r\n                                            sarno: selectedRecordMaterialForm.sarno,\r\n                                            ssamplearno: selectedRecordMaterialForm.ssamplearno,\r\n                                            stestsynonym: selectedRecordMaterialForm.stestsynonym,\r\n                                            smaterialcatname: selectedRecordMaterialForm.nmaterialcatcode.label,\r\n                                            smaterialname: selectedRecordMaterialForm.nmaterialcode.label,\r\n                                            sinventoryid: selectedRecordMaterialForm.nmaterialinventorycode.label,\r\n                                            nqtyused: selectedRecordMaterialForm.susedquantity,\r\n                                            scarriergas: selectedRecordMaterialForm.scarriergas,\r\n                                            smobilephase: selectedRecordMaterialForm.smobilephase,\r\n                                            sremarks: selectedRecordMaterialForm.sremarks,\r\n                                            susername: this.props.Login.userInfo.susername,\r\n                                            nsectioncode: selectedRecordMaterialForm.nsectioncode,\r\n                                            ssectionname: selectedRecordMaterialForm.ssectionname,\r\n                                            ntestgroupmaterial: selectedRecordMaterialForm.ntestgroupmaterial,\r\n                                            ntestgrouptestcode: selectedRecordMaterialForm.ntestgroupmaterial == transactionStatus.YES ?\r\n                                                this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1\r\n                                        }\r\n                                    },\r\n                                    MaterialInventoryTrans: {\r\n                                        nmaterialinventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecordMaterialForm.nsectioncode,\r\n                                        jsondata: {\r\n                                            IDS_INVENTORYID: selectedRecordMaterialForm.nmaterialinventorycode.label,\r\n                                            nqtyused: selectedRecordMaterialForm.susedquantity,\r\n                                        }\r\n                                    },\r\n                                    userinfo: this.props.Login.userInfo,\r\n                                    nregtypecode: nregtypecode,\r\n                                    nregsubtypecode: nregsubtypecode,\r\n                                    ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                                    nresultusedmaterialcode: selectedRecordMaterialForm.nresultusedmaterialcode,\r\n                                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                                }\r\n                            }\r\n                            else {\r\n                                inputData = {\r\n                                    ResultUsedMaterial: {\r\n                                        ntransactiontestcode: selectedRecordMaterialForm.ntransactiontestcode,\r\n                                        npreregno: selectedRecordMaterialForm.npreregno,\r\n                                        nmaterialtypecode: selectedRecordMaterialForm.nmaterialtypecode.value,\r\n                                        nmaterialcategorycode: selectedRecordMaterialForm.nmaterialcatcode.value,\r\n                                        nmaterialcode: selectedRecordMaterialForm.nmaterialcode.value,\r\n                                        ninventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecordMaterialForm.nsectioncode,\r\n                                        jsondata: {\r\n                                            sarno: selectedRecordMaterialForm.sarno,\r\n                                            ssamplearno: selectedRecordMaterialForm.ssamplearno,\r\n                                            stestsynonym: selectedRecordMaterialForm.stestsynonym,\r\n                                            smaterialcatname: selectedRecordMaterialForm.nmaterialcatcode.label,\r\n                                            smaterialname: selectedRecordMaterialForm.nmaterialcode.label,\r\n                                            sinventoryid: selectedRecordMaterialForm.nmaterialinventorycode.label,\r\n                                            nqtyused: selectedRecordMaterialForm.susedquantity,\r\n                                            scarriergas: selectedRecordMaterialForm.scarriergas,\r\n                                            smobilephase: selectedRecordMaterialForm.smobilephase,\r\n                                            sremarks: selectedRecordMaterialForm.sremarks,\r\n                                            smaterialtypename: selectedRecordMaterialForm.nmaterialtypecode.label,\r\n                                            nsectioncode: selectedRecordMaterialForm.nsectioncode,\r\n                                            ntestgroupmaterial: selectedRecordMaterialForm.ntestgroupmaterial,\r\n                                            ssectionname: selectedRecordMaterialForm.ssectionname,\r\n                                            ntestgrouptestcode: selectedRecordMaterialForm.ntestgroupmaterial == transactionStatus.YES ?\r\n                                                this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1\r\n                                        }\r\n                                    },\r\n                                    MaterialInventoryTrans: {\r\n                                        nmaterialinventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecordMaterialForm.nsectioncode,\r\n                                        jsondata: {\r\n                                            nqtyused: selectedRecordMaterialForm.susedquantity,\r\n                                            IDS_INVENTORYID: selectedRecordMaterialForm.nmaterialinventorycode.label\r\n                                        }\r\n                                    },\r\n                                    userinfo: this.props.Login.userInfo,\r\n                                    nregtypecode: nregtypecode,\r\n                                    nregsubtypecode: nregsubtypecode,\r\n                                    ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                                    transactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                                }\r\n                            }\r\n                            inputParam = {\r\n                                classUrl: classUrl,\r\n                                methodUrl: \"ResultUsedMaterial\",\r\n                                inputData: inputData, selectedId,\r\n                                isFileupload: false,\r\n                                activeTestKey: \"IDS_MATERIAL\",\r\n                                operation: this.props.Login.operation,\r\n                                displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                            }\r\n                        } else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: \"Quantity Not available\" }))\r\n                            return null;\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"Select Material Inventory\" }))\r\n                        return null;\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"Select Material\" }))\r\n                    return null;\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_TASK\") {\r\n                // if ((selectedRecord.sanalysistime && selectedRecord.sanalysistime !== \"\")\r\n                //     || (selectedRecord.smisctime && selectedRecord.smisctime !== \"\")\r\n                //     || (selectedRecord.spreanalysistime && selectedRecord.spreanalysistime !== \"\")\r\n                //     || (selectedRecord.spreparationtime && selectedRecord.spreparationtime !== \"\")\r\n                //     || (selectedRecord.scomments && selectedRecord.scomments !== \"\")) {\r\n                //     if (this.props.Login.operation === \"update\") {\r\n                if ((selectedRecordTaskForm.sanalysistime && selectedRecordTaskForm.sanalysistime !== \"\")\r\n                    || (selectedRecordTaskForm.smisctime && selectedRecordTaskForm.smisctime !== \"\")\r\n                    || (selectedRecordTaskForm.spreanalysistime && selectedRecordTaskForm.spreanalysistime !== \"\")\r\n                    || (selectedRecordTaskForm.spreparationtime && selectedRecordTaskForm.spreparationtime !== \"\")\r\n                    || (selectedRecordTaskForm.scomments && selectedRecordTaskForm.scomments !== \"\")) {\r\n                    if (this.props.Login.operation === \"update\") {\r\n                        inputData = {\r\n                            ResultUsedTasks: {\r\n                                nresultusedtaskcode: selectedRecordTaskForm.nresultusedtaskcode,\r\n                                jsondata: {\r\n                                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                    sarno: this.props.Login.masterData.RESelectedTest[0].sarno,\r\n                                    ssamplearno: this.props.Login.masterData.RESelectedTest[0].ssamplearno,\r\n                                    stestsynonym: selectedRecordTaskForm.stestsynonym,\r\n                                    sanalysistime: selectedRecordTaskForm.sanalysistime ? selectedRecordTaskForm.sanalysistime : \"\",\r\n                                    sanalyst: this.props.Login.userInfo.susername,\r\n                                    smisctime: selectedRecordTaskForm.smisctime ? selectedRecordTaskForm.smisctime : \"\",\r\n                                    spreanalysistime: selectedRecordTaskForm.spreanalysistime ? selectedRecordTaskForm.spreanalysistime : \"\",\r\n                                    spreparationtime: selectedRecordTaskForm.spreparationtime ? selectedRecordTaskForm.spreparationtime : \"\",\r\n                                    staskprocedure: selectedRecordTaskForm.staskprocedure ? selectedRecordTaskForm.staskprocedure : \"\",\r\n                                    scomments: selectedRecordTaskForm.scomments ? selectedRecordTaskForm.scomments : \"\"\r\n                                }\r\n                            },\r\n                            userinfo: this.props.Login.userInfo,\r\n                            ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode,\r\n                            ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                        }\r\n                    }\r\n                    else {\r\n                        let taskArry = [];\r\n                        this.props.Login.masterData.RESelectedTest &&\r\n                            this.props.Login.masterData.RESelectedTest.map(test =>\r\n\r\n                                taskArry.push({\r\n                                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                    ntransactiontestcode: parseInt(test.ntransactiontestcode),\r\n                                    npreregno: parseInt(test.npreregno),\r\n                                    // sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\r\n                                    // sanalyst: this.props.Login.userInfo.susername,\r\n                                    // smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\r\n                                    // spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\r\n                                    // spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\r\n                                    // scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\",\r\n                                    // npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                                    jsondata: {\r\n                                        //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                        sarno: test.sarno,\r\n                                        ssamplearno: test.ssamplearno,\r\n                                        stestsynonym: test.stestsynonym,\r\n                                        sanalysistime: selectedRecordTaskForm.sanalysistime ? selectedRecordTaskForm.sanalysistime : \"\",\r\n                                        sanalyst: this.props.Login.userInfo.susername,\r\n                                        smisctime: selectedRecordTaskForm.smisctime ? selectedRecordTaskForm.smisctime : \"\",\r\n                                        spreanalysistime: selectedRecordTaskForm.spreanalysistime ? selectedRecordTaskForm.spreanalysistime : \"\",\r\n                                        spreparationtime: selectedRecordTaskForm.spreparationtime ? selectedRecordTaskForm.spreparationtime : \"\",\r\n                                        staskprocedure: selectedRecordTaskForm.staskprocedure ? selectedRecordTaskForm.staskprocedure : \"\",\r\n                                        scomments: selectedRecordTaskForm.scomments ? selectedRecordTaskForm.scomments : \"\"\r\n                                    }\r\n                                })\r\n                            )\r\n                        inputData = {\r\n                            ResultUsedTasks: taskArry,\r\n                            userinfo: this.props.Login.userInfo,\r\n                            ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode,\r\n                            ndesigntemplatemappingcode: ndesigntemplatemappingcode\r\n                        }\r\n                    }\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"ResultUsedTasks\",\r\n                        inputData: inputData, selectedId,\r\n                        activeTestKey: \"IDS_TASK\",\r\n                        isFileupload: false,\r\n                        operation: this.props.Login.operation,\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                    }\r\n                } else {\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERTASKTIME\" }));\r\n                    return;\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_PARAMETERCOMMENTS\") {\r\n                inputData = {\r\n                    ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                    sresultcomment: selectedRecord.sresultcomment,\r\n                    transactiontestcode: selectedRecord.transactiontestcode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nregtypecode: nregtypecode,\r\n                    nregsubtypecode: nregsubtypecode,\r\n                    ncontrolcode: this.props.Login.ncontrolcode\r\n\r\n                }\r\n                // inputParam = {\r\n                //     classUrl: classUrl,\r\n                //     methodUrl: \"ParameterComments\",\r\n                //     inputData: inputData, selectedId,\r\n                //     isFileupload: false,\r\n                //     operation: this.props.Login.operation,\r\n                //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                // }\r\n                this.updateParameterComments(inputData, this.props.Login.masterData, selectedRecord.ncontrolcode);\r\n                return;\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_CHECKLISTRESULT\") {\r\n                let lstResultCheckList = [];\r\n                if (selectedRecord && selectedRecord.editedQB) {\r\n                    selectedRecord.editedQB.map(qbcode =>\r\n                        lstResultCheckList.push(selectedRecord[qbcode]));\r\n                    inputData = {\r\n                        ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                        ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                        transactiontestcode: selectedRecord.transactiontestcode,\r\n                        ResultCheckList: lstResultCheckList,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode\r\n                    }\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"ResultEntryChecklist\",\r\n                        inputData: inputData, selectedId,\r\n                        isFileupload: false,\r\n                        operation: this.props.Login.operation,\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                    }\r\n                }\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\", \"dataType\": [option[designProperties.LISTITEM]] };\r\n        });\r\n        return temparray;\r\n    }\r\n    constructDesign(list) {\r\n\r\n        let newList = []\r\n        if (list.length > 0) {\r\n            list.map((i) => {\r\n                newList.push({ [designProperties.LABEL]: i, [designProperties.VALUE]: i })\r\n            })\r\n        }\r\n        return newList;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let { showTest, showSample, userRoleControlRights, controlMap, resultDataState, instrumentDataState,\r\n            materialDataState, taskDataState, documentDataState, resultChangeDataState, testCommentDataState,\r\n            historyDataState, sampleListColumns, subSampleListColumns, testListColumns,\r\n            SingleItem, sampleListMainField, subSampleListMainField, testListMainField,\r\n            SampleGridItem, SampleGridExpandableItem, sampleMoreField, subSampleMoreField,\r\n            testMoreField, selectedRecord, SampleType, RegistrationType, RegistrationSubType,\r\n            REFilterStatus, REJobStatus, Testvalues, ApprovalConfigVersion, DynamicSampleColumns,\r\n            DynamicSubSampleColumns, DynamicTestColumns, DynamicGridItem, DynamicGridMoreField,\r\n            validateFormulaMandyFields, skip, take, testskip, testtake, selectedFilter, stateDynamicDesign,\r\n            activeTabIndex, activeTabId, sampleChangeDataState, testSearchField, AdhocParamter,\r\n            Batchvalues, Worklistvalues, ConfigurationFilterValues, enlLink, openELNSheet, parameterResults, isParameterInitialRender, isaddSampleRender\r\n            , selectedRecordTaskForm, isTaskInitialRender, selectedRecordMaterialForm, isMaterialInitialRender\r\n            , selectedRecordInstrumentForm, isInstrumentInitialRender, selectedRecordCompleteForm, isCompleteInitialRender\r\n            , subSampleSkip, subSampleTake, sampleSearchField, subsampleSearchField, selectedRecordAdhocParameter,\r\n            samplefilteritem, sampledisplayfields\r\n        } = this.state;\r\n        //,currentAlertResultCode,currentntestgrouptestpredefcode\r\n\r\n        let bool = false;\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                bool = true;\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n        }\r\n        if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n            const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n            DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\r\n            DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n            DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n\r\n            DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n            DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n\r\n            SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\r\n            // testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\r\n            // testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n\r\n            testMoreField = dynamicColumn.testListFields.testlistmoreitems ? dynamicColumn.testListFields.testlistmoreitems : [];\r\n            testListColumns = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\r\n            testSearchField = dynamicColumn.testListFields.testsearchfields ? dynamicColumn.testListFields.testsearchfields : [];\r\n\r\n            sampleSearchField = dynamicColumn.samplesearchfields ? dynamicColumn.samplesearchfields : [];\r\n            subsampleSearchField = dynamicColumn.subsamplesearchfields ? dynamicColumn.subsamplesearchfields : [];\r\n\r\n            samplefilteritem = dynamicColumn.samplefilteritem || [];\r\n            sampledisplayfields = dynamicColumn.sampledisplayfields || [];\r\n\r\n            this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample &&\r\n                DynamicSubSampleColumns.push({\r\n                    1: { 'en-US': 'Specimen', 'ru-RU': 'Образец', 'tg-TG': 'Намуна' },\r\n                    2: \"scomponentname\"\r\n                });\r\n\r\n            bool = true;\r\n        }\r\n        if (this.props.Login.masterData.RegistrationSubType &&\r\n            this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n            let dataState = {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n                //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \r\n            }\r\n            bool = true;\r\n            resultDataState = dataState;\r\n            instrumentDataState = dataState;\r\n            materialDataState = dataState;\r\n            taskDataState = dataState;\r\n            documentDataState = dataState;\r\n            resultChangeDataState = dataState;\r\n            historyDataState = dataState;\r\n            testCommentDataState = dataState;\r\n            sampleChangeDataState = dataState;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            bool = true;\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n        }\r\n        if (this.props.Login.selectedRecordAdhocParameter !== previousProps.Login.selectedRecordAdhocParameter) {\r\n            bool = true;\r\n            selectedRecordAdhocParameter = this.props.Login.selectedRecordAdhocParameter;\r\n        }\r\n        if (this.props.Login.selectedRecordTaskForm !== previousProps.Login.selectedRecordTaskForm) {\r\n            bool = true;\r\n            selectedRecordTaskForm = this.props.Login.selectedRecordTaskForm;\r\n        }\r\n        if (this.props.Login.selectedRecordMaterialForm !== previousProps.Login.selectedRecordMaterialForm) {\r\n            bool = true;\r\n            selectedRecordMaterialForm = this.props.Login.selectedRecordMaterialForm;\r\n        }\r\n\r\n        if (this.props.Login.selectedRecordInstrumentForm !== previousProps.Login.selectedRecordInstrumentForm) {\r\n            bool = true;\r\n            selectedRecordInstrumentForm = this.props.Login.selectedRecordInstrumentForm;\r\n        }\r\n        if (this.props.Login.selectedRecordCompleteForm !== previousProps.Login.selectedRecordCompleteForm) {\r\n            bool = true;\r\n            selectedRecordCompleteForm = this.props.Login.selectedRecordCompleteForm;\r\n        }\r\n        if (this.props.Login.parameterResults !== previousProps.Login.parameterResults) {\r\n            bool = true;\r\n            parameterResults = this.props.Login.parameterResults;\r\n        }\r\n        if (this.props.Login.isTaskInitialRender !== previousProps.Login.isTaskInitialRender) {\r\n            bool = true;\r\n            isTaskInitialRender = this.props.Login.isTaskInitialRender;\r\n        }\r\n        if (this.props.Login.isParameterInitialRender !== previousProps.Login.isParameterInitialRender) {\r\n            bool = true;\r\n            isParameterInitialRender = this.props.Login.isParameterInitialRender;\r\n        }\r\n        if (this.props.Login.isaddSampleRender !== previousProps.Login.isaddSampleRender) {\r\n            bool = true;\r\n            isaddSampleRender = this.props.Login.isaddSampleRender;\r\n        }\r\n\r\n\r\n        // if (this.props.Login.currentAlertResultCode !== previousProps.Login.currentAlertResultCode) {\r\n        //     bool = true;\r\n        //     currentAlertResultCode = this.props.Login.currentAlertResultCode;\r\n        // }\r\n        // if (this.props.Login.currentntestgrouptestpredefcode !== previousProps.Login.currentntestgrouptestpredefcode) {\r\n        //     bool = true;\r\n        //     currentntestgrouptestpredefcode = this.props.Login.currentntestgrouptestpredefcode;\r\n        // }\r\n        if (this.props.Login.validateFormulaMandyFields !== previousProps.Login.validateFormulaMandyFields) {\r\n            bool = true;\r\n            validateFormulaMandyFields = this.props.Login.validateFormulaMandyFields;\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\r\n            RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n            RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n            REFilterStatus = constructOptionList(this.props.Login.masterData.REFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", \"nsorter\", 'ascending', \"ntransactionstatus\", false);\r\n            REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\r\n            Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestsynonym', 'ascending', 'ntestcode', false);\r\n            Batchvalues = constructOptionList(this.props.Login.masterData.Batchvalues || [], 'nbatchmastercode', 'sbatcharno', 'ascending', 'nbatchmastercode', false);\r\n            Worklistvalues = constructOptionList(this.props.Login.masterData.Worklistvalues || [], 'nworklistcode', 'sworklistno', 'ascending', 'nworklistcode', false);\r\n            ConfigurationFilterValues = constructOptionList(this.props.Login.masterData.ConfigurationFilterValues || [], 'nconfigfiltercode', 'sfiltername', 'ascending', 'nconfigfiltercode', false);\r\n            ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname',\r\n                'ascending', 'napprovalconfigversioncode', false);\r\n            // AdhocParamter = constructOptionList(this.props.Login.masterData.AdhocParamter || [], 'ntestparametercode', 'sparametersynonym',\r\n            //     'ascending', 'ntestparametercode', false);\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            subSampleSkip = this.props.Login.subSampleSkip === undefined ? subSampleSkip : this.props.Login.subSampleSkip\r\n            subSampleTake = this.props.Login.subSampleTake || subSampleTake\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\r\n                instrumentDataState = this.props.Login.instrumentDataState;\r\n            }\r\n            if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\r\n                taskDataState = this.props.Login.taskDataState;\r\n            }\r\n            if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\r\n                resultChangeDataState = this.props.Login.resultChangeDataState;\r\n            }\r\n            if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\r\n                historyDataState = this.props.Login.historyDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n            if (this.props.Login.sampleChangeDataState && this.props.Login.sampleChangeDataState !== previousProps.Login.sampleChangeDataState) {\r\n                sampleChangeDataState = this.props.Login.sampleChangeDataState;\r\n            }\r\n\r\n\r\n\r\n            // if (this.props.Login.enlLink !== previousProps.Login.enlLink) {\r\n\r\n            //     bool = true;\r\n\r\n            //     enlLink = this.props.Login.enlLink;\r\n            //     openELNSheet=true;\r\n\r\n\r\n            //     }\r\n\r\n\r\n            let selectFilterStatus = { ntransactionstatus: transactionStatus.PARTIAL, sfilterstatus: this.props.intl.formatMessage({ id: \"IDS_PARTIAL\" }), scolorhexcode: \"#800000\" }\r\n            const selectedFilters = this.props.Login.masterData.REFilterStatus || [];\r\n\r\n            const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\r\n\r\n            const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL)\r\n            if (selectedFiltersNew.length > 0 && index === -1) {\r\n                selectedFiltersNew.push(selectFilterStatus)\r\n            }\r\n            selectedFilter = selectedFiltersNew;\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {masterData: this.props.Login.masterData,showTest,showSample }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            SampleType = SampleType.get(\"OptionList\")\r\n            RegistrationType = RegistrationType.get(\"OptionList\")\r\n            RegistrationSubType = RegistrationSubType.get(\"OptionList\")\r\n            REFilterStatus = REFilterStatus.get(\"OptionList\")\r\n            REJobStatus = REJobStatus.get(\"OptionList\")\r\n            Testvalues = Testvalues.get(\"OptionList\")\r\n            Batchvalues = Batchvalues.get(\"OptionList\")\r\n            Worklistvalues = Worklistvalues.get(\"OptionList\")\r\n            ConfigurationFilterValues = ConfigurationFilterValues.get(\"OptionList\")\r\n            ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\")\r\n            // AdhocParamter=AdhocParamter.get(\"OptionList\")\r\n        }\r\n\r\n        if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\r\n            activeTabIndex = this.props.Login.activeTabIndex;\r\n            activeTabId = this.props.Login.activeTabId;\r\n            bool = true;\r\n        }\r\n\r\n        if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\r\n\r\n            const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\",\r\n                \"sregtemplatename\", undefined, undefined, false);\r\n\r\n            stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\")\r\n        }\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                showTest, showSample, userRoleControlRights, controlMap, resultDataState, instrumentDataState,\r\n                materialDataState, taskDataState, documentDataState, resultChangeDataState, testCommentDataState,\r\n                historyDataState, sampleListColumns, subSampleListColumns, testListColumns,\r\n                SingleItem, sampleListMainField, subSampleListMainField, testListMainField,\r\n                SampleGridItem, SampleGridExpandableItem, sampleMoreField, subSampleMoreField,\r\n                testMoreField, selectedRecord,\r\n                SampleType,\r\n                RegistrationType,\r\n                RegistrationSubType,\r\n                REFilterStatus,\r\n                REJobStatus,\r\n                Testvalues,\r\n                Batchvalues,\r\n                Worklistvalues,\r\n                ConfigurationFilterValues,\r\n                ApprovalConfigVersion,\r\n                validateFormulaMandyFields,\r\n                skip, take, testskip, testtake,\r\n                selectedFilter,\r\n                DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns,\r\n                DynamicGridItem, DynamicGridMoreField, stateDynamicDesign,\r\n                activeTabIndex, activeTabId, sampleChangeDataState, testSearchField, AdhocParamter\r\n                , parameterResults, isParameterInitialRender, isaddSampleRender, selectedRecordTaskForm, isTaskInitialRender,\r\n                selectedRecordMaterialForm, isMaterialInitialRender,\r\n                selectedRecordInstrumentForm, isInstrumentInitialRender, selectedRecordCompleteForm, isCompleteInitialRender\r\n                //,currentAlertResultCode,currentntestgrouptestpredefcode\r\n                , subSampleSkip, subSampleTake, sampleSearchField, subsampleSearchField, selectedRecordAdhocParameter, samplefilteritem, sampledisplayfields,\r\n            })\r\n        }\r\n\r\n        if (this.props.Login.meanTestParameterList !== previousProps.Login.meanTestParameterList) {\r\n            this.setState({ meanTestParameterList: this.props.Login.meanTestParameterList });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, activeTabIndex: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        // if (props.Login.selectedRecord !== state.selectedRecord) {\r\n        //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\r\n        // }\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nconst mapStatetoProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStatetoProps, {\r\n    crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule,\r\n    completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord, fetchTaskRecord,\r\n    parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType, fetchMaterialRecord,\r\n    getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus, getSampleChildTabREDetail,\r\n    viewAttachment, getAttachmentCombo, deleteAttachment, resultImportFile, validateEsignCredentialComplete, getCommentsCombo, updateTestMethodSource,\r\n    filterTransactionList, validateEsignCredential, updateParameterComments, previewSampleReport, getMeanCalculationTestParameter,\r\n    getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial, getAvailableMaterialQuantity, testStart,\r\n    getSubSampleChildTabDetail, getSampleChildTabDetail, getREFilterTemplate, getAverageResult, getREMaterialComboGet//,deleteResultUsedMaterial\r\n    , getPredefinedData\r\n    , getELNTestValidation\r\n    , getConfigurationFilter, getTestBasedBatchWorklist, addREAdhocParamter, createAdhocParamter, enforceResult, ResultEntryViewPatientDetails, resultEntryGetParameter, resultEntryGetSpec, resultEntryGetComponent, addREAdhocTestParamter, createAdhocTestParamter,\r\n    CompletePopupAction, exportAction, getSectionChange, updateSectionTest, getResultEntryFilter\r\n\r\n})(injectIntl(ResultEntry));"]},"metadata":{},"sourceType":"module"}