{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\release\\\\ReleaseReportHistory.jsx\";\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport 'rc-tabs/assets/index.css';\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport Tabs, { TabPane } from \"rc-tabs\";\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport { formCode, SampleType } from '../../components/Enumeration';\nimport DataGrid from '../../components/data-grid/data-grid.component';\n\nclass ReleaseReportHistory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTabChange = tab => {\n      this.setState({\n        selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\n      });\n    };\n\n    this.preliminaryHistoryDataStateChange = event => {\n      this.setState({\n        preliminaryHistoryDataState: event.dataState,\n        dataResult: process(this.state.data, event.dataState)\n      }); // this.expandNextData(event.dataState);\n    };\n\n    this.releaseHistoryDataStateChange = event => {\n      this.setState({\n        releaseyHistoryDataState: event.dataState,\n        dataResult: process(this.state.data, event.dataState)\n      }); // this.expandNextData(event.dataState);\n    };\n\n    this.regenerateHistoryDataStateChange = event => {\n      this.setState({\n        regenerateHistoryDataState: event.dataState,\n        dataResult: process(this.state.data, event.dataState)\n      }); // this.expandNextData(event.dataState);\n    };\n\n    const preliminaryHistoryDataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    const releaseyHistoryDataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    const regenerateHistoryDataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    const screens = [];\n    screens.push({\n      eventKey: 'PreliminaryReportHistory',\n      name: \"IDS_PRELIMINARYHISTORY\",\n      formcode: formCode.RESULTENTRY\n    }, {\n      eventKey: 'ReleaseReportHistory',\n      name: \"IDS_RELEASEHISTORY\",\n      formcode: formCode.APPROVAL\n    }, {\n      eventKey: 'RegenerateReportHistory',\n      name: \"IDS_REGENERATEHISTORY\",\n      formcode: formCode.RELEASE\n    });\n    this.state = {\n      screens,\n      preliminaryHistoryDataState: preliminaryHistoryDataState,\n      releaseyHistoryDataState: releaseyHistoryDataState,\n      regenerateHistoryDataState: regenerateHistoryDataState,\n      selectedScreen: {\n        eventKey: 'PreliminaryReportHistory',\n        name: \"IDS_PRELIMINARYHISTORY\",\n        formcode: 43\n      }\n    };\n  }\n\n  render() {\n    //console.log(\"props:\",this.props, this.state.screens, this.state.selectedScreen);\n    const extractedColumnList = [];\n\n    if (this.state && this.state.selectedScreen && (this.state.selectedScreen.eventKey === \"ReleaseReportHistory\" || this.state.selectedScreen.eventKey === \"RegenerateReportHistory\")) {\n      extractedColumnList.push({\n        \"idsName\": \"IDS_REPORTREFERENCENO\",\n        \"dataField\": \"sreportno\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_VERSION\",\n        \"dataField\": \"nversionno\",\n        \"width\": \"75px\"\n      }, {\n        \"idsName\": \"IDS_USER\",\n        \"dataField\": \"susername\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_USERROLE\",\n        \"dataField\": \"suserrolename\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_GENERATEDDATETIME\",\n        \"dataField\": \"sgenerateddate\",\n        \"width\": \"155px\"\n      });\n    } else {\n      extractedColumnList.push({\n        \"idsName\": \"IDS_PRELIMINARYREFERENCENO\",\n        \"dataField\": \"ncoaparentcode\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_USER\",\n        \"dataField\": \"susername\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_USERROLE\",\n        \"dataField\": \"suserrolename\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_GENERATEDDATETIME\",\n        \"dataField\": \"sgenerateddate\",\n        \"width\": \"155px\"\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AtTabs, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      activeKey: this.state.selectedScreen.eventKey,\n      moreIcon: \"...\",\n      onChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, this.state.screens.map(screen => /*#__PURE__*/React.createElement(TabPane, {\n      name: screen.eventKey,\n      tab: this.props.intl.formatMessage({\n        id: screen.name\n      }),\n      key: screen.eventKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataGrid, {\n      key: \"ncoaparentcode\",\n      primaryKeyField: \"ncoaparentcode\",\n      data: this.props.dataResult[this.state.selectedScreen.eventKey] || [],\n      dataResult: this.props.dataResult[this.state.selectedScreen.eventKey],\n      dataState: this.state && this.state.selectedScreen && this.state.selectedScreen.eventKey === \"PreliminaryReportHistory\" ? this.state.preliminaryHistoryDataState : this.state && this.state.selectedScreen && this.state.selectedScreen.eventKey === \"ReleaseReportHistory\" ? this.state.releaseyHistoryDataState : this.state.regenerateHistoryDataState //expandField=\"expanded\"\n      ,\n      isExportExcelRequired: false,\n      dataStateChange: this.state && this.state.selectedScreen && this.state.selectedScreen.eventKey === \"PreliminaryReportHistory\" ? this.preliminaryHistoryDataStateChange : this.state && this.state.selectedScreen && this.state.selectedScreen.eventKey === \"ReleaseReportHistory\" ? this.releaseHistoryDataStateChange : this.regenerateHistoryDataStateChange,\n      extractedColumnList: extractedColumnList,\n      controlMap: this.props.controlMap,\n      userRoleControlRights: this.props.userRoleControlRights // detailedFieldList={this.props.detailedFieldList}\n      // //editParam={editReportParam}\n      // selectedId={this.props.Login.selectedId}\n      // fetchRecord={this.props.fetchReportInfoReleaseById}\n      ,\n      pageable: true // dataStateChange={this.dataStateChange}\n      ,\n      scrollable: 'scrollable',\n      gridHeight: '630px',\n      isActionRequired: this.state && this.state.selectedScreen.eventKey === \"RegenerateReportHistory\" ? false : true,\n      methodUrl: 'ReleaseVersion',\n      isDownload: this.state && this.state.selectedScreen.eventKey === \"RegenerateReportHistory\" ? false : true,\n      viewDownloadFile: this.props.viewDownloadFile // actionIcons={[{\n      //     title: this.props.intl.formatMessage({ id: \"IDS_PREVIOUSRESULTVIEW\" }),\n      //     controlname: \"faEye\",\n      //     objectName: \"ExceptionLogs\",\n      //     hidden: -1 === -1,\n      //    onClick: (viewSample) => this.props.viewSample(viewSample)\n      // }]}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 45\n      }\n    }))))))))));\n  }\n\n}\n\nexport default injectIntl(ReleaseReportHistory);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/release/ReleaseReportHistory.jsx"],"names":["Grid","GridColumn","LocalizationProvider","React","injectIntl","AtTabs","CustomSwitch","PerfectScrollbar","Tabs","TabPane","AtTableWrap","formCode","SampleType","DataGrid","ReleaseReportHistory","Component","constructor","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","preliminaryHistoryDataStateChange","event","preliminaryHistoryDataState","dataState","dataResult","process","data","releaseHistoryDataStateChange","releaseyHistoryDataState","regenerateHistoryDataStateChange","regenerateHistoryDataState","skip","take","settings","parseInt","push","name","formcode","RESULTENTRY","APPROVAL","RELEASE","render","extractedColumnList","map","intl","formatMessage","id","controlMap","userRoleControlRights","viewDownloadFile"],"mappings":"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","sourcesContent":["import { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport React from 'react'\r\nimport { injectIntl } from 'react-intl'\r\nimport 'rc-tabs/assets/index.css';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\n\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Tabs, { TabPane } from \"rc-tabs\";\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { formCode, SampleType } from '../../components/Enumeration';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\n\r\nclass ReleaseReportHistory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const preliminaryHistoryDataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        const releaseyHistoryDataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        const regenerateHistoryDataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n    \r\n        const screens = [];      \r\n\r\n        screens.push({ eventKey: 'PreliminaryReportHistory', name: \"IDS_PRELIMINARYHISTORY\", formcode: formCode.RESULTENTRY },\r\n                    { eventKey: 'ReleaseReportHistory', name: \"IDS_RELEASEHISTORY\", formcode: formCode.APPROVAL },\r\n                    { eventKey: 'RegenerateReportHistory', name: \"IDS_REGENERATEHISTORY\", formcode: formCode.RELEASE }\r\n                    );\r\n\r\n        \r\n           \r\n        \r\n        \r\n        this.state = {\r\n            screens, preliminaryHistoryDataState: preliminaryHistoryDataState, releaseyHistoryDataState: releaseyHistoryDataState,\r\n            regenerateHistoryDataState:regenerateHistoryDataState,\r\n            selectedScreen: { eventKey: 'PreliminaryReportHistory', name: \"IDS_PRELIMINARYHISTORY\", formcode: 43 }\r\n        }\r\n    }\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\r\n        })\r\n    }\r\n    preliminaryHistoryDataStateChange = (event) => {\r\n\r\n\r\n        this.setState({ preliminaryHistoryDataState: event.dataState, dataResult: process(this.state.data, event.dataState) })\r\n        // this.expandNextData(event.dataState);\r\n    }\r\n    releaseHistoryDataStateChange = (event) => {\r\n\r\n\r\n        this.setState({ releaseyHistoryDataState: event.dataState, dataResult: process(this.state.data, event.dataState) })\r\n        // this.expandNextData(event.dataState);\r\n    }\r\n    regenerateHistoryDataStateChange = (event) => {\r\n\r\n\r\n        this.setState({ regenerateHistoryDataState: event.dataState, dataResult: process(this.state.data, event.dataState) })\r\n        // this.expandNextData(event.dataState);\r\n    }\r\n    render() {\r\n        //console.log(\"props:\",this.props, this.state.screens, this.state.selectedScreen);\r\n        const extractedColumnList = [];\r\n        if (this.state && this.state.selectedScreen &&\r\n            (this.state.selectedScreen.eventKey === \"ReleaseReportHistory\" || this.state.selectedScreen.eventKey === \"RegenerateReportHistory\")) {\r\n            extractedColumnList.push(\r\n                { \"idsName\": \"IDS_REPORTREFERENCENO\", \"dataField\": \"sreportno\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_VERSION\", \"dataField\": \"nversionno\", \"width\": \"75px\" },\r\n                { \"idsName\": \"IDS_USER\", \"dataField\": \"susername\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_GENERATEDDATETIME\", \"dataField\": \"sgenerateddate\", \"width\": \"155px\" }\r\n            );\r\n        }  \r\n        else {\r\n            extractedColumnList.push(\r\n                { \"idsName\": \"IDS_PRELIMINARYREFERENCENO\", \"dataField\": \"ncoaparentcode\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_USER\", \"dataField\": \"susername\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_GENERATEDDATETIME\", \"dataField\": \"sgenerateddate\", \"width\": \"155px\" }\r\n            );\r\n        }\r\n       \r\n        return (\r\n            <>\r\n            {\r\n                <AtTabs>\r\n                    <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                        {this.state.screens.map(screen =>\r\n                            <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n                                <PerfectScrollbar>\r\n                                    {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                                    <AtTableWrap className=\"at-list-table\">\r\n                                        <LocalizationProvider language=\"lang\">\r\n                                            <>\r\n                                            <DataGrid\r\n                        key=\"ncoaparentcode\"\r\n                        primaryKeyField=\"ncoaparentcode\"\r\n                        data={this.props.dataResult[this.state.selectedScreen.eventKey] || []}\r\n                        dataResult={this.props.dataResult[this.state.selectedScreen.eventKey]}\r\n                        dataState={this.state && this.state.selectedScreen &&\r\n                            this.state.selectedScreen.eventKey === \"PreliminaryReportHistory\"?this.state.preliminaryHistoryDataState:\r\n                            this.state && this.state.selectedScreen &&\r\n                            this.state.selectedScreen.eventKey === \"ReleaseReportHistory\"?this.state.releaseyHistoryDataState:this.state.regenerateHistoryDataState}\r\n                        //expandField=\"expanded\"\r\n                        isExportExcelRequired={false}\r\n                        dataStateChange={this.state && this.state.selectedScreen &&\r\n                            this.state.selectedScreen.eventKey === \"PreliminaryReportHistory\"?this.preliminaryHistoryDataStateChange:\r\n                            this.state && this.state.selectedScreen &&\r\n                            this.state.selectedScreen.eventKey === \"ReleaseReportHistory\"?this.releaseHistoryDataStateChange:this.regenerateHistoryDataStateChange}\r\n                        extractedColumnList = {extractedColumnList}\r\n                        controlMap={this.props.controlMap}\r\n                        userRoleControlRights={this.props.userRoleControlRights}\r\n                    // detailedFieldList={this.props.detailedFieldList}\r\n                    // //editParam={editReportParam}\r\n                    // selectedId={this.props.Login.selectedId}\r\n                    // fetchRecord={this.props.fetchReportInfoReleaseById}\r\n                        pageable={true}\r\n                        // dataStateChange={this.dataStateChange}\r\n                        scrollable={'scrollable'}\r\n                        gridHeight={'630px'}\r\n                        isActionRequired={this.state&&this.state.selectedScreen.eventKey===\"RegenerateReportHistory\"?false:true}\r\n                        methodUrl={'ReleaseVersion'}\r\n                        isDownload={this.state&&this.state.selectedScreen.eventKey===\"RegenerateReportHistory\"?false:true}\r\n                        viewDownloadFile={this.props.viewDownloadFile}\r\n                    // actionIcons={[{\r\n                    //     title: this.props.intl.formatMessage({ id: \"IDS_PREVIOUSRESULTVIEW\" }),\r\n                    //     controlname: \"faEye\",\r\n                    //     objectName: \"ExceptionLogs\",\r\n                    //     hidden: -1 === -1,\r\n                    //    onClick: (viewSample) => this.props.viewSample(viewSample)\r\n                    // }]}\r\n                >\r\n                </DataGrid>\r\n\r\n                                            </>\r\n                                        </LocalizationProvider>\r\n                                    </AtTableWrap>\r\n                                    {/* <ReactTooltip /> */}\r\n                                </PerfectScrollbar>\r\n                            </TabPane>\r\n                        )}\r\n                    </Tabs>\r\n                </AtTabs>\r\n            }\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(ReleaseReportHistory)"]},"metadata":{},"sourceType":"module"}