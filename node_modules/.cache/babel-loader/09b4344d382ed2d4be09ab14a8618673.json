{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { transactionStatus } from '../components/Enumeration';\nexport function openFTPConfigModal(userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"site/getSiteForFTP\", {\n      \"userinfo\": userInfo\n    }).then(response => {\n      const selectedRecord = {};\n      const siteList = response.data[\"SiteList\"] || [];\n      selectedRecord['nsitecode'] = siteList.length > 0 ? siteList[0].ndefaultstatus === transactionStatus.YES ? siteList[0].nsitecode : -1 : -1;\n      selectedRecord['siteValue'] = siteList.length > 0 ? siteList[0].ndefaultstatus === transactionStatus.YES ? [{\n        value: siteList[0].nsitecode,\n        label: siteList[0].ssitename,\n        item: siteList[0]\n      }] : [] : [];\n      selectedRecord[\"sphysicalpath\"] = response.data[\"CheckSumDefaultPath\"];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          operation: \"create\",\n          siteOptions: siteList,\n          checkSumDefaultPath: response.data[\"CheckSumDefaultPath\"],\n          selectedRecord,\n          ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n;\nexport function fetchFTPConfigByID(editParam) {\n  return function (dispatch) {\n    const url1 = rsapi.post(\"site/getSiteForFTP\", {\n      \"userinfo\": editParam.userInfo\n    });\n    const url2 = rsapi.post(\"ftpconfig/getActiveFTPConfigById\", {\n      [editParam.primaryKeyField]: editParam.primaryKeyValue,\n      \"userinfo\": editParam.userInfo\n    });\n    dispatch(initRequest(true));\n    Axios.all([url1, url2]).then(response => {\n      let selectedId = editParam.primaryKeyValue;\n      let selectedRecord = response[1].data;\n      selectedRecord['siteValue'] = {\n        value: response[1].data.nsitecode,\n        label: response[1].data.ssitename\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          selectedRecord,\n          operation: editParam.operation,\n          screenName: editParam.screenName,\n          siteOptions: response[0].data,\n          ncontrolcode: editParam.ncontrolCode,\n          inputparam: editParam.inputparam,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/FTPConfigAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","transactionStatus","openFTPConfigModal","userInfo","ncontrolcode","dispatch","post","then","response","selectedRecord","siteList","data","length","ndefaultstatus","YES","nsitecode","value","label","ssitename","item","type","payload","openModal","operation","siteOptions","checkSumDefaultPath","loading","catch","error","status","message","warn","fetchFTPConfigByID","editParam","url1","url2","primaryKeyField","primaryKeyValue","all","selectedId","screenName","ncontrolCode","inputparam"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios'\r\nimport { initRequest } from './LoginAction';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function openFTPConfigModal  (userInfo,ncontrolcode)  {\r\n\r\n    return function(dispatch){\r\n    dispatch(initRequest(true));\r\n    rsapi.post(\"site/getSiteForFTP\",{\"userinfo\": userInfo})\r\n    .then(response=> { \r\n        const selectedRecord={};\r\n        const siteList = response.data[\"SiteList\"] || [];\r\n        selectedRecord['nsitecode']=siteList.length>0?\r\n                                    siteList[0].ndefaultstatus===transactionStatus.YES?\r\n                                    siteList[0].nsitecode\r\n                                    :-1:-1\r\n        selectedRecord['siteValue']=siteList.length>0? siteList[0].ndefaultstatus===transactionStatus.YES?  \r\n                                    [{value:siteList[0].nsitecode,label:siteList[0].ssitename,item:siteList[0]}]\r\n                                    :[]:[]\r\n        selectedRecord[\"sphysicalpath\"]= response.data[\"CheckSumDefaultPath\"];\r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload:{\r\n                openModal:true,\r\n                operation:\"create\",\r\n                siteOptions:siteList,\r\n                checkSumDefaultPath: response.data[\"CheckSumDefaultPath\"],\r\n                selectedRecord,ncontrolcode    \r\n                ,loading:false           \r\n                }\r\n            }) \r\n    })\r\n    .catch(error => {\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n        if (error.response.status === 500){\r\n            toast.error(error.message);\r\n        } \r\n        else{               \r\n            toast.warn(error.response.data);\r\n        }         \r\n    })\r\n}\r\n};\r\n\r\nexport function fetchFTPConfigByID(editParam){\r\n\r\n    return function(dispatch){\r\n    const url1=rsapi.post(\"site/getSiteForFTP\",{\"userinfo\": editParam.userInfo})\r\n    const url2=rsapi.post(\"ftpconfig/getActiveFTPConfigById\",\r\n            { [editParam.primaryKeyField] :editParam.primaryKeyValue,\"userinfo\":editParam.userInfo} )\r\n    dispatch(initRequest(true));\r\n    Axios.all([url1,url2])\r\n    .then(response=> { \r\n        let selectedId=editParam.primaryKeyValue\r\n        let selectedRecord=response[1].data\r\n        selectedRecord['siteValue']={value:response[1].data.nsitecode,label:response[1].data.ssitename}\r\n        \r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload:{\r\n            openModal:true, \r\n            selectedRecord , \r\n            operation:editParam.operation,\r\n            screenName:editParam.screenName,\r\n            siteOptions:response[0].data,\r\n            ncontrolcode:editParam.ncontrolCode,\r\n            inputparam:editParam.inputparam,\r\n            loading:false,selectedId\r\n        }}) \r\n    })\r\n    .catch(error => {\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n        if (error.response.status === 500){\r\n            toast.error(error.message);\r\n        } \r\n        else{               \r\n            toast.warn(error.response.data);\r\n        }         \r\n    })\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}