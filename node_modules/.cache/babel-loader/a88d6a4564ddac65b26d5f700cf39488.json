{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructOptionList, sortData } from '../components/CommonScript'; //, getComboLabelValue, searchData\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getEditData(nbulkbarcodeconfigcode, userInfo, masterData, ncontrolcode, screenName) {\n  return function (dispatch) {\n    if (masterData.selectedBulkBarcodeConfig[\"ntransactionstatus\"] === transactionStatus.APPROVED || masterData.selectedBulkBarcodeConfig[\"ntransactionstatus\"] === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTRECORD\"\n      }));\n    } else {\n      const inputData = {\n        nbulkbarcodeconfigcode: nbulkbarcodeconfigcode,\n        userinfo: userInfo\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"bulkbarcodeconfiguration/getActiveBulkBarcodeConfigurationById\", inputData).then(response => {\n        let selectedRecord = {};\n        selectedRecord = {\n          'sconfigname': response.data.sconfigname,\n          'nbarcodelength': response.data.nbarcodelength,\n          'sdescription': response.data.sdescription,\n          'nprojecttypecode': {\n            'label': response.data.sprojecttypename,\n            'value': response.data.nprojecttypecode\n          },\n          'nbulkbarcodeconfigcode': response.data.nbulkbarcodeconfigcode\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            selectedRecord,\n            masterData,\n            ncontrolcode: ncontrolcode,\n            loadBulkBarcodeConfig: true,\n            loadBarcodeMaster: false,\n            loading: false,\n            screenName: screenName,\n            operation: 'update'\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function getFilterProjectType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"bulkbarcodeconfiguration/getFilterProjectType\", {\n      'userinfo': inputParam.inputData.userinfo,\n      'nprojecttypecode': inputParam.inputData.nprojecttypecode\n    }).then(response => {\n      let masterData = {};\n      masterData = { ...inputParam.inputData.masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function getBulkBarcodeConfigDetail(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"bulkbarcodeconfiguration/getBulkBarcodeConfig\", {\n      'userinfo': inputParam.userinfo,\n      'nprojecttypecode': inputParam.nprojecttypecode || -1,\n      'nbulkbarcodeconfigcode': inputParam.nbulkbarcodeconfigcode || -1\n    }).then(response => {\n      let masterData = {};\n      masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addBarcodeMaster(screenName, userInfo, operation, masterData, fieldName, ncontrolcode) {\n  return function (dispatch) {\n    if (masterData.selectedBulkBarcodeConfig.ntransactionstatus === transactionStatus.APPROVED || masterData.selectedBulkBarcodeConfig.ntransactionstatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTRECORD\"\n      }));\n    } else {\n      dispatch(initRequest(true));\n      return rsapi.post(\"bulkbarcodeconfiguration/getBarcodeMaster\", {\n        'userinfo': userInfo,\n        \"nbulkbarcodeconfigcode\": masterData.selectedBulkBarcodeConfig.nbulkbarcodeconfigcode\n      }).then(response => {\n        const bulkBarcodeMasterMap = constructOptionList(response.data.BulkBarcodeMaster || [], \"nbarcodemastercode\", \"sformname\", undefined, undefined, false);\n        const bulkBarcodeMasterList = bulkBarcodeMasterMap.get(\"OptionList\");\n        masterData = { ...masterData,\n          ...response.data\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            bulkBarcodeMasterList,\n            masterData,\n            loading: false,\n            openChildModal: true,\n            loadBarcodeMaster: true,\n            fieldName: fieldName,\n            loadBulkBarcodeConfig: false,\n            operation: operation,\n            selectedMasterRecord: undefined,\n            screenName,\n            ncontrolcode: ncontrolcode\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function getFieldLengthService(methodParam) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/bulkbarcodeconfiguration/getFieldLengthService\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nprojecttypecode\": methodParam.inputData.nprojecttypecode,\n      'stablename': methodParam.inputData.stablename\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      let selectedMasterRecord = {};\n      selectedMasterRecord = { ...methodParam.inputData.selectedMasterRecord,\n        'nfieldlength': response[0].data && (response[0].data.FieldLength || \"\")\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          data: undefined,\n          dataState: undefined,\n          selectedMasterRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getParentBarcodeService(methodParam) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/bulkbarcodeconfiguration/getParentBulkBarcodeMaster\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nprojecttypecode\": methodParam.inputData.nprojecttypecode,\n      'nbulkbarcodeconfigcode': methodParam.inputData.masterData.selectedBulkBarcodeConfig.nbulkbarcodeconfigcode,\n      'selectedBarcodeFormatting': methodParam.inputData.selectedMasterRecord && methodParam.inputData.selectedMasterRecord.nbarcodemastercode && methodParam.inputData.selectedMasterRecord.nbarcodemastercode.item\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      // let masterData = {};\n      const bulkBarcodeMasterMap = constructOptionList(response[0].data.ParentBarcodeDetails || [], \"nbulkbarcodeconfigdetailscode\", \"sdisplayname\", undefined, undefined, false);\n      const ParentBarcodeMasterList = bulkBarcodeMasterMap.get(\"OptionList\"); //  masterData = { ...methodParam.inputData.masterData, ...response.data };\n\n      let selectedMasterRecord = { ...methodParam.inputData.selectedMasterRecord\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          data: undefined,\n          dataState: undefined,\n          ParentBarcodeMasterList,\n          selectedMasterRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getBulkBarcodeDetailsEditData(fetchRecord) {\n  return function (dispatch) {\n    if (fetchRecord.masterData.selectedBulkBarcodeConfig.ntransactionstatus === transactionStatus.APPROVED || fetchRecord.masterData.selectedBulkBarcodeConfig.ntransactionstatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTRECORD\"\n      }));\n    } else {\n      let urlArray = [];\n      let selectedId = null;\n      const ActiveByID = rsapi.post(\"/bulkbarcodeconfiguration/getActiveBulkBarcodeMasterById\", {\n        \"nbulkbarcodeconfigdetailscode\": fetchRecord.editRow.nbulkbarcodeconfigdetailscode,\n        \"userinfo\": fetchRecord.userInfo\n      });\n      urlArray = [ActiveByID];\n      selectedId = fetchRecord.editRow.nbulkbarcodeconfigdetailscode;\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedMasterRecord = {};\n        selectedMasterRecord = {\n          \"nbarcodemastercode\": {\n            label: response[0].data.sformname,\n            value: response[0].data.nbarcodemastercode\n          },\n          \"sfieldname\": response[0].data.sfieldname,\n          \"nfieldlength\": response[0].data.nfieldlength,\n          \"nsorter\": response[0].data.nsorter,\n          \"sdescription\": response[0].data.sdescription === 'null' ? \"\" : response[0].data.sdescription,\n          \"isneedparent\": response[0].data.isneedparent,\n          \"isvalidationrequired\": response[0].data.isvalidationrequired,\n          //ALPD-5082 Added isvalidationrequired to send value to the backend by VISHAKH\n          \"nparentmastercode\": response[0].data.isneedparent === transactionStatus.YES ? {\n            label: response[0].data.sparentformname,\n            value: response[0].data.nparentnbarcodemastercode\n          } : undefined,\n          nbulkbarcodeconfigdetailscode: response[0].data.nbulkbarcodeconfigdetailscode\n        };\n        let fieldName = response[0].data.nneedmaster === transactionStatus.YES ? \"barcodemaster\" : \"\";\n        let screenname = response[0].data.nneedmaster === transactionStatus.YES ? \"IDS_BARCODEMASTERNAME\" : \"IDS_BARCODEFORMATTINGFIELD\";\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openChildModal: true,\n            operation: fetchRecord.operation,\n            selectedMasterRecord,\n            fieldName,\n            loadBulkBarcodeConfig: false,\n            ncontrolcode: fetchRecord.ncontrolCode,\n            loadBarcodeMaster: true,\n            screenName: screenname,\n            loading: false,\n            selectedId\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function saveBarcodeMaster(inputParam, masterData, modalName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n    requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n    });\n    return requestUrl.then(response => {\n      let openModal = false;\n      const retrievedData = sortData(response.data);\n      masterData = { ...masterData,\n        ...retrievedData\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadEsign: false,\n          loadBarcodeMaster: true,\n          selectedId: inputParam.selectedId,\n          loading: false,\n          masterData,\n          [modalName]: openModal,\n          selectedMasterRecord: {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignCredentialSaveBarcodeMaster(inputParam, modalName) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n        dispatch(saveBarcodeMaster(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"], modalName));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/actions/BulkBarcodeConfigAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","sortData","toast","Axios","initRequest","intl","transactionStatus","getEditData","nbulkbarcodeconfigcode","userInfo","masterData","ncontrolcode","screenName","dispatch","selectedBulkBarcodeConfig","APPROVED","RETIRED","warn","formatMessage","id","inputData","userinfo","post","then","response","selectedRecord","data","sconfigname","nbarcodelength","sdescription","sprojecttypename","nprojecttypecode","type","payload","openModal","loadBulkBarcodeConfig","loadBarcodeMaster","loading","operation","catch","error","status","message","getFilterProjectType","inputParam","getBulkBarcodeConfigDetail","addBarcodeMaster","fieldName","ntransactionstatus","bulkBarcodeMasterMap","BulkBarcodeMaster","undefined","bulkBarcodeMasterList","get","openChildModal","selectedMasterRecord","getFieldLengthService","methodParam","URL","stablename","all","FieldLength","dataState","getParentBarcodeService","nbarcodemastercode","item","ParentBarcodeDetails","ParentBarcodeMasterList","getBulkBarcodeDetailsEditData","fetchRecord","urlArray","selectedId","ActiveByID","editRow","nbulkbarcodeconfigdetailscode","label","sformname","value","sfieldname","nfieldlength","nsorter","isneedparent","isvalidationrequired","YES","sparentformname","nparentnbarcodemastercode","nneedmaster","screenname","ncontrolCode","saveBarcodeMaster","modalName","requestUrl","classUrl","methodUrl","retrievedData","loadEsign","validateEsignCredentialSaveBarcodeMaster"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { constructOptionList, sortData } from '../components/CommonScript'//, getComboLabelValue, searchData\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getEditData(nbulkbarcodeconfigcode, userInfo, masterData, ncontrolcode, screenName) {\r\n    return function (dispatch) {\r\n        if (masterData.selectedBulkBarcodeConfig[\"ntransactionstatus\"] === transactionStatus.APPROVED ||\r\n            masterData.selectedBulkBarcodeConfig[\"ntransactionstatus\"] === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORD\" }));\r\n        } else {\r\n            const inputData = {\r\n                nbulkbarcodeconfigcode: nbulkbarcodeconfigcode,\r\n                userinfo: userInfo\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"bulkbarcodeconfiguration/getActiveBulkBarcodeConfigurationById\", inputData)\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                    selectedRecord = {\r\n                        'sconfigname': response.data.sconfigname,\r\n                        'nbarcodelength': response.data.nbarcodelength,\r\n                        'sdescription': response.data.sdescription,\r\n                        'nprojecttypecode': {\r\n                            'label': response.data.sprojecttypename,\r\n                            'value': response.data.nprojecttypecode\r\n                        },\r\n                        'nbulkbarcodeconfigcode': response.data.nbulkbarcodeconfigcode\r\n                    }\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            openModal: true, selectedRecord, masterData,\r\n                            ncontrolcode: ncontrolcode, loadBulkBarcodeConfig: true,loadBarcodeMaster:false,\r\n                            loading: false, screenName: screenName, operation: 'update',\r\n\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport function getFilterProjectType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"bulkbarcodeconfiguration/getFilterProjectType\", {\r\n            'userinfo': inputParam.inputData.userinfo,\r\n            'nprojecttypecode': inputParam.inputData.nprojecttypecode\r\n        })\r\n            .then(response => {\r\n                let masterData = {};\r\n                masterData = { ...inputParam.inputData.masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getBulkBarcodeConfigDetail(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"bulkbarcodeconfiguration/getBulkBarcodeConfig\", {\r\n            'userinfo': inputParam.userinfo,\r\n            'nprojecttypecode': inputParam.nprojecttypecode || -1,\r\n            'nbulkbarcodeconfigcode': inputParam.nbulkbarcodeconfigcode || -1\r\n        })\r\n            .then(response => {\r\n                let masterData = {};\r\n                masterData = { ...inputParam.masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function addBarcodeMaster(screenName, userInfo, operation, masterData,fieldName,ncontrolcode) {\r\n    return function (dispatch) {\r\n        if (masterData.selectedBulkBarcodeConfig.ntransactionstatus === transactionStatus.APPROVED ||\r\n            masterData.selectedBulkBarcodeConfig.ntransactionstatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORD\" }));\r\n        } else {\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"bulkbarcodeconfiguration/getBarcodeMaster\", {\r\n                'userinfo': userInfo,\"nbulkbarcodeconfigcode\":masterData.selectedBulkBarcodeConfig.nbulkbarcodeconfigcode\r\n            })\r\n                .then(response => {\r\n                    const bulkBarcodeMasterMap = constructOptionList(response.data.BulkBarcodeMaster || [], \"nbarcodemastercode\",\r\n                        \"sformname\", undefined, undefined, false);\r\n                    const bulkBarcodeMasterList = bulkBarcodeMasterMap.get(\"OptionList\");\r\n                    masterData = { ...masterData, ...response.data };\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            bulkBarcodeMasterList, masterData,\r\n                            loading: false, openChildModal: true, loadBarcodeMaster: true, fieldName: fieldName, loadBulkBarcodeConfig: false,\r\n                            operation: operation, selectedMasterRecord: undefined, screenName,ncontrolcode:ncontrolcode\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport function getFieldLengthService(methodParam) {\r\n    return function (dispatch) {\r\n        let URL = [];\r\n        URL = rsapi.post(\"/bulkbarcodeconfiguration/getFieldLengthService\",\r\n            {\r\n                \"userinfo\": methodParam.inputData.userinfo, \"nprojecttypecode\": methodParam.inputData.nprojecttypecode,\r\n                'stablename': methodParam.inputData.stablename\r\n            })\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL])\r\n            .then(response => {\r\n                let selectedMasterRecord = {};\r\n                selectedMasterRecord = {\r\n                    ...methodParam.inputData.selectedMasterRecord,\r\n                    'nfieldlength': response[0].data && (response[0].data.FieldLength || \"\")\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                        { loading: false, data: undefined, dataState: undefined, selectedMasterRecord }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getParentBarcodeService(methodParam) {\r\n    return function (dispatch) {\r\n        let URL = [];\r\n        URL = rsapi.post(\"/bulkbarcodeconfiguration/getParentBulkBarcodeMaster\",\r\n            {\r\n                \"userinfo\": methodParam.inputData.userinfo, \"nprojecttypecode\": methodParam.inputData.nprojecttypecode,\r\n                'nbulkbarcodeconfigcode': methodParam.inputData.masterData.selectedBulkBarcodeConfig.nbulkbarcodeconfigcode,\r\n                'selectedBarcodeFormatting': methodParam.inputData.selectedMasterRecord &&  \r\n                methodParam.inputData.selectedMasterRecord.nbarcodemastercode && \r\n                methodParam.inputData.selectedMasterRecord.nbarcodemastercode.item\r\n            })\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL])\r\n            .then(response => {\r\n               // let masterData = {};\r\n                const bulkBarcodeMasterMap = constructOptionList(response[0].data.ParentBarcodeDetails || [], \"nbulkbarcodeconfigdetailscode\",\r\n                    \"sdisplayname\", undefined, undefined, false);\r\n                const ParentBarcodeMasterList = bulkBarcodeMasterMap.get(\"OptionList\");\r\n              //  masterData = { ...methodParam.inputData.masterData, ...response.data };\r\n                let selectedMasterRecord = { ...methodParam.inputData.selectedMasterRecord };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                        { loading: false, data: undefined, dataState: undefined, ParentBarcodeMasterList, selectedMasterRecord }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getBulkBarcodeDetailsEditData(fetchRecord) {\r\n    return function (dispatch) {\r\n        if (fetchRecord.masterData.selectedBulkBarcodeConfig.ntransactionstatus === transactionStatus.APPROVED ||\r\n            fetchRecord.masterData.selectedBulkBarcodeConfig.ntransactionstatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORD\" }));\r\n        } else {\r\n            let urlArray = [];\r\n            let selectedId = null;\r\n            const ActiveByID = rsapi.post(\"/bulkbarcodeconfiguration/getActiveBulkBarcodeMasterById\",\r\n                {\r\n                    \"nbulkbarcodeconfigdetailscode\": fetchRecord.editRow.nbulkbarcodeconfigdetailscode,\r\n                    \"userinfo\": fetchRecord.userInfo\r\n                });\r\n            urlArray = [ActiveByID];\r\n            selectedId = fetchRecord.editRow.nbulkbarcodeconfigdetailscode;\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedMasterRecord = {};\r\n                    selectedMasterRecord = {\r\n                        \"nbarcodemastercode\": { label: response[0].data.sformname, value: response[0].data.nbarcodemastercode },\r\n                        \"sfieldname\": response[0].data.sfieldname,\r\n                        \"nfieldlength\": response[0].data.nfieldlength,\r\n                        \"nsorter\": response[0].data.nsorter,\r\n                        \"sdescription\": response[0].data.sdescription === 'null' ? \"\" : response[0].data.sdescription,\r\n                        \"isneedparent\": response[0].data.isneedparent,\r\n                        \"isvalidationrequired\": response[0].data.isvalidationrequired,\t//ALPD-5082 Added isvalidationrequired to send value to the backend by VISHAKH\r\n                        \"nparentmastercode\": response[0].data.isneedparent === transactionStatus.YES ?\r\n                            { label: response[0].data.sparentformname, value: response[0].data.nparentnbarcodemastercode } : undefined,\r\n                        nbulkbarcodeconfigdetailscode: response[0].data.nbulkbarcodeconfigdetailscode\r\n                    }\r\n                    let fieldName = response[0].data.nneedmaster === transactionStatus.YES ? \"barcodemaster\" : \"\";\r\n                    let screenname=response[0].data.nneedmaster === transactionStatus.YES? \"IDS_BARCODEMASTERNAME\" : \"IDS_BARCODEFORMATTINGFIELD\" ;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            openChildModal: true, operation: fetchRecord.operation,\r\n                            selectedMasterRecord, fieldName,loadBulkBarcodeConfig:false,\r\n                            ncontrolcode: fetchRecord.ncontrolCode, loadBarcodeMaster: true,\r\n                            screenName: screenname, loading: false, selectedId\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport function saveBarcodeMaster(inputParam, masterData, modalName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n        requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData });\r\n        return requestUrl\r\n            .then(response => {\r\n                let openModal = false;\r\n                const retrievedData = sortData(response.data);\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...retrievedData\r\n                }\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loadEsign: false, loadBarcodeMaster: true,selectedId: inputParam.selectedId, loading: false, masterData, [modalName]: openModal, selectedMasterRecord: {} } })\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function validateEsignCredentialSaveBarcodeMaster(inputParam, modalName) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                    dispatch(saveBarcodeMaster(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"], modalName))\r\n\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}