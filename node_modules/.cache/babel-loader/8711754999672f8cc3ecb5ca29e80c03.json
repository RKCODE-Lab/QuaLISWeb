{"ast":null,"code":"import React from'react';import{Row,Col}from'react-bootstrap';import FormSelectSearch from'../../../components/form-select-search/form-select-search.component';import{injectIntl}from'react-intl';var AddParticipants=function AddParticipants(props){return/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_SECTION\"}),isSearchable:true,name:\"nsectioncode\",isDisabled:false,placeholder:props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),isMandatory:true,isClearable:false,options:props.section// optionId='ntestcategorycode'\n// optionValue='stestcategoryname'\n// value={this.state.ntestcategorycode}\n// defaultValue={props.ntestcategorycode || []}\n,value:props.selectedRecord[\"nsectioncode\"]?props.selectedRecord[\"nsectioncode\"]:\"\",onChange:function onChange(value){return props.handleChange(value,\"nsectioncode\",\"Section\");},closeMenuOnSelect:true,alphabeticalSort:true}),/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_PARTICIPANTSNAME\"}),name:\"nusercode\",isDisabled:false,placeholder:props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),isMandatory:true,isClearable:false,showOption:props.isMulti,isMulti:true,options:props.sectionUsers||[],optionId:\"nusercode\",optionValue:\"sfullname\"// optionId='ntestcode'\n// optionValue='stestname'\n// value={props.selectedRecord.ntestcode ?  props.selectedRecord.ntestcode : \"\"}\n,value:props.selectedRecord?props.selectedRecord[props.isMulti?\"availableData\":\"nusercode\"]:\"\",onChange:function onChange(value){return props.handleChange(value,props.isMulti?\"availableData\":\"nusercode\",\"\");},closeMenuOnSelect:true,alphabeticalSort:true})));};export default injectIntl(AddParticipants);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/competencemanagement/trainingcertificate/AddParticipants.jsx"],"names":["React","Row","Col","FormSelectSearch","injectIntl","AddParticipants","props","intl","formatMessage","id","section","selectedRecord","value","handleChange","isMulti","sectionUsers"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,CAAcC,GAAd,KAAyB,iBAAzB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,qEAA7B,CAEA,OAASC,UAAT,KAA2B,YAA3B,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAW,CAE/B,mBACI,oBAAC,GAAD,mBACI,oBAAC,GAAD,EAAK,EAAE,CAAE,EAAT,eACA,oBAAC,gBAAD,EACQ,SAAS,CAAEA,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAE,aAAN,CAAzB,CADnB,CAEQ,YAAY,CAAE,IAFtB,CAGQ,IAAI,CAAE,cAHd,CAIQ,UAAU,CAAE,KAJpB,CAKQ,WAAW,CAAEH,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAE,kBAAN,CAAzB,CALrB,CAMQ,WAAW,CAAE,IANrB,CAOQ,WAAW,CAAE,KAPrB,CAQQ,OAAO,CAAEH,KAAK,CAACI,OACf;AACA;AACA;AACA;AAZR,CAaQ,KAAK,CAAEJ,KAAK,CAACK,cAAN,CAAqB,cAArB,EAAwCL,KAAK,CAACK,cAAN,CAAqB,cAArB,CAAxC,CAA+E,EAb9F,CAcQ,QAAQ,CAAE,kBAAAC,KAAK,QAAIN,CAAAA,KAAK,CAACO,YAAN,CAAmBD,KAAnB,CAA0B,cAA1B,CAA0C,SAA1C,CAAJ,EAdvB,CAeQ,iBAAiB,CAAE,IAf3B,CAgBQ,gBAAgB,CAAE,IAhB1B,EADA,cAoBI,oBAAC,gBAAD,EACI,SAAS,CAAEN,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAE,sBAAN,CAAzB,CADf,CAEI,IAAI,CAAE,WAFV,CAGI,UAAU,CAAE,KAHhB,CAII,WAAW,CAAEH,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAE,kBAAN,CAAzB,CAJjB,CAKI,WAAW,CAAE,IALjB,CAMI,WAAW,CAAE,KANjB,CAOI,UAAU,CAAEH,KAAK,CAACQ,OAPtB,CAQI,OAAO,CAAE,IARb,CASI,OAAO,CAAER,KAAK,CAACS,YAAN,EAAsB,EATnC,CAUI,QAAQ,CAAC,WAVb,CAWI,WAAW,CAAC,WACZ;AACA;AACA;AAdJ,CAeI,KAAK,CAAET,KAAK,CAACK,cAAN,CAAqBL,KAAK,CAACK,cAAN,CAAqBL,KAAK,CAACQ,OAAN,CAAc,eAAd,CAA8B,WAAnD,CAArB,CAAuF,EAflG,CAgBI,QAAQ,CAAE,kBAAAF,KAAK,QAAIN,CAAAA,KAAK,CAACO,YAAN,CAAmBD,KAAnB,CAA0BN,KAAK,CAACQ,OAAN,CAAc,eAAd,CAA+B,WAAzD,CAAsE,EAAtE,CAAJ,EAhBnB,CAiBI,iBAAiB,CAAE,IAjBvB,CAkBI,gBAAgB,CAAE,IAlBtB,EApBJ,CADJ,CADJ,CA8DH,CAhED,CAkEA,cAAeV,CAAAA,UAAU,CAACC,eAAD,CAAzB","sourcesContent":["import React from 'react'\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\n\r\nimport { injectIntl } from 'react-intl';\r\n\r\nconst AddParticipants = (props) => {\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n            <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_SECTION\" })}\r\n                    isSearchable={true}\r\n                    name={\"nsectioncode\"}\r\n                    isDisabled={false}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    isClearable={false}\r\n                    options={props.section}\r\n                    // optionId='ntestcategorycode'\r\n                    // optionValue='stestcategoryname'\r\n                    // value={this.state.ntestcategorycode}\r\n                    // defaultValue={props.ntestcategorycode || []}\r\n                    value={props.selectedRecord[\"nsectioncode\"] ?  props.selectedRecord[\"nsectioncode\"] : \"\"}\r\n                    onChange={value => props.handleChange(value, \"nsectioncode\", \"Section\")}\r\n                    closeMenuOnSelect={true}\r\n                    alphabeticalSort={true}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_PARTICIPANTSNAME\" })}\r\n                    name={\"nusercode\"}\r\n                    isDisabled={false}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    isClearable={false}\r\n                    showOption={props.isMulti}\r\n                    isMulti={true}\r\n                    options={props.sectionUsers || []}\r\n                    optionId='nusercode'\r\n                    optionValue='sfullname'\r\n                    // optionId='ntestcode'\r\n                    // optionValue='stestname'\r\n                    // value={props.selectedRecord.ntestcode ?  props.selectedRecord.ntestcode : \"\"}\r\n                    value={props.selectedRecord?props.selectedRecord[props.isMulti?\"availableData\":\"nusercode\"] : \"\"}\r\n                    onChange={value => props.handleChange(value, props.isMulti?\"availableData\": \"nusercode\", \"\")}\r\n                    closeMenuOnSelect={true}\r\n                    alphabeticalSort={true}\r\n                >\r\n                </FormSelectSearch>\r\n                \r\n                {/* <FormMultiSelect\r\n                                        name={props.extractedColumnList[1].dataField}\r\n                                        label={props.intl.formatMessage({ id: props.extractedColumnList[1].idsName })}\r\n                                        options={props.comboDataList || []}\r\n                                        optionId={props.extractedColumnList[1].optionId}\r\n                                        optionValue={props.extractedColumnList[1].optionValue}\r\n                                        value={props.selectedRecord ? props.selectedRecord[props.extractedColumnList[1].dataField]|| [] : []}\r\n                                        isMandatory={true}\r\n                                        isClearable={true}\r\n                                        disableSearch={false}\r\n                                        disabled={false}\r\n                                        closeMenuOnSelect={false}\r\n                                        alphabeticalSort={true}\r\n                                        onChange={(event) => props.onComboChange(event, props.extractedColumnList[1].dataField)} */}\r\n            </Col>\r\n\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default injectIntl(AddParticipants);"]},"metadata":{},"sourceType":"module"}