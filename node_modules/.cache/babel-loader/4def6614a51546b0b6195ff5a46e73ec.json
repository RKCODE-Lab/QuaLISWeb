{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\credentialmanagement\\\\UserTabs.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl'; // import { process } from '@progress/kendo-data-query';\n\nimport { toast } from 'react-toastify';\nimport { Row, Col, Card, Nav } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddUserMultiRole from './AddUserMultiRole';\nimport AddUserMultiDeputy from './AddUserMultiDeputy';\nimport AddUserSite from './AddUserSite';\nimport Esign from '../audittrail/Esign';\nimport UserMultiRoleTab from './UserMultiRoleTab';\nimport UserMultiDeputyTab from './UserMultiDeputyTab';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\nimport UserTabsAccordion from './UserTabsAccordion';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\n\nclass UserTabs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.userSiteAccordion = userSiteList => {\n      const selectedUserSite = this.props.masterData.UsersSite;\n      const foundIndex = userSiteList.findIndex(x => x[\"nusersitecode\"] === selectedUserSite.nusersitecode);\n      userSiteList[foundIndex] = selectedUserSite;\n      const accordionMap = new Map();\n      userSiteList.map(userSite => accordionMap.set(userSite.nusersitecode, /*#__PURE__*/React.createElement(UserTabsAccordion, {\n        userSite: userSite,\n        accordionTitle: \"ssitename\",\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        userInfo: this.props.userInfo,\n        getUserSiteComboService: this.props.getUserSiteComboService,\n        masterData: this.props.masterData,\n        ConfirmDelete: this.ConfirmDelete,\n        tabDetail: this.tabDetail(userSite),\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }\n      })));\n      return accordionMap;\n    };\n\n    this.ConfirmDelete = obj => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(obj));\n    };\n\n    this.tabDetail = userSite => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_USERMULTIROLE\", /*#__PURE__*/React.createElement(UserMultiRoleTab, {\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        screenName: \"IDS_ROLE\",\n        resetPassword: this.resetPassword,\n        getUserMultiRoleComboDataService: this.props.getUserMultiRoleComboDataService,\n        masterData: this.props.masterData,\n        userSite: userSite,\n        dataResult: this.props.masterData[\"UserMultiRole\"] || [] // dataResult={process(this.props.masterData[\"UserMultiRole\"],(this.props.screenName === undefined || this.props.screenName === \"IDS_ROLE\") ?this.state.roleDataState :{skip:0, take:10})}\n        ,\n        dataState: this.props.screenName === undefined || this.props.screenName === \"IDS_ROLE\" ? this.state.roleDataState : {\n          skip: 0,\n          take: 10\n        },\n        dataStateChange: event => this.setState({\n          roleDataState: event.dataState\n        }),\n        multiRoleColumnList: this.multiRoleColumnList,\n        deleteRecord: this.deleteRecord,\n        selectedId: this.props.selectedId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 41\n        }\n      }));\n      tabMap.set(\"IDS_USERMULTIDEPUTY\", /*#__PURE__*/React.createElement(UserMultiDeputyTab, {\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        screenName: \"IDS_DEPUTY\",\n        getUserMultiDeputyComboDataService: this.props.getUserMultiDeputyComboDataService,\n        masterData: this.props.masterData,\n        userSite: userSite,\n        dataResult: this.props.masterData[\"UserMultiDeputy\"] || [] // dataResult={process(this.props.masterData[\"UserMultiDeputy\"],(this.props.screenName === undefined || this.props.screenName === \"IDS_DEPUTY\") ?this.state.deputyDataState :  {skip:0, take:10})}\n        ,\n        dataState: this.props.screenName === undefined || this.props.screenName === \"IDS_DEPUTY\" ? this.state.deputyDataState : {\n          skip: 0,\n          take: 10\n        },\n        dataStateChange: event => this.setState({\n          deputyDataState: event.dataState\n        }),\n        multiDeputyColumnList: this.multiDeputyColumnList,\n        deleteRecord: this.deleteRecord,\n        selectedId: this.props.selectedId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 43\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\" || this.props.operation === \"reset\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n\n      if (fieldName === \"ndeputyusersitecode\") {\n        if (comboData === null) {\n          selectedRecord[\"sdeputyname\"] = \"\";\n        } else {\n          this.props.deputyUserList.map(dataItem => {\n            if (dataItem.item.nusersitecode === comboData.value) {\n              selectedRecord[\"sdeputyname\"] = dataItem.item.sfirstname + \" \" + dataItem.item.slastname;\n            }\n\n            return null;\n          });\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else if (event.target.name === \"nlockmode\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.UNLOCK : transactionStatus.LOCK;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit  \n      let inputParam = {};\n      let clearSelectedRecordField = [];\n\n      if (this.props.screenName === \"IDS_ROLE\") {\n        inputParam = this.saveRole(saveType, formRef);\n        clearSelectedRecordField = [{\n          \"idsName\": \"IDS_DEFAULTROLE\",\n          \"dataField\": \"ndefaultrole\",\n          \"width\": \"100px\",\n          \"isClearField\": true,\n          \"preSetValue\": 4\n        }, {\n          \"idsName\": \"IDS_ISACTIVE\",\n          \"dataField\": \"ntransactionstatus\",\n          \"width\": \"100px\",\n          \"isClearField\": true,\n          \"preSetValue\": 1\n        }];\n      } else if (this.props.screenName === \"IDS_DEPUTY\") {\n        inputParam = this.saveDeputy(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_SITE\") {\n        inputParam = this.saveUserSite(saveType, formRef);\n        clearSelectedRecordField = [{\n          \"idsName\": \"IDS_DEFAULTSITE\",\n          \"dataField\": \"ndefaultsite\",\n          \"width\": \"100px\",\n          \"isClearField\": true,\n          \"preSetValue\": 4\n        }];\n      }\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        if (this.props.screenName === \"IDS_SITE\" || this.props.screenName === \"IDS_ROLE\") {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", \"\", \"\", clearSelectedRecordField);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      }\n    };\n\n    this.resetPassword = () => {\n      if (this.props.masterData.SelectedUser.ntransactionstatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CANNOTRESETPWDRETIREDUSER\"\n        }));\n      } else {\n        const inputParam = {\n          classUrl: this.props.inputParam.classUrl,\n          methodUrl: \"Password\",\n          inputData: {\n            \"users\": this.props.masterData.SelectedUser,\n            \"userinfo\": this.props.userInfo,\n            \"nusersitecode\": this.props.masterData.UsersSite.nusersitecode\n          },\n          operation: \"reset\",\n          dataState: this.state.roleDataState,\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.controlMap.get(\"ResetPassword\").ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: \"IDS_ROLE\",\n              operation: \"reset\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      if (this.props.masterData.SelectedUser.ntransactionstatus === transactionStatus.RETIRED) {\n        //const message = \"IDS_CANNOTDELETE\"+deleteParam.screenName.toUpperCase() +\"RETIREDUSER\";\n        const message = \"IDS_CANNOTDELETE\" + deleteParam.screenName.split(\"IDS_\")[1].toUpperCase() + \"RETIREDUSER\";\n        toast.warn(this.props.intl.formatMessage({\n          id: message\n        }));\n      } else {\n        let dataState = undefined;\n\n        if (this.props.screenName === \"IDS_ROLE\") {\n          dataState = this.state.roleDataState;\n        } else if (this.props.screenName === \"IDS_DEPUTY\") {\n          dataState = this.state.deputyDataState;\n        }\n\n        const postParam = {\n          inputListName: \"Users\",\n          selectedObject: \"SelectedUser\",\n          primaryKeyField: \"nusercode\",\n          primaryKeyValue: this.props.masterData.SelectedUser.nusercode,\n          fetchUrl: \"users/getUsers\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          }\n        };\n        const inputParam = {\n          classUrl: this.props.inputParam.classUrl,\n          methodUrl: deleteParam.methodUrl,\n          inputData: {\n            [deleteParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n            \"userinfo\": this.props.userInfo,\n            \"users\": this.props.masterData.SelectedUser\n          },\n          operation: deleteParam.operation,\n          dataState,\n          postParam,\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: deleteParam.screenName,\n              operation: deleteParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    const roleDataState = {\n      skip: 0,\n      take: 10\n    };\n    const deputyDataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      selectedRecord: {},\n      dataResult: [],\n      roleDataState,\n      deputyDataState\n    };\n    this.multiRoleColumnList = [{\n      \"idsName\": \"IDS_ROLE\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DEFAULTROLE\",\n      \"dataField\": \"sdefaultstatus\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ACTIVESTATUS\",\n      \"dataField\": \"sactivestatus\",\n      \"width\": \"200px\"\n    }];\n    this.multiDeputyColumnList = [{\n      \"idsName\": \"IDS_ROLE\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_DEPUTYID\",\n      \"dataField\": \"sdeputyid\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_DEPUTYNAME\",\n      \"dataField\": \"sdeputyname\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_ACTIVESTATUS\",\n      \"dataField\": \"sdisplaystatus\",\n      \"width\": \"150px\"\n    }];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  render() {\n    const addUsersSiteId = this.props.controlMap.has(\"AddSite\") && this.props.controlMap.get(\"AddSite\").ncontrolcode;\n    const usersSiteList = this.props.masterData.UsersSiteList;\n    let mandatoryFields = [];\n\n    if (this.props.screenName === \"IDS_SITE\") {\n      mandatoryFields.push({\n        \"idsName\": \"IDS_SITE\",\n        \"dataField\": \"nsitecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n    } else if (this.props.screenName === \"IDS_ROLE\") {\n      mandatoryFields.push({\n        \"idsName\": \"IDS_USERROLE\",\n        \"dataField\": \"nuserrolecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n    } else {\n      mandatoryFields.push({\n        \"idsName\": \"IDS_DEPUTYID\",\n        \"dataField\": \"ndeputyusersitecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_USERROLE\",\n        \"dataField\": \"nuserrolecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"addSite\",\n      className: \"add-txt-btn\",\n      hidden: this.props.userRoleControlRights.indexOf(addUsersSiteId) === -1,\n      onClick: () => this.props.getUserSiteComboService(\"IDS_SITE\", \"create\", \"nusersitecode\", -2, this.props.masterData, this.props.userInfo, addUsersSiteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SITE\",\n      defaultMessage: \"Site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 41\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 33\n      }\n    }, usersSiteList.length > 0 && this.props.masterData.UsersSite ? /*#__PURE__*/React.createElement(CustomAccordion, {\n      key: \"filter\",\n      accordionTitle: \"ssitename\",\n      accordionComponent: this.userSiteAccordion(usersSiteList),\n      inputParam: {\n        masterData: this.props.masterData,\n        userInfo: this.props.userInfo\n      },\n      accordionClick: this.props.getUserSiteDetail,\n      accordionPrimaryKey: \"nusersitecode\",\n      accordionObjectName: \"userSite\",\n      selectedKey: this.props.masterData.UsersSite.nusersitecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 37\n      }\n    }) : \"\"))))), this.props.openChildModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.props.screenName,\n      showSaveContinue: this.props.screenName === \"IDS_SITE\" || this.props.screenName === \"IDS_ROLE\" ? true : false,\n      onSaveClick: this.onSaveClick,\n      updateStore: this.props.updateStore,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 33\n        }\n      }) : this.props.screenName === \"IDS_SITE\" ? /*#__PURE__*/React.createElement(AddUserSite, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        siteList: this.props.siteList || [],\n        selectedUser: this.props.masterData.SelectedUser || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 37\n        }\n      }) : this.props.screenName === \"IDS_ROLE\" ? /*#__PURE__*/React.createElement(AddUserMultiRole, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        roleList: this.props.roleList || [],\n        selectedUser: this.props.masterData.SelectedUser || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 41\n        }\n      }) : /*#__PURE__*/React.createElement(AddUserMultiDeputy, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        userRoleList: this.props.userRoleList || [],\n        deputyUserList: this.props.deputyUserList || [],\n        selectedUser: this.props.masterData.selectedUser || {},\n        operation: this.props.operation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 44\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.masterData !== previousProps.masterData) {\n      let {\n        roleDataState,\n        deputyDataState\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        if (this.props.screenName === \"IDS_ROLE\") {\n          roleDataState = {\n            skip: 0,\n            take: 10\n          };\n        } else if (this.props.screenName === \"IDS_DEPUTY\") {\n          deputyDataState = {\n            skip: 0,\n            take: 10\n          };\n        } else // if (this.props.screenName === \"IDS_SITE\")\n          {\n            roleDataState = {\n              skip: 0,\n              take: 10\n            };\n            deputyDataState = {\n              skip: 0,\n              take: 10\n            };\n          }\n      }\n\n      this.setState({\n        roleDataState,\n        deputyDataState\n      });\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n  }\n\n  saveRole(saveType, formRef) {\n    let inputData = [];\n    inputData[\"userinfo\"] = this.props.userInfo;\n    inputData[\"users\"] = this.props.masterData.SelectedUser;\n    inputData[\"usermultirole\"] = {};\n    let dataState = undefined;\n    let selectedId = null;\n    let postParam = undefined;\n\n    if (this.props.operation === \"update\") {\n      // edit\n      postParam = {\n        inputListName: \"Users\",\n        selectedObject: \"SelectedUser\",\n        primaryKeyField: \"nusercode\"\n      };\n      inputData[\"usermultirole\"] = JSON.parse(JSON.stringify(this.props.selectedRecord));\n      selectedId = this.props.selectedRecord.nusermultirolecode;\n      dataState = this.state.roleDataState;\n    }\n\n    if (inputData[\"usermultirole\"].hasOwnProperty('esignpassword')) {\n      if (inputData[\"usermultirole\"]['esignpassword'] === '') {\n        delete inputData[\"usermultirole\"]['esigncomments'];\n        delete inputData[\"usermultirole\"]['esignpassword'];\n        delete inputData[\"usermultirole\"]['esignreason'];\n      }\n    }\n\n    inputData[\"usermultirole\"][\"nuserrolecode\"] = this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : \"\";\n    inputData[\"usermultirole\"][\"nusersitecode\"] = this.props.masterData.UsersSite.nusersitecode;\n    inputData[\"usermultirole\"][\"ndefaultrole\"] = this.state.selectedRecord[\"ndefaultrole\"] ? this.state.selectedRecord[\"ndefaultrole\"] : transactionStatus.NO;\n    inputData[\"usermultirole\"][\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"];\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"UserMultiRole\",\n      inputData: inputData,\n      selectedId,\n      dataState,\n      postParam,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      selectedRecord: { ...this.state.selectedRecord\n      }\n    };\n    return inputParam;\n  }\n\n  saveDeputy(saveType, formRef) {\n    let inputData = [];\n    inputData[\"userinfo\"] = this.props.userInfo;\n    inputData[\"users\"] = this.props.masterData.SelectedUser;\n    inputData[\"usermultideputy\"] = {};\n    let dataState = undefined;\n    let selectedId = null;\n    let postParam = undefined;\n\n    if (this.props.operation === \"update\") {\n      // edit\n      postParam = {\n        inputListName: \"Users\",\n        selectedObject: \"SelectedUser\",\n        primaryKeyField: \"nusercode\"\n      };\n      inputData[\"usermultideputy\"] = JSON.parse(JSON.stringify(this.props.selectedRecord));\n      selectedId = this.props.selectedRecord.nusermultideputycode;\n      dataState = this.state.deputyDataState;\n    }\n\n    if (inputData[\"usermultideputy\"].hasOwnProperty('esignpassword')) {\n      if (inputData[\"usermultideputy\"]['esignpassword'] === '') {\n        delete inputData[\"usermultideputy\"]['esigncomments'];\n        delete inputData[\"usermultideputy\"]['esignpassword'];\n        delete inputData[\"usermultideputy\"]['esignreason'];\n      }\n    }\n\n    inputData[\"usermultideputy\"][\"nuserrolecode\"] = this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : \"\";\n    inputData[\"usermultideputy\"][\"nusersitecode\"] = this.props.masterData.UsersSite.nusersitecode;\n    inputData[\"usermultideputy\"][\"ndeputyusersitecode\"] = this.state.selectedRecord[\"ndeputyusersitecode\"] ? this.state.selectedRecord[\"ndeputyusersitecode\"].value : \"\";\n    inputData[\"usermultideputy\"][\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"];\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"UserMultiDeputy\",\n      inputData: inputData,\n      selectedId,\n      dataState,\n      postParam,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      selectedRecord: { ...this.state.selectedRecord\n      }\n    };\n    return inputParam;\n  }\n\n  saveUserSite(saveType, formRef) {\n    let inputData = [];\n    inputData[\"userinfo\"] = this.props.userInfo;\n    inputData[\"userssite\"] = {};\n    let postParam = undefined;\n\n    if (this.props.operation === \"update\") {\n      // edit\n      postParam = {\n        inputListName: \"Users\",\n        selectedObject: \"SelectedUser\",\n        primaryKeyField: \"nusercode\"\n      };\n      inputData[\"userssite\"] = JSON.parse(JSON.stringify(this.props.selectedRecord));\n    }\n\n    inputData[\"userssite\"][\"nusercode\"] = this.props.masterData.SelectedUser.nusercode;\n    inputData[\"userssite\"][\"nsitecode\"] = this.state.selectedRecord[\"nsitecode\"] ? this.state.selectedRecord[\"nsitecode\"].value : \"\";\n    inputData[\"userssite\"][\"ndefaultsite\"] = this.state.selectedRecord[\"ndefaultsite\"] ? this.state.selectedRecord[\"ndefaultsite\"] : transactionStatus.NO;\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"UsersSite\",\n      inputData: inputData,\n      dataState: undefined,\n      postParam,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      selectedRecord: { ...this.state.selectedRecord\n      }\n    };\n    return inputParam;\n  }\n\n}\n\nexport default injectIntl(UserTabs);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/credentialmanagement/UserTabs.jsx"],"names":["React","FormattedMessage","injectIntl","toast","Row","Col","Card","Nav","FontAwesomeIcon","faPlus","SlideOutModal","AddUserMultiRole","AddUserMultiDeputy","AddUserSite","Esign","UserMultiRoleTab","UserMultiDeputyTab","DEFAULT_RETURN","showEsign","transactionStatus","UserTabsAccordion","ConfirmMessage","CustomAccordion","UserTabs","Component","constructor","props","userSiteAccordion","userSiteList","selectedUserSite","masterData","UsersSite","foundIndex","findIndex","x","nusersitecode","accordionMap","Map","map","userSite","set","userRoleControlRights","controlMap","userInfo","getUserSiteComboService","ConfirmDelete","tabDetail","onTabChange","obj","confirmMessage","confirm","intl","formatMessage","id","deleteRecord","tabMap","inputParam","resetPassword","getUserMultiRoleComboDataService","screenName","undefined","state","roleDataState","skip","take","event","setState","dataState","multiRoleColumnList","selectedId","getUserMultiDeputyComboDataService","deputyDataState","multiDeputyColumnList","tabProps","updateInfo","typeName","data","updateStore","closeModal","loadEsign","openChildModal","selectedRecord","operation","onComboChange","comboData","fieldName","deputyUserList","dataItem","item","value","sfirstname","slastname","onInputOnChange","target","type","name","checked","ACTIVE","DEACTIVE","UNLOCK","LOCK","YES","NO","onSaveClick","saveType","formRef","clearSelectedRecordField","saveRole","saveDeputy","saveUserSite","esignRights","nformcode","ncontrolCode","screenData","crudMaster","SelectedUser","ntransactionstatus","RETIRED","warn","classUrl","methodUrl","inputData","get","ncontrolcode","deleteParam","message","split","toUpperCase","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","nusercode","fetchUrl","fecthInputObject","userinfo","toLowerCase","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","validateEsignCredential","dataResult","render","addUsersSiteId","has","usersSiteList","UsersSiteList","mandatoryFields","push","indexOf","length","getUserSiteDetail","siteList","roleList","userRoleList","selectedUser","componentDidUpdate","previousProps","JSON","parse","stringify","nusermultirolecode","hasOwnProperty","nusermultideputycode"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n// import { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport {Row, Col, Card, Nav} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddUserMultiRole from './AddUserMultiRole';\r\nimport AddUserMultiDeputy from './AddUserMultiDeputy';\r\nimport AddUserSite from './AddUserSite';\r\nimport Esign from '../audittrail/Esign';\r\nimport UserMultiRoleTab from './UserMultiRoleTab';\r\nimport UserMultiDeputyTab from './UserMultiDeputyTab';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {showEsign} from '../../components/CommonScript';\r\nimport {transactionStatus} from '../../components/Enumeration';\r\nimport UserTabsAccordion from './UserTabsAccordion';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\r\n\r\n\r\nclass UserTabs extends React.Component{\r\n    constructor(props){\r\n        super(props);  \r\n        const roleDataState = {\r\n            skip: 0,\r\n            take: 10,\r\n        }; \r\n        const deputyDataState = {\r\n            skip: 0,\r\n            take: 10,\r\n        };       \r\n        this.state = { \r\n                        selectedRecord:{},  dataResult:[],\r\n                        roleDataState, deputyDataState};\r\n\r\n                     \r\n        this.multiRoleColumnList=[{\"idsName\":\"IDS_ROLE\",\"dataField\":\"suserrolename\",\"width\":\"200px\"},\r\n                                    {\"idsName\":\"IDS_DEFAULTROLE\",\"dataField\":\"sdefaultstatus\",\"width\":\"200px\"},\r\n                                    {\"idsName\":\"IDS_ACTIVESTATUS\",\"dataField\":\"sactivestatus\",\"width\":\"200px\"},\r\n                                    ];\r\n\r\n        this.multiDeputyColumnList=[{\"idsName\":\"IDS_ROLE\",\"dataField\":\"suserrolename\",\"width\":\"150px\"},\r\n                                    {\"idsName\":\"IDS_DEPUTYID\",\"dataField\":\"sdeputyid\",\"width\":\"150px\"},\r\n                                    {\"idsName\":\"IDS_DEPUTYNAME\",\"dataField\":\"sdeputyname\",\"width\":\"150px\"},\r\n                                    {\"idsName\":\"IDS_ACTIVESTATUS\",\"dataField\":\"sdisplaystatus\",\"width\":\"150px\"},\r\n                                    ];      \r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }    \r\n\r\n    render(){\r\n\r\n        const addUsersSiteId = this.props.controlMap.has(\"AddSite\") && this.props.controlMap.get(\"AddSite\").ncontrolcode;\r\n        const usersSiteList = this.props.masterData.UsersSiteList ;\r\n\r\n        let mandatoryFields =[];\r\n        if (this.props.screenName === \"IDS_SITE\"){\r\n            mandatoryFields.push({\"idsName\":\"IDS_SITE\",\"dataField\":\"nsitecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"});\r\n        }\r\n        else if (this.props.screenName === \"IDS_ROLE\"){\r\n            mandatoryFields.push({\"idsName\":\"IDS_USERROLE\",\"dataField\":\"nuserrolecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"});\r\n        }\r\n        else{\r\n            mandatoryFields.push({\"idsName\":\"IDS_DEPUTYID\",\"dataField\":\"ndeputyusersitecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                                    {\"idsName\":\"IDS_USERROLE\",\"dataField\":\"nuserrolecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"});\r\n        }\r\n\r\n        return(\r\n            <>\r\n                <Row noGutters>\r\n                    <Col md={12}>  \r\n                        <Card className=\"at-tabs border-0\">\r\n                            <Row noGutters>\r\n                                <Col md={12}>\r\n                                    <div className=\"d-flex justify-content-end\">\r\n                                    <Nav.Link name=\"addSite\" className=\"add-txt-btn\" \r\n                                              hidden={this.props.userRoleControlRights.indexOf(addUsersSiteId) === -1}\r\n                                              onClick={()=>this.props.getUserSiteComboService(\"IDS_SITE\", \"create\", \"nusersitecode\", -2, this.props.masterData, this.props.userInfo, addUsersSiteId)}>\r\n                                        <FontAwesomeIcon icon={faPlus} /> { }\r\n                                        <FormattedMessage id='IDS_SITE' defaultMessage='Site' />\r\n                                    </Nav.Link>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row noGutters>\r\n                                <Col md={12}>\r\n                                {usersSiteList.length > 0 && this.props.masterData.UsersSite ?\r\n                                    <CustomAccordion    key=\"filter\"   \r\n                                                        accordionTitle={\"ssitename\"}                                                                     \r\n                                                        accordionComponent={this.userSiteAccordion(usersSiteList)}\r\n                                                        inputParam={{masterData:this.props.masterData, userInfo:this.props.userInfo}}                                    \r\n                                                        accordionClick={this.props.getUserSiteDetail}  \r\n                                                        accordionPrimaryKey={\"nusersitecode\"}  \r\n                                                        accordionObjectName={\"userSite\"} \r\n                                                        selectedKey={this.props.masterData.UsersSite.nusersitecode}\r\n                                                        />\r\n                                 :\"\"}\r\n                                </Col>\r\n                            </Row>\r\n                         </Card>   \r\n                    </Col>\r\n                </Row>\r\n                \r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.openChildModal ? \r\n                <SlideOutModal show={this.props.openChildModal} \r\n                    closeModal={this.closeModal}  \r\n                    operation={this.props.operation}\r\n                    inputParam={this.props.inputParam}  \r\n                    screenName={this.props.screenName}\r\n                    showSaveContinue={this.props.screenName === \"IDS_SITE\" || this.props.screenName === \"IDS_ROLE\" ? true:false}    \r\n                    onSaveClick={this.onSaveClick} \r\n                    updateStore={this.props.updateStore}\r\n                    esign={this.props.loadEsign}\r\n                    validateEsign={this.validateEsign}   \r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    mandatoryFields={mandatoryFields}           \r\n                    addComponent ={this.props.loadEsign ? \r\n                                <Esign  operation={this.props.operation}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        inputParam={this.props.inputParam}                                               \r\n                                        selectedRecord={this.state.selectedRecord ||{}}\r\n                                 /> :\r\n                                 this.props.screenName === \"IDS_SITE\" ? \r\n                                    <AddUserSite selectedRecord={this.state.selectedRecord || {}} \r\n                                                        onInputOnChange={this.onInputOnChange}                                 \r\n                                                        onComboChange={this.onComboChange}                                                      \r\n                                                        siteList={this.props.siteList || []}\r\n                                                        selectedUser={this.props.masterData.SelectedUser || {}}/>\r\n                                    : this.props.screenName === \"IDS_ROLE\" ? \r\n                                        <AddUserMultiRole selectedRecord={this.state.selectedRecord || {}}                                  \r\n                                                            onInputOnChange={this.onInputOnChange}\r\n                                                            onComboChange={this.onComboChange}                                                      \r\n                                                            roleList={this.props.roleList || []}\r\n                                                            selectedUser={this.props.masterData.SelectedUser || {}}\r\n                                                            /> \r\n                                         : <AddUserMultiDeputy selectedRecord={this.state.selectedRecord ||{}}                                  \r\n                                                            onInputOnChange={this.onInputOnChange}\r\n                                                            onComboChange={this.onComboChange}                                                           \r\n                                                            userRoleList={this.props.userRoleList || []}\r\n                                                            deputyUserList={this.props.deputyUserList || []}\r\n                                                            selectedUser={this.props.masterData.selectedUser ||{}}\r\n                                                            operation={this.props.operation}\r\n                                                         />\r\n                                    }               \r\n                        \r\n                />:\"\"}\r\n            </>\r\n        ) \r\n    }\r\n\r\n    userSiteAccordion = (userSiteList) => {\r\n        const selectedUserSite = this.props.masterData.UsersSite;\r\n        const foundIndex = userSiteList.findIndex(\r\n            x => x[\"nusersitecode\"] === selectedUserSite.nusersitecode\r\n        );\r\n        userSiteList[foundIndex] = selectedUserSite; \r\n\r\n        const accordionMap = new Map();\r\n        userSiteList.map((userSite)=>\r\n            accordionMap.set(userSite.nusersitecode, \r\n                <UserTabsAccordion  userSite={userSite}  \r\n                                    accordionTitle=\"ssitename\"                                 \r\n                                    userRoleControlRights={this.props.userRoleControlRights}\r\n                                    controlMap={this.props.controlMap}\r\n                                    userInfo={this.props.userInfo} \r\n                                    getUserSiteComboService={this.props.getUserSiteComboService}\r\n                                    masterData={this.props.masterData}\r\n                                    ConfirmDelete={this.ConfirmDelete}\r\n                                    tabDetail={this.tabDetail(userSite)}   \r\n                                    onTabChange = {this.onTabChange}                                                                              \r\n                    />)\r\n        )\r\n        return accordionMap;\r\n    }\r\n    ConfirmDelete = (obj) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(obj));\r\n    }\r\n    tabDetail = (userSite) => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_USERMULTIROLE\", <UserMultiRoleTab   userRoleControlRights={this.props.userRoleControlRights}\r\n                                                            controlMap={this.props.controlMap}\r\n                                                            inputParam={this.props.inputParam}\r\n                                                            userInfo={this.props.userInfo}  \r\n                                                            screenName={\"IDS_ROLE\"}                                                            \r\n                                                            resetPassword={this.resetPassword}                                                            \r\n                                                            getUserMultiRoleComboDataService={this.props.getUserMultiRoleComboDataService}\r\n                                                            masterData={this.props.masterData}\r\n                                                            userSite={userSite}\r\n                                                            dataResult={this.props.masterData[\"UserMultiRole\"]||[]}\r\n                                                            // dataResult={process(this.props.masterData[\"UserMultiRole\"],(this.props.screenName === undefined || this.props.screenName === \"IDS_ROLE\") ?this.state.roleDataState :{skip:0, take:10})}\r\n                                                            dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_ROLE\") ?  \r\n                                                                            this.state.roleDataState :{skip:0, take:10}}\r\n                                                            dataStateChange={(event)=> this.setState({roleDataState: event.dataState})}\r\n                                                            multiRoleColumnList={this.multiRoleColumnList}\r\n                                                            deleteRecord={this.deleteRecord} \r\n                                                            selectedId={this.props.selectedId}\r\n                                                    />)\r\n        tabMap.set(\"IDS_USERMULTIDEPUTY\", <UserMultiDeputyTab   userRoleControlRights={this.props.userRoleControlRights}\r\n                                                                controlMap={this.props.controlMap}\r\n                                                                inputParam={this.props.inputParam}\r\n                                                                userInfo={this.props.userInfo}   \r\n                                                                screenName={\"IDS_DEPUTY\"} \r\n                                                                getUserMultiDeputyComboDataService={this.props.getUserMultiDeputyComboDataService}\r\n                                                                masterData={this.props.masterData}\r\n                                                                userSite={userSite}\r\n                                                                dataResult={this.props.masterData[\"UserMultiDeputy\"]||[]}\r\n                                                                // dataResult={process(this.props.masterData[\"UserMultiDeputy\"],(this.props.screenName === undefined || this.props.screenName === \"IDS_DEPUTY\") ?this.state.deputyDataState :  {skip:0, take:10})}\r\n                                                                dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_DEPUTY\") ? \r\n                                                                                this.state.deputyDataState :  {skip:0, take:10}}\r\n                                                                dataStateChange={(event)=> this.setState({deputyDataState: event.dataState})}\r\n                                                                multiDeputyColumnList={this.multiDeputyColumnList}\r\n                                                                deleteRecord={this.deleteRecord} \r\n                                                                selectedId={this.props.selectedId}\r\n                                                    />)\r\n       return tabMap;\r\n    }    \r\n\r\n    onTabChange = (tabProps) =>{\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {screenName}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    \r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign){          \r\n            if (this.props.operation === \"delete\" || this.props.operation === \"reset\"){\r\n                loadEsign = false;\r\n                openChildModal =  false;\r\n\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n            else{\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n              selectedRecord['esigncomments'] = \"\"\r\n              selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else{\r\n            openChildModal =  false;\r\n            selectedRecord={};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {openChildModal, loadEsign, selectedRecord, selectedId:null}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        \r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n       \r\n        if(fieldName === \"ndeputyusersitecode\"){\r\n            if (comboData === null){\r\n                selectedRecord[\"sdeputyname\"] =\"\";\r\n            }\r\n            else{\r\n                this.props.deputyUserList.map(dataItem=>{\r\n                    if (dataItem.item.nusersitecode === comboData.value){\r\n                        selectedRecord[\"sdeputyname\"] =  dataItem.item.sfirstname + \" \" +dataItem.item.slastname \r\n                    }\r\n                    return null;      \r\n                }) \r\n            }        \r\n        }\r\n        this.setState({selectedRecord});\r\n        \r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n      \r\n        if (event.target.type === 'checkbox')\r\n        {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else if (event.target.name === \"nlockmode\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.UNLOCK : transactionStatus.LOCK;\r\n            else    \r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else{\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({selectedRecord});\r\n    }\r\n\r\n    componentDidUpdate(previousProps){       \r\n        if (this.props.masterData !== previousProps.masterData ){    \r\n            let {roleDataState, deputyDataState} = this.state;\r\n                if(this.props.dataState === undefined){\r\n                    if (this.props.screenName === \"IDS_ROLE\")\r\n                    {\r\n                        roleDataState = {skip:0,take:10};\r\n                    }\r\n                    else if (this.props.screenName === \"IDS_DEPUTY\")\r\n                    {\r\n                        deputyDataState = {skip:0,take:10};\r\n                    }\r\n                    else// if (this.props.screenName === \"IDS_SITE\")\r\n                    {\r\n                        roleDataState = {skip:0,take:10};\r\n                        deputyDataState = {skip:0,take:10};\r\n                    }\r\n                }         \r\n            this.setState({ roleDataState, deputyDataState});\r\n        }\r\n\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord ){             \r\n            this.setState({selectedRecord:this.props.selectedRecord});\r\n         }       \r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n              //add / edit  \r\n        let inputParam = {};\r\n        let clearSelectedRecordField =[];\r\n        if (this.props.screenName === \"IDS_ROLE\")\r\n        {\r\n            inputParam = this.saveRole(saveType, formRef);\r\n\r\n            clearSelectedRecordField =[\r\n                \r\n                { \"idsName\": \"IDS_DEFAULTROLE\", \"dataField\": \"ndefaultrole\", \"width\": \"100px\",\"isClearField\":true,\"preSetValue\":4},\r\n                { \"idsName\": \"IDS_ISACTIVE\", \"dataField\": \"ntransactionstatus\", \"width\": \"100px\",\"isClearField\":true,\"preSetValue\":1},\r\n                \r\n            ]\r\n        }\r\n        else if (this.props.screenName === \"IDS_DEPUTY\")\r\n        {\r\n            inputParam = this.saveDeputy(saveType, formRef);\r\n        }\r\n        else if (this.props.screenName === \"IDS_SITE\")\r\n        {\r\n            inputParam = this.saveUserSite(saveType, formRef);\r\n\r\n            clearSelectedRecordField =[\r\n                \r\n                { \"idsName\": \"IDS_DEFAULTSITE\", \"dataField\": \"ndefaultsite\", \"width\": \"100px\",\"isClearField\":true,\"preSetValue\":4},\r\n                \r\n            ]\r\n        }\r\n      \r\n       if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign:true, screenData:{inputParam, masterData:this.props.masterData}, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else{\r\n            if(this.props.screenName === \"IDS_SITE\" || this.props.screenName === \"IDS_ROLE\")\r\n            {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\",\"\",\"\",clearSelectedRecordField);\r\n            }\r\n            else\r\n            {\r\n               this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n           \r\n    }\r\n    \r\n    saveRole(saveType, formRef ){\r\n       \r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        inputData[\"users\"] = this.props.masterData.SelectedUser;\r\n        inputData[\"usermultirole\"] = {};\r\n  \r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n\r\n        let postParam = undefined;\r\n        if ( this.props.operation === \"update\"){\r\n            // edit\r\n            postParam =  { inputListName : \"Users\", selectedObject : \"SelectedUser\", primaryKeyField : \"nusercode\" };\r\n           \r\n            inputData[\"usermultirole\"] = JSON.parse(JSON.stringify(this.props.selectedRecord));      \r\n            selectedId = this.props.selectedRecord.nusermultirolecode; \r\n            dataState = this.state.roleDataState;  \r\n        }\r\n        if (inputData[\"usermultirole\"].hasOwnProperty('esignpassword')) {\r\n            if (inputData[\"usermultirole\"]['esignpassword'] === '') {\r\n                delete inputData[\"usermultirole\"]['esigncomments']\r\n                delete inputData[\"usermultirole\"]['esignpassword']\r\n                delete inputData[\"usermultirole\"]['esignreason']\r\n\r\n            }\r\n        }        \r\n        inputData[\"usermultirole\"][\"nuserrolecode\"] = this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : \"\";\r\n        inputData[\"usermultirole\"][\"nusersitecode\"] = this.props.masterData.UsersSite.nusersitecode;\r\n     \r\n        inputData[\"usermultirole\"][\"ndefaultrole\"] = this.state.selectedRecord[\"ndefaultrole\"] ? this.state.selectedRecord[\"ndefaultrole\"]:transactionStatus.NO;\r\n        inputData[\"usermultirole\"][\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"];\r\n        const inputParam = {\r\n                                classUrl: this.props.inputParam.classUrl,\r\n                                methodUrl: \"UserMultiRole\", \r\n                                inputData: inputData, selectedId, dataState, postParam,\r\n                                operation: this.props.operation , saveType, formRef , selectedRecord:{...this.state.selectedRecord}      \r\n                            }       \r\n        return inputParam;\r\n    }\r\n\r\n    saveDeputy(saveType, formRef ){\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        inputData[\"users\"] = this.props.masterData.SelectedUser;\r\n        inputData[\"usermultideputy\"]  = {};\r\n  \r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n\r\n        let postParam = undefined;\r\n\r\n        if ( this.props.operation === \"update\"){\r\n            // edit\r\n            postParam =  { inputListName : \"Users\", selectedObject : \"SelectedUser\", primaryKeyField : \"nusercode\" };\r\n           \r\n            inputData[\"usermultideputy\"] = JSON.parse(JSON.stringify(this.props.selectedRecord));  \r\n            selectedId = this.props.selectedRecord.nusermultideputycode; \r\n            dataState = this.state.deputyDataState;       \r\n        }\r\n        if (inputData[\"usermultideputy\"].hasOwnProperty('esignpassword')) {\r\n            if (inputData[\"usermultideputy\"]['esignpassword'] === '') {\r\n                delete inputData[\"usermultideputy\"]['esigncomments']\r\n                delete inputData[\"usermultideputy\"]['esignpassword']\r\n                delete inputData[\"usermultideputy\"]['esignreason']\r\n            }\r\n        }     \r\n        inputData[\"usermultideputy\"][\"nuserrolecode\"] = this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : \"\";\r\n        inputData[\"usermultideputy\"][\"nusersitecode\"] = this.props.masterData.UsersSite.nusersitecode;\r\n        inputData[\"usermultideputy\"][\"ndeputyusersitecode\"] = this.state.selectedRecord[\"ndeputyusersitecode\"] ? this.state.selectedRecord[\"ndeputyusersitecode\"].value : \"\";                                      \r\n        inputData[\"usermultideputy\"][\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"];\r\n\r\n        const inputParam = {\r\n                                classUrl: this.props.inputParam.classUrl,\r\n                                methodUrl: \"UserMultiDeputy\",                         \r\n                                inputData: inputData, selectedId, dataState, postParam,\r\n                                operation: this.props.operation, saveType, formRef  , selectedRecord:{...this.state.selectedRecord}     \r\n                            }\r\n        return inputParam;\r\n    }\r\n\r\n    saveUserSite(saveType, formRef ){      \r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        inputData[\"userssite\"] = {};\r\n  \r\n        let postParam = undefined;\r\n        if ( this.props.operation === \"update\"){\r\n            // edit\r\n            postParam =  { inputListName : \"Users\", selectedObject : \"SelectedUser\", primaryKeyField : \"nusercode\" };\r\n           \r\n            inputData[\"userssite\"] = JSON.parse(JSON.stringify(this.props.selectedRecord));         \r\n        }\r\n        inputData[\"userssite\"][\"nusercode\"] = this.props.masterData.SelectedUser.nusercode;  \r\n        inputData[\"userssite\"][\"nsitecode\"] = this.state.selectedRecord[\"nsitecode\"] ? this.state.selectedRecord[\"nsitecode\"].value : \"\";\r\n        inputData[\"userssite\"][\"ndefaultsite\"] = this.state.selectedRecord[\"ndefaultsite\"] ? this.state.selectedRecord[\"ndefaultsite\"]:transactionStatus.NO;\r\n        const inputParam = {\r\n                                classUrl: this.props.inputParam.classUrl,\r\n                                methodUrl: \"UsersSite\", \r\n                                inputData: inputData, dataState :undefined, postParam,\r\n                                operation: this.props.operation, saveType, formRef ,selectedRecord:{...this.state.selectedRecord}      \r\n                            }       \r\n        return inputParam;\r\n    }\r\n\r\n    resetPassword = () =>{\r\n        if (this.props.masterData.SelectedUser.ntransactionstatus === transactionStatus.RETIRED){\r\n            toast.warn(this.props.intl.formatMessage({id: \"IDS_CANNOTRESETPWDRETIREDUSER\"}));\r\n        }\r\n        else{\r\n            const inputParam = {\r\n                                    classUrl: this.props.inputParam.classUrl,\r\n                                    methodUrl:\"Password\",                                  \r\n                                    inputData: {\"users\":this.props.masterData.SelectedUser,\r\n                                                \"userinfo\": this.props.userInfo,\r\n                                                \"nusersitecode\":this.props.masterData.UsersSite.nusersitecode\r\n                                            },\r\n                                    operation:\"reset\",\r\n                                    dataState:this.state.roleDataState,\r\n                                    selectedRecord:{...this.state.selectedRecord}    \r\n                            }     \r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.controlMap.get(\"ResetPassword\").ncontrolcode)){\r\n                const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign:true, screenData:{inputParam, masterData:this.props.masterData}, \r\n                            openChildModal:true, screenName:\"IDS_ROLE\", operation:\"reset\"\r\n                            }\r\n                        }\r\n                    this.props.updateStore(updateInfo);\r\n            }\r\n            else{              \r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\"); \r\n            }          \r\n        }\r\n    }\r\n\r\n    deleteRecord = (deleteParam) =>{       \r\n       \r\n        if (this.props.masterData.SelectedUser.ntransactionstatus === transactionStatus.RETIRED){\r\n            //const message = \"IDS_CANNOTDELETE\"+deleteParam.screenName.toUpperCase() +\"RETIREDUSER\";\r\n            const message = \"IDS_CANNOTDELETE\"+deleteParam.screenName.split(\"IDS_\")[1].toUpperCase() +\"RETIREDUSER\";\r\n            toast.warn(this.props.intl.formatMessage({id:message}));\r\n        }\r\n        else{\r\n            let dataState = undefined;\r\n            if (this.props.screenName === \"IDS_ROLE\")\r\n            {\r\n                dataState = this.state.roleDataState;\r\n            }\r\n            else if (this.props.screenName === \"IDS_DEPUTY\")\r\n            {\r\n                dataState = this.state.deputyDataState;\r\n            }\r\n            const postParam = { inputListName : \"Users\", selectedObject : \"SelectedUser\",\r\n                                primaryKeyField : \"nusercode\", \r\n                                primaryKeyValue : this.props.masterData.SelectedUser.nusercode,\r\n                                fetchUrl : \"users/getUsers\",\r\n                                fecthInputObject : {userinfo:this.props.userInfo},\r\n        } \r\n            const inputParam = {\r\n                                    classUrl: this.props.inputParam.classUrl,\r\n                                    methodUrl:deleteParam.methodUrl,                                  \r\n                                    inputData: {[deleteParam.methodUrl.toLowerCase()] :deleteParam.selectedRecord,\r\n                                                \"userinfo\": this.props.userInfo,\r\n                                                \"users\":this.props.masterData.SelectedUser},\r\n                                    operation:deleteParam.operation , dataState, postParam,\r\n                                    selectedRecord:{...this.state.selectedRecord}\r\n                                }        \r\n         \r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)){\r\n                const updateInfo = {\r\n                     typeName: DEFAULT_RETURN,\r\n                     data: {\r\n                         loadEsign:true, screenData:{inputParam, masterData:this.props.masterData}, \r\n                         openChildModal:true, screenName:deleteParam.screenName, operation:deleteParam.operation\r\n                         }\r\n                     }\r\n                 this.props.updateStore(updateInfo);\r\n             }\r\n             else{\r\n                 this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n             }\r\n        }\r\n    }  \r\n\r\n    validateEsign = () =>{       \r\n        const inputParam = {\r\n                                inputData: {\"userinfo\": {...this.props.userInfo, \r\n                                                        sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                                                        nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                                                        spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n                                                    },\r\n                                             password : this.state.selectedRecord[\"esignpassword\"]\r\n                                            },\r\n                                screenData : this.props.screenData\r\n                            }        \r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n}\r\n\r\nexport default injectIntl(UserTabs);"]},"metadata":{},"sourceType":"module"}