{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\Scheduler\\\\GraphicalSchedulerView.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Image } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt, faThumbsUp, faUserTimes } from '@fortawesome/free-solid-svg-icons';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getGrapicalSchedulerViewDetail, getSchedulerComboService, changeGrapicalScheduleTypeFilter, filterColumnData } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, constructOptionList, validatePhoneNumber, formatInputDate, create_UUID, validateEmail, validateLoginId, formatDate, onDropAttachFileList, deleteAttachmentDropZone } from '../../components/CommonScript'; //import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\n\nimport { transactionStatus } from '../../components/Enumeration';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { Affix } from 'rsuite'; // import 'react-perfect-scrollbar/dist/css/styles.css';\n\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles'; //import AddScheduler from './AddScheduler';\n\nimport Esign from '../audittrail/Esign'; //import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport ReactTooltip from 'react-tooltip';\nimport GrapicalScheduleTypeFilter from './GrapicalScheduleTypeFilter';\nimport { Scheduler, TimelineView, DayView, WeekView, MonthView } from '@progress/kendo-react-scheduler';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass GraphicalSchedulerView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateChange = event => {\n      this.setState({\n        displayDate: event.value\n      });\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.state.nfilterScheduleType.label) {\n        let inputParam = {\n          inputData: {\n            sscheduletype: this.state.nfilterScheduleType.label,\n            userinfo: this.props.Login.userInfo,\n            nfilterScheduleType: this.state.nfilterScheduleType\n          },\n          classUrl: \"graphicalschedulerview\",\n          methodUrl: \"GraphicalSchedulerByScheduleType\"\n        };\n        this.props.changeGrapicalScheduleTypeFilter(inputParam, this.props.Login.masterData.filterScheduleType);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TESTCATEGORYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChangeevent = (comboData, fieldName) => {\n      let nfilterScheduleType = this.state.nfilterScheduleType || {};\n      nfilterScheduleType = comboData;\n      this.searchRef.current.value = \"\";\n      this.setState({\n        nfilterScheduleType\n      }); // const selectedRecord = this.state.selectedRecord || {};\n      // selectedRecord[fieldName] = comboData;\n      // this.setState({ selectedRecord });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"graphicalschedulerview\",\n        methodUrl: \"GraphicalSchedulerView\",\n        displayName: \"IDS_GRAPHICALSCHEDULERVIEW\",\n        userInfo: this.props.Login.userInfo,\n        isClearSearch: this.props.Login.isClearSearch\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      selectedScheduler: undefined,\n      screenName: undefined,\n      userLogged: true,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      isClearSearch: false,\n      displayDate: new Date(Date.UTC(currentYear, 10, 27)),\n      timezone: \"Etc/UTC\",\n      data: this.props.Login.masterData.SelectedSchedulerView !== undefined ? this.props.Login.masterData.SelectedSchedulerView : \"\"\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.schedulerFieldList = ['stitle', 'sscheduletype'];\n    this.searchFieldList = ['stitle', 'sscheduletype'];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    //let userStatusCSS = \"outline-success\"//\"outline-secondary\";\n    let userStatusCSS = \"outline-secondary\";\n\n    if (this.props.Login.masterData.SelectedSchedulerView && this.props.Login.masterData.SelectedSchedulerView.ntransactionstatus === transactionStatus.APPROVED) {\n      userStatusCSS = \"outline-success\";\n    }\n\n    let activeIconCSS = \"fa fa-check\";\n    let sweek = \"\";\n    let smonth = \"\";\n    const addId = this.state.controlMap.has(\"AddScheduler\") && this.state.controlMap.get(\"AddScheduler\").ncontrolcode; // const editId = this.state.controlMap.has(\"EditScheduler\") && this.state.controlMap.get(\"EditScheduler\").ncontrolcode;\n    // const deleteId = this.state.controlMap.has(\"DeleteScheduler\") && this.state.controlMap.get(\"DeleteScheduler\").ncontrolcode;\n    // const approveId = this.state.controlMap.has(\"ApproveScheduler\") && this.state.controlMap.get(\"ApproveScheduler\").ncontrolcode;\n\n    const filterParam = {\n      inputListName: \"SchedulerView\",\n      selectedObject: \"SelectedSchedulerView\",\n      primaryKeyField: \"nschedulecode\",\n      fetchUrl: \"graphicalschedulerview/getGraphicalSchedulerView\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList,\n      sscheduletype: this.state.nfilterScheduleType ? this.state.nfilterScheduleType.label : null\n    };\n    const addParam = {\n      screenName: \"IDS_SCHEDULER\",\n      operation: \"create\",\n      primaryKeyName: \"nschedulecode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: addId,\n      nfilterScheduleType: this.state.nfilterScheduleType\n    }; // const editParam = {\n    //     screenName: \"IDS_SCHEDULER\", operation: \"update\", primaryKeyName: \"nschedulecode\",\n    //     masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\n    //     ncontrolcode: editId, inputListName: \"Scheduler\", selectedObject: \"SelectedScheduler\"\n    // };\n    // const approveParam = {\n    //     screenName: \"IDS_SCHEDULER\", operation: \"update\", primaryKeyName: \"nschedulecode\",\n    //     masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\n    //     ncontrolcode: approveId, inputListName: \"Scheduler\", selectedObject: \"SelectedScheduler\"\n    // };\n\n    const userImgPath = this.props.Login.settings && this.props.Login.settings[6] + this.props.Login.masterData.UserImagePath;\n    const signImgPath = this.props.Login.settings && this.props.Login.settings[6] + this.props.Login.masterData.SignImagePath; // const mandatoryFields = [{\"idsName\": \"IDS_SCHEDULERNAME\", \"dataField\": \"sschedulename\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\n    //                         //{ \"idsName\": \"IDS_SCHEDULERTYPE\", \"dataField\": \"sscheduletype\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\n    //                         //{ \"idsName\": \"IDS_OCCURRENCE\", \"dataField\": \"noccurencenooftimes\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\n    //                         //{ \"idsName\": \"IDS_OCCURRENCEDAYWISE\", \"dataField\": \"noccurencedaywiseinterval\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\n    //                         //{ \"idsName\": \"IDS_OCCURRENCEHOURWISE\", \"dataField\": \"soccurencehourwiseinterval\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\n    //                         //{ \"idsName\": \"IDS_MONTHLYOCCURRENCETYPE\", \"dataField\": \"nmonthlyoccurrencetype\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\n    //                         { \"idsName\": \"IDS_STARTDATE\", \"dataField\": \"dstartdate\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\n    //                         { \"idsName\": \"IDS_STARTTIME\", \"dataField\": \"dstarttime\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\n    //                         ];\n\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_GRAPHICALSCHDULERVIEW\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.SchedulerView,\n      getMasterDetail: scheduler => this.props.getGrapicalSchedulerViewDetail(scheduler, this.props.Login.userInfo, this.props.Login.masterData, this.state.nfilterScheduleType.label),\n      selectedMaster: this.props.Login.masterData.SelectedSchedulerView,\n      primaryKeyField: \"nschedulecode\",\n      mainField: \"stitle\",\n      firstField: \"sscheduletype\" //secondField=\"nstatus\"\n      ,\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: () => this.props.getSchedulerComboService(addParam),\n      isMultiSelecct: false,\n      hidePaging: false,\n      isClearSearch: this.props.Login.isClearSearch,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_TESTFILTER\": /*#__PURE__*/React.createElement(GrapicalScheduleTypeFilter, {\n          filterScheduleType: this.state.filterScheduleType || [],\n          nfilterScheduleType: this.state.nfilterScheduleType || {},\n          onComboChange: this.onComboChangeevent,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.SchedulerView && this.props.Login.masterData.SchedulerView.length > 0 && this.props.Login.masterData.SelectedSchedulerView ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.SelectedSchedulerView && this.props.Login.masterData.SelectedSchedulerView.stitle !== undefined ? this.props.Login.masterData.SelectedSchedulerView.stitle : \"\"), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${userStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 61\n      }\n    }, activeIconCSS !== \"\" ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fas fa-check \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 89\n      }\n    }) : \"\", this.props.Login.masterData.SelectedSchedulerView && this.props.Login.masterData.SelectedSchedulerView.sscheduletype !== undefined ? this.props.Login.masterData.SelectedSchedulerView.sscheduletype : \"\", \" \"))))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Scheduler, {\n      data: this.state.data,\n      date: this.state.displayDate,\n      onDateChange: this.handleDateChange,\n      timezone: this.state.timezone,\n      editable: {\n        add: true,\n        remove: true,\n        drag: true,\n        resize: true,\n        select: true,\n        edit: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(DayView, {\n      numberOfDays: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(WeekView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(MonthView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }\n    })), \";\"))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"horizontal-line\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 57\n      }\n    }))))) : \"\"))))));\n  }\n\n  componentDidUpdate(previousProps) {\n    let isComponentUpdated = false;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap\n      });\n    }\n\n    let nfilterScheduleType = this.state.nfilterScheduleType || {};\n    let filterScheduleType = this.state.filterScheduleType || {};\n\n    if (this.props.Login.masterData.filterGrapicalScheduleType !== previousProps.Login.masterData.filterGrapicalScheduleType) {\n      const scheduleTypeMap = constructOptionList(this.props.Login.masterData.filterGrapicalScheduleType || [], \"nschedulecode\", \"sscheduletype\", 'nschedulecode', 'ascending', false);\n      filterScheduleType = scheduleTypeMap.get(\"OptionList\");\n\n      if (this.state.nfilterScheduleType === null || this.state.nfilterScheduleType === undefined) {\n        if (scheduleTypeMap.get(\"DefaultValue\")) {\n          nfilterScheduleType = scheduleTypeMap.get(\"DefaultValue\");\n        } else if (filterScheduleType && filterScheduleType.length > 0) {\n          nfilterScheduleType = filterScheduleType[0];\n        }\n      }\n\n      isComponentUpdated = true;\n    } else if (this.props.Login.masterData.nfilterScheduleType !== previousProps.Login.masterData.nfilterScheduleType) {\n      nfilterScheduleType = this.props.Login.masterData.nfilterScheduleType;\n      isComponentUpdated = true;\n    }\n\n    if (isComponentUpdated) {\n      this.setState({\n        nfilterScheduleType,\n        filterScheduleType\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData(); // if (this.props.Login.masterData.SelectedScheduler !== undefined) {\n      //     if(this.props.Login.masterData.SelectedScheduler.sscheduletype===\"O\")\n      //     {\n      //         nfilterScheduleType = filterScheduleType[0];\n      //     }\n      //     else\n      //     {\n      //         nfilterScheduleType = filterScheduleType[1];\n      //     }\n      //     this.setState({ filterData,nfilterScheduleType });\n      // }\n      //else\n      //{\n\n      this.setState({\n        filterData\n      }); //}\n    }\n\n    let data = [];\n    let tempdate;\n\n    if (this.props.Login.masterData.SelectedSchedulerView !== null && this.props.Login.masterData.SelectedSchedulerView !== undefined) {\n      if (this.props.Login.masterData.SelectedSchedulerView !== previousProps.Login.masterData.SelectedSchedulerView) {\n        //for(let i =0;i<this.props.Login.masterData.selectedScheduler.length;i++)\n        //{\n        data.push(this.props.Login.masterData.SelectedSchedulerView.jsondata); //}\n\n        data = data.map(dataItem => ({\n          id: dataItem.id,\n          start: parseAdjust(dataItem.start),\n          tempdate: parseAdjust(dataItem.start),\n          startTimezone: dataItem.startTimezone,\n          end: parseAdjust(dataItem.end),\n          endTimezone: dataItem.endTimezone,\n          isAllDay: dataItem.isAllDay,\n          title: dataItem.title,\n          description: dataItem.description,\n          recurrenceRule: dataItem.recurrenceRule,\n          recurrenceId: dataItem.recurrenceID,\n          recurrenceExceptions: dataItem.recurrenceException,\n          roomId: dataItem.roomID,\n          ownerID: dataItem.TaskID,\n          personId: dataItem.TaskID\n        })); //let tempdate = new Date(Date.UTC(data[0].start.getFullYear(),data[0].start.getMonth() , data[0].start.getDate()));\n        //let tempdate = new Date(Date.UTC(data[0].start.getFullYear(),10 , 27));\n        //tempdate=parseAdjust(tempdate);\n        //   data[0].tempdate=data[0].tempdate.replace(\"T\",\"\");\n        //   data[0].tempdate=data[0].tempdate.replace(\"Z\",\"\");\n        //   data[0].tempdate=parseAdjust(data[0].tempdate);\n\n        this.setState({\n          data,\n          displayDate: data[0].tempdate\n        });\n      }\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData) {\n      breadCrumbData.push({\n        \"label\": \"IDS_SCHEDULERTYPE\",\n        \"value\": this.props.Login.masterData.SelectedSchedulerView && this.props.Login.masterData.SelectedSchedulerView.sscheduletype !== undefined ? this.props.Login.masterData.SelectedSchedulerView.sscheduletype : \"NA\"\n      });\n    }\n\n    return breadCrumbData;\n  } // ConfirmDelete = (deleteId) => {\n  //     this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\n  //         this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\n  //         () => this.deleteScheduler(\"Scheduler\", this.props.Login.masterData.SelectedScheduler, \"delete\", deleteId));\n  // }\n\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore,\n  getGrapicalSchedulerViewDetail,\n  getSchedulerComboService,\n  changeGrapicalScheduleTypeFilter,\n  filterColumnData\n})(injectIntl(GraphicalSchedulerView));\nexport const currentYear = new Date().getFullYear();\nexport const parseAdjust = eventDate => {\n  const date = new Date(eventDate);\n  date.setFullYear(currentYear);\n  return date;\n};\nexport const displayDate = new Date(Date.UTC(currentYear, new Date().getMonth(), new Date().getDate()));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/pages/Scheduler/GraphicalSchedulerView.jsx"],"names":["React","connect","toast","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Image","FontAwesomeIcon","faPencilAlt","faTrashAlt","faThumbsUp","faUserTimes","callService","crudMaster","validateEsignCredential","updateStore","getGrapicalSchedulerViewDetail","getSchedulerComboService","changeGrapicalScheduleTypeFilter","filterColumnData","DEFAULT_RETURN","showEsign","getControlMap","constructOptionList","validatePhoneNumber","formatInputDate","create_UUID","validateEmail","validateLoginId","formatDate","onDropAttachFileList","deleteAttachmentDropZone","transactionStatus","ListMaster","SlideOutModal","BreadcrumbComponent","Affix","ReadOnlyText","ContentPanel","Esign","ConfirmMessage","ReactTooltip","GrapicalScheduleTypeFilter","Scheduler","TimelineView","DayView","WeekView","MonthView","mapStateToProps","state","Login","GraphicalSchedulerView","Component","constructor","props","handleDateChange","event","setState","displayDate","value","onFilterSubmit","nfilterScheduleType","label","inputParam","inputData","sscheduletype","userinfo","userInfo","classUrl","methodUrl","masterData","filterScheduleType","warn","intl","formatMessage","id","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","data","selectedId","onComboChangeevent","comboData","fieldName","searchRef","current","validateEsign","sreason","nreasoncode","spredefinedreason","password","screenData","reloadData","displayName","isClearSearch","masterStatus","error","selectedScheduler","undefined","screenName","userLogged","userRoleControlRights","controlMap","Map","Date","UTC","currentYear","timezone","SelectedSchedulerView","createRef","confirmMessage","schedulerFieldList","searchFieldList","getDerivedStateFromProps","render","userStatusCSS","ntransactionstatus","APPROVED","activeIconCSS","sweek","smonth","addId","has","get","ncontrolcode","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","addParam","primaryKeyName","userImgPath","settings","UserImagePath","signImgPath","SignImagePath","breadCrumbData","filterData","length","searchedData","SchedulerView","scheduler","openFilter","closeFilter","showFilter","stitle","add","remove","drag","resize","select","edit","componentDidUpdate","previousProps","isComponentUpdated","nformcode","Object","values","map","item","push","filterGrapicalScheduleType","scheduleTypeMap","generateBreadCrumData","tempdate","jsondata","dataItem","start","parseAdjust","startTimezone","end","endTimezone","isAllDay","title","description","recurrenceRule","recurrenceId","recurrenceID","recurrenceExceptions","recurrenceException","roomId","roomID","ownerID","TaskID","personId","componentWillUnmount","modalName","getFullYear","eventDate","date","setFullYear","getMonth","getDate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,YAA7C;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,SAA9B,EAAyCC,SAAzC,EAAoDC,KAApD,QAAiE,iBAAjE;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAiCC,UAAjC,EAA6CC,WAA7C,QAAgE,mCAAhE;AAEA,SACIC,WADJ,EACiBC,UADjB,EAC6BC,uBAD7B,EACsDC,WADtD,EACmEC,8BADnE,EAEIC,wBAFJ,EAE8BC,gCAF9B,EAE+DC,gBAF/D,QAGO,eAHP;AAIA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAkCC,mBAAlC,EAAuDC,mBAAvD,EAA4EC,eAA5E,EAA4FC,WAA5F,EAAyGC,aAAzG,EAAwHC,eAAxH,EAAyIC,UAAzI,EAAqJC,oBAArJ,EAA2KC,wBAA3K,QAA2M,+BAA3M,C,CACA;;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,OAAOC,UAAP,MAAuB,oDAAvB;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,SAASC,KAAT,QAAsB,QAAtB,C,CACA;;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,6BAA3C,C,CAEA;;AAEA,OAAOC,KAAP,MAAkB,qBAAlB,C,CACA;;AACA,OAAOC,cAAP,MAA2B,0DAA3B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,0BAAP,MAAuC,8BAAvC;AACA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,OAAlC,EAA0CC,QAA1C,EAAoDC,SAApD,QAAqE,iCAArE;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAIA,MAAMC,sBAAN,SAAqCxD,KAAK,CAACyD,SAA3C,CAAqD;AACjDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA4CnBC,gBA5CmB,GA4CCC,KAAD,IAAW;AAC1B,WAAKC,QAAL,CAAc;AACVC,QAAAA,WAAW,EAAEF,KAAK,CAACG;AADT,OAAd;AAGD,KAhDgB;;AAAA,SAquBnBC,cAruBmB,GAquBF,MAAM;AACnB,UAAI,KAAKX,KAAL,CAAWY,mBAAX,CAA+BC,KAAnC,EAA0C;AACtC,YAAIC,UAAU,GAAG;AACbC,UAAAA,SAAS,EAAE;AACPC,YAAAA,aAAa,EAAE,KAAKhB,KAAL,CAAWY,mBAAX,CAA+BC,KADvC;AAEPI,YAAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiBiB,QAFpB;AAGPN,YAAAA,mBAAmB,EAAE,KAAKZ,KAAL,CAAWY;AAHzB,WADE;AAMbO,UAAAA,QAAQ,EAAE,wBANG;AAObC,UAAAA,SAAS,EAAE;AAPE,SAAjB;AASA,aAAKf,KAAL,CAAWpC,gCAAX,CAA4C6C,UAA5C,EAAwD,KAAKT,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4BC,kBAApF;AACH,OAXD,MAWO;AACH1E,QAAAA,KAAK,CAAC2E,IAAN,CAAW,KAAKlB,KAAL,CAAWmB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KApvBkB;;AAAA,SA4wBnBC,UA5wBmB,GA4wBN,MAAM;AACf,UAAIC,SAAS,GAAG,KAAKvB,KAAL,CAAWJ,KAAX,CAAiB2B,SAAjC;AACA,UAAIC,SAAS,GAAG,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,SAAjC;AACA,UAAIC,cAAc,GAAG,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB6B,cAAtC;;AAEA,UAAI,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB2B,SAArB,EAAgC;AAC5B,YAAI,KAAKvB,KAAL,CAAWJ,KAAX,CAAiB8B,SAAjB,KAA+B,QAAnC,EAA8C;AAC1CH,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,cAAc,GAAG,EAAjB;AAEAA,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,UAAAA,cAAc,CAAC,aAAD,CAAd,GAA8B,EAA9B;AACH,SARD,MASK;AACDF,UAAAA,SAAS,GAAG,KAAZ;AACAE,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACFA,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,UAAAA,cAAc,CAAC,aAAD,CAAd,GAA8B,EAA9B;AACD;AACJ,OAhBD,MAiBK;AACDD,QAAAA,SAAS,GAAG,KAAZ;AACAC,QAAAA,cAAc,GAAG,EAAjB;AACH;;AAED,YAAME,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE9D,cADK;AAEf+D,QAAAA,IAAI,EAAE;AAAEL,UAAAA,SAAF;AAAaD,UAAAA,SAAb;AAAwBE,UAAAA,cAAxB;AAAwCK,UAAAA,UAAU,EAAE;AAApD;AAFS,OAAnB;AAIA,WAAK9B,KAAL,CAAWvC,WAAX,CAAuBkE,UAAvB;AAEH,KA7yBkB;;AAAA,SAuzBnBI,kBAvzBmB,GAuzBE,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AAC3C,UAAI1B,mBAAmB,GAAG,KAAKZ,KAAL,CAAWY,mBAAX,IAAkC,EAA5D;AACAA,MAAAA,mBAAmB,GAAGyB,SAAtB;AACA,WAAKE,SAAL,CAAeC,OAAf,CAAuB9B,KAAvB,GAA+B,EAA/B;AACA,WAAKF,QAAL,CAAc;AAAEI,QAAAA;AAAF,OAAd,EAJ2C,CAK3C;AACA;AACA;AACH,KA/zBkB;;AAAA,SA2vCnB6B,aA3vCmB,GA2vCH,MAAM;AAClB,YAAM3B,UAAU,GAAG;AACfC,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBiB,QADZ;AAERwB,YAAAA,OAAO,EAAE,KAAK1C,KAAL,CAAW8B,cAAX,CAA0B,eAA1B,CAFD;AAGRa,YAAAA,WAAW,EAAC,KAAK3C,KAAL,CAAW8B,cAAX,CAA0B,aAA1B,KAA4C,KAAK9B,KAAL,CAAW8B,cAAX,CAA0B,aAA1B,EAAyCpB,KAHzF;AAIRkC,YAAAA,iBAAiB,EAAC,KAAK5C,KAAL,CAAW8B,cAAX,CAA0B,aAA1B,KAA4C,KAAK9B,KAAL,CAAW8B,cAAX,CAA0B,aAA1B,EAAyCjB;AAJ/F,WADL;AAQPgC,UAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAW8B,cAAX,CAA0B,eAA1B;AARH,SADI;AAWfgB,QAAAA,UAAU,EAAE,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB6C;AAXd,OAAnB;AAaA,WAAKzC,KAAL,CAAWxC,uBAAX,CAAmCiD,UAAnC,EAA+C,WAA/C;AACH,KA1wCkB;;AAAA,SAsxCnBiC,UAtxCmB,GAsxCN,MAAM;AACf,WAAKR,SAAL,CAAeC,OAAf,CAAuB9B,KAAvB,GAA+B,EAA/B;AAEA,YAAMI,UAAU,GAAG;AACfC,QAAAA,SAAS,EAAE;AAAE,sBAAY,KAAKV,KAAL,CAAWJ,KAAX,CAAiBiB;AAA/B,SADI;AAEfC,QAAAA,QAAQ,EAAE,wBAFK;AAGfC,QAAAA,SAAS,EAAE,wBAHI;AAIf4B,QAAAA,WAAW,EAAE,4BAJE;AAKf9B,QAAAA,QAAQ,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBiB,QALZ;AAMf+B,QAAAA,aAAa,EAAE,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBgD;AANjB,OAAnB;AAWA,WAAK5C,KAAL,CAAW1C,WAAX,CAAuBmD,UAAvB;AACH,KAryCkB;;AAGf,SAAKd,KAAL,GAAa;AAETkD,MAAAA,YAAY,EAAE,EAFL;AAGTC,MAAAA,KAAK,EAAE,EAHE;AAITrB,MAAAA,cAAc,EAAE,EAJP;AAKTC,MAAAA,SAAS,EAAE,EALF;AAMTqB,MAAAA,iBAAiB,EAAEC,SANV;AAOTC,MAAAA,UAAU,EAAED,SAPH;AAQTE,MAAAA,UAAU,EAAE,IARH;AASTC,MAAAA,qBAAqB,EAAE,EATd;AAUTC,MAAAA,UAAU,EAAE,IAAIC,GAAJ,EAVH;AAWTT,MAAAA,aAAa,EAAE,KAXN;AAYTxC,MAAAA,WAAW,EAAC,IAAIkD,IAAJ,CAASA,IAAI,CAACC,GAAL,CAASC,WAAT,EAAqB,EAArB,EAA0B,EAA1B,CAAT,CAZH;AAaTC,MAAAA,QAAQ,EAAC,SAbA;AAcT5B,MAAAA,IAAI,EAAE,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,KAAoDV,SAApD,GAA8D,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA1F,GAAgH;AAd7G,KAAb;AAgBA,SAAKxB,SAAL,GAAiB7F,KAAK,CAACsH,SAAN,EAAjB;AAEA,SAAKC,cAAL,GAAsB,IAAI1E,cAAJ,EAAtB;AAEA,SAAK2E,kBAAL,GAA0B,CAAC,QAAD,EAAW,eAAX,CAA1B;AAEA,SAAKC,eAAL,GAAuB,CAAC,QAAD,EAAW,eAAX,CAAvB;AACH;;AAE8B,SAAxBC,wBAAwB,CAAC/D,KAAD,EAAQL,KAAR,EAAe;AAE1C,QAAIK,KAAK,CAACJ,KAAN,CAAYiD,YAAZ,KAA6B,EAA7B,IAAmC7C,KAAK,CAACJ,KAAN,CAAYiD,YAAZ,KAA6BlD,KAAK,CAACkD,YAA1E,EAAwF;AACpFtG,MAAAA,KAAK,CAAC2E,IAAN,CAAWlB,KAAK,CAACJ,KAAN,CAAYiD,YAAvB;AACA7C,MAAAA,KAAK,CAACJ,KAAN,CAAYiD,YAAZ,GAA2B,EAA3B;AACH;;AACD,QAAI7C,KAAK,CAACJ,KAAN,CAAYkD,KAAZ,KAAsBnD,KAAK,CAACmD,KAAhC,EAAuC;AACnCvG,MAAAA,KAAK,CAACuG,KAAN,CAAY9C,KAAK,CAACJ,KAAN,CAAYkD,KAAxB;AACA9C,MAAAA,KAAK,CAACJ,KAAN,CAAYkD,KAAZ,GAAoB,EAApB;AACH;;AACD,QAAI9C,KAAK,CAACJ,KAAN,CAAY6B,cAAZ,KAA+BuB,SAAnC,EAA8C;AAC1C,aAAO;AAAEvB,QAAAA,cAAc,EAAE;AAAlB,OAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAQDuC,EAAAA,MAAM,GAAG;AAEL;AACA,QAAIC,aAAa,GAAG,mBAApB;;AACA,QAAI,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,IAAqD,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,CAAkDQ,kBAAlD,KAAyExF,iBAAiB,CAACyF,QAApJ,EAA8J;AAC1JF,MAAAA,aAAa,GAAG,iBAAhB;AACH;;AACD,QAAIG,aAAa,GAAG,aAApB;AACA,QAAIC,KAAK,GAAC,EAAV;AACA,QAAIC,MAAM,GAAC,EAAX;AAEC,UAAMC,KAAK,GAAG,KAAK5E,KAAL,CAAWyD,UAAX,CAAsBoB,GAAtB,CAA0B,cAA1B,KAA6C,KAAK7E,KAAL,CAAWyD,UAAX,CAAsBqB,GAAtB,CAA0B,cAA1B,EAA0CC,YAArG,CAXI,CAYL;AACA;AACA;;AAGA,UAAMC,WAAW,GAAG;AAChBC,MAAAA,aAAa,EAAE,eADC;AACgBC,MAAAA,cAAc,EAAE,uBADhC;AACyDC,MAAAA,eAAe,EAAE,eAD1E;AAEhBC,MAAAA,QAAQ,EAAE,kDAFM;AAE8CC,MAAAA,gBAAgB,EAAE;AAAEpE,QAAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiBiB;AAA7B,OAFhE;AAGhBG,MAAAA,UAAU,EAAE,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBoB,UAHb;AAGyB8C,MAAAA,eAAe,EAAE,KAAKA,eAH/C;AAIhBnD,MAAAA,aAAa,EAAC,KAAKhB,KAAL,CAAWY,mBAAX,GAAiC,KAAKZ,KAAL,CAAWY,mBAAX,CAA+BC,KAAhE,GAAsE;AAJpE,KAApB;AAOA,UAAMyE,QAAQ,GAAG;AACbhC,MAAAA,UAAU,EAAE,eADC;AACgBvB,MAAAA,SAAS,EAAE,QAD3B;AACqCwD,MAAAA,cAAc,EAAE,eADrD;AAEblE,MAAAA,UAAU,EAAE,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBoB,UAFhB;AAE4BH,MAAAA,QAAQ,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBiB,QAFvD;AAGb6D,MAAAA,YAAY,EAAEH,KAHD;AAIbhE,MAAAA,mBAAmB,EAAC,KAAKZ,KAAL,CAAWY;AAJlB,KAAjB,CAxBK,CA+BL;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAGA,UAAM4E,WAAW,GAAG,KAAKnF,KAAL,CAAWJ,KAAX,CAAiBwF,QAAjB,IAA6B,KAAKpF,KAAL,CAAWJ,KAAX,CAAiBwF,QAAjB,CAA0B,CAA1B,IAA+B,KAAKpF,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4BqE,aAA5G;AACA,UAAMC,WAAW,GAAG,KAAKtF,KAAL,CAAWJ,KAAX,CAAiBwF,QAAjB,IAA6B,KAAKpF,KAAL,CAAWJ,KAAX,CAAiBwF,QAAjB,CAA0B,CAA1B,IAA+B,KAAKpF,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4BuE,aAA5G,CA7CK,CAiDL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACwB,UAAMC,cAAc,GAAG,KAAK7F,KAAL,CAAW8F,UAAX,IAAyB,EAAhD;AACxB,wBAAQ,uDAGJ;AAAK,MAAA,SAAS,EAAC,kDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCD,cAAc,CAACE,MAAf,GAAwB,CAAxB,gBACW,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,mBAAD;AAAqB,MAAA,cAAc,EAAEF,cAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADX,GAGsB,EAJvB,eAMI,oBAAC,GAAD;AAAK,MAAA,SAAS,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIY,oBAAC,UAAD;AACI,MAAA,UAAU,EAAE,KAAKxF,KAAL,CAAWmB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADhB;AAEI,MAAA,UAAU,EAAE,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBoB,UAFjC;AAGI,MAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBiB,QAH/B;AAII,MAAA,UAAU,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B2E,YAA5B,IAA4C,KAAK3F,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B4E,aAJxF;AAKI,MAAA,eAAe,EAAGC,SAAD,IAAe,KAAK7F,KAAL,CAAWtC,8BAAX,CAA0CmI,SAA1C,EAAoD,KAAK7F,KAAL,CAAWJ,KAAX,CAAiBiB,QAArE,EAA+E,KAAKb,KAAL,CAAWJ,KAAX,CAAiBoB,UAAhG,EAA2G,KAAKrB,KAAL,CAAWY,mBAAX,CAA+BC,KAA1I,CALpC;AAMI,MAAA,cAAc,EAAE,KAAKR,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBANhD;AAOI,MAAA,eAAe,EAAC,eAPpB;AAQI,MAAA,SAAS,EAAC,QARd;AASI,MAAA,UAAU,EAAC,eATf,CAUI;AAVJ;AAWI,MAAA,gBAAgB,EAAE,KAAK1D,KAAL,CAAWnC,gBAXjC;AAYI,MAAA,WAAW,EAAE8G,WAZjB;AAaI,MAAA,qBAAqB,EAAE,KAAKhF,KAAL,CAAWwD,qBAbtC;AAcI,MAAA,KAAK,EAAEoB,KAdX;AAeI,MAAA,SAAS,EAAE,KAAKrC,SAfpB;AAgBI,MAAA,UAAU,EAAE,KAAKQ,UAhBrB;AAiBI,MAAA,SAAS,EAAE,MAAM,KAAK1C,KAAL,CAAWrC,wBAAX,CAAoCsH,QAApC,CAjBrB;AAkBI,MAAA,cAAc,EAAE,KAlBpB;AAmBI,MAAA,UAAU,EAAE,KAnBhB;AAoBI,MAAA,aAAa,EAAE,KAAKjF,KAAL,CAAWJ,KAAX,CAAiBgD,aApBpC;AAqBI,MAAA,UAAU,EAAE,KAAKkD,UArBrB;AAsBA,MAAA,WAAW,EAAE,KAAKC,WAtBlB;AAuBA,MAAA,cAAc,EAAE,KAAKzF,cAvBrB;AAwBA,MAAA,cAAc,EAAE,IAxBhB;AAyBA,MAAA,UAAU,EAAE,KAAKN,KAAL,CAAWJ,KAAX,CAAiBoG,UAzB7B;AA0BA,MAAA,eAAe,EAAE,CACb;AACI,uCACI,oBAAC,0BAAD;AACA,UAAA,kBAAkB,EAAE,KAAKrG,KAAL,CAAWsB,kBAAX,IAAiC,EADrD;AAEI,UAAA,mBAAmB,EAAE,KAAKtB,KAAL,CAAWY,mBAAX,IAAkC,EAF3D;AAGI,UAAA,aAAa,EAAE,KAAKwB,kBAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR,OADa,CA1BjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJZ,CADJ,eA6CI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGQ,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC,oBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B4E,aAA5B,IAA6C,KAAK5F,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B4E,aAA5B,CAA0CF,MAA1C,GAAmD,CAAhG,IAAqG,KAAK1F,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAAjI,gBACG,uDACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAC,QAApB;AAA6B,MAAA,cAAc,EAAC,OAA5C;AAAoD,MAAA,EAAE,EAAC,mBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,oBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEK,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,IACe,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,CAAkDuC,MAAlD,KAA6DjD,SAD5E,GAEe,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,CAAkDuC,MAFjE,GAE0E,EAJ/E,CAFJ,eAQI,oBAAC,IAAD,CAAM,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,+BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAM,MAAA,SAAS,EAAG,oBAAmBhC,aAAc,cAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKG,aAAa,KAAK,EAAlB,gBAAuB;AAAG,MAAA,KAAK,EAAC,eAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAvB,GAAuD,EAD5D,EAGK,KAAKpE,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,IACG,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,CAAkD/C,aAAlD,KAAoEqC,SADvE,GAEG,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,CAAkD/C,aAFrD,GAEqE,EAL1E,EAMK,GANL,CAFJ,CADJ,CADJ,CARJ,CADJ,eA2DI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,kBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOxD,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWkC,IAA5B;AAAkC,MAAA,IAAI,EAAE,KAAKlC,KAAL,CAAWS,WAAnD;AACc,MAAA,YAAY,EAAE,KAAKH,gBADjC;AACmD,MAAA,QAAQ,EAAE,KAAKN,KAAL,CAAW8D,QADxE;AAEiB,MAAA,QAAQ,EAAE;AACrByC,QAAAA,GAAG,EAAE,IADgB;AAErBC,QAAAA,MAAM,EAAE,IAFa;AAGrBC,QAAAA,IAAI,EAAE,IAHe;AAIrBC,QAAAA,MAAM,EAAE,IAJa;AAMrBC,QAAAA,MAAM,EAAE,IANa;AAOrBC,QAAAA,IAAI,EAAE;AAPe,OAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAYU,oBAAC,OAAD;AAAS,MAAA,YAAY,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZV,eAaU,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbV,eAcU,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdV,CAPwD,MADJ,CADJ,CAHJ,eA6VI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CA7VJ,CA3DJ,CADH,GAkaK,EAnaV,CADJ,CAHR,CA7CJ,CANJ,CAHI,CAAR;AAmhBH;;AAEDC,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAIC,kBAAkB,GAAG,KAAzB;;AACA,QAAI,KAAK1G,KAAL,CAAWJ,KAAX,CAAiB6B,cAAjB,KAAoCgF,aAAa,CAAC7G,KAAd,CAAoB6B,cAA5D,EAA4E;AACxE,WAAKtB,QAAL,CAAc;AAAEsB,QAAAA,cAAc,EAAE,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB6B;AAAnC,OAAd;AACH;;AACD,QAAI,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBiB,QAAjB,CAA0B8F,SAA1B,KAAwCF,aAAa,CAAC7G,KAAd,CAAoBiB,QAApB,CAA6B8F,SAAzE,EAAoF;AAChF,YAAMxD,qBAAqB,GAAG,EAA9B;;AACA,UAAI,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBuD,qBAArB,EAA4C;AACxC,aAAKnD,KAAL,CAAWJ,KAAX,CAAiBuD,qBAAjB,CAAuC,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBiB,QAAjB,CAA0B8F,SAAjE,KAA+EC,MAAM,CAACC,MAAP,CAAc,KAAK7G,KAAL,CAAWJ,KAAX,CAAiBuD,qBAAjB,CAAuC,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBiB,QAAjB,CAA0B8F,SAAjE,CAAd,EAA2FG,GAA3F,CAA+FC,IAAI,IAC9K5D,qBAAqB,CAAC6D,IAAtB,CAA2BD,IAAI,CAACrC,YAAhC,CAD2E,CAA/E;AAEH;;AACD,YAAMtB,UAAU,GAAGpF,aAAa,CAAC,KAAKgC,KAAL,CAAWJ,KAAX,CAAiBuD,qBAAlB,EAAyC,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBiB,QAAjB,CAA0B8F,SAAnE,CAAhC;AACA,WAAKxG,QAAL,CAAc;AAAEgD,QAAAA,qBAAF;AAAyBC,QAAAA;AAAzB,OAAd;AACH;;AACD,QAAI7C,mBAAmB,GAAG,KAAKZ,KAAL,CAAWY,mBAAX,IAAkC,EAA5D;AACA,QAAIU,kBAAkB,GAAG,KAAKtB,KAAL,CAAWsB,kBAAX,IAAiC,EAA1D;;AAEA,QAAI,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4BiG,0BAA5B,KAA2DR,aAAa,CAAC7G,KAAd,CAAoBoB,UAApB,CAA+BiG,0BAA9F,EAA0H;AACtH,YAAMC,eAAe,GAAGjJ,mBAAmB,CAAC,KAAK+B,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4BiG,0BAA5B,IAA0D,EAA3D,EAA+D,eAA/D,EACvC,eADuC,EACtB,eADsB,EACL,WADK,EACQ,KADR,CAA3C;AAEIhG,MAAAA,kBAAkB,GAAGiG,eAAe,CAACzC,GAAhB,CAAoB,YAApB,CAArB;;AACR,UAAG,KAAK9E,KAAL,CAAWY,mBAAX,KAAiC,IAAjC,IAAyC,KAAKZ,KAAL,CAAWY,mBAAX,KAAiCyC,SAA7E,EACA;AACQ,YAAIkE,eAAe,CAACzC,GAAhB,CAAoB,cAApB,CAAJ,EAAyC;AACzClE,UAAAA,mBAAmB,GAAG2G,eAAe,CAACzC,GAAhB,CAAoB,cAApB,CAAtB;AACH,SAFG,MAEG,IAAIxD,kBAAkB,IAAIA,kBAAkB,CAACyE,MAAnB,GAA4B,CAAtD,EAAyD;AAC5DnF,UAAAA,mBAAmB,GAAGU,kBAAkB,CAAC,CAAD,CAAxC;AACH;AACJ;;AACGyF,MAAAA,kBAAkB,GAAG,IAArB;AACH,KAbD,MAaO,IAAI,KAAK1G,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4BT,mBAA5B,KAAoDkG,aAAa,CAAC7G,KAAd,CAAoBoB,UAApB,CAA+BT,mBAAvF,EAA4G;AAC/GA,MAAAA,mBAAmB,GAAG,KAAKP,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4BT,mBAAlD;AACAmG,MAAAA,kBAAkB,GAAG,IAArB;AACH;;AACD,QAAIA,kBAAJ,EAAwB;AACpB,WAAKvG,QAAL,CAAc;AAAEI,QAAAA,mBAAF;AAAuBU,QAAAA;AAAvB,OAAd;AACH;;AACD,QAAI,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,KAAgCyF,aAAa,CAAC7G,KAAd,CAAoBoB,UAAxD,EAAoE;AAChE,YAAMyE,UAAU,GAAG,KAAK0B,qBAAL,EAAnB,CADgE,CAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA,WAAKhH,QAAL,CAAc;AAAEsF,QAAAA;AAAF,OAAd,EAhBgE,CAiBhE;AACH;;AAGD,QAAI5D,IAAI,GAAC,EAAT;AACA,QAAIuF,QAAJ;;AACA,QAAG,KAAKpH,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,KAAsD,IAAtD,IACC,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,KAAoDV,SADxD,EAEA;AACE,UAAI,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,KAAsD+C,aAAa,CAAC7G,KAAd,CAAoBoB,UAApB,CAA+B0C,qBAAzF,EAAgH;AAClH;AACA;AACE7B,QAAAA,IAAI,CAACmF,IAAL,CAAU,KAAKhH,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,CAAkD2D,QAA5D,EAHgH,CAIlH;;AAIDxF,QAAAA,IAAI,GAAGA,IAAI,CAACiF,GAAL,CAASQ,QAAQ,KAAK;AAC5BjG,UAAAA,EAAE,EAAEiG,QAAQ,CAACjG,EADe;AAE5BkG,UAAAA,KAAK,EAAEC,WAAW,CAACF,QAAQ,CAACC,KAAV,CAFU;AAG5BH,UAAAA,QAAQ,EAACI,WAAW,CAACF,QAAQ,CAACC,KAAV,CAHQ;AAI5BE,UAAAA,aAAa,EAAEH,QAAQ,CAACG,aAJI;AAK5BC,UAAAA,GAAG,EAAEF,WAAW,CAACF,QAAQ,CAACI,GAAV,CALY;AAM5BC,UAAAA,WAAW,EAAEL,QAAQ,CAACK,WANM;AAO5BC,UAAAA,QAAQ,EAAEN,QAAQ,CAACM,QAPS;AAQ5BC,UAAAA,KAAK,EAAEP,QAAQ,CAACO,KARY;AAS5BC,UAAAA,WAAW,EAAER,QAAQ,CAACQ,WATM;AAU5BC,UAAAA,cAAc,EAAET,QAAQ,CAACS,cAVG;AAW5BC,UAAAA,YAAY,EAAEV,QAAQ,CAACW,YAXK;AAY5BC,UAAAA,oBAAoB,EAAEZ,QAAQ,CAACa,mBAZH;AAa5BC,UAAAA,MAAM,EAAEd,QAAQ,CAACe,MAbW;AAc5BC,UAAAA,OAAO,EAAEhB,QAAQ,CAACiB,MAdU;AAe5BC,UAAAA,QAAQ,EAAElB,QAAQ,CAACiB;AAfS,SAAL,CAAjB,CAAP,CARmH,CAyBpH;AACA;AACA;AACF;AACA;AACA;;AACE,aAAKpI,QAAL,CAAc;AAAC0B,UAAAA,IAAD;AAAMzB,UAAAA,WAAW,EAACyB,IAAI,CAAC,CAAD,CAAJ,CAAQuF;AAA1B,SAAd;AACG;AACF;AAEF;;AAkBDD,EAAAA,qBAAqB,GAAG;AACpB,UAAM3B,cAAc,GAAG,EAAvB;;AACA,QAAI,KAAKxF,KAAL,CAAWJ,KAAX,CAAiBoB,UAArB,EAAkC;AAE9BwE,MAAAA,cAAc,CAACwB,IAAf,CACI;AACI,iBAAS,mBADb;AAEI,iBAAS,KAAKhH,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,IACT,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,CAAkD/C,aAAlD,KAAoEqC,SAD3D,GACuE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBoB,UAAjB,CAA4B0C,qBAA5B,CAAkD/C,aADzH,GACwI;AAHrJ,OADJ;AAQH;;AACD,WAAO6E,cAAP;AACH,GArwBgD,CAuwBjD;AACA;AACA;AACA;AACA;;;AAkgBAiD,EAAAA,oBAAoB,GAAG;AACnB,UAAM9G,UAAU,GAAG;AACfC,MAAAA,QAAQ,EAAE9D,cADK;AAEf+D,MAAAA,IAAI,EAAE;AACFb,QAAAA,UAAU,EAAE,EADV;AACcP,QAAAA,UAAU,EAAEuC,SAD1B;AACqCtB,QAAAA,SAAS,EAAE,IADhD;AACsDgH,QAAAA,SAAS,EAAE1F;AADjE;AAFS,KAAnB;AAMA,SAAKhD,KAAL,CAAWvC,WAAX,CAAuBkE,UAAvB;AACH;;AArxCgD;;AAwyCrD,eAAerF,OAAO,CAACoD,eAAD,EAAkB;AACpCpC,EAAAA,WADoC;AACvBC,EAAAA,UADuB;AACXC,EAAAA,uBADW;AAEpCC,EAAAA,WAFoC;AAEvBC,EAAAA,8BAFuB;AAESC,EAAAA,wBAFT;AAEkCC,EAAAA,gCAFlC;AAEoEC,EAAAA;AAFpE,CAAlB,CAAP,CAGZrB,UAAU,CAACqD,sBAAD,CAHE,CAAf;AAKA,OAAO,MAAM2D,WAAW,GAAG,IAAIF,IAAJ,GAAWqF,WAAX,EAApB;AACP,OAAO,MAAMnB,WAAW,GAAGoB,SAAS,IAAI;AACtC,QAAMC,IAAI,GAAG,IAAIvF,IAAJ,CAASsF,SAAT,CAAb;AACAC,EAAAA,IAAI,CAACC,WAAL,CAAiBtF,WAAjB;AACA,SAAOqF,IAAP;AACD,CAJM;AAKP,OAAO,MAAMzI,WAAW,GAAG,IAAIkD,IAAJ,CAASA,IAAI,CAACC,GAAL,CAASC,WAAT,EAAsB,IAAIF,IAAJ,GAAWyF,QAAX,EAAtB,EAA6C,IAAIzF,IAAJ,GAAW0F,OAAX,EAA7C,CAAT,CAApB","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Image } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt,faThumbsUp, faUserTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getGrapicalSchedulerViewDetail,\r\n    getSchedulerComboService, changeGrapicalScheduleTypeFilter,filterColumnData\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap,constructOptionList, validatePhoneNumber, formatInputDate,create_UUID, validateEmail, validateLoginId, formatDate, onDropAttachFileList, deleteAttachmentDropZone } from '../../components/CommonScript';\r\n//import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\n// import 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\n\r\n//import AddScheduler from './AddScheduler';\r\n\r\nimport Esign from '../audittrail/Esign';\r\n//import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport GrapicalScheduleTypeFilter from './GrapicalScheduleTypeFilter';\r\nimport { Scheduler, TimelineView, DayView,WeekView, MonthView } from '@progress/kendo-react-scheduler';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass GraphicalSchedulerView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            selectedScheduler: undefined,\r\n            screenName: undefined,\r\n            userLogged: true,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            isClearSearch: false,\r\n            displayDate:new Date(Date.UTC(currentYear,10 , 27)),\r\n            timezone:\"Etc/UTC\",\r\n            data: this.props.Login.masterData.SelectedSchedulerView!==undefined?this.props.Login.masterData.SelectedSchedulerView:\"\"\r\n        };\r\n        this.searchRef = React.createRef();\r\n       \r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        this.schedulerFieldList = ['stitle', 'sscheduletype'];\r\n\r\n        this.searchFieldList = ['stitle', 'sscheduletype'];\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    handleDateChange = (event) => {\r\n        this.setState({\r\n            displayDate: event.value,\r\n        });\r\n      };\r\n\r\n    render() {\r\n\r\n        //let userStatusCSS = \"outline-success\"//\"outline-secondary\";\r\n        let userStatusCSS = \"outline-secondary\";\r\n        if (this.props.Login.masterData.SelectedSchedulerView && this.props.Login.masterData.SelectedSchedulerView.ntransactionstatus === transactionStatus.APPROVED) {\r\n            userStatusCSS = \"outline-success\";\r\n        }\r\n        let activeIconCSS = \"fa fa-check\"\r\n        let sweek=\"\";\r\n        let smonth=\"\";\r\n\r\n         const addId = this.state.controlMap.has(\"AddScheduler\") && this.state.controlMap.get(\"AddScheduler\").ncontrolcode;\r\n        // const editId = this.state.controlMap.has(\"EditScheduler\") && this.state.controlMap.get(\"EditScheduler\").ncontrolcode;\r\n        // const deleteId = this.state.controlMap.has(\"DeleteScheduler\") && this.state.controlMap.get(\"DeleteScheduler\").ncontrolcode;\r\n        // const approveId = this.state.controlMap.has(\"ApproveScheduler\") && this.state.controlMap.get(\"ApproveScheduler\").ncontrolcode;\r\n        \r\n\r\n        const filterParam = {\r\n            inputListName: \"SchedulerView\", selectedObject: \"SelectedSchedulerView\", primaryKeyField: \"nschedulecode\",\r\n            fetchUrl: \"graphicalschedulerview/getGraphicalSchedulerView\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList,\r\n            sscheduletype:this.state.nfilterScheduleType ? this.state.nfilterScheduleType.label:null\r\n        };\r\n\r\n        const addParam = {\r\n            screenName: \"IDS_SCHEDULER\", operation: \"create\", primaryKeyName: \"nschedulecode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: addId,\r\n            nfilterScheduleType:this.state.nfilterScheduleType\r\n        }\r\n\r\n        // const editParam = {\r\n        //     screenName: \"IDS_SCHEDULER\", operation: \"update\", primaryKeyName: \"nschedulecode\",\r\n        //     masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n        //     ncontrolcode: editId, inputListName: \"Scheduler\", selectedObject: \"SelectedScheduler\"\r\n        // };\r\n\r\n        // const approveParam = {\r\n        //     screenName: \"IDS_SCHEDULER\", operation: \"update\", primaryKeyName: \"nschedulecode\",\r\n        //     masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n        //     ncontrolcode: approveId, inputListName: \"Scheduler\", selectedObject: \"SelectedScheduler\"\r\n        // };\r\n\r\n        \r\n        const userImgPath = this.props.Login.settings && this.props.Login.settings[6] + this.props.Login.masterData.UserImagePath;\r\n        const signImgPath = this.props.Login.settings && this.props.Login.settings[6] + this.props.Login.masterData.SignImagePath;\r\n\r\n       \r\n\r\n        // const mandatoryFields = [{\"idsName\": \"IDS_SCHEDULERNAME\", \"dataField\": \"sschedulename\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        //                         //{ \"idsName\": \"IDS_SCHEDULERTYPE\", \"dataField\": \"sscheduletype\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        //                         //{ \"idsName\": \"IDS_OCCURRENCE\", \"dataField\": \"noccurencenooftimes\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        //                         //{ \"idsName\": \"IDS_OCCURRENCEDAYWISE\", \"dataField\": \"noccurencedaywiseinterval\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        //                         //{ \"idsName\": \"IDS_OCCURRENCEHOURWISE\", \"dataField\": \"soccurencehourwiseinterval\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        //                         //{ \"idsName\": \"IDS_MONTHLYOCCURRENCETYPE\", \"dataField\": \"nmonthlyoccurrencetype\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        //                         { \"idsName\": \"IDS_STARTDATE\", \"dataField\": \"dstartdate\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        //                         { \"idsName\": \"IDS_STARTTIME\", \"dataField\": \"dstarttime\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        //                         ];\r\n                                const breadCrumbData = this.state.filterData || [];\r\n        return (<>\r\n            {/* Start of get display*/}\r\n            \r\n            <div className=\"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\">\r\n            {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                <Row noGutters>\r\n                    <Col md={4}>\r\n                        {/* <Row noGutters>\r\n                            <Col md={12}> */}\r\n                            {/* <div className=\"list-fixed-wrap\"> */}\r\n                                <ListMaster\r\n                                    screenName={this.props.intl.formatMessage({ id: \"IDS_GRAPHICALSCHDULERVIEW\" })}\r\n                                    masterData={this.props.Login.masterData}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.SchedulerView}\r\n                                    getMasterDetail={(scheduler) => this.props.getGrapicalSchedulerViewDetail(scheduler,this.props.Login.userInfo, this.props.Login.masterData,this.state.nfilterScheduleType.label)}\r\n                                    selectedMaster={this.props.Login.masterData.SelectedSchedulerView}\r\n                                    primaryKeyField=\"nschedulecode\"\r\n                                    mainField=\"stitle\"\r\n                                    firstField=\"sscheduletype\"\r\n                                    //secondField=\"nstatus\"\r\n                                    filterColumnData={this.props.filterColumnData}\r\n                                    filterParam={filterParam}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    addId={addId}\r\n                                    searchRef={this.searchRef}\r\n                                    reloadData={this.reloadData}\r\n                                    openModal={() => this.props.getSchedulerComboService(addParam)}\r\n                                    isMultiSelecct={false}\r\n                                    hidePaging={false}\r\n                                    isClearSearch={this.props.Login.isClearSearch}\r\n                                    openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TESTFILTER\":\r\n                                            <GrapicalScheduleTypeFilter\r\n                                            filterScheduleType={this.state.filterScheduleType || []}\r\n                                                nfilterScheduleType={this.state.nfilterScheduleType || {}}\r\n                                                onComboChange={this.onComboChangeevent}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                                />\r\n                            {/* </div>\r\n                        </Col></Row> */}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        {/* <Row>\r\n                            <Col md={12}> */}\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.SchedulerView && this.props.Login.masterData.SchedulerView.length > 0 && this.props.Login.masterData.SelectedSchedulerView ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                                                <Card.Title className=\"product-title-main\">\r\n                                                    \r\n                                                    {this.props.Login.masterData.SelectedSchedulerView &&\r\n                                                                    this.props.Login.masterData.SelectedSchedulerView.stitle !== undefined ?\r\n                                                                    this.props.Login.masterData.SelectedSchedulerView.stitle : \"\"}\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle>\r\n                                                    <div className=\"d-flex product-category\">\r\n                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n\r\n                                                            <span className={`btn btn-outlined ${userStatusCSS} btn-sm ml-3`}>\r\n                                                                {activeIconCSS !== \"\" ? <i class=\"fas fa-check \"></i> : \"\"}\r\n                                                                {/* {this.props.Login.masterData.SelectedScheduler.nstatus === 1 ? \"DRAFT\": \"Approved\"} */}\r\n                                                                {this.props.Login.masterData.SelectedSchedulerView &&\r\n                                                                    this.props.Login.masterData.SelectedSchedulerView.sscheduletype !== undefined ?\r\n                                                                    this.props.Login.masterData.SelectedSchedulerView.sscheduletype : \"\"}\r\n                                                                {\" \"}\r\n                                                                {/*{activeIconCSS}  <FormattedMessage id= {this.props.Login.masterData.SelectedUser.sactivestatus}/> */}\r\n\r\n                                                            </span>\r\n                                                        </h2>\r\n                                                        {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                        {/* <div className=\"d-inline\">\r\n                                                            <Nav.Link name=\"editScheduler\" hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                onClick={() => this.props.getSchedulerComboService(editParam)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                            </Nav.Link>\r\n\r\n                                                            <Nav.Link name=\"deleteScheduler\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                               \r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link name=\"ApproveScheduler\" hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                onClick={() => this.onApproveClick(\"Scheduler\", \"approve\", \"nschedulecode\", this.props.Login.masterData.SelectedScheduler.nschedulecode, approveId)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                            </Nav.Link>\r\n                                                            \r\n                                                            \r\n                                                        </div> */}\r\n                                                        {/* </Tooltip> */}\r\n                                                    </div>\r\n\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body className=\"form-static-wrap\">\r\n                                                {/* <Card.Text> */}\r\n\r\n                                                <Row>\r\n                                                    <Col md={12}>\r\n                                                        <FormGroup>\r\n                                                            {/* <FormLabel><FormattedMessage id=\"IDS_SCHEDULERTYPE\" message=\"Scheduler Type\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedScheduler.sscheduletype===\"O\"?\"One Time\":\r\n                                                            this.props.Login.masterData.SelectedScheduler.sscheduletype===\"D\"?\"Daily\":\r\n                                                            this.props.Login.masterData.SelectedScheduler.sscheduletype===\"W\"?\"Weekly\":\"Monthly\"}</ReadOnlyText> */}\r\n\r\n{/* onDataChange={this.handleDataChange} */}\r\n<Scheduler data={this.state.data} date={this.state.displayDate}\r\n              onDateChange={this.handleDateChange} timezone={this.state.timezone}\r\n                 editable={{\r\n      add: true,\r\n      remove: true,\r\n      drag: true,\r\n      resize: true,\r\n      \r\n      select: true,\r\n      edit: true\r\n     }} >\r\n          {/* <TimelineView /> defaultDate={this.state.displayDate}> */}\r\n          <DayView numberOfDays={3} />\r\n          <WeekView />\r\n          <MonthView />\r\n        </Scheduler>;\r\n\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    \r\n\r\n                                                    {/* <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_STARTDATEANDTIME\" message=\"Start Date & Time\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler && \r\n                                                                this.props.Login.masterData.SelectedScheduler.sstartdate !== null ?\r\n                                                                this.props.Login.masterData.SelectedScheduler.sstartdate.substring(0,10):\"\"}\r\n                                                                {\"  \"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler && \r\n                                                                this.props.Login.masterData.SelectedScheduler.sstarttime !== null ?\r\n                                                                this.props.Login.masterData.SelectedScheduler.sstarttime.substring(16,11):\"\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> */}\r\n\r\n                                                    {/* <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_STARTTIME\" message=\"Start Time\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedScheduler && \r\n                                                                this.props.Login.masterData.SelectedScheduler.sstarttime !== null ?\r\n                                                                this.props.Login.masterData.SelectedScheduler.sstarttime.substring(19,11):\"\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype !== \"O\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_ENDDATEANDTIME\" message=\"End Date & Time\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedScheduler && \r\n                                                                this.props.Login.masterData.SelectedScheduler.senddate !== null ?\r\n                                                                this.props.Login.masterData.SelectedScheduler.senddate.substring(0,10):\"\"}\r\n                                                                {\" \"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler && \r\n                                                                this.props.Login.masterData.SelectedScheduler.sendtime !== null ?\r\n                                                                this.props.Login.masterData.SelectedScheduler.sendtime.substring(16,11):\"\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> :\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype !== \"O\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_ENDTIME\" message=\"End Time\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedScheduler && \r\n                                                                this.props.Login.masterData.SelectedScheduler.sendtime !== null ?\r\n                                                                this.props.Login.masterData.SelectedScheduler.sendtime.substring(19,11):\"\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> :\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"D\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_OCCURRENCE\" message=\"Occurrence\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.noccurencenooftimes!==0?\r\n                                                                this.props.Login.masterData.SelectedScheduler.noccurencenooftimes:\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"D\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_OCCURRENCEDAYWISE\" message=\"Occurrence Day Wise\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.noccurencedaywiseinterval!==0?\r\n                                                                this.props.Login.masterData.SelectedScheduler.noccurencedaywiseinterval:\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"D\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_OCCURRENCEHOURWISE\" message=\"Occurrence Hour Wise\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.soccurencehourwiseinterval!==\"null \"?\r\n                                                                this.props.Login.masterData.SelectedScheduler.soccurencehourwiseinterval:\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"W\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_WEEKLYSCHEDULE\" message=\"Weekly Schedule\" /></FormLabel>\r\n                                                            \r\n                                                            <ReadOnlyText>\r\n                                                           \r\n                                                                {this.props.Login.masterData.SelectedScheduler.nsunday !== 0 ? sweek=this.props.intl.formatMessage({ id:\"IDS_SUNDAY\"}):\"\"}\r\n                                                            \r\n                                                            {this.props.Login.masterData.SelectedScheduler.nmonday !==0 ? sweek.trim()==\"\"?sweek= this.props.intl.formatMessage({ id:\"IDS_MONDAY\"}):sweek=\", \"+this.props.intl.formatMessage({ id:\"IDS_MONDAY\"}) : \"\"}\r\n                                                            \r\n                                                            {this.props.Login.masterData.SelectedScheduler.ntuesday !== 0?sweek.trim()==\"\"?sweek= this.props.intl.formatMessage({ id:\"IDS_TUESDAY\"}):sweek=\", \"+this.props.intl.formatMessage({ id:\"IDS_TUESDAY\"}) :\"\"}\r\n                                                            \r\n                                                            {this.props.Login.masterData.SelectedScheduler.nwednesday !==0 ?sweek.trim()==\"\"?sweek= this.props.intl.formatMessage({ id:\"IDS_WEDNESDAY\"}):sweek=\", \"+this.props.intl.formatMessage({ id:\"IDS_WEDNESDAY\"})   :\"\"}\r\n                                                            \r\n                                                            {this.props.Login.masterData.SelectedScheduler.nthursday !==0 ?sweek.trim()==\"\"?sweek= this.props.intl.formatMessage({ id:\"IDS_THURSDAY\"}):sweek=\", \"+this.props.intl.formatMessage({ id:\"IDS_THURSDAY\"}) : \"\"}\r\n                                                            \r\n                                                            {this.props.Login.masterData.SelectedScheduler.nfriday !==0 ?sweek.trim()==\"\"?sweek= this.props.intl.formatMessage({ id:\"IDS_FRIDAY\"}):sweek=\", \"+this.props.intl.formatMessage({ id:\"IDS_FRIDAY\"})  :\"\"}\r\n                                                            \r\n                                                            {this.props.Login.masterData.SelectedScheduler.nsaturday !==0 ?sweek.trim()==\"\"?sweek= this.props.intl.formatMessage({ id:\"IDS_SATURDAY\"}):sweek=\", \"+this.props.intl.formatMessage({ id:\"IDS_SATURDAY\"}) :\"\"}\r\n                                                            \r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"W\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_MONDAY\" message=\"Monday\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nmonday !==0 ? \"Active\" : \"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"W\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_TUESDAY\" message=\"Tuesday\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.ntuesday !== 0? \"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"W\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_WEDNESDAY\" message=\"Wednesday\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nwednesday !==0 ? \"Active\" :\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"W\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_THURSDAY\" message=\"Thursday\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nthursday !==0 ? \"Active\": \"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"W\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_FRIDAY\" message=\"Friday\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nfriday !==0 ? \"Active\" :\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"W\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_SATURDAY\" message=\"Saturday\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nsaturday !==0 ? \"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_MONTHLYOCCURRENCETYPE\" message=\"Monthly Occurrence Type\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.sscheduletype===\"M\"?\r\n                                                                this.props.Login.masterData.SelectedScheduler.nmonthlyoccurrencetype === 1?\"Exact Day\":\r\n                                                                this.props.Login.masterData.SelectedScheduler.nmonthlyoccurrencetype===2?\"1st Week\":\r\n                                                                this.props.Login.masterData.SelectedScheduler.nmonthlyoccurrencetype===3?\"2nd Week\":\r\n                                                                this.props.Login.masterData.SelectedScheduler.nmonthlyoccurrencetype===4?\"3rd Week\":\"4th week\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" &&\r\n                                                    this.props.Login.masterData.SelectedScheduler.nmonthlyoccurrencetype === 1 ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_EXACTDAY\" message=\"Exactday\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nexactday !==0?this.props.Login.masterData.SelectedScheduler.nexactday:\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_MONTHLYSCHEDULE\" message=\"Monthly Schedule\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.njan !==0 ? smonth= this.props.intl.formatMessage({ id:\"IDS_JANUARY\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nfeb!==0?smonth.trim()===\"\"?smonth= this.props.intl.formatMessage({ id:\"IDS_FEBRUARY\"}):smonth=\", \"+ this.props.intl.formatMessage({ id:\"IDS_FEBRUARY\"}) :\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nmar!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_MARCH\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_MARCH\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.napr!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_APRIL\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_APRIL\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nmay!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_MAY\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_MAY\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.njun!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_JUNE\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_JUNE\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.njul!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_JULY\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_JULY\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.naug!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_AUGUST\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_AUGUST\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nsep!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_SEPTEMBER\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_SEPTEMBER\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.noct!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_OCTOBER\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_OCTOBER\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nnov!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_NOVEMBER\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_NOVEMBER\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.ndec!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_DECEMBER\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_DECEMBER\"}):\"\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_FEBRUARY\" message=\"February\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nfeb!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_MARCH\" message=\"March\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nmar!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_APRIL\" message=\"April\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.napr!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_MAY\" message=\"May\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nmay!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_JUNE\" message=\"June\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.njun!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_JULY\" message=\"July\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.njul!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_AUGUST\" message=\"August\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.naug!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_SEPTEMBER\" message=\"September\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nsep!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_OCTOBER\" message=\"October\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.noct!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_NOVEMBER\" message=\"November\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nnov!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_DECEMBER\" message=\"December\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.ndec!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_REMARKS\" message=\"Remarks\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                \r\n                                                                    {this.props.Login.masterData.SelectedScheduler && \r\n                                                                    this.props.Login.masterData.SelectedScheduler.sremarks.trim()!==\"null\"?\r\n                                                                    this.props.Login.masterData.SelectedScheduler.sremarks.trim():\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> */}\r\n                                                    \r\n\r\n                                                    \r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Col>\r\n                                                        <div className=\"horizontal-line\"></div>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                \r\n\r\n                                            </Card.Body>\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col></Row>\r\n                    {/* </Col>\r\n                </Row> */}\r\n            </div>\r\n\r\n            {/* End of get display*/}\r\n\r\n            {/* Start of Modal Sideout for Scheduler Creation */}\r\n            {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n            {/* {this.props.Login.openModal ?\r\n                <SlideOutModal show={this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    updateStore={this.props.updateStore}\r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    mandatoryFields={mandatoryFields}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign operation={this.props.Login.operation}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                        : \r\n                    <AddScheduler\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            onComboChange={this.onComboChange}\r\n                            onNumericInputOnChange={this.onNumericInputOnChange}\r\n                            handleDateChange={this.handleDateChange}\r\n                            schedulerTypeList={this.props.Login.schedulerTypeList || []}\r\n                            recurringList={this.props.Login.recurringList || []}\r\n                            monthlyTypeList={this.props.Login.monthlyTypeList || []}\r\n                            selectedScheduler={this.props.Login.masterData.SelectedScheduler || {}}\r\n                            operation={this.props.Login.operation}\r\n                            userLogged={this.props.Login.userLogged}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            actionType={this.state.actionType}\r\n                            userInfo={this.props.Login.userInfo}\r\n                        \r\n                        />}\r\n                /> : \"\"} */}\r\n            {/* End of Modal Sideout for Scheduler Creation */}\r\n        </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let isComponentUpdated = false;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ userRoleControlRights, controlMap });\r\n        }\r\n        let nfilterScheduleType = this.state.nfilterScheduleType || {};\r\n        let filterScheduleType = this.state.filterScheduleType || {};\r\n\r\n        if (this.props.Login.masterData.filterGrapicalScheduleType !== previousProps.Login.masterData.filterGrapicalScheduleType) {\r\n            const scheduleTypeMap = constructOptionList(this.props.Login.masterData.filterGrapicalScheduleType || [], \"nschedulecode\",\r\n                \"sscheduletype\", 'nschedulecode', 'ascending', false);\r\n                filterScheduleType = scheduleTypeMap.get(\"OptionList\");\r\n        if(this.state.nfilterScheduleType===null || this.state.nfilterScheduleType===undefined)\r\n        {\r\n                if (scheduleTypeMap.get(\"DefaultValue\")) {\r\n                nfilterScheduleType = scheduleTypeMap.get(\"DefaultValue\");\r\n            } else if (filterScheduleType && filterScheduleType.length > 0) {\r\n                nfilterScheduleType = filterScheduleType[0];\r\n            }\r\n        }\r\n            isComponentUpdated = true;\r\n        } else if (this.props.Login.masterData.nfilterScheduleType !== previousProps.Login.masterData.nfilterScheduleType) {\r\n            nfilterScheduleType = this.props.Login.masterData.nfilterScheduleType;\r\n            isComponentUpdated = true;\r\n        }\r\n        if (isComponentUpdated) {\r\n            this.setState({ nfilterScheduleType, filterScheduleType });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            // if (this.props.Login.masterData.SelectedScheduler !== undefined) {\r\n            //     if(this.props.Login.masterData.SelectedScheduler.sscheduletype===\"O\")\r\n            //     {\r\n            //         nfilterScheduleType = filterScheduleType[0];\r\n            //     }\r\n            //     else\r\n            //     {\r\n            //         nfilterScheduleType = filterScheduleType[1];\r\n            //     }\r\n                \r\n            //     this.setState({ filterData,nfilterScheduleType });\r\n            // }\r\n            //else\r\n            //{\r\n            this.setState({ filterData });\r\n            //}\r\n        }\r\n\r\n\r\n        let data=[];\r\n        let tempdate;\r\n        if(this.props.Login.masterData.SelectedSchedulerView !== null &&\r\n            this.props.Login.masterData.SelectedSchedulerView!==undefined)\r\n        {\r\n          if (this.props.Login.masterData.SelectedSchedulerView !== previousProps.Login.masterData.SelectedSchedulerView) {\r\n        //for(let i =0;i<this.props.Login.masterData.selectedScheduler.length;i++)\r\n        //{\r\n          data.push(this.props.Login.masterData.SelectedSchedulerView.jsondata);\r\n        //}\r\n        \r\n      \r\n    \r\n       data = data.map(dataItem => ({\r\n        id: dataItem.id,\r\n        start: parseAdjust(dataItem.start),\r\n        tempdate:parseAdjust(dataItem.start),\r\n        startTimezone: dataItem.startTimezone,\r\n        end: parseAdjust(dataItem.end),\r\n        endTimezone: dataItem.endTimezone,\r\n        isAllDay: dataItem.isAllDay,\r\n        title: dataItem.title,\r\n        description: dataItem.description,\r\n        recurrenceRule: dataItem.recurrenceRule,\r\n        recurrenceId: dataItem.recurrenceID,\r\n        recurrenceExceptions: dataItem.recurrenceException,\r\n        roomId: dataItem.roomID,\r\n        ownerID: dataItem.TaskID,\r\n        personId: dataItem.TaskID\r\n      }))\r\n      //let tempdate = new Date(Date.UTC(data[0].start.getFullYear(),data[0].start.getMonth() , data[0].start.getDate()));\r\n      //let tempdate = new Date(Date.UTC(data[0].start.getFullYear(),10 , 27));\r\n      //tempdate=parseAdjust(tempdate);\r\n    //   data[0].tempdate=data[0].tempdate.replace(\"T\",\"\");\r\n    //   data[0].tempdate=data[0].tempdate.replace(\"Z\",\"\");\r\n    //   data[0].tempdate=parseAdjust(data[0].tempdate);\r\n      this.setState({data,displayDate:data[0].tempdate});\r\n        }\r\n      }\r\n\r\n    }\r\n    onFilterSubmit = () => {\r\n        if (this.state.nfilterScheduleType.label) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    sscheduletype: this.state.nfilterScheduleType.label,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterScheduleType: this.state.nfilterScheduleType\r\n                },\r\n                classUrl: \"graphicalschedulerview\",\r\n                methodUrl: \"GraphicalSchedulerByScheduleType\"\r\n            }\r\n            this.props.changeGrapicalScheduleTypeFilter(inputParam, this.props.Login.masterData.filterScheduleType);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TESTCATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n    \r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData ) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_SCHEDULERTYPE\",\r\n                    \"value\": this.props.Login.masterData.SelectedSchedulerView && \r\n                    this.props.Login.masterData.SelectedSchedulerView.sscheduletype !== undefined ? this.props.Login.masterData.SelectedSchedulerView.sscheduletype: \"NA\"\r\n\r\n                },\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    // ConfirmDelete = (deleteId) => {\r\n    //     this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n    //         this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n    //         () => this.deleteScheduler(\"Scheduler\", this.props.Login.masterData.SelectedScheduler, \"delete\", deleteId));\r\n    // }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" ) {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n              selectedRecord['esigncomments'] = \"\"\r\n              selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    \r\n\r\n    // onComboChange = (comboData, fieldName) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[fieldName] = comboData;\r\n    //     this.setState({ selectedRecord });\r\n    // }\r\n\r\n    onComboChangeevent = (comboData, fieldName) => {\r\n        let nfilterScheduleType = this.state.nfilterScheduleType || {}\r\n        nfilterScheduleType = comboData;\r\n        this.searchRef.current.value = \"\";\r\n        this.setState({ nfilterScheduleType })\r\n        // const selectedRecord = this.state.selectedRecord || {};\r\n        // selectedRecord[fieldName] = comboData;\r\n        // this.setState({ selectedRecord });\r\n    }\r\n\r\n    // onNumericInputOnChange = (value, name) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[name] = value;\r\n    //     this.setState({ selectedRecord });\r\n    // }\r\n\r\n    // onInputOnChange = (event) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n\r\n    //     if (event.target.type === 'checkbox') {\r\n    //         if (event.target.name === \"ntransactionstatus\")\r\n    //             selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n    //         else if (event.target.name === \"nlockmode\")\r\n    //             selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.UNLOCK : transactionStatus.LOCK;\r\n    //         else\r\n    //             selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.ALL;\r\n\r\n    //     }\r\n    //     else {\r\n    //         if (event.target.name === \"noccurencenooftimes\" || event.target.name === \"noccurencedaywiseinterval\" || event.target.name ===  \"nexactday\") {\r\n    //             if (event.target.value !== \"\") {\r\n    //                 event.target.value = validatePhoneNumber(event.target.value);\r\n    //                 selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n    //             }\r\n    //             else {\r\n    //                 selectedRecord[event.target.name] = event.target.value;\r\n    //             }\r\n    //         } else if (event.target.name === \"sloginid\") {\r\n    //             if (event.target.value !== \"\") {\r\n    //                 if (validateLoginId(event.target.value)) {\r\n    //                     selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n    //                 }\r\n    //             }\r\n    //             else {\r\n    //                 selectedRecord[event.target.name] = event.target.value;\r\n    //             }\r\n    //         } else {\r\n    //             selectedRecord[event.target.name] = event.target.value;\r\n    //         }\r\n    //     }\r\n    //     this.setState({ selectedRecord });\r\n    // }\r\n\r\n    \r\n\r\n    // handleDateChange = (dateName, dateValue,sdatename) => {\r\n    //     const { selectedRecord } = this.state;\r\n    //     selectedRecord[dateName] = dateValue;\r\n    //     selectedRecord[sdatename] = dateValue;\r\n    //     this.setState({ selectedRecord });\r\n    // }\r\n\r\n    \r\n//     onSaveClick = (saveType, formRef) => {\r\n\r\n//         let scheduleData = {};\r\n//         scheduleData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n//         if(this.state.selectedRecord[\"nschedulertypecode\"]===undefined ||\r\n//         this.state.selectedRecord[\"nschedulertypecode\"]===null)\r\n//         {\r\n//             toast.info(\"Please select SchedulerType\");\r\n//             return;\r\n//         }\r\n\r\n//         if(this.state.selectedRecord[\"nschedulertypecode\"].value!==1)\r\n//         {\r\n            \r\n//             if(this.state.selectedRecord[\"denddate\"]===undefined || \r\n//             this.state.selectedRecord[\"denddate\"]===null)\r\n//             {\r\n//                 toast.info(\"Please select END Date\");\r\n//                 return;\r\n//             }\r\n//             if(this.state.selectedRecord[\"dendtime\"]===undefined || \r\n//             this.state.selectedRecord[\"dendtime\"]===null)\r\n//             {\r\n//                 toast.info(\"Please select END Time\");\r\n//                 return;\r\n//             }\r\n//             if(this.state.selectedRecord[\"denddate\"]!==undefined && this.state.selectedRecord[\"dstartdate\"]!==undefined)\r\n//             {\r\n//                 if(this.state.selectedRecord[\"denddate\"] < this.state.selectedRecord[\"dstartdate\"])\r\n//                 {\r\n//                 toast.info(\"Please select END Date Greater than Start Date\");\r\n//                 return;\r\n//                 }\r\n//             }\r\n//             if(this.state.selectedRecord[\"ntyperecurringcode\"].value===1)\r\n//             {\r\n//                 if(this.state.selectedRecord[\"noccurencenooftimes\"]===undefined ||\r\n//                 this.state.selectedRecord[\"noccurencenooftimes\"]===null)\r\n//                 {\r\n//                     toast.info(\"Please enter Occurrence value\");\r\n//                     return;\r\n//                 }\r\n//                 if(this.state.selectedRecord[\"soccurencehourwiseinterval\"]===undefined ||\r\n//                 this.state.selectedRecord[\"soccurencehourwiseinterval\"]===null)\r\n//                 {\r\n//                     toast.info(\"Please select Occurrence Hour wise\");\r\n//                     return;\r\n//                 }\r\n//                 if(this.state.selectedRecord[\"noccurencedaywiseinterval\"]===undefined ||\r\n//                 this.state.selectedRecord[\"noccurencedaywiseinterval\"]===null)\r\n//                 {\r\n//                     toast.info(\"Please enter Occurrence Day wise\");\r\n//                     return;\r\n//                 }\r\n\r\n//             }\r\n//             if(this.state.selectedRecord[\"ntyperecurringcode\"].value===3)\r\n//             {\r\n//                 if(this.state.selectedRecord[\"nrecurringperiodcode\"]===undefined)\r\n//                 {\r\n//                     toast.info(\"Please select Monthly Occurrence type\");\r\n//                     return;\r\n//                 }\r\n\r\n//                 if(this.state.selectedRecord[\"nrecurringperiodcode\"]!==undefined && \r\n//                 this.state.selectedRecord[\"nrecurringperiodcode\"].value === 1 && \r\n//                 this.state.selectedRecord[\"nexactday\"]===undefined)\r\n//                 {\r\n//                     toast.info(\"Please enter Exact Day\");\r\n//                     return;\r\n//                 }\r\n//             }\r\n//         }\r\n\r\n//         let postParam = undefined;\r\n\r\n        \r\n//             //add               \r\n//             scheduleData[\"schedulemaster\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n//             this.schedulerFieldList.map(item => {\r\n//                 return scheduleData[\"schedulemaster\"][item] = this.state.selectedRecord[item]\r\n//             });\r\n//             if (this.props.Login.operation === \"update\") {\r\n//             scheduleData[\"schedulemaster\"][\"nschedulecode\"]= this.props.Login.masterData.SelectedScheduler[\"nschedulecode\"];\r\n//             }\r\n//             if(this.props.Login.operation === \"create\" && \r\n//             this.state.selectedRecord[\"ntyperecurringcode\"].value === 2)\r\n//             {\r\n//             if(this.state.selectedRecord[\"nsunday\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"nsunday\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nmonday\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"nmonday\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"ntuesday\"]===undefined)\r\n//             {\r\n//                 this.state.selectedRecord[\"ntuesday\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nwednesday\"]===undefined)\r\n//             {\r\n//                 this.state.selectedRecord[\"nwednesday\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nthursday\"]===undefined)\r\n//             {\r\n//                 this.state.selectedRecord[\"nthursday\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nfriday\"]===undefined)\r\n//             {\r\n//                 this.state.selectedRecord[\"nfriday\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nsaturday\"]===undefined)\r\n//             {\r\n//                 this.state.selectedRecord[\"nsaturday\"]=1;\r\n//             }\r\n//         }\r\n\r\n//         if(this.props.Login.operation === \"create\" && \r\n//         this.state.selectedRecord[\"ntyperecurringcode\"].value === 3)\r\n//         {\r\n//             if(this.state.selectedRecord[\"njan\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"njan\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nfeb\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"nfeb\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nmar\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"nmar\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"napr\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"napr\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nmay\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"nmay\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"njun\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"njun\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"njul\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"njul\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"naug\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"naug\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nsep\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"nsep\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"noct\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"noct\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nnov\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"nnov\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"ndec\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"ndec\"]=1;\r\n//             }\r\n//         }\r\n\r\n//             scheduleData[\"schedulemasterweekly\"] = {\r\n//                 \"nsunday\": this.state.selectedRecord[\"nsunday\"] ? this.state.selectedRecord[\"nsunday\"] : 0,\r\n//                 //\"ndefaultrole\": transactionStatus.YES, \"ntransactionstatus\": transactionStatus.ACTIVE\r\n//                 \"nmonday\": this.state.selectedRecord[\"nmonday\"] ? this.state.selectedRecord[\"nmonday\"] : 0,\r\n//                 \"ntuesday\": this.state.selectedRecord[\"ntuesday\"] ? this.state.selectedRecord[\"ntuesday\"] : 0,\r\n//                 \"nwednesday\": this.state.selectedRecord[\"nwednesday\"] ? this.state.selectedRecord[\"nwednesday\"] : 0,\r\n//                 \"nthursday\": this.state.selectedRecord[\"nthursday\"] ? this.state.selectedRecord[\"nthursday\"] : 0,\r\n//                 \"nfriday\": this.state.selectedRecord[\"nfriday\"] ? this.state.selectedRecord[\"nfriday\"] : 0,\r\n//                 \"nsaturday\": this.state.selectedRecord[\"nsaturday\"] ? this.state.selectedRecord[\"nsaturday\"] : 0,\r\n//             }\r\n            \r\n//             scheduleData[\"schedulemastermonthly\"] = {\r\n//                 \"nexactday\": this.state.selectedRecord[\"nexactday\"] ? this.state.selectedRecord[\"nexactday\"] : 0,\r\n//                 \"nmonthlyoccurrencetype\": this.state.selectedRecord[\"nrecurringperiodcode\"] ? this.state.selectedRecord[\"nrecurringperiodcode\"].value : 0,\r\n//                 \"njan\": this.state.selectedRecord[\"njan\"] ? this.state.selectedRecord[\"njan\"] : 0,\r\n//                 \"nfeb\": this.state.selectedRecord[\"nfeb\"] ? this.state.selectedRecord[\"nfeb\"] : 0,\r\n//                 \"nmar\": this.state.selectedRecord[\"nmar\"] ? this.state.selectedRecord[\"nmar\"] : 0,\r\n//                 \"napr\": this.state.selectedRecord[\"napr\"] ? this.state.selectedRecord[\"napr\"] : 0,\r\n//                 \"nmay\": this.state.selectedRecord[\"nmay\"] ? this.state.selectedRecord[\"nmay\"] : 0,\r\n//                 \"njun\": this.state.selectedRecord[\"njun\"] ? this.state.selectedRecord[\"njun\"] : 0,\r\n//                 \"njul\": this.state.selectedRecord[\"njul\"] ? this.state.selectedRecord[\"njul\"] : 0,\r\n//                 \"naug\": this.state.selectedRecord[\"naug\"] ? this.state.selectedRecord[\"naug\"] : 0,\r\n//                 \"nsep\": this.state.selectedRecord[\"nsep\"] ? this.state.selectedRecord[\"nsep\"] : 0,\r\n//                 \"noct\": this.state.selectedRecord[\"noct\"] ? this.state.selectedRecord[\"noct\"] : 0,\r\n//                 \"nnov\": this.state.selectedRecord[\"nnov\"] ? this.state.selectedRecord[\"nnov\"] : 0,\r\n//                 \"ndec\": this.state.selectedRecord[\"ndec\"] ? this.state.selectedRecord[\"ndec\"] : 0,\r\n//             }\r\n\r\n            \r\n\r\n        \r\n// let date;\r\n// let time;\r\n//         scheduleData[\"schedulemaster\"][\"sscheduletype\"] = this.state.selectedRecord[\"nschedulertypecode\"] ? this.state.selectedRecord[\"nschedulertypecode\"].value === 1 ? 'O' : this.state.selectedRecord[\"ntyperecurringcode\"].value === 1 ? 'D' : this.state.selectedRecord[\"ntyperecurringcode\"].value === 2 ? 'W' :  'M' : 'O';\r\n//         if (scheduleData[\"schedulemaster\"][\"dstartdate\"] !== undefined\r\n//             && scheduleData[\"schedulemaster\"][\"dstartdate\"] !== null && scheduleData[\"schedulemaster\"][\"dstartdate\"] !== \"\") {\r\n//                 //scheduleData[\"schedulemaster\"][\"dstartdate\"] = formatInputDate(scheduleData[\"schedulemaster\"][\"dstartdate\"]);\r\n//                 scheduleData[\"schedulemaster\"][\"dstartdate\"] = formatInputDate(this.state.selectedRecord[\"sstartdate\"]);\r\n//         }\r\n//         if (scheduleData[\"schedulemaster\"][\"denddate\"] !== undefined\r\n//             && scheduleData[\"schedulemaster\"][\"denddate\"] !== null && scheduleData[\"schedulemaster\"][\"denddate\"] !== \"\") {\r\n//                 //scheduleData[\"schedulemaster\"][\"denddate\"] = formatInputDate(scheduleData[\"schedulemaster\"][\"denddate\"]);\r\n//                 scheduleData[\"schedulemaster\"][\"denddate\"] = formatInputDate(this.state.selectedRecord[\"senddate\"]);\r\n//         }\r\n//         else\r\n//         {\r\n//             scheduleData[\"schedulemaster\"][\"denddate\"] = scheduleData[\"schedulemaster\"][\"dstartdate\"];\r\n//         }\r\n//         if (scheduleData[\"schedulemaster\"][\"dstarttime\"] !== undefined\r\n//             && scheduleData[\"schedulemaster\"][\"dstarttime\"] !== null && scheduleData[\"schedulemaster\"][\"dstarttime\"] !== \"\") {\r\n//                 //scheduleData[\"schedulemaster\"][\"dstarttime\"] = formatInputDate(scheduleData[\"schedulemaster\"][\"dstarttime\"]);\r\n//                 date=formatInputDate(this.state.selectedRecord[\"sstartdate\"]);\r\n//                 date=date.substring(0,10);\r\n//                 time=formatInputDate(this.state.selectedRecord[\"sstarttime\"]);\r\n//                 time=time.substring(19,11);\r\n//                 date=date+\"T\"+time+\"Z\";\r\n//                 //scheduleData[\"schedulemaster\"][\"dstarttime\"] = formatInputDate(this.state.selectedRecord[\"sstarttime\"]);\r\n//                 scheduleData[\"schedulemaster\"][\"dstarttime\"] = date;//formatInputDate(date);\r\n//         }\r\n//         if (scheduleData[\"schedulemaster\"][\"dendtime\"] !== undefined\r\n//             && scheduleData[\"schedulemaster\"][\"dendtime\"] !== null && scheduleData[\"schedulemaster\"][\"dendtime\"] !== \"\") {\r\n//                 //scheduleData[\"schedulemaster\"][\"dendtime\"] = formatInputDate(scheduleData[\"schedulemaster\"][\"dendtime\"]);\r\n//                 //scheduleData[\"schedulemaster\"][\"dendtime\"] = formatInputDate(this.state.selectedRecord[\"sendtime\"]);\r\n//                 date=formatInputDate(this.state.selectedRecord[\"senddate\"]);\r\n//                 date=date.substring(0,10);\r\n//                 time=formatInputDate(this.state.selectedRecord[\"sendtime\"]);\r\n//                 time=time.substring(19,11);\r\n//                 date=date+\"T\"+time+\"Z\";\r\n//                 //scheduleData[\"schedulemaster\"][\"dstarttime\"] = formatInputDate(this.state.selectedRecord[\"sstarttime\"]);\r\n//                 scheduleData[\"schedulemaster\"][\"dendtime\"] = date;\r\n//         }\r\n//         else\r\n//         {\r\n//             scheduleData[\"schedulemaster\"][\"dendtime\"] = scheduleData[\"schedulemaster\"][\"dstarttime\"];\r\n//         }\r\n//         if (scheduleData[\"schedulemaster\"][\"soccurencehourwiseinterval\"] !== undefined\r\n//             && scheduleData[\"schedulemaster\"][\"soccurencehourwiseinterval\"] !== null && scheduleData[\"schedulemaster\"][\"soccurencehourwiseinterval\"] !== \"\" &&\r\n//             scheduleData[\"schedulemaster\"][\"soccurencehourwiseinterval\"] !== \"null \") {\r\n//                 let shour= formatInputDate(scheduleData[\"schedulemaster\"][\"soccurencehourwiseinterval\"]);\r\n//                 //scheduleData[\"schedulemaster\"][\"soccurencehourwiseinterval\"] =shour.substring(shour.indexOf('T'),5);\r\n//                 scheduleData[\"schedulemaster\"][\"soccurencehourwiseinterval\"] =shour.substring(16,11);\r\n//         }\r\n        \r\n\r\n//         // const controlMaster = [{ncontrolcode:517, scontrolname:'UserImage', ssubfolder:\"users\"},\r\n//         //                         {ncontrolcode:518, scontrolname:'SignImage', ssubfolder:\"\"}]\r\n\r\n        \r\n\r\n//         const inputParam = {\r\n//             classUrl: this.props.Login.inputParam.classUrl,\r\n//             methodUrl: \"Scheduler\",\r\n//             inputData: {scheduleData, userinfo: this.props.Login.userInfo },\r\n//             //formData: formData,\r\n//             //isFileupload: true,\r\n//             operation: this.props.Login.operation,\r\n//             saveType, formRef, postParam, searchRef: this.searchRef,\r\n//             isClearSearch: this.props.Login.isClearSearch\r\n//         }\r\n//         const masterData = this.props.Login.masterData;\r\n\r\n//         if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n\r\n//             const updateInfo = {\r\n//                 typeName: DEFAULT_RETURN,\r\n//                 data: {\r\n//                     loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n//                 }\r\n//             }\r\n//             this.props.updateStore(updateInfo);\r\n//         }\r\n//         else {\r\n//             this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n//         }\r\n\r\n//     }\r\n\r\n    \r\n\r\n    // deleteUserFile = (event, file, fieldName) => {\r\n    //     let selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n    //     this.setState({\r\n    //         selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n    //     });\r\n    // }\r\n\r\n    \r\n\r\n    // deleteScheduler = (methodUrl, selectedScheduler, operation, ncontrolCode) => {\r\n    //     if (this.props.Login.masterData.SelectedScheduler.ntransactionstatus === transactionStatus.DRAFT) {\r\n    //     {\r\n\r\n    //         const postParam = {\r\n    //             inputListName: \"Scheduler\", selectedObject: \"SelectedScheduler\",\r\n    //             primaryKeyField: \"nschedulecde\",\r\n    //             primaryKeyValue: selectedScheduler.nschedulecode,\r\n    //             fetchUrl: \"scheduler/getScheduler\",\r\n    //             fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n    //         }\r\n\r\n    //         const inputParam = {\r\n    //             classUrl: this.props.Login.inputParam.classUrl,\r\n    //             methodUrl, postParam,\r\n    //             inputData: {\r\n    //                 \"userinfo\": this.props.Login.userInfo,\r\n    //                 \"scheduler\": selectedScheduler\r\n    //             },\r\n    //             operation,\r\n    //             isClearSearch: this.props.Login.isClearSearch\r\n    //         }\r\n\r\n    //         const masterData = this.props.Login.masterData;\r\n\r\n    //         if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     loadEsign: true, screenData: { inputParam, masterData },\r\n    //                     openModal: true, screenName: \"IDS_SCHEDULER\", operation\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         }\r\n    //         else {\r\n    //             this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else\r\n    // {\r\n    //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTODELETE\" }));\r\n    // }\r\n    // }\r\n\r\n    // onApproveClick = (screenName, operation, primaryKeyName, primaryKeyValue, ncontrolCode) => {\r\n    //     if (this.props.Login.masterData.SelectedScheduler.ntransactionstatus === transactionStatus.DRAFT) {\r\n    //         const approveId = this.state.controlMap.has(\"ApproveScheduler\") && this.state.controlMap.get(\"ApproveScheduler\").ncontrolcode\r\n    //         let inputData = [];\r\n    //         inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    //         //add               \r\n    //         let postParam = undefined;\r\n    //         inputData[\"scheduler\"] = { \"nschedulecode\": this.props.Login.masterData.SelectedScheduler[\"nschedulecode\"] ? this.props.Login.masterData.SelectedScheduler[\"nschedulecode\"].Value : \"\" };\r\n    //         inputData[\"scheduler\"] = this.props.Login.masterData.SelectedScheduler;\r\n    //         postParam = { inputListName: \"Scheduler\", selectedObject: \"SelectedScheduler\", primaryKeyField: \"nschedulecode\" };\r\n    //         const inputParam = {\r\n    //             classUrl: this.props.Login.inputParam.classUrl,\r\n    //             methodUrl: \"Scheduler\",\r\n    //             inputData: inputData,\r\n    //             operation: \"approve\", postParam\r\n    //         }\r\n    //         let saveType;\r\n\r\n    //         const masterData = this.props.Login.masterData;\r\n\r\n    //         const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId);\r\n    //         if (esignNeeded) {\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: operation\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         }\r\n    //         else {\r\n    //             this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n    //         }\r\n            \r\n    //     }\r\n    //     else {\r\n    //         toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTOAPPROVE\" }));\r\n    //     }\r\n    // }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"graphicalschedulerview\",\r\n            methodUrl: \"GraphicalSchedulerView\",\r\n            displayName: \"IDS_GRAPHICALSCHEDULERVIEW\",\r\n            userInfo: this.props.Login.userInfo,\r\n            isClearSearch: this.props.Login.isClearSearch,\r\n            \r\n\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential,\r\n    updateStore, getGrapicalSchedulerViewDetail, getSchedulerComboService,changeGrapicalScheduleTypeFilter, filterColumnData\r\n})(injectIntl(GraphicalSchedulerView));\r\n\r\nexport const currentYear = new Date().getFullYear();\r\nexport const parseAdjust = eventDate => {\r\n  const date = new Date(eventDate);\r\n  date.setFullYear(currentYear);\r\n  return date;\r\n};\r\nexport const displayDate = new Date(Date.UTC(currentYear, new Date().getMonth(), new Date().getDate()));\r\n"]},"metadata":{},"sourceType":"module"}