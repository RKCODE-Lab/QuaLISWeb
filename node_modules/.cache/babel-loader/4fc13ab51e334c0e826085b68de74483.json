{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport rsapi from \"../rsapi\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport { attachmentType, parameterType, SampleType, transactionStatus } from \"../components/Enumeration\";\nimport { constructjsonOptionList, constructOptionList, rearrangeDateFormat, //formatInputDate,\nsortData } from \"../components/CommonScript\";\nimport Axios from \"axios\";\nimport { intl } from \"../components/App\";\nimport { initRequest } from \"./LoginAction\";\nexport const sampleTypeOnChange = (inputParam, masterData) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgroup\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      sortData(response.data);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          tempFilterData: inputParam.inputData.tempFilterData,\n          masterData: { ...masterData,\n            ...response.data\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        masterData[\"ExistingLinkTable\"] = [];\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false\n          }\n        });\n        toast.warn(error.response.data);\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const filterTestGroup = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgroup/filterTestGroup\", inputParam.inputData).then(response => {\n      sortData(response.data);\n\n      if (searchRef.current) {\n        searchRef.current.value = \"\";\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          filterData: inputParam.inputData.filterData,\n          masterData: { ...masterData,\n            ...response.data,\n            searchedData: undefined\n          },\n          loading: false,\n          testskip: 0,\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const createTree = (selectedRecord, userInfo, selectedNode, ncontrolCode) => {\n  return dispatch => {\n    if (selectedRecord.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES || selectedRecord.nproductcode) {\n      const inputParam = {\n        sampletype: selectedRecord.nsampletypecode.item,\n        ncategorycode: selectedRecord.nproductcatcode.value,\n        ntreeversiontempcode: selectedRecord.ntreeversiontempcode.value,\n        userinfo: userInfo,\n        treetemplatemanipulation: selectedNode\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"/testgroup/getTemplateMasterDetails\", { ...inputParam\n      }).then(response => {\n        const treetempTranstestGroup = response.data[\"TreetempTranstestGroup\"] || []; // const treeMandatoryFields = treetempTranstestGroup.map((item, index) => {\n        //         return {\n        //             \"idsName\": item.slabelname,\n        //             \"dataField\": \"sleveldescription_\" + index,\n        //             \"mandatory\": true\n        //         }\n        // });\n        //  const selectedNodeLevel = selectedNode ? selectedNode.slevelcode.split(\"/1\").length-2 : -1;\n\n        const mandatoryFields = [];\n        treetempTranstestGroup.forEach((item, index) => {\n          if (item.sleveldescription === null) {\n            mandatoryFields.push({\n              \"idsName\": item.slabelname,\n              \"dataField\": \"sleveldescription_\" + index,\n              \"mandatory\": true\n            });\n          }\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            operation: \"create\",\n            screenName: \"IDS_PROFILETREE\",\n            TreetempTranstestGroup: treetempTranstestGroup,\n            treeMandatoryFields: mandatoryFields,\n            //selectedRecord,\n            ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_PRODUCTNOTAVAILABLE\"\n      }));\n    }\n  };\n};\nexport const editTree = (operation, selectedNode, userinfo, ncontrolCode, filterData, masterData) => {\n  return dispatch => {\n    //console.log(\"edit Tree:\", selectedNode, masterData);\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === selectedNode[\"ntreeversiontempcode\"]); // if (treeVersionTemplateIndex !== -1){\n\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus; //}\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      if (selectedNode) {\n        dispatch(initRequest(true));\n        rsapi.post(\"/testgroup/getTreeById\", {\n          userinfo,\n          treetemplatemanipulation: selectedNode,\n          ntreeversiontempcode: filterData.ntreeversiontempcode.value\n        }).then(response => {\n          const treetempTranstestGroup = response.data;\n          const treeMandatoryFields = treetempTranstestGroup && [{\n            \"idsName\": treetempTranstestGroup.slabelname,\n            \"dataField\": \"sleveldescription\",\n            \"mandatory\": true\n          }];\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openModal: true,\n              operation: operation,\n              screenName: \"IDS_EDITTREE\",\n              selectedRecord: { ...treetempTranstestGroup\n              },\n              treeMandatoryFields,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 409 || error.response.status === 417) {\n            toast.warn(error.response.data);\n          } else {\n            toast.error(error.message);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTPROFILENODETOEDIT\"\n        }));\n      }\n    }\n  };\n};\nexport const addSpecification = (operation, inputParam, ncontrolCode, masterDatas) => {\n  return dispatch => {\n    //if (inputParam.selectedNode != null && inputParam.selectedNode.schildnode === \"\") {\n    if (inputParam.selectedRecord.ntreeversiontempcode.item.ntransactionstatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      if (inputParam.selectedNode != null && inputParam.selectedNode.nnextchildcode === -1) {\n        if (masterDatas && masterDatas.SelectedSpecification === null && operation === \"copy\") {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_SELECTSPECIFICATION\"\n          }));\n        } else {\n          let urlArray = [];\n\n          if (operation === \"update\") {\n            const testgroupspecification = inputParam.testgroupspecification[0];\n\n            if (testgroupspecification.napprovalstatus === transactionStatus.CORRECTION || testgroupspecification.napprovalstatus === transactionStatus.DRAFT) {\n              urlArray = [rsapi.post(\"timezone/getTimeZone\")];\n              urlArray.push(rsapi.post(\"/testgroup/getActiveSpecificationById\", {\n                testgroupspecification,\n                userinfo: inputParam.userinfo,\n                ntreeversiontempcode: inputParam.selectedRecord.ntreeversiontempcode.value\n              }));\n            } else {\n              toast.warn(intl.formatMessage({\n                id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n              }));\n              return;\n            }\n          } else {\n            urlArray = [rsapi.post(\"timezone/getTimeZone\")];\n            urlArray.push(rsapi.post(\"/testgroup/getAddSpecification\", {\n              userinfo: inputParam.userInfo,\n              ntreeversiontempcode: inputParam.selectedRecord.ntreeversiontempcode.value //currentdate: formatInputDate(new Date(), true)\n\n            }));\n          }\n\n          Axios.all(urlArray).then(response => {\n            let selectedRecord = {};\n            let masterData = inputParam.masterData !== undefined ? inputParam.masterData : masterDatas;\n\n            if (operation === \"update\") {\n              masterData = { ...inputParam.masterData,\n                ...response[1].data,\n                testgroupspecification: inputParam.testgroupspecification\n              };\n              selectedRecord = {\n                sproductname: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? \"\" : inputParam.selectedRecord.nproductcode.label,\n                sproductcatname: inputParam.selectedRecord.nproductcatcode.label,\n                ncategorybasedflow: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow,\n                ...response[1].data.SelectedSpecification,\n                //dexpirydate: new Date(response[1].data[\"sexpirydate\"]),\n                dexpirydate: rearrangeDateFormat(inputParam.userinfo, response[1].data.SelectedSpecification[\"sexpirydate\"]),\n                ntzexpirydate: {\n                  \"label\": response[1].data.SelectedSpecification.stimezoneid,\n                  \"value\": response[1].data.SelectedSpecification.ntzexpirydate\n                }\n              };\n            } else {\n              selectedRecord = {\n                sproductname: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? \"\" : inputParam.selectedRecord.nproductcode.label,\n                sproductcatname: inputParam.selectedRecord.nproductcatcode.label,\n                sspecname: inputParam.selectedNode.sleveldescription,\n                ncategorybasedflow: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow,\n                dexpirydate: rearrangeDateFormat(inputParam.userInfo, response[1].data.ExpiryDate),\n                ncomponentrequired: inputParam.selectedNode.nsampletypecode === SampleType.CLINICALTYPE ? transactionStatus.YES : transactionStatus.NO,\n                nclinicalspec: inputParam.selectedNode.nsampletypecode === SampleType.CLINICALTYPE ? transactionStatus.YES : transactionStatus.NO,\n                ntransactionstatus: transactionStatus.ACTIVE,\n                ntzexpirydate: {\n                  \"label\": inputParam.userInfo.stimezoneid,\n                  \"value\": inputParam.userInfo.ntimezonecode\n                }\n              };\n            }\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                openModal: true,\n                operation: operation,\n                screenName: \"IDS_SPECIFICATION\",\n                masterData,\n                selectedRecord,\n                timeZoneList: constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", false, false, true).get(\"OptionList\"),\n                ncontrolCode\n              }\n            });\n          }).catch(error => {\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n          });\n        }\n      } else {\n        if (operation === \"copy\") {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_SELECTSPECIFICATION\"\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_SELECTLASTLEVELNODETOADDSPEC\"\n          }));\n        }\n      }\n    }\n  };\n};\nexport const addComponent = (SelectedSpecification, userInfo, ncontrolCode, masterData) => {\n  return dispatch => {\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      rsapi.post(\"/testgroup/getAvailableComponent\", {\n        userinfo: userInfo,\n        testgroupspecification: SelectedSpecification\n      }).then(response => {\n        const testGroupSpecSampleType = response.data[\"TestGroupSpecSampleType\"] || [];\n\n        if (testGroupSpecSampleType.length > 0) {\n          const testCategory = constructOptionList(response.data[\"TestCategory\"] || [], \"ntestcategorycode\", \"stestcategoryname\", 'ntestcategorycode', 'ascending', false);\n          const sampleTypeMap = constructOptionList(testGroupSpecSampleType, \"ncomponentcode\", \"scomponentname\", false, false, true); // const TestGroupTestMap = constructOptionList(response.data[\"TestGroupTest\"]||[], \"ntestcode\", \"stestname\", false, false, true);\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openModal: true,\n              operation: \"create\",\n              screenName: \"IDS_COMPONENT\",\n              testGroupInputData: {\n                TestCategory: testCategory.get(\"OptionList\"),\n                TestGroupSpecSampleType: sampleTypeMap.get(\"OptionList\"),\n                TestGroupTest: response.data[\"TestGroupTest\"] || [] //TestGroupTestMap.get(\"OptionList\"),\n\n              },\n              selectedRecord: {\n                ncomponentcode: sampleTypeMap.get(\"DefaultValue\"),\n                ntestcategorycode: testCategory.get(\"DefaultValue\") ? testCategory.get(\"DefaultValue\") : testCategory.get(\"OptionList\")[0]\n              },\n              ncontrolCode\n            }\n          });\n        } else {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_COMPONENTNOTAVAILABLE\"\n          }));\n        }\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    }\n  };\n};\nexport const addTestGroupTest = (selectedComponent, userInfo, ncontrolCode, selectedSpecification, filterData, masterData) => {\n  return dispatch => {\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      if (selectedSpecification) {\n        if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT || selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\n          if (selectedComponent) {\n            rsapi.post(\"/testgroup/getAvailableTest\", {\n              userinfo: userInfo,\n              testgroupspecsampletype: selectedComponent,\n              ntreeversiontempcode: filterData.ntreeversiontempcode.value\n            }).then(response => {\n              let testCategory; // = constructOptionList(response.data[\"TestCategory\"], \"ntestcategorycode\", \"stestcategoryname\", \"ntestcategorycode\", \"ascending\", false);\n              // const TestGroupTestMap = constructOptionList(response.data[\"TestGroupTest\"]||[], \"ntestcode\", \"stestname\", false, false, true);\n\n              if (response.data[\"TestCategory\"].length > 0) {\n                testCategory = constructOptionList(response.data[\"TestCategory\"], \"ntestcategorycode\", \"stestcategoryname\", \"ntestcategorycode\", \"ascending\", false);\n                dispatch({\n                  type: DEFAULT_RETURN,\n                  payload: {\n                    openModal: true,\n                    operation: \"create\",\n                    screenName: \"IDS_TEST\",\n                    testGroupInputData: {\n                      TestCategory: testCategory.get(\"OptionList\"),\n                      TestGroupTest: response.data[\"TestGroupTest\"] || [] //TestGroupTestMap.get(\"OptionList\"),\n\n                    },\n                    selectedRecord: {\n                      ntestcategorycode: {\n                        label: response.data[\"SelectedTestCategory\"].stestcategoryname,\n                        value: response.data[\"SelectedTestCategory\"].stestcategorycode,\n                        item: response.data[\"SelectedTestCategory\"]\n                      } //ntestcategorycode: testCategory.get(\"DefaultValue\") ? testCategory.get(\"DefaultValue\") : testCategory.get(\"OptionList\")[0]\n\n                    },\n                    ncontrolCode\n                  }\n                });\n              } else {\n                toast.warn(intl.formatMessage({\n                  id: \"IDS_TESTCATEGORYNOTAVAILABLE\"\n                }));\n              }\n            }).catch(error => {\n              if (error.response.status === 409 || error.response.status === 417) {\n                toast.warn(error.response.data);\n              } else {\n                toast.error(error.message);\n              }\n            });\n          } else {\n            toast.warn(intl.formatMessage({\n              id: \"IDS_NEEDCOMPONENTTOADDTEST\"\n            }));\n          }\n        } else {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    }\n  };\n};\nexport const editTestGroupTest = (operation, selectedTest, userInfo, ncontrolCode, selectedSpecification, filterData, masterData) => {\n  return dispatch => {\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT || selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\n        const ntestcode = selectedTest.ntestcode;\n        const urlArray = [rsapi.post(\"/testgroup/getActiveTestById\", {\n          userinfo: userInfo,\n          testgrouptest: selectedTest,\n          ntreeversiontempcode: filterData.ntreeversiontempcode.value\n        }), rsapi.post(\"/source/getSource\", {\n          userinfo: userInfo\n        }), rsapi.post(\"/testmaster/getSection\", {\n          ntestcode,\n          userinfo: userInfo\n        }), rsapi.post(\"/testmaster/getMethod\", {\n          ntestcode,\n          userinfo: userInfo\n        }), rsapi.post(\"/testmaster/getInstrumentCategory\", {\n          ntestcode,\n          userinfo: userInfo\n        }), rsapi.post(\"/testmaster/getTestAttachment\", {\n          ntestcode,\n          userinfo: userInfo\n        }), rsapi.post(\"/testmaster/getContainerType\", {\n          ntestcode,\n          userinfo: userInfo\n        })];\n        Axios.all(urlArray).then(response => {\n          // const editObject = response[0].data.TestGroupTest;\n          // const testFileItem = response[0].data.TestGroupTestFile;\n          // const SelectedTest = response[0].data.TestGroupTest;\n          const editObject = response[0].data.SelectedTestGroupTest;\n          const testFileItem = response[0].data.TestGroupTestFile;\n          const SelectedTest = response[0].data.SelectedTest; //const TestGroupTest = response[0].data.TestGroupTest;\n\n          const selectedRecord = { ...editObject,\n            // nsourcecode: {\n            //     \"label\": editObject.ssourcename,\n            //     \"value\": editObject.nsourcecode\n            // },\n            nsectioncode: {\n              \"label\": editObject.ssectionname,\n              \"value\": editObject.nsectioncode\n            },\n            nmethodcode: {\n              \"label\": editObject.smethodname,\n              \"value\": editObject.nmethodcode\n            },\n            ninstrumentcatcode: {\n              \"label\": editObject.sinstrumentcatname,\n              \"value\": editObject.ninstrumentcatcode\n            },\n            ncontainertypecode: {\n              \"label\": editObject.scontainertype,\n              \"value\": editObject.ncontainertypecode\n            }\n          };\n\n          if (testFileItem) {\n            selectedRecord[\"ntestfilecode\"] = {\n              \"label\": testFileItem.sfilename,\n              \"value\": testFileItem.ntestgroupfilecode,\n              item: testFileItem\n            };\n            selectedRecord[\"ntestgroupfilecode\"] = testFileItem.ntestgroupfilecode;\n          }\n\n          if (editObject.nmethodcode !== -1) {\n            selectedRecord[\"nmethodcode\"] = {\n              \"label\": editObject.smethodname,\n              \"value\": editObject.nmethodcode\n            };\n          } else {\n            selectedRecord[\"nmethodcode\"] = undefined;\n          }\n\n          if (editObject.ninstrumentcatcode !== -1) {\n            selectedRecord[\"ninstrumentcatcode\"] = {\n              \"label\": editObject.sinstrumentcatname,\n              \"value\": editObject.ninstrumentcatcode\n            };\n          } else {\n            selectedRecord[\"ninstrumentcatcode\"] = undefined;\n          }\n\n          if (editObject.ncontainertypecode !== -1) {\n            selectedRecord[\"ncontainertypecode\"] = {\n              \"label\": editObject.scontainertype,\n              \"value\": editObject.ncontainertypecode\n            };\n          } else {\n            selectedRecord[\"ncontainertypecode\"] = undefined;\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...masterData,\n                ...response[0].data,\n                SelectedTest: SelectedTest //TestGroupTest : [TestGroupTest]\n\n              },\n              openModal: true,\n              operation: operation,\n              screenName: \"IDS_EDITTESTGROUPTEST\",\n              testGroupInputData: {\n                // source: constructOptionList(response[1].data || [], \"nsourcecode\", \"ssourcename\", false, false, true).get(\"OptionList\"),\n                section: constructOptionList(response[2].data || [], \"nsectioncode\", \"ssectionname\", false, false, true).get(\"OptionList\"),\n                method: constructOptionList(response[3].data || [], \"nmethodcode\", \"smethodname\", false, false, true).get(\"OptionList\"),\n                instrumentCategory: constructOptionList(response[4].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", false, false, true).get(\"OptionList\"),\n                containerType: constructOptionList(response[6].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true).get(\"OptionList\"),\n                testFile: constructOptionList(response[5].data || [], \"ntestfilecode\", \"sfilename\", false, false, true).get(\"OptionList\")\n              },\n              selectedRecord,\n              ncontrolCode\n            }\n          });\n        }).catch(error => {\n          console.log(\"errror:\", error);\n\n          if (error.response.status === 409 || error.response.status === 417) {\n            toast.warn(error.response.data);\n          } else {\n            toast.error(error.message);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    }\n  };\n};\nexport const editTestGroupParameter = (operation, selectedParameter, userInfo, ncontrolCode, selectedSpecification, filterData, masterData) => {\n  return dispatch => {\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT || selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\n        dispatch(initRequest(true));\n        const urlArray = [rsapi.post(\"/testgroup/getActiveParameterById\", {\n          userinfo: userInfo,\n          testgrouptestparameter: selectedParameter,\n          ntreeversiontempcode: filterData.ntreeversiontempcode.value\n        }), rsapi.post(\"/parametertype/getParameterType\", {\n          userinfo: userInfo\n        }), rsapi.post(\"unit/getUnit\", {\n          userinfo: userInfo\n        }), rsapi.post(\"grade/getGrade\", {\n          userinfo: userInfo\n        }), rsapi.post(\"checklist/getApprovedChecklist\", {\n          \"userinfo\": userInfo\n        })];\n        Axios.all(urlArray).then(response => {\n          const parameterObject = response[0].data.TestGroupTestParameter[0];\n          const predefinedObject = response[0].data.TestGroupTestPredefinedParameter;\n          const characterObject = response[0].data.TestGroupTestCharParameter;\n          const numericObject = response[0].data.TestGroupTestNumericParameter && response[0].data.TestGroupTestNumericParameter.length > 0 ? response[0].data.TestGroupTestNumericParameter[0] : {};\n          const selectedRecord = { ...parameterObject,\n            nunitcode: {\n              \"label\": parameterObject.sunitname,\n              \"value\": parameterObject.nunitcode\n            },\n            nparametertypecode: {\n              \"label\": parameterObject.sdisplaystatus,\n              \"value\": parameterObject.nparametertypecode\n            },\n            parameterTypeCode: parameterObject.nparametertypecode,\n            nchecklistversioncode: {\n              \"label\": parameterObject.schecklistname,\n              \"value\": parameterObject.nchecklistversioncode\n            },\n            schecklistversionname: parameterObject.schecklistversionname,\n            ntestformulacode: parameterObject.ntestformulacode > 0 ? {\n              \"label\": parameterObject.sformulacalculationdetail,\n              \"value\": parameterObject.ntestformulacode,\n              item: {\n                sformulacalculationdetail: parameterObject.sformulacalculationdetail,\n                ntestformulacode: parameterObject.ntestformulacode,\n                sformulacalculationcode: parameterObject.sformulacalculationcode\n              }\n            } : \"\"\n          };\n\n          if (selectedRecord[\"schecklistname\"] === \"NA\") {\n            delete selectedRecord[\"nchecklistversioncode\"];\n          }\n\n          if (selectedRecord[\"schecklistversionname\"] === \"NA\") {\n            delete selectedRecord[\"schecklistversionname\"];\n          }\n\n          if (selectedRecord[\"sunitname\"] === \"NA\") {\n            delete selectedRecord[\"nunitcode\"];\n          }\n\n          if (characterObject) {\n            selectedRecord[\"scharname\"] = characterObject.scharname;\n            selectedRecord[\"ntestgrouptestcharcode\"] = characterObject.ntestgrouptestcharcode;\n          }\n\n          if (predefinedObject) {\n            selectedRecord[\"ntestgrouptestpredefcode\"] = predefinedObject.ntestgrouptestpredefcode;\n            selectedRecord[\"spredefinedname\"] = predefinedObject.spredefinedname;\n            selectedRecord[\"ndefaultstatus\"] = predefinedObject.ndefaultstatus;\n            selectedRecord[\"ngradecode\"] = {\n              \"label\": predefinedObject.sdisplaystatus,\n              \"value\": predefinedObject.ngradecode\n            };\n          }\n\n          if (numericObject) {\n            selectedRecord[\"ntestgrouptestnumericcode\"] = numericObject.ntestgrouptestnumericcode;\n            selectedRecord[\"sminlod\"] = numericObject.sminlod;\n            selectedRecord[\"smaxlod\"] = numericObject.smaxlod;\n            selectedRecord[\"sminb\"] = numericObject.sminb;\n            selectedRecord[\"smina\"] = numericObject.smina;\n            selectedRecord[\"smaxa\"] = numericObject.smaxa;\n            selectedRecord[\"smaxb\"] = numericObject.smaxb;\n            selectedRecord[\"sminloq\"] = numericObject.sminloq;\n            selectedRecord[\"smaxloq\"] = numericObject.smaxloq;\n            selectedRecord[\"sdisregard\"] = numericObject.sdisregard;\n            selectedRecord[\"sresultvalue\"] = numericObject.sresultvalue;\n          }\n\n          const gradeMap = constructOptionList(response[3].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\n          const unitMap = constructOptionList(response[2].data || [], \"nunitcode\", \"sunitname\", false, false, true);\n          const grade = gradeMap.get(\"OptionList\");\n          const unit = unitMap.get(\"OptionList\");\n          const disabled = parameterObject.nparametertypecode === parameterType.NUMERIC ? false : true;\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openChildModal: true,\n              operation: operation,\n              screenName: \"IDS_PARAMETER\",\n              testGroupInputData: {\n                unit,\n                grade,\n                testFormula: constructOptionList(response[0].data.TestFormula || [], \"ntestformulacode\", \"sformulacalculationdetail\", false, false, true).get(\"OptionList\"),\n                parameterType: constructOptionList(response[1].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true).get(\"OptionList\"),\n                checkListVersion: constructOptionList(response[4].data || [], \"nchecklistversioncode\", \"schecklistname\", false, false, true).get(\"OptionList\"),\n                needRoundingDigit: disabled,\n                needUnit: disabled\n              },\n              parameterData: {\n                grade\n              },\n              selectedRecord,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 409 || error.response.status === 417) {\n            toast.warn(error.response.data);\n          } else {\n            toast.error(error.message);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    }\n  };\n}; // export const addTestGroupFormula = (selectedParameter, userInfo, ncontrolCode, optionalData) => {\n//     return dispatch => {\n//         const testgroupspecification = optionalData.testgroupspecification;\n//         if(testgroupspecification.napprovalstatus === transactionStatus.DRAFT || \n//             testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n//             dispatch(initRequest(true));\n//             rsapi.post(\"/testgroup/getTestGroupFormula\", {userinfo: userInfo, testgrouptestparameter: selectedParameter, testgroupspecification})\n//             .then(response=>{\n//                 dispatch({\n//                     type: DEFAULT_RETURN, \n//                     payload:{\n//                         openChildModal: true,\n//                         operation: \"create\",\n//                         screenName: \"IDS_FORMULA\",\n//                         testGroupInputData: {testFormula: response.data},\n//                         selectedRecord: {},\n//                         ncontrolCode\n//                 }});\n//             })\n//             .catch(error=>{\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}});\n//                 if(error.response.status === 409 || error.response.status === 417) {\n//                     toast.warn(error.response.data);\n//                 } else {\n//                     toast.error(error.message)\n//                 }\n//             });\n//         } else {\n//             toast.warn(intl.formatMessage({id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"}));\n//         }\n//     }\n// }\n\nexport const getTestGroupParameter = inputParam => {\n  return dispatch => {\n    rsapi.post(\"/testgroup/getTestGroupTestParameter\", { ...inputParam\n    }).then(response => {\n      sortData(response.data);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          }\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getComponentBySpecId = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgroup/\" + inputParam.operation + inputParam.methodUrl, {\n      [inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0],\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      sortData(response.data);\n\n      if (searchRef.current) {\n        searchRef.current.value = \"\";\n      }\n\n      const historyDataState = { ...inputParam.historyDataState,\n        sort: undefined,\n        filter: undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            searchedData: undefined\n          },\n          historyDataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const getTestGroupDetails = inputParam => {\n  return dispatch => {\n    //...inputParam, \n    dispatch(initRequest(true));\n    rsapi.post(\"/testgroup/getTestGroupTest\", {\n      ntestgrouptestcode: parseInt(inputParam['ntestgrouptestcode']),\n      userinfo: inputParam.userInfo\n    }) // rsapi.post(\"/testgroup/\"+inputParam.operation+inputParam.methodUrl, \n    //     {[inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0], userinfo: inputParam.userInfo})\n    .then(response => {\n      sortData(response.data);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          },\n          testskip: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const getTestGroupComponentDetails = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    //...inputParam, \n    dispatch(initRequest(true));\n    rsapi.post(\"/testgroup/getTestByComponentId\", {\n      testgroupspecsampletype: inputParam['testgroupspecsampletype'],\n      userinfo: inputParam.userInfo\n    }) // rsapi.post(\"/testgroup/\"+inputParam.operation+inputParam.methodUrl, \n    //     {[inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0], userinfo: inputParam.userInfo})\n    .then(response => {\n      sortData(response.data);\n      if (searchRef.current) searchRef.current.value = \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            searchedData: undefined\n          },\n          testskip: 0,\n          testtake: 5,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const getSpecification = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    if (inputParam.selectedRecord !== null) {\n      rsapi.post(\"/testgroup/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam,\n        [inputParam.keyName]: inputParam.selectedRecord\n      }).then(response => {\n        sortData(response.data);\n        if (searchRef.current) searchRef.current.value = \"\";\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              ActiveKey: inputParam.activeKey,\n              FocusKey: inputParam.focusKey,\n              primaryKey: inputParam.primaryKey,\n              ...response.data,\n              selectedNode: inputParam.selectedRecord,\n              searchedData: undefined\n            },\n            historyDataState: { ...inputParam.historyDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedNode: inputParam.selectedRecord,\n            TestGroupSpecification: [],\n            SelectedSpecification: {},\n            TestGroupTest: [],\n            TestGroupTestParameter: [],\n            TestGroupTestNumericParameter: [],\n            TestGroupTestFormula: [],\n            TestGroupTestPredefinedParameter: [],\n            TestGroupTestClinicalSpec: [],\n            TestGroupTestCharParameter: [],\n            ActiveKey: inputParam.activeKey,\n            FocusKey: inputParam.focusKey,\n            SelectedTest: {},\n            selectedParameter: {},\n            TestGroupSpecFile: [],\n            TestGroupSpecificationHistory: [],\n            SelectedComponent: undefined\n          }\n        }\n      });\n    }\n  };\n};\nexport const changeTestCategory = (inputParam, testGroupInputData) => {\n  return dispatch => {\n    rsapi.post(\"/testgroup/getTestMasterByCategory\", { ...inputParam\n    }).then(response => {\n      sortData(response.data);\n      inputParam.selectedRecord.ntestcode = [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: inputParam.selectedRecord,\n          testGroupInputData: { ...testGroupInputData,\n            ...response.data\n          }\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const getSpecificationDetails = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    rsapi.post(\"/testgroup/get\" + inputParam.methodUrl, { ...inputParam.inputData\n    }).then(response => {\n      if (searchRef.current) searchRef.current.value = \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            searchedData: undefined\n          },\n          screenName: inputParam.screenName\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const editSpecFile = inputParam => {\n  return dispatch => {\n    const masterData = inputParam.masterData;\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      if (inputParam.testgroupspecification.napprovalstatus === transactionStatus.DRAFT || inputParam.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n        let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\n          userinfo: inputParam.userInfo\n        }), rsapi.post(\"/testgroup/getActiveSpecFileById\", {\n          userinfo: inputParam.userInfo,\n          testgroupspecfile: inputParam.selectedRecord,\n          ntreeversiontempcode: inputParam.filterData.ntreeversiontempcode.value\n        })];\n        Axios.all(urlArray).then(response => {\n          const linkmaster = response[0].data.LinkMaster;\n          const defaultLink = linkmaster.filter(item => item.ndefaultlink === transactionStatus.YES);\n          const editObject = response[1].data;\n          let nlinkcode = {};\n          let link = {};\n\n          if (editObject.nattachmenttypecode === attachmentType.LINK) {\n            nlinkcode = {\n              \"label\": editObject.slinkname,\n              \"value\": editObject.nlinkcode\n            };\n            link = {\n              slinkfilename: editObject.sfilename,\n              slinkdescription: editObject.sdescription,\n              nlinkdefaultstatus: editObject.ndefaultstatus,\n              sfilesize: '',\n              nfilesize: 0,\n              ndefaultstatus: 4,\n              sfilename: ''\n            };\n          } else {\n            nlinkcode = defaultLink.length > 0 ? {\n              \"label\": defaultLink[0].slinkname,\n              \"value\": defaultLink[0].nlinkcode\n            } : \"\";\n            link = {\n              slinkfilename: '',\n              slinkdescription: '',\n              sdescription: editObject.sdescription,\n              nlinkdefaultstatus: 4,\n              sfilesize: editObject.sfilesize,\n              nfilesize: editObject.nfilesize,\n              ndefaultstatus: editObject.ndefaultstatus,\n              sfilename: editObject.sfilename\n            };\n          }\n\n          const selectedRecord = { // ...editObject,\n            ...link,\n            nallotedspeccode: editObject.nallotedspeccode,\n            nspecfilecode: editObject.nspecfilecode,\n            stypename: editObject.stypename,\n            nattachmenttypecode: editObject.nattachmenttypecode,\n            nlinkcode // disabled: true\n\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openModal: true,\n              operation: \"update\",\n              screenName: \"IDS_SPECFILE\",\n              editFiles: Object.values(editObject).length > 0 && editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {},\n              selectedRecord,\n              ncontrolCode: inputParam.ncontrolCode\n            }\n          });\n        }).catch(error => {\n          if (error.response.status === 409 || error.response.status === 417) {\n            toast.warn(error.response.data);\n          } else {\n            toast.error(error.message);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    }\n  };\n};\nexport const addTestGroupCodedResult = (operation, paramdata, userInfo, ncontrolCode, optionalData, masterData) => {\n  return dispatch => {\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      const testgroupspecification = optionalData.testgroupspecification;\n\n      if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n        dispatch(initRequest(true));\n        const urlArray = [rsapi.post(\"grade/getGrade\", {\n          \"userinfo\": userInfo\n        })];\n\n        if (operation === \"update\") {\n          urlArray.push(rsapi.post(\"testgroup/getActivePredefinedParameterById\", {\n            testgrouptestpredefinedparameter: paramdata,\n            \"userinfo\": userInfo,\n            testgroupspecification\n          }));\n        }\n\n        Axios.all(urlArray).then(response => {\n          let selectedRecord = {};\n          const gradeMap = constructOptionList(response[0].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\n          const grade = gradeMap.get(\"OptionList\");\n\n          if (operation === \"update\") {\n            const editCodedResult = response[1].data;\n            selectedRecord = {\n              ntestgrouptestpredefcode: paramdata[\"ntestgrouptestpredefcode\"],\n              ntestgrouptestparametercode: paramdata[\"ntestgrouptestparametercode\"],\n              ngradecode: {\n                \"label\": editCodedResult[\"sdisplaystatus\"],\n                \"value\": editCodedResult[\"ngradecode\"]\n              },\n              spredefinedname: editCodedResult[\"spredefinedname\"]\n            };\n          } else {\n            selectedRecord = {\n              ngradecode: gradeMap.get(\"DefaultValue\") // {\n              //     \"value\": grade[0].ngradecode,\n              //     \"label\": grade[0][\"sdisplaystatus\"]\n              // }\n\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openChildModal: true,\n              showSaveContinue: false,\n              operation: operation,\n              screenName: \"IDS_CODEDRESULT\",\n              parameterData: {\n                grade,\n                needCodedResult: false\n              },\n              selectedRecord,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    }\n  };\n};\nexport const addTestGroupNumericTab = (operation, paramdata, userInfo, optionalData, masterData, ncontrolCode) => {\n  return dispatch => {\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      const testgroupspecification = optionalData.testgroupspecification;\n\n      if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n        dispatch(initRequest(true));\n        const urlArray = [rsapi.post(\"patient/getGender\", {\n          \"userinfo\": userInfo\n        })];\n\n        if (operation === \"update\") {\n          urlArray.push(rsapi.post(\"testgroup/getActiveClinicalSpecById\", {\n            testgrouptestpredefinedparameter: paramdata,\n            \"userinfo\": userInfo,\n            testgroupspecification\n          }));\n        }\n\n        Axios.all(urlArray).then(response => {\n          let selectedRecord = {};\n          const gradeMap = constructOptionList(response[0].data.genderList || [], \"ngendercode\", \"sgendername\", false, false, true);\n          const grade = gradeMap.get(\"OptionList\");\n\n          if (operation === \"update\") {\n            const editCodedResult = response[1].data;\n            selectedRecord = {\n              ntestgrouptestclinicspeccode: paramdata[\"ntestgrouptestclinicspeccode\"],\n              ntestgrouptestparametercode: paramdata[\"ntestgrouptestparametercode\"],\n              nfromage: paramdata[\"nfromage\"],\n              ntoage: paramdata[\"ntoage\"],\n              ngendercode: {\n                \"label\": editCodedResult[\"sgendername\"],\n                \"value\": editCodedResult[\"ngendercode\"]\n              },\n              nhigha: editCodedResult[\"shigha\"],\n              nhighb: editCodedResult[\"shighb\"],\n              nlowa: editCodedResult[\"slowa\"],\n              nlowb: editCodedResult[\"slowb\"]\n            };\n          } else {\n            selectedRecord = {\n              ngendercode: gradeMap.get(\"DefaultValue\") // {\n              //     \"value\": grade[0].ngradecode,\n              //     \"label\": grade[0][\"sdisplaystatus\"]\n              // }\n\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openChildModal: true,\n              showSaveContinue: false,\n              operation: operation,\n              screenName: \"IDS_CLINICALSPEC\",\n              parameterData: {\n                grade,\n                needCodedResult: false\n              },\n              selectedRecord,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    }\n  };\n};\nexport const viewTestGroupCheckList = (inputParam, userInfo) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"checklist/viewTemplate\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openTemplateModal: true,\n          testGroupCheckList: {\n            templateData: response.data\n          },\n          loading: false,\n          selectedRecord: {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const reportSpecification = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"testgroup/specReportGenerate\", { ...inputParam,\n      ntreeversiontempcode: inputParam.filterData.ntreeversiontempcode.value\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showConfirmAlert: false\n        }\n      });\n      document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n      document.getElementById(\"download_data\").click();\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const retireSpecification = (inputParam, masterData) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"testgroup/retireSpec\", { ...inputParam\n    }).then(response => {\n      // const TestGroupSpecification = response.data.TestGroupSpecificationHistory ;\n      sortData(response.data);\n      masterData = { ...masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getDataForTestMaterial = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const materialTypeUrl = rsapi.post(\"materialcategory/getMaterialType\", {\n      \"userinfo\": userInfo\n    });\n    const validationUrl = rsapi.post(\"testgroup/validationForRetiredTemplate\", {\n      \"userinfo\": userInfo,\n      ntreeversiontempcode: masterData.selectedNode.ntreeversiontempcode\n    });\n    urlArray = [materialTypeUrl, validationUrl];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (masterData.SelectedTest && masterData.SelectedTest !== undefined) {\n        if (response[1].data === \"Success\") {\n          const materialTypeMap = constructOptionList(response[0].data || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, false);\n          const materialType = materialTypeMap.get(\"OptionList\");\n          const materialTypedefault = materialTypeMap.get(\"DefaultValue\");\n          selectedRecord[\"nmaterialtypecode\"] = materialTypedefault;\n\n          if (selectedRecord[\"nmaterialtypecode\"] !== undefined) {\n            let inputData = [];\n            let inputParam = {\n              operation: operation,\n              selectedRecord: selectedRecord,\n              materialType: materialType,\n              inputData: {\n                nmaterialtypecode: materialTypedefault.value\n              },\n              materialType: materialType,\n              masterData: masterData,\n              screenName: screenName\n            };\n            dispatch(getMaterialCategoryBasedMaterialType(inputParam));\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                materialType: materialType,\n                materialList: undefined,\n                materialCategoryList: undefined,\n                isOpen: true,\n                operation: operation,\n                screenName: screenName,\n                openChildModal: true,\n                ncontrolCode: ncontrolCode,\n                loading: false\n              }\n            });\n          }\n        } else {\n          toast.warn(intl.formatMessage({\n            id: response[1].data\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              operation: operation,\n              screenName: screenName,\n              ncontrolCode: ncontrolCode,\n              loading: false\n            }\n          });\n        }\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_NEEDTOADDTEST\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: operation,\n            screenName: screenName,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport function getMaterialCategoryBasedMaterialType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"material/getMaterialcombo\", {\n      nmaterialtypecode: inputParam.inputData.nmaterialtypecode\n    }).then(response => {\n      let selectedRecord = {};\n      selectedRecord = inputParam.selectedRecord;\n      const materialCategoryMap = constructOptionList(response.data.MaterialCategoryMain || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, false);\n      const materialCategoryList = materialCategoryMap.get(\"OptionList\");\n      const materialCategorydefault = materialCategoryMap.get(\"DefaultValue\");\n      selectedRecord['nmaterialcatcode'] = materialCategorydefault;\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n\n      if (response.data.MaterialCategoryMain.length === 0) {\n        if (selectedRecord['nmaterialcatcode']) {\n          delete selectedRecord['nmaterialcatcode'];\n        }\n\n        if (selectedRecord['nmaterialcode']) {\n          delete selectedRecord['nmaterialcode'];\n        }\n      }\n\n      let materialList = [];\n\n      if (materialCategoryList.length !== 0) {\n        materialList = materialList;\n        inputParam = { ...inputParam,\n          responsecat: response,\n          materialCategoryList: materialCategoryList,\n          selectedRecord: selectedRecord,\n          inputData: {\n            //nmaterialcatcode: materialCategorydefault.value,\n            nmaterialtypecode: inputParam.inputData.nmaterialtypecode\n          }\n        };\n        dispatch(getMaterialBasedMaterialCategory(inputParam));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openChildModal: true,\n            screenName: inputParam.screenName,\n            masterData,\n            loading: false,\n            materialCategoryList: materialCategoryList,\n            materialType: inputParam.materialType,\n            materialList: materialList,\n            selectedRecord: selectedRecord,\n            operation: inputParam.operation\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getMaterialBasedMaterialCategory(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"testgroup/getAvailableMaterial\", {\n      nmaterialtypecode: inputParam.inputData.nmaterialtypecode,\n      nmaterialcatcode: inputParam.inputData.nmaterialcatcode !== undefined ? inputParam.inputData.nmaterialcatcode : inputParam.responsecat.data.MaterialCategoryMain[0].nmaterialcatcode,\n      ntestgrouptestcode: inputParam.masterData.SelectedTest.ntestgrouptestcode\n    }).then(response => {\n      let selectedRecord = inputParam.selectedRecord;\n      const materialMap = constructjsonOptionList(response.data.MaterialCombo || [], \"nmaterialcode\", \"Material Name\", undefined, undefined, false);\n      const materialList = materialMap.get(\"OptionList\");\n\n      if (response.data.MaterialCombo.length === 0) {\n        delete selectedRecord['nmaterialcode'];\n      }\n\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n\n      if (inputParam.materialCategoryList) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            materialCategoryList: inputParam.materialCategoryList,\n            masterData,\n            loading: false,\n            materialList: materialList,\n            openChildModal: true,\n            screenName: inputParam.screenName,\n            selectedRecord: inputParam.selectedRecord,\n            materialType: inputParam.materialType,\n            operation: inputParam.operation\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            materialList: materialList,\n            openChildModal: true\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport const getTestGroupMaterial = inputParam => {\n  return dispatch => {\n    rsapi.post(\"/testgroup/getTestGroupTestMaterial\", { ...inputParam\n    }).then(response => {\n      sortData(response.data);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          }\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getDataForEditTestMaterial = (screenName, operation, userInfo, ncontrolCode, selectedRecord, Data, primaryKeyName) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const materialTypeUrl = rsapi.post(\"materialcategory/getMaterialType\", {\n      \"userinfo\": userInfo\n    });\n    const materialCatUrl = rsapi.post(\"material/getMaterialcombo\", {\n      nmaterialtypecode: Data.selectedMaterial.nmaterialtypecode\n    });\n    const materialUrl = rsapi.post(\"materialinventory/getMaterialInventorycombo\", {\n      nmaterialcatcode: Data.selectedMaterial.nmaterialcatcode,\n      nmaterialtypecode: Data.selectedMaterial.nmaterialtypecode\n    });\n    const materialById = rsapi.post(\"testgroup/getActiveTestMaterialById\", {\n      [primaryKeyName]: Data.selectedMaterial.ntestgrouptestmaterialcode,\n      \"userinfo\": userInfo\n    });\n    const validationUrl = rsapi.post(\"testgroup/validationForRetiredTemplate\", {\n      \"userinfo\": userInfo,\n      ntreeversiontempcode: Data.selectedNode.ntreeversiontempcode\n    });\n    urlArray = [materialTypeUrl, materialCatUrl, materialUrl, materialById, validationUrl];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (response[4].data === \"Success\") {\n        let selectedRecord = {};\n        let MaterialCategoryData = [];\n        let MaterialTypeData = [];\n        let MaterialData = [];\n        const materialTypeMap = constructOptionList(response[0].data || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, false);\n        const materialType = materialTypeMap.get(\"OptionList\");\n        const materialCategoryMap = constructOptionList(response[1].data.MaterialCategoryMain || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, false);\n        const materialCategoryList = materialCategoryMap.get(\"OptionList\");\n        const materialMap = constructjsonOptionList(response[2].data.MaterialCombo || [], \"nmaterialcode\", \"Material Name\", undefined, undefined, false);\n        const materialList = materialMap.get(\"OptionList\");\n        MaterialCategoryData.push({\n          \"value\": response[3].data[\"nmaterialcatcode\"],\n          \"label\": response[3].data[\"smaterialcatname\"]\n        });\n        MaterialTypeData.push({\n          \"value\": response[3].data[\"nmaterialtypecode\"],\n          \"label\": response[3].data[\"smaterialtypename\"]\n        });\n        MaterialData.push({\n          \"value\": response[3].data[\"nmaterialcode\"],\n          \"label\": response[3].data[\"smaterialname\"]\n        });\n        selectedRecord = response[3].data;\n        selectedRecord[\"nmaterialcatcode\"] = MaterialCategoryData[0];\n        selectedRecord[\"nmaterialtypecode\"] = MaterialTypeData[0];\n        selectedRecord[\"nmaterialcode\"] = MaterialData[0];\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            materialType: materialType,\n            materialList: materialList,\n            materialCategoryList: materialCategoryList,\n            selectedRecord: selectedRecord,\n            isOpen: true,\n            operation: operation,\n            screenName: screenName,\n            openChildModal: true,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[4].data\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: operation,\n            screenName: screenName,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/TestGroupAction.js"],"names":["toast","rsapi","DEFAULT_RETURN","attachmentType","parameterType","SampleType","transactionStatus","constructjsonOptionList","constructOptionList","rearrangeDateFormat","sortData","Axios","intl","initRequest","sampleTypeOnChange","inputParam","masterData","dispatch","post","methodUrl","inputData","then","response","data","type","payload","tempFilterData","loading","catch","error","status","warn","message","filterTestGroup","searchRef","current","value","filterData","searchedData","undefined","testskip","historyDataState","sort","filter","createTree","selectedRecord","userInfo","selectedNode","ncontrolCode","nproductcatcode","item","ncategorybasedflow","YES","nproductcode","sampletype","nsampletypecode","ncategorycode","ntreeversiontempcode","userinfo","treetemplatemanipulation","treetempTranstestGroup","mandatoryFields","forEach","index","sleveldescription","push","slabelname","openModal","operation","screenName","TreetempTranstestGroup","treeMandatoryFields","formatMessage","id","editTree","treeVersionTemplateIndex","findIndex","x","templateVersionStatus","ntransactionstatus","RETIRED","addSpecification","masterDatas","nnextchildcode","SelectedSpecification","urlArray","testgroupspecification","napprovalstatus","CORRECTION","DRAFT","all","sproductname","label","sproductcatname","dexpirydate","ntzexpirydate","stimezoneid","sspecname","ExpiryDate","ncomponentrequired","CLINICALTYPE","NO","nclinicalspec","ACTIVE","ntimezonecode","timeZoneList","get","addComponent","testGroupSpecSampleType","length","testCategory","sampleTypeMap","testGroupInputData","TestCategory","TestGroupSpecSampleType","TestGroupTest","ncomponentcode","ntestcategorycode","addTestGroupTest","selectedComponent","selectedSpecification","testgroupspecsampletype","stestcategoryname","stestcategorycode","editTestGroupTest","selectedTest","ntestcode","testgrouptest","editObject","SelectedTestGroupTest","testFileItem","TestGroupTestFile","SelectedTest","nsectioncode","ssectionname","nmethodcode","smethodname","ninstrumentcatcode","sinstrumentcatname","ncontainertypecode","scontainertype","sfilename","ntestgroupfilecode","section","method","instrumentCategory","containerType","testFile","console","log","editTestGroupParameter","selectedParameter","testgrouptestparameter","parameterObject","TestGroupTestParameter","predefinedObject","TestGroupTestPredefinedParameter","characterObject","TestGroupTestCharParameter","numericObject","TestGroupTestNumericParameter","nunitcode","sunitname","nparametertypecode","sdisplaystatus","parameterTypeCode","nchecklistversioncode","schecklistname","schecklistversionname","ntestformulacode","sformulacalculationdetail","sformulacalculationcode","scharname","ntestgrouptestcharcode","ntestgrouptestpredefcode","spredefinedname","ndefaultstatus","ngradecode","ntestgrouptestnumericcode","sminlod","smaxlod","sminb","smina","smaxa","smaxb","sminloq","smaxloq","sdisregard","sresultvalue","gradeMap","unitMap","grade","unit","disabled","NUMERIC","openChildModal","testFormula","TestFormula","checkListVersion","needRoundingDigit","needUnit","parameterData","getTestGroupParameter","getComponentBySpecId","keyName","getTestGroupDetails","ntestgrouptestcode","parseInt","getTestGroupComponentDetails","testtake","getSpecification","ActiveKey","activeKey","FocusKey","focusKey","primaryKey","TestGroupSpecification","TestGroupTestFormula","TestGroupTestClinicalSpec","TestGroupSpecFile","TestGroupSpecificationHistory","SelectedComponent","changeTestCategory","getSpecificationDetails","editSpecFile","testgroupspecfile","linkmaster","LinkMaster","defaultLink","ndefaultlink","nlinkcode","link","nattachmenttypecode","LINK","slinkname","slinkfilename","slinkdescription","sdescription","nlinkdefaultstatus","sfilesize","nfilesize","nallotedspeccode","nspecfilecode","stypename","editFiles","Object","values","FTP","addTestGroupCodedResult","paramdata","optionalData","testgrouptestpredefinedparameter","editCodedResult","ntestgrouptestparametercode","showSaveContinue","needCodedResult","addTestGroupNumericTab","genderList","ntestgrouptestclinicspeccode","nfromage","ntoage","ngendercode","nhigha","nhighb","nlowa","nlowb","viewTestGroupCheckList","openTemplateModal","testGroupCheckList","templateData","reportSpecification","loadEsign","showConfirmAlert","document","getElementById","setAttribute","filepath","click","retireSpecification","getDataForTestMaterial","primaryKeyName","materialTypeUrl","validationUrl","materialTypeMap","materialType","materialTypedefault","nmaterialtypecode","getMaterialCategoryBasedMaterialType","materialList","materialCategoryList","isOpen","materialCategoryMap","MaterialCategoryMain","materialCategorydefault","responsecat","getMaterialBasedMaterialCategory","nmaterialcatcode","materialMap","MaterialCombo","getTestGroupMaterial","getDataForEditTestMaterial","Data","materialCatUrl","selectedMaterial","materialUrl","materialById","ntestgrouptestmaterialcode","MaterialCategoryData","MaterialTypeData","MaterialData"],"mappings":"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","sourcesContent":["import {\r\n    toast\r\n} from \"react-toastify\";\r\nimport rsapi from \"../rsapi\";\r\nimport {\r\n    DEFAULT_RETURN\r\n} from \"./LoginTypes\";\r\nimport {\r\n    attachmentType,\r\n    parameterType,\r\n    SampleType,\r\n    transactionStatus\r\n} from \"../components/Enumeration\";\r\nimport {\r\n    constructjsonOptionList,\r\n    constructOptionList,\r\n    rearrangeDateFormat,\r\n    //formatInputDate,\r\n    sortData\r\n} from \"../components/CommonScript\";\r\nimport Axios from \"axios\";\r\nimport {\r\n    intl\r\n} from \"../components/App\";\r\nimport {\r\n    initRequest\r\n} from \"./LoginAction\";\r\n\r\n\r\nexport const sampleTypeOnChange = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgroup\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        tempFilterData: inputParam.inputData.tempFilterData,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    masterData[\"ExistingLinkTable\"] = [];\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const filterTestGroup = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgroup/filterTestGroup\", inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                if (searchRef.current) {\r\n                    searchRef.current.value = \"\";\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        filterData: inputParam.inputData.filterData,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            searchedData: undefined\r\n                        },\r\n                        loading: false,\r\n                        testskip: 0,\r\n                        historyDataState: {\r\n                            ...inputParam.historyDataState,\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const createTree = (selectedRecord, userInfo, selectedNode, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        if (selectedRecord.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES || selectedRecord.nproductcode) {\r\n            const inputParam = {\r\n                sampletype: selectedRecord.nsampletypecode.item,\r\n                ncategorycode: selectedRecord.nproductcatcode.value,\r\n                ntreeversiontempcode: selectedRecord.ntreeversiontempcode.value,\r\n                userinfo: userInfo,\r\n                treetemplatemanipulation: selectedNode\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/testgroup/getTemplateMasterDetails\", {\r\n                ...inputParam\r\n            })\r\n                .then(response => {\r\n                    const treetempTranstestGroup = response.data[\"TreetempTranstestGroup\"] || [];\r\n\r\n                    // const treeMandatoryFields = treetempTranstestGroup.map((item, index) => {\r\n                    //         return {\r\n                    //             \"idsName\": item.slabelname,\r\n                    //             \"dataField\": \"sleveldescription_\" + index,\r\n                    //             \"mandatory\": true\r\n                    //         }\r\n                    // });\r\n\r\n                    //  const selectedNodeLevel = selectedNode ? selectedNode.slevelcode.split(\"/1\").length-2 : -1;\r\n                    const mandatoryFields = [];\r\n                    treetempTranstestGroup.forEach((item, index) => {\r\n                        if (item.sleveldescription === null) {\r\n                            mandatoryFields.push({\r\n                                \"idsName\": item.slabelname,\r\n                                \"dataField\": \"sleveldescription_\" + index,\r\n                                \"mandatory\": true\r\n                            })\r\n                        }\r\n                    });\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openModal: true,\r\n                            operation: \"create\",\r\n                            screenName: \"IDS_PROFILETREE\",\r\n                            TreetempTranstestGroup: treetempTranstestGroup,\r\n                            treeMandatoryFields: mandatoryFields,\r\n                            //selectedRecord,\r\n                            ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        } else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_PRODUCTNOTAVAILABLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nexport const editTree = (operation, selectedNode, userinfo, ncontrolCode, filterData, masterData) => {\r\n    return (dispatch) => {\r\n        //console.log(\"edit Tree:\", selectedNode, masterData);\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === selectedNode[\"ntreeversiontempcode\"]);\r\n        // if (treeVersionTemplateIndex !== -1){\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        //}\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            if (selectedNode) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(\"/testgroup/getTreeById\", {\r\n                    userinfo,\r\n                    treetemplatemanipulation: selectedNode,\r\n                    ntreeversiontempcode: filterData.ntreeversiontempcode.value\r\n                })\r\n                    .then(response => {\r\n                        const treetempTranstestGroup = response.data;\r\n                        const treeMandatoryFields = treetempTranstestGroup && [{\r\n                            \"idsName\": treetempTranstestGroup.slabelname,\r\n                            \"dataField\": \"sleveldescription\",\r\n                            \"mandatory\": true\r\n                        }];\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                openModal: true,\r\n                                operation: operation,\r\n                                screenName: \"IDS_EDITTREE\",\r\n                                selectedRecord: {\r\n                                    ...treetempTranstestGroup\r\n                                },\r\n                                treeMandatoryFields,\r\n                                ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        });\r\n                        if (error.response.status === 409 || error.response.status === 417) {\r\n                            toast.warn(error.response.data);\r\n                        } else {\r\n                            toast.error(error.message)\r\n                        }\r\n                    });\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SELECTPROFILENODETOEDIT\"\r\n                }))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const addSpecification = (operation, inputParam, ncontrolCode, masterDatas) => {\r\n    return (dispatch) => {\r\n        //if (inputParam.selectedNode != null && inputParam.selectedNode.schildnode === \"\") {\r\n        if (inputParam.selectedRecord.ntreeversiontempcode.item.ntransactionstatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            if (inputParam.selectedNode != null && inputParam.selectedNode.nnextchildcode === -1) {\r\n\r\n                if (masterDatas && masterDatas.SelectedSpecification === null && operation === \"copy\") {\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n                }\r\n                else {\r\n                    let urlArray = [];\r\n                    if (operation === \"update\") {\r\n                        const testgroupspecification = inputParam.testgroupspecification[0];\r\n                        if (testgroupspecification.napprovalstatus === transactionStatus.CORRECTION ||\r\n                            testgroupspecification.napprovalstatus === transactionStatus.DRAFT) {\r\n                            urlArray = [rsapi.post(\"timezone/getTimeZone\")];\r\n\r\n                            urlArray.push(rsapi.post(\"/testgroup/getActiveSpecificationById\", {\r\n                                testgroupspecification,\r\n                                userinfo: inputParam.userinfo,\r\n                                ntreeversiontempcode: inputParam.selectedRecord.ntreeversiontempcode.value\r\n                            }));\r\n                        } else {\r\n                            toast.warn(intl.formatMessage({\r\n                                id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                            }));\r\n                            return;\r\n                        }\r\n\r\n                    } else {\r\n                        urlArray = [rsapi.post(\"timezone/getTimeZone\")];\r\n\r\n                        urlArray.push(rsapi.post(\"/testgroup/getAddSpecification\", {\r\n                            userinfo: inputParam.userInfo,\r\n                            ntreeversiontempcode: inputParam.selectedRecord.ntreeversiontempcode.value\r\n                            //currentdate: formatInputDate(new Date(), true)\r\n                        }));\r\n\r\n\r\n                    }\r\n                    Axios.all(urlArray)\r\n                        .then(response => {\r\n                            let selectedRecord = {};\r\n                            let masterData = inputParam.masterData !== undefined ? inputParam.masterData : masterDatas;\r\n\r\n                            if (operation === \"update\") {\r\n                                masterData = {\r\n                                    ...inputParam.masterData,\r\n                                    ...response[1].data,\r\n                                    testgroupspecification: inputParam.testgroupspecification\r\n                                }\r\n                                selectedRecord = {\r\n                                    sproductname: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? \"\" : inputParam.selectedRecord.nproductcode.label,\r\n                                    sproductcatname: inputParam.selectedRecord.nproductcatcode.label,\r\n                                    ncategorybasedflow: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow,\r\n                                    ...response[1].data.SelectedSpecification,\r\n                                    //dexpirydate: new Date(response[1].data[\"sexpirydate\"]),\r\n                                    dexpirydate: rearrangeDateFormat(inputParam.userinfo, response[1].data.SelectedSpecification[\"sexpirydate\"]),\r\n                                    ntzexpirydate: {\r\n                                        \"label\": response[1].data.SelectedSpecification.stimezoneid,\r\n                                        \"value\": response[1].data.SelectedSpecification.ntzexpirydate\r\n                                    }\r\n                                };\r\n                            } else {\r\n                                selectedRecord = {\r\n                                    sproductname: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? \"\" : inputParam.selectedRecord.nproductcode.label,\r\n                                    sproductcatname: inputParam.selectedRecord.nproductcatcode.label,\r\n                                    sspecname: inputParam.selectedNode.sleveldescription,\r\n                                    ncategorybasedflow: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow,\r\n                                    dexpirydate: rearrangeDateFormat(inputParam.userInfo, response[1].data.ExpiryDate),\r\n                                    ncomponentrequired: inputParam.selectedNode.nsampletypecode===SampleType.CLINICALTYPE?transactionStatus.YES:transactionStatus.NO,\r\n                                    nclinicalspec: inputParam.selectedNode.nsampletypecode===SampleType.CLINICALTYPE?transactionStatus.YES:transactionStatus.NO,\r\n                                    ntransactionstatus: transactionStatus.ACTIVE,\r\n                                    ntzexpirydate: {\r\n                                        \"label\": inputParam.userInfo.stimezoneid,\r\n                                        \"value\": inputParam.userInfo.ntimezonecode\r\n                                    }\r\n                                };\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    openModal: true,\r\n                                    operation: operation,\r\n                                    screenName: \"IDS_SPECIFICATION\",\r\n                                    masterData,\r\n                                    selectedRecord,\r\n                                    timeZoneList: constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", false, false, true).get(\"OptionList\"),\r\n                                    ncontrolCode\r\n                                }\r\n                            });\r\n                        })\r\n                        .catch(error => {\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            } else {\r\n                                toast.warn(error.response.data);\r\n                            }\r\n                        })\r\n                }\r\n            } else {\r\n                if (operation === \"copy\") {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: \"IDS_SELECTSPECIFICATION\"\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: \"IDS_SELECTLASTLEVELNODETOADDSPEC\"\r\n                    }));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const addComponent = (SelectedSpecification, userInfo, ncontrolCode, masterData) => {\r\n    return (dispatch) => {\r\n\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            rsapi.post(\"/testgroup/getAvailableComponent\", {\r\n                userinfo: userInfo,\r\n                testgroupspecification: SelectedSpecification\r\n            })\r\n                .then(response => {\r\n                    const testGroupSpecSampleType = response.data[\"TestGroupSpecSampleType\"] || [];\r\n                    if (testGroupSpecSampleType.length > 0) {\r\n                        const testCategory = constructOptionList(response.data[\"TestCategory\"] || [], \"ntestcategorycode\", \"stestcategoryname\", 'ntestcategorycode', 'ascending', false);\r\n                        const sampleTypeMap = constructOptionList(testGroupSpecSampleType, \"ncomponentcode\", \"scomponentname\", false, false, true);\r\n                        // const TestGroupTestMap = constructOptionList(response.data[\"TestGroupTest\"]||[], \"ntestcode\", \"stestname\", false, false, true);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                openModal: true,\r\n                                operation: \"create\",\r\n                                screenName: \"IDS_COMPONENT\",\r\n                                testGroupInputData: {\r\n                                    TestCategory: testCategory.get(\"OptionList\"),\r\n                                    TestGroupSpecSampleType: sampleTypeMap.get(\"OptionList\"),\r\n                                    TestGroupTest: response.data[\"TestGroupTest\"] || [] //TestGroupTestMap.get(\"OptionList\"),\r\n                                },\r\n                                selectedRecord: {\r\n                                    ncomponentcode: sampleTypeMap.get(\"DefaultValue\"),\r\n                                    ntestcategorycode: testCategory.get(\"DefaultValue\") ? testCategory.get(\"DefaultValue\") : testCategory.get(\"OptionList\")[0]\r\n                                },\r\n                                ncontrolCode\r\n                            }\r\n                        });\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: \"IDS_COMPONENTNOTAVAILABLE\"\r\n                        }));\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport const addTestGroupTest = (selectedComponent, userInfo, ncontrolCode, selectedSpecification, filterData, masterData) => {\r\n    return dispatch => {\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            if (selectedSpecification) {\r\n                if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT ||\r\n                    selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                    if (selectedComponent) {\r\n                        rsapi.post(\"/testgroup/getAvailableTest\", {\r\n                            userinfo: userInfo,\r\n                            testgroupspecsampletype: selectedComponent,\r\n                            ntreeversiontempcode: filterData.ntreeversiontempcode.value\r\n                        })\r\n                            .then(response => {\r\n                             let  testCategory; \r\n                             // = constructOptionList(response.data[\"TestCategory\"], \"ntestcategorycode\", \"stestcategoryname\", \"ntestcategorycode\", \"ascending\", false);\r\n                                // const TestGroupTestMap = constructOptionList(response.data[\"TestGroupTest\"]||[], \"ntestcode\", \"stestname\", false, false, true);\r\n                                if (response.data[\"TestCategory\"].length > 0)  {\r\n                                     testCategory = constructOptionList(response.data[\"TestCategory\"], \"ntestcategorycode\", \"stestcategoryname\", \"ntestcategorycode\", \"ascending\", false);\r\n                                dispatch({\r\n                                    type: DEFAULT_RETURN,\r\n                                    payload: {\r\n                                        openModal: true,\r\n                                        operation: \"create\",\r\n                                        screenName: \"IDS_TEST\",\r\n                                        testGroupInputData: {\r\n                                            TestCategory: testCategory.get(\"OptionList\"),\r\n                                            TestGroupTest: response.data[\"TestGroupTest\"] || [] //TestGroupTestMap.get(\"OptionList\"),\r\n                                        },\r\n                                        selectedRecord: {\r\n                                            ntestcategorycode: {\r\n                                                label: response.data[\"SelectedTestCategory\"].stestcategoryname,\r\n                                                value: response.data[\"SelectedTestCategory\"].stestcategorycode,\r\n                                                item: response.data[\"SelectedTestCategory\"]\r\n                                            }\r\n                                            //ntestcategorycode: testCategory.get(\"DefaultValue\") ? testCategory.get(\"DefaultValue\") : testCategory.get(\"OptionList\")[0]\r\n                                        },\r\n                                        ncontrolCode\r\n                                    }\r\n                                });\r\n                            }else{\r\n                                toast.warn(intl.formatMessage({\r\n                                    id: \"IDS_TESTCATEGORYNOTAVAILABLE\"\r\n                                }))\r\n                            }\r\n                            })\r\n                            .catch(error => {\r\n                                if (error.response.status === 409 || error.response.status === 417) {\r\n                                    toast.warn(error.response.data);\r\n                                } else {\r\n                                    toast.error(error.message);\r\n                                }\r\n                            });\r\n                        \r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: \"IDS_NEEDCOMPONENTTOADDTEST\"\r\n                        }));\r\n                    }\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                    }));\r\n                }\r\n\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SELECTSPECIFICATION\"\r\n                }));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const editTestGroupTest = (operation, selectedTest, userInfo, ncontrolCode, selectedSpecification, filterData, masterData) => {\r\n    return dispatch => {\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT ||\r\n                selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                const ntestcode = selectedTest.ntestcode;\r\n                const urlArray = [\r\n                    rsapi.post(\"/testgroup/getActiveTestById\", {\r\n                        userinfo: userInfo,\r\n                        testgrouptest: selectedTest,\r\n                        ntreeversiontempcode: filterData.ntreeversiontempcode.value\r\n                    }),\r\n                    rsapi.post(\"/source/getSource\", {\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"/testmaster/getSection\", {\r\n                        ntestcode,\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"/testmaster/getMethod\", {\r\n                        ntestcode,\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"/testmaster/getInstrumentCategory\", {\r\n                        ntestcode,\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"/testmaster/getTestAttachment\", {\r\n                        ntestcode,\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"/testmaster/getContainerType\", {\r\n                        ntestcode,\r\n                        userinfo: userInfo\r\n                    })\r\n                ]\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        // const editObject = response[0].data.TestGroupTest;\r\n                        // const testFileItem = response[0].data.TestGroupTestFile;\r\n                        // const SelectedTest = response[0].data.TestGroupTest;\r\n\r\n                        const editObject = response[0].data.SelectedTestGroupTest;\r\n                        const testFileItem = response[0].data.TestGroupTestFile;\r\n                        const SelectedTest = response[0].data.SelectedTest;\r\n                        //const TestGroupTest = response[0].data.TestGroupTest;\r\n\r\n                        const selectedRecord = {\r\n                            ...editObject,\r\n                            // nsourcecode: {\r\n                            //     \"label\": editObject.ssourcename,\r\n                            //     \"value\": editObject.nsourcecode\r\n                            // },\r\n                            nsectioncode: {\r\n                                \"label\": editObject.ssectionname,\r\n                                \"value\": editObject.nsectioncode\r\n                            },\r\n                            nmethodcode: {\r\n                                \"label\": editObject.smethodname,\r\n                                \"value\": editObject.nmethodcode\r\n                            },\r\n                            ninstrumentcatcode: {\r\n                                \"label\": editObject.sinstrumentcatname,\r\n                                \"value\": editObject.ninstrumentcatcode\r\n                            },\r\n                            ncontainertypecode: {\r\n                                \"label\": editObject.scontainertype,\r\n                                \"value\": editObject.ncontainertypecode\r\n                            }\r\n                        };\r\n                        if (testFileItem) {\r\n                            selectedRecord[\"ntestfilecode\"] = {\r\n                                \"label\": testFileItem.sfilename,\r\n                                \"value\": testFileItem.ntestgroupfilecode,\r\n                                item: testFileItem\r\n                            };\r\n                            selectedRecord[\"ntestgroupfilecode\"] = testFileItem.ntestgroupfilecode\r\n                        }\r\n                        if (editObject.nmethodcode !== -1) {\r\n                            selectedRecord[\"nmethodcode\"] = {\r\n                                \"label\": editObject.smethodname,\r\n                                \"value\": editObject.nmethodcode\r\n                            }\r\n                        } else {\r\n                            selectedRecord[\"nmethodcode\"] = undefined;\r\n                        }\r\n                        if (editObject.ninstrumentcatcode !== -1) {\r\n                            selectedRecord[\"ninstrumentcatcode\"] = {\r\n                                \"label\": editObject.sinstrumentcatname,\r\n                                \"value\": editObject.ninstrumentcatcode\r\n                            }\r\n                        } else {\r\n                            selectedRecord[\"ninstrumentcatcode\"] = undefined;\r\n                        }\r\n                        if (editObject.ncontainertypecode !== -1) {\r\n                            selectedRecord[\"ncontainertypecode\"] = {\r\n                                \"label\": editObject.scontainertype,\r\n                                \"value\": editObject.ncontainertypecode\r\n                            }\r\n                        } else {\r\n                            selectedRecord[\"ncontainertypecode\"] = undefined;\r\n                        }\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                masterData: {\r\n                                    ...masterData,\r\n                                    ...response[0].data,\r\n                                    SelectedTest: SelectedTest,\r\n                                    //TestGroupTest : [TestGroupTest]\r\n                                },\r\n                                openModal: true,\r\n                                operation: operation,\r\n                                screenName: \"IDS_EDITTESTGROUPTEST\",\r\n                                testGroupInputData: {\r\n                                    // source: constructOptionList(response[1].data || [], \"nsourcecode\", \"ssourcename\", false, false, true).get(\"OptionList\"),\r\n                                    section: constructOptionList(response[2].data || [], \"nsectioncode\", \"ssectionname\", false, false, true).get(\"OptionList\"),\r\n                                    method: constructOptionList(response[3].data || [], \"nmethodcode\", \"smethodname\", false, false, true).get(\"OptionList\"),\r\n                                    instrumentCategory: constructOptionList(response[4].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", false, false, true).get(\"OptionList\"),\r\n                                    containerType: constructOptionList(response[6].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true).get(\"OptionList\"),\r\n                                    testFile: constructOptionList(response[5].data || [], \"ntestfilecode\", \"sfilename\", false, false, true).get(\"OptionList\")\r\n                                },\r\n                                selectedRecord,\r\n                                ncontrolCode\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(\"errror:\", error);\r\n                        if (error.response.status === 409 || error.response.status === 417) {\r\n                            toast.warn(error.response.data);\r\n                        } else {\r\n                            toast.error(error.message)\r\n                        }\r\n                    });\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                }));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const editTestGroupParameter = (operation, selectedParameter, userInfo, ncontrolCode, selectedSpecification, filterData, masterData) => {\r\n    return dispatch => {\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT ||\r\n                selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                dispatch(initRequest(true));\r\n                const urlArray = [\r\n                    rsapi.post(\"/testgroup/getActiveParameterById\", {\r\n                        userinfo: userInfo,\r\n                        testgrouptestparameter: selectedParameter,\r\n                        ntreeversiontempcode: filterData.ntreeversiontempcode.value\r\n                    }),\r\n                    rsapi.post(\"/parametertype/getParameterType\", {\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"unit/getUnit\", {\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"grade/getGrade\", {\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"checklist/getApprovedChecklist\", {\r\n                        \"userinfo\": userInfo\r\n                    })\r\n                ]\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        const parameterObject = response[0].data.TestGroupTestParameter[0];\r\n                        const predefinedObject = response[0].data.TestGroupTestPredefinedParameter;\r\n                        const characterObject = response[0].data.TestGroupTestCharParameter;\r\n                        const numericObject = response[0].data.TestGroupTestNumericParameter && response[0].data.TestGroupTestNumericParameter.length > 0 ? response[0].data.TestGroupTestNumericParameter[0] : {};\r\n                        const selectedRecord = {\r\n                            ...parameterObject,\r\n                            nunitcode: {\r\n                                \"label\": parameterObject.sunitname,\r\n                                \"value\": parameterObject.nunitcode\r\n                            },\r\n                            nparametertypecode: {\r\n                                \"label\": parameterObject.sdisplaystatus,\r\n                                \"value\": parameterObject.nparametertypecode\r\n                            },\r\n                            parameterTypeCode: parameterObject.nparametertypecode,\r\n                            nchecklistversioncode: {\r\n                                \"label\": parameterObject.schecklistname,\r\n                                \"value\": parameterObject.nchecklistversioncode\r\n                            },\r\n                            schecklistversionname: parameterObject.schecklistversionname,\r\n                            ntestformulacode: parameterObject.ntestformulacode > 0 ? {\r\n                                \"label\": parameterObject.sformulacalculationdetail,\r\n                                \"value\": parameterObject.ntestformulacode,\r\n                                item: {\r\n                                    sformulacalculationdetail: parameterObject.sformulacalculationdetail,\r\n                                    ntestformulacode: parameterObject.ntestformulacode,\r\n                                    sformulacalculationcode: parameterObject.sformulacalculationcode\r\n                                }\r\n                            } : \"\"\r\n                        };\r\n                        if (selectedRecord[\"schecklistname\"] === \"NA\") {\r\n                            delete selectedRecord[\"nchecklistversioncode\"]\r\n                        }\r\n                        if (selectedRecord[\"schecklistversionname\"] === \"NA\") {\r\n                            delete selectedRecord[\"schecklistversionname\"]\r\n                        }\r\n                        if (selectedRecord[\"sunitname\"] === \"NA\") {\r\n                            delete selectedRecord[\"nunitcode\"]\r\n                        }\r\n                        if (characterObject) {\r\n                            selectedRecord[\"scharname\"] = characterObject.scharname;\r\n                            selectedRecord[\"ntestgrouptestcharcode\"] = characterObject.ntestgrouptestcharcode;\r\n                        }\r\n                        if (predefinedObject) {\r\n                            selectedRecord[\"ntestgrouptestpredefcode\"] = predefinedObject.ntestgrouptestpredefcode;\r\n                            selectedRecord[\"spredefinedname\"] = predefinedObject.spredefinedname;\r\n                            selectedRecord[\"ndefaultstatus\"] = predefinedObject.ndefaultstatus;\r\n                            selectedRecord[\"ngradecode\"] = {\r\n                                \"label\": predefinedObject.sdisplaystatus,\r\n                                \"value\": predefinedObject.ngradecode\r\n                            };\r\n                        }\r\n                        if (numericObject) {\r\n                            selectedRecord[\"ntestgrouptestnumericcode\"] = numericObject.ntestgrouptestnumericcode;\r\n                            selectedRecord[\"sminlod\"] = numericObject.sminlod;\r\n                            selectedRecord[\"smaxlod\"] = numericObject.smaxlod;\r\n                            selectedRecord[\"sminb\"] = numericObject.sminb;\r\n                            selectedRecord[\"smina\"] = numericObject.smina;\r\n                            selectedRecord[\"smaxa\"] = numericObject.smaxa;\r\n                            selectedRecord[\"smaxb\"] = numericObject.smaxb;\r\n                            selectedRecord[\"sminloq\"] = numericObject.sminloq;\r\n                            selectedRecord[\"smaxloq\"] = numericObject.smaxloq;\r\n                            selectedRecord[\"sdisregard\"] = numericObject.sdisregard;\r\n                            selectedRecord[\"sresultvalue\"] = numericObject.sresultvalue;\r\n                        }\r\n                        const gradeMap = constructOptionList(response[3].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                        const unitMap = constructOptionList(response[2].data || [], \"nunitcode\", \"sunitname\", false, false, true);\r\n                        const grade = gradeMap.get(\"OptionList\");\r\n                        const unit = unitMap.get(\"OptionList\");\r\n                        const disabled = parameterObject.nparametertypecode === parameterType.NUMERIC ? false : true;\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                openChildModal: true,\r\n                                operation: operation,\r\n                                screenName: \"IDS_PARAMETER\",\r\n                                testGroupInputData: {\r\n                                    unit,\r\n                                    grade,\r\n                                    testFormula: constructOptionList(response[0].data.TestFormula || [], \"ntestformulacode\", \"sformulacalculationdetail\", false, false, true).get(\"OptionList\"),\r\n                                    parameterType: constructOptionList(response[1].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true).get(\"OptionList\"),\r\n                                    checkListVersion: constructOptionList(response[4].data || [], \"nchecklistversioncode\", \"schecklistname\", false, false, true).get(\"OptionList\"),\r\n                                    needRoundingDigit: disabled,\r\n                                    needUnit: disabled\r\n                                },\r\n                                parameterData: {\r\n                                    grade\r\n                                },\r\n                                selectedRecord,\r\n                                ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        });\r\n                        if (error.response.status === 409 || error.response.status === 417) {\r\n                            toast.warn(error.response.data);\r\n                        } else {\r\n                            toast.error(error.message);\r\n                        }\r\n                    });\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                }));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// export const addTestGroupFormula = (selectedParameter, userInfo, ncontrolCode, optionalData) => {\r\n//     return dispatch => {\r\n//         const testgroupspecification = optionalData.testgroupspecification;\r\n//         if(testgroupspecification.napprovalstatus === transactionStatus.DRAFT || \r\n//             testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n//             dispatch(initRequest(true));\r\n//             rsapi.post(\"/testgroup/getTestGroupFormula\", {userinfo: userInfo, testgrouptestparameter: selectedParameter, testgroupspecification})\r\n//             .then(response=>{\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, \r\n//                     payload:{\r\n//                         openChildModal: true,\r\n//                         operation: \"create\",\r\n//                         screenName: \"IDS_FORMULA\",\r\n//                         testGroupInputData: {testFormula: response.data},\r\n//                         selectedRecord: {},\r\n//                         ncontrolCode\r\n//                 }});\r\n//             })\r\n//             .catch(error=>{\r\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}});\r\n//                 if(error.response.status === 409 || error.response.status === 417) {\r\n//                     toast.warn(error.response.data);\r\n//                 } else {\r\n//                     toast.error(error.message)\r\n//                 }\r\n//             });\r\n//         } else {\r\n//             toast.warn(intl.formatMessage({id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"}));\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport const getTestGroupParameter = (inputParam) => {\r\n    return (dispatch) => {\r\n        rsapi.post(\"/testgroup/getTestGroupTestParameter\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                sortData(response.data);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getComponentBySpecId = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgroup/\" + inputParam.operation + inputParam.methodUrl, {\r\n            [inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0],\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                sortData(response.data);\r\n                if (searchRef.current) {\r\n                    searchRef.current.value = \"\";\r\n                }\r\n                const historyDataState = {\r\n                    ...inputParam.historyDataState,\r\n                    sort: undefined,\r\n                    filter: undefined\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            searchedData: undefined\r\n                        },\r\n                        historyDataState,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getTestGroupDetails = (inputParam) => {\r\n    return (dispatch) => { //...inputParam, \r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgroup/getTestGroupTest\", {\r\n            ntestgrouptestcode: parseInt(inputParam['ntestgrouptestcode']),\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            // rsapi.post(\"/testgroup/\"+inputParam.operation+inputParam.methodUrl, \r\n            //     {[inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0], userinfo: inputParam.userInfo})\r\n            .then(response => {\r\n                sortData(response.data);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        },\r\n                        testskip: undefined,\r\n                        loading:false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getTestGroupComponentDetails = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => { //...inputParam, \r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgroup/getTestByComponentId\", {\r\n            testgroupspecsampletype: inputParam['testgroupspecsampletype'],\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            // rsapi.post(\"/testgroup/\"+inputParam.operation+inputParam.methodUrl, \r\n            //     {[inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0], userinfo: inputParam.userInfo})\r\n            .then(response => {\r\n                sortData(response.data);\r\n                if (searchRef.current)\r\n                    searchRef.current.value = \"\";\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            searchedData: undefined\r\n                        },\r\n                        testskip: 0,\r\n                        testtake: 5,\r\n                        loading:false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getSpecification = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => {\r\n        if (inputParam.selectedRecord !== null) {\r\n            rsapi.post(\"/testgroup/\" + inputParam.operation + inputParam.methodUrl, {\r\n                ...inputParam,\r\n                [inputParam.keyName]: inputParam.selectedRecord\r\n            })\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    if (searchRef.current)\r\n                        searchRef.current.value = \"\";\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                ActiveKey: inputParam.activeKey,\r\n                                FocusKey: inputParam.focusKey,\r\n                                primaryKey: inputParam.primaryKey,\r\n                                ...response.data,\r\n                                selectedNode: inputParam.selectedRecord,\r\n                                searchedData: undefined,\r\n\r\n                            },\r\n                            historyDataState: {\r\n                                ...inputParam.historyDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData: {\r\n                        ...masterData,\r\n                        selectedNode: inputParam.selectedRecord,\r\n                        TestGroupSpecification: [],\r\n                        SelectedSpecification: {},\r\n                        TestGroupTest: [],\r\n                        TestGroupTestParameter: [],\r\n                        TestGroupTestNumericParameter: [],\r\n                        TestGroupTestFormula: [],\r\n                        TestGroupTestPredefinedParameter: [],\r\n                        TestGroupTestClinicalSpec: [],\r\n                        TestGroupTestCharParameter: [],\r\n                        ActiveKey: inputParam.activeKey,\r\n                        FocusKey: inputParam.focusKey,\r\n                        SelectedTest: {},\r\n                        selectedParameter: {},\r\n                        TestGroupSpecFile: [],\r\n                        TestGroupSpecificationHistory: [],\r\n                        SelectedComponent: undefined\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const changeTestCategory = (inputParam, testGroupInputData) => {\r\n    return (dispatch) => {\r\n        rsapi.post(\"/testgroup/getTestMasterByCategory\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                sortData(response.data);\r\n                inputParam.selectedRecord.ntestcode = [];\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord: inputParam.selectedRecord,\r\n                        testGroupInputData: {\r\n                            ...testGroupInputData,\r\n                            ...response.data\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getSpecificationDetails = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => {\r\n        rsapi.post(\"/testgroup/get\" + inputParam.methodUrl, {\r\n            ...inputParam.inputData\r\n        })\r\n            .then(response => {\r\n                if (searchRef.current)\r\n                    searchRef.current.value = \"\";\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            searchedData: undefined\r\n                        },\r\n                        screenName: inputParam.screenName\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const editSpecFile = (inputParam) => {\r\n    return (dispatch) => {\r\n        const masterData = inputParam.masterData;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            if (inputParam.testgroupspecification.napprovalstatus === transactionStatus.DRAFT ||\r\n                inputParam.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\r\n                    userinfo: inputParam.userInfo\r\n                }),\r\n                rsapi.post(\"/testgroup/getActiveSpecFileById\", {\r\n                    userinfo: inputParam.userInfo,\r\n                    testgroupspecfile: inputParam.selectedRecord,\r\n                    ntreeversiontempcode: inputParam.filterData.ntreeversiontempcode.value\r\n                })\r\n                ]\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        const linkmaster = response[0].data.LinkMaster;\r\n                        const defaultLink = linkmaster.filter(item => item.ndefaultlink === transactionStatus.YES);\r\n                        const editObject = response[1].data;\r\n                        let nlinkcode = {};\r\n                        let link = {};\r\n                        if (editObject.nattachmenttypecode === attachmentType.LINK) {\r\n                            nlinkcode = {\r\n                                \"label\": editObject.slinkname,\r\n                                \"value\": editObject.nlinkcode\r\n                            }\r\n                            link = {\r\n                                slinkfilename: editObject.sfilename,\r\n                                slinkdescription: editObject.sdescription,\r\n                                nlinkdefaultstatus: editObject.ndefaultstatus,\r\n                                sfilesize: '',\r\n                                nfilesize: 0,\r\n                                ndefaultstatus: 4,\r\n                                sfilename: '',\r\n                            }\r\n\r\n                        } else {\r\n                            nlinkcode = defaultLink.length > 0 ? {\r\n                                \"label\": defaultLink[0].slinkname,\r\n                                \"value\": defaultLink[0].nlinkcode\r\n                            } : \"\"\r\n\r\n                            link = {\r\n                                slinkfilename: '',\r\n                                slinkdescription: '',\r\n                                sdescription: editObject.sdescription,\r\n                                nlinkdefaultstatus: 4,\r\n                                sfilesize: editObject.sfilesize,\r\n                                nfilesize: editObject.nfilesize,\r\n                                ndefaultstatus: editObject.ndefaultstatus,\r\n                                sfilename: editObject.sfilename,\r\n                            }\r\n                        }\r\n                        const selectedRecord = {\r\n                            // ...editObject,\r\n                            ...link,\r\n                            nallotedspeccode: editObject.nallotedspeccode,\r\n                            nspecfilecode: editObject.nspecfilecode,\r\n                            stypename: editObject.stypename,\r\n                            nattachmenttypecode: editObject.nattachmenttypecode,\r\n                            nlinkcode,\r\n                            // disabled: true\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                openModal: true,\r\n                                operation: \"update\",\r\n                                screenName: \"IDS_SPECFILE\",\r\n                                editFiles: Object.values(editObject).length > 0 && editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {},\r\n                                selectedRecord,\r\n                                ncontrolCode: inputParam.ncontrolCode\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        if (error.response.status === 409 || error.response.status === 417) {\r\n                            toast.warn(error.response.data);\r\n                        } else {\r\n                            toast.error(error.message)\r\n                        }\r\n                    });\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                }));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const addTestGroupCodedResult = (operation, paramdata, userInfo, ncontrolCode, optionalData, masterData) => {\r\n    return (dispatch) => {\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            const testgroupspecification = optionalData.testgroupspecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT ||\r\n                testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                dispatch(initRequest(true));\r\n                const urlArray = [\r\n                    rsapi.post(\"grade/getGrade\", {\r\n                        \"userinfo\": userInfo\r\n                    })\r\n                ];\r\n                if (operation === \"update\") {\r\n                    urlArray.push(rsapi.post(\"testgroup/getActivePredefinedParameterById\", {\r\n                        testgrouptestpredefinedparameter: paramdata,\r\n                        \"userinfo\": userInfo,\r\n                        testgroupspecification\r\n                    }));\r\n                }\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        let selectedRecord = {};\r\n                        const gradeMap = constructOptionList(response[0].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                        const grade = gradeMap.get(\"OptionList\");\r\n                        if (operation === \"update\") {\r\n                            const editCodedResult = response[1].data;\r\n                            selectedRecord = {\r\n                                ntestgrouptestpredefcode: paramdata[\"ntestgrouptestpredefcode\"],\r\n                                ntestgrouptestparametercode: paramdata[\"ntestgrouptestparametercode\"],\r\n                                ngradecode: {\r\n                                    \"label\": editCodedResult[\"sdisplaystatus\"],\r\n                                    \"value\": editCodedResult[\"ngradecode\"]\r\n                                },\r\n                                spredefinedname: editCodedResult[\"spredefinedname\"]\r\n                            }\r\n                        } else {\r\n                            selectedRecord = {\r\n                                ngradecode: gradeMap.get(\"DefaultValue\")\r\n                                // {\r\n                                //     \"value\": grade[0].ngradecode,\r\n                                //     \"label\": grade[0][\"sdisplaystatus\"]\r\n                                // }\r\n                            }\r\n                        }\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                openChildModal: true,\r\n                                showSaveContinue: false,\r\n                                operation: operation,\r\n                                screenName: \"IDS_CODEDRESULT\",\r\n                                parameterData: {\r\n                                    grade,\r\n                                    needCodedResult: false\r\n                                },\r\n                                selectedRecord,\r\n                                ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        });\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    });\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                }));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const addTestGroupNumericTab = (operation, paramdata, userInfo, optionalData, masterData, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n      \r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED){\r\n            toast.warn(intl.formatMessage({id: \"IDS_SELECTEDTEMPLATEISRETIRED\"}));\r\n        }\r\n        else\r\n        {\r\n            const testgroupspecification = optionalData.testgroupspecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT ||\r\n                testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                dispatch(initRequest(true));\r\n                const urlArray = [\r\n                    rsapi.post(\"patient/getGender\", {\r\n                        \"userinfo\": userInfo\r\n                    })\r\n                ];\r\n                if (operation === \"update\") {\r\n                    urlArray.push(rsapi.post(\"testgroup/getActiveClinicalSpecById\", {\r\n                        testgrouptestpredefinedparameter: paramdata,\r\n                        \"userinfo\": userInfo,\r\n                        testgroupspecification\r\n                    }));\r\n                }\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        let selectedRecord = {};\r\n                        const gradeMap = constructOptionList(response[0].data.genderList || [], \"ngendercode\", \"sgendername\", false, false, true);\r\n                        const grade = gradeMap.get(\"OptionList\");\r\n                        if (operation === \"update\") {\r\n                            const editCodedResult = response[1].data;\r\n                            selectedRecord = {\r\n                                ntestgrouptestclinicspeccode: paramdata[\"ntestgrouptestclinicspeccode\"],\r\n                                ntestgrouptestparametercode: paramdata[\"ntestgrouptestparametercode\"],\r\n                                nfromage: paramdata[\"nfromage\"],\r\n                                ntoage: paramdata[\"ntoage\"],\r\n                                ngendercode: {\r\n                                    \"label\": editCodedResult[\"sgendername\"],\r\n                                    \"value\": editCodedResult[\"ngendercode\"]\r\n                                },\r\n                                nhigha: editCodedResult[\"shigha\"],\r\n                                nhighb: editCodedResult[\"shighb\"],\r\n                                nlowa: editCodedResult[\"slowa\"],\r\n                                nlowb: editCodedResult[\"slowb\"]\r\n                            }\r\n                        } else {\r\n                            selectedRecord = {\r\n                                ngendercode: gradeMap.get(\"DefaultValue\")\r\n                                // {\r\n                                //     \"value\": grade[0].ngradecode,\r\n                                //     \"label\": grade[0][\"sdisplaystatus\"]\r\n                                // }\r\n                            }\r\n                        }\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                openChildModal: true,\r\n                                showSaveContinue: false,\r\n                                operation: operation,\r\n                                screenName: \"IDS_CLINICALSPEC\",\r\n                                parameterData: {\r\n                                    grade,\r\n                                    needCodedResult: false\r\n                                },\r\n                                selectedRecord,\r\n                                ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        });\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    });\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                }));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const viewTestGroupCheckList = (inputParam, userInfo) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"checklist/viewTemplate\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openTemplateModal: true,\r\n                        testGroupCheckList: {\r\n                            templateData: response.data\r\n                        },\r\n                        loading: false,\r\n                        selectedRecord: {}\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport const reportSpecification = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testgroup/specReportGenerate\", {\r\n            ...inputParam,\r\n            ntreeversiontempcode: inputParam.filterData.ntreeversiontempcode.value\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showConfirmAlert: false\r\n                    }\r\n                })\r\n                document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                document.getElementById(\"download_data\").click();\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const retireSpecification = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testgroup/retireSpec\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n\r\n                // const TestGroupSpecification = response.data.TestGroupSpecificationHistory ;\r\n                sortData(response.data);\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport const getDataForTestMaterial = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const materialTypeUrl = rsapi.post(\"materialcategory/getMaterialType\", { \"userinfo\": userInfo });\r\n        const validationUrl = rsapi.post(\"testgroup/validationForRetiredTemplate\", { \"userinfo\": userInfo ,ntreeversiontempcode:masterData.selectedNode.ntreeversiontempcode});\r\n\r\n        urlArray = [materialTypeUrl,validationUrl];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (masterData.SelectedTest&&masterData.SelectedTest!==undefined) {\r\n\r\n                    if (response[1].data === \"Success\") {\r\n\r\n                        const materialTypeMap = constructOptionList(response[0].data || [], \"nmaterialtypecode\",\r\n                            \"smaterialtypename\", undefined, undefined, false);\r\n\r\n                        const materialType = materialTypeMap.get(\"OptionList\");\r\n                        const materialTypedefault = materialTypeMap.get(\"DefaultValue\");\r\n\r\n                        selectedRecord[\"nmaterialtypecode\"] = materialTypedefault;\r\n                        if (selectedRecord[\"nmaterialtypecode\"] !== undefined) {\r\n                            let inputData = []\r\n                            let inputParam = { operation: operation, selectedRecord: selectedRecord, materialType: materialType, inputData: { nmaterialtypecode: materialTypedefault.value }, materialType: materialType, masterData: masterData, screenName: screenName }\r\n                            dispatch(getMaterialCategoryBasedMaterialType(inputParam));\r\n\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    materialType: materialType,\r\n                                    materialList: undefined,\r\n                                    materialCategoryList: undefined,\r\n                                    isOpen: true,\r\n                                    operation: operation,\r\n                                    screenName: screenName,\r\n                                    openChildModal: true,\r\n                                    ncontrolCode: ncontrolCode,\r\n                                    loading: false,\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: response[1].data\r\n                        }));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: { \r\n                                operation: operation,\r\n                                screenName: screenName,\r\n                                ncontrolCode: ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                }\r\n                else {\r\n                \r\n                    toast.warn(intl.formatMessage({\r\n                        id: \"IDS_NEEDTOADDTEST\"\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: { \r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getMaterialCategoryBasedMaterialType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"material/getMaterialcombo\", { nmaterialtypecode: inputParam.inputData.nmaterialtypecode })\r\n            .then(response => {\r\n                let selectedRecord = {}\r\n                selectedRecord = inputParam.selectedRecord\r\n\r\n                const materialCategoryMap = constructOptionList(response.data.MaterialCategoryMain || [], \"nmaterialcatcode\",\r\n                    \"smaterialcatname\", undefined, undefined, false);\r\n\r\n                const materialCategoryList = materialCategoryMap.get(\"OptionList\");\r\n                const materialCategorydefault = materialCategoryMap.get(\"DefaultValue\");\r\n               selectedRecord['nmaterialcatcode'] = materialCategorydefault;\r\n                let masterData = { ...inputParam.masterData, ...response.data }\r\n                if (response.data.MaterialCategoryMain.length === 0) {\r\n                    if (selectedRecord['nmaterialcatcode']) {\r\n                        delete selectedRecord['nmaterialcatcode']\r\n\r\n                    }\r\n                    if (selectedRecord['nmaterialcode']) {\r\n                        delete selectedRecord['nmaterialcode']\r\n\r\n                    }\r\n                }\r\n                let materialList = []\r\n                if (materialCategoryList.length !== 0) {\r\n                    materialList = materialList\r\n                    inputParam = { ...inputParam, responsecat: response, materialCategoryList: materialCategoryList, selectedRecord: selectedRecord, \r\n                        inputData: { \r\n                            //nmaterialcatcode: materialCategorydefault.value,\r\n                        nmaterialtypecode:inputParam.inputData.nmaterialtypecode }\r\n}\r\n                    dispatch(getMaterialBasedMaterialCategory(inputParam));\r\n                }\r\n\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openChildModal: true,\r\n                            screenName: inputParam.screenName,\r\n                            masterData, loading: false,\r\n                            materialCategoryList: materialCategoryList,\r\n                            materialType:inputParam.materialType,\r\n                            materialList: materialList,\r\n                            selectedRecord: selectedRecord,\r\n                            operation:inputParam.operation\r\n                        }\r\n                    });\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getMaterialBasedMaterialCategory(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"testgroup/getAvailableMaterial\", {\r\n            nmaterialtypecode: inputParam.inputData.nmaterialtypecode, nmaterialcatcode: inputParam.inputData.nmaterialcatcode !== undefined\r\n                ? inputParam.inputData.nmaterialcatcode : inputParam.responsecat.data.MaterialCategoryMain[0].nmaterialcatcode,\r\n            ntestgrouptestcode:inputParam.masterData.SelectedTest.ntestgrouptestcode\r\n        })\r\n            .then(response => {\r\n\r\n                let selectedRecord = inputParam.selectedRecord;\r\n\r\n                const materialMap = constructjsonOptionList(response.data.MaterialCombo || [], \"nmaterialcode\",\r\n                    \"Material Name\", undefined, undefined, false);\r\n\r\n                const materialList = materialMap.get(\"OptionList\");\r\n                \r\n                if (response.data.MaterialCombo.length === 0) {\r\n                    delete selectedRecord['nmaterialcode']\r\n                }\r\n                let masterData = { ...inputParam.masterData, ...response.data }\r\n                if (inputParam.materialCategoryList) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            materialCategoryList: inputParam.materialCategoryList,\r\n                            masterData, loading: false,\r\n                            materialList: materialList,\r\n                            openChildModal: true,\r\n                            screenName: inputParam.screenName,\r\n                            selectedRecord: inputParam.selectedRecord,\r\n                            materialType: inputParam.materialType,\r\n                            operation:inputParam.operation\r\n\r\n\r\n\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData, loading: false,\r\n                            materialList: materialList,\r\n                            openChildModal: true,\r\n\r\n\r\n                        }\r\n                    });\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const getTestGroupMaterial = (inputParam) => {\r\n    return (dispatch) => {\r\n        rsapi.post(\"/testgroup/getTestGroupTestMaterial\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                sortData(response.data);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport const getDataForEditTestMaterial = (screenName, operation, userInfo, ncontrolCode, selectedRecord, Data, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const materialTypeUrl = rsapi.post(\"materialcategory/getMaterialType\", { \"userinfo\": userInfo });\r\n        const materialCatUrl = rsapi.post(\"material/getMaterialcombo\", { nmaterialtypecode: Data.selectedMaterial.nmaterialtypecode });\r\n        const materialUrl = rsapi.post(\"materialinventory/getMaterialInventorycombo\", { nmaterialcatcode: Data.selectedMaterial.nmaterialcatcode, nmaterialtypecode: Data.selectedMaterial.nmaterialtypecode });\r\n        const materialById = rsapi.post(\"testgroup/getActiveTestMaterialById\", {\r\n            [primaryKeyName]: Data.selectedMaterial.ntestgrouptestmaterialcode, \"userinfo\": userInfo\r\n        });\r\n        const validationUrl = rsapi.post(\"testgroup/validationForRetiredTemplate\", { \"userinfo\": userInfo ,ntreeversiontempcode:Data.selectedNode.ntreeversiontempcode});\r\n\r\n        urlArray = [materialTypeUrl, materialCatUrl, materialUrl, materialById,validationUrl];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (response[4].data === \"Success\") {\r\n\r\n                let selectedRecord = {};\r\n                let MaterialCategoryData = [];\r\n                let MaterialTypeData = [];\r\n                let MaterialData = [];\r\n\r\n                const materialTypeMap = constructOptionList(response[0].data || [], \"nmaterialtypecode\",\r\n                    \"smaterialtypename\", undefined, undefined, false);\r\n\r\n                const materialType = materialTypeMap.get(\"OptionList\");\r\n\r\n                const materialCategoryMap = constructOptionList(response[1].data.MaterialCategoryMain || [], \"nmaterialcatcode\",\r\n                    \"smaterialcatname\", undefined, undefined, false);\r\n\r\n                const materialCategoryList = materialCategoryMap.get(\"OptionList\");\r\n                const materialMap = constructjsonOptionList(response[2].data.MaterialCombo || [], \"nmaterialcode\",\r\n                    \"Material Name\", undefined, undefined, false);\r\n\r\n                const materialList = materialMap.get(\"OptionList\");\r\n\r\n                MaterialCategoryData.push({\r\n                    \"value\": response[3].data[\"nmaterialcatcode\"],\r\n                    \"label\": response[3].data[\"smaterialcatname\"]\r\n                });\r\n                MaterialTypeData.push({\r\n                    \"value\": response[3].data[\"nmaterialtypecode\"],\r\n                    \"label\": response[3].data[\"smaterialtypename\"]\r\n                });\r\n                MaterialData.push({\r\n                    \"value\": response[3].data[\"nmaterialcode\"],\r\n                    \"label\": response[3].data[\"smaterialname\"]\r\n                });\r\n\r\n                selectedRecord = response[3].data;\r\n                selectedRecord[\"nmaterialcatcode\"] = MaterialCategoryData[0];\r\n                selectedRecord[\"nmaterialtypecode\"] = MaterialTypeData[0];\r\n                selectedRecord[\"nmaterialcode\"] = MaterialData[0];\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        materialType: materialType,\r\n                        materialList: materialList,\r\n                        materialCategoryList: materialCategoryList,\r\n                        selectedRecord: selectedRecord,\r\n                        isOpen: true,\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        openChildModal: true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        loading: false,\r\n                    }\r\n                });\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: response[4].data\r\n                }));\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: { \r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        ncontrolCode: ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}