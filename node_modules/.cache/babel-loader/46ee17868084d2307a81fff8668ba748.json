{"ast":null,"code":"import _defineProperty from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{getComboLabelValue,constructOptionList}from'../components/CommonScript';import{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';import{intl}from'../components/App';export function getModuleSortingComboService(methodParam){return function(dispatch){var methodTypeService=rsapi.post(\"modulesorting/getModuleSorting\",{userinfo:methodParam.userInfo});var urlArray=[];var selectedId=null;if(methodParam.operation===\"create\"){urlArray=[methodTypeService];}else{var _rsapi$post;var url=methodParam.inputParam.classUrl+\"/getActive\"+methodParam.inputParam.methodUrl+\"ById\";//\"method/getActiveMethodById\"      \nvar methodById=rsapi.post(url,(_rsapi$post={},_defineProperty(_rsapi$post,methodParam.primaryKeyField,methodParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",methodParam.userInfo),_rsapi$post));urlArray=[methodTypeService,methodById];selectedId=methodParam.primaryKeyValue;}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord={};var menuMap=constructOptionList(response[0].data.moduleList||[],\"nmenucode\",\"smenuname\",undefined,undefined,false);var formMap=constructOptionList(response[0].data||[],\"nformcode\",\"sformname\",undefined,undefined,false);var moduleMap=constructOptionList(response[1].data.moduleList||[],\"nmodulecode\",\"smoduledisplayname\",undefined,undefined,false);var menuMapList=menuMap.get(\"OptionList\");var formMapList=formMap.get(\"OptionList\");var moduleMapList=moduleMap.get(\"OptionList\");if(methodParam.operation===\"update\"){selectedRecord=response[1].data.selectedForms;selectedRecord[\"nmodulecode\"]=getComboLabelValue(selectedRecord[0],response[0].data,\"nmodulecode\",\"smoduledisplayname\");selectedRecord[\"nformcode\"]=getComboLabelValue(selectedRecord[0],response[0].data,\"nformcode\",\"sformdisplayname\");selectedRecord[\"nmenucode\"]=getComboLabelValue(selectedRecord[0],response[0].data,\"nmenucode\",\"smenuname\");};dispatch({type:DEFAULT_RETURN,payload:{moduleSortingData:response[0].data||[],formMapList:formMapList,moduleMapList:moduleMapList,menuMapList:menuMapList,operation:methodParam.operation,screenName:methodParam.screenName,selectedRecord:selectedRecord,openModal:true,ncontrolCode:methodParam.ncontrolCode,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});};}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/actions/ModuleSortingAction.js"],"names":["rsapi","DEFAULT_RETURN","getComboLabelValue","constructOptionList","toast","Axios","initRequest","intl","getModuleSortingComboService","methodParam","dispatch","methodTypeService","post","userinfo","userInfo","urlArray","selectedId","operation","url","inputParam","classUrl","methodUrl","methodById","primaryKeyField","primaryKeyValue","all","then","response","selectedRecord","menuMap","data","moduleList","undefined","formMap","moduleMap","menuMapList","get","formMapList","moduleMapList","selectedForms","type","payload","moduleSortingData","screenName","openModal","ncontrolCode","loading","catch","error","status","formatMessage","id","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {getComboLabelValue,constructOptionList} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\n    export function getModuleSortingComboService (methodParam) {            \r\n    return function (dispatch) {   \r\n    const methodTypeService = rsapi.post(\"modulesorting/getModuleSorting\", \r\n                                    {userinfo:methodParam.userInfo});\r\n    let urlArray = [];\r\n    let selectedId = null;\r\n   \r\n    if (methodParam.operation === \"create\"){\r\n        urlArray = [methodTypeService];\r\n       \r\n    }\r\n    else{           \r\n        const url = methodParam.inputParam.classUrl+ \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\";   //\"method/getActiveMethodById\"      \r\n        const methodById =  rsapi.post(url, { [methodParam.primaryKeyField] :methodParam.primaryKeyValue, \"userinfo\": methodParam.userInfo} );\r\n        urlArray = [methodTypeService, methodById];\r\n        selectedId = methodParam.primaryKeyValue;\r\n    }\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response=>{                  \r\n           \r\n            let selectedRecord =  {};\r\n            const menuMap = constructOptionList(response[0].data.moduleList || [], \"nmenucode\",\r\n                                  \"smenuname\", undefined, undefined, false);\r\n            const formMap = constructOptionList(response[0].data || [], \"nformcode\",\r\n                                  \"sformname\", undefined, undefined, false);\r\n            const moduleMap = constructOptionList(response[1].data.moduleList|| [], \"nmodulecode\",\r\n                                  \"smoduledisplayname\", undefined, undefined, false);\r\n            const  menuMapList = menuMap.get(\"OptionList\");\r\n            const  formMapList = formMap.get(\"OptionList\");\r\n            const  moduleMapList = moduleMap.get(\"OptionList\");\r\n\r\n\r\n            if (methodParam.operation === \"update\"){\r\n                selectedRecord = response[1].data.selectedForms;\r\n                selectedRecord[\"nmodulecode\"] = getComboLabelValue(selectedRecord[0], response[0].data, \r\n                    \"nmodulecode\", \"smoduledisplayname\"); \r\n                selectedRecord[\"nformcode\"] = getComboLabelValue(selectedRecord[0], response[0].data, \r\n                    \"nformcode\", \"sformdisplayname\");   \r\n                selectedRecord[\"nmenucode\"] = getComboLabelValue(selectedRecord[0], response[0].data, \r\n                    \"nmenucode\", \"smenuname\");    \r\n                              \r\n            };               \r\n            dispatch({type: DEFAULT_RETURN, payload:{moduleSortingData:response[0].data || [],   \r\n                formMapList,   \r\n                moduleMapList,\r\n                menuMapList,                    \r\n                operation:methodParam.operation, screenName:methodParam.screenName, selectedRecord, \r\n                openModal : true,\r\n                ncontrolCode:methodParam.ncontrolCode,\r\n                loading:false,selectedId\r\n            }});\r\n      \r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(intl.formatMessage({id: error.message}));\r\n            } \r\n            else{               \r\n                toast.warn(intl.formatMessage({id: error.response.data}));\r\n            }  \r\n        })        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}