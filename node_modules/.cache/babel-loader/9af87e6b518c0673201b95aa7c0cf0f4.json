{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\joballocation\\\\AnalystCalenderBasedOnUser.jsx\";\nimport React from \"react\";\nimport { Scheduler, DayView, WeekView, MonthView } from '@progress/kendo-react-scheduler';\n\nclass AnalystCalendarBasedOnUser extends React.Component {\n  constructor(props) {\n    super(props); // this.data1 = []\n\n    this.state = {\n      data: []\n    };\n  }\n\n  render() {\n    console.log('data', this.state.data);\n    const displayDate = new Date(Date.UTC(currentYear, new Date().getMonth(), new Date().getDate()));\n    return /*#__PURE__*/React.createElement(Scheduler, {\n      data: this.state.data,\n      editable: {\n        add: true,\n        remove: true,\n        drag: true,\n        resize: true,\n        select: true,\n        edit: true\n      },\n      defaultDate: displayDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DayView, {\n      numberOfDays: 3,\n      style: {\n        zorder: 25000\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(WeekView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(MonthView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    console.log('alaystCalender2');\n    let data = [];\n\n    if (this.props.userData !== undefined) {\n      if (this.props.userData.length !== this.state.data.length) {\n        for (let i = 0; i < this.props.userData.length; i++) {\n          data.push(this.props.userData[i].jsondata);\n        }\n\n        data = data.map((dataItem, i) => ({\n          start: parseAdjust(dataItem.UserStartDate + \".000z\"),\n          end: parseAdjust(dataItem.UserEndDate + \".000z\"),\n          title: dataItem.Comments,\n          id: dataItem.id ? dataItem.id : i,\n          startTimezone: dataItem.startTimezone,\n          endTimezone: dataItem.endTimezone,\n          isAllDay: dataItem.isAllDay ? dataItem.isAllDay : false,\n          description: dataItem.description ? dataItem.description : \"\",\n          recurrenceRule: dataItem.recurrenceRule,\n          recurrenceId: dataItem.recurrenceID,\n          recurrenceExceptions: dataItem.recurrenceException,\n          TaskId: dataItem.TaskId ? dataItem.TaskId : i\n        })); //     data   = [{ id:  \"1\",\n        //     start: parseAdjust(\"2023-05-08 03:30:00.000\"),\n        //     startTimezone:undefined,\n        //     end: parseAdjust(\"2023-05-08 04:05:00.000\"),\n        //     endTimezone: undefined,\n        //     isAllDay: false,\n        //     title: \"hpcl instrument-001\",\n        //     description: \"\",\n        //     recurrenceRule: undefined,\n        //     recurrenceId: undefined,\n        //     recurrenceExceptions:undefined,\n        //     // roomId: dataItem.roomID,\n        //     // ownerID: dataItem.TaskId,\n        //     // personId: dataItem.TaskId,\n        //   // taskID: 11,\n        //   //  UserID: 3\n        // }]\n\n        this.setState({\n          data: data\n        });\n      }\n    }\n  }\n\n  componentDidMount() {\n    console.log('alaystCalender1');\n    this.setState({\n      data: []\n    });\n  }\n\n}\n\nexport default AnalystCalendarBasedOnUser;\nexport const currentYear = new Date().getFullYear();\nexport const parseAdjust = eventDate => {\n  const date = new Date(eventDate);\n  date.setFullYear(currentYear);\n  return date;\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/joballocation/AnalystCalenderBasedOnUser.jsx"],"names":["React","Scheduler","DayView","WeekView","MonthView","AnalystCalendarBasedOnUser","Component","constructor","props","state","data","render","console","log","displayDate","Date","UTC","currentYear","getMonth","getDate","add","remove","drag","resize","select","edit","zorder","componentDidUpdate","previousProps","userData","undefined","length","i","push","jsondata","map","dataItem","start","parseAdjust","UserStartDate","end","UserEndDate","title","Comments","id","startTimezone","endTimezone","isAllDay","description","recurrenceRule","recurrenceId","recurrenceID","recurrenceExceptions","recurrenceException","TaskId","setState","componentDidMount","getFullYear","eventDate","date","setFullYear"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Scheduler, DayView, WeekView, MonthView } from '@progress/kendo-react-scheduler';\r\n\r\n\r\nclass AnalystCalendarBasedOnUser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n       // this.data1 = []\r\n  \r\n        this.state = {\r\n            data:  [],\r\n        };\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log('data',this.state.data)\r\n        const displayDate = new Date(Date.UTC(currentYear, new Date().getMonth(), new Date().getDate()));\r\n        return (\r\n            <Scheduler data={this.state.data} editable={{\r\n                add: true,\r\n                remove: true,\r\n                drag: true,\r\n                resize: true,\r\n                select: true,\r\n                edit: true\r\n            }} defaultDate={displayDate}>\r\n                <DayView numberOfDays={3} style={{ zorder: 25000 }} />\r\n                <WeekView />\r\n                <MonthView />\r\n\r\n            </Scheduler>\r\n\r\n        )\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        console.log('alaystCalender2')\r\n        let data = [];\r\n        if (this.props.userData !== undefined) {\r\n            if (this.props.userData.length !== this.state.data.length) {\r\n                for (let i = 0; i < this.props.userData.length; i++) {\r\n                    data.push(this.props.userData[i].jsondata);\r\n                }\r\n               \r\n                data = data.map((dataItem,i) => ({\r\n                    start: parseAdjust(dataItem.UserStartDate+\".000z\"),\r\n                    end: parseAdjust(dataItem.UserEndDate+\".000z\"),\r\n                    title: dataItem.Comments,\r\n                  \r\n                    id: dataItem.id?dataItem.id:i,\r\n                    startTimezone: dataItem.startTimezone,\r\n                    endTimezone: dataItem.endTimezone,\r\n                    isAllDay: dataItem.isAllDay?dataItem.isAllDay:false,\r\n                    description: dataItem.description?dataItem.description:\"\",\r\n                    recurrenceRule: dataItem.recurrenceRule,\r\n                    recurrenceId: dataItem.recurrenceID,\r\n                    recurrenceExceptions: dataItem.recurrenceException,\r\n                    TaskId: dataItem.TaskId?dataItem.TaskId:i,\r\n                }))\r\n           \r\n\r\n            //     data   = [{ id:  \"1\",\r\n            //     start: parseAdjust(\"2023-05-08 03:30:00.000\"),\r\n            //     startTimezone:undefined,\r\n            //     end: parseAdjust(\"2023-05-08 04:05:00.000\"),\r\n            //     endTimezone: undefined,\r\n            //     isAllDay: false,\r\n            //     title: \"hpcl instrument-001\",\r\n            //     description: \"\",\r\n            //     recurrenceRule: undefined,\r\n            //     recurrenceId: undefined,\r\n            //     recurrenceExceptions:undefined,\r\n            //     // roomId: dataItem.roomID,\r\n            //     // ownerID: dataItem.TaskId,\r\n            //     // personId: dataItem.TaskId,\r\n            //   // taskID: 11,\r\n            //   //  UserID: 3\r\n            // }]\r\n                this.setState({ data: data });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        console.log('alaystCalender1')\r\n        this.setState({ data: [] });\r\n    }\r\n}\r\n\r\nexport default AnalystCalendarBasedOnUser;\r\nexport const currentYear = new Date().getFullYear();\r\nexport const parseAdjust = eventDate => {\r\n    const date = new Date(eventDate);\r\n    date.setFullYear(currentYear);\r\n    return date;\r\n};"]},"metadata":{},"sourceType":"module"}