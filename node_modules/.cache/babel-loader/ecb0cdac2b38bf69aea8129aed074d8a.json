{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\checklist\\\\checklistqb\\\\ChecklistQB.jsx\";\nimport React from 'react';\nimport { ListWrapper } from '../../../components/client-group.styles';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, showChecklistQBAddScreen, fetchChecklistQBById, updateStore, validateEsignCredential } from '../../../actions';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { showEsign, getControlMap } from '../../../components/CommonScript';\nimport Esign from '../../../pages/audittrail/Esign';\nimport { transactionStatus } from '../../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ChecklistQB extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let selectedId = null;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        selectedId = this.state.selectedRecord.nchecklistqbcode;\n        dataState = this.state.dataState;\n        inputData[\"checklistqb\"] = {\n          \"nchecklistqbcode\": this.state.selectedRecord.nchecklistqbcode ? this.state.selectedRecord.nchecklistqbcode : -1,\n          \"nchecklistqbcategorycode\": this.state.selectedRecord.nchecklistqbcategorycode,\n          \"squestion\": this.state.selectedRecord.squestion,\n          \"nmandatory\": this.state.selectedRecord.nmandatory,\n          //\"ndefaultstatus\":this.state.selectedRecord.ndefaultstatus,\n          \"nchecklistcomponentcode\": this.state.selectedRecord.nchecklistcomponentcode ? this.state.selectedRecord.nchecklistcomponentcode : -1,\n          \"squestiondata\": parseInt(this.state.selectedRecord.nchecklistcomponentcode) === 1 || parseInt(this.state.selectedRecord.nchecklistcomponentcode) === 4 || parseInt(this.state.selectedRecord.nchecklistcomponentcode) === 8 ? this.state.selectedRecord.squestiondata : \"\",\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n      } else {\n        //add               \n        inputData[\"checklistqb\"] = {\n          \"nchecklistqbcategorycode\": this.state.selectedRecord.nchecklistqbcategorycode ? this.state.selectedRecord.nchecklistqbcategorycode : -1,\n          \"squestion\": this.state.selectedRecord.squestion,\n          \"nmandatory\": this.state.selectedRecord.nmandatory,\n          //\"ndefaultstatus\":this.state.selectedRecord.ndefaultstatus,\n          \"nchecklistcomponentcode\": this.state.selectedRecord.nchecklistcomponentcode ? this.state.selectedRecord.nchecklistcomponentcode : -1,\n          \"squestiondata\": parseInt(this.state.selectedRecord.nchecklistcomponentcode) === 1 || parseInt(this.state.selectedRecord.nchecklistcomponentcode) === 4 || parseInt(this.state.selectedRecord.nchecklistcomponentcode) === 8 ? this.state.selectedRecord.squestiondata : \"\",\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n      }\n\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        dataState: this.state.dataState,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        selectedRecord: { ...this.state.selectedRecord\n        },\n        inputData: {\n          \"checklistqb\": deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: deleteParam.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName,\n            optionsQBCategory: this.props.Login.optionsQBCategory,\n            optionsChecklistComponent: this.props.Login.optionsChecklistComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const {\n        selectedRecord,\n        mandatoryFields\n      } = this.state || {};\n\n      if (comboData) {\n        fieldName === 'nchecklistqbcategorycode' ? selectedRecord['valueQBCategory'] = comboData : selectedRecord['valueChecklistComponent'] = comboData;\n        selectedRecord[fieldName] = comboData.value;\n      } else {\n        fieldName === 'nchecklistqbcategorycode' ? selectedRecord['valueQBCategory'] = comboData : selectedRecord['valueChecklistComponent'] = comboData;\n        selectedRecord[fieldName] = \"\";\n      }\n\n      if (fieldName === 'nchecklistcomponentcode') {\n        if (comboData.value === 1 || comboData.value === 4 || comboData.value === 8) {\n          let index = -1;\n          mandatoryFields.map((x, i) => {\n            if (x.idsName === \"IDS_QUESTIONDATA\") {\n              index = i;\n            }\n\n            return null;\n          });\n          if (index === -1) mandatoryFields.push({\n            \"idsName\": \"IDS_QUESTIONDATA\",\n            \"dataField\": \"squestiondata\",\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          });\n        } else {\n          mandatoryFields.map((x, index) => {\n            if (x.idsName === \"IDS_QUESTIONDATA\") {\n              mandatoryFields.splice(index, 1);\n            }\n\n            return null;\n          });\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.handleClose = this.handleClose.bind(this);\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      dataResult: [],\n      dataState: _dataState,\n      action: \"\",\n      mandatoryFields: [{\n        \"idsName\": \"IDS_QBCATEGORYNAME\",\n        \"dataField\": \"valueQBCategory\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_QUESTION\",\n        \"dataField\": \"squestion\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": this.props.intl.formatMessage({\n          id: \"IDS_CHECKLIST\"\n        }).concat(\" \" + (this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\")),\n        \"dataField\": \"valueChecklistComponent\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }]\n    };\n  }\n\n  //to close side out\n  handleClose() {\n    let loadEsign = this.props.Login.loadEsign;\n    let openModal = this.props.Login.openModal;\n    let selectedRecord = this.props.Login.selectedRecord;\n    let selectedId = this.props.Login.selectedId;\n\n    if (this.props.Login.loadEsign) {\n      if (this.props.Login.operation === \"delete\") {\n        loadEsign = false;\n        openModal = false;\n        selectedRecord = {};\n      } else {\n        loadEsign = false;\n        selectedRecord['esignpassword'] = \"\";\n        selectedRecord['esigncomments'] = \"\";\n        selectedRecord['esignreason'] = \"\";\n      }\n    } else {\n      openModal = false;\n      selectedRecord = {};\n      selectedId = null;\n    }\n\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        openModal,\n        loadEsign,\n        selectedRecord,\n        selectedId\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      //this.extractedColumnList =[\"schecklistqbcategoryname\",\"squestion\",\"scomponentname\",\"smandatory\",\"squestiondata\"]\n      this.extractedColumnList = [{\n        \"idsName\": \"IDS_QBCATEGORYNAME\",\n        \"dataField\": \"schecklistqbcategoryname\",\n        \"width\": \"150px\"\n      }, {\n        \"idsName\": \"IDS_QUESTION\",\n        \"dataField\": \"squestion\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": this.props.intl.formatMessage({\n          id: \"IDS_CHECKLIST\"\n        }).concat(\" \" + (this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\")),\n        \"dataField\": \"scomponentname\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": \"IDS_MANDATORY\",\n        \"dataField\": \"smandatory\",\n        \"width\": \"150px\"\n      }, // {\"idsName\":\"IDS_DEFAULTSTATUS\",\"dataField\":\"sdisplaystatus\",\"width\":\"150px\"},\n      {\n        \"idsName\": \"IDS_QUESTIONDATA\",\n        \"dataField\": \"squestiondata\",\n        \"width\": \"200px\"\n      }];\n      primaryKeyField = \"nchecklistqbcode\";\n    }\n\n    const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddChecklistQB\") && this.state.controlMap.get('AddChecklistQB').ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"EditChecklistQB\") && this.state.controlMap.get('EditChecklistQB').ncontrolcode;\n    const editParam = {\n      screenName: \"ChecklistQB\",\n      operation: \"update\",\n      primaryKeyField: primaryKeyField,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      screenName: \"ChecklistQB\",\n      methodUrl: \"ChecklistQB\",\n      operation: \"delete\",\n      key: 'checklistqb'\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.fetchChecklistQBById,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      pageable: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      gridHeight: '600px',\n      scrollable: \"scrollable\",\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.showChecklistQBAddScreen(this.props.Login.userInfo, addID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 29\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.inputParam.displayName,\n      closeModal: this.handleClose,\n      show: this.props.Login.openModal,\n      showSaveContinue: true,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord,\n      mandatoryFields: this.state.mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation ? this.props.Login.operation : '',\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"nchecklistqbcategorycode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_QBCATEGORYNAME\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        value: this.state.selectedRecord.valueQBCategory ? this.state.selectedRecord.valueQBCategory : [],\n        options: this.props.Login.optionsQBCategory ? this.props.Login.optionsQBCategory : [],\n        optionId: \"nchecklistqbcategorycode\",\n        optionValue: \"schecklistqbcategoryname\",\n        isMandatory: true,\n        required: true,\n        as: \"select\",\n        onChange: event => this.onComboChange(event, \"nchecklistqbcategorycode\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"squestion\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_QUESTION\"\n        }),\n        onChange: event => this.onInputOnChange(event),\n        className: \"\",\n        isMandatory: true,\n        rows: \"1\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_QUESTION\"\n        }),\n        value: this.state.selectedRecord[\"squestion\"] ? this.state.selectedRecord[\"squestion\"] : \"\",\n        type: \"textarea\",\n        required: true //defaultValue ={this.state.selectedRecord?this.state.selectedRecord.squestion:\"\"}\n        ,\n        maxLength: \"255\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"nchecklistcomponentcode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_CHECKLIST\"\n        }).concat(\" \" + (this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\")),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        as: \"select\",\n        value: this.state.selectedRecord.valueChecklistComponent ? this.state.selectedRecord.valueChecklistComponent : [],\n        options: this.props.Login.optionsChecklistComponent ? this.props.Login.optionsChecklistComponent : [],\n        optionId: \"nchecklistcomponentcode\",\n        optionValue: \"scomponentname\",\n        isMandatory: true,\n        onChange: event => this.onComboChange(event, \"nchecklistcomponentcode\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(CustomSwitch, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_MANDATORY\"\n        }),\n        type: \"switch\",\n        name: \"nmandatory\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_MANDATORY\"\n        }),\n        defaultValue: this.state.selectedRecord ? this.state.selectedRecord[\"nmandatory\"] === transactionStatus.YES ? true : false : false,\n        isMandatory: false,\n        required: false,\n        checked: this.state.selectedRecord ? this.state.selectedRecord.nmandatory === transactionStatus.YES ? true : false : false,\n        disabled: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 29\n        }\n      }), this.state.selectedRecord ? parseInt(this.state.selectedRecord.nchecklistcomponentcode) === 1 || parseInt(this.state.selectedRecord.nchecklistcomponentcode) === 4 || parseInt(this.state.selectedRecord.nchecklistcomponentcode) === 8 ? /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"squestiondata\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_QUESTIONDATA\"\n        }) //\"IDS_QUESTIONDATA\"\n        ,\n        onChange: event => this.onInputOnChange(event),\n        className: \"\",\n        rows: \"1\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_QUESTIONDATA\"\n        }),\n        type: \"textarea\",\n        defaultValue: this.state.selectedRecord ? this.state.selectedRecord[\"squestiondata\"] : \"\",\n        maxLength: \"255\",\n        isMandatory: true,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 33\n        }\n      }) : \"\" : \"\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 13\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        // if (this.props.Login.operation === \"create\" && this.props.Login.inputParam.saveType === 2){\n        //     this.props.Login.inputParam.formRef.current.reset();\n        // } \n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState,\n          selectedRecord: {\n            squestion: '',\n            squestiondata: '',\n            nmandatory: transactionStatus.NO\n          }\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      let mandatoryFields = this.props.Login.mandatoryFields ? this.props.Login.mandatoryFields : [{\n        \"idsName\": \"IDS_QBCATEGORYNAME\",\n        \"dataField\": \"valueQBCategory\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_QUESTION\",\n        \"dataField\": \"squestion\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": this.props.intl.formatMessage({\n          id: \"IDS_CHECKLIST\"\n        }).concat(\" \" + (this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\")),\n        \"dataField\": \"valueChecklistComponent\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord,\n        mandatoryFields\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  showChecklistQBAddScreen,\n  fetchChecklistQBById,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(ChecklistQB));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/checklist/checklistqb/ChecklistQB.jsx"],"names":["React","ListWrapper","Row","Col","toast","process","connect","injectIntl","callService","crudMaster","showChecklistQBAddScreen","fetchChecklistQBById","updateStore","validateEsignCredential","DEFAULT_RETURN","DataGrid","FormTextarea","CustomSwitch","FormSelectSearch","SlideOutModal","showEsign","getControlMap","Esign","transactionStatus","mapStateToProps","state","Login","ChecklistQB","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","dataState","onSaveClick","saveType","formRef","inputData","selectedId","userInfo","undefined","operation","selectedRecord","nchecklistqbcode","nchecklistqbcategorycode","squestion","nmandatory","nchecklistcomponentcode","parseInt","squestiondata","nmastersitecode","inputParam","methodUrl","classUrl","displayName","userRoleControlRights","nformcode","ncontrolcode","updateInfo","typeName","data","loadEsign","screenData","deleteRecord","deleteParam","ncontrolCode","openModal","screenName","optionsQBCategory","optionsChecklistComponent","reloadData","userinfo","validateEsign","sreason","nreasoncode","value","spredefinedreason","label","password","onInputOnChange","target","type","name","checked","YES","NO","onComboChange","comboData","fieldName","mandatoryFields","index","map","x","i","idsName","push","splice","createRef","extractedColumnList","handleClose","bind","skip","take","settings","masterStatus","error","controlMap","Map","action","intl","formatMessage","id","concat","genericLabel","slanguagetypecode","getDerivedStateFromProps","warn","render","primaryKeyField","addID","has","get","editId","editParam","key","valueQBCategory","valueChecklistComponent","componentDidUpdate","previousProps","Object","values","item","length","skipcount","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {ListWrapper} from  '../../../components/client-group.styles'\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { callService, crudMaster ,showChecklistQBAddScreen,fetchChecklistQBById,updateStore,validateEsignCredential} from '../../../actions';\r\nimport {DEFAULT_RETURN} from '../../../actions/LoginTypes';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\r\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport {showEsign,getControlMap} from '../../../components/CommonScript';\r\nimport Esign from '../../../pages/audittrail/Esign';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass ChecklistQB extends React.Component\r\n{\r\n    constructor(props){\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.handleClose = this.handleClose.bind(this);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data:[], masterStatus:\"\", error:\"\", selectedRecord:{},userRoleControlRights:[],controlMap:new Map(),\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            action:\"\",\r\n            mandatoryFields:[\r\n                {\"idsName\":\"IDS_QBCATEGORYNAME\",\"dataField\":\"valueQBCategory\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                {\"idsName\":\"IDS_QUESTION\",\"dataField\":\"squestion\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                {\"idsName\":this.props.intl.formatMessage({ id:\"IDS_CHECKLIST\"}).concat(\" \" +(this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\")),\"dataField\":\"valueChecklistComponent\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            ]\r\n        };\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    \r\n    //to close side out\r\n    handleClose (){\r\n        \r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign){          \r\n            if (this.props.Login.operation === \"delete\"){\r\n                loadEsign = false;\r\n                openModal =  false;\r\n                selectedRecord = {};\r\n            }\r\n            else{\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else{\r\n            openModal =  false;\r\n            selectedRecord ={};\r\n            selectedId=null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {openModal, loadEsign, selectedRecord,selectedId}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    //to open side out\r\n   \r\n    //to perform save action for both add and edit\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let selectedId=null;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState=undefined;\r\n        if ( this.props.Login.operation === \"update\"){\r\n            // edit\r\n            selectedId=this.state.selectedRecord.nchecklistqbcode\r\n            dataState=this.state.dataState\r\n            inputData[\"checklistqb\"] = {\r\n                \"nchecklistqbcode\":this.state.selectedRecord.nchecklistqbcode?this.state.selectedRecord.nchecklistqbcode:-1,\r\n                \"nchecklistqbcategorycode\":this.state.selectedRecord.nchecklistqbcategorycode,\r\n                \"squestion\":this.state.selectedRecord.squestion,\r\n                \"nmandatory\":this.state.selectedRecord.nmandatory,\r\n                //\"ndefaultstatus\":this.state.selectedRecord.ndefaultstatus,\r\n                \"nchecklistcomponentcode\":this.state.selectedRecord.nchecklistcomponentcode?this.state.selectedRecord.nchecklistcomponentcode:-1,\r\n                \"squestiondata\":parseInt(this.state.selectedRecord.nchecklistcomponentcode)===1||\r\n                                parseInt(this.state.selectedRecord.nchecklistcomponentcode)===4||\r\n                                parseInt(this.state.selectedRecord.nchecklistcomponentcode)===8?\r\n                                this.state.selectedRecord.squestiondata\r\n                                :\"\",\r\n                \"nsitecode\":this.props.Login.userInfo.nmastersitecode\r\n            }   \r\n        }\r\n        else{\r\n            //add               \r\n            inputData[\"checklistqb\"] =\r\n                {\r\n                \"nchecklistqbcategorycode\":this.state.selectedRecord.nchecklistqbcategorycode?this.state.selectedRecord.nchecklistqbcategorycode:-1,\r\n                \"squestion\":this.state.selectedRecord.squestion,\r\n                \"nmandatory\":this.state.selectedRecord.nmandatory,\r\n                //\"ndefaultstatus\":this.state.selectedRecord.ndefaultstatus,\r\n                \"nchecklistcomponentcode\":this.state.selectedRecord.nchecklistcomponentcode?this.state.selectedRecord.nchecklistcomponentcode:-1,\r\n                \"squestiondata\":parseInt(this.state.selectedRecord.nchecklistcomponentcode)===1||\r\n                                parseInt(this.state.selectedRecord.nchecklistcomponentcode)===4||\r\n                                parseInt(this.state.selectedRecord.nchecklistcomponentcode)===8?\r\n                                this.state.selectedRecord.squestiondata\r\n                                :\"\",\r\n                \"nsitecode\":this.props.Login.userInfo.nmastersitecode\r\n            };         \r\n        }   \r\n                \r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl:this.props.Login.inputParam.classUrl,\r\n            displayName:this.props.Login.inputParam.displayName?this.props.Login.inputParam.displayName:'',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef,dataState,selectedId,\r\n            selectedRecord: {...this.state.selectedRecord}   \r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        \r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign:true, screenData:{inputParam, masterData}, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else{\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n       }\r\n              \r\n    }\r\n    //to get the edit record\r\n    \r\n    //to delete a recoed\r\n    deleteRecord = (deleteParam) =>{\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            dataState:this.state.dataState,\r\n            displayName:this.props.Login.inputParam.displayName?this.props.Login.inputParam.displayName:'',\r\n            selectedRecord: {...this.state.selectedRecord},\r\n            inputData: {\"checklistqb\" :deleteParam.selectedRecord,\r\n                        \"userinfo\": this.props.Login.userInfo},\r\n                        operation :deleteParam.operation     \r\n                    }       \r\n                            \r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,deleteParam.ncontrolCode)){\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign:true, screenData:{inputParam, masterData},operation:deleteParam.operation,openModal:true,\r\n                        screenName:this.props.Login.inputParam.displayName,optionsQBCategory:this.props.Login.optionsQBCategory,\r\n                        optionsChecklistComponent:this.props.Login.optionsChecklistComponent\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else{\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n    }\r\n\r\n    //to reload data\r\n    reloadData = () =>{\r\n        const inputParam = {\r\n            inputData : {userinfo: this.props.Login.userInfo},\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName:this.props.Login.inputParam.displayName?this.props.Login.inputParam.displayName:'',\r\n            userInfo: this.props.Login.userInfo\r\n            };\r\n                            \r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    validateEsign = () =>{\r\n        const inputParam = {\r\n                                inputData: {\"userinfo\": {...this.props.Login.userInfo, \r\n                                                        sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                                                        nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                                                        spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n                                                    },\r\n                                             password : this.state.selectedRecord[\"esignpassword\"]\r\n                                            },\r\n                                screenData : this.props.Login.screenData\r\n                            }        \r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    static getDerivedStateFromProps(props, state){\r\n    \r\n        if (props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";           \r\n        } \r\n         \r\n        if (props.Login.error !== state.error){\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }   \r\n        return null;\r\n     }\r\n     \r\n     render(){\r\n        let primaryKeyField = \"\";\r\n        if (this.props.Login.inputParam !== undefined){\r\n            //this.extractedColumnList =[\"schecklistqbcategoryname\",\"squestion\",\"scomponentname\",\"smandatory\",\"squestiondata\"]\r\n            this.extractedColumnList=[\r\n                    {\"idsName\":\"IDS_QBCATEGORYNAME\",\"dataField\":\"schecklistqbcategoryname\",\"width\":\"150px\"},\r\n                    {\"idsName\":\"IDS_QUESTION\",\"dataField\":\"squestion\",\"width\":\"250px\"},\r\n                    {\"idsName\":this.props.intl.formatMessage({ id:\"IDS_CHECKLIST\"}).concat(\" \" +(this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\")),\"dataField\":\"scomponentname\",\"width\":\"250px\"},\r\n                    {\"idsName\":\"IDS_MANDATORY\",\"dataField\":\"smandatory\",\"width\":\"150px\"},\r\n                   // {\"idsName\":\"IDS_DEFAULTSTATUS\",\"dataField\":\"sdisplaystatus\",\"width\":\"150px\"},\r\n                    {\"idsName\":\"IDS_QUESTIONDATA\",\"dataField\":\"squestiondata\",\"width\":\"200px\"},\r\n                    \r\n                ]\r\n            primaryKeyField = \"nchecklistqbcode\";\r\n        }\r\n        \r\n        \r\n        const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddChecklistQB\")\r\n                        && this.state.controlMap.get('AddChecklistQB').ncontrolcode;\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"EditChecklistQB\")\r\n                        && this.state.controlMap.get('EditChecklistQB').ncontrolcode;\r\n        const editParam = {screenName:\"ChecklistQB\", operation:\"update\",  primaryKeyField:primaryKeyField, \r\n                        masterData:this.props.Login.masterData,   userInfo:this.props.Login.userInfo, ncontrolCode:editId};\r\n\r\n        const deleteParam ={screenName:\"ChecklistQB\", methodUrl:\"ChecklistQB\", operation:\"delete\",key:'checklistqb'};\r\n        \r\n        return(\r\n            <>\r\n            <Row>\r\n                <Col>\r\n                    <ListWrapper className=\"client-list-content\">\r\n                        {this.state.data ?\r\n                            <DataGrid\r\n                                primaryKeyField = {primaryKeyField}\r\n                                data={this.state.data}\r\n                                dataResult = {this.state.dataResult}\r\n                                dataState = {this.state.dataState}\r\n                                dataStateChange = {this.dataStateChange}\r\n                                extractedColumnList = {this.extractedColumnList}\r\n                                fetchRecord = {this.props.fetchChecklistQBById}\r\n                                deleteRecord = {this.deleteRecord}\r\n                                reloadData = {this.reloadData}\r\n                                controlMap = {this.state.controlMap}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                userInfo={this.props.Login.userInfo} \r\n                                editParam={editParam}\r\n                                deleteParam={deleteParam}\r\n                                pageable={true}\r\n                                isActionRequired={true}\r\n                                isToolBarRequired={true}\r\n                                gridHeight = {'600px'}\r\n                                scrollable={\"scrollable\"}\r\n                               \r\n                                selectedId={this.props.Login.selectedId}\r\n                                addRecord={()=>this.props.showChecklistQBAddScreen(this.props.Login.userInfo,addID)}\r\n                            />\r\n                        :\"\"}    \r\n                    \r\n                    </ListWrapper>\r\n                </Col>\r\n            </Row>\r\n            {this.props.Login.openModal?\r\n            <SlideOutModal\r\n                onSaveClick={this.onSaveClick}\r\n                operation={this.props.Login.operation}\r\n                screenName={this.props.Login.inputParam.displayName}\r\n                closeModal={this.handleClose}\r\n                show={this.props.Login.openModal}\r\n                showSaveContinue={true}\r\n                inputParam={this.props.Login.inputParam}\r\n                esign={this.props.Login.loadEsign}\r\n                validateEsign={this.validateEsign}\r\n                selectedRecord={this.state.selectedRecord}\r\n                mandatoryFields={this.state.mandatoryFields}\r\n                addComponent={this.props.Login.loadEsign ? \r\n                    <Esign  operation={this.props.Login.operation?this.props.Login.operation:''}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}                                               \r\n                            selectedRecord={this.state.selectedRecord ||{}}\r\n                            />\r\n                  :\r\n                    <Row> \r\n                        <Col md={12}>\r\n                            <FormSelectSearch\r\n                            name={\"nchecklistqbcategorycode\"}\r\n                            formLabel={this.props.intl.formatMessage({ id:\"IDS_QBCATEGORYNAME\"})}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            value={this.state.selectedRecord.valueQBCategory?this.state.selectedRecord.valueQBCategory:[]}\r\n                            options={this.props.Login.optionsQBCategory?this.props.Login.optionsQBCategory:[]}\r\n                            optionId=\"nchecklistqbcategorycode\"\r\n                            optionValue=\"schecklistqbcategoryname\"\r\n                            isMandatory={true}\r\n                            required={true}\r\n                            as={\"select\"}\r\n                            onChange={(event)=>this.onComboChange(event,\"nchecklistqbcategorycode\")}\r\n                            />\r\n                            <FormTextarea\r\n                            name={\"squestion\"}\r\n                            placeholder={this.props.intl.formatMessage({ id:\"IDS_QUESTION\"})}\r\n                            onChange={(event)=>this.onInputOnChange(event)}\r\n                            className=\"\"\r\n                            isMandatory={true}\r\n                            rows=\"1\"\r\n                            label={this.props.intl.formatMessage({ id:\"IDS_QUESTION\"})}\r\n                            value={this.state.selectedRecord[\"squestion\"] ? this.state.selectedRecord[\"squestion\"] : \"\"}\r\n                            type=\"textarea\"\r\n                            required={true}\r\n                           //defaultValue ={this.state.selectedRecord?this.state.selectedRecord.squestion:\"\"}\r\n                            maxLength={\"255\"}\r\n                            />\r\n                           \r\n                            <FormSelectSearch\r\n                            name={ \"nchecklistcomponentcode\"}\r\n                            formLabel={this.props.intl.formatMessage({ id:\"IDS_CHECKLIST\"}).concat(\" \" +(this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\"))}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            as=\"select\"\r\n                            value={this.state.selectedRecord.valueChecklistComponent?this.state.selectedRecord.valueChecklistComponent:[]}\r\n                            options={this.props.Login.optionsChecklistComponent?this.props.Login.optionsChecklistComponent:[]}\r\n                            optionId=\"nchecklistcomponentcode\"\r\n                            optionValue=\"scomponentname\"\r\n                            isMandatory={true}\r\n                            onChange={(event)=>this.onComboChange(event,\"nchecklistcomponentcode\")}\r\n                            />\r\n\r\n                            <CustomSwitch\r\n                            label={this.props.intl.formatMessage({ id:\"IDS_MANDATORY\"})}\r\n                            type=\"switch\"\r\n                            name={\"nmandatory\"}\r\n                            onChange={(event)=>this.onInputOnChange(event)}\r\n                            placeholder={this.props.intl.formatMessage({ id:\"IDS_MANDATORY\"})}\r\n                            defaultValue ={this.state.selectedRecord ? this.state.selectedRecord[\"nmandatory\"] === transactionStatus.YES ? true :false  : false}\r\n                            isMandatory={false}\r\n                            required={false}\r\n                            checked={this.state.selectedRecord ? this.state.selectedRecord.nmandatory === transactionStatus.YES ? true :false  : false}\r\n                            disabled={false}\r\n                            />\r\n                            {this.state.selectedRecord ? \r\n                            parseInt(this.state.selectedRecord.nchecklistcomponentcode)===1||\r\n                            parseInt(this.state.selectedRecord.nchecklistcomponentcode)===4||\r\n                            parseInt(this.state.selectedRecord.nchecklistcomponentcode)===8?\r\n                        \r\n                                <FormTextarea\r\n                                name={\"squestiondata\"}\r\n                                placeholder={this.props.intl.formatMessage({ id:\"IDS_QUESTIONDATA\"})}//\"IDS_QUESTIONDATA\"\r\n                                onChange={(event)=>this.onInputOnChange(event)}\r\n                                className=\"\"\r\n                                rows=\"1\"\r\n                                label={this.props.intl.formatMessage({ id:\"IDS_QUESTIONDATA\"})}\r\n                                type=\"textarea\"\r\n                                defaultValue ={this.state.selectedRecord ? this.state.selectedRecord[\"squestiondata\"] : \"\"}\r\n                                maxLength={\"255\"}\r\n                                isMandatory={true}\r\n                                required={true}\r\n                                />\r\n                            :\"\":\"\"}\r\n                            {/* <CustomSwitch\r\n                            label={this.props.intl.formatMessage({ id:\"IDS_DEFAULTSTATUS\"})}\r\n                            type=\"switch\"\r\n                            name={\"ndefaultstatus\"}\r\n                            onChange={(event)=>this.onInputOnChange(event)}\r\n                            placeholder={this.props.intl.formatMessage({ id:\"IDS_DEFAULTSTATUS\"})}\r\n                            defaultValue ={this.state.selectedRecord ? this.state.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true :false  : false}\r\n                            isMandatory={false}\r\n                            required={false}\r\n                            checked={this.state.selectedRecord ? this.state.selectedRecord.ndefaultstatus === transactionStatus.YES ? true :false  : false}\r\n                            disabled={false}\r\n                            /> */}\r\n                        </Col>\r\n                    </Row>\r\n                }/>\r\n                :\"\"}\r\n            </>\r\n            \r\n          );\r\n     }\r\n     \r\n     componentDidUpdate(previousProps){\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData){            \r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode){\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights){\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item=>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({userRoleControlRights, controlMap, data:this.props.Login.masterData, \r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState)});\r\n            }\r\n            else{\r\n                // if (this.props.Login.operation === \"create\" && this.props.Login.inputParam.saveType === 2){\r\n                //     this.props.Login.inputParam.formRef.current.reset();\r\n                // } \r\n                let {dataState}=this.state;\r\n                if(this.props.Login.dataState===undefined){\r\n                    dataState={skip:0,take:this.state.dataState.take}\r\n                } \r\n\r\n                if(this.state.dataResult.data){\r\n                    if(this.state.dataResult.data.length ===1){\r\n                       let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                       this.state.dataState.skip\r\n                        dataState={skip:skipcount,take:this.state.dataState.take}\r\n                    }\r\n                }\r\n\r\n                this.setState({data:this.props.Login.masterData, \r\n                    dataResult: process(this.props.Login.masterData,dataState),\r\n                    dataState,\r\n                    selectedRecord:{squestion:'',squestiondata:'',nmandatory:transactionStatus.NO}\r\n                });\r\n            }\r\n         }\r\n         else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord ){    \r\n            let mandatoryFields=this.props.Login.mandatoryFields?(this.props.Login.mandatoryFields):[\r\n                {\"idsName\":\"IDS_QBCATEGORYNAME\",\"dataField\":\"valueQBCategory\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                {\"idsName\":\"IDS_QUESTION\",\"dataField\":\"squestion\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                {\"idsName\":this.props.intl.formatMessage({ id:\"IDS_CHECKLIST\"}).concat(\" \" +(this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\")),\"dataField\":\"valueChecklistComponent\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            ]\r\n            this.setState({selectedRecord:this.props.Login.selectedRecord,mandatoryFields});\r\n         }       \r\n    }  \r\n    componentWillUnmount(){\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                 masterData :[], inputParam:undefined, operation:null,modalName:undefined\r\n                }\r\n            }\r\n        this.props.updateStore(updateInfo);\r\n    }    \r\n    onInputOnChange=(event)=>  {\r\n        \r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox')\r\n        {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else{\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({selectedRecord});\r\n        \r\n    }\r\n    onComboChange=(comboData,fieldName)=>  {\r\n        const {selectedRecord,mandatoryFields} = this.state || {};\r\n        if(comboData){     \r\n            \r\n            fieldName==='nchecklistqbcategorycode'?selectedRecord['valueQBCategory']=comboData:selectedRecord['valueChecklistComponent']=comboData\r\n            selectedRecord[fieldName] = comboData.value;\r\n        }else{\r\n            fieldName==='nchecklistqbcategorycode'?selectedRecord['valueQBCategory']=comboData:selectedRecord['valueChecklistComponent']=comboData\r\n            selectedRecord[fieldName] = \"\";\r\n        }\r\n        if(fieldName==='nchecklistcomponentcode'){\r\n           if(comboData.value===1||comboData.value===4||comboData.value===8){\r\n                let index=-1;\r\n                mandatoryFields.map((x,i)=>{if(x.idsName===\"IDS_QUESTIONDATA\"){ index=i} return null})\r\n                if(index===-1)\r\n                    mandatoryFields.push({\"idsName\":\"IDS_QUESTIONDATA\",\"dataField\":\"squestiondata\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"})\r\n                \r\n           }else{\r\n                \r\n                mandatoryFields.map((x,index)=>{if(x.idsName===\"IDS_QUESTIONDATA\"){ mandatoryFields.splice(index,1);} return null})\r\n               \r\n           }\r\n        }\r\n\r\n        this.setState({selectedRecord});\r\n        \r\n    }\r\n}\r\nexport default connect(mapStateToProps, {callService, crudMaster,showChecklistQBAddScreen,fetchChecklistQBById,\r\n    updateStore,validateEsignCredential})(injectIntl(ChecklistQB));"]},"metadata":{},"sourceType":"module"}