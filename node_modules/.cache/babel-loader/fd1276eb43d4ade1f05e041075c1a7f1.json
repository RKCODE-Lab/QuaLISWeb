{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify'; // import {\n//     getComboLabelValue\n// } from '../components/CommonScript'\n\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { transactionStatus } from './../components/Enumeration';\nexport function openInstrumentCategoryModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\n  return function (dispatch) {\n    if (operation === \"create\" || operation === \"update\") {\n      const Technique = rsapi.post(\"/technique/getTechnique\", {\n        \"userinfo\": userInfo\n      });\n      const Interfacetype = rsapi.post(\"/instrumentcategory/getInterfacetype\", {\n        \"userinfo\": userInfo\n      });\n      let urlArray = [];\n\n      if (operation === \"create\") {\n        urlArray = [Technique, Interfacetype];\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {};\n        selectedRecord[\"nstatus\"] = 1;\n        selectedRecord[\"ninstrumentcatcode\"] = 0;\n        selectedRecord[\"ncalibrationreq\"] = transactionStatus.NO;\n        selectedRecord[\"ncategorybasedflow\"] = transactionStatus.NO;\n        selectedRecord[\"ndefaultstatus\"] = transactionStatus.NO;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            Technique: response[0].data || [],\n            Interfacetype: response[1].data || [],\n            operation,\n            screenName,\n            selectedRecord,\n            openModal: true,\n            ncontrolcode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch(initRequest(false));\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function fetchInstrumentCategoryById(editParam) {\n  return function (dispatch) {\n    const URL1 = rsapi.post('technique/getTechnique', {\n      \"userinfo\": editParam.userInfo\n    });\n    const URL2 = rsapi.post(\"instrumentcategory/getActiveInstrumentCategoryById\", {\n      [editParam.primaryKeyField]: editParam.primaryKeyValue,\n      \"userinfo\": editParam.userInfo\n    });\n    const URL3 = rsapi.post('instrumentcategory/getInterfacetype', {\n      \"userinfo\": editParam.userInfo\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL1, URL2, URL3]).then(response => {\n      let selectedRecord = {};\n      let selectedId = editParam.primaryKeyValue;\n      selectedRecord = response[1].data; // let Technique = response[0].data;\n      // let Interfacetype = response[2].data;\n\n      selectedRecord['ntechniquecode'] = {\n        value: response[1].data.ntechniquecode,\n        label: response[1].data.stechniquename\n      };\n      selectedRecord['ninterfacetypecode'] = {\n        value: response[1].data.ninterfacetypecode,\n        label: response[1].data.sinterfacetypename\n      }; // getComboLabelValue(selectedRecord, Technique, \"ntechniquecode\", \"stechniquename\");\n      //  getComboLabelValue(selectedRecord, Interfacetype, \"ninterfacetype\", \"sinterfacetypename\");\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          Technique: response[0].data || [],\n          Interfacetype: response[2].data || [],\n          operation: editParam.operation,\n          openModal: true,\n          screenName: editParam.screenName,\n          ncontrolcode: editParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/InstrumentCategoryAction.js"],"names":["rsapi","Axios","toast","DEFAULT_RETURN","initRequest","intl","transactionStatus","openInstrumentCategoryModal","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolcode","dispatch","Technique","post","Interfacetype","urlArray","all","then","response","selectedRecord","NO","type","payload","data","openModal","loading","catch","error","status","message","warn","formatMessage","id","fetchInstrumentCategoryById","editParam","URL1","URL2","primaryKeyField","primaryKeyValue","URL3","selectedId","value","ntechniquecode","label","stechniquename","ninterfacetypecode","sinterfacetypename","ncontrolCode"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\n// import {\r\n//     getComboLabelValue\r\n// } from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from './../components/Enumeration';\r\n\r\n\r\n    export function openInstrumentCategoryModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\r\n        return function (dispatch) {\r\n            if (operation === \"create\" || operation === \"update\" ) {\r\n                const Technique = rsapi.post(\"/technique/getTechnique\", {\r\n                    \"userinfo\": userInfo\r\n                });\r\n    \r\n                const Interfacetype = rsapi.post(\"/instrumentcategory/getInterfacetype\", {\r\n                    \"userinfo\": userInfo\r\n                });\r\n               \r\n    \r\n                let urlArray = [];\r\n                if (operation === \"create\") {\r\n                   \r\n                    urlArray = [Technique, Interfacetype];\r\n                } \r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                          let selectedRecord = {};\r\n                            selectedRecord[\"nstatus\"] = 1;\r\n                            selectedRecord[\"ninstrumentcatcode\"] = 0;\r\n                            selectedRecord[\"ncalibrationreq\"] = transactionStatus.NO;\r\n                            selectedRecord[\"ncategorybasedflow\"] = transactionStatus.NO;\r\n                            selectedRecord[\"ndefaultstatus\"] = transactionStatus.NO;\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                Technique: response[0].data || [],\r\n                                Interfacetype: response[1].data || [],\r\n                                operation,\r\n                                screenName,\r\n                                selectedRecord,\r\n                                openModal: true,\r\n                                ncontrolcode, loading: false\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(initRequest(false));\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(intl.formatMessage({\r\n                                id: error.response.data\r\n                            }));\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n    }\r\n    \r\n    export function fetchInstrumentCategoryById (editParam){  \r\n        return function(dispatch){\r\n            const URL1= rsapi.post('technique/getTechnique',{\"userinfo\":editParam.userInfo})\r\n            const URL2=rsapi.post(\"instrumentcategory/getActiveInstrumentCategoryById\", { [editParam.primaryKeyField] :editParam.primaryKeyValue , \"userinfo\": editParam.userInfo} )\r\n            const URL3= rsapi.post('instrumentcategory/getInterfacetype',{\"userinfo\":editParam.userInfo})\r\n            dispatch(initRequest(true));\r\n            Axios.all([URL1,URL2,URL3])\r\n            .then(response=> { \r\n                let selectedRecord={}\r\n                let selectedId = editParam.primaryKeyValue;\r\n                selectedRecord=response[1].data\r\n               // let Technique = response[0].data;\r\n               // let Interfacetype = response[2].data;\r\n\r\n                selectedRecord['ntechniquecode']={value:response[1].data.ntechniquecode,label:response[1].data.stechniquename}\r\n                selectedRecord['ninterfacetypecode']={value:response[1].data.ninterfacetypecode,label:response[1].data.sinterfacetypename}\r\n\r\n              // getComboLabelValue(selectedRecord, Technique, \"ntechniquecode\", \"stechniquename\");\r\n              //  getComboLabelValue(selectedRecord, Interfacetype, \"ninterfacetype\", \"sinterfacetypename\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:{\r\n                    selectedRecord ,\r\n                    Technique: response[0].data || [],\r\n                    Interfacetype: response[2].data || [],\r\n                    operation:editParam.operation,\r\n                    openModal: true,\r\n                    screenName:editParam.screenName,\r\n                    ncontrolcode:editParam.ncontrolCode,\r\n                    loading:false,selectedId\r\n                }\r\n                }); \r\n                \r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }         \r\n            })\r\n        }\r\n     }\r\n"]},"metadata":{},"sourceType":"module"}