{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\credentialmanagement\\\\Sorting.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { callService, updateStore, crudMaster, formSortingService1, formModuleGetSorting, moduleSortingOrder1, saveExecutionOrder } from '../../actions';\nimport { getControlMap, constructOptionList } from '../../components/CommonScript';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport SortableItemUI from './FormModuleSortingConfig';\nimport { sortData } from '../../components/CommonScript';\nimport { Sortable } from \"@progress/kendo-react-sortable\";\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport ListBoxDraggable from '../../components/ListBoxDraggable';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Sorting extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n\n      if (this.state.bool === 1) {\n        if (fieldName === \"nmenucode\") {\n          this.props.formSortingService1({\n            inputData: {\n              nmenucode: selectedRecord.nmenucode.value,\n              userinfo: this.props.Login.userInfo,\n              primarykey: selectedRecord.nmenucode.value,\n              boolValue: 1\n            },\n            masterData: this.props.Login.masterData,\n            url: \"sorting/getFilter\"\n          });\n        }\n      } else if (this.state.bool === 2) {\n        if (fieldName === \"nmenucode\") {\n          this.props.formSortingService1({\n            inputData: {\n              nmenucode: selectedRecord.nmenucode.value,\n              userinfo: this.props.Login.userInfo,\n              primarykey: selectedRecord.nmenucode.value,\n              boolValue: 2\n            },\n            masterData: this.props.Login.masterData,\n            url: \"sorting/getFilter\"\n          });\n        }\n      }\n\n      if (fieldName === \"nmodulecode\") {\n        this.props.formSortingService1({\n          inputData: {\n            nmenucode: selectedRecord.nmodulecode.item.nmenucode,\n            nmodulecode: selectedRecord.nmodulecode.value,\n            userinfo: this.props.Login.userInfo,\n            primarykey: selectedRecord.nmodulecode.item.nmenucode,\n            primarykey1: selectedRecord.nmodulecode.value,\n            boolValue: 1\n          },\n          masterData: this.props.Login.masterData,\n          url: \"sorting/getFilter1\"\n        });\n      } else {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.booleanValue = fieldName => {\n      if (fieldName == \"formSorting\") {\n        this.setState({\n          bool: 1,\n          btnControl1: \"primary active\",\n          btnControl: \"primary disabled\"\n        });\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            boolValue: 1,\n            displayName: this.props.intl.formatMessage({\n              id: \"IDS_SCREENORGANISINGFORM\"\n            })\n          }\n        };\n        this.props.updateStore(updateInfo);\n        this.props.Login.masterData[\"nFlag\"] = 0;\n        this.props.formModuleGetSorting({\n          inputData: {\n            boolValue: 1,\n            userinfo: this.props.Login.userInfo\n          },\n          masterData: this.props.Login.masterData,\n          url: \"sorting/getSorting\"\n        });\n      } else if (fieldName == \"moduleSorting\") {\n        this.setState({\n          bool: 2,\n          btnControl: \"primary active\",\n          btnControl1: \"primary disabled\"\n        });\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            boolValue: 2,\n            displayName: this.props.intl.formatMessage({\n              id: \"IDS_SCREENORGANISINGMODULE\"\n            })\n          }\n        };\n        this.props.updateStore(updateInfo);\n        this.props.Login.masterData[\"nFlag\"] = 0;\n        this.props.formModuleGetSorting({\n          inputData: {\n            boolValue: 2,\n            userinfo: this.props.Login.userInfo\n          },\n          masterData: this.props.Login.masterData,\n          url: \"sorting/getSorting\"\n        });\n      }\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      data: [],\n      bool: 1,\n      btnControl: \"primary disabled\",\n      btnControl1: \"primary active\"\n    };\n  }\n\n  render() {\n    // if (this.props.Login.inputParam !== undefined) {\n    //     this.extractedColumnList = []\n    // }\n    let masterdata = { ...this.props.Login.masterData\n    }; // delete(masterdata.MenuList);\n    // delete(masterdata.SelectedMenuSorting);\n    // delete(masterdata.SelectedModuleSorting);\n    // delete(masterdata.moduleList);\n    // delete(masterdata.nFlag); \n    // delete(masterdata.formsList); \n    // let palettes=masterdata && Object.keys(masterdata);\n    // const masterdata1 = [];\n    // const palettes2 = [];\n    // if(this.state.bool == 1){\n    //     this.props.Login.masterData.nFlag === 1 || this.props.Login.nFlag ===1 ?\n    // masterdata1.push(...this.props.Login.masterData.SelectedModuleSorting && this.props.Login.masterData.SelectedModuleSorting) :\n    // palettes.map(item => this.props.Login.masterData.SelectedModuleSorting && this.props.Login.masterData.SelectedModuleSorting.map(\n    //     item1 =>item === item1.smodulename ? masterdata1.push(item1) : \"\"))\n    // let m1 = Object.keys(masterdata1);\n    // let m2 = \n    // m1.map((item)=>({\n    //     smodulename : masterdata1[item].smodulename,\n    //     nsorter : masterdata1[item].nsorter,\n    //     nmodulecode : masterdata1[item].nmodulecode,\n    //     sdisplayname : masterdata1[item].sdisplayname\n    // })) \n    // const palettes1 = Object.values(m2.map((item)=>item));\n    // palettes1 && palettes1.map((item, index)=>{\n    //     let formList =masterdata[item.smodulename]\n    //     sortData(masterdata[item.smodulename],'ascending','nsorter')\n    //     palettes2.push({\n    //       data: formList,\n    //       name: item.sdisplayname,\n    //       id: index,\n    //       nmoduleSorter: item.nsorter,\n    //       nmodulecode : item.nmodulecode\n    //     })  \n    //   })\n    // }\n    // else if(this.state.bool == 2){\n    //     this.props.Login.masterData.nFlag === 1 || this.props.Login.nFlag ===1 ?\n    //     masterdata1.push(...this.props.Login.masterData.SelectedMenuSorting) :\n    //     palettes.map(item => this.props.Login.masterData.SelectedMenuSorting.map(\n    //         item1 =>item === item1.smenuname ? masterdata1.push(item1) : \"\"))\n    //     let m1 = Object.keys(masterdata1);\n    //     let m2 = \n    //     m1.map((item)=>({\n    //         smenuname : masterdata1[item].smenuname,\n    //         nsorter : masterdata1[item].nsorter,\n    //         nmenucode : masterdata1[item].nmenucode,\n    //         sdisplayname : masterdata1[item].sdisplayname\n    //     })) \n    //     const palettes1 = Object.values(m2.map((item)=>item));\n    //         palettes1 && palettes1.map((item, index)=>{\n    //         let formList =masterdata[item.smenuname]\n    //         sortData(masterdata[item.smenuname],'ascending','nsorter')\n    //         palettes2.push({\n    //           data: formList,\n    //           name: item.sdisplayname,\n    //           id: index,\n    //           nmenuSorter: item.nsorter,\n    //           nmenucode : item.nmenucode\n    //         })  \n    //       })\n    // }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-\" + this.state.btnControl + \" btn-padd-custom\",\n      style: {\n        float: \"right\",\n        marginRight: \"35px\"\n      },\n      onClick: () => this.booleanValue('moduleSorting'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MODULE\"\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-\" + this.state.btnControl1 + \" btn-padd-custom\",\n      style: {\n        float: \"right\",\n        marginRight: \"35px\"\n      },\n      onClick: () => this.booleanValue('formSorting'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_FORM\"\n    })), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nmenucode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_MENU\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: sortData(this.state.lstMenuSorting, 'ascending', 'value') || [],\n      value: this.props.Login.masterData && this.props.Login.masterData.SelectedMenuSorting && {\n        value: this.props.Login.masterData.SelectedMenuSorting ? this.props.Login.masterData.SelectedMenuSorting['nmenucode'] : \"\",\n        label: this.props.Login.masterData.SelectedMenuSorting ? this.props.Login.masterData.SelectedMenuSorting['sdisplayname'] : \"\"\n      },\n      isMandatory: true,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'nmenucode'),\n      maxMenuHeight: 150,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    })), this.state.bool === 1 ? /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nmodulecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_MODULE\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: sortData(this.state.lstModuleSorting, 'ascending', 'value') || [],\n      value: this.props.Login.masterData && this.props.Login.masterData.SelectedModuleSorting && {\n        value: this.props.Login.masterData.SelectedModuleSorting ? this.props.Login.masterData.SelectedModuleSorting['nmodulecode'] : \"\",\n        label: this.props.Login.masterData.SelectedModuleSorting ? this.props.Login.masterData.SelectedModuleSorting['sdisplayname'] : \"\"\n      },\n      isMandatory: true,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'nmodulecode'),\n      maxMenuHeight: 150,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 25\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Col, {\n      md: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 25\n      }\n    }, this.props.Login.masterData.SelectedMenuSorting || this.props.Login.masterData.SelectedModuleSorting ? /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: this.props.Login.language,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListBoxDraggable, {\n      masterList: this.state.bool === 1 ? sortData(masterdata['QualisForms'], 'ascending', 'nsorter') || [] : sortData(masterdata['QualisModules'], 'ascending', 'nsorter'),\n      mainField: \"sdisplayname\",\n      hideSearch: true,\n      primaryKeyField: \"nsorter\",\n      sortableField: 'nsorter',\n      userInfo: this.props.Login.userInfo,\n      masterData: masterdata,\n      saveExecutionOrder: this.state.bool === 1 ? props => {\n        this.props.formSortingService1({\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            primarykey: this.props.Login.masterData.SelectedModuleSorting && this.props.Login.masterData.SelectedModuleSorting['nmenucode'],\n            nmodulecode: this.props.Login.masterData.SelectedModuleSorting && this.props.Login.masterData.SelectedModuleSorting['nmodulecode'],\n            changedValues: props\n          },\n          masterData: this.props.masterData,\n          url: \"sorting/updateForms\"\n        });\n      } : props => {\n        this.props.moduleSortingOrder1({\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            primarykey: this.props.Login.masterData.SelectedMenuSorting && this.props.Login.masterData.SelectedMenuSorting['nmenucode'],\n            changedValues: props\n          },\n          masterData: this.props.masterData,\n          url: \"sorting/updateModules\"\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 28\n      }\n    })) : \"\")));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        const menuMap = constructOptionList(this.props.Login.masterData.MenuList || [], \"nmenucode\", \"sdisplayname\", undefined, undefined, true);\n        const MenuList = menuMap.get(\"OptionList\");\n        const moduleMap = constructOptionList(this.props.Login.masterData.moduleList || [], \"nmodulecode\", \"sdisplayname\", undefined, undefined, true);\n        const moduleList = moduleMap.get(\"OptionList\");\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          lstMenuSorting: MenuList,\n          lstModuleSorting: moduleList\n        });\n      } else {\n        const moduleMap = constructOptionList(this.props.Login.masterData.moduleList || [], \"nmodulecode\", \"sdisplayname\", undefined, undefined, true);\n        const moduleList = moduleMap.get(\"OptionList\");\n        this.setState({\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          lstModuleSorting: moduleList\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  updateStore,\n  crudMaster,\n  saveExecutionOrder,\n  formSortingService1,\n  formModuleGetSorting,\n  moduleSortingOrder1\n})(injectIntl(Sorting));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/credentialmanagement/Sorting.jsx"],"names":["React","connect","injectIntl","Row","Col","callService","updateStore","crudMaster","formSortingService1","formModuleGetSorting","moduleSortingOrder1","saveExecutionOrder","getControlMap","constructOptionList","FormSelectSearch","SortableItemUI","sortData","Sortable","DEFAULT_RETURN","LocalizationProvider","ListBoxDraggable","mapStateToProps","state","Login","Sorting","Component","constructor","props","onComboChange","comboData","fieldName","selectedRecord","bool","inputData","nmenucode","value","userinfo","userInfo","primarykey","boolValue","masterData","url","nmodulecode","item","primarykey1","setState","booleanValue","btnControl1","btnControl","updateInfo","typeName","data","displayName","intl","formatMessage","id","formRef","createRef","extractedColumnList","masterStatus","error","isOpen","userRoleControlRights","controlMap","Map","render","masterdata","float","marginRight","lstMenuSorting","SelectedMenuSorting","label","event","lstModuleSorting","SelectedModuleSorting","language","changedValues","componentDidUpdate","previousProps","nformcode","Object","values","map","push","ncontrolcode","menuMap","MenuList","undefined","get","moduleMap","moduleList"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { callService, updateStore, crudMaster, formSortingService1, formModuleGetSorting, moduleSortingOrder1,saveExecutionOrder } from '../../actions';\r\nimport { getControlMap, constructOptionList } from '../../components/CommonScript';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport SortableItemUI from './FormModuleSortingConfig';\r\nimport { sortData } from '../../components/CommonScript';\r\nimport { Sortable } from \"@progress/kendo-react-sortable\";\r\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\r\nimport {  LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport ListBoxDraggable from '../../components/ListBoxDraggable';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Sorting extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n\r\n        this.state = {\r\n            masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            data : [],\r\n            bool : 1,\r\n            btnControl : \"primary disabled\",\r\n            btnControl1 : \"primary active\"\r\n        };\r\n    };\r\n\r\n    render() {\r\n\r\n        // if (this.props.Login.inputParam !== undefined) {\r\n\r\n        //     this.extractedColumnList = []\r\n        // }\r\n\r\n         let masterdata = {...this.props.Login.masterData};\r\n        // delete(masterdata.MenuList);\r\n        // delete(masterdata.SelectedMenuSorting);\r\n        // delete(masterdata.SelectedModuleSorting);\r\n        // delete(masterdata.moduleList);\r\n        // delete(masterdata.nFlag); \r\n        // delete(masterdata.formsList); \r\n\r\n        // let palettes=masterdata && Object.keys(masterdata);\r\n        // const masterdata1 = [];\r\n        // const palettes2 = [];\r\n\r\n        // if(this.state.bool == 1){\r\n        //     this.props.Login.masterData.nFlag === 1 || this.props.Login.nFlag ===1 ?\r\n        // masterdata1.push(...this.props.Login.masterData.SelectedModuleSorting && this.props.Login.masterData.SelectedModuleSorting) :\r\n        // palettes.map(item => this.props.Login.masterData.SelectedModuleSorting && this.props.Login.masterData.SelectedModuleSorting.map(\r\n        //     item1 =>item === item1.smodulename ? masterdata1.push(item1) : \"\"))\r\n\r\n        // let m1 = Object.keys(masterdata1);\r\n\r\n        // let m2 = \r\n        // m1.map((item)=>({\r\n        //     smodulename : masterdata1[item].smodulename,\r\n        //     nsorter : masterdata1[item].nsorter,\r\n        //     nmodulecode : masterdata1[item].nmodulecode,\r\n        //     sdisplayname : masterdata1[item].sdisplayname\r\n        // })) \r\n\r\n        // const palettes1 = Object.values(m2.map((item)=>item));\r\n\r\n        // palettes1 && palettes1.map((item, index)=>{\r\n        //     let formList =masterdata[item.smodulename]\r\n        //     sortData(masterdata[item.smodulename],'ascending','nsorter')\r\n        //     palettes2.push({\r\n        //       data: formList,\r\n        //       name: item.sdisplayname,\r\n        //       id: index,\r\n        //       nmoduleSorter: item.nsorter,\r\n        //       nmodulecode : item.nmodulecode\r\n        //     })  \r\n        //   })\r\n        // }\r\n        // else if(this.state.bool == 2){\r\n        //     this.props.Login.masterData.nFlag === 1 || this.props.Login.nFlag ===1 ?\r\n        //     masterdata1.push(...this.props.Login.masterData.SelectedMenuSorting) :\r\n        //     palettes.map(item => this.props.Login.masterData.SelectedMenuSorting.map(\r\n        //         item1 =>item === item1.smenuname ? masterdata1.push(item1) : \"\"))\r\n    \r\n        //     let m1 = Object.keys(masterdata1);\r\n    \r\n        //     let m2 = \r\n        //     m1.map((item)=>({\r\n        //         smenuname : masterdata1[item].smenuname,\r\n        //         nsorter : masterdata1[item].nsorter,\r\n        //         nmenucode : masterdata1[item].nmenucode,\r\n        //         sdisplayname : masterdata1[item].sdisplayname\r\n        //     })) \r\n    \r\n        //     const palettes1 = Object.values(m2.map((item)=>item));\r\n    \r\n        //         palettes1 && palettes1.map((item, index)=>{\r\n        //         let formList =masterdata[item.smenuname]\r\n        //         sortData(masterdata[item.smenuname],'ascending','nsorter')\r\n        //         palettes2.push({\r\n        //           data: formList,\r\n        //           name: item.sdisplayname,\r\n        //           id: index,\r\n        //           nmenuSorter: item.nsorter,\r\n        //           nmenucode : item.nmenucode\r\n        //         })  \r\n        //       })\r\n        // }\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-5\">\r\n                    <button className={\"btn btn-\"+(this.state.btnControl)+\" btn-padd-custom\"} style={{ float: \"right\", marginRight : \"35px\" }}\r\n                    onClick={() => this.booleanValue('moduleSorting') }>{this.props.intl.formatMessage({ id: \"IDS_MODULE\" })}</button>\r\n                    <button className={\"btn btn-\"+(this.state.btnControl1)+\" btn-padd-custom\"} style={{ float: \"right\", marginRight : \"35px\" }}\r\n                    onClick={() => this.booleanValue('formSorting')}>{this.props.intl.formatMessage({ id: \"IDS_FORM\" })}</button>\r\n                    <Row>\r\n                    <Col md={3}>\r\n                        <FormSelectSearch\r\n                            name={\"nmenucode\"}\r\n                            formLabel={this.props.intl.formatMessage({ id: \"IDS_MENU\" })}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            options={sortData(this.state.lstMenuSorting,'ascending','value') || []}\r\n                            value={this.props.Login.masterData && this.props.Login.masterData.SelectedMenuSorting\r\n                            && {\r\n                            value: this.props.Login.masterData.SelectedMenuSorting? this.props.Login.masterData.SelectedMenuSorting['nmenucode'] :\"\",\r\n                            label: this.props.Login.masterData.SelectedMenuSorting? this.props.Login.masterData.SelectedMenuSorting['sdisplayname'] : \"\"\r\n                            }}\r\n                            isMandatory={true}\r\n                            isMulti={false}\r\n                            isClearable={false}\r\n                            isSearchable={true}\r\n                            isDisabled={false}\r\n                            closeMenuOnSelect={true}\r\n                            className=\"mb-2\"\r\n                            onChange={(event) => this.onComboChange(event, 'nmenucode')}\r\n                            maxMenuHeight={150}\r\n                        /></Col>\r\n                        {this.state.bool === 1 ?\r\n                        <Col md={3}>\r\n                        <FormSelectSearch\r\n                            name={\"nmodulecode\"}\r\n                            formLabel={this.props.intl.formatMessage({ id: \"IDS_MODULE\" })}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            options={ sortData(this.state.lstModuleSorting,'ascending','value') || []}\r\n                            value={this.props.Login.masterData && this.props.Login.masterData.SelectedModuleSorting\r\n                            && {\r\n                            value: this.props.Login.masterData.SelectedModuleSorting? this.props.Login.masterData.SelectedModuleSorting['nmodulecode'] : \"\",\r\n                            label: this.props.Login.masterData.SelectedModuleSorting? this.props.Login.masterData.SelectedModuleSorting['sdisplayname'] : \"\",\r\n                            }}\r\n                            isMandatory={true}\r\n                            isMulti={false}\r\n                            isClearable={false}\r\n                            isSearchable={true}\r\n                            isDisabled={false}\r\n                            closeMenuOnSelect={true}\r\n                            className=\"mb-2\"\r\n                            onChange={(event) => this.onComboChange(event, 'nmodulecode')}\r\n                            maxMenuHeight={150}\r\n                        /></Col>: \"\"}\r\n                        </Row>\r\n                        <Col md={10}>\r\n                    {this.props.Login.masterData.SelectedMenuSorting || this.props.Login.masterData.SelectedModuleSorting ? \r\n                    <LocalizationProvider language={this.props.Login.language}>\r\n                    {/* <Sortable\r\n                    idField={\"id\"}\r\n                    data={palettes2 || []}\r\n                    itemUI={SortableItemUI}\r\n                    onDragOver={this.onDragOver}\r\n                    onNavigate={this.onNavigate}\r\n                    masterdata={masterdata}\r\n                  /> */}\r\n                           <ListBoxDraggable\r\n                        masterList={this.state.bool === 1?sortData(masterdata['QualisForms'],'ascending','nsorter')|| []: sortData(masterdata['QualisModules'],'ascending','nsorter')} \r\n                        mainField={ \"sdisplayname\"} \r\n                        hideSearch={true}\r\n                        primaryKeyField=\"nsorter\"\r\n                        sortableField={'nsorter'} \r\n                        userInfo={this.props.Login.userInfo} \r\n                        masterData={masterdata}\r\n                        saveExecutionOrder=    { this.state.bool === 1?(props)=>{this.props.formSortingService1({\r\n                            inputData: {\r\n                               userinfo: this.props.Login.userInfo,\r\n                               primarykey:  this.props.Login.masterData.SelectedModuleSorting&&this.props.Login.masterData.SelectedModuleSorting['nmenucode'],\r\n                               nmodulecode:  this.props.Login.masterData.SelectedModuleSorting&&this.props.Login.masterData.SelectedModuleSorting['nmodulecode'],\r\n                               changedValues : props\r\n                           },\r\n                           masterData: this.props.masterData,\r\n                           url: \"sorting/updateForms\"\r\n                       })} :(props)=>{   this.props.moduleSortingOrder1({\r\n                        inputData: {\r\n                           userinfo: this.props.Login.userInfo,\r\n                           primarykey: this.props.Login.masterData.SelectedMenuSorting&&this.props.Login.masterData.SelectedMenuSorting['nmenucode'],\r\n                          changedValues : props\r\n                       },\r\n                       masterData: this.props.masterData,\r\n                       url: \"sorting/updateModules\"\r\n                    }) }} \r\n                        >\r\n                        </ListBoxDraggable>\r\n                  </LocalizationProvider>\r\n                   : \"\"}\r\n                    </Col>                                                                 \r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                const menuMap = constructOptionList(this.props.Login.masterData.MenuList || [], \"nmenucode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const MenuList = menuMap.get(\"OptionList\");\r\n                const moduleMap = constructOptionList(this.props.Login.masterData.moduleList || [], \"nmodulecode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const moduleList = moduleMap.get(\"OptionList\");\r\n\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, lstMenuSorting: MenuList, lstModuleSorting: moduleList,\r\n                });\r\n            }\r\n            else {\r\n                const moduleMap = constructOptionList(this.props.Login.masterData.moduleList || [], \"nmodulecode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const moduleList = moduleMap.get(\"OptionList\");\r\n\r\n                this.setState({\r\n                    isOpen: false,\r\n                    selectedRecord: this.props.Login.selectedRecord,lstModuleSorting: moduleList\r\n                });\r\n            }\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n\r\n        if(this.state.bool === 1){\r\n        if (fieldName === \"nmenucode\") {\r\n            this.props.formSortingService1({\r\n                inputData: {\r\n                    nmenucode: selectedRecord.nmenucode.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    primarykey: selectedRecord.nmenucode.value,\r\n                    boolValue: 1\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                url:\"sorting/getFilter\"\r\n            });\r\n        }\r\n    }\r\n    else if(this.state.bool === 2){\r\n        if (fieldName === \"nmenucode\") {\r\n            this.props.formSortingService1({\r\n                inputData: {\r\n                    nmenucode: selectedRecord.nmenucode.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    primarykey: selectedRecord.nmenucode.value,\r\n                    boolValue: 2\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                url:\"sorting/getFilter\"\r\n            });\r\n        }      \r\n    }\r\n        if(fieldName === \"nmodulecode\"){\r\n            this.props.formSortingService1({\r\n                inputData: {\r\n                    nmenucode: selectedRecord.nmodulecode.item.nmenucode,\r\n                    nmodulecode: selectedRecord.nmodulecode.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    primarykey: selectedRecord.nmodulecode.item.nmenucode,\r\n                    primarykey1: selectedRecord.nmodulecode.value,\r\n                    boolValue: 1\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                url:\"sorting/getFilter1\"\r\n            });\r\n        }\r\n        else{\r\n            this.setState({ selectedRecord });\r\n        } \r\n    }\r\n          \r\n    // onNavigate = (event) => {\r\n    //     this.setState({\r\n    //       palettes: event.newState,\r\n    //     });\r\n    //   };\r\n\r\n      booleanValue = (fieldName) => {\r\n          if(fieldName == \"formSorting\"){\r\n              this.setState({\r\n                  bool:1,\r\n                  btnControl1:\"primary active\",\r\n                  btnControl:\"primary disabled\"\r\n              })\r\n\r\n              const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    boolValue: 1,\r\n                    displayName: this.props.intl.formatMessage({ id: \"IDS_SCREENORGANISINGFORM\" }),\r\n                    }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            this.props.Login.masterData[\"nFlag\"] = 0;\r\n\r\n              this.props.formModuleGetSorting({\r\n                inputData: {\r\n                    boolValue:1,\r\n                    userinfo: this.props.Login.userInfo,\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                url:\"sorting/getSorting\"\r\n            });\r\n          }\r\n          else if(fieldName == \"moduleSorting\"){\r\n              this.setState({\r\n                  bool:2,\r\n                  btnControl:\"primary active\",\r\n                  btnControl1:\"primary disabled\"\r\n              })\r\n\r\n              const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    boolValue: 2,\r\n                    displayName: this.props.intl.formatMessage({ id: \"IDS_SCREENORGANISINGMODULE\" }),\r\n                    }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            this.props.Login.masterData[\"nFlag\"] = 0;\r\n\r\n              this.props.formModuleGetSorting({\r\n                inputData: {\r\n                    boolValue:2,\r\n                    userinfo: this.props.Login.userInfo,\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                url:\"sorting/getSorting\"\r\n            });\r\n          }\r\n      }\r\n}\r\n\r\nexport default connect(mapStateToProps, { callService, updateStore, crudMaster,saveExecutionOrder, formSortingService1, formModuleGetSorting, moduleSortingOrder1 })(injectIntl(Sorting));\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}