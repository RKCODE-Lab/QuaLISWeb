{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\ConfigureEditFields.jsx\";\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport React from 'react';\nimport { injectIntl, FormattedMessage } from 'react-intl'; // import ReactTooltip from 'react-tooltip';\n\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\nimport { ReadOnlyText } from '../../components/App.styles';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport Tabs, { TabPane } from \"rc-tabs\";\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport { formCode, SampleType } from '../../components/Enumeration';\nimport 'rc-tabs/assets/index.css';\nimport { Col, Row, Card } from 'react-bootstrap';\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\n\nclass ConfigureEditFields extends React.Component {\n  constructor(props) {\n    super(props); //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n\n    this.onTabChange = tab => {\n      this.setState({\n        selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\n      });\n    };\n\n    const screens = [];\n\n    if (this.props.selectedSampleType === SampleType.PROTOCOL) {\n      screens.push({\n        eventKey: 'protocol',\n        name: \"IDS_PROTOCOL\",\n        formcode: formCode.PROTOCOL\n      });\n    } else {\n      screens.push({\n        eventKey: 'registration',\n        name: \"IDS_SAMPLEREGISTRATION\",\n        formcode: formCode.SAMPLEREGISTRATION\n      });\n    } // if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedjoballocation === true)  {\n    //     screens.push({ eventKey: 'joballocation', name: \"IDS_JOBALLOCATION\", formcode: formCode.JOBALLOCATION });\n    // }\n    // if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedmyjob === true) {\n    //     screens.push({ eventKey: 'myjobs', name: \"IDS_MYJOBS\", formcode: formCode.MYJOBS });\n    // }\n    // screens.push({ eventKey: 'resultentry', name: \"IDS_RESULTENTRY\", formcode: formCode.RESULTENTRY },\n    //             { eventKey: 'approval', name: \"IDS_APPROVAL\", formcode: formCode.APPROVAL });\n\n\n    let extractedColumnList = [];\n\n    if (this.props.selectedTemplateType === SampleType.Masters) {\n      extractedColumnList.push({\n        \"title\": \"IDS_GRIDITEM\",\n        \"field\": \"griditem\",\n        \"width\": \"600px\"\n      }, {\n        \"title\": \"IDS_GRIDMOREITEM\",\n        \"field\": \"gridmoreitem\",\n        \"width\": \"600px\"\n      });\n    } //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n\n\n    if (this.props.selectedSampleType === SampleType.PROTOCOL) {\n      extractedColumnList.push({\n        \"title\": \"IDS_LISTITEM\",\n        \"field\": \"listItem\",\n        \"width\": \"600px\"\n      }, {\n        \"title\": \"IDS_DISPLAYFIELDS\",\n        \"field\": \"displayFields\",\n        \"width\": \"600px\"\n      });\n    } else {\n      extractedColumnList.push({\n        \"title\": \"IDS_EDITABLESTATUS\",\n        \"field\": \"editablestatus\",\n        \"width\": \"600px\"\n      });\n    }\n\n    this.state = {\n      screens,\n      extractedColumnList,\n      // selectedScreen: { eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: 43 }\n      //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n      selectedScreen: this.props.selectedSampleType === SampleType.PROTOCOL ? {\n        eventKey: 'protocol',\n        name: \"IDS_PROTOCOL\",\n        formcode: formCode.PROTOCOL\n      } : {\n        eventKey: 'registration',\n        name: \"IDS_SAMPLEREGISTRATION\",\n        formcode: 43\n      }\n    };\n  }\n\n  render() {\n    //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n    let dataResult = {};\n\n    if (this.props.selectedSampleType === SampleType.PROTOCOL) {\n      dataResult = this.props.dataResult;\n    } else {\n      dataResult = this.props.dataResult[this.state.selectedScreen.formcode];\n    } //console.log(\"props:\",this.props)\n    //console.log(\" this.props.dataResult[this.state.selectedScreen.formcode]:\", this.props.dataResult[this.state.selectedScreen.formcode]);\n\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.selectedTemplateType === SampleType.Masters ? /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null)))) : /*#__PURE__*/React.createElement(AtTabs, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      activeKey: this.state.selectedScreen.eventKey,\n      moreIcon: \"...\",\n      onChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, this.state.screens.map(screen => /*#__PURE__*/React.createElement(TabPane, {\n      name: screen.eventKey,\n      tab: this.props.intl.formatMessage({\n        id: screen.name\n      }),\n      key: screen.eventKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_FIELDS\",\n      message: \"Fields\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 69\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EDITABLESTATUS\",\n      message: \"Editable Status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 69\n      }\n    }))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 54\n      }\n    }, dataResult.map((item, index) => /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 61\n      }\n    }, \" \", item.label, \" \")), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormMultiSelect, {\n      name: item.label //label={this.props.intl.formatMessage({ id: item.label + \"_\" + index})}\n      ,\n      options: item.editablestatus || [],\n      optionId: \"ntransactionstatus\",\n      optionValue: \"stransdisplaystatus\" //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n      ,\n      value: this.props.selectedSampleType === SampleType.PROTOCOL ? this.props.selectedRecord ? this.props.selectedRecord[item.label] || [] : [] : this.props.selectedRecord && this.props.selectedRecord[this.state.selectedScreen.formcode] ? this.props.selectedRecord[this.state.selectedScreen.formcode][item.label] || [] : [] // value={this.props.selectedRecord \n      //      && this.props.selectedRecord \n      //      ? this.props.selectedRecord[item.label]  || []: []}\n      ,\n      isMandatory: false,\n      isClearable: true,\n      disableSearch: false,\n      disabled: false,\n      closeMenuOnSelect: false,\n      alphabeticalSort: true,\n      onChange: event => this.props.onComboChange(event, this.state.selectedScreen.formcode, item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 65\n      }\n    }))))))))))))));\n  }\n\n}\n\nexport default injectIntl(ConfigureEditFields);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/designtemplatemapping/ConfigureEditFields.jsx"],"names":["LocalizationProvider","React","injectIntl","FormattedMessage","AtTabs","ReadOnlyText","PerfectScrollbar","Tabs","TabPane","AtTableWrap","formCode","SampleType","Col","Row","Card","FormMultiSelect","ConfigureEditFields","Component","constructor","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","selectedSampleType","PROTOCOL","push","name","formcode","SAMPLEREGISTRATION","extractedColumnList","selectedTemplateType","Masters","render","dataResult","map","intl","formatMessage","id","item","index","label","editablestatus","selectedRecord","event","onComboChange"],"mappings":"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","sourcesContent":["import { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport React from 'react'\r\nimport { injectIntl,FormattedMessage } from 'react-intl'\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport {  ReadOnlyText } from '../../components/App.styles';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Tabs, { TabPane } from \"rc-tabs\";\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { formCode, SampleType } from '../../components/Enumeration';\r\nimport 'rc-tabs/assets/index.css';\r\nimport { Col, Row ,Card} from 'react-bootstrap';\r\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\r\n\r\nclass ConfigureEditFields extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n        const  screens = [];\r\n\r\n            if(this.props.selectedSampleType === SampleType.PROTOCOL){\r\n                screens.push({ eventKey: 'protocol', name: \"IDS_PROTOCOL\", formcode: formCode.PROTOCOL });\r\n            }else{\r\n                screens.push({ eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: formCode.SAMPLEREGISTRATION });\r\n            }\r\n           \r\n           \r\n        \r\n        // if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedjoballocation === true)  {\r\n        //     screens.push({ eventKey: 'joballocation', name: \"IDS_JOBALLOCATION\", formcode: formCode.JOBALLOCATION });\r\n        // }\r\n\r\n        // if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedmyjob === true) {\r\n        //     screens.push({ eventKey: 'myjobs', name: \"IDS_MYJOBS\", formcode: formCode.MYJOBS });\r\n        // }\r\n\r\n        // screens.push({ eventKey: 'resultentry', name: \"IDS_RESULTENTRY\", formcode: formCode.RESULTENTRY },\r\n        //             { eventKey: 'approval', name: \"IDS_APPROVAL\", formcode: formCode.APPROVAL });\r\n\r\n        let extractedColumnList =[];\r\n        if (this.props.selectedTemplateType === SampleType.Masters){\r\n            extractedColumnList.push(              \r\n                { \"title\": \"IDS_GRIDITEM\", \"field\": \"griditem\", \"width\": \"600px\" },\r\n                { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"gridmoreitem\", \"width\": \"600px\" }\r\n            );\r\n        }\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n        if (this.props.selectedSampleType === SampleType.PROTOCOL){\r\n            extractedColumnList.push(              \r\n                { \"title\": \"IDS_LISTITEM\", \"field\": \"listItem\", \"width\": \"600px\" },\r\n                { \"title\": \"IDS_DISPLAYFIELDS\", \"field\": \"displayFields\", \"width\": \"600px\" }\r\n            );\r\n        }\r\n        else{\r\n            extractedColumnList.push(\r\n                { \"title\": \"IDS_EDITABLESTATUS\", \"field\": \"editablestatus\", \"width\": \"600px\" },\r\n               \r\n            );\r\n        }\r\n          \r\n       \r\n        \r\n        this.state = {\r\n            screens,\r\n            extractedColumnList,\r\n           // selectedScreen: { eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: 43 }\r\n           //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n            selectedScreen: this.props.selectedSampleType === SampleType.PROTOCOL ?\r\n                            { eventKey: 'protocol', name: \"IDS_PROTOCOL\", formcode: formCode.PROTOCOL } : \r\n                            { eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: 43 }\r\n        }\r\n    }\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n\r\n        let dataResult ={};\r\n        if(this.props.selectedSampleType === SampleType.PROTOCOL){\r\n            dataResult = this.props.dataResult;\r\n        }else {\r\n            dataResult = this.props.dataResult[this.state.selectedScreen.formcode];\r\n        }  \r\n      \r\n        //console.log(\"props:\",this.props)\r\n        //console.log(\" this.props.dataResult[this.state.selectedScreen.formcode]:\", this.props.dataResult[this.state.selectedScreen.formcode]);\r\n        return (\r\n            <>\r\n            {this.props.selectedTemplateType === SampleType.Masters  ?\r\n                    <PerfectScrollbar>\r\n                        {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                        <AtTableWrap className=\"at-list-table\">\r\n                            <LocalizationProvider language=\"lang\">\r\n                                <>\r\n                                    \r\n                                </>\r\n                            </LocalizationProvider>\r\n                        </AtTableWrap>\r\n                        {/* <ReactTooltip /> */}\r\n                    </PerfectScrollbar>        \r\n\r\n                :\r\n                <AtTabs>\r\n                    <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                        {this.state.screens.map(screen =>\r\n                            <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n                                <PerfectScrollbar>\r\n                                    {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                                    <AtTableWrap className=\"at-list-table\">\r\n                                        <LocalizationProvider language=\"lang\">\r\n                                            {/* <>\r\n                                            <Grid\r\n                                                    className={\"active-paging\"}\r\n                                                    style={{ height: '550px' }}\r\n                                                    resizable\r\n                                                    reorderable\r\n                                                    scrollable={\"scrollable\"}\r\n                                                    // pageable={{ buttonCount: 5, pageSizes: 4, previousNext: false }}\r\n                                                    data={this.props.dataResult[this.state.selectedScreen.formcode]}\r\n                                                    {...this.state.dataState}\r\n                                                    onDataStateChange={this.dataStateChange}>\r\n                                                    <GridColumn\r\n                                                        field=\"label\"\r\n                                                        title={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                        cell={(row) => (\r\n                                                            <td data-tip={row[\"dataItem\"]['label']} data-for=\"tooltip-grid-wrap\">\r\n                                                                {row[\"dataItem\"]['label']}\r\n                                                            </td>\r\n                                                        )}\r\n                                                    />\r\n                                                    {this.state.extractedColumnList.map(column =>\r\n                                                        <GridColumn\r\n                                                            field={column.field}\r\n                                                            title={this.props.intl.formatMessage({ id: column.title })}\r\n                                                            headerClassName=\"text-center\"\r\n                                                            cell={(row) => (\r\n                                                                <td style={{ textAlign: \"center\" }} data-tip={this.props.intl.formatMessage({ id: column.title })} data-for=\"tooltip-grid-wrap\">\r\n                                                                    {/* <CustomSwitch type=\"switch\" id={row[\"dataItem\"][column.field]}\r\n                                                                        onChange={(event) => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex, this.state.selectedScreen.formcode,this.props.operation)}\r\n                                                                        checked={row[\"dataItem\"][column.field] || false}\r\n                                                                        name={row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                                 */}\r\n                                                                    {/* <FormMultiSelect\r\n                                                                            name={row[\"dataItem\"][\"label\"]}\r\n                                                                            options={row[\"dataItem\"][column.field] || []}\r\n                                                                            optionId={\"ntransactionstatus\"}\r\n                                                                            optionValue={\"stransdisplaystatus\"}\r\n                                                                            value={this.props.selectedRecord  && this.props.selectedRecord[this.state.selectedScreen.formcode] ? this.props.selectedRecord[this.state.selectedScreen.formcode][row[\"dataItem\"][\"label\"]]  || []: []}\r\n                                                                            isMandatory={false}\r\n                                                                            isClearable={true}\r\n                                                                            disableSearch={false}\r\n                                                                            disabled={false}\r\n                                                                            closeMenuOnSelect={false}\r\n                                                                            alphabeticalSort={true}\r\n                                                                            onChange={(event) => this.props.onComboChange(event, this.state.selectedScreen.formcode, row[\"dataItem\"])}\r\n                                                                    />\r\n                                                                </td>)}\r\n                                                        />\r\n                                                    )}\r\n\r\n                                            </Grid> */}\r\n                                            {/* </>  */}\r\n                                            <Card className=\"border-0\">\r\n                                               \r\n                                                <Card.Header>\r\n                                                    <Row>\r\n                                                            <Col md={6}>\r\n                                                                <ReadOnlyText>\r\n                                                                    <FormattedMessage id=\"IDS_FIELDS\" message=\"Fields\" />\r\n                                                                </ReadOnlyText>\r\n                                                            </Col>\r\n                                                            <Col md={6}>\r\n                                                                <ReadOnlyText>\r\n                                                                    <FormattedMessage id=\"IDS_EDITABLESTATUS\" message=\"Editable Status\" />\r\n                                                                </ReadOnlyText>\r\n                                                            </Col>\r\n                                                    </Row>\r\n                                                    </Card.Header>\r\n                                                     <Card.Body>\r\n\r\n                                                    {/*Added by sonia on 11th NOV 2024 for jira id:ALPD-5025*/}\r\n                                                    {dataResult.map((item, index)=>\r\n                                                                                           \r\n                                                        <Row>\r\n                                                            <Col md={6}>\r\n                                                            {/* <FormGroup> */}\r\n                                                            <ReadOnlyText> {item.label} </ReadOnlyText> \r\n                                                            \r\n                                                            </Col>\r\n                                                            <Col md={6}>\r\n                                                                <FormMultiSelect\r\n                                                                        name={item.label}\r\n                                                                        //label={this.props.intl.formatMessage({ id: item.label + \"_\" + index})}\r\n                                                                        options={item.editablestatus || []}\r\n                                                                        optionId={\"ntransactionstatus\"}\r\n                                                                        optionValue={\"stransdisplaystatus\"}\r\n\r\n\r\n                                                                        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n                                                                        value = { this.props.selectedSampleType === SampleType.PROTOCOL ? \r\n                                                                            this.props.selectedRecord ? this.props.selectedRecord[item.label]  || []: []\r\n                                                                                : this.props.selectedRecord && this.props.selectedRecord[this.state.selectedScreen.formcode] \r\n                                                                            ? this.props.selectedRecord[this.state.selectedScreen.formcode][item.label]  || []: []\r\n\r\n                                                                        }\r\n\r\n\r\n                                                                        // value={this.props.selectedRecord \r\n                                                                        //      && this.props.selectedRecord \r\n                                                                        //      ? this.props.selectedRecord[item.label]  || []: []}\r\n                                                                        isMandatory={false}\r\n                                                                        isClearable={true}\r\n                                                                        disableSearch={false}\r\n                                                                        disabled={false}\r\n                                                                        closeMenuOnSelect={false}\r\n                                                                        alphabeticalSort={true}\r\n                                                                        onChange={(event) => this.props.onComboChange(event, this.state.selectedScreen.formcode, item)}\r\n                                                                /> \r\n                                                                {/* </FormGroup> */}\r\n                                                             </Col>\r\n                                                        </Row>\r\n                                                            )\r\n                                                        }\r\n                                                    </Card.Body> \r\n                                                </Card>\r\n                                              \r\n                                            \r\n                                        </LocalizationProvider>\r\n                                    </AtTableWrap>\r\n                                    {/* <ReactTooltip /> */}\r\n                                </PerfectScrollbar>\r\n                            </TabPane>\r\n                        )}\r\n                    </Tabs>\r\n                </AtTabs>\r\n            }\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(ConfigureEditFields)"]},"metadata":{},"sourceType":"module"}