{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, replaceUpdatedObject, sortData, fillRecordBasedOnCheckBoxSelection, getSameRecordFromTwoArrays, getRecordBasedOnPrimaryKeyName, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, rearrangeDateFormat } from '../components/CommonScript';\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\nimport Axios from 'axios';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getRegTypeJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getRegistrationTypeBySampleType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultSampleTypeValue: inputData.defaultSampleTypeValue,\n            realDesignTemplateMappingValue: inputData.realDesignTemplateMappingValue,\n            realDynamicDesignMappingList: inputData.realDynamicDesignMappingList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegSubTypeJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultRegTypeValue: inputData.defaultRegTypeValue,\n            realDesignTemplateMappingValue: inputData.realDesignTemplateMappingValue,\n            realDynamicDesignMappingList: inputData.realDynamicDesignMappingList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAppConfigVersionJobAllocation(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\n            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue,\n            realDesignTemplateMappingValue: inputParam.inputData.realDesignTemplateMappingValue,\n            realDynamicDesignMappingList: inputParam.inputData.realDynamicDesignMappingList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getTestComboBySection\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatusJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getTestComboBySection\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatusSectionJobAllocation(inputData) {\n  return function (dispatch) {\n    const testStatusService = rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData);\n    const sectionService = rsapi.post(\"joballocation/getSectionByApproveVersion\", inputData);\n    let urlArray = [];\n    urlArray = [testStatusService, sectionService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getDesignTemplateJobAllocation(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getDesignTemplateByApprovalConfigVersion\", inputParam).then(response => {\n      if (response.data[\"Success\"]) {\n        toast.warn(response.data.Success);\n      }\n\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            defaultApprovalVersionValue: inputParam.masterData.defaultApprovalVersionValue,\n            ApprovalVersionValue: inputParam.masterData.realApprovalVersionValue,\n            realDesignTemplateMappingValue: inputParam.realDesignTemplateMappingValue,\n            realDynamicDesignMappingList: inputParam.realDynamicDesignMappingList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestStatusJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getJobAllcationFilterSubmit(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getJobAllocationDetails\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showTest: inputParam.inputData.showTest,\n          activeTestTab: inputParam.inputData.activeTestTab,\n          showFilter: false,\n          sampleskip: 0,\n          sampletake: inputParam.sampletake,\n          subsampleskip: 0,\n          subsampletake: inputParam.subsampletake,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function ReceiveinLabStatusWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/CreateReceiveinLab\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_SAMPLE\"], inputParam.inputData.masterData.JA_SAMPLE, \"nregistrationsectioncode\");\n        replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"], inputParam.inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_SAMPLE\"];\n        delete response.data[\"JA_SUBSAMPLE\"];\n        delete response.data[\"JA_TEST\"];\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedSample: replaceUpdatedObject(response.data[\"JASelectedSample\"], inputParam.inputData.masterData.JASelectedSample, \"nregistrationsectioncode\"),\n          JASelectedSubSample: replaceUpdatedObject(response.data[\"JASelectedSubSample\"], inputParam.inputData.masterData.JASelectedSubSample, \"ntransactionsamplecode\"),\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      //toast.error(error.message); \n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAllottedTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getAllotDetails\", inputParam.inputData).then(response => {\n      const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\", \"stechniquename\", undefined, undefined, false);\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\", \"speriodname\", undefined, undefined, false);\n      const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, false);\n      const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\n      const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\", \"speriodname\", undefined, undefined, false);\n      const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\n      const Technique = TechniqueMap.get(\"OptionList\");\n      const Users = UsersMap.get(\"OptionList\");\n      const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\n      const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\n      const Instrument = InstrumentMap.get(\"OptionList\");\n      const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\n      let selectedRecord = {};\n      selectedRecord[\"scomments\"] = \"\";\n      selectedRecord[\"suserholdduration\"] = \"\";\n      selectedRecord[\"sinstrumentholdduration\"] = \"\";\n      selectedRecord[\"duserblockfromdatetime\"] = new Date(); //selectedRecord [\"dinstblockfromdatetime\"] = new Date();\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Technique,\n          Users,\n          UsersPeriod,\n          InstrumentCategory,\n          Instrument,\n          InstrumentPeriod,\n          currentTime,\n          selectedRecord,\n          isOpen: true,\n          operation: inputParam.inputData.operation,\n          screenName: inputParam.inputData.screenName,\n          openModal: true,\n          ncontrolCode: inputParam.inputData.ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAllotAnotherUserTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getAllotAnotherUserDetails\", inputParam.inputData).then(response => {\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\", \"speriodname\", undefined, undefined, false);\n      const Users = UsersMap.get(\"OptionList\");\n      const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\n      const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\n      const Technique = response.data.Technique && response.data.Technique[0].stechniquename;\n      const TechniqueCode = response.data.Technique && response.data.Technique[0].ntechniquecode;\n      let selectedRecord = {};\n      selectedRecord[\"scomments\"] = \"\";\n      selectedRecord[\"suserholdduration\"] = \"\";\n      selectedRecord[\"sinstrumentholdduration\"] = \"\";\n      selectedRecord[\"duserblockfromdatetime\"] = new Date();\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Technique,\n          TechniqueCode,\n          Users,\n          UsersPeriod,\n          currentTime,\n          selectedRecord,\n          isOpen: true,\n          operation: inputParam.inputData.operation,\n          screenName: inputParam.inputData.screenName,\n          openModal: true,\n          ncontrolCode: inputParam.inputData.ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRescheduleTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getRescheduledDetails\", inputParam.inputData).then(response => {\n      const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\", \"stechniquename\", undefined, undefined, false);\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\", \"speriodname\", undefined, undefined, false);\n      const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, false);\n      const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\n      const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\", \"speriodname\", undefined, undefined, false);\n      const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\n      let selectedRecord = {};\n      selectedRecord[\"scomments\"] = \"\";\n      selectedRecord[\"suserholdduration\"] = \"\";\n      selectedRecord[\"sinstrumentholdduration\"] = \"\";\n      selectedRecord[\"duserblockfromdatetime\"] = new Date();\n      const Technique = TechniqueMap.get(\"OptionList\");\n      const Users = UsersMap.get(\"OptionList\");\n      const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\n      const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\n      const Instrument = InstrumentMap.get(\"OptionList\");\n      const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Technique,\n          Users,\n          UsersPeriod,\n          InstrumentCategory,\n          Instrument,\n          InstrumentPeriod,\n          currentTime,\n          selectedRecord,\n          isOpen: true,\n          operation: inputParam.inputData.operation,\n          screenName: inputParam.inputData.screenName,\n          openModal: true,\n          ncontrolCode: inputParam.inputData.ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getInstrument(ninstrumentcatcode, ncalibrationreq, userInfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getInstrumentBasedCategory\", {\n      \"ninstrumentcatcode\": ninstrumentcatcode,\n      \"ncalibrationreq\": ncalibrationreq,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let Instrument = [];\n      const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\n      Instrument = InstrumentMap.get(\"OptionList\");\n\n      if (ninstrumentcatcode !== transactionStatus.NA) {\n        selectedRecord[\"dinstblockfromdatetime\"] = new Date();\n      } else {\n        selectedRecord[\"dinstblockfromdatetime\"] = \"\";\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Instrument,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getUsers(ntechniquecode, JASelectedTest, userInfo, selectedRecord, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getUsersBasedTechnique\", {\n      \"ntechniquecode\": ntechniquecode,\n      \"ssectioncode\": JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample => sample.nsectioncode).join(\",\") : \"\",\n      \"nregtypecode\": JASelectedTest.realRegTypeValue.nregtypecode,\n      \"nregsubtypecode\": JASelectedTest.realRegSubTypeValue.nregsubtypecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let Users = [];\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      Users = UsersMap.get(\"OptionList\");\n      selectedRecord[\"nusercode\"] = \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // masterData:{...masterData},\n          Users,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function ViewAnalystCalendar(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/viewAnalystCalendar\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.inputData.masterData,\n        ...response.data\n      };\n      let Users = [];\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      Users = UsersMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Users,\n          screenName: inputParam.inputData.screenName,\n          loading: false,\n          openModal: true,\n          masterData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function CancelTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/cancelTest\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_TEST\"];\n        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\n          TestView: inputParam.inputData.masterData.TestView\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function AllotJobAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/AllotJobCreate\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_TEST\"];\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\n          TestView: replaceUpdatedObject(response.data[\"TestView\"], inputParam.inputData.masterData.TestView, \"ntransactiontestcode\")\n        };\n        let respObject = { ...inputParam.inputData,\n          masterData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function AllotAnotherUserAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/AllotAnotherUserCreate\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_TEST\"];\n        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\n          TestView: inputParam.inputData.masterData.TestView\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function RescheduleJobAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/RescheduleCreate\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_TEST\"];\n        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\n          TestView: inputParam.inputData.masterData.TestView\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function getJobAllocationSubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    //console.log(\"response :\");\n    let arr = []; // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\n    // (item,index) => \n    // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\n    // );\n\n    inputData.JASelectedSample && inputData.JASelectedSample.map(item => {\n      if (!arr.includes(item.nsectioncode)) {\n        arr.push(item.nsectioncode);\n      }\n    });\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(\",\"),\n      nregistrationsectioncode: inputData.nregistrationsectioncode,\n      // ssectioncode : inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\n      nsectioncode: arr.map(item => item).join(\",\"),\n      ntransactionstatus: String(inputData.ntransactionstatus),\n      ntransactiontestcode: \"0\",\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      fromdate: inputData.fromdate,\n      todate: inputData.todate,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      activeSubSampleTab: inputData.activeSubSampleTab,\n      nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedtemplatebasedflow: inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,\n      checkBoxOperation: inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\", { ...inputParamData,\n        checkBoxOperation: inputData.checkBoxOperation\n      }).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData, 'descending', 'ntransactionsamplecode'); // sortData(response.data);\n\n        let oldSelectedTest = inputData.masterData.JASelectedTest;\n        let oldSelectedSubSample = inputData.masterData.JASelectedSubSample;\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray); // inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;  \n        // inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;\n        // inputData.masterData.JA_TEST = response.data.JA_TEST;  \n        // inputData.masterData.JASelectedTest=response.data.JASelectedTest;\n        // inputData.masterData.RegistrationAttachment =response.data.RegistrationAttachment;\n        // inputData.masterData.RegistrationSampleAttachment =response.data.RegistrationSampleAttachment;\n        // inputData.masterData.RegistrationComment =response.data.RegistrationComment;\n        // inputData.masterData.RegistrationSampleComment =response.data.RegistrationSampleComment;\n\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSample: inputData.JASelectedSample\n        };\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake,\n          subsampleskip,\n          subsampletake,\n          sampleskip,\n          sampletake\n        } = inputData; // let bool = false;\n        // Commented bool value because no need to check bool condition to update skipInfo value.\n\n        let skipInfo = {}; // if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n\n        testskip = 0; //     bool = true\n        // }\n\n        subsampleskip = 0; // bool = true\n        // if (bool) {\n\n        skipInfo = {\n          testskip,\n          testtake,\n          subsampleskip,\n          subsampletake,\n          sampleskip,\n          sampletake\n        }; // }\n\n        let RegistrationTestAttachment = [];\n        let RegistrationTestComment = [];\n        let TestView = [];\n        let RegistrationComment = [];\n        let RegistrationSampleAttachment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          let wholeSubSampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n          oldSelectedSubSample = oldSelectedSubSample.filter(item => wholeSubSampleList.includes(item.ntransactionsamplecode)); //ALPD-3398\n          // oldSelectedSubSample.forEach((subsample, index) => {\n          //     if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n          //         oldSelectedSubSample.splice(index, 1)\n          //     }\n          // })\n\n          if (oldSelectedSubSample.length > 0) {\n            masterData = { ...masterData,\n              JASelectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.ntransactiontestcode)); //ALPD-3398\n          // oldSelectedTest.map((test, index) => {\n          //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n          //         oldSelectedTest.splice(index, 1)\n          //     }\n          //     return null;\n          // })\n\n          let keepOld = false;\n          let ntransactiontestcode;\n          let npreregno;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              JASelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\n            npreregno = masterData.JASelectedSample[0].npreregno;\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTVIEW\":\n              TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestView\";\n              dataStateName = \"testViewDataState\";\n              break;\n\n            default:\n              RegistrationComment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"npreregno\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \" testAttachmentDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTVIEW\":\n              dbData = response.data.TestView || [];\n              list = [...inputData.masterData.TestView, ...dbData];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              dbData = response.data.RegistrationComment || [];\n              list = [...inputData.masterData.RegistrationComment, ...dbData];\n              RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\");\n              break;\n\n            default:\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          let list = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTVIEW\":\n              list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestView\";\n              dataStateName = \"testViewDataState\";\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n              activeName = \"RegistrationComment\";\n              dataStateName = \"sampleCommentsDataState\";\n              break;\n\n            default:\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n          }\n        } else {\n          let list = [];\n\n          if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\n            let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n            oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.ntransactiontestcode)); //ALPD-3398\n            // oldSelectedTest.map((test, index) => {\n            //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            //         oldSelectedTest.splice(index, 1)\n            //     }\n            //     return null;\n            // })\n\n            let keepOld = false;\n            let ntransactiontestcode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                JASelectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\n            }\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTVIEW\":\n              list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestView\";\n              dataStateName = \"testViewDataState\";\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\n              RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\");\n              activeName = \"RegistrationComment\";\n              dataStateName = \"sampleChangeDataState\";\n              break;\n\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\n              list = response.data.RegistrationSampleAttachment ? sortData(response.data.RegistrationSampleAttachment, 'descending', 'nsampleattachmentcode') : [];\n              RegistrationSampleAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JASelectedSubSample.length > 0 ? inputData.masterData.JASelectedSubSample[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleAttachment\";\n              dataStateName = \"subsampleAttachmentDataState\";\n              break;\n\n            default:\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          RegistrationTestAttachment,\n          RegistrationTestComment,\n          TestView,\n          RegistrationComment,\n          RegistrationSampleAttachment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            secondarySelection: inputData[\"secondarySelection\"],\n            loading: false,\n            // sampleskip: undefined,\n            // sampletake: undefined,\n            ...skipInfo,\n            activeTabIndex: inputData.activeTabIndex\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.JASelectedTest;\n      let oldSelectedSubSample = inputData.masterData.JASelectedSubSample;\n      let {\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let skipInfo = {};\n      let TestSelected = [];\n      let subSampleSelected = [];\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\n      }\n\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\n        let JASelectedSample = inputData.JASelectedSample;\n        let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\n        let JASelectedSubSample = inputData.masterData.JA_SUBSAMPLE;\n\n        if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\n          JASelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.JA_SUBSAMPLE[0]];\n\n          if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let ntransactionsamplecode = JASelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\n        let npreregno = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(',');\n        let nsectioncode = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(',');\n        let masterData = { ...inputData.masterData,\n          JASelectedSample,\n          JASelectedSubSample,\n          JASelectedTest\n        };\n        inputData = { ...inputData,\n          ntransactiontestcode,\n          npreregno,\n          nsectioncode,\n          ntransactionsamplecode,\n          JASelectedSample,\n          JASelectedTest,\n          JASelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestTab: inputData.activeTestTab,\n          masterData\n        };\n\n        if (JASelectedTest.length > 0) {\n          inputData = { ...inputData,\n            childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"TestView\"]\n          };\n          dispatch(getTestChildTabDetailJobAllocation(inputData, true));\n        } else {\n          inputData = { ...inputData,\n            masterData,\n            childTabsKey: [\"JA_TEST\"]\n          };\n          dispatch(getJobAllocationTestDetail(inputData, true));\n        }\n      } else {\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: TestSelected ? TestSelected : inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSample: inputData.JASelectedSample,\n          JASelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.JA_SUBSAMPLE.length > 0 ? [inputData.masterData.JA_SUBSAMPLE[0]] : []\n        };\n        let subsamplecheck = true;\n\n        if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\n          let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n          if (SubSampleSelected.length > 0) {\n            let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\n\n            if (filterSelectedSubSample.length === 0) {\n              let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n              oldSelectedSubSample = oldSelectedSubSample.filter(item => wholeSubSample.includes(item.ntransactionsamplecode)); //ALPD-3398\n              // oldSelectedSubSample.forEach((test, index) => {\n              //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n              //         oldSelectedSubSample.splice(index, 1)\n              //     }\n              //     return null;\n              // })\n\n              if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0 && masterData.selectedTest.length === 0) {\n                const selectedSubSample1 = [inputData.masterData.JA_SUBSAMPLE[0]];\n                masterData = { ...masterData,\n                  JASelectedSubSample: selectedSubSample1,\n                  selectedTest: []\n                };\n                inputData = { ...inputData,\n                  ...masterData\n                };\n                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\");\n                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\");\n                inputData[\"checkBoxOperation\"] = 3;\n                inputData[\"childTabsKey\"] = [\"JA_TEST\"];\n                subsamplecheck = false;\n                dispatch(getJobAllocationTestDetail(inputData, true));\n              }\n            } else {\n              oldSelectedSubSample = filterSelectedSubSample;\n            }\n          } else {\n            let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample = oldSelectedSubSample.filter(item => wholeSubSample.includes(item.ntransactionsamplecode)); //ALPD-3398\n            // oldSelectedSubSample.forEach((test, index) => {\n            //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n            //         oldSelectedSubSample.splice(index, 1)\n            //     }\n            //     return null;\n            // })\n          }\n\n          if (subsamplecheck) {\n            masterData = { ...masterData,\n              JASelectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampleskip,\n              subsampletake\n            };\n          }\n        }\n\n        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.ntransactiontestcode)); //ALPD-3398         \n        // oldSelectedTest.map((test, index) => {\n        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n        //         oldSelectedTest.splice(index, 1)\n        //     }\n        //     return null;\n        // })\n\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            JASelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.JA_TEST[0].ntransactiontestcode;\n        }\n\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              JASelectedSample: inputData.JASelectedSample,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              TestView\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getJobAllocationTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    //console.log(\"response :\");\n    let arr = [];\n    let arr1 = []; // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\n    // (item,index) => \n    // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\n    // );\n    //   const myArray = inputData.nsectioncode.split(\",\");\n    //   myArray.map((item) => {\n    //         if(!arr.includes(item)) {\n    //             arr.push(item)\n    //           }\n    //         }\n    //     )\n\n    let JASelectedSubSample = inputData.JASelectedSubSample;\n    JASelectedSubSample && JASelectedSubSample.map(item => {\n      if (!arr.includes(item.nsectioncode)) {\n        arr.push(item.nsectioncode);\n      }\n    });\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let inputParamData = {\n      nflag: 3,\n      ntype: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      nsectioncode: arr.map(nsectioncode => nsectioncode).join(\",\"),\n      ntransactiontestcode: \"0\",\n      ntransactionstatus: inputData.ntransactionstatus.toString(),\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      activeTestTab: inputData.activeTestTab,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation,\n      nneedsubsample: inputData.nneedsubsample\n    };\n    const subSample = inputData.nneedsubsample;\n\n    if (isServiceRequired) {\n      dispatch(initRequest(true));\n      rsapi.post(\"joballocation/getJobAllocationTestDetails\", inputParamData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData, 'descending', 'ntransactionsamplecode');\n        let oldSelectedTest = inputData.masterData.JASelectedTest;\n        let oldSelectedSubSample = inputData.masterData.JASelectedSubSample || [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray); //inputData.masterData.JA_TEST = response.data.JA_TEST;\n\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSample: inputData.masterData.JASelectedSample,\n          JASelectedSubSample: inputData.JASelectedSubSample || inputData.masterData.JASelectedSubSample\n        };\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData; // let bool = false;\n        // Commented bool value because no need to check bool condition to update skipInfo value.\n\n        let skipInfo = {}; // if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n\n        testskip = 0; // bool = true\n        // }\n        // if (bool) {\n\n        skipInfo = {\n          testskip,\n          testtake\n        }; // }\n\n        let RegistrationTestAttachment = [];\n        let RegistrationTestComment = [];\n        let TestView = [];\n        let RegistrationSampleComment = [];\n        let RegistrationSampleAttachment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.ntransactiontestcode)); //ALPD-3398\n          // oldSelectedTest.map((test, index) => {\n          //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n          //         oldSelectedTest.splice(index, 1)\n          //     }\n          //     return null;\n          // })\n\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              JASelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTVIEW\":\n              TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestView\";\n              dataStateName = \"testViewDataState\";\n              break;\n\n            default:\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTVIEW\":\n              dbData = response.data.TestView || [];\n              list = [...inputData.masterData.TestView, ...dbData];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          let list = [];\n          let dbData = [];\n          let testList = reArrangeArrays(inputData.masterData.JA_SUBSAMPLE, responseData.JA_TEST, \"ntransactionsamplecode\");\n          masterData = { ...masterData,\n            JASelectedTest: [testList[0]],\n            JA_TEST: testList\n          };\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTVIEW\":\n              dbData = response.data.TestView || [];\n              list = [...inputData.masterData.TestView, ...dbData];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else {\n          let list = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTVIEW\":\n              list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestView\";\n              dataStateName = \"testViewDataState\";\n              break;\n\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\n              list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_SUBSAMPLE.length > 0 ? inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentState\";\n              break;\n          }\n        }\n\n        if (subSample) {\n          let wholeSubsampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n          oldSelectedSubSample = oldSelectedSubSample.filter(item => wholeSubsampleList.includes(item.ntransactionsamplecode)); //ALPD-3398\n          // oldSelectedSubSample.map((test, index) => {\n          //     if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n          //         oldSelectedSubSample.splice(index, 1)\n          //     }\n          //     return null;\n          // })\n\n          let keepOld = false;\n          let ntransactionsamplecode;\n\n          if (oldSelectedSubSample.length > 0) {\n            keepOld = true;\n          } else {\n            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode;\n          }\n\n          switch (inputData.activeSubSampleTab) {\n            case \"IDS_SUBSAMPLECOMMENTS\":\n              RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"subSampleCommentDataState\";\n              break;\n\n            default:\n              RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleAttachment\";\n              dataStateName = \"subSampleAttachmentDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          RegistrationTestAttachment,\n          RegistrationTestComment,\n          TestView,\n          RegistrationSampleComment,\n          RegistrationSampleAttachment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab,\n            // activeTestTab: inputData.activeTestTab,\n            screenName: inputData.activeTestTab,\n            subsampleskip: undefined,\n            subsampletake: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        //console.log(\"error:\", error);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.JASelectedTest;\n      let TestSelected = inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\n        let JASelectedSubSample = inputData.RESelectedSubSample;\n        let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\n        inputData = { ...inputData,\n          childTabsKey: [\"TestView\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          JASelectedSample: inputData.masterData.JASelectedSample,\n          JASelectedTest,\n          JASelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestTab: inputData.activeTestTab\n        };\n        dispatch(getTestChildTabDetailJobAllocation(inputData, true));\n      } else {\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSubSample: inputData.JASelectedSubSample\n        };\n        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.ntransactiontestcode)); //ALPD-3398\n        // oldSelectedTest.map((test, index) => {\n        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n        //         oldSelectedTest.splice(index, 1)\n        //     }\n        //     return null;\n        // })\n\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            JASelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = masterData.JA_TEST[0].ntransactiontestcode;\n        }\n\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              JASelectedSubSample: inputData.JASelectedSubSample,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              TestView\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            // activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getTestChildTabDetailJobAllocation(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let arr = [];\n    inputData.JASelectedTest && inputData.JASelectedTest.map(item => {\n      if (!arr.includes(item.nsectioncode)) {\n        arr.push(item.nsectioncode);\n      }\n    });\n    let inputParamData = {\n      ntransactiontestcode: inputData.JASelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\n      npreregno: inputData.npreregno,\n      nsectioncode: arr.map(nsectioncode => nsectioncode).join(\",\"),\n      //ssectioncode :inputData.JASelectedTest.map(sample => sample.nsectioncode).join(\",\"),\n      ntransactionsamplecode: inputData.JASelectedTest.map(test => test.ntransactionsamplecode).join(\",\"),\n      ndesigntemplatemappingcode: inputData.masterData.realDesignTemplateMappingValue && inputData.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      userinfo: inputData.userinfo\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let url = \"\";\n\n    switch (inputData.activeTestTab) {\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        activeName = \"RegistrationTestAttachment\";\n        dataStateName = \"testAttachmentDataState\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        activeName = \"RegistrationTestComment\";\n        dataStateName = \"testCommentDataState\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        activeName = \"RegistrationSampleAttachment\";\n        dataStateName = \"sampleAttachmentDataState\";\n        break;\n\n      case \"IDS_TESTVIEW\":\n        url = \"joballocation/getTestView\";\n        activeName = \"TestView\";\n        dataStateName = \"testViewDataState\";\n        break;\n\n      default:\n        url = \"attachment/getTestAttachment\";\n        activeName = \"RegistrationTestAttachment\";\n        dataStateName = \"testAttachmentDataState\";\n        break;\n    }\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(url, inputParamData).then(response => {\n        let responseData = { ...response.data,\n          JASelectedSample: inputData.JASelectedSample || inputData.masterData.JASelectedSample,\n          JASelectedTest: inputData.JASelectedTest,\n          activeTabIndex: inputData.activeTabIndex,\n          activeTabId: inputData.activeTabId\n        };\n        let skipInfo = {};\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          ...responseData,\n          JASelectedTest: inputData.JASelectedTest\n        };\n\n        if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = {\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            activeTabIndex: inputData.activeTabIndex,\n            activeTabId: inputData.activeTabId,\n            activeTestTab: inputData.activeTestTab,\n            loading: false,\n            activeTestTab: inputData.activeTestTab,\n            screenName: inputData.activeTestTab,\n            testskip: undefined,\n            testtake: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n      let skipInfo = {};\n      let masterData = { ...inputData.masterData,\n        JASelectedTest: inputData.JASelectedTest\n      };\n\n      if (masterData[activeName].length <= inputData.skip) {\n        skipInfo = {\n          [dataStateName]: { ...inputData[dataStateName],\n            skip: 0,\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      } else {\n        skipInfo = { ...skipInfo,\n          [dataStateName]: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          activeTestTab: inputData.activeTestTab,\n          screenName: inputData.screenName,\n          ...skipInfo\n        }\n      });\n    }\n  };\n}\nexport function validateEsignforJobAllocation(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = inputParam.screenData.inputParam.methodUrl;\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        dispatch(dispatchMethods(inputParam[\"screenData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\n\nfunction dispatchMethods(screenData) {\n  return dispatch => {\n    let action = screenData.inputParam.action;\n\n    switch (action) {\n      case \"receiveinlab\":\n        dispatch(ReceiveinLabStatusWise(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"allotjob\":\n        dispatch(AllotJobAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"allotanotheruser\":\n        dispatch(AllotAnotherUserAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"reschedule\":\n        dispatch(RescheduleJobAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"canceltest\":\n        dispatch(CancelTestWise(screenData.inputParam, screenData.masterData));\n        break;\n\n      default:\n        break;\n    }\n  };\n}\n\nexport function updatedObjectWithNewElement1(oldList, newList) {\n  oldList = [...newList, ...oldList];\n  return oldList;\n}\nexport function getAnalystCalenderBasedOnUser(nusercode, masterData, userInfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getAnalystCalendarBasedOnUser\", {\n      \"nusercode\": nusercode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            analystCalenderData: response.data.UserData\n          },\n          loading: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getInstrumentForSchedule(ninstrumentcatcode, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getInstrumentBasedCategoryForSchedule\", {\n      \"ninstrumentcatcode\": ninstrumentcatcode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let Instrument = [];\n      const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\n      Instrument = InstrumentMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Instrument,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function AllotJobActionCalendar(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/AllotJobCreateCalendar\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_TEST\"];\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\n          TestView: replaceUpdatedObject(response.data[\"TestView\"], inputParam.inputData.masterData.TestView, \"ntransactiontestcode\")\n        };\n        let respObject = { ...inputParam.inputData,\n          masterData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/JobAllocationAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","replaceUpdatedObject","sortData","fillRecordBasedOnCheckBoxSelection","getSameRecordFromTwoArrays","getRecordBasedOnPrimaryKeyName","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","rearrangeDateFormat","postCRUDOrganiseTransSearch","Axios","transactionStatus","getRegTypeJobAllocation","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","defaultSampleTypeValue","realDesignTemplateMappingValue","realDynamicDesignMappingList","loading","catch","error","status","message","warn","getRegSubTypeJobAllocation","defaultRegTypeValue","getAppConfigVersionJobAllocation","inputParam","defaultRegSubTypeValue","RegSubTypeValue","realRegSubTypeValue","getSectionJobAllocation","defaultUserSectionValue","getFilterStatusJobAllocation","defaultFilterStatusValue","getFilterStatusSectionJobAllocation","testStatusService","sectionService","urlArray","all","defaultApprovalVersionValue","getDesignTemplateJobAllocation","Success","ApprovalVersionValue","realApprovalVersionValue","getTestStatusJobAllocation","getJobAllcationFilterSubmit","searchSampleRef","undefined","current","value","searchSubSampleRef","searchTestRef","showTest","activeTestTab","showFilter","sampleskip","sampletake","subsampleskip","subsampletake","testskip","testtake","documentDataState","sort","filter","testCommentDataState","ReceiveinLabStatusWise","rtn","JA_SAMPLE","JA_SUBSAMPLE","JA_TEST","JASelectedSample","JASelectedSubSample","JASelectedTest","respObject","loadEsign","openModal","showSample","postParamList","getAllottedTestWise","TechniqueMap","Technique","UsersMap","Users","UsersPeriodMap","Period","InstrumentCategoryMap","InstrumentCategory","InstrumentMap","Instrument","InstrumentPeriodMap","currentTime","userinfo","CurrentTime","body","get","UsersPeriod","InstrumentPeriod","selectedRecord","Date","isOpen","operation","screenName","ncontrolCode","ncontrolcode","getAllotAnotherUserTestWise","stechniquename","TechniqueCode","ntechniquecode","getRescheduleTestWise","getInstrument","ninstrumentcatcode","ncalibrationreq","userInfo","NA","getUsers","map","sample","nsectioncode","join","realRegTypeValue","nregtypecode","nregsubtypecode","ViewAnalystCalendar","CancelTestWise","TestView","info","AllotJobAction","AllotAnotherUserAction","RescheduleJobAction","getJobAllocationSubSampleDetail","isServiceRequired","arr","item","includes","push","inputParamData","nsampletypecode","npreregno","nregistrationsectioncode","ntransactionstatus","String","ntransactiontestcode","ntestcode","napprovalversioncode","fromdate","todate","activeSampleTab","activeSubSampleTab","nneedsubsample","ndesigntemplatemappingcode","nneedtemplatebasedflow","checkBoxOperation","activeName","dataStateName","oldSelectedTest","oldSelectedSubSample","childTabsKey","removeElementFromArray","length","skipInfo","RegistrationTestAttachment","RegistrationTestComment","RegistrationComment","RegistrationSampleAttachment","wholeSubSampleList","b","ntransactionsamplecode","wholeTestList","keepOld","list","dbData","skip","secondarySelection","activeTabIndex","TestSelected","subSampleSelected","isGrandChildGetRequired","toString","filterSelectedSubSample","subsample","getTestChildTabDetailJobAllocation","getJobAllocationTestDetail","subsamplecheck","SubSampleSelected","wholeSubSample","selectedTest","selectedSubSample1","x","bool","arr1","nflag","ntype","subSample","RegistrationSampleComment","testList","wholeSubsampleList","selectedSubSample","RESelectedSubSample","test","url","activeTabId","validateEsignforJobAllocation","methodUrl","screenData","toLowerCase","dispatchMethods","action","updatedObjectWithNewElement1","oldList","newList","getAnalystCalenderBasedOnUser","nusercode","analystCalenderData","UserData","getInstrumentForSchedule","AllotJobActionCalendar"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, replaceUpdatedObject, sortData,fillRecordBasedOnCheckBoxSelection,getSameRecordFromTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,filterRecordBasedOnPrimaryKeyName,reArrangeArrays,rearrangeDateFormat } from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport Axios from 'axios';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getRegTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationTypeBySampleType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultSampleTypeValue: inputData.defaultSampleTypeValue,\r\n                            realDesignTemplateMappingValue:inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList:inputData.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultRegTypeValue: inputData.defaultRegTypeValue,\r\n                            realDesignTemplateMappingValue:inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList:inputData.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAppConfigVersionJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\r\n                            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue,\r\n                            realDesignTemplateMappingValue: inputParam.inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList:inputParam.inputData.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        const testStatusService = rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData );\r\n        const sectionService = rsapi.post(\"joballocation/getSectionByApproveVersion\",  inputData );\r\n        let urlArray = [];\r\n        urlArray = [testStatusService,sectionService];\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDesignTemplateJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getDesignTemplateByApprovalConfigVersion\", inputParam)\r\n            .then(response => {\r\n\r\n                if(response.data[\"Success\"]){\r\n                    toast.warn(response.data.Success);\r\n                }\r\n\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputParam.masterData.defaultApprovalVersionValue,\r\n                            ApprovalVersionValue: inputParam.masterData.realApprovalVersionValue,\r\n                            realDesignTemplateMappingValue:inputParam.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList:inputParam.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getJobAllcationFilterSubmit(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getJobAllocationDetails\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                     masterData['searchedTest'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showTest: inputParam.inputData.showTest,\r\n                        activeTestTab: inputParam.inputData.activeTestTab,\r\n                        showFilter: false,\r\n                        sampleskip: 0,\r\n                        sampletake: inputParam.sampletake,\r\n                        subsampleskip :0,\r\n                        subsampletake :inputParam.subsampletake,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function ReceiveinLabStatusWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/CreateReceiveinLab\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_SAMPLE\"], inputParam.inputData.masterData.JA_SAMPLE, \"nregistrationsectioncode\");\r\n                        replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"], inputParam.inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n\r\n                        delete response.data[\"JA_SAMPLE\"];\r\n                        delete response.data[\"JA_SUBSAMPLE\"];\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedSample: replaceUpdatedObject(response.data[\"JASelectedSample\"], inputParam.inputData.masterData.JASelectedSample, \"nregistrationsectioncode\"),\r\n                            JASelectedSubSample: replaceUpdatedObject(response.data[\"JASelectedSubSample\"], inputParam.inputData.masterData.JASelectedSubSample, \"ntransactionsamplecode\"),\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        //toast.error(error.message); \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }                  \r\n                })\r\n    }\r\n} \r\n\r\nexport function getAllottedTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getAllotDetails\",inputParam.inputData)\r\n                .then(response => {\r\n\r\n                const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\",\r\n                \"stechniquename\", undefined, undefined, false);    \r\n\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n\r\n                const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                \"sinstrumentcatname\", undefined, undefined, false);                \r\n\r\n                const InstrumentMap =    constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                \"sinstrumentid\", undefined, undefined, false);           \r\n\r\n                const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n\r\n                const Technique = TechniqueMap.get(\"OptionList\");\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\r\n                const Instrument = InstrumentMap.get(\"OptionList\");                \r\n                const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\r\n                 \r\n                let selectedRecord ={};\r\n                selectedRecord[\"scomments\"] =\"\";\r\n                selectedRecord[\"suserholdduration\"] =\"\";\r\n                selectedRecord[\"sinstrumentholdduration\"]=\"\";\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n                //selectedRecord [\"dinstblockfromdatetime\"] = new Date();\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,\r\n                            Users,\r\n                            UsersPeriod,\r\n                            InstrumentCategory,\r\n                            Instrument,                            \r\n                            InstrumentPeriod,\r\n                            currentTime,\r\n                            selectedRecord,\r\n                            isOpen: true,\r\n                            operation:inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\nexport function getAllotAnotherUserTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getAllotAnotherUserDetails\",inputParam.inputData)\r\n                .then(response => {\r\n                \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);  \r\n                                \r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                \r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n                const Technique = response.data.Technique && response.data.Technique[0].stechniquename;\r\n                const TechniqueCode = response.data.Technique && response.data.Technique[0].ntechniquecode;\r\n                let selectedRecord ={};\r\n                selectedRecord[\"scomments\"] =\"\";\r\n                selectedRecord[\"suserholdduration\"] =\"\";\r\n                selectedRecord[\"sinstrumentholdduration\"]=\"\";\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,    \r\n                            TechniqueCode,                      \r\n                            Users,\r\n                            UsersPeriod, \r\n                            currentTime,  \r\n                            selectedRecord,                         \r\n                            isOpen: true,\r\n                            operation: inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\nexport function getRescheduleTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getRescheduledDetails\",inputParam.inputData)\r\n                .then(response => {\r\n\r\n\r\n                const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\",\r\n                \"stechniquename\", undefined, undefined, false);    \r\n\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n\r\n                const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                \"sinstrumentcatname\", undefined, undefined, false);                \r\n\r\n                const InstrumentMap =    constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                \"sinstrumentid\", undefined, undefined, false);           \r\n\r\n                const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);   \r\n                \r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n\r\n                let selectedRecord ={};\r\n                selectedRecord[\"scomments\"] =\"\";\r\n                selectedRecord[\"suserholdduration\"] =\"\";\r\n                selectedRecord[\"sinstrumentholdduration\"]=\"\";\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n\r\n                const Technique = TechniqueMap.get(\"OptionList\");\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\r\n                const Instrument = InstrumentMap.get(\"OptionList\");                \r\n                const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,\r\n                            Users,\r\n                            UsersPeriod,\r\n                            InstrumentCategory,\r\n                            Instrument,                            \r\n                            InstrumentPeriod,\r\n                            currentTime,\r\n                            selectedRecord,\r\n                            isOpen: true,\r\n                            operation: inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\n\r\nexport function getInstrument(ninstrumentcatcode,ncalibrationreq,userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentBasedCategory\", {\r\n                \"ninstrumentcatcode\": ninstrumentcatcode,\"ncalibrationreq\":ncalibrationreq,\"userinfo\":userInfo\r\n            })\r\n            .then(response => {\r\n                let Instrument = [];               \r\n                const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\"sinstrumentid\", undefined, undefined, false);\r\n                Instrument = InstrumentMap.get(\"OptionList\");\r\n\r\n                if(ninstrumentcatcode !== transactionStatus.NA){\r\n                    selectedRecord [\"dinstblockfromdatetime\"] = new Date();\r\n                }else{\r\n                    selectedRecord [\"dinstblockfromdatetime\"] =\"\";\r\n                }\r\n                \r\n               \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Instrument,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getUsers(ntechniquecode,JASelectedTest, userInfo, selectedRecord,masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getUsersBasedTechnique\", {\"ntechniquecode\": ntechniquecode,\r\n                          \"ssectioncode\":JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample=>sample.nsectioncode).join(\",\"):\"\", \r\n                          \"nregtypecode\":JASelectedTest.realRegTypeValue.nregtypecode,\r\n                          \"nregsubtypecode\":JASelectedTest.realRegSubTypeValue.nregsubtypecode,\r\n                          \"userinfo\": userInfo})\r\n            .then(response => {\r\n                let Users = [];               \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n                selectedRecord[\"nusercode\"] =\"\";\r\n               \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                       // masterData:{...masterData},\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function ViewAnalystCalendar(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/viewAnalystCalendar\", (inputParam.inputData))\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.inputData.masterData,\r\n                    ...response.data,\r\n                }  \r\n                let Users = [];               \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {                       \r\n                        Users,                        \r\n                        screenName: inputParam.inputData.screenName,\r\n                        loading: false,\r\n                        openModal:true,\r\n                        masterData,\r\n                        \r\n                        \r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function CancelTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/cancelTest\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                            TestView: inputParam.inputData.masterData.TestView\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\nexport function AllotJobAction(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/AllotJobCreate\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                            TestView: replaceUpdatedObject(response.data[\"TestView\"], inputParam.inputData.masterData.TestView, \"ntransactiontestcode\" )\r\n                        }\r\n                        let respObject = {\r\n                            ...inputParam.inputData,\r\n                            masterData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\nexport function AllotAnotherUserAction(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/AllotAnotherUserCreate\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                            TestView: inputParam.inputData.masterData.TestView\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\nexport function RescheduleJobAction(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/RescheduleCreate\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                            TestView: inputParam.inputData.masterData.TestView\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\n\r\nexport function getJobAllocationSubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        //console.log(\"response :\");\r\n        let arr =[];\r\n        // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\r\n        // (item,index) => \r\n        // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\r\n        // );\r\n\r\n        inputData.JASelectedSample && inputData.JASelectedSample.map((item) => {\r\n            if(!arr.includes(item.nsectioncode)) {\r\n                arr.push(item.nsectioncode)\r\n              }\r\n            }\r\n        )\r\n\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            nregistrationsectioncode: inputData.nregistrationsectioncode,\r\n           // ssectioncode : inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\r\n            nsectioncode : arr.map(item => item).join(\",\"),\r\n            ntransactionstatus: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: \"0\",\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            activeSubSampleTab: inputData.activeSubSampleTab,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,\r\n            checkBoxOperation: inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation })\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'ntransactionsamplecode')\r\n                    // sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest;    \r\n                    let oldSelectedSubSample = inputData.masterData.JASelectedSubSample;\r\n                    \r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\",inputData.removeElementFromArray);\r\n\r\n                    // inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;  \r\n                    // inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;\r\n                    // inputData.masterData.JA_TEST = response.data.JA_TEST;  \r\n                    // inputData.masterData.JASelectedTest=response.data.JASelectedTest;\r\n                    // inputData.masterData.RegistrationAttachment =response.data.RegistrationAttachment;\r\n                    // inputData.masterData.RegistrationSampleAttachment =response.data.RegistrationSampleAttachment;\r\n                    // inputData.masterData.RegistrationComment =response.data.RegistrationComment;\r\n                    // inputData.masterData.RegistrationSampleComment =response.data.RegistrationSampleComment;\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.JASelectedSample\r\n                    }\r\n                    \r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake,\r\n                        subsampleskip, subsampletake,\r\n                        sampleskip, sampletake\r\n                    } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                    //     bool = true\r\n                    // }\r\n                    subsampleskip = 0;\r\n                    // bool = true\r\n                    // if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake,\r\n                            subsampleskip, subsampletake,\r\n                            sampleskip, sampletake\r\n                        }\r\n                    // }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let TestView = [];\r\n                    let RegistrationComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n\r\n                        let wholeSubSampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                                wholeSubSampleList.includes(item.ntransactionsamplecode)\r\n                                    );\r\n                            //ALPD-3398\r\n                            // oldSelectedSubSample.forEach((subsample, index) => {\r\n                            //     if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                            //         oldSelectedSubSample.splice(index, 1)\r\n                            //     }\r\n\r\n                            // })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n\r\n\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest = oldSelectedTest.filter(item =>\r\n                            wholeTestList.includes(item.ntransactiontestcode)\r\n                            );\r\n                        //ALPD-3398\r\n                        // oldSelectedTest.map((test, index) => {\r\n                        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        //         oldSelectedTest.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        let npreregno;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\r\n                            npreregno = masterData.JASelectedSample[0].npreregno;\r\n                        }\r\n                        switch (inputData.activeTestTab) {                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                             case \"IDS_TESTVIEW\":\r\n                                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n\r\n                            default:\r\n                                RegistrationComment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"npreregno\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \" testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestTab) {                  \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                                \r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                dbData = response.data.RegistrationComment || []\r\n                                list = [...inputData.masterData.RegistrationComment, ...dbData];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n\r\n                                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleCommentsDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        let list = []\r\n                        if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                            let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest = oldSelectedTest.filter(item =>\r\n                                wholeTestList.includes(item.ntransactiontestcode)\r\n                                );\r\n                            //ALPD-3398\r\n                            // oldSelectedTest.map((test, index) => {\r\n                            //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                            //         oldSelectedTest.splice(index, 1)\r\n                            //     }\r\n                            //     return null;\r\n                            // })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                            }\r\n                        }\r\n                        switch (inputData.activeTestTab) {                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;    \r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleChangeDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleAttachment ? sortData(response.data.RegistrationSampleAttachment, 'descending', 'nsampleattachmentcode') : [];\r\n                                RegistrationSampleAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JASelectedSubSample.length >0 ? inputData.masterData.JASelectedSubSample[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subsampleAttachmentDataState\"\r\n                                break;\r\n\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        TestView,\r\n                        RegistrationComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            secondarySelection :inputData[\"secondarySelection\"], \r\n                            loading: false,\r\n                            // sampleskip: undefined,\r\n                            // sampletake: undefined,\r\n                            ...skipInfo,\r\n                            activeTabIndex: inputData.activeTabIndex\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.JASelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n            }\r\n\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSample = inputData.JASelectedSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                let JASelectedSubSample = inputData.masterData.JA_SUBSAMPLE\r\n\r\n\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    JASelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = JASelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                let npreregno = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(',');\r\n                let nsectioncode = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(',');\r\n                let masterData = { ...inputData.masterData, JASelectedSample, JASelectedSubSample, JASelectedTest }\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    npreregno,\r\n                    nsectioncode,\r\n                    ntransactionsamplecode,\r\n                    JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestTab: inputData.activeTestTab, masterData\r\n                }\r\n\r\n                if (JASelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"RegistrationTestAttachment\",\"RegistrationTestComment\",\"TestView\"]\r\n                    }\r\n                    dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData, masterData,\r\n                        childTabsKey: [\"JA_TEST\"]\r\n                    }\r\n                    dispatch(getJobAllocationTestDetail(inputData, true));\r\n                }\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: TestSelected ? TestSelected : inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSample: inputData.JASelectedSample,\r\n                    JASelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.JA_SUBSAMPLE.length > 0 ? [inputData.masterData.JA_SUBSAMPLE[0]] : []\r\n\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                                wholeSubSample.includes(item.ntransactionsamplecode)\r\n                                );\r\n                            //ALPD-3398\r\n                            // oldSelectedSubSample.forEach((test, index) => {\r\n                            //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                            //         oldSelectedSubSample.splice(index, 1)\r\n                            //     }\r\n                            //     return null;\r\n                            // })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"JA_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getJobAllocationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                            wholeSubSample.includes(item.ntransactionsamplecode)\r\n                            );\r\n                        //ALPD-3398\r\n                        // oldSelectedSubSample.forEach((test, index) => {\r\n                        //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                        //         oldSelectedSubSample.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest = oldSelectedTest.filter(item =>\r\n                    wholeTestList.includes(item.ntransactiontestcode)\r\n                    );       \r\n                //ALPD-3398         \r\n                // oldSelectedTest.map((test, index) => {\r\n                //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                //         oldSelectedTest.splice(index, 1)\r\n                //     }\r\n                //     return null;\r\n                // })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.JA_TEST[0].ntransactiontestcode\r\n                }                \r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [],\r\n                        ntransactiontestcode, \"ntransactiontestcode\");    \r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSample: inputData.JASelectedSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            TestView,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getJobAllocationTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n\r\n        //console.log(\"response :\");\r\n        let arr =[];\r\n        let arr1=[];\r\n        // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\r\n        // (item,index) => \r\n        // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\r\n        // );\r\n    //   const myArray = inputData.nsectioncode.split(\",\");\r\n    //   myArray.map((item) => {\r\n    //         if(!arr.includes(item)) {\r\n    //             arr.push(item)\r\n    //           }\r\n    //         }\r\n    //     )\r\n\r\n    let JASelectedSubSample = inputData.JASelectedSubSample;\r\n    JASelectedSubSample && JASelectedSubSample.map((item) => {\r\n        if (!arr.includes(item.nsectioncode)) {\r\n            arr.push(item.nsectioncode)\r\n        }\r\n    }\r\n    )    \r\n        \r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            nsectioncode: arr.map(nsectioncode => nsectioncode).join(\",\"),\r\n            ntransactiontestcode: \"0\",\r\n            ntransactionstatus: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getJobAllocationTestDetails\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'ntransactionsamplecode')\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest\r\n                    let oldSelectedSubSample = inputData.masterData.JASelectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n                    //inputData.masterData.JA_TEST = response.data.JA_TEST;\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.masterData.JASelectedSample,\r\n                        JASelectedSubSample: inputData.JASelectedSubSample || inputData.masterData.JASelectedSubSample,\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        // bool = true\r\n                    // }\r\n                    // if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    // }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let TestView = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest = oldSelectedTest.filter(item =>\r\n                            wholeTestList.includes(item.ntransactiontestcode)\r\n                                );\r\n                        //ALPD-3398\r\n                        // oldSelectedTest.map((test, index) => {\r\n                        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        //         oldSelectedTest.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestTab) {                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;   \r\n                           \r\n                            default:\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break; \r\n                          \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        let testList = reArrangeArrays(inputData.masterData.JA_SUBSAMPLE, responseData.JA_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedTest: [testList[0]],\r\n                            JA_TEST: testList,\r\n                        }\r\n\r\n                        switch (inputData.activeTestTab) {\r\n                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n                                \r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_SUBSAMPLE.length > 0 ? inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                            wholeSubsampleList.includes(item.ntransactionsamplecode)\r\n                                );\r\n                        //ALPD-3398\r\n                        // oldSelectedSubSample.map((test, index) => {\r\n                        //     if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                        //         oldSelectedSubSample.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n\r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData = {\r\n                        ...masterData,                      \r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        TestView,\r\n                        RegistrationSampleComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            // activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.activeTestTab,\r\n                            subsampleskip:undefined,\r\n                            subsampletake:undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    //console.log(\"error:\", error);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let TestSelected =\r\n                inputData[\"statusNone\"] ?\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") :\r\n                    filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSubSample = inputData.RESelectedSubSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestView\",\"RegistrationTestAttachment\", \"RegistrationTestComment\"],\r\n                    ntransactiontestcode,\r\n                    JASelectedSample: inputData.masterData.JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestTab: inputData.activeTestTab\r\n                }\r\n                dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSubSample: inputData.JASelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest = oldSelectedTest.filter(item =>\r\n                    wholeTestList.includes(item.ntransactiontestcode)\r\n                        );\r\n                //ALPD-3398\r\n                // oldSelectedTest.map((test, index) => {\r\n                //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                //         oldSelectedTest.splice(index, 1)\r\n                //     }\r\n                //     return null;\r\n                // })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.JA_TEST[0].ntransactiontestcode\r\n                }\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                 const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                \r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSubSample: inputData.JASelectedSubSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            TestView,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        // activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailJobAllocation(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let arr = [];\r\n        inputData.JASelectedTest && inputData.JASelectedTest.map((item) => {\r\n            if(!arr.includes(item.nsectioncode)) {\r\n                arr.push(item.nsectioncode)\r\n              }\r\n            }\r\n        )\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.JASelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            nsectioncode :arr.map(nsectioncode => nsectioncode).join(\",\"),\r\n            //ssectioncode :inputData.JASelectedTest.map(sample => sample.nsectioncode).join(\",\"),\r\n            ntransactionsamplecode :inputData.JASelectedTest.map(test => test.ntransactionsamplecode).join(\",\"),\r\n            ndesigntemplatemappingcode: inputData.masterData.realDesignTemplateMappingValue && inputData.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let url=\"\";\r\n       \r\n        switch (inputData.activeTestTab) {\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName =\"testAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;           \r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"RegistrationSampleAttachment\"\r\n                dataStateName = \"sampleAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTVIEW\":\r\n                url = \"joballocation/getTestView\"\r\n                activeName = \"TestView\"\r\n                dataStateName = \"testViewDataState\"\r\n                break;    \r\n            default:\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName =\"testAttachmentDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        JASelectedSample: inputData.JASelectedSample || inputData.masterData.JASelectedSample,\r\n                        JASelectedTest: inputData.JASelectedTest,\r\n                        activeTabIndex: inputData.activeTabIndex,\r\n                        activeTabId: inputData.activeTabId\r\n                    }\r\n                    let skipInfo = {};\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        JASelectedTest: inputData.JASelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            activeTabId: inputData.activeTabId,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            loading: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.activeTestTab,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                JASelectedTest: inputData.JASelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData.skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestTab: inputData.activeTestTab,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function validateEsignforJobAllocation(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = inputParam.screenData.inputParam.methodUrl;\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let action = screenData.inputParam.action\r\n        switch (action) {\r\n            case \"receiveinlab\":\r\n                dispatch(ReceiveinLabStatusWise(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"allotjob\":\r\n                dispatch(AllotJobAction(screenData.inputParam, screenData.masterData));\r\n                break;  \r\n            case \"allotanotheruser\":\r\n                dispatch(AllotAnotherUserAction(screenData.inputParam, screenData.masterData));\r\n                break;    \r\n            case \"reschedule\":\r\n                dispatch(RescheduleJobAction(screenData.inputParam, screenData.masterData));\r\n                break;    \r\n            case \"canceltest\":\r\n                dispatch(CancelTestWise(screenData.inputParam, screenData.masterData));\r\n                break;                      \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function updatedObjectWithNewElement1(oldList, newList) {\r\n    oldList = [...newList, ...oldList];\r\n    return oldList;\r\n  }\r\n\r\n\r\n\r\n  export function getAnalystCalenderBasedOnUser(nusercode,masterData, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getAnalystCalendarBasedOnUser\", {\"nusercode\": nusercode,\r\n                          \"userinfo\": userInfo})\r\n            .then(response => {          \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData:{...masterData,analystCalenderData: response.data.UserData},\r\n                        loading:false,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getInstrumentForSchedule(ninstrumentcatcode,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentBasedCategoryForSchedule\", {\r\n                \"ninstrumentcatcode\": ninstrumentcatcode,\"userinfo\":userInfo\r\n            })\r\n            .then(response => {\r\n                let Instrument = [];               \r\n                const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\"sinstrumentid\", undefined, undefined, false);\r\n                Instrument = InstrumentMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Instrument,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function AllotJobActionCalendar(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/AllotJobCreateCalendar\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                            TestView: replaceUpdatedObject(response.data[\"TestView\"], inputParam.inputData.masterData.TestView, \"ntransactiontestcode\" )\r\n                        }\r\n                        let respObject = {\r\n                            ...inputParam.inputData,\r\n                            masterData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}