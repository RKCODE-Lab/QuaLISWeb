{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\attachmentscomments\\\\comments\\\\AddComment.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport { MediaHeader } from '../../../components/App.styles';\nimport TestPopOver from '../../ResultEntryBySample/TestPopOver';\n\nconst AddComment = props => {\n  let nameString = props.operation === 'update' ? props.selectedRecord.jsondata && [props.selectedRecord.jsondata[props.displayName]] || [] : props.masterList ? props.masterList.map(obj => obj[props.displayName] || obj[props.jsonField][props.displayName]) : [];\n  let message = `${nameString.length} ${props.intl.formatMessage({\n    id: props.selectedListName || \"IDS_TESTS\"\n  })} ${props.intl.formatMessage({\n    id: \"IDS_SELECTED\"\n  })}`;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, props.masterList && Object.values(props.masterList).length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(MediaHeader, {\n    className: `labelfont`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 29\n    }\n  }, nameString.length === 1 ? `${props.intl.formatMessage({\n    id: props.selectedListName || \"IDS_TESTS\"\n  })}: ${nameString[0]}` : /*#__PURE__*/React.createElement(TestPopOver, {\n    stringList: nameString,\n    message: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 41\n    }\n  }))))) : \"\"), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, props.isTestComment ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_SAMPLETESTCOMMENTS\"\n    }),\n    isSearchable: true,\n    name: \"nsamplecommentscode\",\n    isDisabled: false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLEASESELECT\"\n    }),\n    isMandatory: true,\n    showOption: true,\n    isClearable: false,\n    options: props.SampleTestComments || [],\n    optionId: \"nsampletestcommentcode\",\n    optionValue: \"ssampletestcommentname\",\n    value: props.selectedRecord[\"nsamplecommentscode\"],\n    onChange: value => props.onComboChange(value, \"nsamplecommentscode\"),\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }) : \"\", /*#__PURE__*/React.createElement(FormTextarea, {\n    name: \"scomments\",\n    label: props.intl.formatMessage({\n      id: \"IDS_COMMENT\"\n    }),\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_COMMENT\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"scomments\"] : \"\",\n    rows: \"2\",\n    required: true,\n    isMandatory: true,\n    maxLength: 1500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }))));\n};\n\nexport default injectIntl(AddComment);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/attachmentscomments/comments/AddComment.jsx"],"names":["React","injectIntl","Row","Col","FormTextarea","FormSelectSearch","MediaHeader","TestPopOver","AddComment","props","nameString","operation","selectedRecord","jsondata","displayName","masterList","map","obj","jsonField","message","length","intl","formatMessage","id","selectedListName","Object","values","isTestComment","SampleTestComments","value","onComboChange","event","onInputOnChange"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport { MediaHeader } from '../../../components/App.styles';\r\nimport TestPopOver from '../../ResultEntryBySample/TestPopOver';\r\n\r\nconst AddComment = props => {\r\n    let nameString = props.operation === 'update'?  props.selectedRecord.jsondata && [props.selectedRecord.jsondata[props.displayName]] || [] : props.masterList ? props.masterList.map(obj=>obj[props.displayName]||obj[props.jsonField][props.displayName]) : []\r\n    let message= `${nameString.length} ${props.intl.formatMessage({ id: props.selectedListName||\"IDS_TESTS\" })} ${props.intl.formatMessage({ id: \"IDS_SELECTED\" })}`\r\n    return (\r\n        <>\r\n        <Row>\r\n            {props.masterList && Object.values(props.masterList).length > 0 ?\r\n                <div>\r\n                    <Row className=\"mb-4\">\r\n                        <Col md={12}>\r\n                            <MediaHeader className={`labelfont`}>\r\n                                {nameString.length === 1 ?\r\n                                        `${props.intl.formatMessage({id:props.selectedListName||\"IDS_TESTS\"})}: ${nameString[0] }`:\r\n                                        <TestPopOver stringList={nameString} message={message}></TestPopOver>\r\n\r\n                                }\r\n                            </MediaHeader>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            : \"\"}\r\n        </Row>\r\n        <Row>\r\n            <Col md=\"12\">\r\n                {props.isTestComment?\r\n                    <FormSelectSearch\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_SAMPLETESTCOMMENTS\" })}\r\n                        isSearchable={true}\r\n                        name={\"nsamplecommentscode\"}\r\n                        isDisabled={false}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                        isMandatory={true}\r\n                        showOption={true}\r\n                        isClearable={false}\r\n                        options={props.SampleTestComments || []}\r\n                        optionId='nsampletestcommentcode'\r\n                        optionValue='ssampletestcommentname'\r\n                        value={props.selectedRecord[\"nsamplecommentscode\"]}\r\n                        onChange={value => props.onComboChange(value, \"nsamplecommentscode\")}\r\n                        alphabeticalSort={true}\r\n                    />\r\n                :\"\"}\r\n                <FormTextarea\r\n                    name={\"scomments\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_COMMENT\" })}\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_COMMENT\" })}\r\n                    value={props.selectedRecord?props.selectedRecord[\"scomments\"]:\"\"}\r\n                    rows=\"2\"\r\n                    required={true}\r\n                    isMandatory={true}\r\n                    maxLength={1500}\r\n                />\r\n            </Col>    \r\n        </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default injectIntl(AddComment);"]},"metadata":{},"sourceType":"module"}