{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\userroletemplate\\\\userroletemplate.component.jsx\";\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { Row, Col, Card, Nav, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt, faThumbsUp } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\nimport { sortData, getControlMap, showEsign, constructOptionList } from '../../components/CommonScript';\nimport '../../assets/./styles/tree.css';\nimport React, { Component } from 'react';\nimport { NavHeader } from '../../components/sidebar/sidebar.styles';\nimport { ContentPanel, ListWrapper } from './userroletemplate.styles';\nimport { callService, crudMaster, updateStore, addScreenModel, validateEsignCredential, getURTFilterRegType, getURTFilterRegSubType, getURTFilterSubmit, fetchRecordById, getTreetemplate, filterColumnData, postCRUDOrganiseSearch } from '../../actions';\nimport { injectIntl } from 'react-intl'; // import rsapi from '../../rsapi';\n\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport UserRoleTemplateFilter from './UserRoleTemplateFilter';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport Esign from '../audittrail/Esign'; // import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\n\nimport { ApprovalSubType, transactionStatus } from '../../components/Enumeration'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { Affix } from 'rsuite';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component'; // import ReactTooltip from 'react-tooltip';\n\nclass userroletempalate extends Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModel = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord[\"agree\"] = 4;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = 4;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.filterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        // let uRL = \"\";\n        let inputData = [];\n\n        if (fieldname === \"approvalSubType\") {\n          // uRL = 'userroletemplate/getApprovalRegSubType';\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 1,\n            napprovalsubtypecode: parseInt(event.value),\n            ntemplatecode: parseInt(event.item.ntemplatecode),\n            isregneed: parseInt(event.item.nisregsubtypeconfigneed)\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultapprovalsubtype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n          this.props.getURTFilterRegType(inputParam);\n        } else if (fieldname === \"registrationType\") {\n          // uRL = 'userroletemplate/getApprovalRegSubType';\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 2,\n            nregtypecode: parseInt(event.value),\n            napprovalsubtypecode: this.props.Login.masterData.defaultapprovalsubtype.value,\n            ntemplatecode: this.props.Login.masterData.defaultapprovalsubtype.item.ntemplatecode,\n            isregneed: this.props.Login.masterData.defaultapprovalsubtype.item.nisregsubtypeconfigneed\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultregtype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n          this.props.getURTFilterRegSubType(inputParam);\n        } else {\n          let masterData = { ...this.props.Login.masterData,\n            defaultregsubtype: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(\"delete\", deleteId));\n    };\n\n    this.approveRecord = (operation, ncontrolCode) => {\n      const selectedRecord = this.props.Login.selectedRecord ? this.props.Login.selectedRecord : \"\"; // const selectedInput = this.state.selectedInput ? this.state.selectedInput : \"\";\n\n      const selected = this.props.Login.masterData.selectedURTVersion;\n\n      if (selectedRecord[\"ntransactionstatus\"] === transactionStatus.APPROVED || selectedRecord[\"ntransactionstatus\"] === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORDTOAPPROVE\"\n        }));\n      } else {\n        let inputData = [];\n        inputData = {\n          \"ntreetemplatecode\": this.props.Login.masterData.realApprovalSubTypeValue.item.ntemplatecode,\n          \"napprovalsubtypecode\": this.props.Login.masterData.realApprovalSubTypeValue.value,\n          \"nregtypecode\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n          \"nregsubtypecode\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n          \"ntreeversiontempcode\": selected.ntreeversiontempcode,\n          \"napprovalconfigcode\": selectedRecord[\"napprovalconfigcode\"],\n          \"userinfo\": this.props.Login.userInfo,\n          \"isregneed\": this.props.Login.masterData.realApprovalSubTypeValue.item.nisregsubtypeconfigneed\n        };\n        const postParam = {\n          inputListName: \"listuserroletemplate\",\n          selectedObject: \"selectedURTVersion\",\n          primaryKeyField: \"ntreeversiontempcode\",\n          primaryKeyValue: selected.ntreeversiontempcode,\n          fetchUrl: \"userroletemplate/getUserroletemplatebyId\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          methodUrl: \"UserroleTemplatemaster\",\n          classUrl: this.props.Login.inputParam.classUrl,\n          inputData: inputData,\n          operation: operation,\n          postParam\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              openModal: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              operation: operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.deleteRecord = (operation, ncontrolCode) => {\n      const selectedRecord = this.props.Login.selectedRecord ? this.props.Login.selectedRecord : \"\"; // const selectedInput = this.state.selectedInput ? this.state.selectedInput : \"\";\n\n      const selected = this.props.Login.masterData.selectedURTVersion;\n\n      if (selectedRecord[\"ntransactionstatus\"] === transactionStatus.APPROVED || selectedRecord[\"ntransactionstatus\"] === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORDTODELETE\"\n        }));\n      } else {\n        let inputData = [];\n        inputData = {\n          \"userinfo\": this.props.Login.userInfo,\n          \"ntreetemplatecode\": this.props.Login.masterData.realApprovalSubTypeValue.item.ntemplatecode,\n          \"napprovalsubtypecode\": this.props.Login.masterData.realApprovalSubTypeValue.value,\n          \"nregtypecode\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n          \"nregsubtypecode\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n          \"ntreeversiontempcode\": selected.ntreeversiontempcode,\n          \"isregneed\": this.props.Login.masterData.realApprovalSubTypeValue.item.nisregsubtypeconfigneed\n        };\n        const postParam = {\n          inputListName: \"listuserroletemplate\",\n          selectedObject: \"selectedURTVersion\",\n          primaryKeyField: \"ntreeversiontempcode\",\n          primaryKeyValue: selected.ntreeversiontempcode,\n          fetchUrl: \"userroletemplate/getUserroletemplatebyId\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          methodUrl: \"UserroleTemplatemaster\",\n          classUrl: this.props.Login.inputParam.classUrl,\n          inputData: inputData,\n          operation: operation,\n          postParam\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              openModal: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              operation: operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.saveTreetemplate = (saveType, formRef) => {\n      let listUserRoleTree = [];\n      let levelno = 0;\n      let selectedRecord = this.props.Login.selectedRecord ? this.props.Login.selectedRecord : \"\"; //const selectedLevel = this.state.selectedRole.length>0 ? this.state.selectedRole : this.props.Login.selectedRecord?this.props.Login.selectedRecord:\"\";\n      //this.state.selectedRole=this.props.Login.selectedRecord ? this.props.Login.selectedRecord : \"\";\n\n      const selectedInput = this.state.selectedInput ? this.state.selectedInput : \"\";\n      const selected = this.props.Login.masterData.selectedURTVersion;\n      this.state.selectedRole = [];\n\n      for (let index = 0; index < this.props.Login.totalLevel; index++) {\n        levelno = index + 1;\n\n        if (selectedRecord[index]) {\n          listUserRoleTree.push(selectedRecord[index].toString()); //this.state.selectedRole.push((selectedRecord[index]).toString());\n        } else {\n          return toast.info(this.props.intl.formatMessage({\n            id: \"IDS_PLESESELECTTHELEVEL\"\n          }) + levelno);\n        } // if (selectedLevel[index]) {\n        //     listUserRoleTree.push((selectedLevel[index]).toString())\n        //     this.state.selectedRole.push((listUserRoleTree[index]).toString());\n        // }\n        // else {\n        //     return toast.info(this.props.intl.formatMessage({ id: \"IDS_PLESESELECTTHELEVEL\" }) + levelno);\n        // }\n\n      }\n\n      let inputData = [];\n      let methodUrl = \"\";\n      inputData = {\n        \"userinfo\": this.props.Login.userInfo,\n        \"treetemptranstestgroup\": listUserRoleTree,\n        \"specname\": selectedInput.sversiondescription,\n        \"ntemplatecode\": this.props.Login.masterData.realApprovalSubTypeValue.item.ntemplatecode,\n        \"napprovalsubtypecode\": this.props.Login.masterData.realApprovalSubTypeValue.value,\n        \"nregtypecode\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n        \"nregsubtypecode\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n        \"ntreeversiontempcode\": selected === undefined ? -1 : selected.ntreeversiontempcode ? selected.ntreeversiontempcode : -1,\n        \"napprovalconfigcode\": selectedRecord[\"napprovalconfigcode\"] ? selectedRecord[\"napprovalconfigcode\"] : undefined,\n        \"isregneed\": this.props.Login.masterData.realApprovalSubTypeValue.item.nisregsubtypeconfigneed\n      };\n      let postParam = undefined;\n\n      if (this.props.Login.operation === \"create\") {\n        methodUrl = \"UserRoleTemplatemaster\";\n      } else {\n        methodUrl = \"EditUserRoleTemplatemaster\";\n        postParam = {\n          inputListName: \"listuserroletemplate\",\n          selectedObject: \"selectedURTVersion\",\n          primaryKeyField: \"ntreeversiontempcode\"\n        };\n      }\n\n      const inputParam = {\n        methodUrl: methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        searchRef: this.searchRef,\n        formRef,\n        postParam\n      };\n      const masterData = this.props.Login.masterData; //selectedRecord['esignreason']=\"\";\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            selectedRecord,\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onChangeCombo = (event, levelno, operation) => {\n      const selectedRecord = this.props.Login.selectedRecord ? this.props.Login.selectedRecord : {} || {};\n      let index = this.props.Login.userRoleActualData.findIndex(data => data.nuserrolecode === parseInt(selectedRecord[levelno]));\n\n      if (event !== null) {\n        if (selectedRecord[levelno]) {\n          this.props.Login.userRoleData.push(this.props.Login.userRoleActualData[index]);\n        }\n\n        index = this.props.Login.userRoleData.findIndex(data => data.nuserrolecode === parseInt(event.value));\n        this.props.Login.userRoleData.splice(index, 1);\n        index = this.props.Login.userRoleActualData.findIndex(data => data.nuserrolecode === parseInt(event.value));\n        this.props.Login.userRoleTreeData[levelno] = this.props.Login.userRoleActualData[index];\n        selectedRecord[levelno] = event.value; // const  TaguserRoleData  = constructOptionList(this.props.Login.userRoleData ||[], \"nuserrolecode\",\n        // \"suserrolename\" , undefined, undefined, undefined);\n        // const  TagListuserRoleData  = TaguserRoleData.get(\"OptionList\")\n\n        let userRoleData = this.props.Login.userRoleData || [];\n        let userRoleTreeData = this.props.Login.userRoleTreeData;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            userRoleData,\n            selectedRecord,\n            userRoleTreeData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        if (selectedRecord[levelno]) {\n          this.props.Login.userRoleData.push(this.props.Login.userRoleActualData[index]);\n          delete selectedRecord[levelno];\n        } // const  TaguserRoleData  = constructOptionList(this.props.Login.userRoleData ||[], \"nuserrolecode\",\n        // \"suserrolename\" , undefined, undefined, undefined);\n        // const  TagListuserRoleData  = TaguserRoleData.get(\"OptionList\")\n\n\n        let userRoleData = this.props.Login.userRoleData || [];\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            userRoleData\n          }\n        };\n        this.props.updateStore(updateInfo, selectedRecord);\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      // const selectedRecord = {...this.props.Login.selectedRecord,\n      //     ...this.state.selectedRecord} || {};\n      const selectedRecord = this.props.Login.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      } //this.setState({ selectedRecord });\n\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            // sreason: this.state.selectedRecord[\"esigncomments\"],\n            // nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            // spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\n            sreason: this.props.Login.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.props.Login.selectedRecord[\"esignreason\"] && this.props.Login.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.props.Login.selectedRecord[\"esignreason\"] && this.props.Login.selectedRecord[\"esignreason\"].label\n          },\n          //password: this.state.selectedRecord[\"esignpassword\"]\n          password: this.props.Login.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onInputOnChange = event => {\n      const selectedInput = this.state.selectedInput || {};\n      selectedInput[event.target.name] = event.target.value; // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedInput }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      this.setState({\n        selectedInput\n      });\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        nflag: this.props.Login.masterData.realApprovalSubTypeValue.item.nisregsubtypeconfigneed === transactionStatus.YES ? 2 : 1,\n        nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\n        nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\n        napprovalsubtypecode: this.props.Login.masterData.realApprovalSubTypeValue.value,\n        ntreetemplatecode: this.props.Login.masterData.realApprovalSubTypeValue.item.ntemplatecode,\n        ntreeversiontempcode: -1,\n        nmodulecode: 1,\n        isregneed: this.props.Login.masterData.realApprovalSubTypeValue.item.nisregsubtypeconfigneed\n      };\n      let inputParam = {\n        masterData: { ...this.props.Login.masterData,\n          searchedData: undefined\n        },\n        inputData\n      };\n      this.props.getURTFilterSubmit(inputParam); // const inputParam = {\n      //     inputData: { \"userinfo\": this.props.Login.userInfo },\n      //     classUrl: \"userroletemplate\",\n      //     methodUrl: \"Userroletemplate\",\n      //     userInfo: this.props.Login.userInfo,\n      //     displayName: \"IDS_USERROLETEMPLATE\"\n      //     //screenName:\"IDS_USERROLETEMPLATE\"\n      // };\n      // this.props.callService(inputParam);\n    };\n\n    this.onFilterSubmit = () => {\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        nflag: this.props.Login.masterData.defaultapprovalsubtype.item.nisregsubtypeconfigneed === transactionStatus.YES ? 2 : 1,\n        nregtypecode: parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\n        nregsubtypecode: parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\n        napprovalsubtypecode: this.props.Login.masterData.defaultapprovalsubtype.value,\n        ntreetemplatecode: this.props.Login.masterData.defaultapprovalsubtype.item.ntemplatecode,\n        ntreeversiontempcode: -1,\n        nmodulecode: 1,\n        isregneed: this.props.Login.masterData.defaultapprovalsubtype.item.nisregsubtypeconfigneed\n      };\n      let masterData = { ...this.props.Login.masterData,\n        realApprovalSubTypeValue: this.props.Login.masterData.defaultapprovalsubtype,\n        realRegTypeValue: this.props.Login.masterData.defaultregtype,\n        realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\n      };\n      let inputParam = {\n        masterData,\n        inputData,\n        searchRef: this.searchRef\n      };\n      this.props.getURTFilterSubmit(inputParam);\n    };\n\n    this.state = {\n      openModal: false,\n      userRoleTreeData: [],\n      userRoleControlRights: [],\n      URTvalues: [{\n        URTvalue: \"\"\n      }],\n      selectedApprovalType: 0,\n      error: \"\",\n      controlMap: new Map(),\n      selectedInput: \"\",\n      selectedRole: []\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"stransdisplaystatus\", \"sversionstatus\", \"sversiondescription\"];\n  }\n\n  appendInputtree(e) {\n    const totalLevel = this.props.Login.totalLevel ? this.props.Login.totalLevel : 1;\n\n    if (this.props.Login.selectedRecord[this.props.Login.id] !== undefined) {\n      let id = parseInt(this.props.Login.id) + 1;\n\n      if (id < 9) {\n        if (totalLevel < this.props.Login.userRoleActualData.length) {\n          //let id = parseInt(e.currentTarget.id) + 1;\n          let totalid = totalLevel;\n\n          if (totalid === id) {\n            if (this.props.Login.userRoleData.length <= 0) {\n              toast.info(this.props.intl.formatMessage({\n                id: \"IDS_NOUSERROLETOADDTONEXTLEVEL\"\n              }));\n            } else {\n              var newInput = `input-${totalLevel}`;\n              var userRoleTreeData = this.props.Login.userRoleTreeData.concat([newInput]);\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  userRoleTreeData,\n                  totalLevel: totalLevel + 1,\n                  id\n                }\n              };\n              this.props.updateStore(updateInfo);\n            }\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_NOUSERROLETOADDTONEXTLEVEL\"\n          }));\n        }\n      }\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_PLSSELECTUSERROLE\"\n      }));\n    }\n  }\n\n  removeTree(event, i) {\n    let userRoleTreeData = this.props.Login.userRoleTreeData;\n    userRoleTreeData.splice(i, 10);\n    const totalLevel = this.props.Login.totalLevel ? this.props.Login.totalLevel : 1;\n    const selectedRecord = this.props.Login.selectedRecord ? this.props.Login.selectedRecord : \"\";\n    let listUserRole = this.props.Login.userRoleData || [];\n\n    if (selectedRecord[i]) {\n      for (let j = i; j < totalLevel; j++) {\n        let index = this.props.Login.userRoleActualData.findIndex(data => data.nuserrolecode === parseInt(selectedRecord[j]));\n        listUserRole.push(this.props.Login.userRoleActualData[index]);\n        delete selectedRecord[j];\n      }\n\n      ;\n    } // const  TagUserroleData  = constructOptionList(listUserRole ||[], \"nuserrolecode\",\n    // \"suserrolename\" , undefined, undefined, undefined);\n    // const  TagListUserroleData = TagUserroleData.get(\"OptionList\");\n\n\n    let userRoleData = listUserRole;\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        userRoleTreeData,\n        userRoleData,\n        selectedRecord,\n        totalLevel: i,\n        id: i - 1\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  render() {\n    const {\n      masterData,\n      userInfo,\n      openModal,\n      userRoleTreeData,\n      userRoleData,\n      selectedRecord\n    } = this.props.Login;\n    const {\n      listuserroletemplate,\n      levelsuserroletemplate\n    } = this.props.Login.masterData;\n    const {\n      selectedInput\n    } = this.state;\n    const selected = this.props.Login.masterData.selectedURTVersion;\n    const addId = this.state.controlMap.has(\"AddUserRoleTempalate\") && this.state.controlMap.get(\"AddUserRoleTempalate\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditUserRoleTempalate\") && this.state.controlMap.get(\"EditUserRoleTempalate\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteUserRoleTempalate\") && this.state.controlMap.get(\"DeleteUserRoleTempalate\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveUserRoleTempalate\") && this.state.controlMap.get(\"ApproveUserRoleTempalate\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"listuserroletemplate\",\n      selectedObject: \"selectedURTVersion\",\n      primaryKeyField: \"ntreeversiontempcode\",\n      fetchUrl: \"userroletemplate/getUserroletemplatebyId\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    const mandatoryFields = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TEMPLATENAME\",\n      \"dataField\": \"sversiondescription\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    let breadCrumbData = [];\n\n    if (this.props.Login.masterData.realApprovalSubTypeValue && this.props.Login.masterData.realApprovalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL) {\n      breadCrumbData = [{\n        \"label\": \"IDS_APPROVALSUBTYPE\",\n        \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"-\"\n      }, {\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\n      }, {\n        \"label\": \"IDS_REGSUBTYPE\",\n        \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\n      }];\n    } else {\n      breadCrumbData = [{\n        \"label\": \"IDS_APPROVALSUBTYPE\",\n        \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"-\"\n      }];\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterData: masterData,\n      formatMessage: this.props.intl.formatMessage,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_USERROLETEMPLATE\"\n      }),\n      masterList: this.props.Login.masterData.searchedData || listuserroletemplate,\n      userInfo: this.props.Login.userInfo,\n      getMasterDetail: URTvalue => this.props.getTreetemplate(URTvalue, masterData, userInfo),\n      selectedMaster: this.props.Login.masterData.selectedURTVersion || {} //this.props.Login.masterData.selected}\n      ,\n      primaryKeyField: \"ntreeversiontempcode\",\n      mainField: \"sversiondescription\" //firstField=\"sversiondescription\"\n      ,\n      firstField: \"stransdisplaystatus\" //secondField=\"stransdisplaystatus\"\n      ,\n      isIDSField: \"No\",\n      openModal: () => this.props.addScreenModel(\"create\", masterData, userInfo, addId, selectedInput),\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: true,\n      needAccordianFilter: false,\n      showFilterIcon: true,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_USERROLETEMPLATEFILTER\": /*#__PURE__*/React.createElement(UserRoleTemplateFilter, {\n          formatMessage: this.props.intl.formatMessage,\n          filterApprovalSubtype: this.state.listApprovalsubtype || [],\n          filterRegistrationType: this.state.listRegistrationType || [],\n          filterRegistrationSubType: this.state.listRegistrationSubType || [],\n          defaultapprovalsubtype: this.props.Login.masterData[\"defaultapprovalsubtype\"] || {},\n          defaultregsubtype: this.props.Login.masterData[\"defaultregsubtype\"] || [],\n          defaultregtype: this.props.Login.masterData[\"defaultregtype\"] || [],\n          selectedApprovalType: this.props.Login.masterData.defaultapprovalsubtype || [],\n          selectedInput: selectedInput || [],\n          isRegNeed: this.props.Login.masterData.defaultapprovalsubtype ? this.props.Login.masterData.defaultapprovalsubtype.item.nisregsubtypeconfigneed : transactionStatus.NO,\n          filterComboChange: this.filterComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 29\n      }\n    })), this.props.Login.masterData.selectedURTVersion && listuserroletemplate && listuserroletemplate.length > 0 ? /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 37\n      }\n    }, selected && /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 57\n      }\n    }, selected.sversiondescription))), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      className: \"readonly-text font-weight-normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"product-title-sub\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 61\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_VERSION\"\n    }), \" : \", selected.nversionno === -1 ? \"-\" : selected.nversionno), /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${selected.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : selected.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 61\n      }\n    }, selected.stransdisplaystatus)), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Nav, {\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      onClick: () => this.props.fetchRecordById(\"ntreeversiontempcode\", selected.ntreeversiontempcode, masterData, \"update\", this.props.Login.selectedRecord, selectedInput, userInfo, editId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      onClick: () => this.approveRecord(\"approve\", approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      name: \"URTapprove\",\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 69\n      }\n    }))))))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"tree-view1 border-left tree-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 45\n      }\n    }, levelsuserroletemplate ? levelsuserroletemplate.map((input, i) => /*#__PURE__*/React.createElement(ListWrapper, {\n      key: i,\n      className: \"form-label-group tree-level list_get\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(NavHeader, {\n      className: \"line\",\n      style: {\n        width: (i + 1) * 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 57\n      }\n    }, \" \"), /*#__PURE__*/React.createElement(NavHeader, {\n      id: i,\n      value: this.props.Login.totalLevel,\n      className: \"add_field_button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 57\n      }\n    }, \"+\"), /*#__PURE__*/React.createElement(NavHeader, {\n      className: \"levelcolour\",\n      ml: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_LEVEL\"\n    }), \" \", i + 1), /*#__PURE__*/React.createElement(ListWrapper, {\n      style: {\n        marginLeft: (i + 8) * 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      className: \"input_custom\",\n      value: input.sleveluserrole,\n      id: \"levelname\",\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 61\n      }\n    })))) : \"\"))))) : \"\")), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      operation: this.props.Login.operation,\n      onSaveClick: this.saveTreetemplate,\n      validateEsign: this.validateEsign,\n      esign: this.props.Login.loadEsign,\n      screenName: \"IDS_USERROLETEMPLATE\",\n      mandatoryFields: mandatoryFields,\n      selectedRecord: this.props.Login.loadEsign ? this.props.Login.selectedRecord : selectedInput,\n      closeModal: this.closeModel,\n      show: openModal,\n      inputParam: 1,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation // formatMessage={this.props.intl.formatMessage}\n        ,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam //selectedRecord={this.state.selectedRecord || {}}\n        ,\n        selectedRecord: this.props.Login.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        name: \"sversiondescription\",\n        as: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        defaultValue: selectedInput ? selectedInput[\"sversiondescription\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(ListWrapper, {\n        className: \"tree-view border-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 37\n        }\n      }, userRoleTreeData ? userRoleTreeData.map((input, i) => /*#__PURE__*/React.createElement(ListWrapper, {\n        className: \"form-label-group tree-level\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(NavHeader, {\n        className: \"line\",\n        style: {\n          width: (i + 1) * 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 53\n        }\n      }, \" \"), /*#__PURE__*/React.createElement(NavHeader, {\n        id: i,\n        value: this.props.Login.totalLevel,\n        className: \"add_field_button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 53\n        }\n      }, \"+\"), /*#__PURE__*/React.createElement(NavHeader, {\n        md: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 53\n        }\n      }, this.props.intl.formatMessage({\n        id: \"IDS_LEVEL\"\n      }), \" \", /*#__PURE__*/React.createElement(NavHeader, {\n        className: \"tree-value\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 124\n        }\n      }, i + 1)), /*#__PURE__*/React.createElement(Nav, {\n        className: \"btn mr-2 action-icons-wrap\",\n        style: {\n          float: \"right\",\n          visibility: i === 0 ? 'hidden' : 'visible'\n        },\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        onClick: event => this.removeTree(event, i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        name: \"URTMDelete\",\n        icon: faTrashAlt,\n        className: \"ActionIconColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 57\n        }\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        style: {\n          marginLeft: (i + 3) * 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"nuserrolecode\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        isMandatory: false,\n        optionId: \"nuserrolecode\",\n        optionValue: \"suserrolename\",\n        defaultValue: {\n          \"value\": input[\"nuserrolecode\"],\n          \"label\": input[\"sleveluserrole\"]\n        },\n        options: userRoleData ? constructOptionList(userRoleData || [], \"nuserrolecode\", \"suserrolename\", undefined, undefined, undefined).get(\"OptionList\") : [],\n        onChange: event => this.onChangeCombo(event, i, this.props.Login.operation),\n        isMulti: false,\n        isSearchable: false,\n        isDisabled: false // placeholder=\"Select User Role\"\n        ,\n        isClearable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 61\n        }\n      }))))) : \"\"), /*#__PURE__*/React.createElement(NavHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        name: \"URTMAdd\",\n        onClick: e => this.appendInputtree(e),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        className: \"btn btn-circle solid-blue\",\n        role: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 41\n        }\n      }, \"+\")))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      userRoleControlRights,\n      controlMap,\n      listApprovalsubtype,\n      listRegistrationType,\n      listRegistrationSubType\n    } = this.state;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        updateState = true;\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    } // if (this.props.Login.selectedInput !== previousProps.Login.selectedInput) {\n    //     updateState = true;\n    //     selectedInput = this.props.Login.selectedInput\n    // }\n\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      updateState = true; // const selectedRecord = {}\n\n      const selectedInput = {};\n      let Taglstapprovalsubtype;\n      let TaglistRegistrationType;\n      let TaglistRegistrationSubType;\n\n      if (this.props.Login.masterData.levelsuserroletemplate && this.props.Login.masterData.levelsuserroletemplate.length > 0) {\n        selectedRecord[\"napprovalconfigcode\"] = this.props.Login.masterData.levelsuserroletemplate[0][\"napprovalconfigcode\"];\n        selectedRecord[\"ntransactionstatus\"] = this.props.Login.masterData.levelsuserroletemplate[0][\"ntransactionstatus\"];\n      } else {\n        if (selectedRecord) {\n          selectedRecord[\"napprovalconfigcode\"] = -1;\n        } else {\n          selectedRecord = {\n            napprovalconfigcode: -1\n          };\n        }\n\n        selectedRecord[\"ntransactionstatus\"] = this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"ntransactionstatus\"] : [];\n      } // selectedRecord[\"napprovalconfigcode\"] = this.props.Login.masterData.levelsuserroletemplate ? this.props.Login.masterData.levelsuserroletemplate.length > 0 ?\n      //     this.props.Login.masterData.levelsuserroletemplate[0][\"napprovalconfigcode\"] : -1 : -1\n      // selectedRecord[\"ntransactionstatus\"] = this.props.Login.masterData.levelsuserroletemplate ? this.props.Login.masterData.levelsuserroletemplate.length > 0 ?\n      //     this.props.Login.masterData.levelsuserroletemplate[0][\"ntransactionstatus\"] :\n      //     this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"ntransactionstatus\"] : [] : [];\n\n\n      if (this.props.Login.masterData.lstapprovalsubtype) {\n        Taglstapprovalsubtype = constructOptionList(this.props.Login.masterData.lstapprovalsubtype || [], \"napprovalsubtypecode\", \"ssubtypename\", \"ntemplatecode\", \"ascending\", undefined);\n        listApprovalsubtype = Taglstapprovalsubtype.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.listRegistrationType) {\n        TaglistRegistrationType = constructOptionList(this.props.Login.masterData.listRegistrationType || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\n        listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.listRegistrationSubType) {\n        TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.listRegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\n        listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.levelsuserroletemplate) {\n        sortData(this.props.Login.masterData.levelsuserroletemplate, \"ascending\", \"nlevelno\");\n      }\n\n      selectedInput[\"isRegNeed\"] = this.props.Login.masterData.selectedInput ? this.props.Login.masterData.selectedInput[\"isRegNeed\"] : this.props.Login.masterData.lstapprovalsubtype ? this.props.Login.masterData.lstapprovalsubtype.length > 0 ? this.props.Login.masterData.lstapprovalsubtype[0][\"nisregsubtypeconfigneed\"] : \"\" ? \"\" : \"\" : \"\";\n\n      if (updateState) {\n        this.setState({\n          selectedRecord,\n          controlMap,\n          userRoleControlRights,\n          listApprovalsubtype,\n          listRegistrationType,\n          listRegistrationSubType,\n          selectedInput\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (!props.Login.loadEsign) {\n      return {\n        selectedRecord: { ...state.selectedRecord,\n          esigncomments: '',\n          esignpassword: ''\n        }\n      };\n    }\n\n    return null;\n  }\n\n}\n\nconst mapStatetoProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStatetoProps, {\n  callService,\n  crudMaster,\n  addScreenModel,\n  updateStore,\n  validateEsignCredential,\n  getURTFilterRegType,\n  getURTFilterRegSubType,\n  getURTFilterSubmit,\n  fetchRecordById,\n  getTreetemplate,\n  filterColumnData,\n  postCRUDOrganiseSearch\n})(injectIntl(userroletempalate));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/userroletemplate/userroletemplate.component.jsx"],"names":["FormInput","FormSelectSearch","Row","Col","Card","Nav","Button","FontAwesomeIcon","faPencilAlt","faTrashAlt","faThumbsUp","connect","sortData","getControlMap","showEsign","constructOptionList","React","Component","NavHeader","ContentPanel","ListWrapper","callService","crudMaster","updateStore","addScreenModel","validateEsignCredential","getURTFilterRegType","getURTFilterRegSubType","getURTFilterSubmit","fetchRecordById","getTreetemplate","filterColumnData","postCRUDOrganiseSearch","injectIntl","toast","ListMaster","UserRoleTemplateFilter","SlideOutModal","DEFAULT_RETURN","Esign","ApprovalSubType","transactionStatus","BreadcrumbComponent","Affix","ConfirmMessage","userroletempalate","constructor","props","closeModel","loadEsign","Login","openModal","selectedRecord","operation","updateInfo","typeName","data","filterComboChange","event","fieldname","inputData","userinfo","userInfo","nflag","napprovalsubtypecode","parseInt","value","ntemplatecode","item","isregneed","nisregsubtypeconfigneed","masterData","defaultapprovalsubtype","inputParam","nregtypecode","defaultregtype","defaultregsubtype","ConfirmDelete","deleteId","confirmMessage","confirm","intl","formatMessage","id","deleteRecord","approveRecord","ncontrolCode","selected","selectedURTVersion","APPROVED","RETIRED","warn","realApprovalSubTypeValue","realRegTypeValue","realRegSubTypeValue","ntreeversiontempcode","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","fetchUrl","fecthInputObject","methodUrl","classUrl","userRoleControlRights","nformcode","screenData","saveTreetemplate","saveType","formRef","listUserRoleTree","levelno","selectedInput","state","selectedRole","index","totalLevel","push","toString","info","sversiondescription","undefined","searchRef","onChangeCombo","userRoleActualData","findIndex","nuserrolecode","userRoleData","splice","userRoleTreeData","onEsignInputOnChange","target","type","name","checked","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","onInputOnChange","setState","reloadData","current","YES","nregsubtypecode","ntreetemplatecode","nmodulecode","searchedData","onFilterSubmit","URTvalues","URTvalue","selectedApprovalType","error","controlMap","Map","createRef","searchFieldList","appendInputtree","e","length","totalid","newInput","concat","removeTree","i","listUserRole","j","render","listuserroletemplate","levelsuserroletemplate","addId","has","get","ncontrolcode","editId","approveId","filterParam","mandatoryFields","breadCrumbData","TESTRESULTAPPROVAL","listApprovalsubtype","listRegistrationType","listRegistrationSubType","NO","nversionno","ntransactionstatus","DRAFT","stransdisplaystatus","float","indexOf","map","input","width","marginLeft","sleveluserrole","visibility","componentDidUpdate","previousProps","updateState","Object","values","Taglstapprovalsubtype","TaglistRegistrationType","TaglistRegistrationSubType","napprovalconfigcode","lstapprovalsubtype","componentWillUnmount","getDerivedStateFromProps","masterStatus","errorCode","esigncomments","esignpassword","mapStatetoProps"],"mappings":"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","sourcesContent":["import FormInput from '../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { Row, Col, Card, Nav, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt, faThumbsUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport { sortData, getControlMap, showEsign, constructOptionList } from '../../components/CommonScript';\r\nimport '../../assets/./styles/tree.css';\r\nimport React, { Component } from 'react';\r\nimport { NavHeader } from '../../components/sidebar/sidebar.styles';\r\nimport { ContentPanel, ListWrapper } from './userroletemplate.styles';\r\nimport {\r\n    callService, crudMaster, updateStore, addScreenModel, validateEsignCredential,\r\n    getURTFilterRegType, getURTFilterRegSubType, getURTFilterSubmit,\r\n    fetchRecordById, getTreetemplate, filterColumnData, postCRUDOrganiseSearch\r\n} from '../../actions';\r\nimport { injectIntl } from 'react-intl';\r\n// import rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport UserRoleTemplateFilter from './UserRoleTemplateFilter';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport Esign from '../audittrail/Esign';\r\n// import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport { ApprovalSubType, transactionStatus } from '../../components/Enumeration';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\n\r\nclass userroletempalate extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            openModal: false,\r\n            userRoleTreeData: [],\r\n            userRoleControlRights: [],\r\n            URTvalues: [{ URTvalue: \"\" }],\r\n            selectedApprovalType: 0,\r\n            error: \"\",\r\n            controlMap: new Map(),\r\n            selectedInput: \"\",\r\n            selectedRole:[],\r\n        }\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.searchFieldList = [\"stransdisplaystatus\", \"sversionstatus\", \"sversiondescription\"];\r\n    }\r\n\r\n    closeModel = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord=this.props.Login.selectedRecord;\r\n               \r\n        \r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord[\"agree\"] = 4;\r\n                selectedRecord['esignpassword'] = \"\";\r\n                selectedRecord['esigncomments'] = \"\";\r\n                selectedRecord['esignreason']=\"\";\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = 4;\r\n                selectedRecord['esignpassword'] = \"\";\r\n                selectedRecord['esigncomments'] = \"\";\r\n                selectedRecord['esignreason']=\"\";\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign ,selectedRecord}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    appendInputtree(e) {\r\n        const totalLevel = this.props.Login.totalLevel ? this.props.Login.totalLevel : 1;\r\n        if (this.props.Login.selectedRecord[this.props.Login.id] !== undefined) {\r\n            let id = parseInt(this.props.Login.id) + 1;\r\n\r\n            if (id < 9) {\r\n                if (totalLevel < (this.props.Login.userRoleActualData.length)) {\r\n                    //let id = parseInt(e.currentTarget.id) + 1;\r\n                    let totalid = totalLevel;\r\n                    if (totalid === id) {\r\n                        if (this.props.Login.userRoleData.length <= 0) {\r\n                            toast.info(this.props.intl.formatMessage({ id: \"IDS_NOUSERROLETOADDTONEXTLEVEL\" }));\r\n                        }\r\n                        else {\r\n                            var newInput = `input-${totalLevel}`;\r\n                            var userRoleTreeData = this.props.Login.userRoleTreeData.concat([newInput])\r\n                            const updateInfo = {\r\n                                typeName: DEFAULT_RETURN,\r\n                                data: { userRoleTreeData, totalLevel: totalLevel + 1, id }\r\n                            }\r\n\r\n                            this.props.updateStore(updateInfo)\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_NOUSERROLETOADDTONEXTLEVEL\" }));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTUSERROLE\" }));\r\n        }\r\n    }\r\n\r\n    removeTree(event, i) {\r\n        let userRoleTreeData = this.props.Login.userRoleTreeData;\r\n        userRoleTreeData.splice(i, 10);\r\n        const totalLevel = this.props.Login.totalLevel ? this.props.Login.totalLevel : 1;\r\n        const selectedRecord = this.props.Login.selectedRecord ? this.props.Login.selectedRecord : \"\";\r\n        let listUserRole = this.props.Login.userRoleData || [];\r\n        if (selectedRecord[i]) {\r\n            for (let j = i; j < totalLevel; j++) {\r\n                let index = (this.props.Login.userRoleActualData).findIndex(data => data.nuserrolecode === parseInt(selectedRecord[j]));\r\n                listUserRole.push(this.props.Login.userRoleActualData[index]);\r\n                delete selectedRecord[j];\r\n            };\r\n        }\r\n\r\n        // const  TagUserroleData  = constructOptionList(listUserRole ||[], \"nuserrolecode\",\r\n        // \"suserrolename\" , undefined, undefined, undefined);\r\n        // const  TagListUserroleData = TagUserroleData.get(\"OptionList\");\r\n\r\n        let userRoleData = listUserRole;\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { userRoleTreeData, userRoleData, selectedRecord, totalLevel: i, id: i - 1 }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    filterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            // let uRL = \"\";\r\n            let inputData = [];\r\n            if (fieldname === \"approvalSubType\") {\r\n                // uRL = 'userroletemplate/getApprovalRegSubType';\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 1,\r\n                    napprovalsubtypecode: parseInt(event.value),\r\n                    ntemplatecode: parseInt(event.item.ntemplatecode),\r\n                    isregneed: parseInt(event.item.nisregsubtypeconfigneed),\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultapprovalsubtype: event }\r\n                let inputParam = { masterData, inputData }\r\n                this.props.getURTFilterRegType(inputParam)\r\n            }\r\n            else if (fieldname === \"registrationType\") {\r\n                // uRL = 'userroletemplate/getApprovalRegSubType';\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 2,\r\n                    nregtypecode: parseInt(event.value),\r\n                    napprovalsubtypecode: this.props.Login.masterData.defaultapprovalsubtype.value,\r\n                    ntemplatecode: this.props.Login.masterData.defaultapprovalsubtype.item.ntemplatecode,\r\n                    isregneed: this.props.Login.masterData.defaultapprovalsubtype.item.nisregsubtypeconfigneed,\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultregtype: event }\r\n                let inputParam = { masterData, inputData }\r\n                this.props.getURTFilterRegSubType(inputParam)\r\n            } else {\r\n\r\n                let masterData = { ...this.props.Login.masterData, defaultregsubtype: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { masterData, userInfo, openModal, userRoleTreeData, userRoleData, selectedRecord } = this.props.Login;\r\n        const { listuserroletemplate, levelsuserroletemplate } = this.props.Login.masterData;\r\n        const { selectedInput } = this.state;\r\n        const selected = this.props.Login.masterData.selectedURTVersion;\r\n        const addId = this.state.controlMap.has(\"AddUserRoleTempalate\") && this.state.controlMap.get(\"AddUserRoleTempalate\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditUserRoleTempalate\") && this.state.controlMap.get(\"EditUserRoleTempalate\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteUserRoleTempalate\") && this.state.controlMap.get(\"DeleteUserRoleTempalate\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"ApproveUserRoleTempalate\") && this.state.controlMap.get(\"ApproveUserRoleTempalate\").ncontrolcode;\r\n\r\n        const filterParam = {\r\n            inputListName: \"listuserroletemplate\",\r\n            selectedObject: \"selectedURTVersion\",\r\n            primaryKeyField: \"ntreeversiontempcode\",\r\n            fetchUrl: \"userroletemplate/getUserroletemplatebyId\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: this.searchFieldList\r\n        };\r\n\r\n        const mandatoryFields = [\r\n            { \"mandatory\": true, \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"sversiondescription\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n\r\n        ];\r\n        let breadCrumbData = []\r\n        if (this.props.Login.masterData.realApprovalSubTypeValue && this.props.Login.masterData.realApprovalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL) {\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_APPROVALSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"-\"\r\n                }, {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\r\n                }, {\r\n                    \"label\": \"IDS_REGSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\r\n                }\r\n            ];\r\n        } else {\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_APPROVALSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"-\"\r\n                }\r\n            ]\r\n        }\r\n        return (\r\n            <>\r\n                {/* <Preloader loading={loading} /> */}\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n\r\n                    }\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n\r\n                            <ListMaster\r\n                                masterData={masterData}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_USERROLETEMPLATE\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || listuserroletemplate}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                getMasterDetail={(URTvalue) => this.props.getTreetemplate(URTvalue, masterData, userInfo)}\r\n                                selectedMaster={this.props.Login.masterData.selectedURTVersion || {}}//this.props.Login.masterData.selected}\r\n                                primaryKeyField=\"ntreeversiontempcode\"\r\n                                mainField=\"sversiondescription\"\r\n                                //firstField=\"sversiondescription\"\r\n                                firstField=\"stransdisplaystatus\"\r\n                                //secondField=\"stransdisplaystatus\"\r\n                                isIDSField=\"No\"\r\n                                openModal={() => this.props.addScreenModel(\"create\", masterData, userInfo, addId, selectedInput)}\r\n\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n                                needAccordianFilter={false}\r\n                                showFilterIcon={true}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_USERROLETEMPLATEFILTER\":\r\n                                            <UserRoleTemplateFilter\r\n                                                formatMessage={this.props.intl.formatMessage}\r\n                                                filterApprovalSubtype={this.state.listApprovalsubtype || []}\r\n                                                filterRegistrationType={this.state.listRegistrationType || []}\r\n                                                filterRegistrationSubType={this.state.listRegistrationSubType || []}\r\n                                                defaultapprovalsubtype={this.props.Login.masterData[\"defaultapprovalsubtype\"] || {}}\r\n                                                defaultregsubtype={this.props.Login.masterData[\"defaultregsubtype\"] || []}\r\n                                                defaultregtype={this.props.Login.masterData[\"defaultregtype\"] || []}\r\n                                                selectedApprovalType={this.props.Login.masterData.defaultapprovalsubtype || []}\r\n                                                selectedInput={selectedInput || []}\r\n                                                isRegNeed={this.props.Login.masterData.defaultapprovalsubtype ? this.props.Login.masterData.defaultapprovalsubtype.item.nisregsubtypeconfigneed : transactionStatus.NO}\r\n                                                filterComboChange={this.filterComboChange}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n\r\n                        {this.props.Login.masterData.selectedURTVersion && listuserroletemplate && listuserroletemplate.length > 0 ?\r\n                            <Col md={8}>\r\n                                <ListWrapper className=\"panel-main-content\">\r\n                                    <Card className=\"border-0\">\r\n                                        {(selected) &&\r\n                                            <Card.Header>\r\n                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                                <Card.Title>\r\n                                                    <>\r\n                                                        <h1 className=\"product-title-main\">{selected.sversiondescription}</h1>\r\n                                                    </>\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle className=\"readonly-text font-weight-normal\">\r\n                                                    <Row>\r\n                                                        <Col md={8} className=\"d-flex\">\r\n                                                            <h3 className=\"product-title-sub\">{this.props.intl.formatMessage({ id: \"IDS_VERSION\" })} : {selected.nversionno === -1 ? \"-\" : selected.nversionno}</h3>\r\n                                                            <span className={`btn btn-outlined ${selected.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : selected.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`}>\r\n                                                                {selected.stransdisplaystatus}</span>\r\n                                                        </Col>\r\n                                                        <Col md={4}>\r\n                                                            {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                            <Nav style={{ float: \"right\" }}>\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                  //  data-for=\"tooltip_list_wrap\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                    onClick={() => this.props.fetchRecordById(\"ntreeversiontempcode\", selected.ntreeversiontempcode, masterData, \"update\", this.props.Login.selectedRecord, selectedInput, userInfo, editId)}>\r\n                                                                    <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                                </Nav.Link>\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                  //  data-for=\"tooltip_list_wrap\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                    {/* <ConfirmDialog\r\n                                                                            name=\"deleteMessage\"\r\n                                                                            message=\"Are you sure?\"\r\n                                                                            doLabel=\"Ok\"\r\n                                                                            doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                            icon={faTrashAlt}\r\n                                                                            //title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                            hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                            handleClickDelete={() => this.deleteRecord(\"delete\", deleteId)}\r\n                                                                        /> */}\r\n                                                                </Nav.Link>\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                 //   data-for=\"tooltip_list_wrap\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                    onClick={() => this.approveRecord(\"approve\", approveId)}>\r\n                                                                    <FontAwesomeIcon name=\"URTapprove\" icon={faThumbsUp} />\r\n                                                                </Nav.Link>\r\n                                                            </Nav>\r\n                                                            {/* </Tooltip> */}\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                        }\r\n                                    </Card>\r\n                                </ListWrapper>\r\n\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    <ListWrapper className=\"card-body\">\r\n                                        <React.Fragment>\r\n                                            <ListWrapper className=\"tree-view1 border-left tree-left\">\r\n                                                {levelsuserroletemplate ? levelsuserroletemplate.map((input, i) =>\r\n                                                    <ListWrapper key={i} className=\"form-label-group tree-level list_get\">\r\n                                                        <NavHeader className=\"line\" style={{ width: (i + 1) * 10 }}> </NavHeader>\r\n                                                        <NavHeader id={i} value={this.props.Login.totalLevel}\r\n                                                            className=\"add_field_button\">+</NavHeader>\r\n                                                        <NavHeader className=\"levelcolour\" ml={1}>{this.props.intl.formatMessage({ id: \"IDS_LEVEL\" })} {i + 1}</NavHeader>\r\n                                                        <ListWrapper style={{ marginLeft: (i + 8) * 10 }}>\r\n                                                            <FormInput className=\"input_custom\" value={input.sleveluserrole} id=\"levelname\" type=\"text\" />\r\n                                                        </ListWrapper>\r\n                                                    </ListWrapper>\r\n                                                ) : \"\"\r\n                                                }\r\n                                            </ListWrapper>\r\n                                        </React.Fragment>\r\n                                    </ListWrapper>\r\n                                </ContentPanel>\r\n                            </Col>\r\n                            : \"\"}\r\n                    </Row >\r\n                </div>\r\n\r\n\r\n                {this.props.Login.openModal ?\r\n                    < SlideOutModal\r\n                        operation={this.props.Login.operation}\r\n                        onSaveClick={this.saveTreetemplate}\r\n                        validateEsign={this.validateEsign}\r\n                        esign={this.props.Login.loadEsign}\r\n                        screenName=\"IDS_USERROLETEMPLATE\"\r\n                        mandatoryFields={mandatoryFields}\r\n                        selectedRecord={this.props.Login.loadEsign ? this.props.Login.selectedRecord : selectedInput}\r\n                        closeModal={this.closeModel}\r\n                        show={openModal}\r\n                        inputParam={1}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                // formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                //selectedRecord={this.state.selectedRecord || {}}\r\n                                selectedRecord={this.props.Login.selectedRecord || {}}\r\n                            />\r\n\r\n                            : <Row>\r\n                                <Col md={12}>\r\n                                    <FormInput\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                        name={\"sversiondescription\"}\r\n                                        as=\"text\"\r\n                                        onChange={(event) => this.onInputOnChange(event)}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                        defaultValue={selectedInput ? selectedInput[\"sversiondescription\"] : \"\"}\r\n                                        isMandatory={true}\r\n                                        required={true}\r\n                                        maxLength={100}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={12}>\r\n                                    <ListWrapper className=\"tree-view border-left\">\r\n                                        {userRoleTreeData ?\r\n                                            userRoleTreeData.map((input, i) =>\r\n                                                <ListWrapper className=\"form-label-group tree-level\">\r\n                                                    <NavHeader className=\"line\" style={{ width: (i + 1) * 10 }}> </NavHeader>\r\n                                                    <NavHeader id={i} value={this.props.Login.totalLevel}\r\n                                                        className=\"add_field_button\">+</NavHeader>\r\n                                                    <NavHeader md={1}>{this.props.intl.formatMessage({ id: \"IDS_LEVEL\" })} <NavHeader className=\"tree-value\">{i + 1}</NavHeader>\r\n                                                    </NavHeader>\r\n                                                    <Nav className=\"btn mr-2 action-icons-wrap\" style={{ float: \"right\", visibility: i === 0 ? 'hidden' : 'visible' }} \r\n                                                    data-tip={this.props.intl.formatMessage({id: \"IDS_DELETE\"})} onClick={(event) => this.removeTree(event, i)}>\r\n                                                        <FontAwesomeIcon name=\"URTMDelete\" icon={faTrashAlt} className=\"ActionIconColor\" />\r\n                                                    </Nav>\r\n                                                    <Row>\r\n                                                        <Col md={12} style={{ marginLeft: (i + 3) * 10 }}>\r\n                                                            <FormSelectSearch\r\n                                                                name={\"nuserrolecode\"}\r\n                                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                isMandatory={false}\r\n                                                                optionId=\"nuserrolecode\"\r\n                                                                optionValue=\"suserrolename\"\r\n                                                                defaultValue={{ \"value\": input[\"nuserrolecode\"], \"label\": input[\"sleveluserrole\"] }}\r\n                                                                options={userRoleData ? constructOptionList(userRoleData || [], \"nuserrolecode\",\r\n                                                                    \"suserrolename\", undefined, undefined, undefined).get(\"OptionList\") : []}\r\n                                                                onChange={(event) => this.onChangeCombo(event, i, this.props.Login.operation)}\r\n                                                                isMulti={false}\r\n                                                                isSearchable={false}\r\n                                                                isDisabled={false}\r\n                                                                // placeholder=\"Select User Role\"\r\n                                                                isClearable={true}>\r\n\r\n                                                            </FormSelectSearch>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </ListWrapper>\r\n                                            )\r\n                                            : \"\"}\r\n                                    </ListWrapper>\r\n\r\n                                    <NavHeader>\r\n                                        <Button name=\"URTMAdd\" onClick={(e) => this.appendInputtree(e)}  \r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                        className=\"btn btn-circle solid-blue\" role=\"button\">+</Button>\r\n                                    </NavHeader>\r\n\r\n                                </Col>\r\n                            </Row>\r\n                        } />\r\n                    : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(\"delete\", deleteId));\r\n    }\r\n\r\n    //approve the record\r\n    approveRecord = (operation, ncontrolCode) => {\r\n        const selectedRecord = this.props.Login.selectedRecord ? this.props.Login.selectedRecord : \"\";\r\n        // const selectedInput = this.state.selectedInput ? this.state.selectedInput : \"\";\r\n        const selected = this.props.Login.masterData.selectedURTVersion;\r\n        if (selectedRecord[\"ntransactionstatus\"] === transactionStatus.APPROVED || selectedRecord[\"ntransactionstatus\"] === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTOAPPROVE\" }));\r\n        }\r\n        else {\r\n            let inputData = [];\r\n            inputData = {\r\n                \"ntreetemplatecode\": this.props.Login.masterData.realApprovalSubTypeValue.item.ntemplatecode,\r\n                \"napprovalsubtypecode\": this.props.Login.masterData.realApprovalSubTypeValue.value,\r\n                \"nregtypecode\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n                \"nregsubtypecode\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n                \"ntreeversiontempcode\": selected.ntreeversiontempcode,\r\n                \"napprovalconfigcode\": selectedRecord[\"napprovalconfigcode\"],\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"isregneed\": this.props.Login.masterData.realApprovalSubTypeValue.item.nisregsubtypeconfigneed\r\n            }\r\n\r\n\r\n            const postParam = {\r\n                inputListName: \"listuserroletemplate\", selectedObject: \"selectedURTVersion\",\r\n                primaryKeyField: \"ntreeversiontempcode\",\r\n                primaryKeyValue: selected.ntreeversiontempcode,\r\n                fetchUrl: \"userroletemplate/getUserroletemplatebyId\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n\r\n            const inputParam = {\r\n                methodUrl: \"UserroleTemplatemaster\",\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                inputData: inputData,\r\n                operation: operation,\r\n                postParam\r\n            }\r\n\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, openModal: true, screenData: { inputParam, masterData },\r\n                        operation: operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //to delete a recored\r\n    deleteRecord = (operation, ncontrolCode) => {\r\n        const selectedRecord = this.props.Login.selectedRecord ? this.props.Login.selectedRecord : \"\";\r\n        // const selectedInput = this.state.selectedInput ? this.state.selectedInput : \"\";\r\n        const selected = this.props.Login.masterData.selectedURTVersion;\r\n        if (selectedRecord[\"ntransactionstatus\"] === transactionStatus.APPROVED || selectedRecord[\"ntransactionstatus\"] === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTODELETE\" }));\r\n        }\r\n        else {\r\n            let inputData = [];\r\n            inputData = {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"ntreetemplatecode\": this.props.Login.masterData.realApprovalSubTypeValue.item.ntemplatecode,\r\n                \"napprovalsubtypecode\": this.props.Login.masterData.realApprovalSubTypeValue.value,\r\n                \"nregtypecode\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n                \"nregsubtypecode\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n                \"ntreeversiontempcode\": selected.ntreeversiontempcode,\r\n                \"isregneed\": this.props.Login.masterData.realApprovalSubTypeValue.item.nisregsubtypeconfigneed\r\n            }\r\n\r\n            const postParam = {\r\n                inputListName: \"listuserroletemplate\", selectedObject: \"selectedURTVersion\",\r\n                primaryKeyField: \"ntreeversiontempcode\",\r\n                primaryKeyValue: selected.ntreeversiontempcode,\r\n                fetchUrl: \"userroletemplate/getUserroletemplatebyId\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n\r\n\r\n            const inputParam = {\r\n                methodUrl: \"UserroleTemplatemaster\",\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                inputData: inputData,\r\n                operation: operation,\r\n                postParam\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, openModal: true, screenData: { inputParam, masterData },\r\n                        operation: operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    saveTreetemplate = (saveType, formRef) => {\r\n\r\n        let listUserRoleTree = [];\r\n        let levelno = 0;\r\n        let selectedRecord = this.props.Login.selectedRecord ? this.props.Login.selectedRecord : \"\";\r\n        //const selectedLevel = this.state.selectedRole.length>0 ? this.state.selectedRole : this.props.Login.selectedRecord?this.props.Login.selectedRecord:\"\";\r\n        //this.state.selectedRole=this.props.Login.selectedRecord ? this.props.Login.selectedRecord : \"\";\r\n        const selectedInput = this.state.selectedInput ? this.state.selectedInput : \"\";\r\n        const selected = this.props.Login.masterData.selectedURTVersion;\r\n\r\n        this.state.selectedRole=[];\r\n        for (let index = 0; index < this.props.Login.totalLevel; index++) {\r\n            levelno = index + 1;\r\n            if (selectedRecord[index]) {\r\n                listUserRoleTree.push((selectedRecord[index]).toString())\r\n                //this.state.selectedRole.push((selectedRecord[index]).toString());\r\n            }\r\n            else {\r\n                return toast.info(this.props.intl.formatMessage({ id: \"IDS_PLESESELECTTHELEVEL\" }) + levelno);\r\n            }\r\n           \r\n            // if (selectedLevel[index]) {\r\n            //     listUserRoleTree.push((selectedLevel[index]).toString())\r\n            //     this.state.selectedRole.push((listUserRoleTree[index]).toString());\r\n            // }\r\n            // else {\r\n            //     return toast.info(this.props.intl.formatMessage({ id: \"IDS_PLESESELECTTHELEVEL\" }) + levelno);\r\n            // }\r\n        }\r\n        let inputData = [];\r\n        let methodUrl = \"\";\r\n        inputData = {\r\n            \"userinfo\": this.props.Login.userInfo,\r\n            \"treetemptranstestgroup\": listUserRoleTree,\r\n            \"specname\": selectedInput.sversiondescription,\r\n            \"ntemplatecode\": this.props.Login.masterData.realApprovalSubTypeValue.item.ntemplatecode,\r\n            \"napprovalsubtypecode\": this.props.Login.masterData.realApprovalSubTypeValue.value,\r\n            \"nregtypecode\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n            \"nregsubtypecode\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n            \"ntreeversiontempcode\": selected === undefined ? -1 : selected.ntreeversiontempcode ? selected.ntreeversiontempcode : -1,\r\n            \"napprovalconfigcode\": selectedRecord[\"napprovalconfigcode\"] ? selectedRecord[\"napprovalconfigcode\"] : undefined,\r\n            \"isregneed\": this.props.Login.masterData.realApprovalSubTypeValue.item.nisregsubtypeconfigneed,\r\n        }\r\n\r\n\r\n        let postParam = undefined;\r\n\r\n        if (this.props.Login.operation === \"create\") {\r\n            methodUrl = \"UserRoleTemplatemaster\";\r\n        }\r\n        else {\r\n            methodUrl = \"EditUserRoleTemplatemaster\";\r\n            postParam = { inputListName: \"listuserroletemplate\", selectedObject: \"selectedURTVersion\", primaryKeyField: \"ntreeversiontempcode\" };\r\n        }\r\n        const inputParam = {\r\n            methodUrl: methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            searchRef: this.searchRef,\r\n            formRef, postParam\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        \r\n        //selectedRecord['esignreason']=\"\";\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, selectedRecord,saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n    onChangeCombo = (event, levelno, operation) => {\r\n        const selectedRecord = this.props.Login.selectedRecord ? this.props.Login.selectedRecord : {} || {};\r\n        let index = (this.props.Login.userRoleActualData).findIndex(data => data.nuserrolecode === parseInt(selectedRecord[levelno]));\r\n        if (event !== null) {\r\n            if (selectedRecord[levelno]) {\r\n                this.props.Login.userRoleData.push(this.props.Login.userRoleActualData[index]);\r\n            }\r\n            index = (this.props.Login.userRoleData).findIndex(data => data.nuserrolecode === parseInt(event.value));\r\n            (this.props.Login.userRoleData).splice(index, 1);\r\n            index = (this.props.Login.userRoleActualData).findIndex(data => data.nuserrolecode === parseInt(event.value));\r\n            (this.props.Login.userRoleTreeData[levelno]) = (this.props.Login.userRoleActualData[index]);\r\n\r\n            selectedRecord[levelno] = event.value;\r\n\r\n            // const  TaguserRoleData  = constructOptionList(this.props.Login.userRoleData ||[], \"nuserrolecode\",\r\n            // \"suserrolename\" , undefined, undefined, undefined);\r\n            // const  TagListuserRoleData  = TaguserRoleData.get(\"OptionList\")\r\n\r\n            let userRoleData = this.props.Login.userRoleData || [];\r\n            let userRoleTreeData = this.props.Login.userRoleTreeData;\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { userRoleData, selectedRecord, userRoleTreeData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            if (selectedRecord[levelno]) {\r\n                this.props.Login.userRoleData.push(this.props.Login.userRoleActualData[index]);\r\n                delete selectedRecord[levelno];\r\n            }\r\n            // const  TaguserRoleData  = constructOptionList(this.props.Login.userRoleData ||[], \"nuserrolecode\",\r\n            // \"suserrolename\" , undefined, undefined, undefined);\r\n            // const  TagListuserRoleData  = TaguserRoleData.get(\"OptionList\")\r\n\r\n            let userRoleData = this.props.Login.userRoleData || [];\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { userRoleData }\r\n            }\r\n            this.props.updateStore(updateInfo, selectedRecord);\r\n        }\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        // const selectedRecord = {...this.props.Login.selectedRecord,\r\n        //     ...this.state.selectedRecord} || {};\r\n        const selectedRecord = this.props.Login.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        //this.setState({ selectedRecord });\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedRecord}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    // sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    // nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    // spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n                    sreason: this.props.Login.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.props.Login.selectedRecord[\"esignreason\"] && this.props.Login.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.props.Login.selectedRecord[\"esignreason\"] && this.props.Login.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                //password: this.state.selectedRecord[\"esignpassword\"]\r\n                password: this.props.Login.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedInput = this.state.selectedInput || {};\r\n        selectedInput[event.target.name] = event.target.value;\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedInput }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({ selectedInput })\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nflag: this.props.Login.masterData.realApprovalSubTypeValue.item.nisregsubtypeconfigneed === transactionStatus.YES ? 2 : 1,\r\n            nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\r\n            nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\r\n            napprovalsubtypecode: this.props.Login.masterData.realApprovalSubTypeValue.value,\r\n            ntreetemplatecode: this.props.Login.masterData.realApprovalSubTypeValue.item.ntemplatecode,\r\n            ntreeversiontempcode: -1,\r\n            nmodulecode: 1,\r\n            isregneed: this.props.Login.masterData.realApprovalSubTypeValue.item.nisregsubtypeconfigneed,\r\n        };    \r\n\r\n        let inputParam = { masterData:{...this.props.Login.masterData, searchedData:undefined}, inputData };\r\n        this.props.getURTFilterSubmit(inputParam);\r\n\r\n        // const inputParam = {\r\n        //     inputData: { \"userinfo\": this.props.Login.userInfo },\r\n        //     classUrl: \"userroletemplate\",\r\n        //     methodUrl: \"Userroletemplate\",\r\n        //     userInfo: this.props.Login.userInfo,\r\n        //     displayName: \"IDS_USERROLETEMPLATE\"\r\n        //     //screenName:\"IDS_USERROLETEMPLATE\"\r\n        // };\r\n\r\n        // this.props.callService(inputParam);\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false\r\n\r\n        let { selectedRecord, userRoleControlRights, controlMap,\r\n            listApprovalsubtype, listRegistrationType, listRegistrationSubType } = this.state;\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]\r\n                    && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                updateState = true;\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n        // if (this.props.Login.selectedInput !== previousProps.Login.selectedInput) {\r\n        //     updateState = true;\r\n        //     selectedInput = this.props.Login.selectedInput\r\n        // }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            \r\n            updateState = true;\r\n            // const selectedRecord = {}\r\n            const selectedInput = {}\r\n            let Taglstapprovalsubtype;\r\n            let TaglistRegistrationType;\r\n            let TaglistRegistrationSubType;\r\n\r\n            if (this.props.Login.masterData.levelsuserroletemplate  &&\r\n                this.props.Login.masterData.levelsuserroletemplate.length > 0){\r\n\r\n                    selectedRecord[\"napprovalconfigcode\"] = this.props.Login.masterData.levelsuserroletemplate[0][\"napprovalconfigcode\"];\r\n                    selectedRecord[\"ntransactionstatus\"] = this.props.Login.masterData.levelsuserroletemplate[0][\"ntransactionstatus\"] ;\r\n            }\r\n            else{\r\n                if (selectedRecord){\r\n                    selectedRecord[\"napprovalconfigcode\"] = -1;\r\n                 }\r\n                else{\r\n                    selectedRecord = {napprovalconfigcode: -1};\r\n                }\r\n                selectedRecord[\"ntransactionstatus\"] = this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"ntransactionstatus\"] : [];\r\n                \r\n            }\r\n            // selectedRecord[\"napprovalconfigcode\"] = this.props.Login.masterData.levelsuserroletemplate ? this.props.Login.masterData.levelsuserroletemplate.length > 0 ?\r\n            //     this.props.Login.masterData.levelsuserroletemplate[0][\"napprovalconfigcode\"] : -1 : -1\r\n\r\n            // selectedRecord[\"ntransactionstatus\"] = this.props.Login.masterData.levelsuserroletemplate ? this.props.Login.masterData.levelsuserroletemplate.length > 0 ?\r\n            //     this.props.Login.masterData.levelsuserroletemplate[0][\"ntransactionstatus\"] :\r\n            //     this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"ntransactionstatus\"] : [] : [];\r\n\r\n            if (this.props.Login.masterData.lstapprovalsubtype) {\r\n                Taglstapprovalsubtype = constructOptionList(this.props.Login.masterData.lstapprovalsubtype || [], \"napprovalsubtypecode\", \"ssubtypename\", \"ntemplatecode\", \"ascending\", undefined);\r\n                listApprovalsubtype = Taglstapprovalsubtype.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.listRegistrationType) {\r\n                TaglistRegistrationType = constructOptionList(this.props.Login.masterData.listRegistrationType || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\r\n                listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.listRegistrationSubType) {\r\n                TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.listRegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\r\n                listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.levelsuserroletemplate) {\r\n                sortData(this.props.Login.masterData.levelsuserroletemplate, \"ascending\", \"nlevelno\");\r\n            }\r\n\r\n            selectedInput[\"isRegNeed\"] = this.props.Login.masterData.selectedInput ? this.props.Login.masterData.selectedInput[\"isRegNeed\"]\r\n                : this.props.Login.masterData.lstapprovalsubtype ? this.props.Login.masterData.lstapprovalsubtype.length > 0 ?\r\n                    this.props.Login.masterData.lstapprovalsubtype[0][\"nisregsubtypeconfigneed\"] :\r\n                    \"\" ? \"\" : \"\" : \"\";\r\n            if (updateState) {\r\n                this.setState({\r\n                    selectedRecord, controlMap, userRoleControlRights,\r\n                    listApprovalsubtype, listRegistrationType, listRegistrationSubType,\r\n                    selectedInput\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nflag: this.props.Login.masterData.defaultapprovalsubtype.item.nisregsubtypeconfigneed === transactionStatus.YES ? 2 : 1,\r\n            nregtypecode: parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\r\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\r\n            napprovalsubtypecode: this.props.Login.masterData.defaultapprovalsubtype.value,\r\n            ntreetemplatecode: this.props.Login.masterData.defaultapprovalsubtype.item.ntemplatecode,\r\n            ntreeversiontempcode: -1,\r\n            nmodulecode: 1,\r\n            isregneed: this.props.Login.masterData.defaultapprovalsubtype.item.nisregsubtypeconfigneed,\r\n        };\r\n        let masterData = {\r\n            ...this.props.Login.masterData,\r\n            realApprovalSubTypeValue: this.props.Login.masterData.defaultapprovalsubtype,\r\n            realRegTypeValue: this.props.Login.masterData.defaultregtype,\r\n            realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\r\n        }\r\n        let inputParam = { masterData, inputData,searchRef:this.searchRef };\r\n        this.props.getURTFilterSubmit(inputParam);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (!props.Login.loadEsign) {\r\n            return { selectedRecord: { ...state.selectedRecord , esigncomments: '', esignpassword: '' } }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nconst mapStatetoProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n\r\n}\r\nexport default connect(mapStatetoProps, {\r\n    callService, crudMaster, addScreenModel, updateStore,\r\n    validateEsignCredential, getURTFilterRegType, getURTFilterRegSubType, getURTFilterSubmit,\r\n    fetchRecordById, getTreetemplate, filterColumnData, postCRUDOrganiseSearch\r\n})(injectIntl(userroletempalate));\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}