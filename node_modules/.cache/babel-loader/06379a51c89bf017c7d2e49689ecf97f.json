{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructOptionList, sortData } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { ApprovalSubType, transactionStatus } from '../components/Enumeration';\nexport function getUserMappingFilterChange(inputParamData, oldState, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"usermapping/getUserMapping\", inputParamData).then(response => {\n      const RegistrationTypeListMap = constructOptionList(response.data.RegistrationType || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nregtypecode', false);\n      const RegistrationSubTypeListMap = constructOptionList(response.data.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nregsubtypecode', false);\n      const templateVersionOptionListMap = constructOptionList(response.data.TreeVersion || [], \"ntreeversiontempcode\", \"sversiondescription\", 'decending', 'ntreeversiontempcode', false);\n      const RegistrationTypeList = response.data.RegistrationType ? RegistrationTypeListMap.get(\"OptionList\") : oldState.RegistrationTypeList;\n      const RegistrationSubTypeList = response.data.RegistrationSubType ? RegistrationSubTypeListMap.get(\"OptionList\") : oldState.RegistrationSubTypeList;\n      const templateVersionOptionList = response.data.TreeVersion ? templateVersionOptionListMap.get(\"OptionList\") : oldState.templateVersionOptionList;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            Approvalsubtype: oldState.Approvalsubtype,\n            RegistrationTypeList,\n            RegistrationSubTypeList,\n            templateVersionOptionList,\n            approvalSubTypeValue: oldState.approvalSubTypeValue,\n            RegistrationType: response.data.RegistrationType ? response.data.RegistrationType : oldState.RegistrationType,\n            registrationTypeValue: response.data.RegistrationType ? response.data.RegistrationType.length > 0 ? {\n              value: response.data.RegistrationType[0].nregtypecode,\n              label: response.data.RegistrationType[0].sregtypename\n            } : oldState.registrationTypeValue : oldState.registrationTypeValue,\n            RegistrationSubType: response.data.RegistrationSubType ? response.data.RegistrationSubType : oldState.RegistrationSubType,\n            registrationSubTypeValue: response.data.RegistrationSubType ? response.data.RegistrationSubType.length > 0 ? {\n              value: response.data.RegistrationSubType[0].nregsubtypecode,\n              label: response.data.RegistrationSubType[0].sregsubtypename\n            } : oldState.registrationSubTypeValue : oldState.registrationSubTypeValue,\n            TreeVersion: response.data.TreeVersion ? response.data.TreeVersion : oldState.TreeVersion,\n            templateVersionValue: response.data.TreeVersion ? response.data.TreeVersion.length > 0 ? {\n              value: response.data.TreeVersion[0].ntreeversiontempcode,\n              label: response.data.TreeVersion[0].sversiondescription\n            } : {} : oldState.templateVersionValue,\n            // Site: response.data.Site ? sortData(response.data.Site) : [],\n            // selectedSite: response.data.selectedSite,\n            // UserRole: response.data.UserRole ? sortData(response.data.UserRole) : [],\n            ...sortData(response.data)\n          },\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getUserMapping(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const Map = {\n      userinfo: inputData.userinfo,\n      nFlag: inputData.nFlag,\n      napprovalsubtypecode: inputData.napprovalsubtypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      ntemplatecode: inputData.ntemplatecode,\n      nversioncode: inputData.nversioncode\n    };\n    rsapi.post(\"usermapping/getUserMapping\", Map).then(response => {\n      if (inputData.searchRef !== undefined && inputData.searchRef.current.value !== \"\") {\n        inputData.searchRef.current.value = \"\";\n        inputData.masterData[\"searchedData\"] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedSite: response.data.selectedSite,\n            site: response.data.Site,\n            UserRole: response.data.UserRole ? sortData(response.data.UserRole) : [],\n            ...sortData(response.data)\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getUserMappingBySite(site, nversioncode, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"usermapping/getUserMappingBySite\", {\n      nsitecode: site.nsitecode,\n      nversioncode: nversioncode ? nversioncode : -1,\n      userinfo: userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            //  selectedSite: site,\n            // UserRole: sortData(response.data.UserRole),\n            ...sortData(response.data)\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildUsers(user, role, siteCode, nversionCode, userInfo, masterData, dataState, userRoles) {\n  return function (dispatch) {\n    if (role.schildnode > 0) {\n      dispatch(initRequest(true));\n      rsapi.post(\"usermapping/getChildUserMapping\", {\n        nparusermappingcode: user.nusermappingcode,\n        nuserrolecode: role.nuserrolecode,\n        nsitecode: siteCode,\n        nversioncode: nversionCode,\n        levelno: -1,\n        userinfo: userInfo,\n        loading: false\n      }).then(response => {\n        let datastate = { ...dataState\n        };\n        userRoles.map(userRole => {\n          if (userRole.nlevelno <= role.nlevelno) {\n            if (dataState[userRole.nuserrolecode]) {\n              datastate[userRole.nuserrolecode] = dataState[userRole.nuserrolecode];\n            } else {\n              datastate[userRole.nuserrolecode] = {\n                skip: 0,\n                take: 10\n              };\n            }\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              [`selectedUser_${role.nuserrolecode}`]: user,\n              ...sortData(response.data)\n            },\n            loading: false,\n            dataState: datastate\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function openUserMappingModal(role, siteCode, selectedUser, versionCode, userInfo, masterData, parentRoleName) {\n  return function (dispatch) {\n    if (role.nlevelno === 1 ? true : selectedUser ? Object.keys(selectedUser).length > 0 ? true : false : false) {\n      dispatch(initRequest(true));\n      rsapi.post(\"usermapping/getAvailableUsers\", {\n        nuserrolecode: role.nuserrolecode,\n        nsitecode: siteCode,\n        nparusermappingcode: role.nlevelno === 1 ? -2 : selectedUser.nusermappingcode,\n        nversioncode: versionCode,\n        napprovalconfigcode: masterData.approvalConfigCode,\n        ntreeversiontempcode: masterData.templateVersionValue.value,\n        userinfo: userInfo\n      }).then(response => {\n        const AvailableUsersMap = constructOptionList(response.data.AvailableUsers || [], \"id\", \"Name\", undefined, undefined, true);\n        const AvailableUsers = AvailableUsersMap.get(\"OptionList\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openChildModal: true,\n            graphView: false,\n            operation: 'create',\n            loading: false,\n            AvailableUsers,\n            parentRole: role.nparentrolecode,\n            childRole: role.nuserrolecode,\n            childRoleName: role.suserrolename,\n            nlevelno: role.nlevelno,\n            selectedRecord: {},\n            ...masterData\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECT\"\n      }) + ' ' + parentRoleName);\n    }\n  };\n} // export function filterUserColumn(filterValue, masterData, userInfo,role,siteCode,nversionCode) {\n//     return function(dispatch){\n//         let nusermappingcode = 0;   \n//         let searchedData = undefined;\n//         if (filterValue === \"\"){\n//             nusermappingcode = masterData[role.nuserrolecode][0].nusermappingcode;\n//         } \n//         else{\n//             searchedData = searchData(filterValue, masterData[role.nuserrolecode]);\n//             if (searchedData.length > 0){\n//                 nusermappingcode = searchedData[0].nusermappingcode; \n//             }\n//         }\n//         if (nusermappingcode !== 0){\n//             dispatch(initRequest(true));\n//             rsapi.post(\"usermapping/getChildUserMapping\",{\n//                                                             nparusermappingcode:nusermappingcode,\n//                                                             nuserrolecode:role.nuserrolecode,\n//                                                             nsitecode:siteCode,\n//                                                             nversioncode:nversionCode,\n//                                                             levelno:-1,\n//                                                             userinfo:userInfo,\n//                                                             loading:false\n//                                                         }\n//                     )\n//             .then(response=>{  \n//                 masterData={\n//                     ...masterData,\n//                     [`selectedUser_${role.nuserrolecode}`]:searchedData?searchedData[0]:masterData[role.nuserrolecode][0],\n//                     ...sortData(response.data),\n//                     [`searchedData_${role.nuserrolecode}`] : searchedData\n//                 }              \n//                 dispatch({type: DEFAULT_RETURN, payload:{masterData,   loading:false}});\n//             })\n//             .catch(error=>{\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//         }else{\n//             masterData[\"checklistversion\"] = [];\n//             masterData[\"selectedversion\"] = [];\n//             masterData[\"checklistversionqb\"] = [];\n//             masterData[\"selectedchecklist\"] =[];\n//             masterData[\"searchedData\"] = [];\n//             dispatch({type: DEFAULT_RETURN, payload:{masterData,   loading:false}});\n//         }\n//     }\n// }\n\nexport function getUserMappingGraphView(site, nversioncode, userinfo, selectedUser, selectedRole) {\n  return function (dispatch) {\n    if (site && site.nsitecode) {\n      let inputData = {\n        nsitecode: site.nsitecode,\n        nversioncode: nversioncode ? nversioncode : -1,\n        userinfo\n      };\n\n      if (selectedUser) {\n        inputData['nusermappingcode'] = selectedUser.nusermappingcode;\n      } //let files=fs.readdirSync(fileViewURL+\"/SharedFolder\")\n\n\n      dispatch(initRequest(true));\n      rsapi.post(\"usermapping/getUserMappingTree\", inputData).then(response => {\n        let selectedRecord = {};\n        let hideFilters = false;\n        let selectedTreeParent = undefined;\n\n        if (selectedUser) {\n          selectedTreeParent = response.data.userTree && response.data.userTree.length > 0 ? response.data.userTree.find(x => x.nusermappingcode = selectedUser.nusermappingcode) : {};\n          hideFilters = true;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            userTree: response.data.userTree,\n            openChildModal: true,\n            graphView: true,\n            operation: \"view\",\n            selectedTreeParent,\n            selectedRecord,\n            hideFilters,\n            files: response.data.folderFiles\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          multilingualError: \"IDS_SELECTSITE\"\n        }\n      });\n    }\n  };\n}\nexport function getCopyUserMapping(nsubtypecode, nregsubtypecode, userInfo, masterData, ncontrolcode) {\n  return function (dispatch) {\n    if (nsubtypecode === ApprovalSubType.TESTRESULTAPPROVAL) {\n      dispatch(initRequest(true));\n      rsapi.post('usermapping/getUserMappingCopy', {\n        nsubtypecode: nsubtypecode,\n        nregsubtypecode,\n        nsitecode: userInfo.nmastersitecode,\n        userinfo: userInfo\n      }).then(response => {\n        if (response.data.CopyRegType.length === 0) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              loadEsign: false,\n              openChildModal: false\n            }\n          });\n          return toast.warn(intl.formatMessage({\n            id: \"IDS_NOREGISTRATIONTOCOPY\"\n          }));\n        }\n\n        let selectedRecord = {};\n        const RegistrationTypeListMap = constructOptionList(response.data.CopyRegType || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nregtypecode', false);\n        const RegistrationSubTypeListMap = constructOptionList(response.data.CopyRegSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nregsubtypecode', false);\n        let optCopyRegType = RegistrationTypeListMap.get(\"OptionList\");\n        let optCopyRegSubType = RegistrationSubTypeListMap.get(\"OptionList\");\n        selectedRecord['regtype'] = response.data.CopyRegType.length > 0 ? {\n          value: response.data.CopyRegType[0].nregtypecode,\n          label: response.data.CopyRegType[0].sregtypename\n        } : [];\n        selectedRecord['regsubtype'] = response.data.CopyRegSubType ? response.data.CopyRegSubType.length > 0 ? {\n          value: response.data.CopyRegSubType[0].nregsubtypecode,\n          label: response.data.CopyRegSubType[0].sregsubtypename\n        } : [] : [];\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: \"copy\",\n            openChildModal: true,\n            optCopyRegSubType,\n            optCopyRegType,\n            selectedRecord,\n            masterData,\n            ncontrolcode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function getCopyUserMappingSubType(comboData, nregsubtypecode, selectedRecord, userInfo, masterData, optCopyRegType) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('usermapping/getCopyRegSubType', {\n      nregtypecode: comboData.value,\n      nregsubtypecode,\n      nsitecode: userInfo.nmastersitecode,\n      userinfo: userInfo\n    }).then(response => {\n      const RegistrationSubTypeListMap = constructOptionList(response.data.CopyRegSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nregsubtypecode', false);\n      let optCopyRegSubType = RegistrationSubTypeListMap.get(\"OptionList\");\n      selectedRecord['regsubtype'] = response.data.CopyRegSubType.length > 0 ? {\n        value: response.data.CopyRegSubType[0].nregsubtypecode,\n        label: response.data.CopyRegSubType[0].sregsubtypename\n      } : [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          operation: \"copy\",\n          openChildModal: true,\n          loading: false,\n          optCopyRegType,\n          optCopyRegSubType,\n          selectedRecord,\n          masterData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/UserMappingAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","sortData","toast","initRequest","intl","ApprovalSubType","transactionStatus","getUserMappingFilterChange","inputParamData","oldState","masterData","dispatch","post","then","response","RegistrationTypeListMap","data","RegistrationType","RegistrationSubTypeListMap","RegistrationSubType","templateVersionOptionListMap","TreeVersion","RegistrationTypeList","get","RegistrationSubTypeList","templateVersionOptionList","type","payload","Approvalsubtype","approvalSubTypeValue","registrationTypeValue","length","value","nregtypecode","label","sregtypename","registrationSubTypeValue","nregsubtypecode","sregsubtypename","templateVersionValue","ntreeversiontempcode","sversiondescription","loading","dataState","undefined","catch","error","status","message","warn","getUserMapping","inputData","Map","userinfo","nFlag","napprovalsubtypecode","ntemplatecode","nversioncode","searchRef","current","selectedSite","site","Site","UserRole","getUserMappingBySite","userInfo","nsitecode","getChildUsers","user","role","siteCode","nversionCode","userRoles","schildnode","nparusermappingcode","nusermappingcode","nuserrolecode","levelno","datastate","map","userRole","nlevelno","skip","take","openUserMappingModal","selectedUser","versionCode","parentRoleName","Object","keys","napprovalconfigcode","approvalConfigCode","AvailableUsersMap","AvailableUsers","openChildModal","graphView","operation","parentRole","nparentrolecode","childRole","childRoleName","suserrolename","selectedRecord","formatMessage","id","getUserMappingGraphView","selectedRole","hideFilters","selectedTreeParent","userTree","find","x","files","folderFiles","multilingualError","getCopyUserMapping","nsubtypecode","ncontrolcode","TESTRESULTAPPROVAL","nmastersitecode","CopyRegType","loadEsign","CopyRegSubType","optCopyRegType","optCopyRegSubType","getCopyUserMappingSubType","comboData"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { constructOptionList, sortData } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { ApprovalSubType ,transactionStatus} from '../components/Enumeration';\r\n\r\n\r\nexport function getUserMappingFilterChange(inputParamData, oldState, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"usermapping/getUserMapping\", inputParamData)\r\n            .then(response => {\r\n                const RegistrationTypeListMap = constructOptionList(response.data.RegistrationType || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nregtypecode', false);\r\n                const RegistrationSubTypeListMap = constructOptionList(response.data.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nregsubtypecode', false);\r\n                const templateVersionOptionListMap = constructOptionList(response.data.TreeVersion || [], \"ntreeversiontempcode\", \"sversiondescription\", 'decending', 'ntreeversiontempcode', false);\r\n                const RegistrationTypeList = response.data.RegistrationType ? RegistrationTypeListMap.get(\"OptionList\") : oldState.RegistrationTypeList;\r\n                const RegistrationSubTypeList = response.data.RegistrationSubType ? RegistrationSubTypeListMap.get(\"OptionList\") : oldState.RegistrationSubTypeList;\r\n                const templateVersionOptionList = response.data.TreeVersion ? templateVersionOptionListMap.get(\"OptionList\") : oldState.templateVersionOptionList;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            Approvalsubtype: oldState.Approvalsubtype,\r\n                            RegistrationTypeList, RegistrationSubTypeList, templateVersionOptionList,\r\n                            approvalSubTypeValue: oldState.approvalSubTypeValue,\r\n\r\n                            RegistrationType: response.data.RegistrationType ?\r\n                                response.data.RegistrationType\r\n                                : oldState.RegistrationType,\r\n\r\n                            registrationTypeValue: response.data.RegistrationType ?\r\n                                response.data.RegistrationType.length > 0 ?\r\n                                    {\r\n                                        value: response.data.RegistrationType[0].nregtypecode,\r\n                                        label: response.data.RegistrationType[0].sregtypename\r\n                                    }\r\n                                    : oldState.registrationTypeValue\r\n                                : oldState.registrationTypeValue,\r\n\r\n                            RegistrationSubType: response.data.RegistrationSubType ?\r\n                                response.data.RegistrationSubType\r\n                                : oldState.RegistrationSubType,\r\n\r\n                            registrationSubTypeValue: response.data.RegistrationSubType ?\r\n                                response.data.RegistrationSubType.length > 0 ?\r\n                                    {\r\n                                        value: response.data.RegistrationSubType[0].nregsubtypecode,\r\n                                        label: response.data.RegistrationSubType[0].sregsubtypename\r\n                                    }\r\n                                    : oldState.registrationSubTypeValue\r\n                                : oldState.registrationSubTypeValue,\r\n\r\n                            TreeVersion: response.data.TreeVersion ?\r\n                                response.data.TreeVersion\r\n                                : oldState.TreeVersion,\r\n\r\n                            templateVersionValue: response.data.TreeVersion ?\r\n                                response.data.TreeVersion.length > 0 ?\r\n                                    {\r\n                                        value: response.data.TreeVersion[0].ntreeversiontempcode,\r\n                                        label: response.data.TreeVersion[0].sversiondescription\r\n                                    }\r\n                                    : {}\r\n                                : oldState.templateVersionValue,\r\n                            // Site: response.data.Site ? sortData(response.data.Site) : [],\r\n                            // selectedSite: response.data.selectedSite,\r\n                            // UserRole: response.data.UserRole ? sortData(response.data.UserRole) : [],\r\n                            ...sortData(response.data)\r\n                        }, loading: false,\r\n                        dataState: undefined\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getUserMapping(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const Map={userinfo:inputData.userinfo,\r\n            nFlag:inputData.nFlag,\r\n            napprovalsubtypecode:inputData.napprovalsubtypecode,\r\n            nregtypecode:inputData.nregtypecode,\r\n            nregsubtypecode:inputData.nregsubtypecode,\r\n            ntemplatecode:inputData.ntemplatecode,\r\n            nversioncode:inputData.nversioncode\r\n        }\r\n        rsapi.post(\"usermapping/getUserMapping\", Map)\r\n            .then(response => {\r\n\r\n                if (inputData.searchRef !== undefined && inputData.searchRef.current.value !== \"\") {\r\n                    inputData.searchRef.current.value=\"\"\r\n                    inputData.masterData[\"searchedData\"] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            selectedSite: response.data.selectedSite,\r\n                            site: response.data.Site,\r\n                            UserRole: response.data.UserRole ? sortData(response.data.UserRole) : [],\r\n                            ...sortData(response.data)\r\n                        }, loading: false\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getUserMappingBySite(site, nversioncode, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"usermapping/getUserMappingBySite\", { nsitecode: site.nsitecode, nversioncode: nversioncode ? nversioncode : -1, userinfo: userInfo })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            //  selectedSite: site,\r\n                            // UserRole: sortData(response.data.UserRole),\r\n                            ...sortData(response.data)\r\n                        }, loading: false\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\nexport function getChildUsers(user, role, siteCode, nversionCode, userInfo, masterData, dataState, userRoles) {\r\n\r\n    return function (dispatch) {\r\n        if (role.schildnode > 0) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"usermapping/getChildUserMapping\",\r\n                {\r\n                    nparusermappingcode: user.nusermappingcode,\r\n                    nuserrolecode: role.nuserrolecode,\r\n                    nsitecode: siteCode,\r\n                    nversioncode: nversionCode,\r\n                    levelno: -1,\r\n                    userinfo: userInfo,\r\n                    loading: false\r\n                }\r\n            )\r\n                .then(response => {\r\n                    let datastate = { ...dataState }\r\n                    userRoles.map(userRole => {\r\n                        if (userRole.nlevelno <= role.nlevelno) {\r\n                            if (dataState[userRole.nuserrolecode]) {\r\n                                datastate[userRole.nuserrolecode] = dataState[userRole.nuserrolecode]\r\n                            } else {\r\n                                datastate[userRole.nuserrolecode] = { skip: 0, take: 10 }\r\n                            }\r\n                        }\r\n                        return null;\r\n                    })\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                [`selectedUser_${role.nuserrolecode}`]: user,\r\n                                ...sortData(response.data)\r\n                            }, loading: false, dataState: datastate\r\n\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport function openUserMappingModal(role, siteCode, selectedUser, versionCode, userInfo, masterData, parentRoleName) {\r\n    return function (dispatch) {\r\n        if (role.nlevelno === 1 ? true : selectedUser ? Object.keys(selectedUser).length > 0 ? true : false : false) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"usermapping/getAvailableUsers\",\r\n                {\r\n                    nuserrolecode: role.nuserrolecode,\r\n                    nsitecode: siteCode,\r\n                    nparusermappingcode: role.nlevelno === 1 ? -2 : selectedUser.nusermappingcode,\r\n                    nversioncode: versionCode,\r\n                    napprovalconfigcode:masterData.approvalConfigCode,\r\n                    ntreeversiontempcode:masterData.templateVersionValue.value,\r\n                    userinfo: userInfo\r\n                }\r\n            )\r\n                .then(response => {\r\n                    const AvailableUsersMap = constructOptionList(response.data.AvailableUsers || [], \"id\", \"Name\", undefined, undefined, true);\r\n                    const AvailableUsers = AvailableUsersMap.get(\"OptionList\");\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            openChildModal: true,\r\n                            graphView: false,\r\n                            operation: 'create',\r\n                            loading: false,\r\n                            AvailableUsers,\r\n                            parentRole: role.nparentrolecode,\r\n                            childRole: role.nuserrolecode,\r\n                            childRoleName: role.suserrolename,\r\n                            nlevelno: role.nlevelno,\r\n                            selectedRecord: {},\r\n                            ...masterData\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECT\" }) + ' ' + parentRoleName);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// export function filterUserColumn(filterValue, masterData, userInfo,role,siteCode,nversionCode) {\r\n//     return function(dispatch){\r\n//         let nusermappingcode = 0;   \r\n//         let searchedData = undefined;\r\n//         if (filterValue === \"\"){\r\n//             nusermappingcode = masterData[role.nuserrolecode][0].nusermappingcode;\r\n//         } \r\n//         else{\r\n\r\n//             searchedData = searchData(filterValue, masterData[role.nuserrolecode]);\r\n\r\n//             if (searchedData.length > 0){\r\n//                 nusermappingcode = searchedData[0].nusermappingcode; \r\n//             }\r\n\r\n//         }\r\n//         if (nusermappingcode !== 0){\r\n\r\n//             dispatch(initRequest(true));\r\n//             rsapi.post(\"usermapping/getChildUserMapping\",{\r\n//                                                             nparusermappingcode:nusermappingcode,\r\n//                                                             nuserrolecode:role.nuserrolecode,\r\n//                                                             nsitecode:siteCode,\r\n//                                                             nversioncode:nversionCode,\r\n//                                                             levelno:-1,\r\n//                                                             userinfo:userInfo,\r\n//                                                             loading:false\r\n//                                                         }\r\n//                     )\r\n//             .then(response=>{  \r\n//                 masterData={\r\n//                     ...masterData,\r\n//                     [`selectedUser_${role.nuserrolecode}`]:searchedData?searchedData[0]:masterData[role.nuserrolecode][0],\r\n//                     ...sortData(response.data),\r\n//                     [`searchedData_${role.nuserrolecode}`] : searchedData\r\n//                 }              \r\n\r\n\r\n//                 dispatch({type: DEFAULT_RETURN, payload:{masterData,   loading:false}});\r\n//             })\r\n//             .catch(error=>{\r\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n\r\n//         }else{\r\n//             masterData[\"checklistversion\"] = [];\r\n//             masterData[\"selectedversion\"] = [];\r\n//             masterData[\"checklistversionqb\"] = [];\r\n//             masterData[\"selectedchecklist\"] =[];\r\n//             masterData[\"searchedData\"] = [];\r\n//             dispatch({type: DEFAULT_RETURN, payload:{masterData,   loading:false}});\r\n\r\n//         }\r\n//     }\r\n// }\r\nexport function getUserMappingGraphView(site, nversioncode, userinfo, selectedUser, selectedRole) {\r\n\r\n    return function (dispatch) {\r\n        if (site && site.nsitecode) {\r\n            let inputData = { nsitecode: site.nsitecode, nversioncode: nversioncode ? nversioncode : -1, userinfo };\r\n            if (selectedUser) {\r\n                inputData['nusermappingcode'] = selectedUser.nusermappingcode\r\n            }\r\n\r\n            //let files=fs.readdirSync(fileViewURL+\"/SharedFolder\")\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"usermapping/getUserMappingTree\", inputData)\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                    let hideFilters = false;\r\n                    let selectedTreeParent = undefined;\r\n                    if (selectedUser) {\r\n                        selectedTreeParent = response.data.userTree && response.data.userTree.length > 0 ? response.data.userTree.find(x => x.nusermappingcode = selectedUser.nusermappingcode) : {}\r\n                        hideFilters = true;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false,\r\n                            userTree: response.data.userTree,\r\n                            openChildModal: true,\r\n                            graphView: true,\r\n                            operation: \"view\",\r\n                            selectedTreeParent,\r\n                            selectedRecord,\r\n                            hideFilters,\r\n                            files: response.data.folderFiles\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false, multilingualError: \"IDS_SELECTSITE\" } })\r\n        }\r\n    }\r\n}\r\nexport function getCopyUserMapping(nsubtypecode, nregsubtypecode, userInfo, masterData, ncontrolcode) {\r\n    return function (dispatch) {\r\n        if (nsubtypecode === ApprovalSubType.TESTRESULTAPPROVAL) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post('usermapping/getUserMappingCopy', { nsubtypecode: nsubtypecode, nregsubtypecode, nsitecode: userInfo.nmastersitecode, userinfo: userInfo })\r\n                .then(response => {\r\n                    if (response.data.CopyRegType.length === 0) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openChildModal: false\r\n                            }\r\n                        });\r\n                        return toast.warn(intl.formatMessage({ id: \"IDS_NOREGISTRATIONTOCOPY\" }));\r\n                    }\r\n\r\n                    let selectedRecord = {};\r\n                    const RegistrationTypeListMap = constructOptionList(response.data.CopyRegType || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nregtypecode', false);\r\n                    const RegistrationSubTypeListMap = constructOptionList(response.data.CopyRegSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nregsubtypecode', false);\r\n                    let optCopyRegType = RegistrationTypeListMap.get(\"OptionList\");\r\n                    let optCopyRegSubType = RegistrationSubTypeListMap.get(\"OptionList\");\r\n                    selectedRecord['regtype'] = response.data.CopyRegType.length > 0 ? { value: response.data.CopyRegType[0].nregtypecode, label: response.data.CopyRegType[0].sregtypename } : []\r\n                    selectedRecord['regsubtype'] = response.data.CopyRegSubType ? response.data.CopyRegSubType.length > 0 ? { value: response.data.CopyRegSubType[0].nregsubtypecode, label: response.data.CopyRegSubType[0].sregsubtypename } : [] : []\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            operation: \"copy\", openChildModal: true,\r\n                            optCopyRegSubType,\r\n                            optCopyRegType,\r\n                            selectedRecord,\r\n                            masterData, ncontrolcode, loading: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n}\r\nexport function getCopyUserMappingSubType(comboData, nregsubtypecode, selectedRecord, userInfo, masterData, optCopyRegType) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('usermapping/getCopyRegSubType', { nregtypecode: comboData.value, nregsubtypecode, nsitecode: userInfo.nmastersitecode, userinfo: userInfo })\r\n            .then(response => {\r\n                const RegistrationSubTypeListMap = constructOptionList(response.data.CopyRegSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nregsubtypecode', false);\r\n                let optCopyRegSubType = RegistrationSubTypeListMap.get(\"OptionList\");\r\n                selectedRecord['regsubtype'] = response.data.CopyRegSubType.length > 0 ? { value: response.data.CopyRegSubType[0].nregsubtypecode, label: response.data.CopyRegSubType[0].sregsubtypename } : []\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        operation: \"copy\", openChildModal: true, loading: false,\r\n                        optCopyRegType,\r\n                        optCopyRegSubType,\r\n                        selectedRecord,\r\n                        masterData\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}