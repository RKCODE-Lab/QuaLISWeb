{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\Registration.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { showUnderDevelopment, callService, crudMaster, updateStore, getSampleTypeChange, getRegTypeChange, getRegSubTypeChange, getAttachmentCombo, viewAttachment, getCommentsCombo, filterTransactionList, validateEsignCredential, ReloadData, getSampleChildTabDetail, getTestChildTabDetailRegistration, getPreviewTemplate, getChildValues, getRegistrationSample, getRegistrationsubSampleDetail, getRegistrationTestDetail, acceptRegistration, addMoreTest, createRegistrationTest, getEditRegistrationComboService, cancelTestAction, cancelSampleAction, addsubSampleRegistration, saveSubSample, getEditSubSampleComboService, onUpdateSubSampleRegistration, cancelSubSampleAction, preregRecordToQuarantine, componentTest } from '../../actions';\nimport { Button, Card, Col, Nav, Row } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { getControlMap, showEsign, sortData, constructOptionList, onDropAttachFileList, deleteAttachmentDropZone, convertDateTimetoString, comboChild } from '../../components/CommonScript';\nimport RegistrationFilter from './RegistrationFilter';\nimport Esign from '../audittrail/Esign';\nimport { injectIntl } from 'react-intl';\nimport { ProductList } from '../product/product.styled';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SplitterLayout from \"react-splitter-layout\";\nimport AddTest from './AddTest';\nimport { designProperties, RegistrationType, transactionStatus } from '../../components/Enumeration';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ScrollBar from 'react-perfect-scrollbar';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEye, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { ContentPanel } from '../../components/App.styles';\nimport SampleInfoView from '../approval/SampleInfoView';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddPrinter from './AddPrinter';\nimport SampleGridTab from './SampleGridTab';\nimport AddFile from './AddFile';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveSampleComments, onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\nimport { onSaveSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport { ReactComponent as Quarantine } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/Quarantine.svg\";\nimport { ReactComponent as Register } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/register.svg\";\nimport { ReactComponent as Reject } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/reject.svg\";\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript';\nimport RegistrationResultTab from './RegistrationResultTab';\nimport PortalModal from '../../PortalModal';\nimport PreRegisterSlideOutModal from './PreRegisterSlideOutModal';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { checkTestPresent, getRegistrationSubSample } from './RegistrationValidation';\nimport AddSubSample from './AddSubSample';\n\nclass Registration extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onReload = () => {\n      // let RealFromDate = new Date(this.props.Login.masterData.RealFromDate)\n      // let RealToDate = new Date(this.props.Login.masterData.RealToDate)\n      const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      const RealFromDate = obj.fromDate;\n      const RealToDate = obj.toDate;\n      let RealSampleTypeValue = this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue;\n      let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue;\n      let RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue;\n      let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      let SampleTypeValue = RealSampleTypeValue;\n      let RegTypeValue = RealRegTypeValue;\n      let RegSubTypeValue = RealRegSubTypeValue;\n      let FilterStatusValue = RealFilterStatusValue; // let FromDate = this.props.Login.masterData.FromDate\n      // let ToDate = this.props.Login.masterData.ToDate\n\n      const FromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      const ToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n      let masterData = { ...this.props.Login.masterData,\n        RealSampleTypeValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        FromDate,\n        ToDate,\n        RealFilterStatusValue,\n        RealFromDate,\n        RealToDate,\n        SampleTypeValue,\n        RegTypeValue,\n        RegSubTypeValue,\n        FilterStatusValue\n      };\n      let inputData = {\n        npreregno: \"\",\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        nfilterstatus: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus,\n        userinfo: this.props.Login.userInfo,\n        activeSampleTab,\n        activeTestTab,\n        flag: 1,\n        ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n        nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample,\n        checkBoxOperation: 3\n      };\n\n      if (inputData.nsampletypecode) {\n        // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\n        inputData['FromDate'] = obj.fromDate;\n        inputData['ToDate'] = obj.toDate;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchSampleRef: this.searchSampleRef,\n          searchTestRef: this.searchTestRef,\n          selectedFilter: this.state.selectedFilter\n        };\n        this.props.ReloadData(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      const RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\n      const RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate);\n      let RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue;\n      let RealRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue;\n      let RealRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue;\n      let RealDesignTemplateMappingValue = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue;\n      let activeSampleTab = this.props.Login.activeSampleTab;\n      let activeTestTab = this.props.Login.activeTestTab;\n      let masterData = { ...this.props.Login.masterData,\n        RealSampleTypeValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        RealFilterStatusValue,\n        RealFromDate,\n        RealToDate,\n        RealDesignTemplateMappingValue\n      };\n      let inputData = {\n        npreregno: \"\",\n        nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        userinfo: this.props.Login.userInfo,\n        activeSampleTab,\n        activeTestTab,\n        ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample,\n        checkBoxOperation: 3\n      };\n\n      if (inputData.nsampletypecode) {\n        if (inputData.ndesigntemplatemappingcode) {\n          const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n          inputData['FromDate'] = obj.fromDate;\n          inputData['ToDate'] = obj.toDate;\n          const selectedFilter = {};\n          selectedFilter[\"fromdate\"] = RealFromDate;\n          selectedFilter[\"todate\"] = RealToDate;\n          const inputParam = {\n            masterData,\n            inputData,\n            searchSubSampleRef: this.searchSubSampleRef,\n            searchSampleRef: this.searchSampleRef,\n            searchTestRef: this.searchTestRef,\n            selectedFilter\n          };\n          this.props.getRegistrationSample(inputParam);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PLSSCONFIGREGISTRATIONTEMPLATE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.verticalPaneSizeChange = val => {\n      this.setState({\n        initialVerticalWidth: val - 150\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        //  if (!nneedsubsample) {\n        const selectedRecord = this.state.selectedRecord || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectedRecord[\"ntzdreceivedate\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else {\n          // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n          // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n          //     //selectComponent[\"nneedservice\"] = true;\n          // }\n          selectedRecord[fieldName] = comboData;\n          selectedRecord[\"Sample Name\"] = comboData.label;\n          selectedRecord[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\n          selectedRecord[\"ntestgrouptestcode\"] = [];\n          this.props.componentTest(selectedRecord, true, this.props.Login.specBasedComponent, this.props.Login.Conponent);\n        } // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         selectComponent\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        // } else {\n        //     const selectComponent = this.state.selectComponent || {};\n        //     selectComponent[fieldName] = comboData;\n        //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n        //     this.setState({ selectComponent })\n        // }\n\n      }\n    };\n\n    this.onInputOnSubSampleChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      let parentList = [];\n      let childComboList = [];\n      let childColumnList = {};\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n      const inputParem = {\n        child: control.child,\n        source: control.source,\n        primarykeyField: control.valuemember,\n        value: comboData.value,\n        item: comboData.item,\n        label: comboName,\n        nameofdefaultcomp: control.name\n      };\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.child && control.child.length > 0) {\n        childComboList = getSameRecordFromTwoArrays(this.state.regSubSamplecomboComponents, control.child, \"label\");\n        childColumnList = {};\n        childColumnList = childComboList.map(columnList => {\n          const val = comboChild(this.state.regSubSamplecomboComponents, columnList, childColumnList, false); //  childColumnList = val.childColumnList\n\n          return val.childColumnList;\n        });\n        parentList = getSameRecordFromTwoArrays(this.state.regSubSamplewithoutCombocomponent, control.child, \"label\");\n        this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.regSubSamplecomboData, childComboList, childColumnList, this.state.regSubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n      } else {\n        this.setState({\n          selectedRecord\n        }); // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: { selectedRecord }\n        // }\n        // this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n\n      if (operation === 'create') {\n        let objSubSample = this.state.selectedRecord;\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        const userInfo = this.props.Login.userInfo;\n        let saveSubSample = {};\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.selectedSample, sampleList, 'npreregno');\n        const findSampleAlloSpec = [...new Set(sampleList.map(item => item.nallottedspeccode))];\n\n        if (this.props.Login.specBasedComponent) {\n          saveSubSample[\"nspecsampletypecode\"] = objSubSample[\"nspecsampletypecode\"] ? objSubSample[\"nspecsampletypecode\"] : -1;\n          saveSubSample[\"ncomponentcode\"] = objSubSample[\"ncomponentcode\"] ? objSubSample[\"ncomponentcode\"].value : -1;\n        } else {\n          const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\n          saveSubSample[\"nspecsampletypecode\"] = findSampleSpec[0] ? findSampleSpec[0] : -1;\n        }\n\n        saveSubSample[\"jsondata\"] = {};\n        saveSubSample[\"jsonuidata\"] = {};\n        const dateList = [];\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                //let componentrowlabel = ''\n                // let componentrowvalue = ''\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ? {\n                      value: objSubSample[componentrow.label].value,\n                      label: objSubSample[componentrow.label].label\n                    } : -1;\n                    saveSubSample[\"jsonuidata\"][componentrow.label] = objSubSample[componentrow.label] ? objSubSample[componentrow.label].label : \"\"; // if (componentrow.mandatory || objSubSample[componentrow.label]) {\n                    //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n                    //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label].label\n                    // }\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      saveSubSample[\"jsondata\"][componentrow.label] = convertDateTimetoString(objSubSample[componentrow.label] ? objSubSample[componentrow.label] : new Date(), userInfo);\n                      saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label];\n                    } else {\n                      saveSubSample[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? convertDateTimetoString(objSubSample[componentrow.label] ? objSubSample[componentrow.label] : new Date(), userInfo) : objSubSample[componentrow.label] ? convertDateTimetoString(objSubSample[componentrow.label] ? objSubSample[componentrow.label] : new Date(), userInfo) : \"\";\n                      saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label];\n                    }\n\n                    if (componentrow.timezone) {\n                      saveSubSample[\"jsondata\"][`tz${componentrow.label}`] = objSubSample[`tz${componentrow.label}`] ? {\n                        value: objSubSample[`tz${componentrow.label}`].value,\n                        label: objSubSample[`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      saveSubSample[\"jsonuidata\"][`tz${componentrow.label}`] = saveSubSample[\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ? objSubSample[componentrow.label] : \"\";\n                    saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]; // if (objSubSample[componentrow.label]) {\n                    //     componentrowlabel = componentrowlabel + '&' + objSubSample.label\n                    //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label]\n                    // }\n                  }\n\n                  return saveSubSample;\n                }); //saveSubSample[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n              } else {\n                if (component.inputtype === \"combo\") {\n                  saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ? {\n                    value: objSubSample[component.label].value,\n                    label: objSubSample[component.label].label\n                  } : -1;\n                  saveSubSample[\"jsonuidata\"][component.label] = objSubSample[component.label] ? objSubSample[component.label].label : \"\";\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    saveSubSample[\"jsondata\"][component.label] = convertDateTimetoString(objSubSample[component.label] ? objSubSample[component.label] : new Date(), userInfo);\n                    saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label];\n                  } else {\n                    saveSubSample[\"jsondata\"][component.label] = component.loadcurrentdate ? convertDateTimetoString(objSubSample[component.label] ? objSubSample[component.label] : new Date(), userInfo) : objSubSample[component.label] ? convertDateTimetoString(objSubSample[component.label] ? objSubSample[component.label] : new Date(), userInfo) : \"\";\n                    saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label];\n                  }\n\n                  if (component.timezone) {\n                    saveSubSample[\"jsondata\"][`tz${component.label}`] = objSubSample[`tz${component.label}`] ? {\n                      value: objSubSample[`tz${component.label}`].value,\n                      label: objSubSample[`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    saveSubSample[\"jsonuidata\"][`tz${component.label}`] = saveSubSample[\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ? objSubSample[component.label] : \"\";\n                  saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label];\n                }\n              }\n\n              return saveSubSample;\n            });\n            return saveSubSample;\n          });\n          return saveSubSample;\n        });\n        saveSubSample[\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1; // Component.unshift(saveSubSample);\n\n        let selectedTestData = objSubSample[\"ntestgrouptestcode\"];\n        const selectedTestArray = [];\n        selectedTestData && selectedTestData.map(item => {\n          return selectedTestArray.push(item.item);\n        }); // const Test = this.props.Login.Test || [];\n        // const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n        //Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\n\n        const map = {};\n        map['RegistrationSample'] = saveSubSample;\n        map['subsampleDateList'] = dateList;\n        map['subsampledateconstraints'] = this.state.subsampledateconstraints;\n        map['testgrouptest'] = selectedTestArray;\n        map['npreregno'] = sampleList.map(item => item.npreregno).join(\",\");\n        map['userinfo'] = userInfo;\n        map['checkBoxOperation'] = 3;\n        map['ntype'] = 3;\n        map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n        map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n        map[\"checkBoxOperation\"] = 3;\n        map[\"masterData\"] = this.props.Login.masterData;\n        map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        const inputParam = {\n          inputData: map,\n          postParamList: this.postParamList\n        };\n        this.props.saveSubSample(inputParam);\n      } else {\n        this.onUpdateSubSampleRegistration(saveType, formRef, operation);\n      }\n    };\n\n    this.mandatoryList = (prereg, printer, file, childtest, regSubSample) => {\n      let mandatory = [];\n\n      if (file) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_IMPORTFILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }];\n      } else if (printer) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_PRINTER\",\n          \"dataField\": \"sprintername\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else if (regSubSample) {\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  mandatory.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n\n                return mandatory;\n              }) : component.mandatory === true ? mandatory.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\";\n            });\n          });\n        });\n      } else if (childtest) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_TESTNAME\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      }\n\n      return mandatory;\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedFile = this.state.selectedFile || {};\n      selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file);\n      this.setState({\n        selectedFile,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onSaveChildTestClick = (saveType, formRef) => {\n      const masterData = this.props.Login.masterData;\n      const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n      const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\"); //  selectedSubsample =masterData.selectedSubSample.slice(this.state.skip, (this.state.skip + this.state.take));\n\n      const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\n      let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      const inputData = {\n        TestGroupTest: this.state.selectedRecord.ntestgrouptestcode.map(value => value.item),\n        RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\n        ntransactionsamplecode: ntransactionsamplecode,\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\n        nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\n        ntype: 3,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        npreregno: selectedSample && selectedSample.map(sample => sample.npreregno).join(\",\"),\n        // ntransactionsamplecode: selectedSubsample &&\n        // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n        FromDate: obj.fromDate,\n        ToDate: obj.toDate,\n        ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"registration\",\n        operation: this.props.Login.operation,\n        methodUrl: \"Test\",\n        responseKeyList: [{\n          \"responseKey\": \"selectedSample\",\n          \"masterDataKey\": \"RegistrationGetSample\",\n          \"primaryKey\": \"npreregno\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedSubSample\",\n          \"masterDataKey\": \"RegistrationGetSubSample\",\n          \"primaryKey\": \"ntransactionsamplecode\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedTest\",\n          \"masterDataKey\": \"RegistrationGetTest\",\n          \"primaryKey\": \"ntransactiontestcode\",\n          \"dataAction\": \"add\"\n        }],\n        saveType,\n        formRef,\n        postParamList: this.postParamList\n      };\n\n      if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.createRegistrationTest(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.getRegistrationComboService = (ScreenName, operation, primaryKeyField, masterData, userInfo, editId) => {\n      const ndesigntemplatemappingcodefilter = this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode;\n\n      if (ndesigntemplatemappingcodefilter === this.props.Login.masterData.ndesigntemplatemappingcode) {\n        let data = [];\n        const withoutCombocomponent = [];\n        const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n        if (Layout !== undefined) {\n          Layout.map(row => {\n            return row.children.map(column => {\n              return column.children.map(component => {\n                return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    data.push(componentrow);\n                  } else {\n                    withoutCombocomponent.push(componentrow);\n                  }\n\n                  return null;\n                }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n              });\n            });\n          });\n          const comboComponents = data;\n          let childColumnList = {};\n          data.map(columnList => {\n            const val = this.comboChild(data, columnList, childColumnList, true);\n            data = val.data;\n            childColumnList = val.childColumnList;\n            return null;\n          });\n          const mapOfFilterRegData = {\n            nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n          };\n          this.props.getPreviewTemplate(masterData, userInfo, editId, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent, true, false, mapOfFilterRegData, false, \"create\", this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename);\n        } else {\n          toast.info(\"Configure the preregister template for this registrationtype\");\n        }\n      } else {\n        toast.info(\"select the approved design template\");\n      }\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n\n              return data;\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = this.comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n\n                return null;\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            }\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take\n      });\n    };\n\n    this.handleSubSamplePageChange = e => {\n      this.setState({\n        subsampleskip: e.skip,\n        subsampletake: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterChange = (event, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSample: this.props.Login.masterData.selectedSample,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab\n        };\n        this.props.getSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.onSubSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSample: this.props.Login.masterData.selectedSample,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab\n        };\n        this.props.getSubSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.ontestTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n\n      if (activeTestTab !== this.props.Login.activeTestTab) {\n        if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedTest: this.props.Login.masterData.selectedTest,\n            ntransactiontestcode: this.props.Login.masterData.selectedTest ? String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n            npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestTab,\n            screenName: activeTestTab,\n            resultDataState: this.state.resultDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            testAttachmentDataState: this.state.testAttachmentDataState\n          };\n          this.props.getTestChildTabDetailRegistration(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.onDropComponentFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedFile = this.state.selectedFile || {};\n      selectedFile[fieldName] = onDropAttachFileList(selectedFile[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedFile,\n        actionType: \"new\"\n      });\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue) => {\n      const {\n        selectedFilter\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedFilter[dateName] = dateValue;\n      this.setState({\n        selectedFilter\n      });\n    };\n\n    this.onUpdateRegistrationConfirm = () => {\n      this.showAlert();\n      this.onUpdateRegistration(this.props.Login.regEditParam.saveType, this.props.Login.regEditParam.formRef, this.props.Login.regEditParam.operation, 2);\n    };\n\n    this.confirmAlert = () => {\n      if (this.state.showConfirmAlert) {\n        if (this.props.Login.regDateEditConfirmMessage) {\n          this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.Login.regDateEditConfirmMessage, this.props.intl.formatMessage({\n            id: \"IDS_OK\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_CANCEL\"\n          }), () => this.onUpdateRegistrationConfirm(), undefined, () => this.showAlert());\n        } else {\n          this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.Login.booleanFlag, \"ok\", \"Cancel\", () => this.insertRegistration(false), undefined, () => this.showAlert());\n        }\n      }\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.showAlert = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlert: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddFile = () => {\n      let selectedRecord = this.state.selectedRecord;\n      let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue;\n      let booleanmanuf = true;\n\n      if (RealRegTypeValue === RegistrationType.PLASMA_POOL) {\n        booleanmanuf = selectedRecord[\"nmanufcode\"] > 0 && selectedRecord[\"nmanufcode\"] !== undefined ? true : false;\n      }\n\n      if (booleanmanuf) {\n        if (this.state.selectedRecord.nallottedspeccode !== undefined) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadFile: true,\n              ChildscreenName: \"File\",\n              childoperation: \"Import\",\n              parentPopUpSize: \"lg\",\n              selectedFile: undefined\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSPECIFICATION\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTMANUFACTURER\"\n        }));\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (name !== \"nnoofcontainer\" && (value === 0 || value === 0.0)) {\n        selectComponent[name] = '';\n        this.setState({\n          selectComponent\n        });\n      } else {\n        selectComponent[name] = value;\n        this.setState({\n          selectComponent\n        });\n      }\n    };\n\n    this.onSampleTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nsampletypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getSampleTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.ConfirmComponent = props => {\n      this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to Override the Existing Components ?\", \"ok\", \"cancel\", () => this.getComponentfromJava(props));\n    };\n\n    this.onRegTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nregtypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getRegTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.acceptRegistration = (registerId, skip, take) => {\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      } // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\n\n\n      let acceptList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (acceptList && acceptList.length > 0) {\n        if (acceptList.every(this.checkPreregisterAndQuarentine)) {\n          if (this.props.Login.masterData.selectedTest.length > 0) {\n            if (checkTestPresent(this.props.Login.masterData.RegistrationGetTest, acceptList)) {\n              let Map = {};\n              Map[\"fromdate\"] = \"\";\n              Map[\"todate\"] = \"\";\n              Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n              Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n              Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n              Map[\"nfilterstatus\"] = -1;\n              Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\"); // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\n              //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\n\n              Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n              Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n              Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n              Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");\n              ;\n              Map[\"userinfo\"] = this.props.Login.userInfo;\n              Map[\"nflag\"] = 2;\n              Map[\"ntype\"] = 3;\n              Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n              Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n              Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n              Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n              Map[\"checkBoxOperation\"] = 3;\n              Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n              let inputParam = {\n                inputData: Map,\n                postParamList: this.postParamList,\n                action: 'accept'\n              };\n              this.confirmMessage.confirm(this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_ACCEPTREGISTRATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_OK\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CANCEL\"\n              }), () => this.acceptRegistrationConfirm(inputParam, registerId));\n            } else {\n              let Map = {};\n              Map[\"fromdate\"] = \"\";\n              Map[\"todate\"] = \"\";\n              Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n              Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n              Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n              Map[\"nfilterstatus\"] = -1;\n              Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\"); // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\n              //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\n\n              Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n              Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n              Map[\"userinfo\"] = this.props.Login.userInfo;\n              Map[\"nflag\"] = 2;\n              Map[\"ntype\"] = 1;\n              Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n              Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n              Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n              Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n              Map[\"checkBoxOperation\"] = 3;\n              Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n              let inputParam = {\n                inputData: Map,\n                postParamList: this.postParamList,\n                action: 'accept'\n              };\n              this.confirmMessage.confirm(\"Confirmation\", \"Confirmation!\", \"Samples With atleast One Preregister Test Will Only Accept.Do You Want Accept?\", \"OK\", \"Cancel\", () => this.acceptRegistrationConfirm(inputParam, registerId));\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ADDTESTTOREGISTERSAMPLES\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPREREGQUARANTINESAMPLES\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPREREGQUARANTINESAMPLES\"\n        }));\n      }\n    };\n\n    this.acceptRegistrationConfirm = (inputParam, registerId) => {\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, registerId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            parentPopUpSize: 'lg',\n            screenName: this.props.Login.screenName,\n            operation: 'accept'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.acceptRegistration(inputParam, this.props.Login.masterData);\n      }\n    };\n\n    this.selectQuarantine = (quarantineId, skip, take) => {\n      let sampleList = this.props.Login.masterData.searchedSample || (this.props.Login.masterData.RegistrationGetSample ? [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take) : []);\n      let quarentineList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (quarentineList && quarentineList.length > 0) {\n        if (quarentineList.every(this.checkPreregisterRecordQuarantine)) {\n          // let ntransactionstatus = this.props.Login.masterData.selectedSample &&\n          //     this.props.Login.masterData.selectedSample.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\n          //if (ntransactionstatus === transactionStatus.PREREGISTER) {\n          let Map = {};\n          Map[\"fromdate\"] = \"\";\n          Map[\"todate\"] = \"\";\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = -1;\n          Map[\"npreregno\"] = quarentineList && quarentineList.map(sample => sample.npreregno).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 1;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n          Map[\"ntransactionstatus\"] = quarentineList && quarentineList.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\"); //Map[\"ninsertpreregno\"] = quarantineSample.quarantineSample.npreregno;\n\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'quarantine'\n          }; //console.log(\"inputParam, quarantine:\", inputParam);\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, quarantineId)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'quarantine'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.preregRecordToQuarantine(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPREREGISTERSAMPLES\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPREREGISTERSAMPLES\"\n        }));\n      }\n    };\n\n    this.onRegSubTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.onDesignTemplateChange = (event, fieldName, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      // if (comboData !== null) {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      }); // }\n    };\n\n    this.PrinterChange = (comboData, fieldName) => {\n      const selectedPrinterData = this.state.selectedPrinterData || {};\n      selectedPrinterData[fieldName] = comboData;\n      this.setState({\n        selectedPrinterData\n      });\n    };\n\n    this.closeChildModal = () => {\n      let loadRegSubSample = this.props.Login.loadRegSubSample;\n      let loadFile = this.props.Login.loadFile;\n      let showSaveContinue = this.props.Login.showSaveContinue;\n      let screenName = this.props.Login.screenName;\n      let loadChildTest = this.props.Login.loadChildTest;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.loadFile) {\n        loadFile = false;\n        screenName = this.props.Login.PopUpLabel;\n      } else if (this.props.Login.loadChildTest) {\n        loadChildTest = false;\n        openModal = false;\n        selectedRecord = {};\n      } else if (this.props.Login.loadRegSubSample) {\n        loadRegSubSample = false;\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadRegSubSample,\n          screenName,\n          showSaveContinue,\n          loadFile,\n          loadChildTest,\n          openModal,\n          parentPopUpSize: \"xl\",\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let loadPreregister = this.props.Login.loadPreregister;\n      let openChildModal = this.props.Login.openChildModal;\n      let parentPopUpSize = this.props.Login.pare;\n      let screenName = this.props.Login.screenName;\n      let loadPrinter = this.props.Login.loadPrinter;\n      let openPortal = this.props.Login.openPortal;\n      let Component = this.props.Login.Component;\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"accept\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"quarantine\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          loadPreregister = false;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign,\n              openModal,\n              openChildModal,\n              loadPreregister\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          loadEsign = false;\n\n          if (loadPreregister) {\n            parentPopUpSize = 'xl';\n          }\n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign,\n              parentPopUpSize\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        openModal = false;\n        loadPrinter = false;\n        loadPreregister = false;\n        selectedRecord = {};\n        openPortal = false;\n        subSampleDataGridList = [];\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            loadPreregister,\n            selectedRecord,\n            screenName,\n            insertSourcePreregno: undefined,\n            loadPrinter,\n            openPortal,\n            Component,\n            subSampleDataGridList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (operation === \"update\") {\n        this.onUpdateRegistration(saveType, formRef, operation);\n      }\n    };\n\n    this.onSavePrinterClick = () => {\n      let insertlist = []; //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\n\n      const inputParam = {\n        classUrl: 'barcode',\n        methodUrl: 'Barcode',\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          npreregno: this.props.Login.insertPrinterPreregno,\n          sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\n          insertlist,\n          npreregno1: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: this.props.Login.ncontrolcode\n        },\n        operation: 'printer',\n        // dataState:this.state.sourceDataState,\n        // activeSampleTab:\"IDS_SOURCE\",\n        action: 'printer'\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: 'printer'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveFileClick = (saveType, formRef) => {\n      const selectedFile = this.state.selectedFile;\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedFile.sfilename;\n      const formData = new FormData(); // if(nattachmenttypecode === attachmentType.FTP) {\n\n      if (acceptedFiles && acceptedFiles.length > 0) {\n        acceptedFiles.forEach((file, index) => {\n          formData.append(\"uploadedFile\" + index, file);\n        });\n        formData.append(\"filecount\", acceptedFiles.length);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYONEFILETOSUBMIT\"\n        }));\n      }\n\n      formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n      formData.append(\"nstudyplan\", JSON.stringify(selectedRecord.nallottedspeccode.value));\n      formData.append(\"testrequired\", JSON.stringify(selectedRecord.ntransactionstatus === 3 ? true : false));\n      formData.append(\"ntemplatemanipulationcode\", JSON.stringify(selectedRecord.ntemplatemanipulationcode));\n      formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.RealRegTypeValue.nregtypecode));\n      formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode));\n      this.props.ImportFile(formData, this.confirmMessage, this.props.Login);\n    };\n\n    this.sampleInfoDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.dataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_SOURCE\":\n          this.setState({\n            sourceDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sourceDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testdataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_TEST\":\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.sampleTabDetail = () => {\n      let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\n      let {\n        skip,\n        take\n      } = this.state;\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      tabMap.set(\"IDS_ATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.selectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSample || []\n        },\n        selectedListName: \"IDS_SAMPLE\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2887,\n          columnNumber: 39\n        }\n      }));\n      tabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSampleComment\",\n        editName: \"EditSampleComment\",\n        deleteName: \"DeleteSampleComment\",\n        methodUrl: \"SampleComment\",\n        isTestComment: false,\n        masterList: selectedSampleList,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLES\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2927,\n          columnNumber: 42\n        }\n      }));\n      return tabMap;\n    };\n\n    this.subsampleTabDetail = () => {\n      let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      let ntransactionsamplecode = this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\n      let {\n        skip,\n        take\n      } = this.state;\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      const tabMap = new Map();\n      tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.selectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          npreregno,\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSample || []\n        },\n        selectedListName: \"IDS_SAMPLE\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2987,\n          columnNumber: 48\n        }\n      }));\n      tabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSampleComment\",\n        editName: \"EditSampleComment\",\n        deleteName: \"DeleteSampleComment\",\n        methodUrl: \"SampleComment\",\n        isTestComment: false,\n        masterList: selectedSampleList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLES\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3029,\n          columnNumber: 42\n        }\n      }));\n      return tabMap;\n    };\n\n    this.testTabDetail = () => {\n      const testTabMap = new Map();\n      let testList = this.props.Login.masterData.RegistrationGetTest || [];\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"); // const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\n\n      let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      testTabMap.set(\"IDS_PARAMETERRESULTS\", /*#__PURE__*/React.createElement(RegistrationResultTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.testDataStateChange,\n        screenName: \"IDS_PARAMETERRESULTS\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3085,\n          columnNumber: 48\n        }\n      }));\n      testTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"selectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        dataState: this.state.testAttachmentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: this.props.Login.masterData.selectedTest\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3095,\n          columnNumber: 47\n        }\n      }));\n      testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedTest\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        isTestComment: false,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3136,\n          columnNumber: 44\n        }\n      }));\n      return testTabMap;\n    };\n\n    this.getCommentsCombo = event => {\n      if (this.props.Login.selectedTest && this.props.Login.selectedTest.length > 0) {\n        this.props.getCommentsCombo(...event);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOADDCOMMENTS\"\n        }));\n      }\n    };\n\n    this.testDataStateChange = event => {\n      switch (this.props.Login.activeTestTab) {\n        case \"IDS_PARAMETERRESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TEST\":\n          this.setState({\n            testDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let testList = [];\n\n        if (this.props.Login.masterData.searchedTest !== undefined) {\n          testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n        } else {\n          testList = this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, acceptList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      let acceptList = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedTest !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n      }\n\n      if (this.props.Login.operation === \"update\") {\n        acceptList.push(selectedRecord);\n      } else {\n        acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      }\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleAttachment(saveParam, acceptList);\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestAttachment(saveParam, this.props.Login.masterData.selectedTest);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n      }\n    };\n\n    this.cancelSubSampleRecord = (controlcode, skip, take) => {\n      let testList = this.props.Login.masterData.searchedSubSample || (this.props.Login.masterData.RegistrationGetSubSample ? [...this.props.Login.masterData.RegistrationGetSubSample].splice(skip, skip + take) : []);\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\n\n      if (acceptList && acceptList.length > 0) {\n        // console.log(\"Success:\", dataitem);\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\n          let Map = {};\n          Map['npreregno'] = acceptList.map(x => x.npreregno).join(\",\");\n          Map['ntransactiontestcode'] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\"); // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\n          // Map[\"ntransactionsamplecode\"] = acceptList.map(x => x.ntransactionsamplecode).join(\",\");\n          //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3; // Map[\"withoutgetparameter\"] = 3;\n\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n          Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = acceptList && acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelSample'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelSubSampleAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => this.props.intl.formatMessage({\n            id: sample.stransdisplaystatus\n          })).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTTEST\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.cancelRecord = (controlcode, skip, take) => {\n      let testList = this.props.Login.masterData.searchedTest || (this.props.Login.masterData.RegistrationGetTest ? [...this.props.Login.masterData.RegistrationGetTest].splice(skip, skip + take) : []);\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\n\n      if (acceptList && acceptList.length > 0) {\n        // console.log(\"Success:\", dataitem);\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\n          let Map = {};\n          Map['ninsertpreregno'] = acceptList.map(x => x.npreregno).join(\",\"); // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\n\n          Map[\"ntransactiontestcode\"] = acceptList.map(x => x.ntransactiontestcode).join(\",\"); //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3;\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n          Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = acceptList && acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelTest'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelTestAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => this.props.intl.formatMessage({\n            id: sample.stransdisplaystatus\n          })).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTTEST\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.addSubSample = (controlcode, skip, take) => {\n      let Map = {};\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      }\n\n      let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (addSubSampleList && addSubSampleList.length > 0) {\n        const findTransactionStatus = [...new Set(addSubSampleList.map(item => item.ntransactionstatus))];\n\n        if (findTransactionStatus.length === 1) {\n          if (findTransactionStatus[0] === transactionStatus.PREREGISTER) {\n            //   const findApprovalVersion = [...new Set(addSubSampleList.map(item => item.napprovalversioncode))];\n            //   if (findApprovalVersion.length === 1) {\n            const findSampleSpec = [...new Set(addSubSampleList.map(item => item.nallottedspeccode))];\n            const findComponentReqSpec = [...new Set(addSubSampleList.map(item => item.ncomponentrequired))];\n            const findSampleSpectemplate = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))]; //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\n\n            if (findSampleSpec.length === 1) //&& findComponent.length === 1 \n              {\n                let data = [];\n                const regSubSamplewithoutCombocomponent = [];\n                const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n                if (Layout !== undefined) {\n                  Layout.map(row => {\n                    return row.children.map(column => {\n                      return column.children.map(component => {\n                        return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                          if (componentrow.inputtype === \"combo\") {\n                            data.push(componentrow);\n                          } else {\n                            regSubSamplewithoutCombocomponent.push(componentrow);\n                          }\n\n                          return null;\n                        }) : component.inputtype === \"combo\" ? data.push(component) : regSubSamplewithoutCombocomponent.push(component);\n                      });\n                    });\n                  });\n                  const regSubSamplecomboComponents = data;\n                  let regchildColumnList = {};\n                  data.map(columnList => {\n                    const val = comboChild(data, columnList, regchildColumnList, true);\n                    data = val.data;\n                    regchildColumnList = val.childColumnList;\n                    return null;\n                  }); //const Map={}\n                  // const findSamplentemplatemanipulationcode = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\n                  // Map[\"ntemplatemanipulationcode\"] = findSamplentemplatemanipulationcode[0];\n\n                  Map[\"nallottedspeccode\"] = findSampleSpec[0];\n                  Map[\"ntemplatemanipulationcode\"] = findSampleSpectemplate[0];\n                  Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n                  Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n                  Map[\"npreregno\"] = addSubSampleList && addSubSampleList.map(sample => sample.npreregno).join(\",\");\n                  Map[\"registrationsample\"] = addSubSampleList;\n                  this.props.addsubSampleRegistration(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectedRecord, regchildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, Map, controlcode, findComponentReqSpec[0] === 3 ? true : false);\n                } else {\n                  toast.warn(this.props.intl.formatMessage({\n                    id: \"IDS_PLEASECONFIGURETHESUBSAMPLETEMPLATE\"\n                  }));\n                }\n              } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n              }));\n            } // } else {\n            //    toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\n            // }\n\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTPREREGISTERSAMPLETOADDSUBSAMPLE\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOSUBSAMPLE\"\n        }));\n      }\n    };\n\n    this.handleEditDateChange = (dateName, dateValue) => {\n      const selectComponent = this.state.selectedRecord;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectedRecord: selectComponent\n      });\n    };\n\n    this.onNumericInputEditChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (name !== \"nnoofcontainer\" && (value === 0 || value === 0.0)) {\n        selectedRecord[name] = '';\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectedRecord[name] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.cancelSampleRecords = (controlcode, skip, take) => {\n      let Map = {};\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      } // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\n      // sampleList = sampleList.splice(skip, skip + take);\n\n\n      let cancelRejectSamplesList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (cancelRejectSamplesList && cancelRejectSamplesList.length > 0) {\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, cancelRejectSamplesList)) {\n          //Map['ninsertpreregno']=dataitem.cancelSample.npreregno;\n          Map['ntransactionstatus'] = cancelRejectSamplesList && cancelRejectSamplesList.map(transactionstatus => transactionstatus.ntransactionstatus).join(\",\"); //Map[\"ntransactiontestcode\"]=dataitem.ntransactiontestcode;\n          //Map[\"ninserttransactionsamplecode\"]=dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = -1;\n          Map[\"npreregno\"] = cancelRejectSamplesList && cancelRejectSamplesList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\");\n          Map[\"registrationsample\"] = cancelRejectSamplesList;\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"transactionValidation\"] = this.props.Login.transactionValidation;\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelSample'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelSampleAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => this.props.intl.formatMessage({\n            id: sample.stransdisplaystatus\n          })).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Sample\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTSAMPLE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.transValidation = (transactionValidation, ncontrolcode, selectedSample) => {\n      //  const transList=transactionValidation?Object.keys(transactionValidation):[];\n      //  const index=transList.findIndex(x=>x.ncontrolcode===ncontrolcode);\n      //let check=true;\n      //  let validate=false;\n      let ntransstatus = [];\n      let translist = transactionValidation[ncontrolcode];\n\n      if (translist) {\n        transactionValidation[ncontrolcode] && transactionValidation[ncontrolcode].map(sam => {\n          return ntransstatus.push(sam.ntransactionstatus);\n        });\n        const selectdata = selectedSample ? selectedSample : [];\n        let check = selectdata.map(sam1 => {\n          return ntransstatus.includes(sam1.ntransactionstatus);\n        });\n\n        if (check.includes(false)) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignforRegistration(inputParam, \"openModal\");\n    };\n\n    this.editRegistration = inputParam => {\n      let data = [];\n      const withoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n      if (Layout !== undefined) {\n        Layout.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data.push(componentrow);\n                } else {\n                  withoutCombocomponent.push(componentrow);\n                }\n\n                return null;\n              }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n            });\n          });\n        });\n        const comboComponents = data;\n        let childColumnList = {};\n        data.map(columnList => {\n          const val = this.comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n          return null;\n        });\n        this.props.getEditRegistrationComboService(inputParam, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent);\n      } else {\n        toast.info(\"Configure the preregister template for this registrationtype\");\n      }\n    };\n\n    this.editSubSampleRegistration = inputParam => {\n      let data = [];\n      const regSubSamplewithoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n      if (Layout !== undefined) {\n        Layout.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data.push(componentrow);\n                } else {\n                  regSubSamplewithoutCombocomponent.push(componentrow);\n                }\n\n                return null;\n              }) : component.inputtype === \"combo\" ? data.push(component) : regSubSamplewithoutCombocomponent.push(component);\n            });\n          });\n        });\n        const regSubSamplecomboComponents = data;\n        let regSubSamplechildColumnList = {};\n        data.map(columnList => {\n          const val = this.comboChild(data, columnList, regSubSamplechildColumnList, true);\n          data = val.data;\n          regSubSamplechildColumnList = val.childColumnList;\n          return null;\n        });\n        const sampleList = getSameRecordFromTwoArrays(inputParam.masterData.selectedSample, [inputParam.mastertoedit], \"npreregno\");\n        this.props.getEditSubSampleComboService(inputParam, data, this.state.selectedRecord, regSubSamplechildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, sampleList[0].ncomponentrequired === 3 ? true : false);\n      } else {\n        toast.info(\"Configure the sub sample template for this registrationtype\");\n      }\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.PrevoiusLoginData = undefined;\n    this.breadCrumbData = []; //  this.sampleeditable=this.props.Login.masterData.DynamicDesign&& JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\n\n    this.state = {\n      layout: 1,\n      openModal: false,\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      screenName: \"Product\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      showSaveContinue: false,\n      filterCollection: [],\n      selectedFilter: {},\n      breadCrumb: [],\n      showTest: true,\n      showSample: false,\n      showSubSample: false,\n      sampleSearchFied: [],\n      subsampleSearchFied: [],\n      testSearchFied: [],\n      showConfirmAlert: false,\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      DynamicSampleColumns: [],\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'npreregno'\n        }]\n      },\n      testCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'groupingField'\n        }]\n      },\n      testAttachmentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'groupingField'\n        }]\n      },\n      sampleCommentsDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'groupingField'\n        }]\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }, {\n          field: 'stestsynonym'\n        }]\n      },\n      selectedPrinterData: {},\n      grandparentheight: '150vh',\n      transactionValidation: [],\n      skip: 0,\n      take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\n      testskip: 0,\n      splitChangeWidthPercentage: 28.6,\n      testtake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      subsampleskip: 0,\n      subsampletake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      comboComponents: [],\n      withoutCombocomponent: [],\n      childColumnList: [],\n      columnList: [],\n      regSubSamplecomboComponents: [],\n      regSubSamplewithoutCombocomponent: [],\n      regparentSubSampleColumnList: [],\n      DynamicSubSampleColumns: [],\n      DynamicTestColumns: [],\n      DynamicGridItem: [],\n      DynamicGridMoreField: [],\n      SingleItem: [],\n      testMoreField: [],\n      testListColumns: [],\n      SubSampleDynamicGridItem: [],\n      SubSampleDynamicGridMoreField: [],\n      SubSampleSingleItem: [],\n      cancelId: -1,\n      preRegisterId: -1,\n      registerId: -1,\n      editSampleId: -1,\n      quarantineId: -1,\n      addTestId: -1,\n      printBarcodeId: -1,\n      cancelSampleId: -1,\n      addSubSampleId: -1,\n      editSubSampleId: -1,\n      cancelSubSampleId: -1,\n      stateSampleType: [],\n      stateRegistrationType: [],\n      stateRegistrationSubType: [],\n      stateFilterStatus: [],\n      stateDynamicDesign: [],\n      testGetParam: {},\n      testChildGetParam: {},\n      subSampleGetParam: {},\n      filterSampleParam: {},\n      filterTestParam: {},\n      editRegParam: {},\n      editSubSampleRegParam: {},\n      addTestParam: {},\n      sampleSearchField: [],\n      subsampleSearchField: [],\n      testSearchField: [],\n      filterSubSampleParam: {} // specBasedComponent: this.props.Login.settings\n      //     && this.props.Login.settings[18] ? this.props.Login.settings[18] === \"true\" ? true : false : false,\n\n    }; // this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\n      return {\n        showConfirmAlert: props.Login.showConfirmAlert\n      };\n    }\n\n    return null;\n  }\n\n  getActiveTestURL() {\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (this.props.Login.activeTestKey) {\n      case \"IDS_PARAMETERRESULTS\":\n        //url = \"resultentrybysample/getTestbasedParameter\";\n        url = \"registration/getregistrationparameter\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      default:\n        url = \"registration/getregistrationparameter\"; // url = \"resultentrybysample/getTestbasedParameter\";\n\n        break;\n    }\n\n    return url;\n  }\n\n  gridViewChange(layout) {\n    this.setState({\n      layout: layout\n    });\n  }\n\n  render() {\n    this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : this.props.Login.masterData.FromDate;\n    this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : this.props.Login.masterData.ToDate;\n    let sampleList = this.props.Login.masterData.RegistrationGetSample ? sortData(this.props.Login.masterData.RegistrationGetSample, 'desc', 'npreregno') : [];\n    let subSampleList = this.props.Login.masterData.RegistrationGetSubSample ? this.props.Login.masterData.RegistrationGetSubSample : [];\n    let testList = this.props.Login.masterData.RegistrationGetTest ? this.props.Login.masterData.RegistrationGetTest : []; //\n    // let testGetParam = {\n    //     masterData: this.props.Login.masterData,\n    //     userinfo: this.props.Login.userInfo,\n    //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n    //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n    //     npreregno: this.props.Login.masterData.selectedSample &&\n    //         this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     searchTestRef: this.searchTestRef,\n    //     testskip: this.state.testskip,\n    //     subsampleskip: this.state.subsampleskip,\n    //     resultDataState: this.state.resultDataState,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    // }\n    // let testChildGetParam = {\n    //     masterData: this.props.Login.masterData,\n    //     userinfo: this.props.Login.userInfo,\n    //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n    //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n    //     npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n    //     ntransactionsamplecode: this.props.Login.masterData.selectedSubSample &&\n    //         this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     resultDataState: this.state.resultDataState,\n    //     testCommentDataState: this.state.testCommentDataState,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    // }\n\n    this.confirmMessage = new ConfirmMessage(); // let subSampleGetParam = {\n    //     masterData: this.props.Login.masterData,\n    //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     userinfo: this.props.Login.userInfo,\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n    //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n    //     testskip: this.state.testskip,\n    //     subsampleskip: this.state.subsampleskip,\n    //     searchTestRef: this.searchTestRef,\n    //     resultDataState: this.state.resultDataState,\n    //     testCommentDataState: this.state.testCommentDataState,\n    //     sampleGridDataState: this.state.sampleGridDataState,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\n    //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    //     nneedsubsample: this.props.Login.masterData\n    //         && this.props.Login.masterData.nneedsubsample\n    // }\n    // let sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\"\n    //     , \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\"\n    //     , \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\"];\n    // const filterSampleParam = {\n    //     inputListName: \"RegistrationGetSample\",\n    //     selectedObject: \"selectedSample\",\n    //     primaryKeyField: \"npreregno\",\n    //     fetchUrl: \"registration/getRegistrationSubSample\",\n    //     childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n    //     fecthInputObject: {\n    //         nflag: 2,\n    //         ntype: 2,\n    //         masterData: this.props.Login.masterData,\n    //         ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //         userinfo: this.props.Login.userInfo,\n    //         nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //         nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //         nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //         activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n    //         activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n    //     },\n    //     masterData: this.props.Login.masterData,\n    //     searchFieldList: sampleSearchField,\n    //     changeList: [\n    //         \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\",\n    //         \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\",\n    //         \"selectedTest\", \"RegistrationParameter\"\n    //     ]\n    // };\n    // let filterTestParam = {\n    //     inputListName: \"RegistrationGetTest\",\n    //     selectedObject: \"selectedTest\",\n    //     primaryKeyField: \"ntransactiontestcode\",\n    //     fetchUrl: this.getActiveTestURL(),\n    //     fecthInputObject: {\n    //         ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n    //         userinfo: this.props.Login.userInfo\n    //     },\n    //     masterData: this.props.Login.masterData,\n    //     searchFieldList: [\"sarno\", \"stestsynonym\", \"ssectionname\", \"ssamplearno\",\n    //         \"sinstrumentcatname\", \"stransdisplaystatus\", \"smethodname\", \"ssourcename\", \"scomponentname\", \"stestname\"],\n    //     changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\n    // }\n\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"registration/getRegistrationSubSample\",\n      fecthInputObject: { ...this.state.subSampleGetParam,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        searchSubSampleRef: this.searchSubSampleRef,\n        searchTestRef: this.searchTestRef,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState,\n        sampleGridDataState: this.state.sampleGridDataState\n      },\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      selectedObject: \"selectedSample\",\n      inputListName: \"AP_SAMPLE\",\n      updatedListname: \"selectedSample\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedSubSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSubSampleRef,\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"registration/getRegistrationTestSample\",\n      fecthInputObject: { ...this.state.testGetParam,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        searchSubSampleRef: this.searchSubSampleRef,\n        searchTestRef: this.searchTestRef,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState,\n        sampleGridDataState: this.state.sampleGridDataState\n      },\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      selectedObject: \"selectedSubSample\",\n      inputListName: \"AP_SUBSAMPLE\",\n      updatedListname: \"selectedSubSample\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedTest\",\n      updatedListname: \"selectedTest\",\n      clearFilter: \"no\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: \"approval/getApprovalTest\",\n      fecthInputObject: { ...this.state.testGetParam,\n        searchTestRef: this.searchTestRef,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        resultDataState: this.state.resultDataState\n      },\n      selectedObject: \"selectedTest\",\n      inputListName: \"RegistrationGetTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }]; // let editRegParam = {\n    //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     userinfo: this.props.Login.userInfo,\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     ncontrolCode: this.state.editSampleId,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\n    //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    //     nneedsubsample: this.props.Login.masterData\n    //         && this.props.Login.masterData.nneedsubsample\n    // }\n    // let editSubSampleRegParam = {\n    //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     userinfo: this.props.Login.userInfo,\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     ncontrolCode: this.state.editSampleId,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\n    //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    //     nneedsubsample: this.props.Login.masterData\n    //         && this.props.Login.masterData.nneedsubsample\n    // }\n    // const addTestParam = {\n    //     selectedsample: this.props.Login.masterData.selectedSample,\n    //     selectedsubsample: this.props.Login.masterData.selectedSubSample,\n    //     skip: this.state.skip, take: (this.state.skip + this.state.take),\n    //     userinfo: this.props.Login.userInfo,\n    //     sampleList: this.props.Login.masterData.RegistrationGetSample,\n    //     snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\n    //         [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\n    // };\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 33\n      }\n    }, this.state.layout === 1 ? /*#__PURE__*/React.createElement(TransactionListMasterJson // paneHeight={this.state.firstPane}\n    , {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedSample || sampleList,\n      selectedMaster: this.props.Login.masterData.selectedSample,\n      primaryKeyField: \"npreregno\",\n      filterColumnData: this.props.filterTransactionList,\n      getMasterDetail: this.props.getRegistrationsubSampleDetail,\n      inputParam: { ...this.state.subSampleGetParam,\n        searchTestRef: this.searchTestRef,\n        searchSubSampleRef: this.searchSubSampleRef,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        resultDataState: this.state.resultDataState\n      },\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\",\n      mainField: \"sarno\",\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      selectedListName: \"selectedSample\",\n      searchListName: \"searchedSample\",\n      searchRef: this.searchSampleRef,\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\",\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      subFields: this.state.DynamicSampleColumns // jsonField={'jsondata'}\n      //jsonDesignFields={true}\n      ,\n      needMultiSelect: true,\n      showStatusBlink: true,\n      filterParam: { ...this.state.filterSampleParam,\n        childRefs: [{\n          ref: this.searchSubSampleRef,\n          childFilteredListName: \"searchedSubSample\"\n        }, {\n          ref: this.searchTestRef,\n          childFilteredListName: \"searchedTest\"\n        }]\n      },\n      subFieldsLabel: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '',\n      childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationSampleComment\", \"selectedSubSample\", \"selectedTest\"] //, \"RegistrationParameter\"\"RegistrationTestComment\"\n      ,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.editSampleId) === -1,\n        onClick: this.editRegistration,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam: { ...this.state.editRegParam,\n            ncontrolCode: this.state.editSampleId\n          }\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_PRINTBARCODE\"\n        }),\n        controlname: \"faPrint\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\n        onClick: this.props.getPrinterComboService,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"print\",\n          ncontrolcode: this.state.printBarcodeId,\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam: { ...this.state.editRegParam,\n            ncontrolCode: this.state.editSampleId\n          }\n        }\n      }],\n      needFilter: true,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue ml-2\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REGISTER\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.preRegisterId) === -1,\n        onClick: () => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\", this.props.Login.masterData, this.props.Login.userInfo, this.state.preRegisterId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 57\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ACCEPT\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.registerId) === -1,\n        onClick: () => this.acceptRegistration(this.state.registerId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Register, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 57\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_QUARANTINE\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.quarantineId) === -1,\n        onClick: () => this.selectQuarantine(this.state.quarantineId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Quarantine, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 57\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTSAMPLE\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelSampleId) === -1,\n        onClick: () => this.cancelSampleRecords(this.state.cancelSampleId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"20\",\n        height: \"20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 57\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        onClick: () => this.onReload(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 57\n        }\n      }))),\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(RegistrationFilter, {\n          SampleType: this.state.stateSampleType || [],\n          RegistrationType: this.state.stateRegistrationType || [],\n          RegistrationSubType: this.state.stateRegistrationSubType || [],\n          userInfo: this.props.Login.userInfo || {},\n          SampleTypeValue: this.props.Login.masterData.SampleTypeValue || {},\n          RegTypeValue: this.props.Login.masterData.RegTypeValue || {},\n          RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue || {},\n          FilterStatusValue: this.props.Login.masterData.FilterStatusValue || {},\n          DesignTemplateMapping: this.props.Login.masterData.DesignTemplateMapping,\n          DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue || {},\n          FilterStatus: this.state.stateFilterStatus || [],\n          FromDate: this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date(),\n          ToDate: this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date(),\n          onSampleTypeChange: this.onSampleTypeChange,\n          onRegTypeChange: this.onRegTypeChange,\n          onRegSubTypeChange: this.onRegSubTypeChange,\n          onDesignTemplateChange: this.onDesignTemplateChange,\n          DynamicDesignMapping: this.state.stateDynamicDesign || [],\n          handleFilterDateChange: this.handleFilterDateChange,\n          onFilterChange: this.onFilterChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 70\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 41\n      }\n    }) : this.state.layout === 2 ? /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\n      ,\n      masterList: this.props.Login.masterData.searchedSubSample || subSampleList,\n      selectedMaster: this.props.Login.masterData.selectedSubSample,\n      primaryKeyField: \"ntransactionsamplecode\",\n      getMasterDetail: this.props.getRegistrationTestDetail,\n      inputParam: { ...this.state.testGetParam,\n        searchTestRef: this.searchTestRef,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        resultDataState: this.state.resultDataState\n      },\n      additionalParam: ['napprovalversioncode'],\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      mainField: \"ssamplearno\",\n      selectedListName: \"selectedSubSample\",\n      objectName: \"subsample\",\n      listName: \"IDS_SUBSAMPLE\" //jsonField={'jsondata'}\n      //jsonDesignFields={true}\n      ,\n      needValidation: true,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      subFields: this.state.DynamicSubSampleColumns,\n      searchRef: this.searchSubSampleRef,\n      skip: this.state.subsampleskip,\n      take: this.state.subsampletake,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\",\n      needMultiSelect: true,\n      selectionColorField: \"scolorhexcode\",\n      subFieldsLabel: false,\n      handlePageChange: this.handleSubSamplePageChange,\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetTest\"],\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\n        onClick: this.editSubSampleRegistration,\n        inputData: {\n          primaryKeyName: \"ntransactionsamplecode\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editSubSampleRegParam: { ...this.state.editSubSampleRegParam,\n            ncontrolCode: this.state.editSampleId\n          }\n        }\n      }],\n      needFilter: false,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 815,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDSUBSAMPLE\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.addSubSampleId) === -1,\n        onClick: () => this.addSubSample(this.state.addSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 817,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelSubSampleId) === -1,\n        onClick: () => this.cancelSubSampleRecord(this.state.cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 826,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 65\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 45\n      }\n    }) : this.state.layout === 3 ? /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth,\n      masterList: this.props.Login.masterData.searchedTest || testList,\n      selectedMaster: this.props.Login.masterData.selectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabDetailRegistration,\n      inputParam: { ...this.state.testChildGetParam,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState\n      },\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"selectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\" //jsonField={'jsondata'}\n      ,\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      subFieldsLabel: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      showStatusName: true,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: this.state.filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\" // childTabsKey={[\"RegistrationTestComment\"]}\n      ,\n      childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\"],\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"RegistrationGetSample\",\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\" // selectionList=\n      // actionIcons={\n      //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\n      //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\n      //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\n      // }\n      ,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1,\n        onClick: () => this.props.addMoreTest({ ...this.state.addTestParam,\n          skip: this.state.skip,\n          take: this.state.skip + this.state.take\n        }, this.state.addTestId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 899,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 69\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1,\n        onClick: () => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 912,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 919,\n          columnNumber: 69\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843,\n        columnNumber: 49\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927,\n        columnNumber: 37\n      }\n    }, this.state.layout === 1 ? /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: \"detailed-inner\",\n      vertical: true,\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      onSecondaryPaneSizeChange: this.verticalPaneSizeChange,\n      secondaryInitialSize: 400,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 929,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 937,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 938,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 940,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 948,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 73\n      }\n    }, \"Sub Sample\"))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\n      ,\n      masterList: this.props.Login.masterData.searchedSubSample || subSampleList,\n      selectedMaster: this.props.Login.masterData.selectedSubSample,\n      primaryKeyField: \"ntransactionsamplecode\",\n      getMasterDetail: this.props.getRegistrationTestDetail,\n      inputParam: { ...this.state.testGetParam,\n        searchTestRef: this.searchTestRef,\n        searchSubSampleRef: this.searchSubSampleRef,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        resultDataState: this.state.resultDataState\n      },\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedSubSample\",\n      searchRef: this.searchSubSampleRef,\n      filterParam: { ...this.state.filterSubSampleParam,\n        childRefs: [{\n          ref: this.searchTestRef,\n          childFilteredListName: \"searchedTest\"\n        }]\n      },\n      additionalParam: ['napprovalversioncode'],\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      mainField: \"ssamplearno\",\n      selectedListName: \"selectedSubSample\",\n      objectName: \"subsample\",\n      listName: \"IDS_SUBSAMPLE\" // jsonField={'jsondata'}\n      //jsonDesignFields={true}\n      ,\n      needValidation: true,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      subFields: this.state.DynamicSubSampleColumns,\n      skip: this.state.subsampleskip,\n      take: this.state.subsampletake,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\",\n      needMultiSelect: true,\n      selectionColorField: \"scolorhexcode\",\n      subFieldsLabel: false,\n      handlePageChange: this.handleSubSamplePageChange,\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetTest\"],\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\n        onClick: this.editSubSampleRegistration,\n        inputData: {\n          primaryKeyName: \"ntransactionsamplecode\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editSubSampleRegParam: { ...this.state.editSubSampleRegParam,\n            ncontrolCode: this.state.editSampleId\n          }\n        }\n      }],\n      needFilter: false,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1027,\n          columnNumber: 81\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDSUBSAMPLE\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.addSubSampleId) === -1,\n        onClick: () => this.addSubSample(this.state.addSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1029,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1036,\n          columnNumber: 89\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelSubSampleId) === -1,\n        onClick: () => this.cancelSubSampleRecord(this.state.cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1038,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1045,\n          columnNumber: 89\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954,\n        columnNumber: 69\n      }\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1054,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1056,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1057,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 77\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1060,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1063,\n        columnNumber: 77\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth,\n      masterList: this.props.Login.masterData.searchedTest || testList,\n      selectedMaster: this.props.Login.masterData.selectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabDetailRegistration,\n      inputParam: { ...this.state.testChildGetParam,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState\n      },\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"selectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\" // jsonField={'jsondata'}\n      ,\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      subFieldsLabel: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      showStatusName: true,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: this.state.filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\" // childTabsKey={[\"RegistrationTestComment\"]}\n      ,\n      childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\"],\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"RegistrationGetSample\",\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\" // selectionList=\n      // actionIcons={\n      //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\n      //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\n      //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\n      // }\n      ,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1131,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1,\n        onClick: () => this.props.addMoreTest({ ...this.state.addTestParam,\n          skip: this.state.skip,\n          take: this.state.skip + this.state.take\n        }, this.state.addTestId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1133,\n          columnNumber: 89\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1143,\n          columnNumber: 93\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1,\n        onClick: () => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1146,\n          columnNumber: 89\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1153,\n          columnNumber: 93\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1077,\n        columnNumber: 73\n      }\n    })))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showSample === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1165,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1166,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1167,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1168,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1169,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1170,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1171,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1172,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173,\n        columnNumber: 85\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        \"float\": \"right\",\n        \"margin-right\": \"6px\"\n      },\n      onClick: () => this.showTest(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1181,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1184,\n        columnNumber: 85\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1188,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1189,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: this.state.initialVerticalWidth\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1190,\n        columnNumber: 85\n      }\n    }, this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n      data: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 ? this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {},\n      SingleItem: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ? this.state.SingleItem : [],\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1192,\n        columnNumber: 93\n      }\n    }) : /*#__PURE__*/React.createElement(SampleGridTab, {\n      userInfo: this.props.Login.masterData.userInfo || {},\n      GridData: this.props.Login.masterData.selectedSample || [],\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleInfoDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      primaryKeyField: \"npreregno\",\n      expandField: \"expanded\",\n      screenName: \"IDS_SAMPLEINFO\" //jsonField={\"jsondata\"}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1203,\n        columnNumber: 93\n      }\n    }))))))))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1290,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1291,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1292,\n        columnNumber: 57\n      }\n    }, this.state.showSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS',\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295,\n        columnNumber: 65\n      }\n    }) : this.state.showTest ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS',\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.ontestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1299,\n        columnNumber: 69\n      }\n    }) // <Card>\n\n    /* <Card.Header style={{ \"borderBottom\": \"0px\", \"padding-top\": \"1px\" }}>\r\n        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n            <h4 className=\"card-title\">Parameter Results</h4>\r\n        </span>\r\n    </Card.Header> */\n    // </Card>\n    // : this.state.showSubSample ?\n    //     <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'}\n    //         tabDetail={this.subsampleTabDetail()}\n    //         onTabChange={this.onSubSampleTabChange} />\n    //     : \"\"}\n    : \"\")))) : this.state.layout === 2 ? /*#__PURE__*/React.createElement(ScrollBar, {\n      ref: ref => {\n        this._scrollBarRef = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1323,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1324,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1326,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: \"detailed-inner\",\n      vertical: true,\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      secondaryInitialSize: 400,\n      onSecondaryPaneSizeChange: this.verticalPaneSizeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1327,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1337,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1338,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1339,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1340,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1341,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1342,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1343,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1344,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1345,\n        columnNumber: 105\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showTestAndSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1347,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1350,\n        columnNumber: 105\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1355,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth,\n      masterList: this.props.Login.masterData.searchedTest || testList,\n      selectedMaster: this.props.Login.masterData.selectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabDetailRegistration,\n      inputParam: { ...this.state.testChildGetParam,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState\n      },\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"selectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\" //  jsonField={'jsondata'}\n      ,\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      subFieldsLabel: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      showStatusName: true,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: this.state.filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\" // childTabsKey={[\"RegistrationTestComment\"]}\n      ,\n      childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\"],\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"RegistrationGetSample\",\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\" // selectionList=\n      // actionIcons={\n      //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\n      //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\n      //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\n      // }\n      ,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1411,\n          columnNumber: 113\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1,\n        onClick: () => this.props.addMoreTest({ ...this.state.addTestParam,\n          skip: this.state.skip,\n          take: this.state.skip + this.state.take\n        }, this.state.addTestId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1413,\n          columnNumber: 117\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1423,\n          columnNumber: 121\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1,\n        onClick: () => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1426,\n          columnNumber: 117\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1433,\n          columnNumber: 121\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1356,\n        columnNumber: 101\n      }\n    })))))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showSample === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1447,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1448,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1449,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1450,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1451,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1452,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1453,\n        columnNumber: 97\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showTestAndSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1455,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1457,\n        columnNumber: 97\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1461,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1462,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: this.state.initialVerticalWidth\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1463,\n        columnNumber: 97\n      }\n    }, this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n      data: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 ? this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {},\n      SingleItem: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ? this.state.SingleItem : [],\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1466,\n        columnNumber: 105\n      }\n    }) : /*#__PURE__*/React.createElement(SampleGridTab, {\n      userInfo: this.props.Login.masterData.userInfo || {},\n      GridData: this.props.Login.masterData.selectedSample || [],\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleInfoDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      primaryKeyField: \"npreregno\",\n      expandField: \"expanded\",\n      screenName: \"IDS_SAMPLEINFO\" //  jsonField={\"jsondata\"}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1476,\n        columnNumber: 105\n      }\n    }))))))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1499,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1500,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1501,\n        columnNumber: 77\n      }\n    }, this.state.showSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS',\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1503,\n        columnNumber: 85\n      }\n    }) : this.state.showTest ?\n    /*#__PURE__*/\n    // <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'} tabDetail={this.testTabDetail()} onTabChange={this.ontestTabChange} />\n    React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1506,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1507,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1508,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1509,\n        columnNumber: 101\n      }\n    }, \"Parameter Results\"))), /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS',\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.ontestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1512,\n        columnNumber: 93\n      }\n    })) : \"\")))))))) : this.state.layout === 3 ? /*#__PURE__*/React.createElement(React.Fragment, null, this.state.showSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS',\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1529,\n        columnNumber: 61\n      }\n    }) : this.state.showTest ? /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1533,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1534,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1535,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1536,\n        columnNumber: 77\n      }\n    }, \"Parameter Results\"))), /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS',\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.ontestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1539,\n        columnNumber: 69\n      }\n    })) : \"\") : \"\")))))), this.props.Login.openPortal ? /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1554,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PreRegisterSlideOutModal, {\n      postParamList: this.postParamList,\n      PrevoiusLoginData: this.PrevoiusLoginData,\n      closeModal: this.closeModal,\n      operation: \"create\",\n      screenName: \"IDS_REGISTRATION\",\n      onSaveClick: this.onSaveClick,\n      validateEsign: this.validateEsign,\n      updateStore: this.props.updateStore,\n      comboComponents: this.state.comboComponents,\n      withoutCombocomponent: this.state.withoutCombocomponent,\n      userRoleControlRights: this.state.userRoleControlRights,\n      fromDate: this.fromDate,\n      toDate: this.toDate //  specBasedComponent={this.state.specBasedComponent}\n      ,\n      mandatoryFields: [{\n        \"idsName\": \"IDS_PRODUCTCATEGORY\",\n        \"dataField\": \"nproductcatcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCTNAME\",\n        \"dataField\": \"sproductname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1555,\n        columnNumber: 29\n      }\n    })) : \"\", this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal //|| this.props.Login.loadEsign}\n      ,\n      closeModal: this.props.Login.loadRegSubSample || this.props.Login.loadFile || this.props.Login.loadChildTest ? this.closeChildModal : this.closeModal,\n      size: this.props.Login.parentPopUpSize,\n      loginoperation: this.props.Login.loadPrinter ? true : false,\n      buttonLabel: this.props.Login.loadPrinter ? \"print\" : undefined,\n      operation: this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.childoperation : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.loadTest || this.props.Login.loadFile ? this.props.Login.ChildscreenName : this.props.Login.screenName,\n      esign: this.props.Login.loadEsign,\n      innerPopup: this.props.Login.loadComponent,\n      onSaveClick: this.props.Login.loadRegSubSample ? this.onSaveSubSampleClick : this.props.Login.loadFile ? this.onSaveFileClick : this.props.Login.loadPrinter ? this.onSavePrinterClick : this.props.Login.loadChildTest ? this.onSaveChildTestClick : this.onSaveClick,\n      validateEsign: this.validateEsign,\n      showSaveContinue: this.props.Login.showSaveContinue,\n      selectedRecord: !this.props.Login.loadEsign ? this.props.Login.loadComponent ? this.state.selectComponent : this.props.Login.loadPrinter ? this.state.selectedPrinterData : this.props.Login.loadTest ? this.state.selectedTestData : this.props.Login.loadFile ? this.state.selectedFile : this.props.Login.loadPoolSource ? this.state.selectedSourceData : this.state.selectedRecord : this.state.selectedRecord,\n      mandatoryFields: this.mandatoryList(this.props.Login.loadPreregister, this.props.Login.loadPrinter, this.props.Login.loadFile, this.props.Login.loadChildTest, this.props.Login.loadRegSubSample),\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1605,\n          columnNumber: 29\n        }\n      }) : this.props.Login.loadRegSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n        editfield: this.props.Login.masterData.DynamicDesign && JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value),\n        Component: this.props.Login.lstComponent || [],\n        selectComponent: this.state.selectedRecord,\n        templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        handleDateChange: this.handleDateSubSampleChange,\n        onInputOnChange: this.onInputOnSubSampleChange,\n        onNumericInputChange: this.onNumericInputSubSampleChange,\n        comboData: this.props.Login.regSubSamplecomboData,\n        onComboChange: this.onComboSubSampleChange,\n        onComponentChange: this.onComponentChange,\n        TestCombined: this.props.Login.TestCombined || [],\n        TestChange: this.onComboChange,\n        selectedTestData: this.state.selectedRecord,\n        childoperation: this.props.Login.operation,\n        specBasedComponent: this.props.Login.specBasedComponent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1611,\n          columnNumber: 33\n        }\n      }) : this.props.Login.loadFile ? /*#__PURE__*/React.createElement(AddFile, {\n        selectedFile: this.state.selectedFile || {},\n        onInputOnChange: this.onInputOnChange,\n        onDrop: this.onDropComponentFile,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        maxSize: 20,\n        maxFiles: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1633,\n          columnNumber: 63\n        }\n      }) : this.props.Login.loadPrinter ? /*#__PURE__*/React.createElement(AddPrinter, {\n        printer: this.props.Login.printer,\n        selectedPrinterData: this.state.selectedPrinterData,\n        PrinterChange: this.PrinterChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1643,\n          columnNumber: 41\n        }\n      }) : this.props.Login.loadChildTest ? /*#__PURE__*/React.createElement(AddTest, {\n        TestCombined: this.props.Login.availableTest,\n        selectedTestData: this.state.selectedRecord,\n        TestChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1647,\n          columnNumber: 79\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1579,\n        columnNumber: 21\n      }\n    }), this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  showSampleInfo() {\n    this.setState({\n      showSample: true,\n      showTest: false\n    });\n  }\n\n  showSample() {\n    this.setState({\n      showSample: true,\n      showSubSample: false,\n      showTest: false\n    });\n  }\n\n  showTest() {\n    this.setState({\n      showSample: false,\n      showSubSample: false,\n      showTest: true\n    });\n  }\n\n  showSubSample() {\n    this.setState({\n      showSample: false,\n      showTest: false,\n      showSubSample: !this.state.showSubSample\n    });\n  }\n\n  showTestDetails() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        showSample: !this.state.showSample,\n        showTest: !this.state.showTest\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  checkPreregisterAndQuarentine(sample) {\n    return sample.ntransactionstatus === transactionStatus.PREREGISTER || sample.ntransactionstatus === transactionStatus.QUARANTINE;\n  }\n\n  checkPreregisterRecordQuarantine(sample) {\n    return sample.ntransactionstatus === transactionStatus.PREREGISTER;\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.columnList !== previousProps.Login.columnList) {\n      this.setState({\n        columnList: this.props.Login.columnList,\n        childColumnList: this.props.Login.childColumnList,\n        withoutCombocomponent: this.props.Login.withoutCombocomponent,\n        comboComponents: this.props.Login.comboComponents\n      });\n    }\n\n    if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\n      this.setState({\n        regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\n        regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\n        regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\n      });\n    }\n\n    if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\n      this.setState({\n        showSaveContinue: this.props.Login.showSaveContinue\n      });\n    }\n\n    if (this.props.Login !== previousProps.Login) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    } else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\n      this.setState({\n        selectedPrinterData: this.props.Login.selectedPrinterData\n      });\n    } else if (this.props.Login.loadFile !== previousProps.Login.loadFile && this.props.Login.loadFile === false) {\n      this.setState({\n        selectedFile: undefined\n      });\n    } else if (this.props.Login.selectedFilter !== previousProps.Login.selectedFilter) {\n      this.setState({\n        selectedFilter: this.props.Login.selectedFilter\n      });\n    }\n\n    if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\n      this.setState({\n        popUptestDataState: this.props.Login.popUptestDataState\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      const cancelId = controlMap.has(\"CancelTest\") ? controlMap.get(\"CancelTest\").ncontrolcode : -1;\n      const preRegisterId = controlMap.has(\"AddPreregister\") ? controlMap.get(\"AddPreregister\").ncontrolcode : -1;\n      const registerId = controlMap.has(\"RegisterAccept\") ? controlMap.get(\"RegisterAccept\").ncontrolcode : -1;\n      const editSampleId = controlMap.has(\"EditSample\") ? controlMap.get(\"EditSample\").ncontrolcode : -1;\n      const quarantineId = controlMap.has(\"RegisterQuarantine\") ? controlMap.get(\"RegisterQuarantine\").ncontrolcode : -1;\n      const addTestId = controlMap.has(\"AddNewTest\") ? controlMap.get(\"AddNewTest\").ncontrolcode : -1;\n      const printBarcodeId = controlMap.has(\"PrintBarcode\") ? controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\n      const cancelSampleId = controlMap.has(\"CancelReject\") ? controlMap.get(\"CancelReject\").ncontrolcode : -1;\n      const addSubSampleId = controlMap.has(\"AddSubSample\") ? controlMap.get(\"AddSubSample\").ncontrolcode : -1;\n      const editSubSampleId = controlMap.has(\"EditSubSample\") ? controlMap.get(\"EditSubSample\").ncontrolcode : -1;\n      const cancelSubSampleId = controlMap.has(\"CancelSubSample\") ? controlMap.get(\"CancelSubSample\").ncontrolcode : -1;\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        cancelId,\n        preRegisterId,\n        registerId,\n        editSampleId,\n        quarantineId,\n        addTestId,\n        printBarcodeId,\n        cancelSampleId,\n        addSubSampleId,\n        editSubSampleId,\n        cancelSubSampleId\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      let {\n        skip,\n        take,\n        testskip,\n        testtake,\n        subsampleskip,\n        subsampletake,\n        testCommentDataState,\n        resultDataState,\n        sampleGridDataState,\n        popUptestDataState,\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        SingleItem,\n        testMoreField,\n        testListColumns,\n        SubSampleDynamicGridItem,\n        SubSampleDynamicGridMoreField,\n        SubSampleSingleItem,\n        sampleSearchField,\n        subsampleSearchField,\n        testSearchField,\n        testAttachmentDataState,\n        sampleCommentDataState,\n        sampledateconstraints,\n        subsampledateconstraints\n      } = this.state;\n\n      if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n        const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n        DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\n        DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n        DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n        DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n        DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n        SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\n        SubSampleDynamicGridItem = dynamicColumn.subsamplegriditem ? dynamicColumn.subsamplegriditem : [];\n        SubSampleDynamicGridMoreField = dynamicColumn.subsamplegridmoreitem ? dynamicColumn.subsamplegridmoreitem : [];\n        SubSampleSingleItem = dynamicColumn.subsampledisplayfields ? dynamicColumn.subsampledisplayfields : []; //console.log(\"Subsample\",SubSampleSingleItem)\n\n        testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\n        testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n        sampleSearchField = dynamicColumn.samplesearchfields ? dynamicColumn.samplesearchfields : [];\n        subsampleSearchField = dynamicColumn.subsamplesearchfields ? dynamicColumn.subsamplesearchfields : [];\n        testSearchField = dynamicColumn.testsearchfields ? dynamicColumn.testsearchfields : [];\n        sampledateconstraints = dynamicColumn.sampledateconstraints || [];\n        subsampledateconstraints = dynamicColumn.subsampledateconstraints || []; // specBasedComponent = true;\n      }\n\n      let showSample = this.props.Login.showSample === this.state.showTest || this.state.showSample;\n      let showTest = showSample ? false : true;\n      let stateSampleType = this.state.stateSampleType;\n      let stateRegistrationType = this.state.stateRegistrationType;\n      let stateRegistrationSubType = this.state.stateRegistrationSubType;\n      let stateFilterStatus = this.state.stateFilterStatus;\n      let stateDynamicDesign = this.state.stateDynamicDesign;\n\n      if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\n        const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", false);\n        stateSampleType = sampleTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.RegistrationType !== previousProps.Login.masterData.RegistrationType) {\n        const registrationTypeMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", \"ascending\", false);\n        stateRegistrationType = registrationTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n        const registrationSubTypeMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", false);\n        stateRegistrationSubType = registrationSubTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.FilterStatus !== previousProps.Login.masterData.FilterStatus) {\n        const filterStatusMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"stransdisplaystatus\", \"nsorter\", \"ascending\", false);\n        stateFilterStatus = filterStatusMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\n        const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\", \"sregtemplatename\", undefined, undefined, false);\n        stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\");\n      } // const stateSampleType = sampleTypeMap.get(\"OptionList\");\n\n\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      subsampleskip = this.props.Login.subsampleskip === undefined ? subsampleskip : this.props.Login.subsampleskip;\n      subsampletake = this.props.Login.subsampletake || subsampletake;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      }\n\n      if (this.props.Login.testAttachmentDataState && this.props.Login.testAttachmentDataState !== previousProps.Login.testAttachmentDataState) {\n        testAttachmentDataState = this.props.Login.testAttachmentDataState;\n      }\n\n      if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\n        sampleGridDataState = this.props.Login.sampleGridDataState;\n      }\n\n      if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\n        popUptestDataState = this.props.Login.popUptestDataState;\n      }\n\n      const testGetParam = {\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        //searchTestRef: this.searchTestRef,\n        // testskip: testskip,\n        //subsampleskip: subsampleskip,\n        // resultDataState: resultDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode\n      };\n      const testChildGetParam = {\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n        ntransactionsamplecode: this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        // resultDataState: resultDataState,\n        // testCommentDataState: testCommentDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode\n      };\n      const subSampleGetParam = {\n        masterData: this.props.Login.masterData,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        // testskip: testskip,\n        // subsampleskip: subsampleskip,\n        // searchTestRef: this.searchTestRef,\n        //resultDataState: resultDataState,\n        // testCommentDataState: testCommentDataState,\n        //sampleGridDataState: sampleGridDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n        nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample\n      };\n      const filterSampleParam = {\n        inputListName: \"RegistrationGetSample\",\n        selectedObject: \"selectedSample\",\n        primaryKeyField: \"npreregno\",\n        fetchUrl: \"registration/getRegistrationSubSample\",\n        //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n        fecthInputObject: {\n          //nflag: 2,\n          // ntype: 2,\n          masterData: this.props.Login.masterData,\n          ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n          nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n          ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n          nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample,\n          checkBoxOperation: 3\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: sampleSearchField,\n        changeList: [\"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"]\n      };\n      const filterSubSampleParam = {\n        inputListName: \"RegistrationGetSubSample\",\n        selectedObject: \"selectedSubSample\",\n        primaryKeyField: \"ntransactionsamplecode\",\n        fetchUrl: \"registration/getRegistrationTest\",\n        //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n        fecthInputObject: {\n          //nflag: 2,\n          // ntype: 2,\n          masterData: this.props.Login.masterData,\n          //  ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n          nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n          ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n          nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample,\n          checkBoxOperation: 3,\n          npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\")\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: subsampleSearchField,\n        changeList: [\"RegistrationGetTest\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"]\n      };\n      const filterTestParam = {\n        inputListName: \"RegistrationGetTest\",\n        selectedObject: \"selectedTest\",\n        primaryKeyField: \"ntransactiontestcode\",\n        fetchUrl: this.getActiveTestURL(),\n        fecthInputObject: {\n          ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n          nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample,\n          checkBoxOperation: 3,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: testSearchField,\n        changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\n      }; // let postParamList = [\n      //     {\n      //         filteredListName: \"searchedSample\",\n      //         clearFilter: \"no\",\n      //         searchRef: this.searchSampleRef,\n      //         primaryKeyField: \"npreregno\",\n      //         fetchUrl: \"registration/getRegistrationSubSample\",\n      //         fecthInputObject: subSampleGetParam,\n      //        // childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n      //         selectedObject: \"selectedSample\",\n      //         inputListName: \"AP_SAMPLE\",\n      //         updatedListname: \"selectedSample\",\n      //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\n      //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\n      //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n      //     }\n      //     , {\n      //         filteredListName: \"searchedTest\",\n      //         updatedListname: \"selectedTest\",\n      //         clearFilter: \"no\",\n      //         searchRef: this.searchTestRef,\n      //         primaryKeyField: \"ntransactiontestcode\",\n      //         fetchUrl: \"approval/getApprovalTest\",\n      //         fecthInputObject: testGetParam,\n      //         selectedObject: \"selectedTest\",\n      //         inputListName: \"RegistrationGetTest\",\n      //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\n      //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\n      //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n      //     }\n      // ];\n\n      const editRegParam = {\n        nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        // ncontrolCode: this.state.editSampleId,\n        ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n        nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample\n      };\n      const editSubSampleRegParam = {\n        nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        //ncontrolCode: this.state.editSampleId,\n        ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n        nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample\n      };\n      const addTestParam = {\n        selectedSample: this.props.Login.masterData.selectedSample,\n        selectedSubSample: this.props.Login.masterData.selectedSubSample,\n        // skip: skip, take: (skip + take),\n        userinfo: this.props.Login.userInfo,\n        sampleList: this.props.Login.masterData.RegistrationGetSample,\n        snspecsampletypecode: this.props.Login.masterData.selectedSubSample && [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\n      };\n      const breadCrumbobj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      this.breadCrumbData = [{\n        \"label\": \"IDS_FROM\",\n        \"value\": breadCrumbobj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": breadCrumbobj.breadCrumbto\n      }, {\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\n      }, {\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\n      }, {\n        \"label\": \"IDS_REGSUBTYPE\",\n        \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n      }, {\n        \"label\": \"IDS_DESIGNTEMPLATE\",\n        \"value\": this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.sregtemplatename\n      }, {\n        \"label\": \"IDS_FILTERSTATUS\",\n        \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\n      }];\n      this.setState({\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        SingleItem,\n        testMoreField,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        testListColumns,\n        stateSampleType,\n        stateRegistrationType,\n        stateRegistrationSubType,\n        stateFilterStatus,\n        stateDynamicDesign,\n        popUptestDataState,\n        showSample,\n        showTest,\n        skip,\n        take,\n        testskip,\n        subsampleskip,\n        subsampletake,\n        testtake,\n        testCommentDataState,\n        testAttachmentDataState,\n        resultDataState,\n        sampleGridDataState,\n        SubSampleDynamicGridItem,\n        SubSampleDynamicGridMoreField,\n        SubSampleSingleItem,\n        testGetParam,\n        testChildGetParam,\n        subSampleGetParam,\n        filterSampleParam,\n        filterTestParam,\n        editRegParam,\n        editSubSampleRegParam,\n        addTestParam,\n        sampleSearchField,\n        subsampleSearchField,\n        testSearchField,\n        filterSubSampleParam,\n        sampledateconstraints,\n        subsampledateconstraints\n      });\n    }\n  }\n\n  onUpdateSubSampleRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      ntype: 5,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ntransactionsamplecode: String(this.state.selectedRecord.ntransactionsamplecode),\n      ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample,\n      checkBoxOperation: 3,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistrationSubSample(this.state.selectedRecord, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone);\n    inputData[\"registrationsample\"] = param.sampleRegistration;\n    inputData[\"SubSampleDateList\"] = param.dateList;\n    inputData['subsampledateconstraints'] = this.state.subsampledateconstraints;\n    inputData[\"flag\"] = flag === undefined ? 1 : flag;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n    inputData[\"checkBoxOperation\"] = 3;\n    inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n    inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"SubSampleRegistration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      action: 'editSubSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      testAttachmentDataState: this.state.testAttachmentDataState // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.onUpdateSubSampleRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getSampleTypeChange,\n  getRegTypeChange,\n  getRegSubTypeChange,\n  getAttachmentCombo,\n  viewAttachment,\n  getCommentsCombo,\n  filterTransactionList,\n  validateEsignCredential,\n  getSampleChildTabDetail,\n  getTestChildTabDetailRegistration,\n  ReloadData,\n  showUnderDevelopment,\n  getPreviewTemplate,\n  getChildValues,\n  getRegistrationSample,\n  getRegistrationsubSampleDetail,\n  getRegistrationTestDetail,\n  acceptRegistration,\n  addMoreTest,\n  createRegistrationTest,\n  getEditRegistrationComboService,\n  cancelTestAction,\n  cancelSampleAction,\n  addsubSampleRegistration,\n  saveSubSample,\n  getEditSubSampleComboService,\n  onUpdateSubSampleRegistration,\n  cancelSubSampleAction,\n  preregRecordToQuarantine,\n  componentTest\n})(injectIntl(Registration));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/Registration.jsx"],"names":["React","Component","connect","showUnderDevelopment","callService","crudMaster","updateStore","getSampleTypeChange","getRegTypeChange","getRegSubTypeChange","getAttachmentCombo","viewAttachment","getCommentsCombo","filterTransactionList","validateEsignCredential","ReloadData","getSampleChildTabDetail","getTestChildTabDetailRegistration","getPreviewTemplate","getChildValues","getRegistrationSample","getRegistrationsubSampleDetail","getRegistrationTestDetail","acceptRegistration","addMoreTest","createRegistrationTest","getEditRegistrationComboService","cancelTestAction","cancelSampleAction","addsubSampleRegistration","saveSubSample","getEditSubSampleComboService","onUpdateSubSampleRegistration","cancelSubSampleAction","preregRecordToQuarantine","componentTest","Button","Card","Col","Nav","Row","toast","SlideOutModal","getControlMap","showEsign","sortData","constructOptionList","onDropAttachFileList","deleteAttachmentDropZone","convertDateTimetoString","comboChild","RegistrationFilter","Esign","injectIntl","ProductList","DEFAULT_RETURN","SplitterLayout","AddTest","designProperties","RegistrationType","transactionStatus","BreadcrumbComponent","ScrollBar","ListWrapper","TransactionListMasterJson","FontAwesomeIcon","faEye","faPlus","faSync","ContentPanel","SampleInfoView","CustomTabs","ConfirmMessage","AddPrinter","SampleGridTab","AddFile","Attachments","Comments","onSaveSampleComments","onSaveTestComments","onSaveSampleAttachment","onSaveTestAttachment","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","RegistrationResultTab","PortalModal","PreRegisterSlideOutModal","PerfectScrollbar","checkTestPresent","getRegistrationSubSample","AddSubSample","Registration","constructor","props","onReload","obj","Login","masterData","RealFromDate","RealToDate","userInfo","fromDate","toDate","RealSampleTypeValue","RealRegTypeValue","RealRegSubTypeValue","RealFilterStatusValue","activeSampleTab","activeTestTab","SampleTypeValue","RegTypeValue","RegSubTypeValue","FilterStatusValue","FromDate","ToDate","inputData","npreregno","nsampletypecode","nregtypecode","nregsubtypecode","nfilterstatus","ntransactionstatus","userinfo","flag","ndesigntemplatemappingcode","registrationTemplate","nneedsubsample","checkBoxOperation","inputParam","searchSubSampleRef","searchSampleRef","searchTestRef","selectedFilter","state","warn","intl","formatMessage","id","onFilterSubmit","fromdate","todate","RealDesignTemplateMappingValue","DesignTemplateMappingValue","paneSizeChange","d","setState","splitChangeWidthPercentage","verticalPaneSizeChange","val","initialVerticalWidth","handleDateSubSampleChange","dateValue","dateName","selectedRecord","onComponentChange","comboData","fieldName","label","item","nspecsampletypecode","specBasedComponent","Conponent","onInputOnSubSampleChange","event","target","type","name","checked","value","onComboSubSampleChange","control","customName","parentList","childComboList","childColumnList","comboName","inputParem","child","source","primarykeyField","valuemember","nameofdefaultcomp","length","regSubSamplecomboComponents","map","columnList","regSubSamplewithoutCombocomponent","regSubSamplecomboData","onNumericInputSubSampleChange","onSaveSubSampleClick","saveType","formRef","operation","objSubSample","defaulttimezone","sampleList","searchedSample","undefined","RegistrationGetSample","slice","skip","take","selectedSample","findSampleAlloSpec","Set","nallottedspeccode","findSampleSpec","dateList","SubSampleTemplate","jsondata","row","children","column","component","hasOwnProperty","componentrow","inputtype","mandatory","Date","loadcurrentdate","timezone","push","selectedTestData","selectedTestArray","subsampledateconstraints","join","postParamList","mandatoryList","prereg","printer","file","childtest","regSubSample","deleteAttachment","selectedFile","actionType","onSaveChildTestClick","selectedSubsample","selectedSubSample","ntransactionsamplecode","x","TestGroupTest","ntestgrouptestcode","RegistrationSample","ntype","sample","classUrl","methodUrl","responseKeyList","controlMap","nformcode","ncontrolCode","updateInfo","typeName","data","loadEsign","screenData","getRegistrationComboService","ScreenName","primaryKeyField","editId","ndesigntemplatemappingcodefilter","withoutCombocomponent","Layout","comboComponents","mapOfFilterRegData","parseInt","sregsubtypename","info","retunObj","childList","childData","index","findIndex","y","handlePageChange","e","setTimeout","_scrollBarRef","updateScroll","handleTestPageChange","testskip","testtake","handleSubSamplePageChange","subsampleskip","subsampletake","openFilter","showFilter","onFilterChange","labelname","onSampleTabChange","tabProps","screenName","onSubSampleTabChange","getSubSampleChildTabDetail","ontestTabChange","selectedTest","ntransactiontestcode","String","resultDataState","testCommentDataState","testAttachmentDataState","onDropComponentFile","attachedFiles","maxSize","handleFilterDateChange","onUpdateRegistrationConfirm","showAlert","onUpdateRegistration","regEditParam","confirmAlert","showConfirmAlert","regDateEditConfirmMessage","confirmMessage","confirm","booleanFlag","insertRegistration","closeFilter","booleanmanuf","PLASMA_POOL","loadFile","ChildscreenName","childoperation","parentPopUpSize","onNumericInputChange","selectComponent","onSampleTypeChange","Map","ConfirmComponent","getComponentfromJava","onRegTypeChange","registerId","acceptList","every","checkPreregisterAndQuarentine","RegistrationGetTest","action","acceptRegistrationConfirm","userRoleControlRights","openModal","selectQuarantine","quarantineId","splice","quarentineList","checkPreregisterRecordQuarantine","onRegSubTypeChange","onDesignTemplateChange","onInputOnChange","onComboChange","PrinterChange","selectedPrinterData","closeChildModal","loadRegSubSample","showSaveContinue","loadChildTest","PopUpLabel","closeModal","loadPreregister","openChildModal","pare","loadPrinter","openPortal","subSampleDataGridList","insertSourcePreregno","onSaveClick","onSavePrinterClick","insertlist","displayName","insertPrinterPreregno","sprintername","npreregno1","ncontrolcode","onSaveFileClick","acceptedFiles","sfilename","formData","FormData","forEach","append","JSON","stringify","ntemplatemanipulationcode","ImportFile","sampleInfoDataStateChange","sampleGridDataState","dataState","dataStateChange","sourceDataState","testdataStateChange","popUptestDataState","testStateChange","testDataState","sampleTabDetail","tabMap","selectedSampleList","set","onAttachmentSaveClick","RegistrationAttachment","attachmentskip","attachmenttake","settings","esignRights","masterList","onCommentsSaveClick","RegistrationSampleComment","testDataStateChange","has","get","subsampleTabDetail","testTabDetail","testTabMap","testList","selectedTestList","test","RegistrationTestAttachment","RegistrationTestComment","saveParam","isTestComment","searchedTest","selectedMaster","cancelSubSampleRecord","controlcode","searchedSubSample","RegistrationGetSubSample","transValidation","transactionValidation","stransdisplaystatus","cancelRecord","addSubSample","addSubSampleList","findTransactionStatus","PREREGISTER","findComponentReqSpec","ncomponentrequired","findSampleSpectemplate","regchildColumnList","handleEditDateChange","onNumericInputEditChange","cancelSampleRecords","cancelRejectSamplesList","transactionstatus","ntransstatus","translist","sam","selectdata","check","sam1","includes","validateEsign","sreason","password","validateEsignforRegistration","editRegistration","editSubSampleRegistration","regSubSamplechildColumnList","mastertoedit","createRef","PrevoiusLoginData","breadCrumbData","layout","masterStatus","error","showAccordian","filterCollection","breadCrumb","showTest","showSample","showSubSample","sampleSearchFied","subsampleSearchFied","testSearchFied","DynamicSampleColumns","group","field","sampleCommentsDataState","historyDataState","grandparentheight","regparentSubSampleColumnList","DynamicSubSampleColumns","DynamicTestColumns","DynamicGridItem","DynamicGridMoreField","SingleItem","testMoreField","testListColumns","SubSampleDynamicGridItem","SubSampleDynamicGridMoreField","SubSampleSingleItem","cancelId","preRegisterId","editSampleId","addTestId","printBarcodeId","cancelSampleId","addSubSampleId","editSubSampleId","cancelSubSampleId","stateSampleType","stateRegistrationType","stateRegistrationSubType","stateFilterStatus","stateDynamicDesign","testGetParam","testChildGetParam","subSampleGetParam","filterSampleParam","filterTestParam","editRegParam","editSubSampleRegParam","addTestParam","sampleSearchField","subsampleSearchField","testSearchField","filterSubSampleParam","getDerivedStateFromProps","getActiveTestURL","url","activeTestKey","gridViewChange","render","subSampleList","filteredListName","clearFilter","searchRef","fetchUrl","fecthInputObject","childRefs","ref","childFilteredListName","selectedObject","inputListName","updatedListname","unchangeList","ALL","FilterStatus","title","controlname","objectName","hidden","indexOf","onClick","primaryKeyName","getPrinterComboService","DesignTemplateMapping","split","setting","display","background","borderBottom","marginTop","float","height","gridfillingColumn","showTestAndSample","loadComponent","loadTest","loadSource","loadPoolSource","selectedSourceData","DynamicDesign","parse","lstComponent","timeZoneList","defaultTimeZone","TestCombined","availableTest","showSampleInfo","showTestDetails","QUARANTINE","temparray","option","LABEL","slanguagetypecode","VALUE","componentDidUpdate","previousProps","Object","values","sampleCommentDataState","sampledateconstraints","dynamicColumn","samplelistitem","subsamplelistitem","testlistitem","samplegriditem","samplegridmoreitem","sampledisplayfields","subsamplegriditem","subsamplegridmoreitem","subsampledisplayfields","testlistmoreitems","samplesearchfields","subsamplesearchfields","testsearchfields","SampleType","sampleTypeMap","registrationTypeMap","RegistrationSubType","registrationSubTypeMap","filterStatusMap","DesignTemplateMappingMap","sfromdate","stodate","searchFieldList","changeList","snspecsampletypecode","breadCrumbobj","breadCrumbFrom","breadCrumbto","ssampletypename","sregtypename","sregtemplatename","initialParam","nflag","param","sampleRegistration","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    showUnderDevelopment,\r\n    callService, crudMaster, updateStore, getSampleTypeChange, getRegTypeChange,\r\n    getRegSubTypeChange, getAttachmentCombo, viewAttachment, getCommentsCombo,\r\n    filterTransactionList, validateEsignCredential, ReloadData, getSampleChildTabDetail,\r\n    getTestChildTabDetailRegistration, getPreviewTemplate, getChildValues,\r\n    getRegistrationSample, getRegistrationsubSampleDetail, getRegistrationTestDetail,\r\n    acceptRegistration, addMoreTest, createRegistrationTest, getEditRegistrationComboService,\r\n    cancelTestAction, cancelSampleAction, addsubSampleRegistration, saveSubSample,\r\n    getEditSubSampleComboService, onUpdateSubSampleRegistration, cancelSubSampleAction,\r\n    preregRecordToQuarantine, componentTest\r\n} from '../../actions'\r\nimport { Button, Card, Col, Nav, Row } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    getControlMap, showEsign, sortData, constructOptionList,\r\n    onDropAttachFileList, deleteAttachmentDropZone, convertDateTimetoString, comboChild\r\n} from '../../components/CommonScript';\r\nimport RegistrationFilter from './RegistrationFilter';\r\nimport Esign from '../audittrail/Esign';\r\nimport { injectIntl } from 'react-intl';\r\nimport { ProductList } from '../product/product.styled';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport AddTest from './AddTest';\r\nimport { designProperties, RegistrationType, transactionStatus } from '../../components/Enumeration';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddPrinter from './AddPrinter';\r\nimport SampleGridTab from './SampleGridTab';\r\nimport AddFile from './AddFile';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveSampleComments, onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\r\nimport { onSaveSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport { ReactComponent as Quarantine } from '../../assets/image/Quarantine.svg'\r\nimport { ReactComponent as Register } from '../../assets/image/register.svg'\r\nimport { ReactComponent as Reject } from '../../assets/image/reject.svg'\r\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'\r\nimport RegistrationResultTab from './RegistrationResultTab';\r\nimport PortalModal from '../../PortalModal';\r\nimport PreRegisterSlideOutModal from './PreRegisterSlideOutModal';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { checkTestPresent, getRegistrationSubSample } from './RegistrationValidation';\r\nimport AddSubSample from './AddSubSample';\r\n\r\nclass Registration extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef();\r\n        this.PrevoiusLoginData = undefined;\r\n        this.breadCrumbData = [];\r\n        //  this.sampleeditable=this.props.Login.masterData.DynamicDesign&& JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n        this.state = {\r\n            layout: 1,\r\n            openModal: false,\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            screenName: \"Product\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            showSaveContinue: false,\r\n            filterCollection: [],\r\n            selectedFilter: {},\r\n            breadCrumb: [],\r\n            showTest: true,\r\n            showSample: false,\r\n            showSubSample: false,\r\n            sampleSearchFied: [],\r\n            subsampleSearchFied: [],\r\n            testSearchFied: [],\r\n            showConfirmAlert: false,\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            DynamicSampleColumns: [],\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'npreregno' }] },\r\n            testCommentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'groupingField' }] },\r\n            testAttachmentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'groupingField' }] },\r\n            sampleCommentsDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'groupingField' }] },\r\n            resultDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            historyDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }, { field: 'stestsynonym' }] },\r\n            selectedPrinterData: {},\r\n            grandparentheight: '150vh',\r\n            transactionValidation: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\r\n            testskip: 0,\r\n            splitChangeWidthPercentage: 28.6,\r\n            testtake: this.props.Login.settings\r\n                && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            subsampleskip: 0,\r\n            subsampletake: this.props.Login.settings\r\n                && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            comboComponents: [],\r\n            withoutCombocomponent: [],\r\n            childColumnList: [],\r\n            columnList: [],\r\n            regSubSamplecomboComponents: [],\r\n            regSubSamplewithoutCombocomponent: [],\r\n            regparentSubSampleColumnList: [],\r\n            DynamicSubSampleColumns: [],\r\n            DynamicTestColumns: [],\r\n            DynamicGridItem: [],\r\n            DynamicGridMoreField: [],\r\n            SingleItem: [],\r\n            testMoreField: [],\r\n            testListColumns: [],\r\n            SubSampleDynamicGridItem: [],\r\n            SubSampleDynamicGridMoreField: [],\r\n            SubSampleSingleItem: [],\r\n            cancelId: -1,\r\n            preRegisterId: -1,\r\n            registerId: -1,\r\n            editSampleId: -1,\r\n            quarantineId: -1,\r\n            addTestId: -1,\r\n            printBarcodeId: -1,\r\n            cancelSampleId: -1,\r\n            addSubSampleId: -1,\r\n            editSubSampleId: -1,\r\n            cancelSubSampleId: -1,\r\n            stateSampleType: [],\r\n            stateRegistrationType: [],\r\n            stateRegistrationSubType: [],\r\n            stateFilterStatus: [],\r\n            stateDynamicDesign: [],\r\n            testGetParam: {},\r\n            testChildGetParam: {},\r\n            subSampleGetParam: {},\r\n            filterSampleParam: {},\r\n            filterTestParam: {},\r\n            editRegParam: {},\r\n            editSubSampleRegParam: {},\r\n            addTestParam: {},\r\n            sampleSearchField: [],\r\n            subsampleSearchField: [],\r\n            testSearchField: [],\r\n            filterSubSampleParam: {},\r\n            // specBasedComponent: this.props.Login.settings\r\n            //     && this.props.Login.settings[18] ? this.props.Login.settings[18] === \"true\" ? true : false : false,\r\n\r\n        };\r\n        // this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\r\n            return {\r\n                showConfirmAlert: props.Login.showConfirmAlert\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onReload = () => {\r\n\r\n        // let RealFromDate = new Date(this.props.Login.masterData.RealFromDate)\r\n        // let RealToDate = new Date(this.props.Login.masterData.RealToDate)\r\n        const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\r\n        const RealFromDate = obj.fromDate;\r\n        const RealToDate = obj.toDate;\r\n        let RealSampleTypeValue = this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue\r\n        let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue\r\n        let RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue\r\n        let RealFilterStatusValue = this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue\r\n        let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n        let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n\r\n        let SampleTypeValue = RealSampleTypeValue\r\n        let RegTypeValue = RealRegTypeValue\r\n        let RegSubTypeValue = RealRegSubTypeValue\r\n        let FilterStatusValue = RealFilterStatusValue\r\n        // let FromDate = this.props.Login.masterData.FromDate\r\n        // let ToDate = this.props.Login.masterData.ToDate\r\n        const FromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        const ToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue, FromDate, ToDate,\r\n            RealFilterStatusValue, RealFromDate, RealToDate, SampleTypeValue, RegTypeValue, RegSubTypeValue, FilterStatusValue\r\n        }\r\n        let inputData = {\r\n            npreregno: \"\",\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nfilterstatus: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo, activeSampleTab, activeTestTab,\r\n            flag: 1,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.nneedsubsample,\r\n            checkBoxOperation: 3\r\n        }\r\n        if (inputData.nsampletypecode) {\r\n            // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\r\n            inputData['FromDate'] = obj.fromDate;\r\n            inputData['ToDate'] = obj.toDate;\r\n\r\n            let inputParam = { masterData, inputData, searchSubSampleRef: this.searchSubSampleRef, searchSampleRef: this.searchSampleRef, searchTestRef: this.searchTestRef, selectedFilter: this.state.selectedFilter }\r\n            this.props.ReloadData(inputParam);\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        const RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\r\n        const RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate)\r\n        let RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue\r\n        let RealRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue\r\n        let RealRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue\r\n        let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue\r\n        let RealDesignTemplateMappingValue = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue\r\n\r\n        let activeSampleTab = this.props.Login.activeSampleTab;\r\n     \r\n\r\n        let activeTestTab = this.props.Login.activeTestTab;\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue,\r\n            RealFilterStatusValue, RealFromDate, RealToDate,RealDesignTemplateMappingValue\r\n        }\r\n        let inputData = {\r\n            npreregno: \"\",\r\n            nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo, activeSampleTab, activeTestTab,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue\r\n                && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.nneedsubsample,\r\n            checkBoxOperation: 3\r\n        }\r\n\r\n        if (inputData.nsampletypecode) {\r\n            if (inputData.ndesigntemplatemappingcode) {\r\n                const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate,\r\n                    this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo)\r\n                inputData['FromDate'] = obj.fromDate;\r\n                inputData['ToDate'] = obj.toDate;\r\n                const selectedFilter = {};\r\n                selectedFilter[\"fromdate\"] = RealFromDate;\r\n                selectedFilter[\"todate\"] = RealToDate;\r\n                const inputParam = {\r\n                    masterData, inputData, searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchSampleRef: this.searchSampleRef,\r\n                    searchTestRef: this.searchTestRef, selectedFilter\r\n                }\r\n                this.props.getRegistrationSample(inputParam);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSCONFIGREGISTRATIONTEMPLATE\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    getActiveTestURL() {\r\n\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (this.props.Login.activeTestKey) {\r\n\r\n            case \"IDS_PARAMETERRESULTS\":\r\n                //url = \"resultentrybysample/getTestbasedParameter\";\r\n                url = \"registration/getregistrationparameter\";\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\";\r\n                break;\r\n            default:\r\n                url = \"registration/getregistrationparameter\";\r\n                // url = \"resultentrybysample/getTestbasedParameter\";\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    gridViewChange(layout) {\r\n        this.setState({\r\n            layout: layout\r\n        })\r\n    }\r\n    verticalPaneSizeChange = (val) => {\r\n        this.setState({\r\n            initialVerticalWidth: val - 150\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : this.props.Login.masterData.FromDate;\r\n        this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : this.props.Login.masterData.ToDate;\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample ? sortData(this.props.Login.masterData.RegistrationGetSample, 'desc', 'npreregno') : [];\r\n        let subSampleList = this.props.Login.masterData.RegistrationGetSubSample ? this.props.Login.masterData.RegistrationGetSubSample : [];\r\n        let testList = this.props.Login.masterData.RegistrationGetTest ? this.props.Login.masterData.RegistrationGetTest : []; //\r\n\r\n        // let testGetParam = {\r\n        //     masterData: this.props.Login.masterData,\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n        //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n        //     npreregno: this.props.Login.masterData.selectedSample &&\r\n        //         this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     searchTestRef: this.searchTestRef,\r\n        //     testskip: this.state.testskip,\r\n        //     subsampleskip: this.state.subsampleskip,\r\n        //     resultDataState: this.state.resultDataState,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        // }\r\n        // let testChildGetParam = {\r\n        //     masterData: this.props.Login.masterData,\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n        //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n        //     npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n        //     ntransactionsamplecode: this.props.Login.masterData.selectedSubSample &&\r\n        //         this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     resultDataState: this.state.resultDataState,\r\n        //     testCommentDataState: this.state.testCommentDataState,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        // }\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        // let subSampleGetParam = {\r\n        //     masterData: this.props.Login.masterData,\r\n        //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n        //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n        //     testskip: this.state.testskip,\r\n        //     subsampleskip: this.state.subsampleskip,\r\n        //     searchTestRef: this.searchTestRef,\r\n        //     resultDataState: this.state.resultDataState,\r\n        //     testCommentDataState: this.state.testCommentDataState,\r\n        //     sampleGridDataState: this.state.sampleGridDataState,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n        //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        //     nneedsubsample: this.props.Login.masterData\r\n        //         && this.props.Login.masterData.nneedsubsample\r\n        // }\r\n        // let sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\"\r\n        //     , \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\"\r\n        //     , \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\"];\r\n\r\n\r\n        // const filterSampleParam = {\r\n        //     inputListName: \"RegistrationGetSample\",\r\n        //     selectedObject: \"selectedSample\",\r\n        //     primaryKeyField: \"npreregno\",\r\n        //     fetchUrl: \"registration/getRegistrationSubSample\",\r\n        //     childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n        //     fecthInputObject: {\r\n        //         nflag: 2,\r\n        //         ntype: 2,\r\n        //         masterData: this.props.Login.masterData,\r\n        //         ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //         userinfo: this.props.Login.userInfo,\r\n        //         nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //         nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //         nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //         activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n        //         activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n        //     },\r\n        //     masterData: this.props.Login.masterData,\r\n        //     searchFieldList: sampleSearchField,\r\n        //     changeList: [\r\n        //         \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n        //         \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\",\r\n        //         \"selectedTest\", \"RegistrationParameter\"\r\n        //     ]\r\n        // };\r\n\r\n        // let filterTestParam = {\r\n        //     inputListName: \"RegistrationGetTest\",\r\n        //     selectedObject: \"selectedTest\",\r\n        //     primaryKeyField: \"ntransactiontestcode\",\r\n        //     fetchUrl: this.getActiveTestURL(),\r\n        //     fecthInputObject: {\r\n        //         ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n        //         userinfo: this.props.Login.userInfo\r\n        //     },\r\n        //     masterData: this.props.Login.masterData,\r\n        //     searchFieldList: [\"sarno\", \"stestsynonym\", \"ssectionname\", \"ssamplearno\",\r\n        //         \"sinstrumentcatname\", \"stransdisplaystatus\", \"smethodname\", \"ssourcename\", \"scomponentname\", \"stestname\"],\r\n        //     changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\r\n\r\n        // }\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"registration/getRegistrationSubSample\",\r\n                fecthInputObject: {\r\n                    ...this.state.subSampleGetParam, testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchTestRef: this.searchTestRef,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                    sampleGridDataState: this.state.sampleGridDataState\r\n                },\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\r\n                { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                selectedObject: \"selectedSample\",\r\n                inputListName: \"AP_SAMPLE\",\r\n                updatedListname: \"selectedSample\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            },\r\n            {\r\n                filteredListName: \"searchedSubSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSubSampleRef,\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"registration/getRegistrationTestSample\",\r\n                fecthInputObject: {\r\n                    ...this.state.testGetParam, testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchTestRef: this.searchTestRef,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                    sampleGridDataState: this.state.sampleGridDataState\r\n                },\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                selectedObject: \"selectedSubSample\",\r\n                inputListName: \"AP_SUBSAMPLE\",\r\n                updatedListname: \"selectedSubSample\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            },\r\n            {\r\n                filteredListName: \"searchedTest\",\r\n                updatedListname: \"selectedTest\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: \"approval/getApprovalTest\",\r\n                fecthInputObject: {\r\n                    ...this.state.testGetParam,\r\n                    searchTestRef: this.searchTestRef,\r\n                    testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    resultDataState: this.state.resultDataState\r\n                },\r\n                selectedObject: \"selectedTest\",\r\n                inputListName: \"RegistrationGetTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }\r\n        ];\r\n\r\n\r\n        // let editRegParam = {\r\n        //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     ncontrolCode: this.state.editSampleId,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n        //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        //     nneedsubsample: this.props.Login.masterData\r\n        //         && this.props.Login.masterData.nneedsubsample\r\n        // }\r\n\r\n        // let editSubSampleRegParam = {\r\n        //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     ncontrolCode: this.state.editSampleId,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n        //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        //     nneedsubsample: this.props.Login.masterData\r\n        //         && this.props.Login.masterData.nneedsubsample\r\n        // }\r\n\r\n        // const addTestParam = {\r\n        //     selectedsample: this.props.Login.masterData.selectedSample,\r\n        //     selectedsubsample: this.props.Login.masterData.selectedSubSample,\r\n        //     skip: this.state.skip, take: (this.state.skip + this.state.take),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     sampleList: this.props.Login.masterData.RegistrationGetSample,\r\n        //     snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\r\n        //         [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n        // };\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    {/* <div className='btn-list'>\r\n                        <button className={`btn-primary-head ${this.state.layout === 1 ? 'active' : ''} `} onClick={() => this.gridViewChange(1)}>Sample</button>\r\n                        <button className={`btn-primary-head ${this.state.layout === 2 ? 'active' : ''} `} onClick={() => this.gridViewChange(2)}>Sub Sample</button>\r\n                        <button className={`btn-primary-head ${this.state.layout === 3 ? 'active' : ''} `} onClick={() => this.gridViewChange(3)}>Test</button>\r\n                    </div> */}\r\n                    <Row noGutters={true}>\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            <ListWrapper >\r\n                                {/* className={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 60 ? 'split-mode' : ''} */}\r\n                                <SplitterLayout borderColor=\"#999\"\r\n                                    primaryIndex={1} percentage={true}\r\n                                    secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                    onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                    primaryMinSize={40}\r\n                                    secondaryMinSize={20}\r\n                                >\r\n                                    {this.state.layout === 1 ?\r\n                                        <TransactionListMasterJson\r\n                                            // paneHeight={this.state.firstPane}\r\n                                            splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                            masterList={this.props.Login.masterData.searchedSample || sampleList}\r\n                                            selectedMaster={this.props.Login.masterData.selectedSample}\r\n                                            primaryKeyField=\"npreregno\"\r\n                                            filterColumnData={this.props.filterTransactionList}\r\n                                            getMasterDetail={this.props.getRegistrationsubSampleDetail}\r\n                                            inputParam={{\r\n                                                ...this.state.subSampleGetParam,\r\n                                                searchTestRef: this.searchTestRef,\r\n                                                searchSubSampleRef: this.searchSubSampleRef,\r\n                                                testskip: this.state.testskip,\r\n                                                subsampleskip: this.state.subsampleskip,\r\n                                                resultDataState: this.state.resultDataState\r\n                                            }}\r\n                                            selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                                && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                            selectionColorField=\"scolorhexcode\"\r\n                                            mainField={\"sarno\"}\r\n                                            showStatusLink={true}\r\n                                            showStatusName={true}\r\n                                            statusFieldName=\"stransdisplaystatus\"\r\n                                            statusField=\"ntransactionstatus\"\r\n                                            selectedListName=\"selectedSample\"\r\n                                            searchListName=\"searchedSample\"\r\n                                            searchRef={this.searchSampleRef}\r\n                                            objectName=\"sample\"\r\n                                            listName=\"IDS_SAMPLE\"\r\n                                            selectionField=\"ntransactionstatus\"\r\n                                            selectionFieldName=\"stransdisplaystatus\"\r\n                                            showFilter={this.props.Login.showFilter}\r\n                                            openFilter={this.openFilter}\r\n                                            closeFilter={this.closeFilter}\r\n                                            onFilterSubmit={this.onFilterSubmit}\r\n                                            subFields={this.state.DynamicSampleColumns}\r\n                                            // jsonField={'jsondata'}\r\n                                            //jsonDesignFields={true}\r\n                                            needMultiSelect={true}\r\n                                            showStatusBlink={true}\r\n                                            filterParam={{\r\n                                                ...this.state.filterSampleParam,\r\n                                                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\r\n                                                { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                                            }}\r\n                                            subFieldsLabel={false}\r\n                                            handlePageChange={this.handlePageChange}\r\n                                            skip={this.state.skip}\r\n                                            take={this.state.take}\r\n                                            splitModeClass={this.state.splitChangeWidthPercentage\r\n                                                && this.state.splitChangeWidthPercentage > 50 ? 'split-mode'\r\n                                                : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                            childTabsKey={[\"RegistrationAttachment\", \"RegistrationGetSubSample\",\r\n                                                \"RegistrationGetTest\", \"RegistrationSampleComment\",\"selectedSubSample\",\"selectedTest\"]} //, \"RegistrationParameter\"\"RegistrationTestComment\"\r\n                                            actionIcons={\r\n                                                [\r\n                                                    {\r\n                                                        title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                        controlname: \"faPencilAlt\",\r\n                                                        objectName: \"mastertoedit\",\r\n                                                        hidden: this.state.userRoleControlRights.indexOf(this.state.editSampleId) === -1,\r\n                                                        onClick: this.editRegistration,\r\n                                                        inputData: {\r\n                                                            primaryKeyName: \"npreregno\",\r\n                                                            operation: \"update\",\r\n                                                            masterData: this.props.Login.masterData,\r\n                                                            userInfo: this.props.Login.userInfo,\r\n                                                            editRegParam: {\r\n                                                                ...this.state.editRegParam,\r\n                                                                ncontrolCode: this.state.editSampleId\r\n                                                            }\r\n                                                        },\r\n                                                    },\r\n                                                    {\r\n                                                        title: this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" }),\r\n                                                        controlname: \"faPrint\",\r\n                                                        objectName: \"sample\",\r\n                                                        hidden: this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\r\n                                                        onClick: this.props.getPrinterComboService,\r\n                                                        inputData: {\r\n                                                            primaryKeyName: \"npreregno\",\r\n                                                            operation: \"print\",\r\n                                                            ncontrolcode: this.state.printBarcodeId,\r\n                                                            masterData: this.props.Login.masterData,\r\n                                                            userInfo: this.props.Login.userInfo,\r\n                                                            editRegParam: {\r\n                                                                ...this.state.editRegParam,\r\n                                                                ncontrolCode: this.state.editSampleId\r\n                                                            }\r\n                                                        },\r\n                                                    },\r\n\r\n                                                ]\r\n                                            }\r\n                                            needFilter={true}\r\n                                            commonActions={\r\n\r\n                                                <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                    {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                    <Button className=\"btn btn-icon-rounded btn-circle solid-blue ml-2\" role=\"button\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REGISTER\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.preRegisterId) === -1}\r\n                                                        onClick={() => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\",\r\n                                                            this.props.Login.masterData, this.props.Login.userInfo, this.state.preRegisterId)}>\r\n                                                        <FontAwesomeIcon icon={faPlus} />\r\n                                                    </Button>\r\n                                                    <Nav.Link\r\n                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ACCEPT\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.registerId) === -1}\r\n                                                        onClick={() => this.acceptRegistration(this.state.registerId, this.state.skip, this.state.take)} >\r\n                                                        <Register className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                    </Nav.Link>\r\n                                                    <Nav.Link\r\n                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_QUARANTINE\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.quarantineId) === -1}\r\n                                                        onClick={() => this.selectQuarantine(this.state.quarantineId, this.state.skip, this.state.take)} >\r\n                                                        <Quarantine className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                    </Nav.Link>\r\n                                                    <Nav.Link\r\n                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTSAMPLE\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.cancelSampleId) === -1}\r\n                                                        onClick={() => this.cancelSampleRecords(this.state.cancelSampleId, this.state.skip, this.state.take)}>\r\n                                                        <Reject className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                                    </Nav.Link>\r\n                                                    <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        onClick={() => this.onReload()} >\r\n\r\n                                                        <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                    </Button>\r\n                                                </ProductList>\r\n                                            }\r\n                                            filterComponent={[\r\n                                                {\r\n                                                    \"Sample Filter\": <RegistrationFilter\r\n                                                        SampleType={this.state.stateSampleType || []}\r\n                                                        RegistrationType={this.state.stateRegistrationType || []}\r\n                                                        RegistrationSubType={this.state.stateRegistrationSubType || []}\r\n                                                        userInfo={this.props.Login.userInfo || {}}\r\n                                                        SampleTypeValue={this.props.Login.masterData.SampleTypeValue || {}}\r\n                                                        RegTypeValue={this.props.Login.masterData.RegTypeValue || {}}\r\n                                                        RegSubTypeValue={this.props.Login.masterData.RegSubTypeValue || {}}\r\n                                                        FilterStatusValue={this.props.Login.masterData.FilterStatusValue || {}}\r\n                                                        DesignTemplateMapping={this.props.Login.masterData.DesignTemplateMapping}\r\n                                                        DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || {}}\r\n                                                        FilterStatus={this.state.stateFilterStatus || []}\r\n                                                        FromDate={this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date()}\r\n                                                        ToDate={this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date()}\r\n                                                        onSampleTypeChange={this.onSampleTypeChange}\r\n                                                        onRegTypeChange={this.onRegTypeChange}\r\n                                                        onRegSubTypeChange={this.onRegSubTypeChange}\r\n                                                        onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                                        DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                                        handleFilterDateChange={this.handleFilterDateChange}\r\n                                                        onFilterChange={this.onFilterChange}\r\n                                                    />\r\n                                                }\r\n                                            ]}\r\n\r\n                                        />\r\n                                        : this.state.layout === 2 ?\r\n                                            <TransactionListMasterJson\r\n                                                paneHeight={this.state.initialVerticalWidth}\r\n                                                // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                                masterList={this.props.Login.masterData.searchedSubSample || subSampleList}\r\n                                                selectedMaster={this.props.Login.masterData.selectedSubSample}\r\n                                                primaryKeyField=\"ntransactionsamplecode\"\r\n                                                getMasterDetail={this.props.getRegistrationTestDetail}\r\n                                                inputParam={{\r\n                                                    ...this.state.testGetParam,\r\n                                                    searchTestRef: this.searchTestRef,\r\n                                                    testskip: this.state.testskip,\r\n                                                    subsampleskip: this.state.subsampleskip,\r\n                                                    resultDataState: this.state.resultDataState\r\n                                                }}\r\n                                                additionalParam={['napprovalversioncode']}\r\n                                                showStatusLink={true}\r\n                                                showStatusName={true}\r\n                                                statusFieldName=\"stransdisplaystatus\"\r\n                                                statusField=\"ntransactionstatus\"\r\n                                                mainField=\"ssamplearno\"\r\n                                                selectedListName=\"selectedSubSample\"\r\n                                                objectName=\"subsample\"\r\n                                                listName=\"IDS_SUBSAMPLE\"\r\n                                                //jsonField={'jsondata'}\r\n                                                //jsonDesignFields={true}\r\n                                                needValidation={true}\r\n                                                validationKey=\"napprovalversioncode\"\r\n                                                validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                                subFields={this.state.DynamicSubSampleColumns}\r\n                                                searchRef={this.searchSubSampleRef}\r\n                                                skip={this.state.subsampleskip}\r\n                                                take={this.state.subsampletake}\r\n                                                selectionField=\"ntransactionstatus\"\r\n                                                selectionFieldName=\"stransdisplaystatus\"\r\n                                                needMultiSelect={true}\r\n                                                selectionColorField=\"scolorhexcode\"\r\n                                                subFieldsLabel={false}\r\n                                                handlePageChange={this.handleSubSamplePageChange}\r\n                                                selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                                    && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                childTabsKey={[\"RegistrationAttachment\",\r\n                                                    \"RegistrationGetTest\"]}\r\n                                                actionIcons={\r\n                                                    [\r\n                                                        {\r\n                                                            title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                            controlname: \"faPencilAlt\",\r\n                                                            objectName: \"mastertoedit\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\r\n                                                            onClick: this.editSubSampleRegistration,\r\n                                                            inputData: {\r\n                                                                primaryKeyName: \"ntransactionsamplecode\",\r\n                                                                operation: \"update\",\r\n                                                                masterData: this.props.Login.masterData,\r\n                                                                userInfo: this.props.Login.userInfo,\r\n                                                                editSubSampleRegParam: { ...this.state.editSubSampleRegParam, ncontrolCode: this.state.editSampleId }\r\n                                                            },\r\n                                                        }\r\n\r\n\r\n                                                    ]\r\n                                                }\r\n                                                needFilter={false}\r\n                                                commonActions={\r\n                                                    <>\r\n                                                        {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                        <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                            {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                            <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                //title={\"Add Test\"}\r\n                                                                data-for=\"tooltip-common-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLE\" })}\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(this.state.addSubSampleId) === -1}\r\n                                                                onClick={() => this.addSubSample(this.state.addSubSampleId, this.state.subsampleskip, this.state.subsampletake)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPlus} />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link\r\n                                                                className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                //title={\"Cancel/Reject Test\"}\r\n                                                                data-for=\"tooltip-common-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(this.state.cancelSubSampleId) === -1}\r\n                                                                onClick={() => this.cancelSubSampleRecord(this.state.cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake)}>\r\n                                                                <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                            </Nav.Link>\r\n                                                        </ProductList>\r\n                                                        {/* </Tooltip> */}\r\n                                                    </>\r\n                                                }\r\n                                            />\r\n\r\n\r\n                                            : this.state.layout === 3 ?\r\n                                                <TransactionListMasterJson\r\n                                                    paneHeight={this.state.initialVerticalWidth}\r\n                                                    masterList={this.props.Login.masterData.searchedTest || testList}\r\n                                                    selectedMaster={this.props.Login.masterData.selectedTest}\r\n                                                    primaryKeyField=\"ntransactiontestcode\"\r\n                                                    getMasterDetail={this.props.getTestChildTabDetailRegistration}\r\n                                                    inputParam={{\r\n                                                        ...this.state.testChildGetParam, resultDataState: this.state.resultDataState,\r\n                                                        testCommentDataState: this.state.testCommentDataState,\r\n                                                        testAttachmentDataState: this.state.testAttachmentDataState,\r\n                                                    }}\r\n                                                    additionalParam={[]}\r\n                                                    mainField=\"stestsynonym\"\r\n                                                    selectedListName=\"selectedTest\"\r\n                                                    objectName=\"test\"\r\n                                                    listName=\"IDS_TEST\"\r\n                                                    //jsonField={'jsondata'}\r\n                                                    pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                    showStatusLink={true}\r\n                                                    subFieldsLabel={true}\r\n                                                    statusFieldName=\"stransdisplaystatus\"\r\n                                                    statusField=\"ntransactionstatus\"\r\n                                                    needMultiSelect={true}\r\n                                                    subFields={this.state.testListColumns || []}\r\n                                                    moreField={this.state.testMoreField}\r\n                                                    needValidation={false}\r\n                                                    showStatusName={true}\r\n                                                    needFilter={false}\r\n                                                    filterColumnData={this.props.filterTransactionList}\r\n                                                    searchListName=\"searchedTest\"\r\n                                                    searchRef={this.searchTestRef}\r\n                                                    filterParam={this.state.filterTestParam}\r\n                                                    selectionField=\"ntransactionstatus\"\r\n                                                    selectionFieldName=\"stransdisplaystatus\"\r\n                                                    // childTabsKey={[\"RegistrationTestComment\"]}\r\n                                                    childTabsKey={[\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\"]}\r\n                                                    handlePageChange={this.handleTestPageChange}\r\n                                                    buttonCount={5}\r\n                                                    skip={this.state.testskip}\r\n                                                    take={this.state.testtake}\r\n                                                    showMoreResetList={true}\r\n                                                    showMoreResetListName=\"RegistrationGetSample\"\r\n                                                    selectionList={this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                    selectionColorField=\"scolorhexcode\"\r\n                                                    // selectionList=\r\n                                                    // actionIcons={\r\n                                                    //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                                                    //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                                                    //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\r\n                                                    //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\r\n                                                    // }\r\n                                                    commonActions={\r\n                                                        <>\r\n                                                            {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                            <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                    //title={\"Add Test\"}\r\n                                                                    data-for=\"tooltip-common-wrap\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDTEST\" })}\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1}\r\n                                                                    onClick={() => this.props.addMoreTest({\r\n                                                                        ...this.state.addTestParam,\r\n                                                                        skip: this.state.skip, take: (this.state.skip + this.state.take)\r\n                                                                    }, this.state.addTestId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faPlus} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                <Nav.Link\r\n                                                                    className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                    //title={\"Cancel/Reject Test\"}\r\n                                                                    data-for=\"tooltip-common-wrap\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTTEST\" })}\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1}\r\n                                                                    onClick={() => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake)}>\r\n                                                                    <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                                </Nav.Link>\r\n                                                            </ProductList>\r\n                                                            {/* </Tooltip> */}\r\n                                                        </>\r\n                                                    }\r\n                                                /> : \"\"}\r\n\r\n                                    <PerfectScrollbar>\r\n                                        {this.state.layout === 1 ?\r\n                                            <SplitterLayout\r\n                                                customClassName=\"detailed-inner\"\r\n                                                vertical\r\n                                                borderColor=\"#999\"\r\n                                                primaryIndex={1}\r\n                                                onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n                                                secondaryInitialSize={400}\r\n                                            >\r\n                                                <div>\r\n                                                    <div style={this.state.showTest === true ?\r\n                                                        { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                        <SplitterLayout borderColor=\"#999\"\r\n                                                            primaryIndex={1} percentage={true}\r\n                                                            secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                                            onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                                            primaryMinSize={40}\r\n                                                            secondaryMinSize={30}\r\n                                                        >\r\n                                                            <Card>\r\n                                                                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                    <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                        <h4 className=\"card-title\">Sub Sample</h4>\r\n                                                                    </span>\r\n                                                                </Card.Header>\r\n                                                                <Card.Body className='p-0'>\r\n                                                                    <TransactionListMasterJson\r\n                                                                        paneHeight={this.state.initialVerticalWidth}\r\n                                                                        // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                                                        masterList={this.props.Login.masterData.searchedSubSample || subSampleList}\r\n                                                                        selectedMaster={this.props.Login.masterData.selectedSubSample}\r\n                                                                        primaryKeyField=\"ntransactionsamplecode\"\r\n                                                                        getMasterDetail={this.props.getRegistrationTestDetail}\r\n                                                                        inputParam={{\r\n                                                                            ...this.state.testGetParam,\r\n                                                                            searchTestRef: this.searchTestRef,\r\n                                                                            searchSubSampleRef: this.searchSubSampleRef,\r\n                                                                            testskip: this.state.testskip,\r\n                                                                            subsampleskip: this.state.subsampleskip,\r\n                                                                            resultDataState: this.state.resultDataState\r\n                                                                        }}\r\n                                                                        filterColumnData={this.props.filterTransactionList}\r\n                                                                        searchListName=\"searchedSubSample\"\r\n                                                                        searchRef={this.searchSubSampleRef}\r\n                                                                        filterParam={{\r\n                                                                            ...this.state.filterSubSampleParam,\r\n                                                                            childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }]\r\n                                                                        }}\r\n                                                                        additionalParam={['napprovalversioncode']}\r\n                                                                        showStatusLink={true}\r\n                                                                        showStatusName={true}\r\n                                                                        statusFieldName=\"stransdisplaystatus\"\r\n                                                                        statusField=\"ntransactionstatus\"\r\n                                                                        mainField=\"ssamplearno\"\r\n                                                                        selectedListName=\"selectedSubSample\"\r\n                                                                        objectName=\"subsample\"\r\n                                                                        listName=\"IDS_SUBSAMPLE\"\r\n                                                                        // jsonField={'jsondata'}\r\n                                                                        //jsonDesignFields={true}\r\n                                                                        needValidation={true}\r\n                                                                        validationKey=\"napprovalversioncode\"\r\n                                                                        validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                                                        subFields={this.state.DynamicSubSampleColumns}\r\n                                                                        skip={this.state.subsampleskip}\r\n                                                                        take={this.state.subsampletake}\r\n                                                                        selectionField=\"ntransactionstatus\"\r\n                                                                        selectionFieldName=\"stransdisplaystatus\"\r\n                                                                        needMultiSelect={true}\r\n                                                                        selectionColorField=\"scolorhexcode\"\r\n                                                                        subFieldsLabel={false}\r\n                                                                        handlePageChange={this.handleSubSamplePageChange}\r\n                                                                        selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                                                            && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                                        childTabsKey={[\"RegistrationAttachment\",\r\n                                                                            \"RegistrationGetTest\"]}\r\n                                                                        actionIcons={\r\n                                                                            [\r\n                                                                                {\r\n                                                                                    title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                                                    controlname: \"faPencilAlt\",\r\n                                                                                    objectName: \"mastertoedit\",\r\n                                                                                    hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\r\n                                                                                    onClick: this.editSubSampleRegistration,\r\n                                                                                    inputData: {\r\n                                                                                        primaryKeyName: \"ntransactionsamplecode\",\r\n                                                                                        operation: \"update\",\r\n                                                                                        masterData: this.props.Login.masterData,\r\n                                                                                        userInfo: this.props.Login.userInfo,\r\n                                                                                        editSubSampleRegParam: { ...this.state.editSubSampleRegParam, ncontrolCode: this.state.editSampleId }\r\n                                                                                    },\r\n                                                                                }\r\n\r\n\r\n                                                                            ]\r\n                                                                        }\r\n                                                                        needFilter={false}\r\n                                                                        commonActions={\r\n                                                                            <>\r\n                                                                                {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                                <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                                    {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                                    <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                        //title={\"Add Test\"}\r\n                                                                                        data-for=\"tooltip-common-wrap\"\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLE\" })}\r\n                                                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.addSubSampleId) === -1}\r\n                                                                                        onClick={() => this.addSubSample(this.state.addSubSampleId, this.state.subsampleskip, this.state.subsampletake)}\r\n                                                                                    >\r\n                                                                                        <FontAwesomeIcon icon={faPlus} />\r\n                                                                                    </Nav.Link>\r\n                                                                                    <Nav.Link\r\n                                                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                        //title={\"Cancel/Reject Test\"}\r\n                                                                                        data-for=\"tooltip-common-wrap\"\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.cancelSubSampleId) === -1}\r\n                                                                                        onClick={() => this.cancelSubSampleRecord(this.state.cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake)}>\r\n                                                                                        <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                                                    </Nav.Link>\r\n                                                                                </ProductList>\r\n                                                                                {/* </Tooltip> */}\r\n                                                                            </>\r\n                                                                        }\r\n                                                                    />\r\n                                                                </Card.Body>\r\n                                                            </Card>\r\n                                                            <ContentPanel>\r\n                                                                <Card>\r\n                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\" }}>\r\n                                                                            <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                                                                        </span>\r\n                                                                        <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                            onClick={() => this.showSample()}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                        </button>\r\n                                                                        {/* <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                            onClick={() => this.showSubSample()}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}\r\n                                                                        </button> */}\r\n\r\n                                                                        {/* </div> */}\r\n                                                                    </Card.Header>\r\n                                                                    <Card.Body className='p-0'>\r\n\r\n                                                                        <TransactionListMasterJson\r\n                                                                            paneHeight={this.state.initialVerticalWidth}\r\n                                                                            masterList={this.props.Login.masterData.searchedTest || testList}\r\n                                                                            selectedMaster={this.props.Login.masterData.selectedTest}\r\n                                                                            primaryKeyField=\"ntransactiontestcode\"\r\n                                                                            getMasterDetail={this.props.getTestChildTabDetailRegistration}\r\n                                                                            inputParam={{\r\n                                                                                ...this.state.testChildGetParam, resultDataState: this.state.resultDataState,\r\n                                                                                testCommentDataState: this.state.testCommentDataState,\r\n                                                                                testAttachmentDataState: this.state.testAttachmentDataState,\r\n                                                                            }}\r\n                                                                            additionalParam={[]}\r\n                                                                            mainField=\"stestsynonym\"\r\n                                                                            selectedListName=\"selectedTest\"\r\n                                                                            objectName=\"test\"\r\n                                                                            listName=\"IDS_TEST\"\r\n                                                                            // jsonField={'jsondata'}\r\n                                                                            pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                                            showStatusLink={true}\r\n                                                                            subFieldsLabel={true}\r\n                                                                            statusFieldName=\"stransdisplaystatus\"\r\n                                                                            statusField=\"ntransactionstatus\"\r\n                                                                            needMultiSelect={true}\r\n                                                                            subFields={this.state.testListColumns || []}\r\n                                                                            moreField={this.state.testMoreField}\r\n                                                                            needValidation={false}\r\n                                                                            showStatusName={true}\r\n                                                                            needFilter={false}\r\n                                                                            filterColumnData={this.props.filterTransactionList}\r\n                                                                            searchListName=\"searchedTest\"\r\n                                                                            searchRef={this.searchTestRef}\r\n                                                                            filterParam={this.state.filterTestParam}\r\n                                                                            selectionField=\"ntransactionstatus\"\r\n                                                                            selectionFieldName=\"stransdisplaystatus\"\r\n                                                                            // childTabsKey={[\"RegistrationTestComment\"]}\r\n                                                                            childTabsKey={[\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\"]}\r\n                                                                            handlePageChange={this.handleTestPageChange}\r\n                                                                            buttonCount={5}\r\n                                                                            skip={this.state.testskip}\r\n                                                                            take={this.state.testtake}\r\n                                                                            showMoreResetList={true}\r\n                                                                            showMoreResetListName=\"RegistrationGetSample\"\r\n                                                                            selectionList={this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                                            selectionColorField=\"scolorhexcode\"\r\n                                                                            // selectionList=\r\n                                                                            // actionIcons={\r\n                                                                            //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                                                                            //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                                                                            //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\r\n                                                                            //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\r\n                                                                            // }\r\n                                                                            commonActions={\r\n                                                                                <>\r\n                                                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                                    <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                                        <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                            //title={\"Add Test\"}\r\n                                                                                            data-for=\"tooltip-common-wrap\"\r\n                                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDTEST\" })}\r\n                                                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1}\r\n                                                                                            onClick={() => this.props.addMoreTest({\r\n                                                                                                ...this.state.addTestParam,\r\n                                                                                                skip: this.state.skip, take: (this.state.skip + this.state.take)\r\n                                                                                            }, this.state.addTestId)}\r\n                                                                                        >\r\n                                                                                            <FontAwesomeIcon icon={faPlus} />\r\n                                                                                        </Nav.Link>\r\n\r\n                                                                                        <Nav.Link\r\n                                                                                            className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                            //title={\"Cancel/Reject Test\"}\r\n                                                                                            data-for=\"tooltip-common-wrap\"\r\n                                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTTEST\" })}\r\n                                                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1}\r\n                                                                                            onClick={() => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake)}>\r\n                                                                                            <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                                                        </Nav.Link>\r\n                                                                                    </ProductList>\r\n                                                                                    {/* </Tooltip> */}\r\n                                                                                </>\r\n                                                                            }\r\n                                                                        />\r\n                                                                    </Card.Body>\r\n                                                                </Card>\r\n                                                            </ContentPanel>\r\n                                                        </SplitterLayout>\r\n                                                    </div>\r\n                                                    <ContentPanel style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                        <Card className=\"border-0\">\r\n                                                            <Card.Body className='p-0'>\r\n                                                                <Row>\r\n                                                                    <Col md={12}>\r\n                                                                        <Card className='p-0'>\r\n                                                                            <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                    <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                                </span>\r\n                                                                                {/* <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                                    onClick={() => this.showSubSample()}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                    {this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}\r\n                                                                                </button> */}\r\n                                                                                <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                                    onClick={() => this.showTest()}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                    {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                                </button>\r\n                                                                            </Card.Header>\r\n                                                                            <Card.Body>\r\n                                                                                <PerfectScrollbar>\r\n                                                                                    <div style={{ height: this.state.initialVerticalWidth }}>\r\n                                                                                        {this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                                                                            <SampleInfoView\r\n                                                                                                data={(this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0) ?\r\n                                                                                                    this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {}}\r\n                                                                                                SingleItem={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ?\r\n                                                                                                    this.state.SingleItem : []}\r\n                                                                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                                userInfo={this.props.Login.userInfo}\r\n\r\n                                                                                            />\r\n\r\n                                                                                            :\r\n                                                                                            <SampleGridTab\r\n                                                                                                userInfo={this.props.Login.masterData.userInfo || {}}\r\n                                                                                                GridData={this.props.Login.masterData.selectedSample || []}\r\n                                                                                                masterData={this.props.Login.masterData}\r\n                                                                                                inputParam={this.props.Login.inputParam}\r\n                                                                                                dataState={this.state.sampleGridDataState}\r\n                                                                                                dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                                extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                                                                detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                                                                primaryKeyField={\"npreregno\"}\r\n                                                                                                expandField=\"expanded\"\r\n                                                                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                            //jsonField={\"jsondata\"}\r\n                                                                                            />\r\n                                                                                        }\r\n                                                                                    </div>\r\n                                                                                </PerfectScrollbar>\r\n                                                                            </Card.Body>\r\n                                                                        </Card>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                    </ContentPanel>\r\n                                                    {/* <ContentPanel style={this.state.showSubSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                        <Card className=\"border-0\">\r\n                                                            <Card.Body className='p-0'>\r\n                                                                <Row>\r\n                                                                    <Col md={12}>\r\n                                                                        <Card className='p-0'>\r\n                                                                            <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                    <h4 >{this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}</h4>\r\n                                                                                </span>\r\n                                                                                <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                                    onClick={() => this.showSample()}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                    {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                                </button>\r\n                                                                                <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                                    onClick={() => this.showTest()}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                    {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                                </button>\r\n                                                                            </Card.Header>\r\n                                                                            <Card.Body>\r\n                                                                                <PerfectScrollbar>\r\n                                                                                    <div style={{ height: this.state.initialVerticalWidth }}>\r\n                                                                                        {this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                                                                            <SampleInfoView\r\n                                                                                                data={(this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.length > 0) ?\r\n                                                                                                    this.props.Login.masterData.selectedSubSample[this.props.Login.masterData.selectedSubSample.length - 1] : {}}\r\n                                                                                                SingleItem={this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample ?\r\n                                                                                                    this.state.SubSampleSingleItem : []}\r\n                                                                                                screenName=\"IDS_SUBSAMPLEINFO\"\r\n                                                                                                userInfo={this.props.Login.userInfo}\r\n\r\n                                                                                            />\r\n\r\n                                                                                            :\r\n                                                                                            <SampleGridTab\r\n                                                                                                userInfo={this.props.Login.masterData.userInfo || {}}\r\n                                                                                                GridData={this.props.Login.masterData.selectedSubSample || []}\r\n                                                                                                masterData={this.props.Login.masterData}\r\n                                                                                                inputParam={this.props.Login.inputParam}\r\n                                                                                                dataState={this.state.sampleGridDataState}\r\n                                                                                                dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                                extractedColumnList={this.gridfillingColumn(this.state.SubSamDynamicGridItem) || []}\r\n                                                                                                detailedFieldList={this.gridfillingColumn(this.state.SubSamDynamicGridMoreField) || []}\r\n                                                                                                primaryKeyField={\"npreregno\"}\r\n                                                                                                expandField=\"expanded\"\r\n                                                                                                screenName=\"IDS_SUBSAMPLEINFO\"\r\n                                                                                                jsonField={\"jsondata\"}\r\n                                                                                            />\r\n                                                                                        }\r\n                                                                                    </div>\r\n                                                                                </PerfectScrollbar>\r\n                                                                            </Card.Body>\r\n                                                                        </Card>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                    </ContentPanel> */}\r\n                                                </div>\r\n                                                <div>\r\n                                                    <PerfectScrollbar>\r\n                                                        <div style={{ height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\" }}>\r\n                                                            {this.state.showSample ?\r\n\r\n                                                                <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'}\r\n                                                                    tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n\r\n                                                                this.state.showTest ?\r\n                                                                    <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'}\r\n                                                                        tabDetail={this.testTabDetail()}\r\n                                                                        onTabChange={this.ontestTabChange} />\r\n                                                                    // <Card>\r\n                                                                    /* <Card.Header style={{ \"borderBottom\": \"0px\", \"padding-top\": \"1px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                            <h4 className=\"card-title\">Parameter Results</h4>\r\n                                                                        </span>\r\n                                                                    </Card.Header> */\r\n\r\n                                                                    // </Card>\r\n                                                                    // : this.state.showSubSample ?\r\n                                                                    //     <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'}\r\n                                                                    //         tabDetail={this.subsampleTabDetail()}\r\n                                                                    //         onTabChange={this.onSubSampleTabChange} />\r\n\r\n                                                                    //     : \"\"}\r\n                                                                    : \"\"}\r\n                                                        </div>\r\n                                                    </PerfectScrollbar>\r\n                                                </div>\r\n                                            </SplitterLayout>\r\n                                            :\r\n                                            this.state.layout === 2 ?\r\n                                                <ScrollBar ref={(ref) => { this._scrollBarRef = ref; }}>\r\n                                                    <div className=\"\">\r\n                                                        <>\r\n                                                            <div className=\"card_group\">\r\n                                                                <SplitterLayout\r\n                                                                    customClassName=\"detailed-inner\"\r\n                                                                    vertical\r\n                                                                    borderColor=\"#999\"\r\n                                                                    primaryIndex={1}\r\n                                                                    secondaryInitialSize={400}\r\n                                                                    onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n\r\n                                                                >\r\n                                                                    <div>\r\n                                                                        <ContentPanel style={this.state.showTest === true ? { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                                            <Card className=\"border-0\">\r\n                                                                                <Card.Body className='p-0'>\r\n                                                                                    <Row className='no-gutters'>\r\n                                                                                        <Col md={12}>\r\n                                                                                            <Card>\r\n                                                                                                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                                    <span style={{ display: \"inline-block\" }}>\r\n                                                                                                        <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                                                                                                    </span>\r\n                                                                                                    <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                                                        onClick={() => this.showTestAndSample()}\r\n                                                                                                    >\r\n                                                                                                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                                                        {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                                                    </button>\r\n                                                                                                    {/* </div> */}\r\n                                                                                                </Card.Header>\r\n                                                                                                <Card.Body className='p-0'>\r\n                                                                                                    <TransactionListMasterJson\r\n                                                                                                        paneHeight={this.state.initialVerticalWidth}\r\n                                                                                                        masterList={this.props.Login.masterData.searchedTest || testList}\r\n                                                                                                        selectedMaster={this.props.Login.masterData.selectedTest}\r\n                                                                                                        primaryKeyField=\"ntransactiontestcode\"\r\n                                                                                                        getMasterDetail={this.props.getTestChildTabDetailRegistration}\r\n                                                                                                        inputParam={{\r\n                                                                                                            ...this.state.testChildGetParam,\r\n                                                                                                            resultDataState: this.state.resultDataState,\r\n                                                                                                            testCommentDataState: this.state.testCommentDataState,\r\n                                                                                                            testAttachmentDataState: this.state.testAttachmentDataState,\r\n                                                                                                        }}\r\n                                                                                                        additionalParam={[]}\r\n                                                                                                        mainField=\"stestsynonym\"\r\n                                                                                                        selectedListName=\"selectedTest\"\r\n                                                                                                        objectName=\"test\"\r\n                                                                                                        listName=\"IDS_TEST\"\r\n                                                                                                        //  jsonField={'jsondata'}\r\n                                                                                                        pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                                                                        showStatusLink={true}\r\n                                                                                                        subFieldsLabel={true}\r\n                                                                                                        statusFieldName=\"stransdisplaystatus\"\r\n                                                                                                        statusField=\"ntransactionstatus\"\r\n                                                                                                        needMultiSelect={true}\r\n                                                                                                        subFields={this.state.testListColumns || []}\r\n                                                                                                        moreField={this.state.testMoreField}\r\n                                                                                                        needValidation={false}\r\n                                                                                                        showStatusName={true}\r\n                                                                                                        needFilter={false}\r\n                                                                                                        filterColumnData={this.props.filterTransactionList}\r\n                                                                                                        searchListName=\"searchedTest\"\r\n                                                                                                        searchRef={this.searchTestRef}\r\n                                                                                                        filterParam={this.state.filterTestParam}\r\n                                                                                                        selectionField=\"ntransactionstatus\"\r\n                                                                                                        selectionFieldName=\"stransdisplaystatus\"\r\n                                                                                                        // childTabsKey={[\"RegistrationTestComment\"]}\r\n                                                                                                        childTabsKey={[\"RegistrationParameter\", \"RegistrationTestComment\"]}\r\n                                                                                                        handlePageChange={this.handleTestPageChange}\r\n                                                                                                        buttonCount={5}\r\n                                                                                                        skip={this.state.testskip}\r\n                                                                                                        take={this.state.testtake}\r\n                                                                                                        showMoreResetList={true}\r\n                                                                                                        showMoreResetListName=\"RegistrationGetSample\"\r\n                                                                                                        selectionList={this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                                                                        selectionColorField=\"scolorhexcode\"\r\n                                                                                                        // selectionList=\r\n                                                                                                        // actionIcons={\r\n                                                                                                        //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                                                                                                        //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                                                                                                        //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\r\n                                                                                                        //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\r\n                                                                                                        // }\r\n                                                                                                        commonActions={\r\n                                                                                                            <>\r\n                                                                                                                {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                                                                <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                                                                    {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                                                                    <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                                                        //title={\"Add Test\"}\r\n                                                                                                                        data-for=\"tooltip-common-wrap\"\r\n                                                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDTEST\" })}\r\n                                                                                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1}\r\n                                                                                                                        onClick={() => this.props.addMoreTest({\r\n                                                                                                                            ...this.state.addTestParam,\r\n                                                                                                                            skip: this.state.skip, take: (this.state.skip + this.state.take)\r\n                                                                                                                        }, this.state.addTestId)}\r\n                                                                                                                    >\r\n                                                                                                                        <FontAwesomeIcon icon={faPlus} />\r\n                                                                                                                    </Nav.Link>\r\n\r\n                                                                                                                    <Nav.Link\r\n                                                                                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                                                        //title={\"Cancel/Reject Test\"}\r\n                                                                                                                        data-for=\"tooltip-common-wrap\"\r\n                                                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTTEST\" })}\r\n                                                                                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1}\r\n                                                                                                                        onClick={() => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                                        <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                                                                                    </Nav.Link>\r\n                                                                                                                </ProductList>\r\n                                                                                                                {/* </Tooltip> */}\r\n                                                                                                            </>\r\n                                                                                                        }\r\n                                                                                                    />\r\n                                                                                                </Card.Body>\r\n                                                                                            </Card>\r\n                                                                                        </Col>\r\n                                                                                    </Row>\r\n                                                                                </Card.Body>\r\n                                                                            </Card>\r\n                                                                        </ContentPanel>\r\n                                                                        <ContentPanel style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                                            <Card className=\"border-0\">\r\n                                                                                <Card.Body className='p-0'>\r\n                                                                                    <Card className='p-0'>\r\n                                                                                        <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                                <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                                            </span>\r\n                                                                                            <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                                                onClick={() => this.showTestAndSample()}>\r\n                                                                                                <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                                {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                                            </button>\r\n                                                                                        </Card.Header>\r\n                                                                                        <Card.Body>\r\n                                                                                            <PerfectScrollbar>\r\n                                                                                                <div style={{ height: this.state.initialVerticalWidth }}>\r\n\r\n                                                                                                    {this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                                                                                        <SampleInfoView\r\n                                                                                                            data={(this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0) ?\r\n                                                                                                                this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {}}\r\n                                                                                                            SingleItem={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ?\r\n                                                                                                                this.state.SingleItem : []}\r\n                                                                                                            screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                                            userInfo={this.props.Login.userInfo}\r\n\r\n                                                                                                        />\r\n                                                                                                        :\r\n                                                                                                        <SampleGridTab\r\n                                                                                                            userInfo={this.props.Login.masterData.userInfo || {}}\r\n                                                                                                            GridData={this.props.Login.masterData.selectedSample || []}\r\n                                                                                                            masterData={this.props.Login.masterData}\r\n                                                                                                            inputParam={this.props.Login.inputParam}\r\n                                                                                                            dataState={this.state.sampleGridDataState}\r\n                                                                                                            dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                                            extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                                                                            detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                                                                            primaryKeyField={\"npreregno\"}\r\n                                                                                                            expandField=\"expanded\"\r\n                                                                                                            screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                                        //  jsonField={\"jsondata\"}\r\n                                                                                                        />\r\n                                                                                                    }\r\n                                                                                                </div>\r\n                                                                                            </PerfectScrollbar>\r\n                                                                                        </Card.Body>\r\n                                                                                    </Card>\r\n                                                                                </Card.Body>\r\n                                                                            </Card>\r\n                                                                        </ContentPanel>\r\n                                                                    </div>\r\n                                                                    <div>\r\n                                                                        <PerfectScrollbar>\r\n                                                                            <div style={{ height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\" }}>\r\n                                                                                {this.state.showSample ?\r\n                                                                                    <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'} tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n                                                                                    this.state.showTest ?\r\n                                                                                        // <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'} tabDetail={this.testTabDetail()} onTabChange={this.ontestTabChange} />\r\n                                                                                        <Card>\r\n                                                                                            <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                                                    <h4 className=\"card-title\">Parameter Results</h4>\r\n                                                                                                </span>\r\n                                                                                            </Card.Header>\r\n                                                                                            <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'}\r\n                                                                                                tabDetail={this.testTabDetail()}\r\n                                                                                                onTabChange={this.ontestTabChange} />\r\n                                                                                        </Card>\r\n                                                                                        : \"\"}\r\n                                                                            </div>\r\n                                                                        </PerfectScrollbar>\r\n                                                                    </div>\r\n                                                                </SplitterLayout>\r\n                                                            </div>\r\n                                                        </>\r\n                                                    </div>\r\n                                                </ScrollBar> :\r\n                                                this.state.layout === 3 ?\r\n                                                    <>\r\n                                                        {this.state.showSample ?\r\n\r\n                                                            <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'}\r\n                                                                tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n\r\n                                                            this.state.showTest ?\r\n                                                                <Card>\r\n                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                            <h4 className=\"card-title\">Parameter Results</h4>\r\n                                                                        </span>\r\n                                                                    </Card.Header>\r\n                                                                    <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'}\r\n                                                                        tabDetail={this.testTabDetail()}\r\n                                                                        onTabChange={this.ontestTabChange} />\r\n                                                                </Card>\r\n                                                                : \"\"}\r\n                                                    </>\r\n                                                    : \"\"}\r\n                                    </PerfectScrollbar>\r\n                                </SplitterLayout>\r\n                            </ListWrapper>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper >\r\n                {\r\n                    this.props.Login.openPortal ?\r\n                        <PortalModal>\r\n                            <PreRegisterSlideOutModal\r\n                                postParamList={this.postParamList}\r\n                                PrevoiusLoginData={this.PrevoiusLoginData}\r\n                                closeModal={this.closeModal}\r\n                                operation={\"create\"}\r\n                                screenName={\"IDS_REGISTRATION\"}\r\n                                onSaveClick={this.onSaveClick}\r\n                                validateEsign={this.validateEsign}\r\n                                updateStore={this.props.updateStore}\r\n                                comboComponents={this.state.comboComponents}\r\n                                withoutCombocomponent={this.state.withoutCombocomponent}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                fromDate={this.fromDate}\r\n                                toDate={this.toDate}\r\n                              //  specBasedComponent={this.state.specBasedComponent}\r\n                                mandatoryFields={[\r\n                                    { \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                                    { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sproductname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]}\r\n                            />\r\n                        </PortalModal>\r\n                        : \"\"\r\n                }\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        //|| this.props.Login.loadEsign}\r\n                        closeModal={this.props.Login.loadRegSubSample ||\r\n                            this.props.Login.loadFile ||\r\n                            this.props.Login.loadChildTest ? this.closeChildModal : this.closeModal}\r\n                        size={this.props.Login.parentPopUpSize}\r\n                        loginoperation={this.props.Login.loadPrinter ? true : false}\r\n                        buttonLabel={this.props.Login.loadPrinter ? \"print\" : undefined}\r\n                        operation={this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.childoperation : this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.loadTest || this.props.Login.loadFile ?\r\n                            this.props.Login.ChildscreenName : this.props.Login.screenName}\r\n                        esign={this.props.Login.loadEsign}\r\n                        innerPopup={this.props.Login.loadComponent}\r\n                        onSaveClick={this.props.Login.loadRegSubSample ? this.onSaveSubSampleClick : this.props.Login.loadFile ? this.onSaveFileClick :\r\n                            this.props.Login.loadPrinter ? this.onSavePrinterClick :\r\n                                this.props.Login.loadChildTest ? this.onSaveChildTestClick : this.onSaveClick}\r\n                        validateEsign={this.validateEsign}\r\n                        showSaveContinue={this.props.Login.showSaveContinue}\r\n                        selectedRecord={!this.props.Login.loadEsign ? this.props.Login.loadComponent ? this.state.selectComponent : this.props.Login.loadPrinter ? this.state.selectedPrinterData\r\n                            : this.props.Login.loadTest ? this.state.selectedTestData : this.props.Login.loadFile ? this.state.selectedFile\r\n                                : this.props.Login.loadPoolSource ? this.state.selectedSourceData : this.state.selectedRecord : this.state.selectedRecord}\r\n                        mandatoryFields={this.mandatoryList(this.props.Login.loadPreregister,\r\n                            this.props.Login.loadPrinter, this.props.Login.loadFile,\r\n                            this.props.Login.loadChildTest, this.props.Login.loadRegSubSample)}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.loadRegSubSample ?\r\n                                <AddSubSample\r\n                                    editfield={this.props.Login.masterData.DynamicDesign && JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)}\r\n                                    Component={this.props.Login.lstComponent || []}\r\n                                    selectComponent={this.state.selectedRecord}\r\n                                    templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                        this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                    defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                    handleDateChange={this.handleDateSubSampleChange}\r\n                                    onInputOnChange={this.onInputOnSubSampleChange}\r\n                                    onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                    comboData={this.props.Login.regSubSamplecomboData}\r\n                                    onComboChange={this.onComboSubSampleChange}\r\n                                    onComponentChange={this.onComponentChange}\r\n                                    TestCombined={this.props.Login.TestCombined || []}\r\n                                    TestChange={this.onComboChange}\r\n                                    selectedTestData={this.state.selectedRecord}\r\n                                    childoperation={this.props.Login.operation}\r\n                                    specBasedComponent={this.props.Login.specBasedComponent}\r\n\r\n                                />\r\n                                : this.props.Login.loadFile ? <AddFile\r\n                                    selectedFile={this.state.selectedFile || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onDrop={this.onDropComponentFile}\r\n                                    deleteAttachment={this.deleteAttachment}\r\n                                    actionType={this.state.actionType}\r\n                                    maxSize={20}\r\n                                    maxFiles={1}\r\n                                /> :\r\n                                    this.props.Login.loadPrinter ?\r\n                                        <AddPrinter\r\n                                            printer={this.props.Login.printer}\r\n                                            selectedPrinterData={this.state.selectedPrinterData}\r\n                                            PrinterChange={this.PrinterChange}\r\n                                        /> : this.props.Login.loadChildTest ? <AddTest\r\n                                            TestCombined={this.props.Login.availableTest}\r\n                                            selectedTestData={this.state.selectedRecord}\r\n                                            TestChange={this.onComboChange}\r\n                                        /> : \"\"\r\n                        }\r\n                    />\r\n                }\r\n                {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            //  if (!nneedsubsample) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            if (fieldName === 'ntzdreceivedate') {\r\n                selectedRecord[\"ntzdreceivedate\"] = comboData;\r\n                this.setState({ selectedRecord })\r\n            } else {\r\n                // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                //     //selectComponent[\"nneedservice\"] = true;\r\n                // }\r\n                selectedRecord[fieldName] = comboData;\r\n                selectedRecord[\"Sample Name\"] = comboData.label;\r\n                selectedRecord[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n                selectedRecord[\"ntestgrouptestcode\"] = [];\r\n\r\n                this.props.componentTest(selectedRecord, true, this.props.Login.specBasedComponent,\r\n                    this.props.Login.Conponent)\r\n            }\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         selectComponent\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     const selectComponent = this.state.selectComponent || {};\r\n            //     selectComponent[fieldName] = comboData;\r\n            //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n            //     this.setState({ selectComponent })\r\n            // }\r\n        }\r\n\r\n    }\r\n    onInputOnSubSampleChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        let parentList = []\r\n        let childComboList = []\r\n        let childColumnList = {}\r\n\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const inputParem = {\r\n            child: control.child,\r\n            source: control.source,\r\n            primarykeyField: control.valuemember,\r\n            value: comboData.value,\r\n            item: comboData.item,\r\n            label: comboName,\r\n            nameofdefaultcomp: control.name\r\n        }\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        if (control.child && control.child.length > 0) {\r\n            childComboList = getSameRecordFromTwoArrays(this.state.regSubSamplecomboComponents,\r\n                control.child, \"label\")\r\n            childColumnList = {};\r\n            childColumnList = childComboList.map(columnList => {\r\n                const val = comboChild(this.state.regSubSamplecomboComponents,\r\n                    columnList, childColumnList, false);\r\n                //  childColumnList = val.childColumnList\r\n                return val.childColumnList;\r\n            })\r\n\r\n            parentList = getSameRecordFromTwoArrays(this.state.regSubSamplewithoutCombocomponent,\r\n                control.child, \"label\")\r\n\r\n            this.props.getChildValues(inputParem,\r\n                this.props.Login.userInfo, selectedRecord, this.props.Login.regSubSamplecomboData,\r\n                childComboList, childColumnList, this.state.regSubSamplewithoutCombocomponent,\r\n                [...childComboList, ...parentList])\r\n        } else {\r\n            this.setState({ selectedRecord })\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { selectedRecord }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        if (operation === 'create') {\r\n            let objSubSample = this.state.selectedRecord;\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n            const userInfo = this.props.Login.userInfo;\r\n\r\n            let saveSubSample = {};\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.selectedSample, sampleList, 'npreregno')\r\n\r\n            const findSampleAlloSpec = [...new Set(sampleList.map(item => item.nallottedspeccode))];\r\n            if (this.props.Login.specBasedComponent) {\r\n                saveSubSample[\"nspecsampletypecode\"] = objSubSample[\"nspecsampletypecode\"] ? objSubSample[\"nspecsampletypecode\"] : -1\r\n                saveSubSample[\"ncomponentcode\"] = objSubSample[\"ncomponentcode\"] ? objSubSample[\"ncomponentcode\"].value : -1\r\n            } else {\r\n                const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\r\n                saveSubSample[\"nspecsampletypecode\"] = findSampleSpec[0] ? findSampleSpec[0] : -1;\r\n            }\r\n\r\n            saveSubSample[\"jsondata\"] = {}\r\n            saveSubSample[\"jsonuidata\"] = {}\r\n            const dateList = []\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                //let componentrowlabel = ''\r\n                                // let componentrowvalue = ''\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\r\n                                            { value: objSubSample[componentrow.label].value, label: objSubSample[componentrow.label].label } : -1\r\n\r\n                                        saveSubSample[\"jsonuidata\"][componentrow.label] = objSubSample[componentrow.label] ? objSubSample[componentrow.label].label : \"\"\r\n\r\n                                        // if (componentrow.mandatory || objSubSample[componentrow.label]) {\r\n                                        //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n                                        //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label].label\r\n                                        // }\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            saveSubSample[\"jsondata\"][componentrow.label] = convertDateTimetoString(objSubSample[componentrow.label] ?\r\n                                                objSubSample[componentrow.label] : new Date(), userInfo);\r\n\r\n                                            saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n                                        } else {\r\n                                            saveSubSample[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                convertDateTimetoString(objSubSample[componentrow.label] ?\r\n                                                    objSubSample[componentrow.label] : new Date(), userInfo) :\r\n                                                objSubSample[componentrow.label] ? convertDateTimetoString(objSubSample[componentrow.label] ?\r\n                                                    objSubSample[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n                                            saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            saveSubSample[\"jsondata\"][`tz${componentrow.label}`] = objSubSample[`tz${componentrow.label}`] ?\r\n                                                { value: objSubSample[`tz${componentrow.label}`].value, label: objSubSample[`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            saveSubSample[\"jsonuidata\"][`tz${componentrow.label}`] = saveSubSample[\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\r\n                                            objSubSample[componentrow.label] : \"\"\r\n\r\n                                        saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n\r\n                                        // if (objSubSample[componentrow.label]) {\r\n                                        //     componentrowlabel = componentrowlabel + '&' + objSubSample.label\r\n                                        //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label]\r\n                                        // }\r\n                                    }\r\n                                    return saveSubSample;\r\n                                })\r\n                                //saveSubSample[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\r\n                                        { value: objSubSample[component.label].value, label: objSubSample[component.label].label } : -1\r\n\r\n                                    saveSubSample[\"jsonuidata\"][component.label] = objSubSample[component.label] ? objSubSample[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        saveSubSample[\"jsondata\"][component.label] = convertDateTimetoString(objSubSample[component.label] ?\r\n                                            objSubSample[component.label] : new Date(), userInfo);\r\n\r\n                                        saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n                                    } else {\r\n                                        saveSubSample[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            convertDateTimetoString(objSubSample[component.label] ?\r\n                                                objSubSample[component.label] : new Date(), userInfo) :\r\n                                            objSubSample[component.label] ? convertDateTimetoString(objSubSample[component.label] ?\r\n                                                objSubSample[component.label] : new Date(), userInfo) : \"\";\r\n                                        saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        saveSubSample[\"jsondata\"][`tz${component.label}`] = objSubSample[`tz${component.label}`] ?\r\n                                            { value: objSubSample[`tz${component.label}`].value, label: objSubSample[`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        saveSubSample[\"jsonuidata\"][`tz${component.label}`] = saveSubSample[\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\r\n                                        objSubSample[component.label] : \"\"\r\n\r\n                                    saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n                                }\r\n                            }\r\n                            return saveSubSample;\r\n                        }\r\n                        )\r\n                        return saveSubSample;\r\n                    })\r\n                    return saveSubSample;\r\n                })\r\n\r\n            saveSubSample[\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1;\r\n            // Component.unshift(saveSubSample);\r\n\r\n            let selectedTestData = objSubSample[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n\r\n            // const Test = this.props.Login.Test || [];\r\n            // const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n            const map = {}\r\n            map['RegistrationSample'] = saveSubSample\r\n            map['subsampleDateList'] = dateList\r\n            map['subsampledateconstraints'] = this.state.subsampledateconstraints;\r\n            map['testgrouptest'] = selectedTestArray\r\n            map['npreregno'] = sampleList.map(item => item.npreregno).join(\",\")\r\n            map['userinfo'] = userInfo\r\n            map['checkBoxOperation'] = 3\r\n            map['ntype'] = 3\r\n            map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n            map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\r\n            map[\"checkBoxOperation\"] = 3\r\n            map[\"masterData\"] = this.props.Login.masterData\r\n            map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"\r\n            map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n\r\n            const inputParam = {\r\n                inputData: map,\r\n                postParamList: this.postParamList,\r\n            }\r\n\r\n            this.props.saveSubSample(inputParam);\r\n        } else {\r\n            this.onUpdateSubSampleRegistration(saveType, formRef, operation);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    mandatoryList = (prereg, printer, file, childtest, regSubSample) => {\r\n        let mandatory = [];\r\n        if (file) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_IMPORTFILE\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }\r\n            ];\r\n        }\r\n        else if (printer) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_PRINTER\", \"dataField\": \"sprintername\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        } else if (regSubSample) {\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        mandatory.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" })\r\n\r\n                                    }\r\n                                    return mandatory;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    mandatory.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" }) : \"\"\r\n\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n\r\n        else if (childtest) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ];\r\n        }\r\n        return mandatory;\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedFile = this.state.selectedFile || {};\r\n        selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file)\r\n        this.setState({\r\n            selectedFile, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    onSaveChildTestClick = (saveType, formRef) => {\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.RegistrationGetSample.slice(this.state.skip, (this.state.skip + this.state.take)), \"npreregno\");\r\n        const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, masterData.RegistrationGetSample.slice(this.state.skip, (this.state.skip + this.state.take)), \"npreregno\");\r\n        //  selectedSubsample =masterData.selectedSubSample.slice(this.state.skip, (this.state.skip + this.state.take));\r\n        const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate,\r\n            this.props.Login.masterData.RealToDate, this.props.Login.userInfo)\r\n        const inputData = {\r\n            TestGroupTest: this.state.selectedRecord.ntestgrouptestcode.map(value => value.item),\r\n            RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\r\n            ntransactionsamplecode: ntransactionsamplecode,\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\r\n            ntype: 3,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            npreregno: selectedSample &&\r\n                selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            // ntransactionsamplecode: selectedSubsample &&\r\n            // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            FromDate: obj.fromDate,\r\n            ToDate: obj.toDate,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n        }\r\n\r\n\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"registration\",\r\n            operation: this.props.Login.operation,\r\n            methodUrl: \"Test\",\r\n            responseKeyList: [\r\n                { \"responseKey\": \"selectedSample\", \"masterDataKey\": \"RegistrationGetSample\", \"primaryKey\": \"npreregno\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedSubSample\", \"masterDataKey\": \"RegistrationGetSubSample\", \"primaryKey\": \"ntransactionsamplecode\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedTest\", \"masterDataKey\": \"RegistrationGetTest\", \"primaryKey\": \"ntransactiontestcode\", \"dataAction\": \"add\" }],\r\n            saveType, formRef,\r\n            postParamList: this.postParamList,\r\n\r\n        }\r\n        if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.createRegistrationTest(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    getRegistrationComboService = (ScreenName, operation,\r\n        primaryKeyField, masterData, userInfo, editId) => {\r\n         const ndesigntemplatemappingcodefilter=  this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode\r\n       if(ndesigntemplatemappingcodefilter===this.props.Login.masterData.ndesigntemplatemappingcode){\r\n         let data = [];\r\n        const withoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.registrationTemplate\r\n            && this.props.Login.masterData.registrationTemplate.jsondata\r\n        if (Layout !== undefined) {\r\n            Layout.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    data.push(componentrow)\r\n                                } else {\r\n                                    withoutCombocomponent.push(componentrow)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            : component.inputtype === \"combo\" ?\r\n                                data.push(component) : withoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n\r\n            })\r\n            const comboComponents = data\r\n            let childColumnList = {};\r\n            data.map(columnList => {\r\n                const val = this.comboChild(data, columnList, childColumnList, true);\r\n                data = val.data;\r\n                childColumnList = val.childColumnList\r\n                return null;\r\n            })\r\n            const mapOfFilterRegData = {\r\n                nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\r\n            }\r\n            this.props.getPreviewTemplate(masterData, userInfo, editId,\r\n                data, this.state.selectedRecord, childColumnList,\r\n                comboComponents, withoutCombocomponent, true, false,\r\n                mapOfFilterRegData, false, \"create\", this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename)\r\n        } else {\r\n            toast.info(\"Configure the preregister template for this registrationtype\")\r\n        }\r\n    }else {\r\n        toast.info(\"select the approved design template\")\r\n    }\r\n    }\r\n    comboChild = (data, columnList, childColumnList, slice) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n                    let childList = []\r\n                    columnList.child.map(childData => {\r\n                        const index = data.findIndex(x => x.label === childData.label)\r\n                        if (index !== -1) {\r\n                            childList.push(data[index])\r\n                            if (slice) {\r\n                                data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                            }\r\n                        }\r\n                        return data;\r\n                    })\r\n                    childColumnList[columnList.label] = childList;\r\n                    if (childList.length > 0) {\r\n                        childList.map(y => {\r\n                            if (y.hasOwnProperty(\"child\")) {\r\n                                const val = this.comboChild(data, y, childColumnList, slice)\r\n                                retunObj[\"data\"] = val.data;\r\n                                retunObj[\"childColumnList\"] = val.childColumnList;\r\n                            } else {\r\n                                retunObj[\"data\"] = data;\r\n                                retunObj[\"childColumnList\"] = childColumnList;\r\n                            }\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        retunObj[\"data\"] = data;\r\n                        retunObj[\"childColumnList\"] = childColumnList;\r\n                    }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take\r\n        });\r\n    };\r\n\r\n    handleSubSamplePageChange = e => {\r\n        this.setState({\r\n            subsampleskip: e.skip,\r\n            subsampletake: e.take\r\n        });\r\n    };\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterChange = (event, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSample: this.props.Login.masterData.selectedSample,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab\r\n            }\r\n            this.props.getSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    onSubSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSample: this.props.Login.masterData.selectedSample,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab\r\n            }\r\n            this.props.getSubSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    ontestTabChange = (tabProps) => {\r\n        const activeTestTab = tabProps.screenName;\r\n        if (activeTestTab !== this.props.Login.activeTestTab) {\r\n            if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedTest: this.props.Login.masterData.selectedTest,\r\n                    ntransactiontestcode: this.props.Login.masterData.selectedTest ?\r\n                        String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    npreregno: this.props.Login.masterData.selectedSample ?\r\n                        this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                }\r\n                this.props.getTestChildTabDetailRegistration(inputData, true)\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n            }\r\n        }\r\n    }\r\n\r\n    onDropComponentFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedFile = this.state.selectedFile || {};\r\n        selectedFile[fieldName] = onDropAttachFileList(selectedFile[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedFile, actionType: \"new\" });\r\n    }\r\n\r\n    handleFilterDateChange = (dateName, dateValue) => {\r\n        const { selectedFilter } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedFilter[dateName] = dateValue;\r\n        this.setState({ selectedFilter });\r\n    }\r\n\r\n\r\n    onUpdateRegistrationConfirm = () => {\r\n        this.showAlert();\r\n        this.onUpdateRegistration(this.props.Login.regEditParam.saveType,\r\n            this.props.Login.regEditParam.formRef,\r\n            this.props.Login.regEditParam.operation, 2)\r\n    }\r\n\r\n    confirmAlert = () => {\r\n        if (this.state.showConfirmAlert) {\r\n            if (this.props.Login.regDateEditConfirmMessage) {\r\n                this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n                    this.props.Login.regDateEditConfirmMessage,\r\n                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                    () => this.onUpdateRegistrationConfirm(),\r\n                    undefined,\r\n                    () => this.showAlert());\r\n            }\r\n            else {\r\n                this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n                    this.props.Login.booleanFlag, \"ok\", \"Cancel\",\r\n                    () => this.insertRegistration(false), undefined, () => this.showAlert());\r\n            }\r\n        }\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    showAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlert: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    showSampleInfo() {\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n    showSample() {\r\n        this.setState({\r\n            showSample: true, showSubSample: false,\r\n            showTest: false\r\n        })\r\n    }\r\n\r\n    showTest() {\r\n        this.setState({\r\n            showSample: false, showSubSample: false,\r\n            showTest: true\r\n        })\r\n    }\r\n\r\n    showSubSample() {\r\n        this.setState({\r\n            showSample: false, showTest: false,\r\n            showSubSample: !this.state.showSubSample\r\n        })\r\n    }\r\n\r\n    showTestDetails() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showSample: !this.state.showSample, showTest: !this.state.showTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    AddFile = () => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue;\r\n        let booleanmanuf = true;\r\n        if (RealRegTypeValue === RegistrationType.PLASMA_POOL) {\r\n            booleanmanuf = selectedRecord[\"nmanufcode\"] > 0 && selectedRecord[\"nmanufcode\"] !== undefined ? true : false\r\n        }\r\n        if (booleanmanuf) {\r\n            if (this.state.selectedRecord.nallottedspeccode !== undefined) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadFile: true,\r\n                        ChildscreenName: \"File\", childoperation: \"Import\",\r\n                        parentPopUpSize: \"lg\", selectedFile: undefined\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMANUFACTURER\" }));\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if ((name !== \"nnoofcontainer\") && (value === 0 || value === 0.0)) {\r\n            selectComponent[name] = '';\r\n            this.setState({ selectComponent });\r\n        } else {\r\n            selectComponent[name] = value;\r\n            this.setState({ selectComponent });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onSampleTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nsampletypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getSampleTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    ConfirmComponent = (props) => {\r\n        this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to Override the Existing Components ?\",\r\n            \"ok\", \"cancel\", () => this.getComponentfromJava(props));\r\n    }\r\n\r\n    onRegTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nregtypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getRegTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n    acceptRegistration = (registerId, skip, take) => {\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample\r\n                && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n\r\n        // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\r\n        let acceptList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        if (acceptList && acceptList.length > 0) {\r\n            if (acceptList.every(this.checkPreregisterAndQuarentine)) {\r\n                if (this.props.Login.masterData.selectedTest.length > 0) {\r\n                    if (checkTestPresent(this.props.Login.masterData.RegistrationGetTest, acceptList)) {\r\n                        let Map = {};\r\n                        Map[\"fromdate\"] = \"\";\r\n                        Map[\"todate\"] = \"\";\r\n                        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                        Map[\"nfilterstatus\"] = -1;\r\n                        Map[\"npreregno\"] = acceptList &&\r\n                            acceptList.map(sample => sample.npreregno).join(\",\");\r\n                        // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\r\n                        //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\r\n                        Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                        Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                        Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\r\n                        Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");;\r\n                        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                        Map[\"nflag\"] = 2;\r\n                        Map[\"ntype\"] = 3;\r\n                        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                            && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\r\n                        Map[\"checkBoxOperation\"] = 3\r\n                        Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                        let inputParam = {\r\n                            inputData: Map,\r\n                            postParamList: this.postParamList,\r\n                            action: 'accept'\r\n                        }\r\n                        this.confirmMessage.confirm(\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_ACCEPTREGISTRATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                            () => this.acceptRegistrationConfirm(inputParam, registerId));\r\n                    } else {\r\n                        let Map = {};\r\n                        Map[\"fromdate\"] = \"\";\r\n                        Map[\"todate\"] = \"\";\r\n                        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                        Map[\"nfilterstatus\"] = -1;\r\n                        Map[\"npreregno\"] = acceptList &&\r\n                            acceptList.map(sample => sample.npreregno).join(\",\");\r\n                        // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\r\n                        //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\r\n                        Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                        Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                        Map[\"nflag\"] = 2;\r\n                        Map[\"ntype\"] = 1;\r\n                        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                            && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\r\n                        Map[\"checkBoxOperation\"] = 3\r\n                        Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                        let inputParam = {\r\n                            inputData: Map,\r\n                            postParamList: this.postParamList,\r\n                            action: 'accept'\r\n                        }\r\n                        this.confirmMessage.confirm(\"Confirmation\", \"Confirmation!\", \"Samples With atleast One Preregister Test Will Only Accept.Do You Want Accept?\",\r\n                            \"OK\", \"Cancel\", () => this.acceptRegistrationConfirm(inputParam, registerId));\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDTESTTOREGISTERSAMPLES\" }));\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGQUARANTINESAMPLES\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGQUARANTINESAMPLES\" }));\r\n        }\r\n    }\r\n\r\n    acceptRegistrationConfirm = (inputParam, registerId) => {\r\n        if (showEsign(this.props.Login.userRoleControlRights,\r\n            this.props.Login.userInfo.nformcode, registerId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    parentPopUpSize: 'lg',\r\n                    screenName: this.props.Login.screenName,\r\n                    operation: 'accept'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.acceptRegistration(inputParam, this.props.Login.masterData)\r\n        }\r\n\r\n    }\r\n\r\n    selectQuarantine = (quarantineId, skip, take) => {\r\n        let sampleList = this.props.Login.masterData.searchedSample || (this.props.Login.masterData.RegistrationGetSample ? [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take) : []);\r\n        let quarentineList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (quarentineList && quarentineList.length > 0) {\r\n            if (quarentineList.every(this.checkPreregisterRecordQuarantine)) {\r\n\r\n                // let ntransactionstatus = this.props.Login.masterData.selectedSample &&\r\n                //     this.props.Login.masterData.selectedSample.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\r\n                //if (ntransactionstatus === transactionStatus.PREREGISTER) {\r\n                let Map = {};\r\n                Map[\"fromdate\"] = \"\";\r\n                Map[\"todate\"] = \"\";\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = -1;\r\n                Map[\"npreregno\"] = quarentineList && quarentineList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 1;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3\r\n                Map[\"checkBoxOperation\"] = 3\r\n                Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                Map[\"ntransactionstatus\"] = quarentineList &&\r\n                    quarentineList.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\r\n                //Map[\"ninsertpreregno\"] = quarantineSample.quarantineSample.npreregno;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'quarantine'\r\n                }\r\n                //console.log(\"inputParam, quarantine:\", inputParam);\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, quarantineId)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'quarantine'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.preregRecordToQuarantine(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLES\" }))\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLES\" }))\r\n        }\r\n\r\n    }\r\n\r\n    checkPreregisterAndQuarentine(sample) {\r\n        return (sample.ntransactionstatus === transactionStatus.PREREGISTER || sample.ntransactionstatus === transactionStatus.QUARANTINE)\r\n    }\r\n\r\n    checkPreregisterRecordQuarantine(sample) {\r\n        return (sample.ntransactionstatus === transactionStatus.PREREGISTER)\r\n    }\r\n\r\n    onRegSubTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onDesignTemplateChange = (event, fieldName,labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        // if (comboData !== null) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n        // }\r\n    }\r\n\r\n    PrinterChange = (comboData, fieldName) => {\r\n        const selectedPrinterData = this.state.selectedPrinterData || {};\r\n        selectedPrinterData[fieldName] = comboData;\r\n        this.setState({ selectedPrinterData });\r\n    }\r\n\r\n\r\n\r\n    closeChildModal = () => {\r\n        let loadRegSubSample = this.props.Login.loadRegSubSample;\r\n        let loadFile = this.props.Login.loadFile;\r\n        let showSaveContinue = this.props.Login.showSaveContinue;\r\n        let screenName = this.props.Login.screenName;\r\n        let loadChildTest = this.props.Login.loadChildTest;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (this.props.Login.loadFile) {\r\n            loadFile = false;\r\n            screenName = this.props.Login.PopUpLabel\r\n        } else if (this.props.Login.loadChildTest) {\r\n            loadChildTest = false;\r\n            openModal = false;\r\n            selectedRecord = {}\r\n        }\r\n        else if (this.props.Login.loadRegSubSample) {\r\n            loadRegSubSample = false;\r\n            openModal = false;\r\n            selectedRecord = {}\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadRegSubSample, screenName, showSaveContinue,\r\n                loadFile, loadChildTest,\r\n                openModal,\r\n                parentPopUpSize: \"xl\", selectedRecord\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let loadPreregister = this.props.Login.loadPreregister;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let parentPopUpSize = this.props.Login.pare\r\n        let screenName = this.props.Login.screenName;\r\n        let loadPrinter = this.props.Login.loadPrinter;\r\n        let openPortal = this.props.Login.openPortal;\r\n        let Component = this.props.Login.Component;\r\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"accept\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"quarantine\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal = false\r\n                loadPreregister = false;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { loadEsign, openModal, openChildModal, loadPreregister }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                if (loadPreregister) {\r\n                    parentPopUpSize = 'xl'\r\n                }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { loadEsign, parentPopUpSize }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            loadPrinter = false;\r\n            loadPreregister = false;\r\n            selectedRecord = {};\r\n            openPortal = false;\r\n            subSampleDataGridList = []\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal, loadPreregister, selectedRecord,\r\n                    screenName, insertSourcePreregno: undefined,\r\n                    loadPrinter, openPortal,\r\n                    Component, subSampleDataGridList\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            this.onUpdateRegistration(saveType, formRef, operation);\r\n        }\r\n    }\r\n\r\n\r\n    onSavePrinterClick = () => {\r\n        let insertlist = [];\r\n        //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\r\n        const inputParam = {\r\n            classUrl: 'barcode',\r\n            methodUrl: 'Barcode',\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                npreregno: this.props.Login.insertPrinterPreregno,\r\n                sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\r\n                insertlist,\r\n                npreregno1: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.props.Login.ncontrolcode\r\n            },\r\n            operation: 'printer',\r\n            // dataState:this.state.sourceDataState,\r\n            // activeSampleTab:\"IDS_SOURCE\",\r\n            action: 'printer'\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: 'printer'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveFileClick = (saveType, formRef) => {\r\n        const selectedFile = this.state.selectedFile;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedFile.sfilename;\r\n        const formData = new FormData();\r\n        // if(nattachmenttypecode === attachmentType.FTP) {\r\n        if (acceptedFiles && acceptedFiles.length > 0) {\r\n            acceptedFiles.forEach((file, index) => {\r\n                formData.append(\"uploadedFile\" + index, file);\r\n            });\r\n            formData.append(\"filecount\", acceptedFiles.length);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEFILETOSUBMIT\" }));\r\n        }\r\n\r\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"nstudyplan\", JSON.stringify(selectedRecord.nallottedspeccode.value));\r\n        formData.append(\"testrequired\", JSON.stringify(selectedRecord.ntransactionstatus === 3 ? true : false));\r\n        formData.append(\"ntemplatemanipulationcode\", JSON.stringify(selectedRecord.ntemplatemanipulationcode));\r\n        formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.RealRegTypeValue.nregtypecode));\r\n        formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode));\r\n        this.props.ImportFile(formData, this.confirmMessage, this.props.Login);\r\n    }\r\n\r\n\r\n    sampleInfoDataStateChange = (event) => {\r\n        this.setState({\r\n            sampleGridDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_SOURCE\":\r\n                this.setState({\r\n                    sourceDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sourceDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    testdataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    testStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n\r\n    sampleTabDetail = () => {\r\n        let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n\r\n\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\r\n        let { skip, take } = this.state\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        tabMap.set(\"IDS_ATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.selectedSample}\r\n            masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSampleAttachment\"}\r\n            editName={\"EditSampleAttachment\"}\r\n            deleteName={\"DeleteSampleAttachment\"}\r\n            viewName={\"ViewSampleAttachment\"}\r\n            methodUrl={\"SampleAttachment\"}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleAttachment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLE\"\r\n            displayName=\"sarno\"\r\n        />)\r\n        tabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nsamplecommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLES\"\r\n            displayName=\"sarno\"\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    subsampleTabDetail = () => {\r\n        let npreregno = this.props.Login.masterData.selectedSample ?\r\n            this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactionsamplecode = this.props.Login.masterData.selectedSubSample ?\r\n            this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\r\n        let { skip, take } = this.state\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        const tabMap = new Map();\r\n\r\n        tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.selectedSample}\r\n            masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSampleAttachment\"}\r\n            editName={\"EditSampleAttachment\"}\r\n            deleteName={\"DeleteSampleAttachment\"}\r\n            viewName={\"ViewSampleAttachment\"}\r\n            methodUrl={\"SampleAttachment\"}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    npreregno,\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleAttachment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLE\"\r\n            displayName=\"sarno\"\r\n        />)\r\n\r\n        tabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSampleList}\r\n            masterAlertStatus=\"IDS_SELECTTESTTOADDCOMMENTS\"\r\n            primaryKeyField={\"nsamplecommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLES\"\r\n            displayName=\"sarno\"\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    testTabDetail = () => {\r\n\r\n        const testTabMap = new Map();\r\n        let testList = this.props.Login.masterData.RegistrationGetTest || [];\r\n        let { testskip, testtake } = this.state\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n        // const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\r\n        let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        testTabMap.set(\"IDS_PARAMETERRESULTS\", <RegistrationResultTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            screenName=\"IDS_PARAMETERRESULTS\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n        />)\r\n        testTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"selectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            dataState={this.state.testAttachmentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: this.props.Login.masterData.selectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedTest\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus=\"IDS_SELECTTESTTOADDCOMMENTS\"\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        return testTabMap;\r\n    }\r\n\r\n    getCommentsCombo = (event) => {\r\n\r\n        if (this.props.Login.selectedTest && this.props.Login.selectedTest.length > 0) {\r\n            this.props.getCommentsCombo(...event);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOADDCOMMENTS\" }))\r\n        }\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_PARAMETERRESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    testDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleComments(saveParam, acceptList);\r\n        }\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let testList = [];\r\n            if (this.props.Login.masterData.searchedTest !== undefined) {\r\n                testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n            } else {\r\n                testList = this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, acceptList);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        }\r\n    }\r\n\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        let acceptList = []\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedTest !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n        }\r\n        if (this.props.Login.operation === \"update\") {\r\n            acceptList.push(selectedRecord);\r\n        }\r\n        else {\r\n            acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        }\r\n\r\n\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam, acceptList);\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestAttachment(saveParam, this.props.Login.masterData.selectedTest);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n        }\r\n    }\r\n\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n        });\r\n        return temparray;\r\n    }\r\n\r\n\r\n    cancelSubSampleRecord = (controlcode, skip, take) => {\r\n        let testList = this.props.Login.masterData.searchedSubSample ||\r\n            (this.props.Login.masterData.RegistrationGetSubSample ?\r\n                [...this.props.Login.masterData.RegistrationGetSubSample].splice(skip, skip + take) : []);\r\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n\r\n        if (acceptList && acceptList.length > 0) {\r\n            // console.log(\"Success:\", dataitem);\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\r\n                let Map = {};\r\n                Map['npreregno'] = acceptList.map(x => x.npreregno).join(\",\");\r\n                Map['ntransactiontestcode'] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");\r\n                // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\r\n                // Map[\"ntransactionsamplecode\"] = acceptList.map(x => x.ntransactionsamplecode).join(\",\");\r\n                //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                // Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"npreregno\"] = acceptList &&\r\n                    acceptList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = acceptList &&\r\n                    acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelSample'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelSubSampleAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>\r\n                        this.props.intl.formatMessage({ id: sample.stransdisplaystatus })).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTTEST\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCANCELREJECT\" }));\r\n        }\r\n    }\r\n\r\n    cancelRecord = (controlcode, skip, take) => {\r\n        let testList = this.props.Login.masterData.searchedTest ||\r\n            (this.props.Login.masterData.RegistrationGetTest ?\r\n                [...this.props.Login.masterData.RegistrationGetTest].splice(skip, skip + take) : []);\r\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptList && acceptList.length > 0) {\r\n            // console.log(\"Success:\", dataitem);\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\r\n                let Map = {};\r\n                Map['ninsertpreregno'] = acceptList.map(x => x.npreregno).join(\",\");\r\n                // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\r\n                Map[\"ntransactiontestcode\"] = acceptList.map(x => x.ntransactiontestcode).join(\",\");\r\n                //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"npreregno\"] = acceptList &&\r\n                    acceptList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = acceptList &&\r\n                    acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.nneedsubsample;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelTest'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelTestAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>\r\n                        this.props.intl.formatMessage({ id: sample.stransdisplaystatus })).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTTEST\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCANCELREJECT\" }));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    addSubSample = (controlcode, skip, take) => {\r\n        let Map = {};\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n\r\n        let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (addSubSampleList && addSubSampleList.length > 0) {\r\n            const findTransactionStatus = [...new Set(addSubSampleList.map(item => item.ntransactionstatus))];\r\n\r\n            if (findTransactionStatus.length === 1) {\r\n                if (findTransactionStatus[0] === transactionStatus.PREREGISTER) {\r\n                    //   const findApprovalVersion = [...new Set(addSubSampleList.map(item => item.napprovalversioncode))];\r\n                    //   if (findApprovalVersion.length === 1) {\r\n                    const findSampleSpec = [...new Set(addSubSampleList.map(item => item.nallottedspeccode))];\r\n                    const findComponentReqSpec = [...new Set(addSubSampleList.map(item => item.ncomponentrequired))];\r\n                    const findSampleSpectemplate = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\r\n                    //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                    if (findSampleSpec.length === 1)//&& findComponent.length === 1 \r\n                    {\r\n                        let data = []\r\n                        const regSubSamplewithoutCombocomponent = []\r\n                        const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                            && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n                        if (Layout !== undefined) {\r\n                            Layout.map(row => {\r\n                                return row.children.map(column => {\r\n                                    return column.children.map(component => {\r\n                                        return component.hasOwnProperty(\"children\") ?\r\n                                            component.children.map(componentrow => {\r\n                                                if (componentrow.inputtype === \"combo\") {\r\n                                                    data.push(componentrow)\r\n                                                } else {\r\n                                                    regSubSamplewithoutCombocomponent.push(componentrow)\r\n                                                }\r\n                                                return null;\r\n                                            })\r\n                                            : component.inputtype === \"combo\" ? data.push(component) :\r\n                                                regSubSamplewithoutCombocomponent.push(component)\r\n                                    })\r\n                                })\r\n\r\n                            })\r\n                            const regSubSamplecomboComponents = data\r\n                            let regchildColumnList = {};\r\n                            data.map(columnList => {\r\n                                const val = comboChild(data, columnList, regchildColumnList, true);\r\n                                data = val.data;\r\n                                regchildColumnList = val.childColumnList\r\n                                return null;\r\n                            })\r\n                            //const Map={}\r\n                            // const findSamplentemplatemanipulationcode = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\r\n                            // Map[\"ntemplatemanipulationcode\"] = findSamplentemplatemanipulationcode[0];\r\n                            Map[\"nallottedspeccode\"] = findSampleSpec[0];\r\n                            Map[\"ntemplatemanipulationcode\"] = findSampleSpectemplate[0];\r\n                            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                            Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                                && this.props.Login.masterData.nneedsubsample;\r\n                            Map[\"npreregno\"] = addSubSampleList &&\r\n                                addSubSampleList.map(sample => sample.npreregno).join(\",\");\r\n                            Map[\"registrationsample\"] = addSubSampleList;\r\n\r\n                            this.props.addsubSampleRegistration(this.props.Login.masterData,\r\n                                this.props.Login.userInfo, data, this.state.selectedRecord,\r\n                                regchildColumnList, regSubSamplecomboComponents,\r\n                                regSubSamplewithoutCombocomponent,\r\n                                Map, controlcode, findComponentReqSpec[0]===3?true:false)\r\n                        } else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASECONFIGURETHESUBSAMPLETEMPLATE\" }));\r\n                        }\r\n\r\n                    } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                    }\r\n                    // } else {\r\n                    //    toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                    // }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLETOADDSUBSAMPLE\" }));\r\n                }\r\n            }\r\n\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOSUBSAMPLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        if (this.props.Login.columnList !== previousProps.Login.columnList) {\r\n\r\n            this.setState({\r\n                columnList: this.props.Login.columnList,\r\n                childColumnList: this.props.Login.childColumnList,\r\n                withoutCombocomponent: this.props.Login.withoutCombocomponent,\r\n                comboComponents: this.props.Login.comboComponents\r\n            });\r\n\r\n        }\r\n\r\n        if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\r\n            this.setState({\r\n                regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\r\n                regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\r\n                regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\r\n            });\r\n\r\n        }\r\n\r\n\r\n        if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\r\n            this.setState({ showSaveContinue: this.props.Login.showSaveContinue });\r\n\r\n        }\r\n        if (this.props.Login !== previousProps.Login) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\r\n            this.setState({ selectedPrinterData: this.props.Login.selectedPrinterData });\r\n        }\r\n        else if (this.props.Login.loadFile !== previousProps.Login.loadFile && (this.props.Login.loadFile === false)) {\r\n            this.setState({ selectedFile: undefined })\r\n        }\r\n        else if (this.props.Login.selectedFilter !== previousProps.Login.selectedFilter) {\r\n            this.setState({ selectedFilter: this.props.Login.selectedFilter });\r\n        }\r\n        if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\r\n            this.setState({ popUptestDataState: this.props.Login.popUptestDataState });\r\n        }\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n            const cancelId = controlMap.has(\"CancelTest\") ? controlMap.get(\"CancelTest\").ncontrolcode : -1;\r\n            const preRegisterId = controlMap.has(\"AddPreregister\") ? controlMap.get(\"AddPreregister\").ncontrolcode : -1;\r\n            const registerId = controlMap.has(\"RegisterAccept\") ? controlMap.get(\"RegisterAccept\").ncontrolcode : -1;\r\n            const editSampleId = controlMap.has(\"EditSample\") ? controlMap.get(\"EditSample\").ncontrolcode : -1;\r\n            const quarantineId = controlMap.has(\"RegisterQuarantine\") ? controlMap.get(\"RegisterQuarantine\").ncontrolcode : -1;\r\n            const addTestId = controlMap.has(\"AddNewTest\") ? controlMap.get(\"AddNewTest\").ncontrolcode : -1;\r\n            const printBarcodeId = controlMap.has(\"PrintBarcode\") ? controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\r\n            const cancelSampleId = controlMap.has(\"CancelReject\") ? controlMap.get(\"CancelReject\").ncontrolcode : -1;\r\n            const addSubSampleId = controlMap.has(\"AddSubSample\") ? controlMap.get(\"AddSubSample\").ncontrolcode : -1;\r\n            const editSubSampleId = controlMap.has(\"EditSubSample\") ? controlMap.get(\"EditSubSample\").ncontrolcode : -1;\r\n            const cancelSubSampleId = controlMap.has(\"CancelSubSample\") ? controlMap.get(\"CancelSubSample\").ncontrolcode : -1;\r\n\r\n            this.setState({\r\n                userRoleControlRights, controlMap, cancelId,\r\n                preRegisterId, registerId, editSampleId, quarantineId, addTestId, printBarcodeId,\r\n                cancelSampleId, addSubSampleId, editSubSampleId, cancelSubSampleId\r\n            });\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n\r\n            let { skip, take, testskip, testtake, subsampleskip, subsampletake, testCommentDataState,\r\n                resultDataState, sampleGridDataState, popUptestDataState, DynamicSampleColumns, DynamicSubSampleColumns,\r\n                DynamicTestColumns, DynamicGridItem, DynamicGridMoreField, SingleItem, testMoreField, testListColumns,\r\n                SubSampleDynamicGridItem, SubSampleDynamicGridMoreField, SubSampleSingleItem, sampleSearchField, subsampleSearchField,\r\n                testSearchField, testAttachmentDataState, sampleCommentDataState, sampledateconstraints,subsampledateconstraints } = this.state\r\n            if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n                const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n                DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\r\n                DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n                DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n\r\n                DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n                DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n                SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\r\n\r\n                SubSampleDynamicGridItem = dynamicColumn.subsamplegriditem ? dynamicColumn.subsamplegriditem : [];\r\n                SubSampleDynamicGridMoreField = dynamicColumn.subsamplegridmoreitem ? dynamicColumn.subsamplegridmoreitem : [];\r\n                SubSampleSingleItem = dynamicColumn.subsampledisplayfields ? dynamicColumn.subsampledisplayfields : [];\r\n                //console.log(\"Subsample\",SubSampleSingleItem)\r\n                testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\r\n                testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\r\n\r\n                sampleSearchField = dynamicColumn.samplesearchfields ? dynamicColumn.samplesearchfields : [];\r\n                subsampleSearchField = dynamicColumn.subsamplesearchfields ? dynamicColumn.subsamplesearchfields : [];\r\n                testSearchField = dynamicColumn.testsearchfields ? dynamicColumn.testsearchfields : [];\r\n\r\n                sampledateconstraints = dynamicColumn.sampledateconstraints || [];\r\n                subsampledateconstraints = dynamicColumn.subsampledateconstraints || [];\r\n\r\n                // specBasedComponent = true;\r\n            }\r\n            let showSample = this.props.Login.showSample === this.state.showTest || this.state.showSample\r\n            let showTest = showSample ? false : true\r\n            let stateSampleType = this.state.stateSampleType\r\n            let stateRegistrationType = this.state.stateRegistrationType\r\n            let stateRegistrationSubType = this.state.stateRegistrationSubType\r\n            let stateFilterStatus = this.state.stateFilterStatus\r\n            let stateDynamicDesign = this.state.stateDynamicDesign\r\n            if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\r\n\r\n                const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\",\r\n                    \"ssampletypename\", \"nsorter\", \"ascending\", false);\r\n                stateSampleType = sampleTypeMap.get(\"OptionList\")\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.RegistrationType !== previousProps.Login.masterData.RegistrationType) {\r\n\r\n                const registrationTypeMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\",\r\n                    \"sregtypename\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateRegistrationType = registrationTypeMap.get(\"OptionList\")\r\n            }\r\n\r\n            if (this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n                const registrationSubTypeMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\",\r\n                    \"sregsubtypename\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateRegistrationSubType = registrationSubTypeMap.get(\"OptionList\")\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.FilterStatus !== previousProps.Login.masterData.FilterStatus) {\r\n\r\n\r\n                const filterStatusMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\",\r\n                    \"stransdisplaystatus\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateFilterStatus = filterStatusMap.get(\"OptionList\")\r\n            }\r\n\r\n            if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\r\n\r\n\r\n                const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\",\r\n                    \"sregtemplatename\",undefined, undefined, false);\r\n\r\n                    stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\")\r\n            }\r\n\r\n\r\n            // const stateSampleType = sampleTypeMap.get(\"OptionList\");\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            subsampleskip = this.props.Login.subsampleskip === undefined ? subsampleskip : this.props.Login.subsampleskip\r\n            subsampletake = this.props.Login.subsampletake || subsampletake\r\n\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n            if (this.props.Login.testAttachmentDataState && this.props.Login.testAttachmentDataState !== previousProps.Login.testAttachmentDataState) {\r\n                testAttachmentDataState = this.props.Login.testAttachmentDataState;\r\n            }\r\n            if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\r\n                sampleGridDataState = this.props.Login.sampleGridDataState;\r\n            }\r\n            if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\r\n                popUptestDataState = this.props.Login.popUptestDataState;\r\n            }\r\n\r\n            const testGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                npreregno: this.props.Login.masterData.selectedSample &&\r\n                    this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                //searchTestRef: this.searchTestRef,\r\n                // testskip: testskip,\r\n                //subsampleskip: subsampleskip,\r\n                // resultDataState: resultDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n            }\r\n            const testChildGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample &&\r\n                    this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                // resultDataState: resultDataState,\r\n                // testCommentDataState: testCommentDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n            }\r\n\r\n            const subSampleGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                // testskip: testskip,\r\n                // subsampleskip: subsampleskip,\r\n                // searchTestRef: this.searchTestRef,\r\n                //resultDataState: resultDataState,\r\n                // testCommentDataState: testCommentDataState,\r\n                //sampleGridDataState: sampleGridDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n                nneedsubsample: this.props.Login.masterData\r\n                    && this.props.Login.masterData.nneedsubsample\r\n            }\r\n\r\n\r\n            const filterSampleParam = {\r\n                inputListName: \"RegistrationGetSample\",\r\n                selectedObject: \"selectedSample\",\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"registration/getRegistrationSubSample\",\r\n                //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n                fecthInputObject: {\r\n                    //nflag: 2,\r\n                    // ntype: 2,\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                        && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n                    nneedsubsample: this.props.Login.masterData\r\n                        && this.props.Login.masterData.nneedsubsample,\r\n                    checkBoxOperation: 3,\r\n\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: sampleSearchField,\r\n                changeList: [\r\n                    \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n                    \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\",\r\n                    \"selectedTest\", \"RegistrationParameter\"\r\n                ]\r\n            };\r\n\r\n            const filterSubSampleParam = {\r\n                inputListName: \"RegistrationGetSubSample\",\r\n                selectedObject: \"selectedSubSample\",\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"registration/getRegistrationTest\",\r\n                //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n                fecthInputObject: {\r\n                    //nflag: 2,\r\n                    // ntype: 2,\r\n                    masterData: this.props.Login.masterData,\r\n                    //  ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                        && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n                    nneedsubsample: this.props.Login.masterData\r\n                        && this.props.Login.masterData.nneedsubsample,\r\n                    checkBoxOperation: 3,\r\n                    npreregno: this.props.Login.masterData.selectedSample &&\r\n                        this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\")\r\n\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: subsampleSearchField,\r\n                changeList: [\r\n                    \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n                    \"RegistrationTestComment\", \"RegistrationAttachment\",\r\n                    \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"\r\n                ]\r\n            };\r\n\r\n            const filterTestParam = {\r\n                inputListName: \"RegistrationGetTest\",\r\n                selectedObject: \"selectedTest\",\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: this.getActiveTestURL(),\r\n                fecthInputObject: {\r\n                    ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                        && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n                    nneedsubsample: this.props.Login.masterData\r\n                        && this.props.Login.masterData.nneedsubsample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: testSearchField,\r\n                changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\r\n\r\n            }\r\n\r\n            // let postParamList = [\r\n            //     {\r\n            //         filteredListName: \"searchedSample\",\r\n            //         clearFilter: \"no\",\r\n            //         searchRef: this.searchSampleRef,\r\n            //         primaryKeyField: \"npreregno\",\r\n            //         fetchUrl: \"registration/getRegistrationSubSample\",\r\n            //         fecthInputObject: subSampleGetParam,\r\n            //        // childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n            //         selectedObject: \"selectedSample\",\r\n            //         inputListName: \"AP_SAMPLE\",\r\n            //         updatedListname: \"selectedSample\",\r\n            //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n            //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n            //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            //     }\r\n            //     , {\r\n            //         filteredListName: \"searchedTest\",\r\n            //         updatedListname: \"selectedTest\",\r\n            //         clearFilter: \"no\",\r\n            //         searchRef: this.searchTestRef,\r\n            //         primaryKeyField: \"ntransactiontestcode\",\r\n            //         fetchUrl: \"approval/getApprovalTest\",\r\n            //         fecthInputObject: testGetParam,\r\n            //         selectedObject: \"selectedTest\",\r\n            //         inputListName: \"RegistrationGetTest\",\r\n            //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n            //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n            //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            //     }\r\n            // ];\r\n\r\n\r\n            const editRegParam = {\r\n                nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                // ncontrolCode: this.state.editSampleId,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n                nneedsubsample: this.props.Login.masterData\r\n                    && this.props.Login.masterData.nneedsubsample\r\n            }\r\n\r\n            const editSubSampleRegParam = {\r\n                nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                //ncontrolCode: this.state.editSampleId,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n                nneedsubsample: this.props.Login.masterData\r\n                    && this.props.Login.masterData.nneedsubsample\r\n            }\r\n\r\n            const addTestParam = {\r\n                selectedSample: this.props.Login.masterData.selectedSample,\r\n                selectedSubSample: this.props.Login.masterData.selectedSubSample,\r\n                // skip: skip, take: (skip + take),\r\n                userinfo: this.props.Login.userInfo,\r\n                sampleList: this.props.Login.masterData.RegistrationGetSample,\r\n                snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\r\n                    [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n            };\r\n\r\n            const breadCrumbobj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo)\r\n            this.breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_FROM\",\r\n                    \"value\": breadCrumbobj.breadCrumbFrom\r\n                }, {\r\n                    \"label\": \"IDS_TO\",\r\n                    \"value\": breadCrumbobj.breadCrumbto\r\n                }, {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\r\n                }, {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\r\n                }, {\r\n                    \"label\": \"IDS_REGSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                }, {\r\n                    \"label\": \"IDS_DESIGNTEMPLATE\",\r\n                    \"value\": this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.sregtemplatename\r\n                }, \r\n                {\r\n                    \"label\": \"IDS_FILTERSTATUS\",\r\n                    \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\r\n                }\r\n            ]\r\n            this.setState({\r\n                DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns,\r\n                SingleItem, testMoreField,\r\n                DynamicGridItem, DynamicGridMoreField,\r\n                testListColumns, stateSampleType,\r\n                stateRegistrationType,\r\n                stateRegistrationSubType,\r\n                stateFilterStatus,\r\n                stateDynamicDesign,\r\n                popUptestDataState,\r\n                showSample, showTest, skip, take, testskip,\r\n                subsampleskip, subsampletake,\r\n                testtake, testCommentDataState, testAttachmentDataState,\r\n                resultDataState, sampleGridDataState,\r\n                SubSampleDynamicGridItem, SubSampleDynamicGridMoreField,\r\n                SubSampleSingleItem,\r\n                testGetParam, testChildGetParam, subSampleGetParam,\r\n                filterSampleParam, filterTestParam,\r\n                editRegParam, editSubSampleRegParam,\r\n                addTestParam, sampleSearchField, subsampleSearchField,\r\n                testSearchField, filterSubSampleParam, sampledateconstraints,subsampledateconstraints\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    handleEditDateChange = (dateName, dateValue) => {\r\n        const selectComponent = this.state.selectedRecord;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectedRecord: selectComponent });\r\n    }\r\n\r\n    onNumericInputEditChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if ((name !== \"nnoofcontainer\") && (value === 0 || value === 0.0)) {\r\n            selectedRecord[name] = '';\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[name] = value;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    cancelSampleRecords = (controlcode, skip, take) => {\r\n        let Map = {};\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n        // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\r\n        // sampleList = sampleList.splice(skip, skip + take);\r\n        let cancelRejectSamplesList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (cancelRejectSamplesList && cancelRejectSamplesList.length > 0) {\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, cancelRejectSamplesList)) {\r\n                //Map['ninsertpreregno']=dataitem.cancelSample.npreregno;\r\n                Map['ntransactionstatus'] = cancelRejectSamplesList &&\r\n                    cancelRejectSamplesList.map(transactionstatus => transactionstatus.ntransactionstatus).join(\",\");\r\n                //Map[\"ntransactiontestcode\"]=dataitem.ntransactiontestcode;\r\n                //Map[\"ninserttransactionsamplecode\"]=dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = -1;\r\n                Map[\"npreregno\"] = cancelRejectSamplesList &&\r\n                    cancelRejectSamplesList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample &&\r\n                    this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest &&\r\n                    this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\");\r\n                Map[\"registrationsample\"] = cancelRejectSamplesList;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"transactionValidation\"] = this.props.Login.transactionValidation;\r\n                Map[\"withoutgetparameter\"] = 3\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelSample'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelSampleAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>\r\n                        this.props.intl.formatMessage({ id: sample.stransdisplaystatus })).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Sample\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTSAMPLE\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOCANCELREJECT\" }));\r\n        }\r\n\r\n    }\r\n\r\n    transValidation = (transactionValidation, ncontrolcode, selectedSample) => {\r\n        //  const transList=transactionValidation?Object.keys(transactionValidation):[];\r\n        //  const index=transList.findIndex(x=>x.ncontrolcode===ncontrolcode);\r\n        //let check=true;\r\n        //  let validate=false;\r\n        let ntransstatus = [];\r\n\r\n        let translist = transactionValidation[ncontrolcode];\r\n        if (translist) {\r\n            transactionValidation[ncontrolcode] && transactionValidation[ncontrolcode].map(sam => {\r\n                return ntransstatus.push(sam.ntransactionstatus)\r\n            });\r\n            const selectdata = selectedSample ? selectedSample : [];\r\n            let check = selectdata.map(sam1 => {\r\n                return ntransstatus.includes(sam1.ntransactionstatus)\r\n            })\r\n            if (check.includes(false)) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    onUpdateSubSampleRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            ntype: 5,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ntransactionsamplecode: String(this.state.selectedRecord.ntransactionsamplecode),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.nneedsubsample,\r\n            checkBoxOperation: 3,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistrationSubSample(\r\n            this.state.selectedRecord,\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone);\r\n\r\n        inputData[\"registrationsample\"] = param.sampleRegistration\r\n        inputData[\"SubSampleDateList\"] = param.dateList\r\n        inputData['subsampledateconstraints'] = this.state.subsampledateconstraints;\r\n        inputData[\"flag\"] = flag === undefined ? 1 : flag;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n            && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.nneedsubsample;\r\n        inputData[\"checkBoxOperation\"] = 3;\r\n        inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n        inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"SubSampleRegistration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            action: 'editSubSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            testAttachmentDataState: this.state.testAttachmentDataState,\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\",\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.onUpdateSubSampleRegistration(inputParam,\r\n                this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignforRegistration(inputParam, \"openModal\");\r\n\r\n    }\r\n\r\n\r\n    editRegistration = (inputParam) => {\r\n        let data = [];\r\n        const withoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.registrationTemplate\r\n            && this.props.Login.masterData.registrationTemplate.jsondata\r\n        if (Layout !== undefined) {\r\n            Layout.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    data.push(componentrow)\r\n                                } else {\r\n                                    withoutCombocomponent.push(componentrow)\r\n                                }\r\n\r\n                                return null;\r\n                            })\r\n                            : component.inputtype === \"combo\" ?\r\n                                data.push(component) : withoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n            })\r\n            const comboComponents = data\r\n            let childColumnList = {};\r\n            data.map(columnList => {\r\n                const val = this.comboChild(data, columnList, childColumnList, true);\r\n                data = val.data;\r\n                childColumnList = val.childColumnList\r\n                return null;\r\n            })\r\n\r\n            this.props.getEditRegistrationComboService(inputParam,\r\n                data, this.state.selectedRecord, childColumnList,\r\n                comboComponents, withoutCombocomponent)\r\n        } else {\r\n            toast.info(\"Configure the preregister template for this registrationtype\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n    editSubSampleRegistration = (inputParam) => {\r\n        let data = [];\r\n        const regSubSamplewithoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.SubSampleTemplate\r\n            && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n        if (Layout !== undefined) {\r\n            Layout.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    data.push(componentrow)\r\n                                } else {\r\n                                    regSubSamplewithoutCombocomponent.push(componentrow)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            : component.inputtype === \"combo\" ?\r\n                                data.push(component) : regSubSamplewithoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n            })\r\n            const regSubSamplecomboComponents = data\r\n            let regSubSamplechildColumnList = {};\r\n            data.map(columnList => {\r\n                const val = this.comboChild(data, columnList, regSubSamplechildColumnList, true);\r\n                data = val.data;\r\n                regSubSamplechildColumnList = val.childColumnList\r\n                return null;\r\n            })\r\n\r\n\r\n           const sampleList= getSameRecordFromTwoArrays(inputParam.masterData.selectedSample,[inputParam.mastertoedit],\"npreregno\")\r\n           \r\n            this.props.getEditSubSampleComboService(inputParam,\r\n                data, this.state.selectedRecord, regSubSamplechildColumnList,\r\n                regSubSamplecomboComponents, regSubSamplewithoutCombocomponent,\r\n                sampleList[0].ncomponentrequired===3?true:false)\r\n        } else {\r\n            toast.info(\"Configure the sub sample template for this registrationtype\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore,\r\n    getSampleTypeChange, getRegTypeChange, getRegSubTypeChange,\r\n    getAttachmentCombo, viewAttachment, getCommentsCombo,\r\n    filterTransactionList, validateEsignCredential,\r\n    getSampleChildTabDetail, getTestChildTabDetailRegistration,\r\n    ReloadData, showUnderDevelopment, getPreviewTemplate,\r\n    getChildValues, getRegistrationSample,\r\n    getRegistrationsubSampleDetail, getRegistrationTestDetail,\r\n    acceptRegistration, addMoreTest, createRegistrationTest,\r\n    getEditRegistrationComboService, cancelTestAction,\r\n    cancelSampleAction, addsubSampleRegistration, saveSubSample,\r\n    getEditSubSampleComboService, onUpdateSubSampleRegistration,\r\n    cancelSubSampleAction, preregRecordToQuarantine, componentTest\r\n})(injectIntl(Registration));"]},"metadata":{},"sourceType":"module"}