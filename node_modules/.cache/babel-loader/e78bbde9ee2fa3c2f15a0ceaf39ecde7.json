{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testmanagement\\\\AddTestContainerType.jsx\";\nimport React from 'react';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { Col, Form, Row } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { CONTAINERTYPE, transactionStatus } from '../../components/Enumeration';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\n\nconst AddTestContainerType = props => {\n  //   const { nresourecode,disabled } = props.selectedRecord;\n  const {\n    unit\n  } = props;\n  return /*#__PURE__*/React.createElement(Col, {\n    md: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_CONTAINERTYPE\"\n    }),\n    name: \"ncontainertypecode\",\n    isDisabled: false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    showOption: props.isMulti,\n    options: props.containertype,\n    optionId: \"ncontainertypecode\",\n    optionValue: \"scontainertype\",\n    defaultValue: props.selectedRecord[\"ncontainertypecode\"],\n    onChange: value => props.onComboChange(value, props.isMulti ? \"availableData\" : \"ncontainertypecode\", 1),\n    value: props.selectedRecord[\"ncontainertypecode\"] ? props.selectedRecord[\"ncontainertypecode\"] || [] : [],\n    isMulti: props.isMulti,\n    isSearchable: true,\n    closeMenuOnSelect: !props.isMulti,\n    alphabeticalSort: true,\n    isClearable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormNumericInput, {\n    name: \"nquantity\",\n    label: props.intl.formatMessage({\n      id: \"IDS_QUANTITY\"\n    }),\n    type: \"number\",\n    value: props.selectedRecord[\"nquantity\"],\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_QUANTITY\"\n    }),\n    strict: true,\n    min: 0 //max={9999999.99}\n    ,\n    maxLength: 6,\n    onChange: value => props.onNumericInputChange(value, \"nquantity\", \"nunitcode\"),\n    noStyle: true,\n    precision: 2,\n    className: \"form-control\",\n    errors: \"Please provide a valid number.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_UNIT\"\n    }),\n    isSearchable: true,\n    name: \"nunitcode\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: unit || [],\n    optionId: \"nunitcode\",\n    optionValue: \"sunitname\" // value={props.selectedRecord ? props.selectedRecord[\"nunitcode\"] : \"\"}\n    ,\n    value: props.selectedRecord[\"ncontainertypecode\"] ? props.selectedRecord[\"nunitcode\"] || [] : [],\n    onChange: value => props.onComboChange(value, \"nunitcode\", 1),\n    alphabeticalSort: true,\n    isMandatory: props.selectedRecord.unitMandatory ? props.selectedRecord.unitMandatory === true ? true : false : false,\n    isClearable: props.selectedRecord.unitMandatory ? props.selectedRecord.unitMandatory === true ? false : true : true,\n    isDisabled: props.selectedRecord[\"nquantity\"] === 0 || props.selectedRecord[\"nquantity\"] === undefined ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 18\n    }\n  }))));\n};\n\nexport default injectIntl(AddTestContainerType);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testmanagement/AddTestContainerType.jsx"],"names":["React","FormSelectSearch","FormInput","Col","Form","Row","injectIntl","CONTAINERTYPE","transactionStatus","FormNumericInput","AddTestContainerType","props","unit","intl","formatMessage","id","isMulti","containertype","selectedRecord","value","onComboChange","onNumericInputChange","unitMandatory","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { Col, Form, Row } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { CONTAINERTYPE,transactionStatus } from '../../components/Enumeration';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\n\r\n\r\n\r\nconst AddTestContainerType = (props) => {\r\n //   const { nresourecode,disabled } = props.selectedRecord;\r\n const { unit} = props\r\n    return (\r\n        <Col md=\"12\">\r\n            <FormSelectSearch\r\n                formLabel={props.intl.formatMessage({ id: \"IDS_CONTAINERTYPE\" })}\r\n                name={\"ncontainertypecode\"}\r\n                isDisabled={false}\r\n                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                isMandatory={true}\r\n                showOption={props.isMulti}\r\n                options={props.containertype}\r\n                optionId='ncontainertypecode'\r\n                optionValue='scontainertype'\r\n                defaultValue={props.selectedRecord[\"ncontainertypecode\"]}\r\n                onChange={value => props.onComboChange(value, props.isMulti?\"availableData\":\"ncontainertypecode\", 1)}\r\n                value={props.selectedRecord[\"ncontainertypecode\"] ? props.selectedRecord[\"ncontainertypecode\"] || [] : []}\r\n                isMulti={props.isMulti}\r\n                isSearchable={true}\r\n                closeMenuOnSelect={!props.isMulti}\r\n                alphabeticalSort={true}\r\n                isClearable={false}\r\n            >\r\n            </FormSelectSearch>\r\n\r\n            {/* <FormInput\r\n                    name={\"nquantity\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 4)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                    value={props.selectedRecord && props.selectedRecord[\"nquantity\"] ? props.selectedRecord[\"nquantity\"] : \"\"}\r\n                    isMandatory=\"*\"\r\n                    required={true}\r\n                    maxLength={6}\r\n                    precision={2}\r\n                /> */}\r\n                 <Row>\r\n                <Col md=\"6\">\r\n                <FormNumericInput\r\n                    name={\"nquantity\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                    type=\"number\"\r\n                    value={props.selectedRecord[\"nquantity\"]}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                    strict={true}\r\n                    min={0}\r\n                    //max={9999999.99}\r\n                    maxLength={6}\r\n                    onChange={(value) => props.onNumericInputChange(value, \"nquantity\", \"nunitcode\")}\r\n                    noStyle={true}\r\n                    precision={2}\r\n                    className=\"form-control\"\r\n                    errors=\"Please provide a valid number.\"\r\n                /> \r\n                </Col>\r\n                 <Col md=\"6\">\r\n                 <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_UNIT\" })}\r\n                    isSearchable={true}\r\n                    name={\"nunitcode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    options={unit || []}\r\n                    optionId='nunitcode'\r\n                    optionValue='sunitname'\r\n                   // value={props.selectedRecord ? props.selectedRecord[\"nunitcode\"] : \"\"}\r\n                   value={props.selectedRecord[\"ncontainertypecode\"] ? props.selectedRecord[\"nunitcode\"] || [] : []}\r\n\r\n                    onChange={value => props.onComboChange(value, \"nunitcode\", 1)}\r\n                    alphabeticalSort={true}\r\n                    isMandatory={props.selectedRecord.unitMandatory ? props.selectedRecord.unitMandatory === true ? true : false : false}\r\n                    isClearable={props.selectedRecord.unitMandatory ? props.selectedRecord.unitMandatory === true ? false : true : true}\r\n                    isDisabled={(props.selectedRecord[\"nquantity\"] === 0 || props.selectedRecord[\"nquantity\"] === undefined) ? true : false}\r\n                >\r\n                </FormSelectSearch>\r\n                </Col>\r\n                </Row>\r\n{/* <Form.Check \r\n                        name=\"noutsourcecode\" \r\n                        type=\"checkbox\"\r\n                        id=\"AddFiles\"\r\n                        label={props.intl.formatMessage({ id: \"IDS_OUTSOURCE\" })}\r\n                        inline={true}\r\n                        onChange={(event)=>props.onInputOnChange(event, 1,CONTAINERTYPE)}\r\n                        checked={props.selectedRecord ? props.selectedRecord[\"noutsourcecode\"] === CONTAINERTYPE.YES ? true : false : false}\r\n                       // disabled={disabled}\r\n                    >\r\n                    </Form.Check> */}\r\n        </Col>\r\n    );\r\n};\r\n\r\nexport default injectIntl(AddTestContainerType);"]},"metadata":{},"sourceType":"module"}