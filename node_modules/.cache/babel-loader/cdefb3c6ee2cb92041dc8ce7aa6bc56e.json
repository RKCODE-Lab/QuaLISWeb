{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { toast } from 'react-toastify';\nexport function getInstrumentCombo(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    const InstrumentCategory = rsapi.post(\"/instrumentcategory/fetchinstrumentcategory\", {\n      \"userinfo\": userInfo\n    });\n    const Supplier = rsapi.post(\"/instrument/getSupplier\", {\n      \"userinfo\": userInfo\n    });\n    const Manufacturer = rsapi.post(\"/instrument/getManufacturer\", {\n      \"userinfo\": userInfo\n    });\n    const InstrumentStatus = rsapi.post(\"/instrument/getInstrumentStatus\", {\n      \"userinfo\": userInfo\n    });\n    const Lab = rsapi.post(\"/section/getSection\", {\n      \"userinfo\": userInfo\n    });\n    const Period = rsapi.post(\"/instrument/getPeriod\", {\n      \"ncontrolcode\": ncontrolCode,\n      \"userinfo\": userInfo\n    });\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const Instrumentdate = rsapi.post(\"/instrument/addInstrumentDate\", {\n      \"ncontrolcode\": ncontrolCode,\n      \"userinfo\": userInfo\n    });\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    });\n\n    if (operation === \"create\") {\n      urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, Instrumentdate, UTCtimeZoneService];\n    } else {\n      const InstrumentId = rsapi.post(\"/instrument/getActiveInstrumentById\", {\n        [primaryKeyName]: masterData.selectedInstrument[primaryKeyName],\n        \"userinfo\": userInfo\n      }); //const ManufacturerByID = rsapi.post(\"/manufacturer/getManufacturerById\", { [primaryKeyName] :masterData.selectedManufacturer[primaryKeyName], \"userinfo\": userInfo });\n\n      urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, InstrumentId, Instrumentdate, UTCtimeZoneService];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      console.log(\" response:\", response);\n      let expiryDate = undefined;\n      let currentTime = undefined;\n      const instcatMap = constructOptionList(response[0].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, false);\n      const supplierMap = constructOptionList(response[1].data.Supplier || [], \"nsuppliercode\", \"ssuppliername\", undefined, undefined, false);\n      const manufMap = constructOptionList(response[2].data.Manufacturer || [], \"nmanufcode\", \"smanufname\", undefined, undefined, false);\n      const inststatusMap = constructOptionList(response[3].data || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n      const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      const periodMap = constructOptionList(response[5].data || [], \"nperiodcode\", \"speriodname\", undefined, undefined, false);\n      const timezoneMap = constructOptionList(response[6].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n      const InstrumentCategory = instcatMap.get(\"OptionList\");\n      const Supplier = supplierMap.get(\"OptionList\");\n      const Manufacturer = manufMap.get(\"OptionList\");\n      const InstrumentStatus = inststatusMap.get(\"OptionList\");\n      const Lab = sectionMap.get(\"OptionList\");\n      const Period = periodMap.get(\"OptionList\");\n      const TimeZoneList = timezoneMap.get(\"OptionList\");\n      let selectedRecord = {\n        \"ntzmanufdate\": {\n          \"value\": userInfo.ntimezonecode,\n          \"label\": userInfo.stimezoneid\n        },\n        //\"stzmanufdate\":userInfo.stimezoneid\n        \"ntzpodate\": {\n          \"value\": userInfo.ntimezonecode,\n          \"label\": userInfo.stimezoneid\n        },\n        \"stzpodate\": userInfo.stimezoneid,\n        \"ntzreceivedate\": {\n          \"value\": userInfo.ntimezonecode,\n          \"label\": userInfo.stimezoneid\n        },\n        \"stzreceivedate\": userInfo.stimezoneid,\n        \"ntzinstallationdate\": {\n          \"value\": userInfo.ntimezonecode,\n          \"label\": userInfo.stimezoneid\n        },\n        \"stzinstallationdate\": userInfo.stimezoneid,\n        \"ntzexpirydate\": {\n          \"value\": userInfo.ntimezonecode,\n          \"label\": userInfo.stimezoneid\n        },\n        \"stzexpirydate\": userInfo.stimezoneid\n      };\n      let instrumentCategory = [];\n      let supplier = [];\n      let manufacturer = [];\n      let instrumentstatus = [];\n      let nwindowsperiodminusunit = [];\n      let nwindowsperiodplusunit = [];\n      ;\n      let lab = [];\n      let ntzmanufdate = [];\n      let ntzpodate = [];\n      let ntzreceivedate = [];\n      let ntzinstallationdate = [];\n      let ntzexpirydate = [];\n      let susername = [];\n      let service = [];\n\n      if (operation === \"create\") {\n        let date = rearrangeDateFormat(userInfo, response[8].data);\n        selectedRecord[\"dmanufacdate\"] = date; //new Date(response[8].data);\n\n        selectedRecord[\"dpodate\"] = date;\n        selectedRecord[\"dreceiveddate\"] = date;\n        selectedRecord[\"dinstallationdate\"] = date;\n        currentTime = date;\n\n        if (response[7].data[\"ExpiryDate\"] !== \"\") {\n          expiryDate = rearrangeDateFormat(userInfo, response[7].data[\"ExpiryDate\"]); //new Date(response[7].data[\"ExpiryDate\"]);\n\n          selectedRecord[\"dexpirydate\"] = expiryDate;\n        }\n      }\n\n      if (operation === \"update\") {\n        selectedRecord = response[7].data;\n        instrumentCategory.push({\n          \"value\": response[7].data[\"ninstrumentcatcode\"],\n          \"label\": response[7].data[\"sinstrumentcatname\"]\n        });\n        supplier.push({\n          \"value\": response[7].data[\"nsuppliercode\"],\n          \"label\": response[7].data[\"ssuppliername\"]\n        });\n        service.push({\n          \"value\": response[7].data[\"nservicecode\"],\n          \"label\": response[7].data[\"sserviceby\"]\n        });\n        manufacturer.push({\n          \"value\": response[7].data[\"nmanufcode\"],\n          \"label\": response[7].data[\"smanufname\"]\n        });\n        instrumentstatus.push({\n          \"value\": response[7].data[\"ntranscode\"],\n          \"label\": response[7].data[\"sactivestatus\"]\n        });\n        nwindowsperiodminusunit.push({\n          \"value\": response[7].data[\"nwindowsperiodminusunit\"],\n          \"label\": response[7].data[\"swindowsperiodminusunit\"]\n        });\n        nwindowsperiodplusunit.push({\n          \"value\": response[7].data[\"nwindowsperiodplusunit\"],\n          \"label\": response[7].data[\"swindowsperiodplusunit\"]\n        });\n        lab.push({\n          \"value\": response[7].data[\"nsectioncode\"],\n          \"label\": response[7].data[\"ssectionname\"]\n        });\n        ntzmanufdate.push({\n          \"value\": response[7].data[\"ntzmanufdate\"],\n          \"label\": response[7].data[\"stzmanufdate\"]\n        });\n        ntzpodate.push({\n          \"value\": response[7].data[\"ntzpodate\"],\n          \"label\": response[7].data[\"stzpodate\"]\n        });\n        ntzreceivedate.push({\n          \"value\": response[7].data[\"ntzreceivedate\"],\n          \"label\": response[7].data[\"stzreceivedate\"]\n        });\n        ntzinstallationdate.push({\n          \"value\": response[7].data[\"ntzinstallationdate\"],\n          \"label\": response[7].data[\"stzinstallationdate\"]\n        });\n        ntzexpirydate.push({\n          \"value\": response[7].data[\"ntzexpirydate\"],\n          \"label\": response[7].data[\"stzexpirydate\"]\n        });\n        susername.push({\n          \"value\": response[7].data[\"nusercode1\"],\n          \"label\": response[7].data[\"susername\"]\n        });\n\n        if (response[7].data[\"smanufacdate\"] !== \"\") {\n          selectedRecord[\"dmanufacdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"smanufacdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n        }\n\n        if (response[7].data[\"spodate\"] !== \"\") {\n          selectedRecord[\"dpodate\"] = rearrangeDateFormat(userInfo, response[7].data[\"spodate\"]); //new Date(response[7].data[\"spodate\"]);\n        } // else{\n        //     selectedRecord[\"dpodate\"] = \" \";\n        // }\n\n\n        if (response[7].data[\"sreceiveddate\"] !== \"\") {\n          selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sreceiveddate\"]); //new Date(response[7].data[\"sreceiveddate\"]);\n        }\n\n        if (response[7].data[\"sinstallationdate\"] !== \"\") {\n          selectedRecord[\"dinstallationdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sinstallationdate\"]); //new Date(response[7].data[\"sinstallationdate\"]);\n        }\n\n        if (response[7].data[\"sexpirydate\"] !== \"\") {\n          selectedRecord[\"dexpirydate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sexpirydate\"]); //new Date(response[7].data[\"sexpirydate\"]);\n        }\n\n        selectedRecord[\"ninstrumentcatcode\"] = instrumentCategory[0];\n        selectedRecord[\"nsuppliercode\"] = supplier[0];\n        selectedRecord[\"nservicecode\"] = service[0];\n        if (manufacturer[0].value !== -1) selectedRecord[\"nmanufcode\"] = manufacturer[0];\n        if (instrumentstatus[0].value !== -1) selectedRecord[\"ntranscode\"] = instrumentstatus[0];\n        if (nwindowsperiodminusunit[0].value !== -1) selectedRecord[\"nwindowsperiodminusunit\"] = nwindowsperiodminusunit[0];\n        if (nwindowsperiodplusunit[0].value !== -1) selectedRecord[\"nwindowsperiodplusunit\"] = nwindowsperiodplusunit[0];\n        selectedRecord[\"nsectioncode\"] = lab[0];\n        selectedRecord[\"ntzmanufdate\"] = ntzmanufdate[0];\n        selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\n        selectedRecord[\"ntzpodate\"] = ntzpodate[0];\n        selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\n        selectedRecord[\"ntzreceivedate\"] = ntzreceivedate[0];\n        selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\n        selectedRecord[\"ntzinstallationdate\"] = ntzinstallationdate[0];\n        selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\n        selectedRecord[\"ntzexpirydate\"] = ntzexpirydate[0];\n        selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\n        selectedRecord[\"susername\"] = susername[0];\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          InstrumentCategory,\n          Supplier,\n          Manufacturer,\n          InstrumentStatus,\n          instrumentCategory: instrumentCategory,\n          supplier: supplier,\n          manufacturer: manufacturer,\n          Lab,\n          Period,\n          TimeZoneList,\n          isOpen: true,\n          selectedRecord: selectedRecord,\n          operation: operation,\n          screenName: screenName,\n          openModal: true,\n          ncontrolCode: ncontrolCode,\n          loading: false,\n          currentTime,\n          expiryDate\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getSectionUsers(nsectioncode, userInfo, selectedRecord, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"instrument/getSectionBasedUser\", {\n      \"nsectioncode\": nsectioncode\n    }, {\n      userinfo: userInfo\n    }).then(response => {\n      //console.log(\" response:\", response); \n      let Users = [];\n\n      if (screenName === \"IDS_SECTION\") {\n        //let sectionusers=[];\n        const userName = constructOptionList(response.data || [], \"nusercode\", \"susername\", undefined, undefined, false);\n        Users = userName.get(\"OptionList\"); //selectedRecord[\"nusercode\"]=\"\";\n\n        selectedRecord[\"nusercode\"] = undefined; //{label:SectionUsers[0].label,value:SectionUsers[0].value,item:SectionUsers[0]};\n      } else {\n        Users = response.data;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Users,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); // const sectionUsers = rsapi.post(\"instrument/getSectionBasedUser\",{\"nsectioncode\":nsectioncode},{ \"userinfo\": userInfo });\\\n    // urlArray = [sectionUsers]; \n  };\n}\nexport function getInstrumentDetail(Instrument, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"instrument/getInstrument\", {\n      ninstrumentcode: Instrument.ninstrumentcode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const getAvailableInstData = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\n  return function (dispatch) {\n    dispatch(initRequest(true)); //  Axios.all(urlArray)\n\n    let url = '';\n\n    if (screenName === \"IDS_INSTRUMENTVALIDATION\") {\n      url = \"/instrument/getInstrumentValidationStatus\";\n    } else {\n      url = \"/instrument/getUsers\";\n    }\n\n    return rsapi.post(url, {\n      \"userinfo\": userInfo\n    }).then(response => {\n      const validationMap = constructOptionList(response.data.ValidationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n      const ValidationStatus = validationMap.get(\"OptionList\");\n      const secMap = constructOptionList(response.data.Section || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      const userMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      const Lab = secMap.get(\"OptionList\");\n      const LabDefault = secMap.get(\"DefaultValue\");\n\n      if (LabDefault !== undefined) {\n        selectedRecord = {\n          \"nsectioncode\": {\n            \"value\": LabDefault.value,\n            \"label\": LabDefault.label\n          }\n        };\n      }\n\n      const Users = userMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ValidationStatus,\n          Lab,\n          Users,\n          isOpen: true,\n          selectedRecord,\n          //selectedRecord: operation === \"update\" ? response[7].data : {\"ntransactionstatus\": 1}, \n          operation: \"create\",\n          screenName: screenName,\n          openModal: true,\n          ncontrolCode: ncontrolCode,\n          instItem: instItem,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 417) {\n        toast.info(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const changeInstrumentCategoryFilter = (inputParam, filterInstrumentCategory) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/instrument/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      const masterData = response.data;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          dataState: undefined,\n          masterData: { ...masterData,\n            filterInstrumentCategory,\n            nfilterInstrumentCategory: inputParam.inputData.nfilterInstrumentCategory\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/InstrumentAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","rearrangeDateFormat","Axios","initRequest","intl","toast","getInstrumentCombo","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolCode","dispatch","urlArray","InstrumentCategory","post","Supplier","Manufacturer","InstrumentStatus","Lab","Period","timeZoneService","Instrumentdate","UTCtimeZoneService","userinfo","InstrumentId","selectedInstrument","all","then","response","console","log","expiryDate","undefined","currentTime","instcatMap","data","supplierMap","manufMap","inststatusMap","sectionMap","periodMap","timezoneMap","get","TimeZoneList","selectedRecord","ntimezonecode","stimezoneid","instrumentCategory","supplier","manufacturer","instrumentstatus","nwindowsperiodminusunit","nwindowsperiodplusunit","lab","ntzmanufdate","ntzpodate","ntzreceivedate","ntzinstallationdate","ntzexpirydate","susername","service","date","push","value","label","type","payload","isOpen","openModal","loading","catch","error","status","formatMessage","id","message","warn","getSectionUsers","nsectioncode","Users","userName","getInstrumentDetail","Instrument","ninstrumentcode","modalName","dataState","getAvailableInstData","instItem","url","key","validationMap","ValidationStatus","secMap","Section","userMap","LabDefault","info","changeInstrumentCategoryFilter","inputParam","filterInstrumentCategory","methodUrl","inputData","nfilterInstrumentCategory"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {sortData,constructOptionList, rearrangeDateFormat} from '../components/CommonScript';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport function getInstrumentCombo(screenName, operation, primaryKeyName,  masterData, userInfo, ncontrolCode) {\r\n return function(dispatch){ \r\n    let urlArray = [];    \r\n        const InstrumentCategory = rsapi.post(\"/instrumentcategory/fetchinstrumentcategory\", { \"userinfo\": userInfo });\r\n        const Supplier = rsapi.post(\"/instrument/getSupplier\", { \"userinfo\": userInfo });\r\n        const Manufacturer = rsapi.post(\"/instrument/getManufacturer\", { \"userinfo\": userInfo });\r\n        const InstrumentStatus = rsapi.post(\"/instrument/getInstrumentStatus\", { \"userinfo\": userInfo });\r\n        const Lab = rsapi.post(\"/section/getSection\", { \"userinfo\": userInfo });\r\n        const Period = rsapi.post(\"/instrument/getPeriod\", { \"ncontrolcode\":ncontrolCode,\"userinfo\": userInfo });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const Instrumentdate = rsapi.post(\"/instrument/addInstrumentDate\",{ \"ncontrolcode\":ncontrolCode,\"userinfo\": userInfo });\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: userInfo });\r\n        if (operation === \"create\") {\r\n            urlArray = [InstrumentCategory,Supplier,Manufacturer,InstrumentStatus,Lab,Period,timeZoneService,Instrumentdate,UTCtimeZoneService];  \r\n        \r\n         }else{\r\n        const InstrumentId = rsapi.post(\"/instrument/getActiveInstrumentById\",{ [primaryKeyName] :masterData.selectedInstrument[primaryKeyName],  \"userinfo\": userInfo });\r\n        //const ManufacturerByID = rsapi.post(\"/manufacturer/getManufacturerById\", { [primaryKeyName] :masterData.selectedManufacturer[primaryKeyName], \"userinfo\": userInfo });\r\n        urlArray = [InstrumentCategory,Supplier,Manufacturer,InstrumentStatus,Lab,Period,timeZoneService,InstrumentId,Instrumentdate,UTCtimeZoneService];\r\n        }\r\n\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response => {\r\n            console.log(\" response:\", response); \r\n\r\n            let expiryDate = undefined;\r\n            let  currentTime = undefined;\r\n            const instcatMap = constructOptionList(response[0].data || [], \"ninstrumentcatcode\",\r\n             \"sinstrumentcatname\", undefined, undefined, false);\r\n\r\n            const supplierMap = constructOptionList(response[1].data.Supplier || [], \"nsuppliercode\",\r\n             \"ssuppliername\", undefined, undefined, false);\r\n\r\n            const manufMap = constructOptionList(response[2].data.Manufacturer|| [], \"nmanufcode\",\r\n             \"smanufname\", undefined, undefined, false);\r\n\r\n            const inststatusMap = constructOptionList(response[3].data || [], \"ntranscode\",\r\n             \"stransstatus\", undefined, undefined, false);\r\n\r\n            const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\",\r\n             \"ssectionname\", undefined, undefined, false);\r\n\r\n           const periodMap = constructOptionList(response[5].data || [], \"nperiodcode\",\r\n             \"speriodname\", undefined, undefined, false);\r\n\r\n           const timezoneMap = constructOptionList(response[6].data || [], \"ntimezonecode\",\r\n              \"stimezoneid\", undefined, undefined, false);\r\n            \r\n\r\n             const  InstrumentCategory = instcatMap.get(\"OptionList\");\r\n             const  Supplier = supplierMap.get(\"OptionList\");\r\n             const  Manufacturer = manufMap.get(\"OptionList\");\r\n             const  InstrumentStatus = inststatusMap.get(\"OptionList\");\r\n             const  Lab = sectionMap.get(\"OptionList\");\r\n             const  Period = periodMap.get(\"OptionList\");\r\n             const  TimeZoneList = timezoneMap.get(\"OptionList\");\r\n\r\n\r\n            let selectedRecord =  {\r\n            \"ntzmanufdate\":{\"value\": userInfo.ntimezonecode, \r\n                             \"label\":userInfo.stimezoneid},\r\n            //\"stzmanufdate\":userInfo.stimezoneid\r\n\r\n            \"ntzpodate\":{\"value\": userInfo.ntimezonecode, \r\n                          \"label\":userInfo.stimezoneid},\r\n            \"stzpodate\":userInfo.stimezoneid,\r\n\r\n                \r\n            \"ntzreceivedate\":{\"value\": userInfo.ntimezonecode, \r\n                             \"label\":userInfo.stimezoneid},\r\n            \"stzreceivedate\":userInfo.stimezoneid,\r\n\r\n\r\n            \"ntzinstallationdate\":{\"value\": userInfo.ntimezonecode, \r\n                                   \"label\":userInfo.stimezoneid},\r\n            \"stzinstallationdate\":userInfo.stimezoneid,\r\n\r\n            \r\n            \"ntzexpirydate\":{\"value\": userInfo.ntimezonecode, \r\n                                   \"label\":userInfo.stimezoneid},\r\n            \"stzexpirydate\":userInfo.stimezoneid\r\n        };  \r\n            let instrumentCategory = [];\r\n            let supplier =[];\r\n            let manufacturer=[];\r\n            let instrumentstatus=[];\r\n            let nwindowsperiodminusunit=[];\r\n            let nwindowsperiodplusunit=[];;\r\n            let lab=[];\r\n            let ntzmanufdate=[];\r\n            let ntzpodate=[];\r\n            let ntzreceivedate=[];\r\n            let ntzinstallationdate=[];\r\n            let ntzexpirydate=[];\r\n            let susername=[];\r\n            let service=[];\r\n            if(operation === \"create\"){\r\n               let date =  rearrangeDateFormat(userInfo,response[8].data);\r\n                selectedRecord[\"dmanufacdate\"] = date;//new Date(response[8].data);\r\n                selectedRecord[\"dpodate\"] = date;\r\n                selectedRecord[\"dreceiveddate\"] = date;\r\n                selectedRecord[\"dinstallationdate\"] = date;\r\n                currentTime =date;\r\n                if(response[7].data[\"ExpiryDate\"] !==\"\"){\r\n                   expiryDate = rearrangeDateFormat(userInfo,response[7].data[\"ExpiryDate\"]);//new Date(response[7].data[\"ExpiryDate\"]);\r\n                    selectedRecord[\"dexpirydate\"] = expiryDate;\r\n                }\r\n            }\r\n            if (operation === \"update\") {\r\n                selectedRecord = response[7].data;\r\n                instrumentCategory.push({\"value\": response[7].data[\"ninstrumentcatcode\"],\"label\": response[7].data[\"sinstrumentcatname\"]});\r\n                supplier.push({\"value\" : response[7].data[\"nsuppliercode\"], \"label\" : response[7].data[\"ssuppliername\"]});\r\n                service.push({\"value\" : response[7].data[\"nservicecode\"], \"label\" : response[7].data[\"sserviceby\"]});\r\n                manufacturer.push({\"value\": response[7].data[\"nmanufcode\"], \"label\": response[7].data[\"smanufname\"]});\r\n                instrumentstatus.push({\"value\": response[7].data[\"ntranscode\"], \"label\": response[7].data[\"sactivestatus\"]});\r\n                nwindowsperiodminusunit.push({\"value\": response[7].data[\"nwindowsperiodminusunit\"], \"label\": response[7].data[\"swindowsperiodminusunit\"]});\r\n                nwindowsperiodplusunit.push({\"value\": response[7].data[\"nwindowsperiodplusunit\"], \"label\": response[7].data[\"swindowsperiodplusunit\"]});\r\n                lab.push({\"value\": response[7].data[\"nsectioncode\"], \"label\": response[7].data[\"ssectionname\"]})\r\n                ntzmanufdate.push({\"value\": response[7].data[\"ntzmanufdate\"], \"label\": response[7].data[\"stzmanufdate\"]})\r\n                ntzpodate.push({\"value\": response[7].data[\"ntzpodate\"], \"label\": response[7].data[\"stzpodate\"]})\r\n                ntzreceivedate.push({\"value\": response[7].data[\"ntzreceivedate\"], \"label\": response[7].data[\"stzreceivedate\"]})\r\n                ntzinstallationdate.push({\"value\": response[7].data[\"ntzinstallationdate\"], \"label\": response[7].data[\"stzinstallationdate\"]})\r\n                ntzexpirydate.push({\"value\": response[7].data[\"ntzexpirydate\"], \"label\": response[7].data[\"stzexpirydate\"]})\r\n                susername.push({\"value\":response[7].data[\"nusercode1\"],\"label\":response[7].data[\"susername\"]})\r\n             \r\n                if(response[7].data[\"smanufacdate\"] !==\"\"){\r\n\r\n                    selectedRecord[\"dmanufacdate\"] = rearrangeDateFormat(userInfo,response[7].data[\"smanufacdate\"]);//new Date(response[7].data[\"smanufacdate\"]);\r\n                }\r\n                \r\n                if(response[7].data[\"spodate\"] !==\"\"){\r\n                    selectedRecord[\"dpodate\"] = rearrangeDateFormat(userInfo,response[7].data[\"spodate\"]);//new Date(response[7].data[\"spodate\"]);\r\n                }\r\n                // else{\r\n                //     selectedRecord[\"dpodate\"] = \" \";\r\n                // }\r\n\r\n                if(response[7].data[\"sreceiveddate\"] !==\"\"){\r\n                    selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(userInfo,response[7].data[\"sreceiveddate\"]);//new Date(response[7].data[\"sreceiveddate\"]);\r\n                }\r\n                if(response[7].data[\"sinstallationdate\"] !==\"\"){\r\n                    selectedRecord[\"dinstallationdate\"] = rearrangeDateFormat(userInfo,response[7].data[\"sinstallationdate\"]);//new Date(response[7].data[\"sinstallationdate\"]);\r\n                }\r\n\r\n                if(response[7].data[\"sexpirydate\"] !==\"\"){\r\n                    selectedRecord[\"dexpirydate\"] = rearrangeDateFormat(userInfo,response[7].data[\"sexpirydate\"]);//new Date(response[7].data[\"sexpirydate\"]);\r\n                }\r\n               \r\n                \r\n                selectedRecord[\"ninstrumentcatcode\"]= instrumentCategory[0];\r\n                selectedRecord[\"nsuppliercode\"] = supplier[0];\r\n                selectedRecord[\"nservicecode\"] = service[0];\r\n                if(manufacturer[0].value!==-1)\r\n                selectedRecord[\"nmanufcode\"] = manufacturer[0];\r\n                if(instrumentstatus[0].value!==-1)\r\n                selectedRecord[\"ntranscode\"] = instrumentstatus[0];\r\n                if(nwindowsperiodminusunit[0].value!==-1)\r\n                selectedRecord[\"nwindowsperiodminusunit\"] = nwindowsperiodminusunit[0];\r\n                if(nwindowsperiodplusunit[0].value!==-1)\r\n                selectedRecord[\"nwindowsperiodplusunit\"] = nwindowsperiodplusunit[0];\r\n                selectedRecord[\"nsectioncode\"] =lab[0];\r\n                selectedRecord[\"ntzmanufdate\"] =ntzmanufdate[0];\r\n                selectedRecord[\"stzmanufdate\"] =ntzmanufdate[0].label;\r\n                selectedRecord[\"ntzpodate\"] =ntzpodate[0];\r\n                selectedRecord[\"stzpodate\"] =ntzpodate[0].label;\r\n                selectedRecord[\"ntzreceivedate\"] =ntzreceivedate[0];\r\n                selectedRecord[\"stzreceivedate\"] =ntzreceivedate[0].label;\r\n                selectedRecord[\"ntzinstallationdate\"] =ntzinstallationdate[0];\r\n                selectedRecord[\"stzinstallationdate\"] =ntzinstallationdate[0].label;\r\n                selectedRecord[\"ntzexpirydate\"] =ntzexpirydate[0];\r\n                selectedRecord[\"stzexpirydate\"] =ntzexpirydate[0].label;\r\n                selectedRecord[\"susername\"] =susername[0];\r\n            }\r\n                \r\n          \r\n            dispatch({type: DEFAULT_RETURN, \r\n                payload:{  \r\n                InstrumentCategory,\r\n                Supplier,\r\n                Manufacturer,\r\n                InstrumentStatus,\r\n                instrumentCategory:instrumentCategory,\r\n                supplier:supplier,\r\n                manufacturer:manufacturer,\r\n                Lab,\r\n                Period,\r\n                TimeZoneList,\r\n                isOpen: true,  \r\n                selectedRecord:  selectedRecord, \r\n                operation: operation,\r\n                screenName: screenName,\r\n                openModal : true, \r\n                ncontrolCode: ncontrolCode,\r\n                loading:false,\r\n                currentTime,\r\n                expiryDate\r\n            }});\r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: error.response.data }));\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport function getSectionUsers (nsectioncode, userInfo,selectedRecord,screenName) {\r\n    return function (dispatch) {  \r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"instrument/getSectionBasedUser\", {\"nsectioncode\":nsectioncode}, {userinfo:userInfo}) \r\n        .then(response=>{  \r\n            //console.log(\" response:\", response); \r\n            let  Users =[];\r\n            if(screenName===\"IDS_SECTION\"){\r\n            //let sectionusers=[];\r\n            const userName = constructOptionList(response.data || [], \"nusercode\",\r\n            \"susername\", undefined, undefined, false);\r\n            Users  = userName.get(\"OptionList\");\r\n            //selectedRecord[\"nusercode\"]=\"\";\r\n            selectedRecord[\"nusercode\"] = undefined;//{label:SectionUsers[0].label,value:SectionUsers[0].value,item:SectionUsers[0]};\r\n            }else{\r\n                Users  = response.data;\r\n            }\r\n        \r\n            dispatch({type: DEFAULT_RETURN, \r\n                payload:{ \r\n                    Users,\r\n                    selectedRecord,\r\n                    loading:false\r\n\r\n                }});      \r\n            \r\n       }).catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n       \r\n   // const sectionUsers = rsapi.post(\"instrument/getSectionBasedUser\",{\"nsectioncode\":nsectioncode},{ \"userinfo\": userInfo });\\\r\n   // urlArray = [sectionUsers]; \r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function getInstrumentDetail (Instrument, userInfo, masterData) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"instrument/getInstrument\", {ninstrumentcode:Instrument.ninstrumentcode, userinfo:userInfo})\r\n   .then(response=>{      \r\n        masterData = {...masterData, ...response.data};        \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false,dataState:undefined}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\n\r\nexport const getAvailableInstData = (instItem, url, key, screenName, userInfo, ncontrolCode,selectedRecord) => {\r\n    return function (dispatch) { \r\n        dispatch(initRequest(true));\r\n      //  Axios.all(urlArray)\r\n      let url=''\r\n        if(screenName===\"IDS_INSTRUMENTVALIDATION\"){\r\n            url=\"/instrument/getInstrumentValidationStatus\";\r\n\r\n        }\r\n        else\r\n        {\r\n            url=\"/instrument/getUsers\";\r\n        }\r\n            return rsapi.post(url, { \"userinfo\": userInfo })\r\n            .then(response=>{   \r\n                \r\n                const validationMap = constructOptionList(response.data.ValidationStatus || [], \"ntranscode\",\r\n                             \"stransstatus\", undefined, undefined, false);\r\n\r\n                const  ValidationStatus = validationMap.get(\"OptionList\");\r\n                const secMap = constructOptionList(response.data.Section || [], \"nsectioncode\",\r\n                             \"ssectionname\", undefined, undefined, false);\r\n                const userMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                                \"susername\", undefined, undefined, false);\r\n                const  Lab = secMap.get(\"OptionList\");\r\n                const LabDefault=secMap.get(\"DefaultValue\");\r\n                if(LabDefault!==undefined){\r\n                selectedRecord={ \"nsectioncode\":{\"value\": LabDefault.value, \r\n                \"label\":LabDefault.label},}\r\n            }\r\n                const  Users = userMap.get(\"OptionList\");\r\n                        dispatch({\r\n                        type: DEFAULT_RETURN, \r\n                        payload:{ \r\n                        ValidationStatus,\r\n                        Lab,\r\n                        Users,\r\n                        isOpen: true,  \r\n                        selectedRecord,\r\n                        //selectedRecord: operation === \"update\" ? response[7].data : {\"ntransactionstatus\": 1}, \r\n                        operation: \"create\",\r\n                        screenName: screenName,\r\n                        openModal : true, \r\n                        ncontrolCode: ncontrolCode, \r\n                        instItem:instItem,\r\n                        loading:false\r\n                    }\r\n             });\r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}});\r\n            if(error.response.status === 417) {\r\n                toast.info(error.response.data)\r\n            } else {\r\n                toast.error(error.message)\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const changeInstrumentCategoryFilter = (inputParam, filterInstrumentCategory) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/instrument/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        dataState:undefined,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterInstrumentCategory,\r\n                            nfilterInstrumentCategory: inputParam.inputData.nfilterInstrumentCategory\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}