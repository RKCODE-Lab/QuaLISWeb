{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\ChargeBand.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchChargeBandById } from '../../actions';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport FormInput from '../../components/form-input/form-input.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport Esign from '../audittrail/Esign';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ChargeBand extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.openModal = ncontrolcode => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          operation: \"create\",\n          selectedRecord: {},\n          ncontrolcode: ncontrolcode\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add \n      let inputData = [];\n      let dataState = undefined;\n      let fieldList = [\"schargebandname\", \"sdescription\", \"nprice\"];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        selectedId = this.state.selectedRecord.nchargebandcode;\n        dataState = this.state.dataState;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord;\n        fieldList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item] !== undefined ? item === 'nprice' ? this.state.selectedRecord[item] === '.' ? '0.0' : this.state.selectedRecord[item] : this.state.selectedRecord[item] : \"\";\n        });\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        fieldList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item] ? item === 'nprice' ? this.state.selectedRecord[item] === '.' ? '0.0' : this.state.selectedRecord[item] : this.state.selectedRecord[item] : \"\";\n        });\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        dataState,\n        saveType,\n        formRef,\n        selectedId\n      };\n      const masterData = this.props.Login.masterData;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            operation: this.props.Login.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          \"chargeband\": deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: \"delete\"\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: \"delete\",\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputOnChange = (event, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\n        selectedRecord[name] = event.target.value;\n      } else {//selectedRecord[name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      }); // if (value===0 || value===0.0) {\n      //     selectedRecord[name] = '';\n      //     this.setState({selectedRecord});\n      // }else{\n      //     selectedRecord[name] = value;\n      //     this.setState({selectedRecord});\n      // }\n    };\n\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      dataResult: [],\n      dataState: _dataState,\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      //this.extractedColumnList =[\"schargebandname\",\"sdescription\",\"nprice\"]\n      this.extractedColumnList = [{\n        \"idsName\": \"IDS_CHARGEBANDNAME\",\n        \"dataField\": \"schargebandname\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_DESCRIPTION\",\n        \"dataField\": \"sdescription\",\n        \"width\": \"400px\"\n      }, {\n        \"idsName\": \"IDS_PRICE\",\n        \"dataField\": \"nprice\",\n        \"width\": \"150px\"\n      }];\n      primaryKeyField = \"nchargebandcode\";\n    }\n\n    const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddChargeBand\") && this.state.controlMap.get('AddChargeBand').ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"EditChargeBand\") && this.state.controlMap.get('EditChargeBand').ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam ? this.props.Login.inputParam.displayName : '',\n      operation: \"update\",\n      primaryKeyField,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID,\n      inputparam: this.props.Login.inputparam\n    };\n    const deleteParam = {\n      screenName: this.props.Login.inputParam ? this.props.Login.inputParam.displayName : '',\n      methodUrl: this.props.Login.inputParam ? this.props.Login.inputParam.methodUrl : '',\n      operation: \"delete\"\n    };\n    const mandatoryFields = [{\n      \"idsName\": \"IDS_CHARGEBANDNAME\",\n      \"dataField\": \"schargebandname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_PRICE\",\n      \"dataField\": \"nprice\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.fetchChargeBandById,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      pageable: {\n        buttonCount: 4,\n        pageSizes: true\n      } // isComponent={true}\n      //pageable={false}\n      ,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\",\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.openModal(addID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: \"IDS_CHARGEBAND\",\n      closeModal: this.closeModal,\n      show: this.props.Login.openModal,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: event => this.onInputOnChange(event),\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_CHARGEBANDNAME\"\n        }),\n        name: \"schargebandname\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_CHARGEBANDNAME\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"schargebandname\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(FormTextarea, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_DESCRIPTION\"\n        }),\n        name: \"sdescription\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_DESCRIPTION\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"sdescription\"] : \"\",\n        isMandatory: false,\n        required: false,\n        maxLength: 255,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(FormInput, {\n        name: \"nprice\",\n        type: \"text\",\n        required: true,\n        isMandatory: true,\n        value: this.state.selectedRecord[\"nprice\"] !== undefined ? this.state.selectedRecord[\"nprice\"] : \"\" // value={Object.values(this.state.selectedRecord).length > 0 ? this.state.selectedRecord[\"nprice\"] : \"\"}\n        ,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_PRICE\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_PRICE\"\n        }),\n        onChange: event => this.onNumericInputOnChange(event, 'nprice'),\n        maxLength: 9,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 37\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  fetchChargeBandById,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(ChargeBand));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/pages/basemaster/ChargeBand.jsx"],"names":["React","connect","injectIntl","DataGrid","callService","crudMaster","updateStore","validateEsignCredential","fetchChargeBandById","Row","Col","toast","process","ListWrapper","FormInput","SlideOutModal","FormTextarea","Esign","showEsign","getControlMap","DEFAULT_RETURN","transactionStatus","mapStateToProps","state","Login","ChargeBand","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","validateEsign","inputParam","inputData","userInfo","sreason","selectedRecord","nreasoncode","value","spredefinedreason","label","password","screenData","openModal","ncontrolcode","updateInfo","typeName","operation","closeModal","loadEsign","selectedId","reloadData","userinfo","methodUrl","classUrl","displayName","onSaveClick","saveType","formRef","undefined","fieldList","nchargebandcode","toLowerCase","map","item","nmastersitecode","masterData","esignNeeded","userRoleControlRights","nformcode","screenName","deleteRecord","deleteParam","ncontrolCode","onInputOnChange","target","type","name","checked","YES","NO","onNumericInputOnChange","test","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","addID","has","get","editID","editParam","inputparam","mandatoryFields","buttonCount","pageSizes","intl","formatMessage","id","componentDidUpdate","previousProps","Object","values","push","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchChargeBandById } from '../../actions';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { ListWrapper } from '../../components/client-group.styles'\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport Esign from '../audittrail/Esign';\r\nimport { showEsign, getControlMap } from '../../components/CommonScript'\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes'\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass ChargeBand extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\",\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            selectedRecord: {}, userRoleControlRights: [], controlMap: new Map()\r\n        };\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    openModal = (ncontrolcode) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true,\r\n                operation: \"create\",\r\n                selectedRecord: {},\r\n                ncontrolcode: ncontrolcode\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    //this.setState({ openModal: true, selectedRecord :undefined, operation:\"create\" });\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add \r\n        let inputData = [];\r\n        let dataState = undefined;\r\n        let fieldList = [\"schargebandname\", \"sdescription\", \"nprice\"]\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let selectedId = null;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            selectedId = this.state.selectedRecord.nchargebandcode\r\n            dataState = this.state.dataState;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord;\r\n            fieldList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = \r\n                this.state.selectedRecord[item]!==undefined?item==='nprice'?\r\n                this.state.selectedRecord[item] ==='.'?'0.0':\r\n                this.state.selectedRecord[item]  : this.state.selectedRecord[item] : \"\";\r\n            })\r\n        }\r\n        else {\r\n            //add               \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n            fieldList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = \r\n                this.state.selectedRecord[item]?item==='nprice'?\r\n                this.state.selectedRecord[item] ==='.'?'0.0':\r\n                this.state.selectedRecord[item]  : this.state.selectedRecord[item] : \"\";\r\n            })\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            dataState, saveType, formRef, selectedId\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType,\r\n                    operation: this.props.Login.operation, openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                \"chargeband\": deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: \"delete\"\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, operation: \"delete\", openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            //this.extractedColumnList =[\"schargebandname\",\"sdescription\",\"nprice\"]\r\n            this.extractedColumnList = [\r\n                { \"idsName\": \"IDS_CHARGEBANDNAME\", \"dataField\": \"schargebandname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"400px\" },\r\n                { \"idsName\": \"IDS_PRICE\", \"dataField\": \"nprice\", \"width\": \"150px\" }\r\n            ];\r\n            primaryKeyField = \"nchargebandcode\";\r\n        }\r\n        const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddChargeBand\")\r\n            && this.state.controlMap.get('AddChargeBand').ncontrolcode;\r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"EditChargeBand\")\r\n            && this.state.controlMap.get('EditChargeBand').ncontrolcode;\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam ? this.props.Login.inputParam.displayName : '',\r\n            operation: \"update\",\r\n            primaryKeyField,\r\n            masterData: this.props.Login.masterData,\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: editID,\r\n            inputparam: this.props.Login.inputparam,\r\n        };\r\n        const deleteParam = {\r\n            screenName: this.props.Login.inputParam ? this.props.Login.inputParam.displayName : '',\r\n            methodUrl: this.props.Login.inputParam ? this.props.Login.inputParam.methodUrl : '',\r\n            operation: \"delete\"\r\n        };\r\n        const mandatoryFields = [\r\n            { \"idsName\": \"IDS_CHARGEBANDNAME\", \"dataField\": \"schargebandname\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_PRICE\", \"dataField\": \"nprice\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n        ];\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {/* <PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                            <HeaderName className=\"header-primary-md\">\r\n                                {this.props.Login.inputParam ? \r\n                                <FormattedMessage id={this.props.Login.inputParam.displayName} /> :\"\"}\r\n                            </HeaderName>\r\n                            <Button className=\"btn btn-user btn-primary-blue\" \r\n                            hidden={this.state.userRoleControlRights.indexOf(addID) === -1} \r\n                            onClick={()=>this.openModal(addID)} role=\"button\">\r\n                                <FontAwesomeIcon icon={faPlus} /> { }                          \r\n                                <FormattedMessage id=\"IDS_ADD\" defaultMessage='Add'/> \r\n                            </Button>\r\n                        </PrimaryHeader> */}\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    fetchRecord={this.props.fetchChargeBandById}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    pageable={{ buttonCount: 4, pageSizes: true }}\r\n                                    // isComponent={true}\r\n                                    //pageable={false}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    scrollable={\"scrollable\"}\r\n                                    gridHeight={\"600px\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    addRecord={() => this.openModal(addID)}\r\n                                />\r\n                                : \"\"}\r\n\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        onSaveClick={this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName=\"IDS_CHARGEBAND\"\r\n                        closeModal={this.closeModal}\r\n                        show={this.props.Login.openModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={(event) => this.onInputOnChange(event)}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <FormInput\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_CHARGEBANDNAME\" })}\r\n                                        name={\"schargebandname\"}\r\n                                        type=\"text\"\r\n                                        onChange={(event) => this.onInputOnChange(event)}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_CHARGEBANDNAME\" })}\r\n                                        value={this.state.selectedRecord ? this.state.selectedRecord[\"schargebandname\"] : \"\"}\r\n                                        isMandatory={true}\r\n                                        required={true}\r\n                                        maxLength={100}\r\n                                    />\r\n                                    <FormTextarea\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                        name={\"sdescription\"}\r\n                                        type=\"text\"\r\n                                        onChange={(event) => this.onInputOnChange(event)}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                        value={this.state.selectedRecord ? this.state.selectedRecord[\"sdescription\"] : \"\"}\r\n                                        isMandatory={false}\r\n                                        required={false}\r\n                                        maxLength={255}\r\n                                    />\r\n                                    {/* <FormNumericInput\r\n                                    name=\"nprice\"\r\n                                    label={this.props.intl.formatMessage({ id:\"IDS_PRICE\"})}\r\n                                    placeholder={this.props.intl.formatMessage({ id:\"IDS_PRICE\"})}\r\n                                    type=\"number\"\r\n                                    value={this.state.selectedRecord ? this.state.selectedRecord[\"nprice\"] : \"\"}\r\n                                    //max={100000}\r\n                                    min={0}\r\n                                    strict={true}\r\n                                    maxLength={6}\r\n                                    onChange={(event)=>this.onNumericInputOnChange(event,'nprice')}\r\n                                    noStyle={true}\r\n                                    precision={2}\r\n                                    className=\"form-control\"\r\n                                    // isInvalid={!!errors.numeric}\r\n                                    isMandatory={true}\r\n                                    errors=\"Please provide a valid number.\"\r\n                                /> */}\r\n                                    <FormInput\r\n                                        name=\"nprice\"\r\n                                        type=\"text\"\r\n                                        required={true}\r\n                                        isMandatory={true}\r\n                                        value={this.state.selectedRecord[\"nprice\"] !==undefined ? this.state.selectedRecord[\"nprice\"] : \"\"}\r\n                                        // value={Object.values(this.state.selectedRecord).length > 0 ? this.state.selectedRecord[\"nprice\"] : \"\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_PRICE\" })}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_PRICE\" })}\r\n                                        onChange={(event) => this.onNumericInputOnChange(event, 'nprice')}\r\n                                        maxLength={9}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        } />\r\n                    : \"\"}\r\n            </>\r\n        );\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericInputOnChange = (event, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\r\n            selectedRecord[name] = event.target.value;\r\n\r\n        } else {\r\n            //selectedRecord[name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n        // if (value===0 || value===0.0) {\r\n        //     selectedRecord[name] = '';\r\n        //     this.setState({selectedRecord});\r\n        // }else{\r\n        //     selectedRecord[name] = value;\r\n        //     this.setState({selectedRecord});\r\n        // }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, fetchChargeBandById, updateStore, validateEsignCredential })(injectIntl(ChargeBand));"]},"metadata":{},"sourceType":"module"}