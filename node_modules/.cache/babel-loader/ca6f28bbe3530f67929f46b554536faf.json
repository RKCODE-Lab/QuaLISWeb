{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\instrumentmanagement\\\\AddInstrumentCategory.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { injectIntl } from 'react-intl';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst AddInstrumentCategory = props => {\n  const {\n    Technique,\n    Interfacetype\n  } = props;\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_INSTRUMENTCATEGORY\"\n    }),\n    name: \"sinstrumentcatname\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_INSTRUMENTCATEGORY\"\n    }),\n    value: props.selectedRecord[\"sinstrumentcatname\"] ? props.selectedRecord[\"sinstrumentcatname\"] : \"\",\n    isMandatory: true,\n    required: true,\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormTextarea, {\n    label: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    name: \"sdescription\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    value: props.selectedRecord[\"sdescription\"] ? props.selectedRecord[\"sdescription\"] : \"\",\n    isMandatory: false,\n    required: false,\n    maxLength: 255,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    label: props.intl.formatMessage({\n      id: \"IDS_CATEGORYBASEDFLOW\"\n    }),\n    type: \"switch\",\n    name: \"ncategorybasedflow\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_CATEGORYBASEDFLOW\"\n    }),\n    defaultValue: props.selectedRecord ? props.selectedRecord[\"ncategorybasedflow\"] === transactionStatus.YES ? true : false : false,\n    isMandatory: false,\n    required: false,\n    checked: props.selectedRecord ? props.selectedRecord[\"ncategorybasedflow\"] === transactionStatus.YES ? true : false : false //disabled={props.selectedRecord ? props.selectedRecord[\"ncategorybasedflow\"] === transactionStatus.YES  ? true : false : false}\n    ,\n    disabled: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    label: props.intl.formatMessage({\n      id: \"IDS_CALIBRATIONREQUIRED\"\n    }),\n    type: \"switch\",\n    name: \"ncalibrationreq\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_CALIBRATIONREQUIRED\"\n    }),\n    defaultValue: props.selectedRecord ? props.selectedRecord[\"ncalibrationreq\"] === transactionStatus.YES ? true : false : false,\n    isMandatory: false,\n    required: false,\n    checked: props.selectedRecord ? props.selectedRecord[\"ncalibrationreq\"] === transactionStatus.YES ? true : false : false //disabled={props.selectedRecord ? props.selectedRecord[\"ncalibrationreq\"] === transactionStatus.YES  ? true : false : false}\n    ,\n    disabled: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    label: props.intl.formatMessage({\n      id: \"IDS_DISPLAYSTATUS\"\n    }),\n    type: \"switch\",\n    name: \"ndefaultstatus\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_DISPLAYSTATUS\"\n    }),\n    defaultValue: props.selectedRecord ? props.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true : false : false,\n    isMandatory: false,\n    required: false,\n    checked: props.selectedRecord ? props.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true : false : false //disabled={props.selectedRecord ? props.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES  ? true : false : false}\n    ,\n    disabled: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default injectIntl(AddInstrumentCategory);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/instrumentmanagement/AddInstrumentCategory.jsx"],"names":["React","Row","Col","FormInput","FormTextarea","CustomSwitch","FormSelectSearch","injectIntl","transactionStatus","AddInstrumentCategory","props","Technique","Interfacetype","intl","formatMessage","id","event","onInputOnChange","selectedRecord","YES"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { injectIntl } from 'react-intl';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\nconst AddInstrumentCategory = (props) => {\r\n    const { Technique, Interfacetype } = props;\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <FormInput\r\n                    label={props.intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORY\" })}\r\n                    name= \"sinstrumentcatname\"\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORY\" })}\r\n                    value={props.selectedRecord[\"sinstrumentcatname\"] ? props.selectedRecord[\"sinstrumentcatname\"] : \"\"}\r\n                    isMandatory={true}\r\n                    required={true}\r\n                    maxLength={100}\r\n                />\r\n            </Col>\r\n            <Col md={12}>\r\n                <FormTextarea\r\n                    label={props.intl.formatMessage({ id:\"IDS_DESCRIPTION\" })}\r\n                    name=\"sdescription\"\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                    value={props.selectedRecord[\"sdescription\"] ? props.selectedRecord[\"sdescription\"] : \"\"}\r\n                    isMandatory={false}\r\n                    required={false}\r\n                    maxLength={255}\r\n                />\r\n            </Col>\r\n            {/* <Col md={12}>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_TECHNIQUE\" })}\r\n                    name={\"ntechniquecode\"} \r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    value={props.selectedRecord.ntechniquecode ? props.selectedRecord.ntechniquecode: \"\"}\r\n                    options={Technique}\r\n                    optionId=\"ntechniquecode\"\r\n                    optionValue=\"stechniquename\"\r\n                    isMandatory={false}\r\n                    isMulti={false}\r\n                    isClearable={true}\r\n                    isSearchable={false}\r\n                    closeMenuOnSelect={true}\r\n                    alphabeticalSort={true}\r\n                    as={\"select\"}\r\n                    onChange={(event) => props.onComboChange(event, \"ntechniquecode\")}\r\n                    \r\n                />\r\n            </Col>\r\n            <Col md={12}>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_INTERFACETYPE\" })}\r\n                    name= {\"ninterfacetypecode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    value={props.selectedRecord.ninterfacetypecode ? props.selectedRecord.ninterfacetypecode : \"\"}\r\n                    options={Interfacetype}\r\n                    optionId=\"ninterfacetypecode\"\r\n                    optionValue=\"sinterfacetypename\"\r\n                    isMandatory={true}\r\n                    isMulti={false}\r\n                    isSearchable={false}\r\n                    closeMenuOnSelect={true}\r\n                    alphabeticalSort={true}\r\n                    as={\"select\"}\r\n                    onChange={(event) => props.onComboChange(event, \"ninterfacetypecode\")}\r\n                    \r\n                />\r\n            </Col> */}\r\n            <Col md={12}>\r\n                <CustomSwitch\r\n                    label={props.intl.formatMessage({ id: \"IDS_CATEGORYBASEDFLOW\" })}\r\n                    type=\"switch\"\r\n                    name={\"ncategorybasedflow\"}\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_CATEGORYBASEDFLOW\" })}\r\n                    defaultValue={props.selectedRecord ? props.selectedRecord[\"ncategorybasedflow\"] === transactionStatus.YES  ? true : false : false}\r\n                    isMandatory={false}\r\n                    required={false}\r\n                    checked={props.selectedRecord ? props.selectedRecord[\"ncategorybasedflow\"] === transactionStatus.YES  ? true : false : false}\r\n                    //disabled={props.selectedRecord ? props.selectedRecord[\"ncategorybasedflow\"] === transactionStatus.YES  ? true : false : false}\r\n                    disabled={false}\r\n                >\r\n                </CustomSwitch>\r\n            </Col>\r\n            <Col md={12}>\r\n                <CustomSwitch\r\n                    label={props.intl.formatMessage({ id: \"IDS_CALIBRATIONREQUIRED\" })}\r\n                    type=\"switch\"\r\n                    name={\"ncalibrationreq\"}\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_CALIBRATIONREQUIRED\" })}\r\n                    defaultValue={props.selectedRecord ? props.selectedRecord[\"ncalibrationreq\"] === transactionStatus.YES ? true : false : false}\r\n                    isMandatory={false}\r\n                    required={false}\r\n                    checked={props.selectedRecord ? props.selectedRecord[\"ncalibrationreq\"] === transactionStatus.YES  ? true : false : false}\r\n                    //disabled={props.selectedRecord ? props.selectedRecord[\"ncalibrationreq\"] === transactionStatus.YES  ? true : false : false}\r\n                    disabled={false}\r\n                >\r\n                </CustomSwitch>\r\n            </Col>\r\n            <Col md={12}>\r\n                <CustomSwitch\r\n                    label={props.intl.formatMessage({ id: \"IDS_DISPLAYSTATUS\" })}\r\n                    type=\"switch\"\r\n                    name={\"ndefaultstatus\"}\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_DISPLAYSTATUS\" })}\r\n                    defaultValue={props.selectedRecord ? props.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES  ? true : false : false}\r\n                    isMandatory={false}\r\n                    required={false}\r\n                    checked={props.selectedRecord ? props.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES  ? true : false : false}\r\n                    //disabled={props.selectedRecord ? props.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES  ? true : false : false}\r\n                    disabled={false}\r\n                >\r\n                </CustomSwitch>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default injectIntl(AddInstrumentCategory);"]},"metadata":{},"sourceType":"module"}