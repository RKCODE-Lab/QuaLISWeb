{"ast":null,"code":"'use strict';\n\nvar _ = require('underscore');\n\nvar templateChecks = require('../../utils/templateChecks');\n\nmodule.exports = function (dialect) {\n  var explainFormatRegExp = /^(text|xml|json|yaml)$/i;\n  dialect.templates.add('explain', {\n    pattern: 'explain {options} {analyze} {verbose} {query} {select} {expression}',\n    validate: function validate(type, params) {\n      templateChecks.atLeastOneOfProps(type, params, ['query', 'select', 'expression']);\n      templateChecks.onlyOneOfProps(type, params, ['query', 'select', 'expression']);\n      templateChecks.propType(type, params, 'options', 'object');\n\n      if (!_.isUndefined(params.options)) {\n        templateChecks.atLeastOneOfProps('explain:options', params.options, ['analyze', 'verbose', 'costs', 'buffers', 'timing', 'format']);\n        templateChecks.propType('explain:options', params.options, 'analyze', 'boolean');\n        templateChecks.propType('explain:options', params.options, 'verbose', 'boolean');\n        templateChecks.propType('explain:options', params.options, 'costs', 'boolean');\n        templateChecks.propType('explain:options', params.options, 'buffers', 'boolean');\n        templateChecks.propType('explain:options', params.options, 'timing', 'boolean');\n        templateChecks.propType('explain:options', params.options, 'format', 'string');\n        templateChecks.propMatch('explain:options', params.options, 'format', explainFormatRegExp);\n      }\n\n      templateChecks.propType(type, params, 'analyze', 'boolean');\n      templateChecks.propType(type, params, 'verbose', 'boolean');\n    }\n  }); // patch parent select template to add some blocks\n\n  var selectTemplate = dialect.templates.get('select');\n  selectTemplate.pattern = selectTemplate.pattern.replace('{distinct}', '{distinct} {distinctOn}');\n  var parentSelectValidate = selectTemplate.validate;\n\n  selectTemplate.validate = function (type, params) {\n    parentSelectValidate(type, params);\n    templateChecks.propType(type, params, 'distinctOn', ['string', 'array']);\n  };\n\n  dialect.templates.set('select', selectTemplate);\n};","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/node_modules/json-sql/lib/dialects/postgresql/templates.js"],"names":["_","require","templateChecks","module","exports","dialect","explainFormatRegExp","templates","add","pattern","validate","type","params","atLeastOneOfProps","onlyOneOfProps","propType","isUndefined","options","propMatch","selectTemplate","get","replace","parentSelectValidate","set"],"mappings":"AAAA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,4BAAD,CAA5B;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AAClC,MAAIC,mBAAmB,GAAG,yBAA1B;AAEAD,EAAAA,OAAO,CAACE,SAAR,CAAkBC,GAAlB,CAAsB,SAAtB,EAAiC;AAChCC,IAAAA,OAAO,EAAE,qEADuB;AAEhCC,IAAAA,QAAQ,EAAE,kBAASC,IAAT,EAAeC,MAAf,EAAuB;AAChCV,MAAAA,cAAc,CAACW,iBAAf,CAAiCF,IAAjC,EAAuCC,MAAvC,EAA+C,CAAC,OAAD,EAAU,QAAV,EAAoB,YAApB,CAA/C;AACAV,MAAAA,cAAc,CAACY,cAAf,CAA8BH,IAA9B,EAAoCC,MAApC,EAA4C,CAAC,OAAD,EAAU,QAAV,EAAoB,YAApB,CAA5C;AAEAV,MAAAA,cAAc,CAACa,QAAf,CAAwBJ,IAAxB,EAA8BC,MAA9B,EAAsC,SAAtC,EAAiD,QAAjD;;AAEA,UAAI,CAACZ,CAAC,CAACgB,WAAF,CAAcJ,MAAM,CAACK,OAArB,CAAL,EAAoC;AACnCf,QAAAA,cAAc,CAACW,iBAAf,CACC,iBADD,EAECD,MAAM,CAACK,OAFR,EAGC,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,EAAgC,SAAhC,EAA2C,QAA3C,EAAqD,QAArD,CAHD;AAKAf,QAAAA,cAAc,CAACa,QAAf,CAAwB,iBAAxB,EAA2CH,MAAM,CAACK,OAAlD,EAA2D,SAA3D,EAAsE,SAAtE;AACAf,QAAAA,cAAc,CAACa,QAAf,CAAwB,iBAAxB,EAA2CH,MAAM,CAACK,OAAlD,EAA2D,SAA3D,EAAsE,SAAtE;AACAf,QAAAA,cAAc,CAACa,QAAf,CAAwB,iBAAxB,EAA2CH,MAAM,CAACK,OAAlD,EAA2D,OAA3D,EAAoE,SAApE;AACAf,QAAAA,cAAc,CAACa,QAAf,CAAwB,iBAAxB,EAA2CH,MAAM,CAACK,OAAlD,EAA2D,SAA3D,EAAsE,SAAtE;AACAf,QAAAA,cAAc,CAACa,QAAf,CAAwB,iBAAxB,EAA2CH,MAAM,CAACK,OAAlD,EAA2D,QAA3D,EAAqE,SAArE;AACAf,QAAAA,cAAc,CAACa,QAAf,CAAwB,iBAAxB,EAA2CH,MAAM,CAACK,OAAlD,EAA2D,QAA3D,EAAqE,QAArE;AACAf,QAAAA,cAAc,CAACgB,SAAf,CAAyB,iBAAzB,EAA4CN,MAAM,CAACK,OAAnD,EAA4D,QAA5D,EAAsEX,mBAAtE;AACA;;AAEDJ,MAAAA,cAAc,CAACa,QAAf,CAAwBJ,IAAxB,EAA8BC,MAA9B,EAAsC,SAAtC,EAAiD,SAAjD;AACAV,MAAAA,cAAc,CAACa,QAAf,CAAwBJ,IAAxB,EAA8BC,MAA9B,EAAsC,SAAtC,EAAiD,SAAjD;AACA;AAzB+B,GAAjC,EAHkC,CA+BlC;;AACA,MAAIO,cAAc,GAAGd,OAAO,CAACE,SAAR,CAAkBa,GAAlB,CAAsB,QAAtB,CAArB;AACAD,EAAAA,cAAc,CAACV,OAAf,GAAyBU,cAAc,CAACV,OAAf,CAAuBY,OAAvB,CAA+B,YAA/B,EAA6C,yBAA7C,CAAzB;AAEA,MAAIC,oBAAoB,GAAGH,cAAc,CAACT,QAA1C;;AACAS,EAAAA,cAAc,CAACT,QAAf,GAA0B,UAASC,IAAT,EAAeC,MAAf,EAAuB;AAChDU,IAAAA,oBAAoB,CAACX,IAAD,EAAOC,MAAP,CAApB;AAEAV,IAAAA,cAAc,CAACa,QAAf,CAAwBJ,IAAxB,EAA8BC,MAA9B,EAAsC,YAAtC,EAAoD,CAAC,QAAD,EAAW,OAAX,CAApD;AACA,GAJD;;AAMAP,EAAAA,OAAO,CAACE,SAAR,CAAkBgB,GAAlB,CAAsB,QAAtB,EAAgCJ,cAAhC;AACA,CA3CD","sourcesContent":["'use strict';\n\nvar _ = require('underscore');\nvar templateChecks = require('../../utils/templateChecks');\n\nmodule.exports = function(dialect) {\n\tvar explainFormatRegExp = /^(text|xml|json|yaml)$/i;\n\n\tdialect.templates.add('explain', {\n\t\tpattern: 'explain {options} {analyze} {verbose} {query} {select} {expression}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.atLeastOneOfProps(type, params, ['query', 'select', 'expression']);\n\t\t\ttemplateChecks.onlyOneOfProps(type, params, ['query', 'select', 'expression']);\n\n\t\t\ttemplateChecks.propType(type, params, 'options', 'object');\n\n\t\t\tif (!_.isUndefined(params.options)) {\n\t\t\t\ttemplateChecks.atLeastOneOfProps(\n\t\t\t\t\t'explain:options',\n\t\t\t\t\tparams.options,\n\t\t\t\t\t['analyze', 'verbose', 'costs', 'buffers', 'timing', 'format']\n\t\t\t\t);\n\t\t\t\ttemplateChecks.propType('explain:options', params.options, 'analyze', 'boolean');\n\t\t\t\ttemplateChecks.propType('explain:options', params.options, 'verbose', 'boolean');\n\t\t\t\ttemplateChecks.propType('explain:options', params.options, 'costs', 'boolean');\n\t\t\t\ttemplateChecks.propType('explain:options', params.options, 'buffers', 'boolean');\n\t\t\t\ttemplateChecks.propType('explain:options', params.options, 'timing', 'boolean');\n\t\t\t\ttemplateChecks.propType('explain:options', params.options, 'format', 'string');\n\t\t\t\ttemplateChecks.propMatch('explain:options', params.options, 'format', explainFormatRegExp);\n\t\t\t}\n\n\t\t\ttemplateChecks.propType(type, params, 'analyze', 'boolean');\n\t\t\ttemplateChecks.propType(type, params, 'verbose', 'boolean');\n\t\t}\n\t});\n\n\t// patch parent select template to add some blocks\n\tvar selectTemplate = dialect.templates.get('select');\n\tselectTemplate.pattern = selectTemplate.pattern.replace('{distinct}', '{distinct} {distinctOn}');\n\n\tvar parentSelectValidate = selectTemplate.validate;\n\tselectTemplate.validate = function(type, params) {\n\t\tparentSelectValidate(type, params);\n\n\t\ttemplateChecks.propType(type, params, 'distinctOn', ['string', 'array']);\n\t};\n\n\tdialect.templates.set('select', selectTemplate);\n};\n"]},"metadata":{},"sourceType":"script"}