{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\COARelease.jsx\";\nimport React from 'react';\nimport { ListWrapper } from '../components/client-group.styles';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, updateStore, validateEsignCredential, getSubSampleBySample } from '../actions';\nimport Esign from '../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../actions/LoginTypes'; //import SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\n//import AddMethod from './AddMethod';\n\nimport { showEsign, getControlMap } from '../components/CommonScript';\nimport { transactionStatus } from '../components/Enumeration';\nimport DataGridWithMultipleGrid from '../components/data-grid/DataGridWithMultipleGrid';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass COARelease extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleExpandChange = (row, dataState) => {\n      const viewParam = {\n        nsitecode: -1,\n        userInfo: this.props.Login.userInfo,\n        primaryKeyField: \"npreregno\",\n        masterData: this.props.Login.masterData\n      };\n      this.props.getSubSampleBySample({ ...viewParam,\n        dataState,\n        primaryKeyValue: row[\"dataItem\"][viewParam.primaryKeyField],\n        viewRow: row[\"dataItem\"]\n      });\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"coarelease\",\n        methodUrl: \"COARelease\",\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_ARNO\",\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PRODUCT\",\n      \"dataField\": \"Specimen Type\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PRODUCTCATEGORY\",\n      \"dataField\": \"Specimen Category\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_STATUS\",\n      \"dataField\": \"stransdisplaystatus\",\n      \"width\": \"200px\"\n    }];\n    this.roleColumnList = [{\n      \"idsName\": \"IDS_SAMPLEARNO\",\n      \"dataField\": \"ssamplearno\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_SAMPLENAME\",\n      \"dataField\": \"Sample Name\",\n      \"width\": \"100px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_CONTAINERTYPE\",\n      \"dataField\": \"Container Type\",\n      \"width\": \"100px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    console.log(\"child\", this.props.Login.releaseSubSample);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGridWithMultipleGrid, {\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataResult1: this.props.Login.releaseSubSample,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      expandField: \"expanded\",\n      handleExpandChange: this.handleExpandChange,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      hasChild: true,\n      hasSubChild: true,\n      childColumnList: this.roleColumnList,\n      childMappingField: \"npreregno\",\n      childList: this.props.Login.releaseSubSample || new Map(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }) : \"\"))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.data || this.props.Login.masterData.releaseSubSample || [], this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, this.props.Login.dataState || dataState),\n          //  dataResult1: process(this.props.Login.releaseSubSample, this.props.Login.dataState || dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getSubSampleBySample\n})(injectIntl(COARelease));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/COARelease.jsx"],"names":["React","ListWrapper","Row","Col","toast","process","connect","injectIntl","callService","crudMaster","updateStore","validateEsignCredential","getSubSampleBySample","Esign","DEFAULT_RETURN","showEsign","getControlMap","transactionStatus","DataGridWithMultipleGrid","mapStateToProps","state","Login","COARelease","Component","constructor","props","handleExpandChange","row","dataState","viewParam","nsitecode","userInfo","primaryKeyField","masterData","primaryKeyValue","viewRow","dataStateChange","event","setState","dataResult","data","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","selectedId","reloadData","inputParam","inputData","classUrl","methodUrl","displayName","validateEsign","sreason","password","screenData","formRef","createRef","skip","take","settings","parseInt","masterStatus","error","userRoleControlRights","controlMap","Map","extractedColumnList","roleColumnList","getDerivedStateFromProps","warn","render","console","log","releaseSubSample","componentDidUpdate","previousProps","nformcode","Object","values","map","item","push","ncontrolcode","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {ListWrapper} from '../components/client-group.styles';\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { callService, crudMaster,updateStore, validateEsignCredential,getSubSampleBySample } from '../actions';\r\n\r\n\r\nimport Esign from '../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../actions/LoginTypes';\r\n//import SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\n//import AddMethod from './AddMethod';\r\n\r\nimport {showEsign, getControlMap} from '../components/CommonScript';\r\nimport {transactionStatus} from '../components/Enumeration';\r\nimport DataGridWithMultipleGrid from '../components/data-grid/DataGridWithMultipleGrid';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass COARelease extends React.Component\r\n{\r\n    constructor(props){\r\n        super(props);        \r\n        this.formRef = React.createRef();\r\n     \r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {        \r\n            data:[], masterStatus:\"\", error:\"\", selectedRecord:{},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights:[],\r\n            controlMap :new Map()\r\n        };\r\n\r\n        this.extractedColumnList =[\r\n                {\"idsName\":\"IDS_ARNO\",\"dataField\":\"sarno\",\"width\":\"200px\"},\r\n                                    {\"idsName\":\"IDS_PRODUCT\",\"dataField\":\"Specimen Type\",\"width\":\"200px\"\r\n                                },\r\n                                    {\"idsName\":\"IDS_PRODUCTCATEGORY\",\"dataField\":\"Specimen Category\",\"width\":\"200px\"},\r\n                                    {\"idsName\":\"IDS_STATUS\",\"dataField\":\"stransdisplaystatus\",\"width\":\"200px\"}\r\n                                    ];\r\n\r\n        this.roleColumnList = [{ \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"150px\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                                    { \"idsName\": \"IDS_SAMPLENAME\", \"dataField\": \"Sample Name\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                                    { \"idsName\": \"IDS_CONTAINERTYPE\", \"dataField\": \"Container Type\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n                          ];\r\n\r\n\r\n    }\r\n    handleExpandChange = (row, dataState) => {\r\n        const viewParam = {\r\n            nsitecode: -1,\r\n            userInfo: this.props.Login.userInfo, primaryKeyField: \"npreregno\",\r\n            masterData: this.props.Login.masterData\r\n        };\r\n\r\n        this.props.getSubSampleBySample({\r\n            ...viewParam, dataState,\r\n            primaryKeyValue: row[\"dataItem\"][viewParam.primaryKeyField], viewRow: row[\"dataItem\"]\r\n        });\r\n\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign){          \r\n            if (this.props.Login.operation === \"delete\"){\r\n                loadEsign = false;\r\n                openModal =  false;\r\n                selectedRecord = {};\r\n            }\r\n            else{\r\n                loadEsign = false;                \r\n            }\r\n        }\r\n        else{\r\n            openModal =  false;\r\n            selectedRecord ={};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {openModal, loadEsign, selectedRecord, selectedId:null}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        \r\n    }\r\n    \r\n    static getDerivedStateFromProps(props, state){\r\n    \r\n        if (props.Login.masterStatus !== \"\"  && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";           \r\n        } \r\n         \r\n        if (props.Login.error !== state.error){\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }   \r\n        return null;\r\n     }    \r\n\r\n\r\n    render(){\r\nconsole.log(\"child\",this.props.Login.releaseSubSample)\r\n    return (\r\n        <>\r\n        <Row>\r\n            <Col>\r\n                <ListWrapper className=\"client-list-content\">\r\n                    \r\n                   \r\n                    {this.state.data ? \r\n                        <DataGridWithMultipleGrid\r\n                            data = {this.state.data}\r\n                            dataResult = {this.state.dataResult}\r\n                            dataResult1 = {this.props.Login.releaseSubSample}\r\n                            dataState = {this.state.dataState}\r\n                            dataStateChange = {this.dataStateChange}\r\n                            extractedColumnList = {this.extractedColumnList}\r\n                          expandField=\"expanded\"\r\n                          handleExpandChange={this.handleExpandChange}\r\n                            reloadData = {this.reloadData}\r\n                            controlMap = {this.state.controlMap}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            userInfo = {this.props.Login.userInfo}\r\n                            pageable={true}\r\n                            scrollable={'scrollable'}\r\n                            gridHeight = {'600px'}\r\n                            isActionRequired={true}\r\n                            isToolBarRequired={true} \r\n                            selectedId={this.props.Login.selectedId} \r\n                            hasChild={true}\r\n                            hasSubChild={true}\r\n                            childColumnList={this.roleColumnList}\r\n                            childMappingField={\"npreregno\"}\r\n                            childList={this.props.Login.releaseSubSample || new Map()}\r\n                        />\r\n                    :\"\"}    \r\n                </ListWrapper>\r\n            </Col>\r\n        </Row>\r\n    \r\n        </>\r\n      );\r\n    }\r\n\r\n    componentDidUpdate(previousProps){\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData){            \r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode){\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights){\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item=>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({userRoleControlRights, controlMap, data:this.props.Login.masterData, \r\n                    dataResult: process(this.props.Login.data || this.props.Login.masterData.releaseSubSample || [], this.state.dataState),\r\n\r\n                });\r\n            }\r\n            else {        \r\n                let {dataState} = this.state;\r\n                if(this.props.Login.dataState === undefined){\r\n                    dataState = {skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                }    \r\n\r\n     \r\n                this.setState({data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData, this.props.Login.dataState || dataState),                 \r\n                     //  dataResult1: process(this.props.Login.releaseSubSample, this.props.Login.dataState || dataState),\r\n\r\n\r\n                     dataState\r\n                });\r\n            } \r\n         }\r\n         else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord ){    \r\n            this.setState({selectedRecord:this.props.Login.selectedRecord});\r\n         }       \r\n    }    \r\n   \r\n    reloadData = () =>{\r\n        const inputParam = {\r\n                        inputData : {\"userinfo\":this.props.Login.userInfo},                        \r\n                        classUrl: \"coarelease\",\r\n                        methodUrl: \"COARelease\",\r\n                        displayName:this.props.Login.inputParam.displayName,\r\n                        userInfo: this.props.Login.userInfo\r\n                    };     \r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    \r\n    validateEsign = () =>{\r\n        const inputParam = {\r\n                                inputData: {\"userinfo\": {...this.props.Login.userInfo, \r\n                                                        sreason: this.state.selectedRecord[\"esigncomments\"] },\r\n                                             password : this.state.selectedRecord[\"esignpassword\"]\r\n                                            },\r\n                                screenData : this.props.Login.screenData\r\n                            }        \r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }    \r\n   \r\n }\r\n export default connect(mapStateToProps, {callService, crudMaster, updateStore, validateEsignCredential,getSubSampleBySample})(injectIntl(COARelease));"]},"metadata":{},"sourceType":"module"}