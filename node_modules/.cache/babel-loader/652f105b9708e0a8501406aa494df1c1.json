{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\ADSUsers.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { callService, crudMaster, validateEsignCredential, updateStore } from '../../actions';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { getControlMap, showEsign, validateLoginId } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport AddADSUsers from './AddADSUsers';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ADSUsers extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {}; // if(event.target.name === \"\"){\n\n      selectedRecord[event.target.name] = event.target.value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onLoginInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const loginid = validateLoginId(event.target.value);\n\n      if (loginid) {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = this.state.selectedRecord[event.target.name];\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.syncADSUsers = syncId => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          ncontrolCode: syncId,\n          openModal: true,\n          screenName: this.props.Login.inputParam.displayName,\n          operation: \"sync\",\n          selectedRecord: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add \n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n      inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      this.fieldList.map(item => {\n        return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item];\n      });\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        saveType,\n        formRef,\n        selectedId,\n        dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName,\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.extractedColumnList = [{\n      \"controlType\": \"textbox\",\n      \"idsName\": \"IDS_LOGINID\",\n      \"dataField\": \"sloginid\",\n      \"width\": \"400px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }, {\n      \"controlType\": \"textbox\",\n      \"idsName\": \"IDS_EMPID\",\n      \"dataField\": \"necno\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }];\n    this.primaryKeyField = \"nadsusercode\";\n    this.fieldList = [\"suserid\", \"spassword\"];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const syncId = this.props.Login.inputParam && this.state.controlMap.has(\"ManualSync\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"ManualSync\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const mandatoryFields = [{\n      \"controlType\": \"textbox\",\n      \"idsName\": \"IDS_USERID\",\n      \"dataField\": \"suserid\",\n      \"width\": \"400px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }, {\n      \"controlType\": \"textbox\",\n      \"idsName\": \"IDS_PASSWORD\",\n      \"dataField\": \"spassword\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: this.primaryKeyField,\n      selectedId: this.props.Login.selectedId,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      reloadData: this.reloadData,\n      syncData: () => this.syncADSUsers(syncId),\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isToolBarRequired: true,\n      isRefreshRequired: false,\n      pageable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddADSUsers, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onLoginInputChange: this.onLoginInputChange,\n        onComboChange: this.onComboChange,\n        formatMessage: this.props.intl.formatMessage,\n        userInfo: this.props.Login.userInfo,\n        settings: this.props.Login.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore\n})(injectIntl(ADSUsers));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/configurationmaster/ADSUsers.jsx"],"names":["React","connect","injectIntl","ListWrapper","Row","Col","toast","process","callService","crudMaster","validateEsignCredential","updateStore","DataGrid","getControlMap","showEsign","validateLoginId","Esign","SlideOutModal","DEFAULT_RETURN","AddADSUsers","mapStateToProps","state","Login","ADSUsers","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","selectedId","operation","updateInfo","typeName","onInputOnChange","target","name","value","onLoginInputChange","loginid","syncADSUsers","syncId","ncontrolCode","screenName","inputParam","displayName","reloadData","inputData","userInfo","classUrl","methodUrl","onSaveClick","saveType","formRef","undefined","toLowerCase","nmastersitecode","fieldList","map","item","esignNeeded","userRoleControlRights","nformcode","screenData","masterData","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","isOpen","controlMap","Map","primaryKeyField","getDerivedStateFromProps","warn","render","has","concat","get","ncontrolcode","mandatoryFields","intl","formatMessage","onComboChange","componentDidUpdate","previousProps","Object","values","push","length","skipcount"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,uBAAlC,EAA2DC,WAA3D,QAA8E,eAA9E;AACA,OAAOC,QAAP,MAAqB,gDAArB;AACA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,eAAnC,QAA0D,+BAA1D;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAIA,MAAMC,QAAN,SAAuBvB,KAAK,CAACwB,SAA7B,CAAuC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAwCnBC,eAxCmB,GAwCAC,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AAEVC,QAAAA,UAAU,EAAEvB,OAAO,CAAC,KAAKc,KAAL,CAAWU,IAAZ,EAAkBH,KAAK,CAACI,SAAxB,CAFT;AAGVA,QAAAA,SAAS,EAAEJ,KAAK,CAACI;AAHP,OAAd;AAMH,KA/CkB;;AAAA,SAiDnBC,UAjDmB,GAiDN,MAAM;AACf,UAAIC,SAAS,GAAG,KAAKR,KAAL,CAAWJ,KAAX,CAAiBY,SAAjC;AACA,UAAIC,SAAS,GAAG,KAAKT,KAAL,CAAWJ,KAAX,CAAiBa,SAAjC;AACA,UAAIC,cAAc,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,cAAtC;AACA,UAAIC,UAAU,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAlC;;AACA,UAAI,KAAKX,KAAL,CAAWJ,KAAX,CAAiBY,SAArB,EAAgC;AAC5B,YAAI,KAAKR,KAAL,CAAWJ,KAAX,CAAiBgB,SAAjB,KAA+B,QAAnC,EAA6C;AACzCJ,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,cAAc,GAAG,EAAjB;AAEH,SALD,MAKO;AACHF,UAAAA,SAAS,GAAG,KAAZ;AACAE,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,UAAAA,cAAc,CAAC,aAAD,CAAd,GAA8B,EAA9B;AACH;AACJ,OAZD,MAYO;AACHD,QAAAA,SAAS,GAAG,KAAZ;AACAC,QAAAA,cAAc,GAAG,EAAjB;AACAC,QAAAA,UAAU,GAAC,IAAX;AACH;;AACD,YAAME,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEtB,cADK;AAEfa,QAAAA,IAAI,EAAE;AAAEI,UAAAA,SAAF;AAAaD,UAAAA,SAAb;AAAwBE,UAAAA,cAAxB;AAAwCC,UAAAA;AAAxC;AAFS,OAAnB;AAIA,WAAKX,KAAL,CAAWf,WAAX,CAAuB4B,UAAvB;AACH,KA5EkB;;AAAA,SAoMnBE,eApMmB,GAoMAb,KAAD,IAAW;AAEzB,YAAMQ,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAX,IAA6B,EAApD,CAFyB,CAG1B;;AACCA,MAAAA,cAAc,CAACR,KAAK,CAACc,MAAN,CAAaC,IAAd,CAAd,GAAoCf,KAAK,CAACc,MAAN,CAAaE,KAAjD;AACA,WAAKf,QAAL,CAAc;AAAEO,QAAAA;AAAF,OAAd;AACH,KA1MkB;;AAAA,SA2MnBS,kBA3MmB,GA2MCjB,KAAD,IAAU;AACzB,YAAMQ,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAX,IAA6B,EAApD;AACA,YAAMU,OAAO,GAAG/B,eAAe,CAACa,KAAK,CAACc,MAAN,CAAaE,KAAd,CAA/B;;AACA,UAAIE,OAAJ,EAAa;AACTV,QAAAA,cAAc,CAACR,KAAK,CAACc,MAAN,CAAaC,IAAd,CAAd,GAAoCf,KAAK,CAACc,MAAN,CAAaE,KAAjD;AACH,OAFD,MAEO;AACHR,QAAAA,cAAc,CAACR,KAAK,CAACc,MAAN,CAAaC,IAAd,CAAd,GAAoC,KAAKtB,KAAL,CAAWe,cAAX,CAA0BR,KAAK,CAACc,MAAN,CAAaC,IAAvC,CAApC;AACH;;AACD,WAAKd,QAAL,CAAc;AAAEO,QAAAA;AAAF,OAAd;AACH,KApNkB;;AAAA,SAqNnBW,YArNmB,GAqNHC,MAAD,IAAY;AACvB,YAAMT,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEtB,cADK;AAEfa,QAAAA,IAAI,EAAE;AACFkB,UAAAA,YAAY,EAACD,MADX;AAEFb,UAAAA,SAAS,EAAE,IAFT;AAEee,UAAAA,UAAU,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB6B,UAAjB,CAA4BC,WAFvD;AAGFd,UAAAA,SAAS,EAAE,MAHT;AAIFF,UAAAA,cAAc,EAAC;AAJb;AAFS,OAAnB;AASA,WAAKV,KAAL,CAAWf,WAAX,CAAuB4B,UAAvB;AACH,KAhOkB;;AAAA,SAiOnBc,UAjOmB,GAiON,MAAM;AACf,YAAMF,UAAU,GAAG;AACfG,QAAAA,SAAS,EAAE;AAAE,sBAAY,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBiC;AAA/B,SADI;AAGfC,QAAAA,QAAQ,EAAE,KAAK9B,KAAL,CAAWJ,KAAX,CAAiB6B,UAAjB,CAA4BK,QAHvB;AAIfC,QAAAA,SAAS,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiB6B,UAAjB,CAA4BM,SAJxB;AAKfF,QAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBiC,QALZ;AAMfH,QAAAA,WAAW,EAAE,KAAK1B,KAAL,CAAWJ,KAAX,CAAiB6B,UAAjB,CAA4BC;AAN1B,OAAnB;AASA,WAAK1B,KAAL,CAAWlB,WAAX,CAAuB2C,UAAvB;AACH,KA5OkB;;AAAA,SA8OnBO,WA9OmB,GA8OL,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACjC;AACA,UAAIN,SAAS,GAAG,EAAhB;AACAA,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBiC,QAAzC;AACA,UAAIvB,SAAS,GAAG6B,SAAhB;AACA,UAAIxB,UAAU,GAAG,IAAjB;AAEIiB,MAAAA,SAAS,CAAC,KAAK5B,KAAL,CAAWJ,KAAX,CAAiB6B,UAAjB,CAA4BM,SAA5B,CAAsCK,WAAtC,EAAD,CAAT,GAAiE;AAAE,qBAAa,KAAKpC,KAAL,CAAWJ,KAAX,CAAiBiC,QAAjB,CAA0BQ;AAAzC,OAAjE;AACA,WAAKC,SAAL,CAAeC,GAAf,CAAmBC,IAAI,IAAI;AACvB,eAAOZ,SAAS,CAAC,KAAK5B,KAAL,CAAWJ,KAAX,CAAiB6B,UAAjB,CAA4BM,SAA5B,CAAsCK,WAAtC,EAAD,CAAT,CAA+DI,IAA/D,IAAuE,KAAK7C,KAAL,CAAWe,cAAX,CAA0B8B,IAA1B,CAA9E;AACH,OAFD;AAIJ,YAAMf,UAAU,GAAG;AACfK,QAAAA,QAAQ,EAAE,KAAK9B,KAAL,CAAWJ,KAAX,CAAiB6B,UAAjB,CAA4BK,QADvB;AAEfC,QAAAA,SAAS,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiB6B,UAAjB,CAA4BM,SAFxB;AAGfH,QAAAA,SAAS,EAAEA,SAHI;AAIfhB,QAAAA,SAAS,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiBgB,SAJb;AAKfc,QAAAA,WAAW,EAAE,KAAK1B,KAAL,CAAWJ,KAAX,CAAiB6B,UAAjB,CAA4BC,WAL1B;AAKuCO,QAAAA,QALvC;AAKiDC,QAAAA,OALjD;AAK0DvB,QAAAA,UAL1D;AAKsEL,QAAAA;AALtE,OAAnB;AAOA,YAAMmC,WAAW,GAAGrD,SAAS,CAAC,KAAKY,KAAL,CAAWJ,KAAX,CAAiB8C,qBAAlB,EAAyC,KAAK1C,KAAL,CAAWJ,KAAX,CAAiBiC,QAAjB,CAA0Bc,SAAnE,EAA8E,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB2B,YAA/F,CAA7B;;AACA,UAAIkB,WAAJ,EAAiB;AACb,cAAM5B,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEtB,cADK;AAEfa,UAAAA,IAAI,EAAE;AACFG,YAAAA,SAAS,EAAE,IADT;AACeoC,YAAAA,UAAU,EAAE;AAAEnB,cAAAA,UAAF;AAAcoB,cAAAA,UAAU,EAAE,KAAK7C,KAAL,CAAWJ,KAAX,CAAiBiD;AAA3C,aAD3B;AAEFpC,YAAAA,SAAS,EAAE,IAFT;AAEee,YAAAA,UAAU,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB6B,UAAjB,CAA4BC,WAFvD;AAGFd,YAAAA,SAAS,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiBgB;AAH1B;AAFS,SAAnB;AAQA,aAAKZ,KAAL,CAAWf,WAAX,CAAuB4B,UAAvB;AACH,OAVD,MAWK;AACD,aAAKb,KAAL,CAAWjB,UAAX,CAAsB0C,UAAtB,EAAkC,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBiD,UAAnD,EAA+D,WAA/D;AACH;AACJ,KAhRkB;;AAAA,SAkRnBC,aAlRmB,GAkRH,MAAM;AAClB,YAAMrB,UAAU,GAAG;AACfG,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBiC,QADZ;AAERkB,YAAAA,OAAO,EAAE,KAAKpD,KAAL,CAAWe,cAAX,CAA0B,eAA1B,CAFD;AAGRsC,YAAAA,WAAW,EAAC,KAAKrD,KAAL,CAAWe,cAAX,CAA0B,aAA1B,KAA4C,KAAKf,KAAL,CAAWe,cAAX,CAA0B,aAA1B,EAAyCQ,KAHzF;AAIR+B,YAAAA,iBAAiB,EAAC,KAAKtD,KAAL,CAAWe,cAAX,CAA0B,aAA1B,KAA4C,KAAKf,KAAL,CAAWe,cAAX,CAA0B,aAA1B,EAAyCwC;AAJ/F,WADL;AAQPC,UAAAA,QAAQ,EAAE,KAAKxD,KAAL,CAAWe,cAAX,CAA0B,eAA1B;AARH,SADI;AAWfkC,QAAAA,UAAU,EAAE,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBgD;AAXd,OAAnB;AAaA,WAAK5C,KAAL,CAAWhB,uBAAX,CAAmCyC,UAAnC,EAA+C,WAA/C;AACH,KAjSkB;;AAEf,SAAKS,OAAL,GAAe5D,KAAK,CAAC8E,SAAN,EAAf;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACA,SAAKf,SAAL,GAAiB,EAAjB;AAEA,UAAMhC,UAAS,GAAG;AACdgD,MAAAA,IAAI,EAAE,CADQ;AAEdC,MAAAA,IAAI,EAAE,KAAKvD,KAAL,CAAWJ,KAAX,CAAiB4D,QAAjB,GAA4BC,QAAQ,CAAC,KAAKzD,KAAL,CAAWJ,KAAX,CAAiB4D,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAF9D,KAAlB;AAIA,SAAK7D,KAAL,GAAa;AACTU,MAAAA,IAAI,EAAE,EADG;AACCqD,MAAAA,YAAY,EAAE,EADf;AACmBC,MAAAA,KAAK,EAAE,EAD1B;AAC8BjD,MAAAA,cAAc,EAAE,EAD9C;AAETN,MAAAA,UAAU,EAAE,EAFH;AAGTE,MAAAA,SAAS,EAAEA,UAHF;AAITsD,MAAAA,MAAM,EAAE,KAJC;AAKTlB,MAAAA,qBAAqB,EAAE,EALd;AAMTmB,MAAAA,UAAU,EAAE,IAAIC,GAAJ;AANH,KAAb;AAQA,SAAKT,mBAAL,GAA2B,CACvB;AAAE,qBAAe,SAAjB;AAA2B,iBAAW,aAAtC;AAAqD,mBAAa,UAAlE;AAA8E,eAAS,OAAvF;AAA+F,mBAAa,IAA5G;AAAkH,wBAAkB;AAApI,KADuB,EAEvB;AAAE,qBAAe,SAAjB;AAA2B,iBAAW,WAAtC;AAAmD,mBAAa,OAAhE;AAAyE,eAAS,OAAlF;AAA0F,mBAAa,IAAvG;AAA6G,wBAAkB;AAA/H,KAFuB,CAA3B;AAIA,SAAKU,eAAL,GAAuB,cAAvB;AACA,SAAKzB,SAAL,GAAiB,CAAC,SAAD,EAAY,WAAZ,CAAjB;AACH;;AAE8B,SAAxB0B,wBAAwB,CAAChE,KAAD,EAAQL,KAAR,EAAe;AAE1C,QAAIK,KAAK,CAACJ,KAAN,CAAY8D,YAAZ,KAA6B,EAA7B,IAAmC1D,KAAK,CAACJ,KAAN,CAAY8D,YAAZ,KAA6B/D,KAAK,CAAC+D,YAA1E,EAAwF;AACpF9E,MAAAA,KAAK,CAACqF,IAAN,CAAWjE,KAAK,CAACJ,KAAN,CAAY8D,YAAvB;AACA1D,MAAAA,KAAK,CAACJ,KAAN,CAAY8D,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAI1D,KAAK,CAACJ,KAAN,CAAY+D,KAAZ,KAAsBhE,KAAK,CAACgE,KAAhC,EAAuC;AACnC/E,MAAAA,KAAK,CAAC+E,KAAN,CAAY3D,KAAK,CAACJ,KAAN,CAAY+D,KAAxB;AACA3D,MAAAA,KAAK,CAACJ,KAAN,CAAY+D,KAAZ,GAAoB,EAApB;AACH;;AACD,WAAO,IAAP;AACH;;AAyCDO,EAAAA,MAAM,GAAG;AAEL,UAAM5C,MAAM,GAAG,KAAKtB,KAAL,CAAWJ,KAAX,CAAiB6B,UAAjB,IAA+B,KAAK9B,KAAL,CAAWkE,UAAX,CAAsBM,GAAtB,CAA0B,aAAaC,MAAb,CAAoB,KAAKpE,KAAL,CAAWJ,KAAX,CAAiB6B,UAAjB,CAA4BM,SAAhD,CAA1B,CAA/B,IACR,KAAKpC,KAAL,CAAWkE,UAAX,CAAsBQ,GAAtB,CAA0B,aAAaD,MAAb,CAAoB,KAAKpE,KAAL,CAAWJ,KAAX,CAAiB6B,UAAjB,CAA4BM,SAAhD,CAA1B,EAAsFuC,YAD7F;AAGA,UAAMC,eAAe,GAAG,CACxB;AAAE,qBAAe,SAAjB;AAA2B,iBAAW,YAAtC;AAAoD,mBAAa,SAAjE;AAA4E,eAAS,OAArF;AAA6F,mBAAa,IAA1G;AAAgH,wBAAkB;AAAlI,KADwB,EAExB;AAAE,qBAAe,SAAjB;AAA2B,iBAAW,cAAtC;AAAsD,mBAAa,WAAnE;AAAgF,eAAS,OAAzF;AAAiG,mBAAa,IAA9G;AAAoH,wBAAkB;AAAtI,KAFwB,CAAxB;AAIA,wBACI,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,qBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK5E,KAAL,CAAWU,IAAX,gBACG,oBAAC,QAAD;AACI,MAAA,eAAe,EAAE,KAAK0D,eAD1B;AAEI,MAAA,UAAU,EAAE,KAAK/D,KAAL,CAAWJ,KAAX,CAAiBe,UAFjC;AAGI,MAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWU,IAHrB;AAII,MAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,UAJ3B;AAKI,MAAA,SAAS,EAAE,KAAKT,KAAL,CAAWW,SAL1B;AAMI,MAAA,eAAe,EAAE,KAAKL,eAN1B;AAOI,MAAA,mBAAmB,EAAE,KAAKoD,mBAP9B;AAQI,MAAA,UAAU,EAAE,KAAK1D,KAAL,CAAWkE,UAR3B;AASI,MAAA,qBAAqB,EAAE,KAAKlE,KAAL,CAAW+C,qBATtC;AAUI,MAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB6B,UAVjC;AAWI,MAAA,QAAQ,EAAE,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBiC,QAX/B;AAYI,MAAA,UAAU,EAAE,KAAKF,UAZrB;AAaI,MAAA,QAAQ,EAAE,MAAM,KAAKN,YAAL,CAAkBC,MAAlB,CAbpB;AAcI,MAAA,UAAU,EAAE,YAdhB;AAeI,MAAA,UAAU,EAAE,OAfhB;AAgBI,MAAA,iBAAiB,EAAE,IAhBvB;AAiBI,MAAA,iBAAiB,EAAE,KAjBvB;AAkBI,MAAA,QAAQ,EAAE,IAlBd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAqBK,EAtBV,CADJ,CADJ,CADJ,EA8BQ,KAAKtB,KAAL,CAAWJ,KAAX,CAAiBa,SAAjB,iBACA,oBAAC,aAAD;AACI,MAAA,IAAI,EAAE,KAAKT,KAAL,CAAWJ,KAAX,CAAiBa,SAD3B;AAEI,MAAA,UAAU,EAAE,KAAKF,UAFrB;AAGI,MAAA,SAAS,EAAE,KAAKP,KAAL,CAAWJ,KAAX,CAAiBgB,SAHhC;AAII,MAAA,UAAU,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiB6B,UAJjC;AAKI,MAAA,UAAU,EAAE,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB4B,UALjC;AAMI,MAAA,WAAW,EAAE,KAAKQ,WANtB;AAOI,MAAA,KAAK,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBY,SAP5B;AAQI,MAAA,aAAa,EAAE,KAAKsC,aARxB;AASI,MAAA,YAAY,EAAE,KAAK9C,KAAL,CAAWJ,KAAX,CAAiB8D,YATnC;AAUI,MAAA,WAAW,EAAE,KAAK1D,KAAL,CAAWf,WAV5B;AAWI,MAAA,cAAc,EAAE,KAAKU,KAAL,CAAWe,cAAX,IAA6B,EAXjD;AAYI,MAAA,eAAe,EAAE6D,eAZrB;AAaI,MAAA,YAAY,EAAE,KAAKvE,KAAL,CAAWJ,KAAX,CAAiBY,SAAjB,gBACV,oBAAC,KAAD;AACI,QAAA,SAAS,EAAE,KAAKR,KAAL,CAAWJ,KAAX,CAAiBgB,SADhC;AAEI,QAAA,aAAa,EAAE,KAAKZ,KAAL,CAAWwE,IAAX,CAAgBC,aAFnC;AAGI,QAAA,eAAe,EAAE,KAAK1D,eAH1B;AAII,QAAA,UAAU,EAAE,KAAKf,KAAL,CAAWJ,KAAX,CAAiB6B,UAJjC;AAKI,QAAA,cAAc,EAAE,KAAK9B,KAAL,CAAWe,cAAX,IAA6B,EALjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,gBAQR,oBAAC,WAAD;AACE,QAAA,cAAc,EAAE,KAAKf,KAAL,CAAWe,cAAX,IAA6B,EAD/C;AAEE,QAAA,eAAe,EAAE,KAAKK,eAFxB;AAGE,QAAA,kBAAkB,EAAE,KAAKI,kBAH3B;AAIE,QAAA,aAAa,EAAE,KAAKuD,aAJtB;AAKE,QAAA,aAAa,EAAE,KAAK1E,KAAL,CAAWwE,IAAX,CAAgBC,aALjC;AAME,QAAA,QAAQ,EAAE,KAAKzE,KAAL,CAAWJ,KAAX,CAAiBiC,QAN7B;AAOE,QAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWJ,KAAX,CAAiB4D,QAP7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArBV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/BR,CADJ;AAmEH;;AAEDmB,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBiD,UAAjB,KAAgC+B,aAAa,CAAChF,KAAd,CAAoBiD,UAAxD,EAAoE;AAChE,UAAI,KAAK7C,KAAL,CAAWJ,KAAX,CAAiBiC,QAAjB,CAA0Bc,SAA1B,KAAwCiC,aAAa,CAAChF,KAAd,CAAoBiC,QAApB,CAA6Bc,SAAzE,EAAoF;AAChF,cAAMD,qBAAqB,GAAG,EAA9B;;AACA,YAAI,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,qBAArB,EAA4C;AACxC,eAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,qBAAjB,CAAuC,KAAK1C,KAAL,CAAWJ,KAAX,CAAiBiC,QAAjB,CAA0Bc,SAAjE,KAA+EkC,MAAM,CAACC,MAAP,CAAc,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,qBAAjB,CAAuC,KAAK1C,KAAL,CAAWJ,KAAX,CAAiBiC,QAAjB,CAA0Bc,SAAjE,CAAd,EAA2FJ,GAA3F,CAA+FC,IAAI,IAC9KE,qBAAqB,CAACqC,IAAtB,CAA2BvC,IAAI,CAAC8B,YAAhC,CAD2E,CAA/E;AAEH;;AACD,cAAMT,UAAU,GAAG1E,aAAa,CAAC,KAAKa,KAAL,CAAWJ,KAAX,CAAiB8C,qBAAlB,EAAyC,KAAK1C,KAAL,CAAWJ,KAAX,CAAiBiC,QAAjB,CAA0Bc,SAAnE,CAAhC;AACA,aAAKxC,QAAL,CAAc;AACVuC,UAAAA,qBADU;AACamB,UAAAA,UADb;AACyBxD,UAAAA,IAAI,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBiD,UADhD;AAEVzC,UAAAA,UAAU,EAAEvB,OAAO,CAAC,KAAKmB,KAAL,CAAWJ,KAAX,CAAiBiD,UAAlB,EAA8B,KAAKlD,KAAL,CAAWW,SAAzC;AAFT,SAAd;AAIH,OAXD,MAYK;AACD,YAAI;AAAEA,UAAAA;AAAF,YAAgB,KAAKX,KAAzB;;AACA,YAAI,KAAKK,KAAL,CAAWJ,KAAX,CAAiBU,SAAjB,KAA+B6B,SAAnC,EAA8C;AAC1C7B,UAAAA,SAAS,GAAG;AAACgD,YAAAA,IAAI,EAAC,CAAN;AAAQC,YAAAA,IAAI,EAAC,KAAK5D,KAAL,CAAWW,SAAX,CAAqBiD;AAAlC,WAAZ;AACH;;AACD,YAAG,KAAK5D,KAAL,CAAWS,UAAX,CAAsBC,IAAzB,EAA8B;AAC1B,cAAG,KAAKV,KAAL,CAAWS,UAAX,CAAsBC,IAAtB,CAA2B2E,MAA3B,KAAqC,CAAxC,EAA0C;AACvC,gBAAIC,SAAS,GAAC,KAAKtF,KAAL,CAAWW,SAAX,CAAqBgD,IAArB,GAA0B,CAA1B,GAA6B,KAAK3D,KAAL,CAAWW,SAAX,CAAqBgD,IAArB,GAA0B,KAAK3D,KAAL,CAAWW,SAAX,CAAqBiD,IAA5E,GACd,KAAK5D,KAAL,CAAWW,SAAX,CAAqBgD,IADrB;AAEChD,YAAAA,SAAS,GAAC;AAACgD,cAAAA,IAAI,EAAC2B,SAAN;AAAgB1B,cAAAA,IAAI,EAAC,KAAK5D,KAAL,CAAWW,SAAX,CAAqBiD;AAA1C,aAAV;AACH;AACJ;;AAED,aAAKpD,QAAL,CAAc;AACVE,UAAAA,IAAI,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBiD,UADb;AAEVe,UAAAA,MAAM,EAAE,KAFE;AAGVxD,UAAAA,UAAU,EAAEvB,OAAO,CAAC,KAAKmB,KAAL,CAAWJ,KAAX,CAAiBiD,UAAlB,EAA8BvC,SAA9B,CAHT;AAIVA,UAAAA;AAJU,SAAd;AAMH;AACJ,KAjCD,MAiCO,IAAI,KAAKN,KAAL,CAAWJ,KAAX,CAAiBc,cAAjB,KAAoCkE,aAAa,CAAChF,KAAd,CAAoBc,cAA5D,EAA4E;AAC/E,WAAKP,QAAL,CAAc;AAAEO,QAAAA,cAAc,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc;AAAnC,OAAd;AACH;AACJ;;AAnMkC;;AAqSvC,eAAenC,OAAO,CAACmB,eAAD,EAAkB;AAAEZ,EAAAA,WAAF;AAAeC,EAAAA,UAAf;AAA2BC,EAAAA,uBAA3B;AAAmDC,EAAAA;AAAnD,CAAlB,CAAP,CAA2FT,UAAU,CAACqB,QAAD,CAArG,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { callService, crudMaster, validateEsignCredential, updateStore } from '../../actions';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { getControlMap, showEsign, validateLoginId } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport AddADSUsers from './AddADSUsers';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass ADSUsers extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n        this.extractedColumnList = [\r\n            { \"controlType\": \"textbox\",\"idsName\": \"IDS_LOGINID\", \"dataField\": \"sloginid\", \"width\": \"400px\",\"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\"},\r\n            { \"controlType\": \"textbox\",\"idsName\": \"IDS_EMPID\", \"dataField\": \"necno\", \"width\": \"150px\",\"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\" }\r\n        ]\r\n        this.primaryKeyField = \"nadsusercode\";\r\n        this.fieldList = [\"suserid\", \"spassword\"];\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId=null;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const syncId = this.props.Login.inputParam && this.state.controlMap.has(\"ManualSync\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"ManualSync\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const mandatoryFields = [\r\n        { \"controlType\": \"textbox\",\"idsName\": \"IDS_USERID\", \"dataField\": \"suserid\", \"width\": \"400px\",\"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\"},\r\n        { \"controlType\": \"textbox\",\"idsName\": \"IDS_PASSWORD\", \"dataField\": \"spassword\", \"width\": \"150px\",\"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\" }]\r\n       \r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={this.primaryKeyField}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    reloadData={this.reloadData}\r\n                                    syncData={() => this.syncADSUsers(syncId)}\r\n                                    scrollable={'scrollable'}\r\n                                    gridHeight={'600px'}\r\n                                    isToolBarRequired={true}\r\n                                    isRefreshRequired={false}\r\n                                    pageable={true}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddADSUsers\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onLoginInputChange={this.onLoginInputChange}\r\n                                onComboChange={this.onComboChange}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                settings={this.props.Login.settings}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = {skip:0,take:this.state.dataState.take }\r\n                }\r\n                if(this.state.dataResult.data){\r\n                    if(this.state.dataResult.data.length ===1){\r\n                       let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                       this.state.dataState.skip\r\n                        dataState={skip:skipcount,take:this.state.dataState.take}\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    isOpen: false,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n       // if(event.target.name === \"\"){\r\n        selectedRecord[event.target.name] = event.target.value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onLoginInputChange=(event) =>{\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const loginid = validateLoginId(event.target.value);\r\n        if (loginid) {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        } else {\r\n            selectedRecord[event.target.name] = this.state.selectedRecord[event.target.name];\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    syncADSUsers = (syncId) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                ncontrolCode:syncId,\r\n                openModal: true, screenName: this.props.Login.inputParam.displayName ,\r\n                operation: \"sync\",\r\n                selectedRecord:{}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add \r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n                     \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            this.fieldList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item]\r\n            })\r\n        \r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            displayName: this.props.Login.inputParam.displayName, saveType, formRef, selectedId, dataState\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.inputParam.displayName ,\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, validateEsignCredential,updateStore })(injectIntl(ADSUsers));"]},"metadata":{},"sourceType":"module"}