{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport { intl } from \"../../components/App\";\nexport const fnPassMessage = pwdpolicymsg => {\n  let msg = ``;\n  msg = `${intl.formatMessage({\n    id: \"IDS_YOURPASSWORDMUSTBE\"\n  })} ${pwdpolicymsg[\"nminpasslength\"]} ${intl.formatMessage({\n    id: \"IDS_CHARACTERS\"\n  })} ${intl.formatMessage({\n    id: \"IDS_MAXCHARACTERS\"\n  })} ${pwdpolicymsg[\"nmaxpasslength\"]} ${intl.formatMessage({\n    id: \"IDS_CHARACTERS\"\n  })}`;\n\n  if (pwdpolicymsg[\"nminnoofnumberchar\"] > 0) {\n    msg = `${msg}, ${pwdpolicymsg[\"nminnoofnumberchar\"]} ${intl.formatMessage({\n      id: \"IDS_NUMERICCHARACTERS\"\n    })}`;\n  }\n\n  if (pwdpolicymsg[\"nminnooflowerchar\"] > 0) {\n    msg = `${msg}, ${pwdpolicymsg[\"nminnooflowerchar\"]} ${intl.formatMessage({\n      id: \"IDS_LOWERCASECHARACTER\"\n    })}`;\n  }\n\n  if (pwdpolicymsg[\"nminnoofupperchar\"] > 0) {\n    msg = `${msg}, ${pwdpolicymsg[\"nminnoofupperchar\"]} ${intl.formatMessage({\n      id: \"IDS_UPPERCASECHARACTER\"\n    })}`;\n  }\n\n  if (pwdpolicymsg[\"nminnoofspecialchar\"] > 0) {\n    msg = `${msg}, ${pwdpolicymsg[\"nminnoofspecialchar\"]} ${intl.formatMessage({\n      id: \"IDS_SPECIALCHARACTERS\"\n    })}`;\n  }\n\n  return `${msg}.`;\n};\nexport const changePasswordValidation = (createPwdRecord, passwordPolicy, sloginid) => {\n  const snewpassword = createPwdRecord.snewpassword.trim();\n  const sconfirmpassword = createPwdRecord.sconfirmpassword.trim();\n  const soldpassword = createPwdRecord.soldpassword.trim();\n\n  if (snewpassword === soldpassword) {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_NEWANDOLDPASSWORDSHOULDNOTSAME\"\n    }));\n  } else if (sloginid === snewpassword) {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_PASSWORDSHOULDNOTSAMEASLOGINID\"\n    }));\n  } else if (sconfirmpassword !== snewpassword) {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_PASSWORDNOTMATCHED\"\n    }));\n  } else {\n    return fnValidatePassword(passwordPolicy, snewpassword);\n  }\n};\nexport const fnValidatePassword = (PasswordPolicy, snewpassword) => {\n  const passwordPolicy = PasswordPolicy;\n  const passwordletters = snewpassword.split('');\n  let upperCaseCount = 0;\n  let lowerCaseCount = 0;\n  let specialCharCount = 0;\n  let numberCount = 0;\n\n  if (passwordletters.length < passwordPolicy.nminpasslength) {\n    toast.info(`${intl.formatMessage({\n      id: \"IDS_PASSMINREQUIRED\"\n    })} ${passwordPolicy.nminpasslength} ${intl.formatMessage({\n      id: \"IDS_CHARACTERS\"\n    })}`);\n  } else if (passwordletters.length > passwordPolicy.nmaxpasslength) {\n    toast.info(`${intl.formatMessage({\n      id: \"IDS_PASSWRDLENGTHEXCEED\"\n    })} ${passwordPolicy.nmaxpasslength} ${intl.formatMessage({\n      id: \"IDS_CHARACTERS\"\n    })}`);\n  } else if (passwordletters.length >= passwordPolicy.nminpasslength && passwordletters.length <= passwordPolicy.nmaxpasslength) {\n    passwordletters.forEach(function (letters) {\n      if (letters.charCodeAt() >= 65 && letters.charCodeAt() <= 90) {\n        upperCaseCount += 1;\n      } else if (letters.charCodeAt() >= 97 && letters.charCodeAt() <= 122) {\n        lowerCaseCount += 1;\n      } else if (letters.charCodeAt() >= 48 && letters.charCodeAt() <= 57 || letters.charCodeAt() >= 96 && letters.charCodeAt() <= 105) {\n        numberCount += 1;\n      } else {\n        specialCharCount += 1;\n      }\n    });\n\n    if (upperCaseCount < passwordPolicy.nminnoofupperchar) {\n      return `${intl.formatMessage({\n        id: \"IDS_PASSMINREQUIRED\"\n      })} ${passwordPolicy.nminnoofupperchar} ${intl.formatMessage({\n        id: \"IDS_UPPERCASECHARACTER\"\n      })}`;\n    } else if (lowerCaseCount < passwordPolicy.nminnooflowerchar) {\n      return `${intl.formatMessage({\n        id: \"IDS_PASSMINREQUIRED\"\n      })} ${passwordPolicy.nminnooflowerchar} ${intl.formatMessage({\n        id: \"IDS_LOWERCASECHARACTER\"\n      })}`;\n    } else if (specialCharCount < passwordPolicy.nminnoofspecialchar) {\n      return `${intl.formatMessage({\n        id: \"IDS_PASSMINREQUIRED\"\n      })} ${passwordPolicy.nminnoofspecialchar} ${intl.formatMessage({\n        id: \"IDS_SPECIALCHARACTERS\"\n      })}`;\n    } else if (numberCount < passwordPolicy.nminnoofnumberchar) {\n      return `${intl.formatMessage({\n        id: \"IDS_PASSMINREQUIRED\"\n      })} ${passwordPolicy.nminnoofnumberchar} ${intl.formatMessage({\n        id: \"IDS_NUMERICCHARACTERS\"\n      })}`;\n    } else {\n      return 0;\n    }\n  }\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/Login/LoginCommonFunction.js"],"names":["toast","intl","fnPassMessage","pwdpolicymsg","msg","formatMessage","id","changePasswordValidation","createPwdRecord","passwordPolicy","sloginid","snewpassword","trim","sconfirmpassword","soldpassword","warn","fnValidatePassword","PasswordPolicy","passwordletters","split","upperCaseCount","lowerCaseCount","specialCharCount","numberCount","length","nminpasslength","info","nmaxpasslength","forEach","letters","charCodeAt","nminnoofupperchar","nminnooflowerchar","nminnoofspecialchar","nminnoofnumberchar"],"mappings":"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","sourcesContent":["import {\r\n    toast\r\n} from \"react-toastify\";\r\nimport {\r\n    intl\r\n} from \"../../components/App\";\r\n\r\nexport const fnPassMessage = (pwdpolicymsg) => {\r\n    let msg = ``;\r\n    msg = `${intl.formatMessage({ id: \"IDS_YOURPASSWORDMUSTBE\" })} ${pwdpolicymsg[\"nminpasslength\"]} ${intl.formatMessage({ id: \"IDS_CHARACTERS\" })} ${intl.formatMessage({ id: \"IDS_MAXCHARACTERS\" })} ${pwdpolicymsg[\"nmaxpasslength\"]} ${intl.formatMessage({ id: \"IDS_CHARACTERS\" })}`;\r\n    if (pwdpolicymsg[\"nminnoofnumberchar\"] > 0) {\r\n        msg = `${msg}, ${pwdpolicymsg[\"nminnoofnumberchar\"]} ${intl.formatMessage({ id: \"IDS_NUMERICCHARACTERS\" })}`;\r\n    }\r\n    if (pwdpolicymsg[\"nminnooflowerchar\"] > 0) {\r\n        msg = `${msg}, ${pwdpolicymsg[\"nminnooflowerchar\"]} ${intl.formatMessage({ id: \"IDS_LOWERCASECHARACTER\" })}`;\r\n    }\r\n    if (pwdpolicymsg[\"nminnoofupperchar\"] > 0) {\r\n        msg = `${msg}, ${pwdpolicymsg[\"nminnoofupperchar\"]} ${intl.formatMessage({ id: \"IDS_UPPERCASECHARACTER\" })}`;\r\n    }\r\n    if (pwdpolicymsg[\"nminnoofspecialchar\"] > 0) {\r\n        msg = `${msg}, ${pwdpolicymsg[\"nminnoofspecialchar\"]} ${intl.formatMessage({ id: \"IDS_SPECIALCHARACTERS\" })}`;\r\n    }\r\n    return `${msg}.`;\r\n}\r\n\r\nexport const changePasswordValidation = (createPwdRecord, passwordPolicy, sloginid) => {\r\n    const snewpassword = createPwdRecord.snewpassword.trim();\r\n    const sconfirmpassword = createPwdRecord.sconfirmpassword.trim();\r\n    const soldpassword = createPwdRecord.soldpassword.trim();\r\n    if (snewpassword === soldpassword) {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_NEWANDOLDPASSWORDSHOULDNOTSAME\"\r\n        }));\r\n    } else if (sloginid === snewpassword) {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_PASSWORDSHOULDNOTSAMEASLOGINID\"\r\n        }));\r\n    } else if (sconfirmpassword !== snewpassword) {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_PASSWORDNOTMATCHED\"\r\n        }));\r\n    } else {\r\n        return fnValidatePassword(passwordPolicy, snewpassword);\r\n    }\r\n}\r\n\r\nexport const fnValidatePassword = (PasswordPolicy, snewpassword) => {\r\n    const passwordPolicy = PasswordPolicy;\r\n    const passwordletters = snewpassword.split('');\r\n    let upperCaseCount = 0;\r\n    let lowerCaseCount = 0;\r\n    let specialCharCount = 0;\r\n    let numberCount = 0;\r\n    if (passwordletters.length < passwordPolicy.nminpasslength) {\r\n        toast.info(`${intl.formatMessage({ id: \"IDS_PASSMINREQUIRED\" })} ${passwordPolicy.nminpasslength} ${intl.formatMessage({ id: \"IDS_CHARACTERS\" })}`);\r\n    } else if (passwordletters.length > passwordPolicy.nmaxpasslength) {\r\n        toast.info(`${intl.formatMessage({ id: \"IDS_PASSWRDLENGTHEXCEED\" })} ${passwordPolicy.nmaxpasslength} ${intl.formatMessage({ id: \"IDS_CHARACTERS\" })}`);\r\n    } else if (passwordletters.length >= passwordPolicy.nminpasslength &&\r\n        passwordletters.length <= passwordPolicy.nmaxpasslength) {\r\n        passwordletters.forEach(function (letters) {\r\n            if (letters.charCodeAt() >= 65 && letters.charCodeAt() <= 90) {\r\n                upperCaseCount += 1;\r\n            } else if (letters.charCodeAt() >= 97 && letters.charCodeAt() <= 122) {\r\n                lowerCaseCount += 1;\r\n            } else if ((letters.charCodeAt() >= 48 && letters.charCodeAt() <= 57) ||\r\n                (letters.charCodeAt() >= 96 && letters.charCodeAt() <= 105)) {\r\n                numberCount += 1;\r\n            } else {\r\n                specialCharCount += 1;\r\n            }\r\n        });\r\n        if (upperCaseCount < passwordPolicy.nminnoofupperchar) {\r\n            return `${intl.formatMessage({ id: \"IDS_PASSMINREQUIRED\" })} ${passwordPolicy.nminnoofupperchar} ${intl.formatMessage({ id: \"IDS_UPPERCASECHARACTER\" })}`;\r\n        } else if (lowerCaseCount < passwordPolicy.nminnooflowerchar) {\r\n            return `${intl.formatMessage({ id: \"IDS_PASSMINREQUIRED\" })} ${passwordPolicy.nminnooflowerchar} ${intl.formatMessage({ id: \"IDS_LOWERCASECHARACTER\" })}`;\r\n        } else if (specialCharCount < passwordPolicy.nminnoofspecialchar) {\r\n            return `${intl.formatMessage({ id: \"IDS_PASSMINREQUIRED\" })} ${passwordPolicy.nminnoofspecialchar} ${intl.formatMessage({ id: \"IDS_SPECIALCHARACTERS\" })}`;\r\n        } else if (numberCount < passwordPolicy.nminnoofnumberchar) {\r\n            return `${intl.formatMessage({ id: \"IDS_PASSMINREQUIRED\" })} ${passwordPolicy.nminnoofnumberchar} ${intl.formatMessage({ id: \"IDS_NUMERICCHARACTERS\" })}`;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}