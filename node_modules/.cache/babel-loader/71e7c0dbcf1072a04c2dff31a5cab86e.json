{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\ConfigureUniqueFields.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport 'rc-tabs/assets/index.css';\nimport { Col, Form, InputGroup, Nav, Row } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { SampleType, designProperties } from '../../components/Enumeration';\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\nimport Tabs, { TabPane } from 'rc-tabs';\n\nclass ConfigureUniqueFields extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTabChange = tab => {\n      this.setState({\n        selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\n      });\n    };\n\n    const screens = [{\n      eventKey: 'sample',\n      name: \"IDS_SAMPLE\"\n    }];\n\n    if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedsubsample === true) {\n      screens.push({\n        eventKey: 'subsample',\n        name: \"IDS_SUBSAMPLE\"\n      });\n    }\n\n    this.state = {\n      screens,\n      selectedScreen: {\n        eventKey: 'sample',\n        name: \"IDS_SAMPLE\"\n      }\n    };\n  }\n\n  render() {\n    //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n    const dataList = this.props.selectedTemplateType === SampleType.Masters || this.props.selectedTemplateType === SampleType.GOODSIN || this.props.selectedTemplateType === SampleType.PROTOCOL || this.state.selectedScreen.eventKey === 'sample' ? this.props.dataList : this.props.dataListsubsample; //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n\n    const dataListCount = this.props.selectedTemplateType === SampleType.Masters || this.props.selectedTemplateType === SampleType.GOODSIN || this.props.selectedTemplateType === SampleType.PROTOCOL || this.state.selectedScreen.eventKey === 'sample' ? this.props.dataListCount : this.props.dataListCountsubsample; // const designData = this.props.selectedTemplateType === SampleType.Masters || this.props.selectedTemplateType === SampleType.GOODSIN ? this.props.designData.templatefields : this.state.selectedScreen.eventKey === 'sample' ? this.props.designData.sampletemplatefields : this.props.designData.subsampletemplatefields\n    //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n\n    const designData = this.props.selectedTemplateType === SampleType.Masters ? this.props.designData.mastertemplatefields : this.props.selectedTemplateType === SampleType.GOODSIN || this.props.selectedTemplateType === SampleType.PROTOCOL ? this.props.designData.templatefields : this.state.selectedScreen.eventKey === 'sample' ? this.props.designData.sampletemplatefields : this.props.designData.subsampletemplatefields;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.selectedTemplateType === SampleType.Masters || this.props.selectedTemplateType === SampleType.GOODSIN || this.props.selectedTemplateType === SampleType.PROTOCOL || this.props.approvedRegSubTypeVersion && (this.props.approvedRegSubTypeVersion.jsondata.nneedsubsample === undefined || this.props.approvedRegSubTypeVersion.jsondata.nneedsubsample === false) ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      onClick: () => this.props.addCombinatonUnique(designData),\n      className: \"add-txt-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ADD\",\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 33\n      }\n    }))), dataListCount.map((item, index) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 11,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      size: 'lg',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 49\n      }\n    }, designData.map(checkbox => checkbox[designProperties.VALUE] !== 'sreportno' && checkbox[designProperties.VALUE] !== 'sarno' && checkbox[designProperties.VALUE] !== 'sspecname' && checkbox[designProperties.VALUE] !== 'dregdate' && checkbox[designProperties.VALUE] !== 'stransdisplaystatus' && checkbox[designProperties.VALUE] !== 'ntestcount' && checkbox[designProperties.LISTITEM] !== 'label' &&\n    /*#__PURE__*/\n    //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n    React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Form.Check, {\n      inline: true,\n      type: \"checkbox\",\n      name: checkbox[\"2\"],\n      label: checkbox[\"1\"][this.props.slanguagetypecode] || checkbox[\"2\"],\n      onChange: event => this.props.onInputOnChange(event, checkbox[\"2\"], index, checkbox[\"1\"]),\n      id: checkbox[\"2\"],\n      checked: checkbox[\"2\"] === (dataList && dataList[index] && dataList[index][checkbox[\"2\"]] && dataList[index][checkbox[\"2\"]][\"2\"]) ? true : false,\n      defaultChecked: checkbox[\"2\"] === (dataList && dataList[index] && dataList[index][checkbox[\"2\"]] && dataList[index][checkbox[\"2\"]][\"2\"]) ? true : false,\n      size: 'lg',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 61\n      }\n    }))))))), /*#__PURE__*/React.createElement(Col, {\n      md: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"icon-group-wrap enable-view click-view \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      onClick: () => this.props.deleteCombinationUnique(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 49\n      }\n    }))))), dataListCount.length - 1 !== index ? /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 37\n      }\n    }) : \"\"))) : /*#__PURE__*/React.createElement(AtTabs, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      activeKey: this.state.selectedScreen.eventKey,\n      moreIcon: \"...\",\n      onChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }\n    }, this.state.screens.map(screen => /*#__PURE__*/React.createElement(TabPane, {\n      name: screen.eventKey,\n      tab: this.props.intl.formatMessage({\n        id: screen.name\n      }),\n      key: screen.eventKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      onClick: () => this.props.addCombinatonUnique(designData, screen.eventKey),\n      className: \"add-txt-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ADD\",\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 45\n      }\n    }))), dataListCount.map((item, index) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 11,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      size: 'lg',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        \"margin\": \"0.5px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 61\n      }\n    }, designData.map(checkbox => checkbox[designProperties.LISTITEM] !== 'label' &&\n    /*#__PURE__*/\n    //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n    React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Form.Check, {\n      inline: true,\n      type: \"checkbox\",\n      name: checkbox[\"2\"],\n      label: checkbox[\"1\"][this.props.slanguagetypecode] || checkbox[\"2\"],\n      onChange: event => this.props.onInputOnChange(event, checkbox[\"2\"], index, checkbox[\"1\"], screen.eventKey),\n      id: checkbox[\"2\"],\n      checked: checkbox[\"2\"] === (dataList && dataList[index] && dataList[index][checkbox[\"2\"]] && dataList[index][checkbox[\"2\"]][\"2\"]) ? true : false,\n      defaultChecked: checkbox[\"2\"] === (dataList && dataList[index] && dataList[index][checkbox[\"2\"]] && dataList[index][checkbox[\"2\"]][\"2\"]) ? true : false,\n      size: 'lg',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 73\n      }\n    }))))))), /*#__PURE__*/React.createElement(Col, {\n      md: 1,\n      style: {\n        \"padding\": \"0.5px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"icon-group-wrap enable-view click-view \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      onClick: () => this.props.deleteCombinationUnique(index, screen.eventKey),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 61\n      }\n    }))))), dataListCount.length - 1 !== index ? /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 49\n      }\n    }) : \"\")))))));\n  }\n\n}\n\nexport default injectIntl(ConfigureUniqueFields);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/designtemplatemapping/ConfigureUniqueFields.jsx"],"names":["React","FormattedMessage","injectIntl","Col","Form","InputGroup","Nav","Row","FontAwesomeIcon","faPlus","faTrashAlt","SampleType","designProperties","AtTabs","Tabs","TabPane","ConfigureUniqueFields","Component","constructor","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","name","approvedRegSubTypeVersion","jsondata","nneedsubsample","push","render","dataList","selectedTemplateType","Masters","GOODSIN","PROTOCOL","dataListsubsample","dataListCount","dataListCountsubsample","designData","mastertemplatefields","templatefields","sampletemplatefields","subsampletemplatefields","undefined","addCombinatonUnique","map","item","index","checkbox","VALUE","LISTITEM","slanguagetypecode","event","onInputOnChange","deleteCombinationUnique","length","intl","formatMessage","id"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,OAAO,0BAAP;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,GAArC,QAAgD,iBAAhD;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,mCAAnC;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,8BAA7C;AACA,SAASC,MAAT,QAAuB,iDAAvB;AACA,OAAOC,IAAP,IAAeC,OAAf,QAA8B,SAA9B;;AACA,MAAMC,qBAAN,SAAoChB,KAAK,CAACiB,SAA1C,CAAoD;AAChDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAcnBC,WAdmB,GAcJC,GAAD,IAAS;AACnB,WAAKC,QAAL,CAAc;AACVC,QAAAA,cAAc,EAAE,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwBC,MAAM,IAAIA,MAAM,CAACC,QAAP,KAAoBP,GAAtD;AADN,OAAd;AAGH,KAlBkB;;AAGf,UAAMI,OAAO,GAAG,CAAC;AAAEG,MAAAA,QAAQ,EAAE,QAAZ;AAAsBC,MAAAA,IAAI,EAAE;AAA5B,KAAD,CAAhB;;AACA,QAAI,KAAKV,KAAL,CAAWW,yBAAX,IAAwC,KAAKX,KAAL,CAAWW,yBAAX,CAAqCC,QAArC,CAA8CC,cAA9C,KAAiE,IAA7G,EAAmH;AAC/GP,MAAAA,OAAO,CAACQ,IAAR,CAAa;AAAEL,QAAAA,QAAQ,EAAE,WAAZ;AAAyBC,QAAAA,IAAI,EAAE;AAA/B,OAAb;AACH;;AAED,SAAKL,KAAL,GAAa;AACTC,MAAAA,OADS;AAETF,MAAAA,cAAc,EAAE;AAAEK,QAAAA,QAAQ,EAAE,QAAZ;AAAsBC,QAAAA,IAAI,EAAE;AAA5B;AAFP,KAAb;AAIH;;AAQDK,EAAAA,MAAM,GAAG;AACL;AACA,UAAMC,QAAQ,GAAG,KAAKhB,KAAL,CAAWiB,oBAAX,KAAoCzB,UAAU,CAAC0B,OAA/C,IACd,KAAKlB,KAAL,CAAWiB,oBAAX,KAAoCzB,UAAU,CAAC2B,OADjC,IAEd,KAAKnB,KAAL,CAAWiB,oBAAX,KAAoCzB,UAAU,CAAC4B,QAFjC,IAGd,KAAKf,KAAL,CAAWD,cAAX,CAA0BK,QAA1B,KAAuC,QAHzB,GAGoC,KAAKT,KAAL,CAAWgB,QAH/C,GAG0D,KAAKhB,KAAL,CAAWqB,iBAHtF,CAFK,CAOL;;AAEA,UAAMC,aAAa,GAAG,KAAKtB,KAAL,CAAWiB,oBAAX,KAAoCzB,UAAU,CAAC0B,OAA/C,IAClB,KAAKlB,KAAL,CAAWiB,oBAAX,KAAoCzB,UAAU,CAAC2B,OAD7B,IAElB,KAAKnB,KAAL,CAAWiB,oBAAX,KAAoCzB,UAAU,CAAC4B,QAF7B,IAGlB,KAAKf,KAAL,CAAWD,cAAX,CAA0BK,QAA1B,KAAuC,QAHrB,GAGgC,KAAKT,KAAL,CAAWsB,aAH3C,GAG2D,KAAKtB,KAAL,CAAWuB,sBAH5F,CATK,CAaN;AAEA;;AAEC,UAAMC,UAAU,GAAG,KAAKxB,KAAL,CAAWiB,oBAAX,KAAoCzB,UAAU,CAAC0B,OAA/C,GAA0D,KAAKlB,KAAL,CAAWwB,UAAX,CAAsBC,oBAAhF,GACjB,KAAKzB,KAAL,CAAWiB,oBAAX,KAAoCzB,UAAU,CAAC2B,OAA/C,IACC,KAAKnB,KAAL,CAAWiB,oBAAX,KAAoCzB,UAAU,CAAC4B,QADhD,GAC2D,KAAKpB,KAAL,CAAWwB,UAAX,CAAsBE,cADjF,GAEA,KAAKrB,KAAL,CAAWD,cAAX,CAA0BK,QAA1B,KAAuC,QAAvC,GAAkD,KAAKT,KAAL,CAAWwB,UAAX,CAAsBG,oBAAxE,GACA,KAAK3B,KAAL,CAAWwB,UAAX,CAAsBI,uBAJxB;AAOA,wBACI,0CACK,KAAK5B,KAAL,CAAWiB,oBAAX,KAAoCzB,UAAU,CAAC0B,OAA/C,IACE,KAAKlB,KAAL,CAAWiB,oBAAX,KAAoCzB,UAAU,CAAC2B,OADjD,IAEE,KAAKnB,KAAL,CAAWiB,oBAAX,KAAoCzB,UAAU,CAAC4B,QAFjD,IAGI,KAAKpB,KAAL,CAAWW,yBAAX,KAAyC,KAAKX,KAAL,CAAWW,yBAAX,CAAqCC,QAArC,CAA8CC,cAA9C,KAAiEgB,SAAjE,IACvC,KAAK7B,KAAL,CAAWW,yBAAX,CAAqCC,QAArC,CAA8CC,cAA9C,KAAiE,KADnE,CAHJ,gBAKG,uDACI;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,OAAO,EAAE,MAAM,KAAKb,KAAL,CAAW8B,mBAAX,CAA+BN,UAA/B,CAAzB;AACG,MAAA,SAAS,EAAC,aADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAElC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,SAArB;AAA+B,MAAA,cAAc,EAAC,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ,CADJ,EAQKgC,aAAa,CAACS,GAAd,CAAkB,CAACC,IAAD,EAAOC,KAAP,kBACf,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAE,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKT,UAAU,CAACO,GAAX,CAAeG,QAAQ,IAC5BA,QAAQ,CAACzC,gBAAgB,CAAC0C,KAAlB,CAAR,KAAoC,WAApC,IACGD,QAAQ,CAACzC,gBAAgB,CAAC0C,KAAlB,CAAR,KAAoC,OADvC,IAEGD,QAAQ,CAACzC,gBAAgB,CAAC0C,KAAlB,CAAR,KAAoC,WAFvC,IAGGD,QAAQ,CAACzC,gBAAgB,CAAC0C,KAAlB,CAAR,KAAoC,UAHvC,IAIGD,QAAQ,CAACzC,gBAAgB,CAAC0C,KAAlB,CAAR,KAAoC,qBAJvC,IAKGD,QAAQ,CAACzC,gBAAgB,CAAC0C,KAAlB,CAAR,KAAoC,YALvC,IAMGD,QAAQ,CAACzC,gBAAgB,CAAC2C,QAAlB,CAAR,KAAuC,OAN1C;AAAA;AAMqD;AAE7C,wBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AACI,MAAA,MAAM,EAAE,IADZ;AAEI,MAAA,IAAI,EAAC,UAFT;AAGI,MAAA,IAAI,EAAEF,QAAQ,CAAC,GAAD,CAHlB;AAII,MAAA,KAAK,EAAEA,QAAQ,CAAC,GAAD,CAAR,CAAc,KAAKlC,KAAL,CAAWqC,iBAAzB,KAA+CH,QAAQ,CAAC,GAAD,CAJlE;AAKI,MAAA,QAAQ,EAAGI,KAAD,IAAW,KAAKtC,KAAL,CAAWuC,eAAX,CAA2BD,KAA3B,EAAkCJ,QAAQ,CAAC,GAAD,CAA1C,EAAiDD,KAAjD,EAAwDC,QAAQ,CAAC,GAAD,CAAhE,CALzB;AAMI,MAAA,EAAE,EAAEA,QAAQ,CAAC,GAAD,CANhB;AAOI,MAAA,OAAO,EAAEA,QAAQ,CAAC,GAAD,CAAR,MAAmBlB,QAAQ,IAAIA,QAAQ,CAACiB,KAAD,CAApB,IAA+BjB,QAAQ,CAACiB,KAAD,CAAR,CAAgBC,QAAQ,CAAC,GAAD,CAAxB,CAA/B,IAAiElB,QAAQ,CAACiB,KAAD,CAAR,CAAgBC,QAAQ,CAAC,GAAD,CAAxB,EAA+B,GAA/B,CAApF,IAA2H,IAA3H,GAAkI,KAP/I;AAQI,MAAA,cAAc,EAAEA,QAAQ,CAAC,GAAD,CAAR,MAAmBlB,QAAQ,IAAIA,QAAQ,CAACiB,KAAD,CAApB,IAA+BjB,QAAQ,CAACiB,KAAD,CAAR,CAAgBC,QAAQ,CAAC,GAAD,CAAxB,CAA/B,IAAiElB,QAAQ,CAACiB,KAAD,CAAR,CAAgBC,QAAQ,CAAC,GAAD,CAAxB,EAA+B,GAA/B,CAApF,IAA2H,IAA3H,GAAkI,KARtJ;AASI,MAAA,IAAI,EAAE,IATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CATH,CADL,CADJ,CADJ,CADJ,CADJ,eAkCI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,yCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,OAAO,EAAE,MAAM,KAAKlC,KAAL,CAAWwC,uBAAX,CAAmCP,KAAnC,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE1C,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,CADJ,CAlCJ,CADJ,EA6CK+B,aAAa,CAACmB,MAAd,GAAqB,CAArB,KAA2BR,KAA3B,gBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GACY,EA9CjB,CADH,CARL,CALH,gBAgEG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAE,KAAK5B,KAAL,CAAWD,cAAX,CAA0BK,QAA3C;AAAqD,MAAA,QAAQ,EAAC,KAA9D;AAAoE,MAAA,QAAQ,EAAE,KAAKR,WAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKI,KAAL,CAAWC,OAAX,CAAmByB,GAAnB,CAAuBvB,MAAM,iBAC1B,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAEA,MAAM,CAACC,QAAtB;AAAgC,MAAA,GAAG,EAAE,KAAKT,KAAL,CAAW0C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAEpC,MAAM,CAACE;AAAb,OAA9B,CAArC;AAAyF,MAAA,GAAG,EAAEF,MAAM,CAACC,QAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,OAAO,EAAE,MAAM,KAAKT,KAAL,CAAW8B,mBAAX,CAA+BN,UAA/B,EAA2ChB,MAAM,CAACC,QAAlD,CAAzB;AACG,MAAA,SAAS,EAAC,aADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEnB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,SAArB;AAA+B,MAAA,cAAc,EAAC,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ,CADJ,EAQKgC,aAAa,CAACS,GAAd,CAAkB,CAACC,IAAD,EAAOC,KAAP,kBACf,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAE,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAE;AAAE,kBAAS;AAAX,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKT,UAAU,CAACO,GAAX,CAAeG,QAAQ,IACtBA,QAAQ,CAACzC,gBAAgB,CAAC2C,QAAlB,CAAR,KAAuC,OAAvC;AAAA;AAAkD;AAChD,wBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AACI,MAAA,MAAM,EAAE,IADZ;AAEI,MAAA,IAAI,EAAC,UAFT;AAGI,MAAA,IAAI,EAAEF,QAAQ,CAAC,GAAD,CAHlB;AAII,MAAA,KAAK,EAAEA,QAAQ,CAAC,GAAD,CAAR,CAAc,KAAKlC,KAAL,CAAWqC,iBAAzB,KAA+CH,QAAQ,CAAC,GAAD,CAJlE;AAKI,MAAA,QAAQ,EAAGI,KAAD,IAAW,KAAKtC,KAAL,CAAWuC,eAAX,CAA2BD,KAA3B,EAAkCJ,QAAQ,CAAC,GAAD,CAA1C,EAAiDD,KAAjD,EAAwDC,QAAQ,CAAC,GAAD,CAAhE,EAAuE1B,MAAM,CAACC,QAA9E,CALzB;AAMI,MAAA,EAAE,EAAEyB,QAAQ,CAAC,GAAD,CANhB;AAOI,MAAA,OAAO,EAAEA,QAAQ,CAAC,GAAD,CAAR,MAAmBlB,QAAQ,IAAIA,QAAQ,CAACiB,KAAD,CAApB,IAA+BjB,QAAQ,CAACiB,KAAD,CAAR,CAAgBC,QAAQ,CAAC,GAAD,CAAxB,CAA/B,IAAiElB,QAAQ,CAACiB,KAAD,CAAR,CAAgBC,QAAQ,CAAC,GAAD,CAAxB,EAA+B,GAA/B,CAApF,IAA2H,IAA3H,GAAkI,KAP/I;AAQI,MAAA,cAAc,EAAEA,QAAQ,CAAC,GAAD,CAAR,MAAmBlB,QAAQ,IAAIA,QAAQ,CAACiB,KAAD,CAApB,IAA+BjB,QAAQ,CAACiB,KAAD,CAAR,CAAgBC,QAAQ,CAAC,GAAD,CAAxB,CAA/B,IAAiElB,QAAQ,CAACiB,KAAD,CAAR,CAAgBC,QAAQ,CAAC,GAAD,CAAxB,EAA+B,GAA/B,CAApF,IAA2H,IAA3H,GAAkI,KARtJ;AASI,MAAA,IAAI,EAAE,IATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFH,CADL,CADJ,CADJ,CADJ,CADJ,eA0BI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,KAAK,EAAE;AAAE,mBAAU;AAAZ,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,yCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,OAAO,EAAE,MAAM,KAAKlC,KAAL,CAAWwC,uBAAX,CAAmCP,KAAnC,EAA0CzB,MAAM,CAACC,QAAjD,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAElB,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,CADJ,CA1BJ,CADJ,EAoCK+B,aAAa,CAACmB,MAAd,GAAqB,CAArB,KAA4BR,KAA5B,gBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GACY,EArCjB,CADH,CARL,CADH,CADL,CADJ,CAjER,CADJ;AA6HH;;AA1K+C;;AA4KpD,eAAelD,UAAU,CAACc,qBAAD,CAAzB","sourcesContent":["\r\nimport React from 'react'\r\nimport { FormattedMessage, injectIntl } from 'react-intl'\r\nimport 'rc-tabs/assets/index.css';\r\nimport { Col, Form, InputGroup, Nav, Row } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { SampleType, designProperties } from '../../components/Enumeration';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport Tabs, { TabPane } from 'rc-tabs';\r\nclass ConfigureUniqueFields extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const screens = [{ eventKey: 'sample', name: \"IDS_SAMPLE\" }];\r\n        if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedsubsample === true) {\r\n            screens.push({ eventKey: 'subsample', name: \"IDS_SUBSAMPLE\" });\r\n        }\r\n\r\n        this.state = {\r\n            screens,\r\n            selectedScreen: { eventKey: 'sample', name: \"IDS_SAMPLE\" }\r\n        }\r\n    }\r\n\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n        const dataList = this.props.selectedTemplateType === SampleType.Masters \r\n        || this.props.selectedTemplateType === SampleType.GOODSIN \r\n        || this.props.selectedTemplateType === SampleType.PROTOCOL \r\n        || this.state.selectedScreen.eventKey === 'sample' ? this.props.dataList : this.props.dataListsubsample\r\n\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n\r\n        const dataListCount = this.props.selectedTemplateType === SampleType.Masters\r\n         || this.props.selectedTemplateType === SampleType.GOODSIN  \r\n         || this.props.selectedTemplateType === SampleType.PROTOCOL \r\n         || this.state.selectedScreen.eventKey === 'sample' ? this.props.dataListCount : this.props.dataListCountsubsample\r\n       // const designData = this.props.selectedTemplateType === SampleType.Masters || this.props.selectedTemplateType === SampleType.GOODSIN ? this.props.designData.templatefields : this.state.selectedScreen.eventKey === 'sample' ? this.props.designData.sampletemplatefields : this.props.designData.subsampletemplatefields\r\n\r\n       //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n\r\n        const designData = this.props.selectedTemplateType === SampleType.Masters ?  this.props.designData.mastertemplatefields \r\n        : this.props.selectedTemplateType === SampleType.GOODSIN  \r\n        || this.props.selectedTemplateType === SampleType.PROTOCOL ? this.props.designData.templatefields \r\n        : this.state.selectedScreen.eventKey === 'sample' ? this.props.designData.sampletemplatefields \r\n        : this.props.designData.subsampletemplatefields\r\n\r\n\r\n        return (\r\n            <>\r\n                {this.props.selectedTemplateType === SampleType.Masters \r\n                || this.props.selectedTemplateType === SampleType.GOODSIN  \r\n                || this.props.selectedTemplateType === SampleType.PROTOCOL\r\n                 || (this.props.approvedRegSubTypeVersion && (this.props.approvedRegSubTypeVersion.jsondata.nneedsubsample === undefined \r\n                    || this.props.approvedRegSubTypeVersion.jsondata.nneedsubsample === false)) ?\r\n                    <>\r\n                        <div className='d-flex justify-content-end'>\r\n                            <Nav.Link onClick={() => this.props.addCombinatonUnique(designData\r\n                            )} className=\"add-txt-btn\">\r\n                                <FontAwesomeIcon icon={faPlus} />{ }\r\n                                <FormattedMessage id='IDS_ADD' defaultMessage='Add' />\r\n                            </Nav.Link>\r\n                        </div>\r\n                        {dataListCount.map((item, index) =>\r\n                            <>\r\n                                <Row>\r\n                                    <Col md={11}>\r\n                                        <InputGroup size={'lg'}>\r\n                                            <Form.Group>\r\n                                                <Row>\r\n                                                    {designData.map(checkbox =>\r\n                                                checkbox[designProperties.VALUE] !=='sreportno' \r\n                                                && checkbox[designProperties.VALUE] !=='sarno' \r\n                                                && checkbox[designProperties.VALUE] !=='sspecname' \r\n                                                && checkbox[designProperties.VALUE] !=='dregdate' \r\n                                                && checkbox[designProperties.VALUE] !=='stransdisplaystatus' \r\n                                                && checkbox[designProperties.VALUE] !=='ntestcount'\r\n                                                && checkbox[designProperties.LISTITEM] !=='label' && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n\r\n                                                        <Col md={4}>\r\n                                                            <Form.Check\r\n                                                                inline={true}\r\n                                                                type=\"checkbox\"\r\n                                                                name={checkbox[\"2\"]}\r\n                                                                label={checkbox[\"1\"][this.props.slanguagetypecode] || checkbox[\"2\"]}\r\n                                                                onChange={(event) => this.props.onInputOnChange(event, checkbox[\"2\"], index, checkbox[\"1\"])}\r\n                                                                id={checkbox[\"2\"]}\r\n                                                                checked={checkbox[\"2\"] === (dataList && dataList[index] && dataList[index][checkbox[\"2\"]] && dataList[index][checkbox[\"2\"]][\"2\"]) ? true : false}\r\n                                                                defaultChecked={checkbox[\"2\"] === (dataList && dataList[index] && dataList[index][checkbox[\"2\"]] && dataList[index][checkbox[\"2\"]][\"2\"]) ? true : false}\r\n                                                                size={'lg'}\r\n                                                            />\r\n                                                        </Col>\r\n\r\n\r\n                                                    )}\r\n                                                </Row>\r\n                                            </Form.Group>\r\n                                        </InputGroup >\r\n                                    </Col>\r\n                                    <Col md={1}>\r\n                                        <div className='icon-group-wrap enable-view click-view '>\r\n                                            {/* style={{ \"display\": \"inline-flex\", \"align-items\": \"center\", \"padding-left\": \"0\", \"margin-right\": \"0.75rem\" }} */}\r\n                                            <Nav.Link onClick={() => this.props.deleteCombinationUnique(index)} >\r\n                                                <FontAwesomeIcon icon={faTrashAlt}></FontAwesomeIcon>\r\n                                            </Nav.Link>\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                </Row>\r\n                                {dataListCount.length-1 !== index ?\r\n                                    <hr /> : \"\"}\r\n                            </>\r\n                        )}\r\n                    </> :\r\n                    <AtTabs>\r\n                        <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                            {this.state.screens.map(screen =>\r\n                                <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n                                    <div className='d-flex justify-content-end'>\r\n                                        <Nav.Link onClick={() => this.props.addCombinatonUnique(designData, screen.eventKey\r\n                                        )} className=\"add-txt-btn\">\r\n                                            <FontAwesomeIcon icon={faPlus} />{ }\r\n                                            <FormattedMessage id='IDS_ADD' defaultMessage='Add' />\r\n                                        </Nav.Link>\r\n                                    </div>\r\n                                    {dataListCount.map((item, index) =>\r\n                                        <>\r\n                                            <Row>\r\n                                                <Col md={11}>\r\n                                                    <InputGroup size={'lg'}>\r\n                                                        <Form.Group>\r\n                                                            <Row style={{ \"margin\":\"0.5px\"}}>\r\n                                                                {designData.map(checkbox =>\r\n                                                                  checkbox[designProperties.LISTITEM] !=='label' && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                                                                    <Col md={4}>\r\n                                                                        <Form.Check\r\n                                                                            inline={true}\r\n                                                                            type=\"checkbox\"\r\n                                                                            name={checkbox[\"2\"]}\r\n                                                                            label={checkbox[\"1\"][this.props.slanguagetypecode] || checkbox[\"2\"]}\r\n                                                                            onChange={(event) => this.props.onInputOnChange(event, checkbox[\"2\"], index, checkbox[\"1\"], screen.eventKey)}\r\n                                                                            id={checkbox[\"2\"]}\r\n                                                                            checked={checkbox[\"2\"] === (dataList && dataList[index] && dataList[index][checkbox[\"2\"]] && dataList[index][checkbox[\"2\"]][\"2\"]) ? true : false}\r\n                                                                            defaultChecked={checkbox[\"2\"] === (dataList && dataList[index] && dataList[index][checkbox[\"2\"]] && dataList[index][checkbox[\"2\"]][\"2\"]) ? true : false}\r\n                                                                            size={'lg'}\r\n                                                                        />\r\n                                                                    </Col>\r\n\r\n                                                                )}\r\n                                                            </Row>\r\n                                                        </Form.Group>\r\n                                                    </InputGroup >\r\n                                                </Col>\r\n                                                <Col md={1} style={{ \"padding\":\"0.5px\"}}>\r\n                                                    <div className='icon-group-wrap enable-view click-view '>\r\n                                                        {/* <div style={{ \"display\": \"inline-flex\", \"align-items\": \"center\", \"padding-left\": \"0\", \"margin-right\": \"0.75rem\" }}> */}\r\n                                                        <Nav.Link onClick={() => this.props.deleteCombinationUnique(index, screen.eventKey)} >\r\n                                                            <FontAwesomeIcon icon={faTrashAlt}></FontAwesomeIcon>\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            {dataListCount.length-1  !== index ?\r\n                                                <hr /> : \"\"}\r\n                                        </>\r\n                                    )}\r\n                                </TabPane>\r\n                            )}\r\n                        </Tabs>\r\n                    </AtTabs>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(ConfigureUniqueFields)"]},"metadata":{},"sourceType":"module"}