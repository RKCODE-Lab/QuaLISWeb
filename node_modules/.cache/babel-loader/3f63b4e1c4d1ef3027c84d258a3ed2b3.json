{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\testmanagement\\\\TestView.jsx\";\nimport React, { Component } from 'react';\nimport { toast } from 'react-toastify';\nimport { injectIntl } from 'react-intl';\nimport rsapi from '../../rsapi';\nimport { process } from '@progress/kendo-data-query';\nimport { Col, Row } from 'react-bootstrap';\nimport '../../assets/styles/lims-global-theme.css';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddSpecification from './AddSpecification';\nimport AddCodedResult from './AddCodedResult';\nimport AddParameter from './AddParameter';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, create_UUID, onDropAttachFileList, deleteAttachmentDropZone, Lims_JSON_stringify, replaceBackSlash } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport AddTestSection from './AddTestSection';\nimport AddTestMethod from './AddTestMethod';\nimport AddTestInstrumentCategory from './AddTestInstrumentCategory';\nimport AddFormula from './AddFormula';\nimport ValidateFormula from './ValidateFormula';\nimport AddFile from './AddFile';\nimport { parameterType, transactionStatus, operators, attachmentType, FORMULAFIELDTYPE, formCode } from '../../components/Enumeration';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport TestSectionTab from './TestSectionTab';\nimport TestMethodTab from './TestMethodTab';\nimport TestInstrumentCategoryTab from './TestInstrumentCategoryTab';\nimport TestFileTab from './TestFileTab';\nimport AddTestContainerType from './AddTestContainerType';\nimport TestContainerTypeTab from './TestContainerTypeTab';\nimport ParameterTab from './ParameterTab';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport TestPackageTab from './TestPackageTab';\nimport AddTestPackageTest from './AddTestPackageTest';\nimport AddSubCodedResult from './AddSubCodedResult';\nimport AddTestGroupNumericSpecification from '../../pages/testgroup/AddTestGroupNumericSpecification';\nimport AddPredefinedUserFormula from './AddPredefinedUserFormula';\n\nclass TestView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_PARAMETER\", /*#__PURE__*/React.createElement(ParameterTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        TestParameter: this.props.masterData.TestParameter,\n        masterData: this.props.masterData,\n        userInfo: this.props.userInfo,\n        getTestDetails: this.props.getTestDetails,\n        inputParam: this.props.inputParam,\n        addParameter: this.props.addParameter,\n        deleteAction: this.props.deleteAction,\n        ConfirmDelete: this.ConfirmDelete,\n        addCodedResult: this.props.addCodedResult,\n        addSubCodedResult: this.props.addSubCodedResult,\n        addFormula: this.props.addFormula,\n        openPredefinedModal: this.props.openPredefinedModal,\n        onSwitchChange: this.onSwitchChange,\n        addParameterSpecification: this.props.addParameterSpecification,\n        addClinicalSpecification: this.props.addClinicalSpecification,\n        screenName: \"IDS_PARAMETER\",\n        grade: this.props.grade,\n        dataStateChange: this.props.dataStateChange,\n        dataState: this.props.clinicalspecDataState,\n        EditSpecDetails: this.EditSpecDetails,\n        deleteRecord: this.DeleteSpecDetails,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_SECTION\", /*#__PURE__*/React.createElement(TestSectionTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        dataResult: process(this.props.masterData[\"TestSection\"], this.props.screenName === undefined || this.props.screenName === \"IDS_SECTION\" ? this.state.sectionDataState : {\n          skip: 0,\n          take: 10\n        }),\n        dataState: this.props.screenName === undefined || this.props.screenName === \"IDS_SECTION\" ? this.state.sectionDataState : {\n          skip: 0,\n          take: 5\n        },\n        dataStateChange: event => this.setState({\n          sectionDataState: event.dataState\n        }),\n        selectedTest: this.props.masterData.SelectedTest,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        defaultRecord: this.defaultRecord,\n        getAvailableData: this.props.getAvailableData,\n        TestSection: this.props.masterData.TestSection || [],\n        screenName: \"IDS_SECTION\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_METHOD\", /*#__PURE__*/React.createElement(TestMethodTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        dataResult: process(this.props.masterData[\"TestMethod\"], this.props.screenName === undefined || this.props.screenName === \"IDS_METHOD\" ? this.state.methodDataState : {\n          skip: 0,\n          take: 5\n        }) // dataResult={this.state.testmethodata && this.state.testmethodata===undefined?this.props.masterData[\"TestMethod\"]:this.state.testmethodata }\n        ,\n        dataState: this.props.screenName === undefined || this.props.screenName === \"IDS_METHOD\" ? this.state.methodDataState : {\n          skip: 0,\n          take: 5\n        },\n        dataStateChange: event => this.setState({\n          methodDataState: event.dataState\n        }),\n        selectedTest: this.props.masterData.SelectedTest,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        defaultRecord: this.defaultRecord,\n        getAvailableData: this.props.getAvailableData,\n        TestMethod: this.props.masterData.TestMethod || [],\n        screenName: \"IDS_METHOD\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_INSTRUMENTCATEGORY\", /*#__PURE__*/React.createElement(TestInstrumentCategoryTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        dataResult: process(this.props.masterData[\"TestInstrumentCategory\"], this.props.screenName === undefined || this.props.screenName === \"IDS_INSTRUMENTCATEGORY\" ? this.state.instrumentCatDataState : {\n          skip: 0,\n          take: 5\n        }),\n        dataState: this.props.screenName === undefined || this.props.screenName === \"IDS_INSTRUMENTCATEGORY\" ? this.state.instrumentCatDataState : {\n          skip: 0,\n          take: 5\n        },\n        dataStateChange: event => this.setState({\n          instrumentCatDataState: event.dataState\n        }),\n        selectedTest: this.props.masterData.SelectedTest,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        defaultRecord: this.defaultRecord,\n        getAvailableData: this.props.getAvailableData,\n        TestInstrumentCategory: this.props.masterData.TestInstrumentCategory,\n        screenName: \"IDS_INSTRUMENTCATEGORY\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_FILE\", /*#__PURE__*/React.createElement(TestFileTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        dataStateChange: event => this.setState({\n          testFileDataState: event.dataState\n        }),\n        testFileDataState: this.state.testFileDataState,\n        TestFile: this.props.masterData.TestFile || [],\n        getAvailableData: this.props.getAvailableData,\n        addTestFile: this.props.addTestFile,\n        viewTestFile: this.viewTestFile,\n        defaultRecord: this.defaultRecord,\n        screenName: \"IDS_FILE\",\n        settings: this.props.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 13\n        }\n      })); // if (this.props.esignRights && Object.keys(this.props.esignRights).indexOf(formCode.TESTPACKAGE.toString())!==-1){\n\n      if (this.props.hideQualisForms && this.props.hideQualisForms.findIndex(item => item.nformcode === formCode.TESTPACKAGE) === -1) {\n        tabMap.set(\"IDS_TESTPACKAGE\", /*#__PURE__*/React.createElement(TestPackageTab, {\n          controlMap: this.props.controlMap,\n          userRoleControlRights: this.props.userRoleControlRights,\n          dataResult: process(this.props.masterData[\"TestPackage\"] || [], this.props.screenName === undefined || this.props.screenName === \"IDS_PACKAGE\" ? this.state.testPackageDataState : {\n            skip: 0,\n            take: 5\n          }),\n          dataState: this.props.screenName === undefined || this.props.screenName === \"IDS_PACKAGE\" ? this.state.testPackageDataState : {\n            skip: 0,\n            take: 5\n          },\n          dataStateChange: event => this.setState({\n            testPackageDataState: event.dataState\n          }),\n          selectedTest: this.props.masterData.SelectedTest,\n          userInfo: this.props.userInfo,\n          inputParam: this.props.inputParam,\n          deleteRecord: this.deleteRecord,\n          defaultRecord: this.defaultRecord,\n          getAvailableData: this.props.getAvailableData,\n          TestPackage: this.props.masterData.TestPackage,\n          screenName: \"IDS_PACKAGE\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 17\n          }\n        }));\n      } // tabMap.set(\"IDS_TECHNIQUE\",\n      //     <TestTechniqueTab\n      //         controlMap={this.props.controlMap}\n      //         userRoleControlRights={this.props.userRoleControlRights}\n      //         dataResult={process(this.props.masterData[\"TestTechnique\"] ||[], (this.props.screenName === undefined || this.props.screenName === \"IDS_TECHNIQUE\") ? this.state.sectionDataState : { skip: 0, take: 10 })}\n      //         dataState={(this.props.screenName === undefined \n      //             || this.props.screenName === \"IDS_TECHNIQUE\") ? this.state.techniqueDataState : { skip: 0, take: 10 }}\n      //         dataStateChange={(event) => this.setState({ techniqueDataState: event.dataState })}\n      //         selectedTest={this.props.masterData.SelectedTest}\n      //         userInfo={this.props.userInfo}\n      //         inputParam={this.props.inputParam}\n      //         deleteRecord={this.deleteRecord}\n      //         defaultRecord={this.defaultRecord}\n      //         getAvailableData={this.props.getAvailableData}\n      //         TestTechnique={this.props.masterData.TestTechnique || []}\n      //         screenName=\"IDS_TECHNIQUE\"\n      //     />);\n\n\n      tabMap.set(\"IDS_CONTAINERTYPE\", /*#__PURE__*/React.createElement(TestContainerTypeTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        dataResult: process(this.props.masterData[\"Containertype\"], this.props.screenName === undefined || this.props.screenName === \"IDS_CONTAINERTYPE\" ? this.state.containerTypeDataState : {\n          skip: 0,\n          take: 5\n        }),\n        dataState: this.props.screenName === undefined || this.props.screenName === \"IDS_CONTAINERTYPE\" ? this.state.containerTypeDataState : {\n          skip: 0,\n          take: 5\n        },\n        dataStateChange: event => this.setState({\n          containerTypeDataState: event.dataState\n        }),\n        selectedTest: this.props.masterData.SelectedTest,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        defaultRecord: this.defaultRecord,\n        getAvailableData: this.props.getAvailableData,\n        TestContainerType: this.props.masterData.Containertype,\n        getActiveTestContainerTypeById: this.props.getActiveTestContainerTypeById,\n        addContainerType: this.props.addContainerType,\n        intl: this.props.intl,\n        screenName: \"IDS_CONTAINERTYPE\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.viewTestFile = filedata => {\n      const inputParam = {\n        inputData: {\n          testfile: filedata,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"testmaster\",\n        operation: \"view\",\n        methodUrl: \"AttachedTestFile\",\n        screenName: \"IDS_TEST\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.DeleteSpecDetails = (viewdetails, ncontrolCode) => {\n      this.ConfirmDelete(viewdetails, \"delete\", ncontrolCode, 'TestParameterClinicalSpec', 'openChildModal');\n    };\n\n    this.EditSpecDetails = (viewdetails, ncontrolCode) => {\n      this.props.addClinicalSpecification(\"update\", viewdetails, this.props.userInfo, ncontrolCode);\n    };\n\n    this.deleteRecord = deleteParam => {\n      let dataResultRecord;\n      let skipDataRecords;\n      const methodUrl = deleteParam.methodUrl;\n      const selected = deleteParam.selectedRecord;\n      let dataState = undefined;\n\n      if (this.props.screenName === \"IDS_SECTION\") {\n        dataResultRecord = process(this.props.masterData[\"TestSection\"], this.state.sectionDataState);\n        dataState = this.state.sectionDataState;\n      } else if (this.props.screenName === \"IDS_METHOD\") {\n        dataResultRecord = process(this.props.masterData[\"TestMethod\"], this.state.methodDataState);\n        dataState = this.state.methodDataState;\n      } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\n        dataResultRecord = process(this.props.masterData[\"TestInstrumentCategory\"], this.state.instrumentCatDataState);\n        dataState = this.state.instrumentCatDataState;\n      } else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\n        dataResultRecord = process(this.props.masterData[\"TestMethod\"], this.state.containerTypeDataState);\n        dataState = this.state.containerTypeDataState;\n      } else if (this.props.screenName === \"IDS_TESTPACKAGE\") {\n        dataResultRecord = process(this.props.masterData[\"TestPackage\"], this.state.testPackageDataState);\n        dataState = this.state.testPackageDataState;\n      } else if (this.props.screenName === \"IDS_TESTFILE\" || this.props.screenName === \"IDS_FILE\") {\n        dataResultRecord = process(this.props.masterData[\"TestFile\"], this.state.testPackageDataState);\n        dataState = this.state.testFileDataState;\n      }\n\n      if (dataResultRecord.data) {\n        if (dataResultRecord.data.length === 1) {\n          let skipcount = dataState.skip > 0 ? dataState.skip - dataState.take : dataState.skip;\n          skipDataRecords = {\n            skip: skipcount,\n            take: dataState.take\n          };\n        } else {\n          skipDataRecords = dataState;\n        }\n      }\n\n      const inputParam = {\n        inputData: {\n          [methodUrl.toLowerCase()]: selected,\n          \"userinfo\": { ...this.props.userInfo,\n            //ALPD-1628(while file saving,audit trail is not captured respective language)\n            slanguagename: Lims_JSON_stringify(this.props.userInfo.slanguagename)\n          },\n          //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n          \"isQualisLite\": parseInt(this.props.settings[71])\n        },\n        classUrl: \"testmaster\",\n        operation: deleteParam.operation,\n        methodUrl: methodUrl,\n        screenName: \"IDS_TEST\",\n        dataState: skipDataRecords\n      };\n      const masterData = this.props.masterData;\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openChildModal: true,\n            screenName: \"IDS_TEST\",\n            operation: deleteParam.operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.defaultRecord = (defaultParam, event) => {\n      const methodUrl = defaultParam.methodUrl;\n      let dataItem = defaultParam.selectedRecord; // dataItem[\"ndefaultstatus\"] = transactionStatus.YES;\n\n      let dataState = undefined;\n\n      if (this.props.screenName === \"IDS_SECTION\") {\n        dataState = this.state.sectionDataState;\n      } else if (this.props.screenName === \"IDS_METHOD\") {\n        dataState = this.state.methodDataState;\n      } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\n        dataState = this.state.instrumentCatDataState;\n      } else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\n        dataState = this.state.containerTypeDataState;\n      } else if (this.props.screenName === \"IDS_TESTPACKAGE\") {\n        dataState = this.state.testPackageDataState;\n      }\n\n      let postParam = {\n        inputListName: \"TestMaster\",\n        selectedObject: \"SelectedTest\",\n        primaryKeyField: \"ntestcode\"\n      };\n      const inputParam = {\n        inputData: {\n          [methodUrl.toLowerCase()]: dataItem,\n          userinfo: this.props.userInfo,\n          //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n          \"isQualisLite\": parseInt(this.props.settings[71])\n        },\n        classUrl: \"testmaster\",\n        operation: \"setDefault\",\n        methodUrl: methodUrl,\n        dataState,\n        postParam\n      };\n      const masterData = this.props.masterData;\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, defaultParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openChildModal: true,\n            screenName: \"Test\",\n            operation: defaultParam.operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.onSwitchChange = (item, key, methodUrl, event, defaultTestFormulaId) => {\n      const masterData = this.props.masterData;\n      let dataItem = item; // dataItem[\"ndefaultstatus\"] = 3;\n      //dataItem['ndefaultstatus'] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n\n      const inputParam = {\n        inputData: {\n          [key]: dataItem,\n          userinfo: this.props.userInfo,\n          //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n          \"isQualisLite\": parseInt(this.props.settings[71])\n        },\n        classUrl: \"testmaster\",\n        operation: \"setDefault\",\n        methodUrl: methodUrl\n      };\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, defaultTestFormulaId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openChildModal: true,\n            screenName: \"Test\",\n            operation: \"setDefault\",\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.hideValidateFormula = () => {\n      this.setState({\n        openValidate: false,\n        showCalculate: false,\n        formulaScreenName: \"\",\n        validateFormulaMandyFields: []\n      });\n    };\n\n    this.validateFormula = testData => {\n      const sformulacalculationcode = this.state.selectedRecord.sformulacalculationcode;\n\n      if (sformulacalculationcode) {\n        if (sformulacalculationcode.includes(\"$D\") || sformulacalculationcode.includes(\"$P\")) {\n          rsapi.post(\"/testmaster/validateTestFormula\", {\n            ntestcode: testData.ntestcode,\n            \"sformula\": sformulacalculationcode,\n            userinfo: this.props.userInfo\n          }).then(response => {\n            let selectedRecord = this.state.selectedRecord || {};\n            selectedRecord[\"formulainput\"] = {};\n            const validateFormulaMandyFields = response.data.map((item, index) => {\n              return {\n                \"idsName\": \"IDS_FILLALLFIELDS\",\n                \"dataField\": \"dynamicformulafield_\" + index,\n                \"mandatory\": true\n              };\n            });\n            this.setState({\n              openValidate: true,\n              DynamicFields: response.data,\n              dynamicField: [],\n              selectedRecord,\n              formulaScreenName: \"IDS_VALIDATEFORMULA\",\n              showCalculate: true,\n              validateFormulaMandyFields\n            });\n          }).catch(error => {\n            toast.error(error.message);\n          });\n        } else {\n          const inputParam = {\n            dynamicformulafields: [],\n            sformulacalculationcode: this.state.selectedRecord.sformulacalculationcode,\n            userinfo: this.props.userInfo\n          };\n          this.calculateFormulaFunction(inputParam);\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ENTERFORMULA\"\n        }));\n      }\n    };\n\n    this.calculateFormula = () => {\n      const dynamicField = this.state.dynamicField;\n      const dynamicformulafields = Object.keys(dynamicField).map(keyname => {\n        return dynamicField[keyname];\n      });\n      const inputParam = {\n        dynamicformulafields: dynamicformulafields,\n        sformulacalculationcode: this.state.selectedRecord.sformulacalculationcode,\n        userinfo: this.props.userInfo\n      };\n      this.calculateFormulaFunction(inputParam);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        //ALPD-707 fix\n        if (this.props.operation === \"delete\" || this.props.operation === \"Default\" || this.props.operation === \"setDefault\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = 4;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (fieldName === \"sparametername\") {\n            selectedRecord[fieldName] = comboData;\n            selectedRecord[\"sparametersynonym\"] = comboData.value;\n          } else if (fieldName === \"nunitcode\") {\n            //ALPD-3637-Vignesh R(02-08-2024)-- Test master--> parameter records are disappeared when clicking the refresh button.\n            selectedRecord[\"noperatorcode\"] = -1;\n            selectedRecord[\"nconversionfactor\"] = \"\";\n            selectedRecord[\"ndestinationunitcode\"] = \"\";\n            selectedRecord[\"sunitname\"] = \"\";\n            selectedRecord[\"sunitname1\"] = \"\";\n            selectedRecord[\"nunitcode\"] = comboData;\n            this.props.getUnitConversion(this.state.selectedRecord.nunitcode.value, this.props.masterData, this.props.userInfo, selectedRecord);\n          } else if (fieldName === \"ndestinationunitcode\") {\n            if (comboData !== null) {\n              selectedRecord[\"ndestinationunitcode\"] = comboData;\n              this.props.getConversionOperator(this.state.selectedRecord.nunitcode.value, this.state.selectedRecord.ndestinationunitcode.value, this.props.masterData, this.props.userInfo, selectedRecord);\n            } else {\n              delete selectedRecord[\"ndestinationunitcode\"]; //ALPD-3521\n\n              delete selectedRecord[\"soperator\"];\n              delete selectedRecord[\"nconversionfactor\"];\n              selectedRecord[\"noperatorcode\"] = -1;\n            }\n          } else {\n            selectedRecord[fieldName] = comboData;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          const parameterData = this.props.parameterData;\n          let item = comboData['item'];\n          let needUnit = true;\n          let needRoundingDigit = true;\n          let needCodedResult = true;\n          let needActualResult = true;\n          let npredefinedcode = 4;\n\n          if (item[\"nunitrequired\"] === 3) {\n            needUnit = false;\n            selectedRecord[\"nunitcode\"] = this.props.parameterData.defaultUnit;\n          } else {\n            selectedRecord[\"nunitcode\"] = \"\"; //ALPD-3521\n\n            selectedRecord[\"ndestinationunitcode\"] = \"\";\n            selectedRecord[\"noperatorcode\"] = -1;\n            selectedRecord[\"sunitname\"] = \"\";\n            selectedRecord[\"sunitname1\"] = \"\";\n            selectedRecord[\"nconversionfactor\"] = \"\"; // selectedRecord[\"nunitcode\"] = \"\";\n          }\n\n          if (item[\"nroundingrequired\"] === 3) {\n            needRoundingDigit = false;\n          } else {\n            selectedRecord[\"nroundingdigits\"] = \"0\";\n          }\n\n          if (item[\"npredefinedrequired\"] === 3) {\n            needCodedResult = false;\n            npredefinedcode = item[\"npredefinedrequired\"];\n          } else {\n            selectedRecord[\"spredefinedname\"] = \"\";\n          }\n\n          if (item[\"ngraderequired\"] === 3) {\n            needActualResult = false;\n            selectedRecord[\"ngradecode\"] = this.props.parameterData.defaultGrade;\n          } else {\n            selectedRecord[\"ngradecode\"] = \"\";\n          }\n\n          selectedRecord[fieldName] = comboData;\n          const parameterInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord,\n              parameterData: { ...parameterData,\n                needUnit,\n                needRoundingDigit,\n                needCodedResult,\n                needActualResult,\n                npredefinedcode\n              }\n            }\n          };\n          this.props.updateStore(parameterInfo);\n          break;\n\n        case 3:\n          selectedRecord[fieldName] = comboData;\n          this.props.formulaChangeFunction({\n            ntestcategorycode: comboData.value,\n            nFlag: 2,\n            userinfo: this.props.userInfo\n          }, this.props.formulaData, 1, selectedRecord, '/changeTestCatgoryInFormula');\n          break;\n\n        case 4:\n          selectedRecord[fieldName] = comboData;\n          this.props.formulaChangeFunction({\n            ntestcode: comboData.value,\n            nFlag: 3,\n            userinfo: this.props.userInfo\n          }, this.props.formulaData, 2, selectedRecord, '/changeTestInFormula');\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = (event, caseNo, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (event.target.type === 'checkbox') {\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n          } else if (event.target.type === 'radio') {\n            selectedRecord[event.target.name] = optional; //  selectedRecord[\"sfilename\"]=\"\";\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 4:\n          const inputValue = event.target.value;\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 5:\n          if (optional.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER && optional.sdescription.indexOf('P$') === -1) {\n            const value = event.target.value.replace(/[^-^0-9]/g, '');\n            const dynamicField = this.state.dynamicField || [];\n\n            if (/^-?\\d*?$/.test(value)) {\n              if (!selectedRecord['formulainput']) {\n                selectedRecord['formulainput'] = {};\n              }\n\n              selectedRecord['formulainput'][event.target.name] = value;\n              dynamicField[event.target.name] = {\n                sparameter: optional.sdescription,\n                svalues: value\n              };\n            } else if (value === \"\") {\n              if (!selectedRecord['formulainput']) {\n                selectedRecord['formulainput'] = {};\n              }\n\n              selectedRecord['formulainput'][event.target.name] = value;\n              dynamicField[event.target.name] = {\n                sparameter: optional.sdescription,\n                svalues: value\n              };\n            }\n\n            this.setState({\n              dynamicField,\n              selectedRecord\n            });\n            break;\n          } else {\n            const value = event.target.value.replace(/[^-^0-9.]/g, '');\n            const dynamicField = this.state.dynamicField || [];\n\n            if (/^-?\\d*?\\.?\\d*?$/.test(value) || value !== \"\") {\n              if (!selectedRecord['formulainput']) {\n                selectedRecord['formulainput'] = {};\n              }\n\n              selectedRecord['formulainput'][event.target.name] = value;\n              dynamicField[event.target.name] = {\n                sparameter: optional.sdescription,\n                svalues: value\n              };\n            }\n\n            this.setState({\n              dynamicField,\n              selectedRecord\n            });\n            break;\n          }\n\n        case 6:\n          // selectedRecord[event.target.name] = selectedRecord[\"sresultparacomment\"] = { label: event.target.value, value: event.target.value };\n          // this.setState({ selectedRecord });\n          // break;\n          selectedRecord[event.target.name] = selectedRecord[\"spredefinedsynonym\"] = event.target.value; //selectedRecord[event.target.name] = selectedRecord[\"sresultparacomment\"] = event.target.value;\n          //selectedRecord[\"sparametername\"] = { label: event.target.value, value: event.target.value };\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 7:\n          const inputValues = event.target.value;\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(inputValues) || inputValues === \"\") {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          if (selectedRecord[\"sresultvalue\"] !== \"\" && selectedRecord[\"sresultvalue\"] !== undefined && selectedRecord[\"sresultvalue\"].value !== -1) {\n            selectedRecord[\"ngradecode\"] = this.props.parameterData.grade[3];\n          } else if (selectedRecord[\"sresultvalue\"] === \"\") {\n            delete selectedRecord[\"ngradecode\"];\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 8:\n          const inputvalues = event.target.value;\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(inputvalues) || inputvalues === \"\") {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          if (selectedRecord[\"sresultvalue\"] !== \"\" && (selectedRecord[\"ngradecode\"] === undefined || selectedRecord[\"ngradecode\"].value === -1)) {\n            selectedRecord[\"ngradecode\"] = this.props.parameterData.gradenew[3];\n          } else if (selectedRecord[\"sresultvalue\"] === \"\") {\n            delete selectedRecord[\"ngradecode\"];\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onNumericInputChange = (value, name, secondaryFieldName) => {\n      console.log(\"value:\", value, name);\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (name === \"nroundingdigits\") {\n        const values = value.target.value; //.replace(/[^-^0-9]/g, '');\n\n        if (/^\\d*?$/.test(values) || values === \"\") {\n          console.log(\"val:\", values);\n          selectedRecord[name] = values;\n        }\n      } else {\n        selectedRecord[name] = value;\n\n        if (secondaryFieldName !== undefined) {\n          if (selectedRecord[name] === 0 || selectedRecord[name] === undefined) {\n            selectedRecord[\"unitMandatory\"] = false;\n            selectedRecord[\"nunitcode\"] = undefined;\n          } else {\n            selectedRecord[\"unitMandatory\"] = true;\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {};\n      let defaultInput = {};\n      let isValidRequest = true;\n\n      if (this.props.screenName === \"IDS_PARAMETER\") {\n        inputParam = this.onSaveParameter(saveType, formRef);\n        defaultInput = {\n          nparametertypecode: this.state.selectedRecord.nparametertypecode,\n          //   ngradecode: this.state.selectedRecord.ngradecode,\n          nunitcode: \"\"\n        };\n      } else if (this.props.screenName === \"IDS_CODEDRESULT\") {\n        inputParam = this.onSaveCodedResult(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_SPECIFICATION\") {\n        const selectedRecord = this.props.selectedRecord;\n\n        if (selectedRecord[\"sminb\"] || selectedRecord[\"smina\"] || selectedRecord[\"smaxa\"] || selectedRecord[\"smaxb\"] || selectedRecord[\"sminlod\"] || selectedRecord[\"smaxlod\"] || selectedRecord[\"sminloq\"] || selectedRecord[\"smaxloq\"] || selectedRecord[\"sdisregard\"] || selectedRecord[\"sresultvalue\"]) {\n          inputParam = this.onSaveSpecification(saveType, formRef);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_ENTERSPECLIMIT\"\n          }));\n          isValidRequest = false;\n        }\n      } else if (this.props.screenName === \"IDS_CLINICALSPEC\") {\n        inputParam = this.onSaveClinicalSpec(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_FORMULA\") {\n        inputParam = this.onSaveFormula(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_PREDEFINEDFORMULA\") {\n        inputParam = this.onSavePreDefinedFormula(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_TESTFILE\") {\n        inputParam = this.onSaveTestFile(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\n        inputParam = this.saveContainerType(saveType, formRef);\n      } else {\n        inputParam = this.saveTestData(saveType, formRef);\n      }\n\n      if (isValidRequest) {\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", defaultInput);\n        }\n      }\n    };\n\n    this.onSavePreDefinedFormula = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const selectedParameter = this.props.masterData.selectedParameter;\n      let testformula = {\n        ntestcode: selectedParameter[\"ntestcode\"],\n        ntestparametercode: selectedParameter[\"ntestparametercode\"],\n        ndefaultstatus: transactionStatus.NO,\n        nispredefinedformula: transactionStatus.YES,\n        nstatus: transactionStatus.ACTIVE,\n        sformulaname: this.state.selectedRecord.sformulaname,\n        sformulacalculationcode: \"\",\n        sformulacalculationdetail: this.state.selectedRecord.sformulaname,\n        npredefinedformulacode: this.state.selectedRecord.npredefinedformulacode && this.state.selectedRecord.npredefinedformulacode.value\n      };\n      let selectedId = null;\n      let postParam = undefined;\n\n      if (this.props.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"TestMaster\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestcode\"\n        };\n        selectedId = selectedRecord[\"ntestparametercode\"];\n      }\n\n      const inputParam = {\n        inputData: {\n          testformula: testformula,\n          userinfo: this.props.userInfo,\n          //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n          \"isQualisLite\": parseInt(this.props.settings[71])\n        },\n        classUrl: \"testmaster\",\n        operation: \"create\",\n        methodUrl: \"TestFormula\",\n        saveType,\n        formRef,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveParameter = (saveType, formRef) => {\n      const storeData = this.props;\n      let inputData = {};\n      let customobject = null;\n      const userInfo = storeData.userInfo;\n      let postParam = undefined;\n      const selectedRecord = this.state.selectedRecord;\n      let testColumns = [{\n        \"ntestparametercode\": \"int\"\n      }, {\n        \"nparametertypecode\": \"input\"\n      }, {\n        \"nunitcode\": \"input\"\n      }, {\n        \"ndestinationunitcode\": \"input\"\n      }, {\n        \"noperatorcode\": \"int\"\n      }, {\n        \"nconversionfactor\": \"float\"\n      }, {\n        \"sparametername\": \"input\"\n      }, {\n        \"sparametersynonym\": \"string\"\n      }, {\n        \"nroundingdigits\": \"int\"\n      }, {\n        \"objPredefinedParameter\": \"customobject\"\n      }, {\n        \"ndeltachecklimitcode\": \"float\"\n      }, {\n        \"ndeltacheck\": \"int\"\n      }, {\n        \"ndeltaunitcode\": \"input\"\n      }, {\n        \"ndeltacheckframe\": \"int\"\n      }, {\n        \"nresultaccuracycode\": \"input\"\n      }];\n\n      if (storeData.operation === \"create\") {\n        inputData = {\n          \"testparameter\": {\n            nisadhocparameter: transactionStatus.NO,\n            nisvisible: transactionStatus.YES,\n            nstatus: transactionStatus.ACTIVE\n          }\n        };\n      } else {\n        inputData = {\n          \"testparameter\": {}\n        };\n        let selectedId = null;\n\n        if (storeData.operation === \"update\") {\n          // edit\n          postParam = {\n            inputListName: \"TestMaster\",\n            selectedObject: \"SelectedTest\",\n            primaryKeyField: \"ntestcode\"\n          };\n          selectedId = selectedRecord[\"ntestparametercode\"];\n        }\n      }\n\n      if (selectedRecord[\"nparametertypecode\"]) {\n        if (this.props.parameterData.npredefinedcode === transactionStatus.YES) {\n          customobject = {};\n          customobject[\"ntestparametercode\"] = selectedRecord[\"ntestparametercode\"];\n          customobject[\"ntestpredefinedcode\"] = selectedRecord[\"ntestpredefinedcode\"];\n          customobject[\"spredefinedname\"] = selectedRecord[\"spredefinedname\"].trim();\n          customobject[\"nstatus\"] = 1;\n          customobject[\"ndefaultstatus\"] = transactionStatus.YES;\n          customobject[\"ngradecode\"] = selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1; // if (selectedRecord[\"sresultparacomment\"]) {\n\n          customobject[\"spredefinedsynonym\"] = selectedRecord[\"spredefinedsynonym\"] ? selectedRecord[\"spredefinedsynonym\"].trim() : \"\"; //customobject[\"sresultparacomment\"] = selectedRecord[\"sresultparacomment\"] ? selectedRecord[\"sresultparacomment\"].trim() : \"\";\n          // }\n        }\n\n        inputData[\"userinfo\"] = userInfo; //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n\n        inputData[\"isQualisLite\"] = parseInt(this.props.settings[71]);\n        testColumns.map(item => {\n          const key = Object.keys(item)[0];\n          const value = Object.values(item)[0];\n\n          if (value === \"input\") {\n            return inputData[\"testparameter\"][key] = selectedRecord[key] ? selectedRecord[key].value ? selectedRecord[key].value : -1 : -1;\n          } else if (value === \"int\") {\n            return inputData[\"testparameter\"][key] = selectedRecord[key] ? selectedRecord[key] : 0;\n          } else if (value === \"string\") {\n            return inputData[\"testparameter\"][key] = selectedRecord[key] ? selectedRecord[key].trim() : \"\";\n          } else if (value === \"customobject\") {\n            return inputData[\"testparameter\"][key] = customobject;\n          } else if (value === \"float\") {\n            return inputData[\"testparameter\"][key] = selectedRecord[key] ? selectedRecord[key] : 0.0;\n          } else {\n            return null;\n          }\n        });\n        inputData[\"testparameter\"][\"ntestcode\"] = storeData.masterData[\"SelectedTest\"][\"ntestcode\"];\n        inputData[\"testparameter\"][\"sdisplaystatus\"] = selectedRecord[\"nparametertypecode\"].label;\n      }\n\n      const inputParam = {\n        inputData,\n        classUrl: \"testmaster\",\n        operation: storeData.operation,\n        methodUrl: \"TestParameter\",\n        saveType,\n        formRef,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveSpecification = (saveType, formRef) => {\n      const selectedRecord = this.props.selectedRecord;\n      const columns = [{\n        \"ntestparametercode\": \"int\"\n      }, {\n        \"ntestparamnumericcode\": \"int\"\n      }, {\n        \"sminb\": \"string\"\n      }, {\n        \"smina\": \"string\"\n      }, {\n        \"smaxa\": \"string\"\n      }, {\n        \"smaxb\": \"string\"\n      }, {\n        \"sminlod\": \"string\"\n      }, {\n        \"smaxlod\": \"string\"\n      }, {\n        \"sminloq\": \"string\"\n      }, {\n        \"smaxloq\": \"string\"\n      }, {\n        \"sdisregard\": \"string\"\n      }, {\n        \"sresultvalue\": \"string\"\n      }];\n      let inputData = {\n        \"testparameternumeric\": {\n          nstatus: 1\n        },\n        userinfo: this.props.userInfo,\n        //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n        \"isQualisLite\": parseInt(this.props.settings[71])\n      };\n      inputData[\"testparameternumeric\"][\"ngradecode\"] = selectedRecord.ngradecode ? selectedRecord.ngradecode.value : -1;\n      columns.map(item => {\n        const key = Object.keys(item)[0];\n        const value = Object.values(item)[0];\n\n        if (value === \"int\") {\n          return inputData[\"testparameternumeric\"][key] = selectedRecord[key] ? selectedRecord[key] : 0;\n        } else if (value === \"string\") {\n          return inputData[\"testparameternumeric\"][key] = selectedRecord[key] ? selectedRecord[key] === \"0\" ? selectedRecord[key] : selectedRecord[key].replace(/^0+/, '') : null;\n        } else {\n          return null;\n        }\n      });\n      let selectedId = null;\n      let postParam = undefined;\n\n      if (this.props.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"TestMaster\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestcode\"\n        };\n        selectedId = selectedRecord[\"ntestparametercode\"];\n      }\n\n      const inputParam = {\n        inputData,\n        classUrl: \"testmaster\",\n        operation: this.props.operation,\n        methodUrl: \"TestParameterNumeric\",\n        saveType,\n        formRef,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveClinicalSpec = (saveType, formRef) => {\n      const selectedRecord = this.props.selectedRecord;\n      const TestGroupAddSpecification = {\n        nstatus: transactionStatus.ACTIVE,\n        ntestparametercode: this.props.masterData.selectedParameter[\"ntestparametercode\"],\n        ngendercode: selectedRecord[\"ngendercode\"] ? selectedRecord[\"ngendercode\"] && selectedRecord[\"ngendercode\"].value : -1,\n        nfromage: selectedRecord[\"nfromage\"],\n        ntoage: selectedRecord[\"ntoage\"],\n        shigha: selectedRecord[\"nhigha\"] || '',\n        shighb: selectedRecord[\"nhighb\"] || '',\n        slowa: selectedRecord[\"nlowa\"] || '',\n        slowb: selectedRecord[\"nlowb\"] || '',\n        sminlod: selectedRecord[\"sminlod\"] || '',\n        smaxlod: selectedRecord[\"smaxlod\"] || '',\n        sminloq: selectedRecord[\"sminloq\"] || '',\n        smaxloq: selectedRecord[\"smaxloq\"] || '',\n        sdisregard: selectedRecord[\"sdisregard\"] || '',\n        sresultvalue: selectedRecord[\"sresultvalue\"] || '',\n        ngradecode: selectedRecord[\"ngradecode\"] && selectedRecord[\"ngradecode\"].value || -1,\n        ntestmasterclinicspeccode: selectedRecord[\"ntestmasterclinicspeccode\"],\n        nfromageperiod: selectedRecord[\"nfromageperiod\"] && selectedRecord[\"nfromageperiod\"].value || -1,\n        ntoageperiod: selectedRecord[\"ntoageperiod\"] && selectedRecord[\"ntoageperiod\"].value || -1\n      };\n      let inputData = {\n        \"TestGroupAddSpecification\": { ...TestGroupAddSpecification,\n          nstatus: 1\n        },\n        userinfo: this.props.userInfo,\n        //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n        \"isQualisLite\": parseInt(this.props.settings[71])\n      };\n      let selectedId = null;\n      let postParam = undefined;\n\n      if (this.props.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"TestMaster\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestcode\"\n        };\n        selectedId = selectedRecord[\"ntestparametercode\"];\n      }\n\n      const inputParam = {\n        inputData,\n        classUrl: \"testmaster\",\n        operation: this.props.operation,\n        methodUrl: \"TestParameterClinicalSpec\",\n        saveType,\n        formRef,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveCodedResult = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const testPredefinedParameter = {\n        spredefinedname: selectedRecord[\"spredefinedname\"].trim(),\n        ngradecode: selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1,\n        ntestparametercode: selectedRecord[\"ntestparametercode\"],\n        ntestpredefinedcode: selectedRecord[\"ntestpredefinedcode\"],\n        //sresultparacomment:selectedRecord[\"sresultparacomment\"],\n        spredefinedsynonym: selectedRecord[\"spredefinedsynonym\"],\n        spredefinedcomments: selectedRecord[\"spredefinedcomments\"],\n        nstatus: transactionStatus.ACTIVE,\n        ndefaultstatus: selectedRecord[\"ndefaultstatus\"] //transactionStatus.NO\n\n      }; //let selectedId = null;\n\n      let postParam = undefined;\n\n      if (this.props.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"TestMaster\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestcode\"\n        }; //selectedId = selectedRecord[\"ntestparametercode\"];               \n      }\n\n      const inputParam = {\n        inputData: {\n          testpredefinedparameter: testPredefinedParameter,\n          userinfo: this.props.userInfo,\n          //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n          \"isQualisLite\": parseInt(this.props.settings[71])\n        },\n        classUrl: \"testmaster\",\n        operation: this.props.operation,\n        methodUrl: \"TestPredefinedParameter\",\n        saveType,\n        formRef,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveFormula = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const formulafield = [\"sformulaname\", \"sformulacalculationcode\", \"sformulacalculationdetail\"];\n      const selectedParameter = this.props.masterData.selectedParameter;\n      let testformula = {\n        ntestcode: selectedParameter[\"ntestcode\"],\n        ntestparametercode: selectedParameter[\"ntestparametercode\"],\n        ndefaultstatus: transactionStatus.NO,\n        nstatus: transactionStatus.ACTIVE,\n        nispredefinedformula: transactionStatus.NO,\n        npredefinedformulacode: transactionStatus.NA\n      };\n      formulafield.map(field => {\n        return testformula[field] = selectedRecord[field].trim();\n      });\n      let selectedId = null;\n      let postParam = undefined;\n\n      if (this.props.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"TestMaster\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestcode\"\n        };\n        selectedId = selectedRecord[\"ntestparametercode\"];\n      }\n\n      const inputParam = {\n        inputData: {\n          testformula: testformula,\n          userinfo: this.props.userInfo,\n          //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n          \"isQualisLite\": parseInt(this.props.settings[71])\n        },\n        classUrl: \"testmaster\",\n        operation: \"create\",\n        methodUrl: \"TestFormula\",\n        saveType,\n        formRef,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.clearFormula = () => {\n      const selectedRecord = this.state.selectedRecord;\n      selectedRecord[\"sformulacalculationcode\"] = \"\";\n      selectedRecord[\"sformulacalculationdetail\"] = \"\";\n      selectedRecord[\"userinput\"] = \"\";\n      this.setState({\n        fieldFlag: true,\n        operatorFlag: false,\n        functionFlag: true,\n        selectedRecord,\n        query: \"\",\n        result: \"\",\n        openValidate: false,\n        sfunctionsyntax: \"\"\n      });\n    };\n\n    this.onUserInputs = event => {\n      const value = event.target.value.replace(/^0+/, '');\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (event.keyCode === 13) {\n        if (this.state.fieldFlag) {\n          const sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\n          const sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\n          selectedRecord[\"sformulacalculationcode\"] = `${sformulacalculationcode}$V${value}V$`;\n          selectedRecord[\"sformulacalculationdetail\"] = `${sformulacalculationdetail} ${value}`;\n          selectedRecord[event.target.name] = \"\";\n          this.setState({\n            fieldFlag: false,\n            functionFlag: false,\n            operatorFlag: true,\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.getSyntax = event => {\n      this.setState({\n        sfunctionsyntax: event.dataItem.sfunctionsyntax\n      });\n    };\n\n    this.onSaveTestFile = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let testFileArray = [];\n      let testFile = {\n        ntestcode: this.props.masterData.SelectedTest.ntestcode,\n        ntestfilecode: selectedRecord.ntestfilecode ? selectedRecord.ntestfilecode : 0,\n        nstatus: transactionStatus.ACTIVE,\n        nattachmenttypecode,\n        //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n        nqualislite: parseInt(this.props.settings[71]),\n        ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, testFile);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const ssystemfilename = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !== undefined ? selectedRecord.ssystemfilename.split('.') : create_UUID();\n            const filesystemfileext = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !== undefined ? file.name.split('.')[ssystemfilename.length - 1] : fileExtension;\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntestfilecode && selectedRecord.ntestfilecode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = Lims_JSON_stringify(file.name, false);\n            tempData[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"), false);\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            testFileArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          testFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename.trim(), false);\n          testFile[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"), false);\n          testFile[\"nlinkcode\"] = transactionStatus.NA;\n          testFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          testFile[\"nfilesize\"] = selectedRecord.nfilesize; //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n\n          testFile[\"nqualislite\"] = parseInt(this.props.settings[71]);\n          testFileArray.push(testFile);\n        }\n      } else {\n        testFile[\"sfilename\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkfilename ? selectedRecord.slinkfilename.trim() : \"\"), false);\n        testFile[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\"), false);\n        testFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        testFile[\"ssystemfilename\"] = \"\";\n        testFile[\"nfilesize\"] = 0; //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n\n        testFile[\"nqualislite\"] = parseInt(this.props.settings[71]);\n        testFileArray.push(testFile);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"testfile\", JSON.stringify(testFileArray)); //  formData.append(\"userinfo\", JSON.stringify(this.props.userInfo));\n\n      let selectedId = null;\n      let postParam = undefined;\n\n      if (this.props.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"TestMaster\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestcode\"\n        };\n        selectedId = selectedRecord[\"ntestfilecode\"];\n      }\n\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sformname: Lims_JSON_stringify(this.props.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.userInfo.smodulename),\n            //ALPD-1628(while file saving,audit trail is not captured respective language)\n            slanguagename: Lims_JSON_stringify(this.props.userInfo.slanguagename)\n          }\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.operation,\n        classUrl: \"testmaster\",\n        saveType,\n        formRef,\n        methodUrl: \"TestFile\",\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onDropTestFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    this.ConfirmDelete = (item, operation, ncontrolCode, methodUrl, modalName) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.props.deleteAction(item, operation, ncontrolCode, methodUrl, modalName));\n    };\n\n    const _dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      selectedRecord: {},\n      fieldFlag: true,\n      operatorFlag: false,\n      functionFlag: true,\n      sectionDataState: _dataState,\n      methodDataState: _dataState,\n      instrumentCatDataState: _dataState,\n      containerTypeDataState: _dataState,\n      testPackageDataState: _dataState,\n      //  techniqueDataState: dataState,\n      formulaScreenName: \"\",\n      query: \"\",\n      result: \"\"\n    };\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  render() {\n    console.log(\"render in test view:\", this.props.Login);\n    const {\n      SelectedTest\n    } = this.props.masterData;\n\n    if (this.props.openChildModal || this.state.openValidate) {\n      this.mandatoryFields = this.findMandatoryFields(this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.formulaScreenName : this.props.screenName, this.state.selectedRecord, this.state.formulaScreenName);\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, SelectedTest && /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 34\n      }\n    }), this.props.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.openValidate : this.props.openChildModal,\n      size: this.props.screenName === \"IDS_FORMULA\" ? 'xl' : 'lg',\n      closeModal: this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.hideValidateFormula : this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.formulaScreenName : this.props.screenName,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.calculateFormula : this.onSaveClick,\n      showCalculate: this.state.showCalculate,\n      showSaveContinue: this.props.showSaveContinue,\n      selectedRecord: this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.selectedRecord['formulainput'] : this.state.selectedRecord || {},\n      mandatoryFields: this.mandatoryFields,\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_PARAMETER\" ? /*#__PURE__*/React.createElement(AddParameter, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        onComboChange: this.onComboChange,\n        parameterData: this.props.parameterData,\n        userInfo: this.props.userInfo,\n        onFocus: this.props.onFocus,\n        DestinationUnit: this.props.DestinationUnit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 33\n        }\n      }) : this.props.screenName === \"IDS_CODEDRESULT\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(AddCodedResult, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        parameterData: this.props.parameterData,\n        addSubCodedResult: this.props.addSubCodedResult,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo //selectedsubcodedresult={this.props.selectedsubcodedresult||[]}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 41\n        }\n      })) : this.props.screenName === \"IDS_SUBCODEDRESULT\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(AddSubCodedResult, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        parameterData: this.props.parameterData,\n        addSubCodedResult: this.props.addSubCodedResult,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 41\n        }\n      })) : this.props.screenName === \"IDS_SPECIFICATION\" ? /*#__PURE__*/React.createElement(AddSpecification, {\n        selectedRecord: this.props.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        grade: this.props.grade,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 41\n        }\n      }) : this.props.screenName === \"IDS_SECTION\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(AddTestSection, {\n        selectedRecord: this.state.selectedRecord || {},\n        section: this.props.otherTestData.section,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        isMulti: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 53\n        }\n      }))) : this.props.screenName === \"IDS_METHOD\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(AddTestMethod, {\n        selectedRecord: this.state.selectedRecord || {},\n        method: this.props.otherTestData.method,\n        onComboChange: this.onComboChange,\n        isMulti: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 57\n        }\n      }))) : this.state.formulaScreenName === \"\" && this.props.screenName === \"IDS_FORMULA\" ? /*#__PURE__*/React.createElement(AddFormula, {\n        selectedRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        onFormulaDrop: this.onFormulaDrop.bind(this),\n        validateFormula: () => this.validateFormula(this.props.masterData.selectedParameter, this.state.selectedRecord, this.props.formulaData),\n        clearFormula: this.clearFormula,\n        onUserInputs: this.onUserInputs,\n        operators: this.props.formulaData.operators,\n        functions: this.props.formulaData.functions,\n        testCategory: this.props.formulaData.testCategory,\n        testMaster: this.props.formulaData.testMaster,\n        dynamicFormulaFields: this.props.formulaData.dynamicFormulaFields,\n        result: this.state.result ? this.state.result : \"\",\n        query: this.state.query ? this.state.query : \"\",\n        getSyntax: this.getSyntax,\n        sfunctionsyntax: this.state.sfunctionsyntax,\n        onFocus: this.props.onFocus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 53\n        }\n      }) : this.props.screenName === \"IDS_PREDEFINEDFORMULA\" ? /*#__PURE__*/React.createElement(AddPredefinedUserFormula, {\n        selectedRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        preDefinedFormula: this.props.preDefinedFormula,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 53\n        }\n      }) : this.props.screenName === \"IDS_INSTRUMENTCATEGORY\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(AddTestInstrumentCategory, {\n        selectedRecord: this.state.selectedRecord || {},\n        instrumentcategory: this.props.otherTestData.instrumentcategory,\n        onComboChange: this.onComboChange,\n        isMulti: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 65\n        }\n      }))) : this.props.screenName === \"IDS_PACKAGE\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(AddTestPackageTest, {\n        selectedRecord: this.state.selectedRecord || {},\n        package: this.props.otherTestData.package,\n        onComboChange: this.onComboChange,\n        isMulti: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 69\n        }\n      }))) // : this.props.screenName === \"IDS_TECHNIQUE\" ?\n      //     <Row>\n      //         <Col md=\"12\">\n      //             <AddTestTechnique\n      //                 selectedRecord={this.state.selectedRecord || {}}\n      //                 technique={this.props.otherTestData.technique}\n      //                 onComboChange={this.onComboChange}\n      //                 onInputOnChange={this.onInputOnChange}\n      //                 isMulti={true}\n      //             />\n      //         </Col>\n      //     </Row>\n      : this.props.screenName === \"IDS_CONTAINERTYPE\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(AddTestContainerType, {\n        selectedRecord: this.state.selectedRecord || {},\n        containertype: this.props.otherTestData.containertype,\n        unit: this.props.otherTestData.unit,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        isMulti: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 73\n        }\n      })) : this.props.screenName === \"IDS_TESTFILE\" ? /*#__PURE__*/React.createElement(AddFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onDrop: this.onDropTestFile,\n        onDropAccepted: this.onDropAccepted,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        onComboChange: this.onComboChange,\n        linkMaster: this.props.linkMaster,\n        editFiles: this.props.editFiles,\n        maxSize: 20 // maxFiles={this.props.operation === \"update\" ? 1 : 3}\n        // multiple={this.props.operation === \"update\" ? false : true}\n        ,\n        maxFiles: 1,\n        multiple: false,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TESTFILE\"\n        }),\n        name: \"testfilename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 73\n        }\n      }) : this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? /*#__PURE__*/React.createElement(ValidateFormula, {\n        DynamicFormulaFields: this.state.DynamicFields,\n        selectedRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 77\n        }\n      }) : this.props.screenName === \"IDS_CLINICALSPEC\" ? /*#__PURE__*/React.createElement(AddTestGroupNumericSpecification //gradenew={this.props.testGroupInputData.grade||[]}\n      , {\n        onInputOnChange: this.onInputOnChange,\n        parameterData: this.props.parameterData,\n        selectedRecord: this.state.selectedRecord,\n        onComboChange: this.onComboChange,\n        onNumericInputChange: this.onNumericInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 77\n        }\n      }) // : this.props.screenName ===\"IDS_REPORTINFOTEST\" ?\n      //     <TestReportInfo\n      //         selectedRecord={this.state.selectedRecord || {}}\n      //     />\n      : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  findMandatoryFields(screenName, selectedRecord, optional) {\n    let mandyFields = [];\n\n    if (screenName === \"IDS_SECTION\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_SECTION\",\n        \"dataField\": \"availableData\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    } else if (screenName === \"IDS_TECHNIQUE\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_TECHNIQUE\",\n        \"dataField\": \"availableData\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    } else if (screenName === \"IDS_METHOD\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_METHOD\",\n        \"dataField\": \"availableData\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    } else if (screenName === \"IDS_INSTRUMENTCATEGORY\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n        \"dataField\": \"availableData\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    } else if (screenName === \"IDS_PACKAGE\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_TESTPACKAGE\",\n        \"dataField\": \"availableData\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    } else if (screenName === \"IDS_FORMULA\" && optional === \"\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_FORMULANAME\",\n        \"dataField\": \"sformulaname\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_FORMULA\",\n        \"dataField\": \"sformulacalculationdetail\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n    } else if (screenName === \"IDS_PREDEFINEDFORMULA\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_FORMULANAME\",\n        \"dataField\": \"sformulaname\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_PREDEFINEDFORMULA\",\n        \"dataField\": \"npredefinedformulacode\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n    } else if (screenName === \"IDS_PARAMETER\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_PARAMETERNAME\",\n        \"dataField\": \"sparametername\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_PARAMETERSYNONYM\",\n        \"dataField\": \"sparametersynonym\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_PARAMETERTYPE\",\n        \"dataField\": \"nparametertypecode\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n\n      if (selectedRecord && Object.values(selectedRecord).length > 0 && selectedRecord[\"nparametertypecode\"]) {\n        if (selectedRecord[\"nparametertypecode\"].value === parameterType.NUMERIC) {\n          mandyFields.push({\n            \"idsName\": \"IDS_ROUNDINGDIGITS\",\n            \"dataField\": \"nroundingdigits\",\n            \"mandatory\": true,\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, {\n            \"idsName\": \"IDS_UNIT\",\n            \"dataField\": \"nunitcode\",\n            \"mandatory\": true,\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n        } else if (selectedRecord[\"nparametertypecode\"].value === parameterType.PREDEFINED) {\n          mandyFields.push({\n            \"idsName\": \"IDS_CODEDRESULT\",\n            \"dataField\": \"spredefinedname\",\n            \"mandatory\": true,\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, {\n            \"idsName\": \"IDS_ACTUALRESULT\",\n            \"dataField\": \"ngradecode\",\n            \"mandatory\": true,\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }, {\n            \"idsName\": \"IDS_CODEDRESULTSYNONYM\",\n            \"dataField\": \"spredefinedsynonym\",\n            \"width\": \"200px\",\n            \"mandatory\": true,\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          });\n        }\n      }\n    } else if (screenName === \"IDS_CODEDRESULT\") {\n      mandyFields.push({\n        \"idsName\": \"IDS_CODEDRESULT\",\n        \"dataField\": \"spredefinedname\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_ACTUALRESULT\",\n        \"dataField\": \"ngradecode\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CODEDRESULTSYNONYM\",\n        \"dataField\": \"spredefinedsynonym\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      });\n    } else if (screenName === \"IDS_VALIDATEFORMULA\") {\n      mandyFields = this.state.validateFormulaMandyFields;\n    } else if (screenName === \"IDS_TESTFILE\") {\n      if (this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK) {\n        mandyFields = [{\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"slinkfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }, {\n          \"idsName\": \"IDS_LINKNAME\",\n          \"dataField\": \"nlinkcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else {\n        // if (this.props.operation !== 'update') {\n        mandyFields = [{\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }]; // }\n      }\n    } else if (screenName === \"IDS_CONTAINERTYPE\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_CONTAINERTYPE\",\n        \"dataField\": \"ncontainertypecode\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, // { \"idsName\": \"IDS_QUANTITY\", \"dataField\": \"nquantity\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\n      this.state.selectedRecord.unitMandatory === true ? {\n        \"idsName\": \"IDS_UNIT\",\n        \"dataField\": \"nunitcode\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      } : {}];\n    } else if (screenName === \"IDS_CLINICALSPEC\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_GENDER\",\n        \"dataField\": \"ngendercode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_FROMAGE\",\n        \"dataField\": \"nfromage\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }, {\n        \"idsName\": \"IDS_TOAGE\",\n        \"dataField\": \"ntoage\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }];\n    } else {\n      return [];\n    }\n\n    let finalMandyFields = [];\n    mandyFields.forEach(item => item.mandatory === true && finalMandyFields.push(item));\n    return finalMandyFields;\n  }\n\n  calculateFormulaFunction(inputParam) {\n    rsapi.post(\"/testmaster/calculateFormula\", { ...inputParam\n    }).then(response => {\n      this.setState({\n        openValidate: false,\n        query: response.data[\"Query\"],\n        result: response.data[\"Result\"],\n        showCalculate: false,\n        formulaScreenName: \"\"\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        //toast.warn(error.response.data);\n        toast.warn(error.response.data[\"Result\"]);\n      }\n    });\n  }\n\n  saveContainerType(saveType, formRef) {\n    let inputData = {};\n    let postParam = undefined;\n    let methodUrl = \"TestContainerType\";\n\n    if (this.props.operation == \"create\") {\n      if (this.state.selectedRecord.nquantity) {\n        this.state.selectedRecord['ncontainertypecode']['item']['nquantity'] = Number.parseFloat(this.state.selectedRecord.nquantity).toFixed(3);\n      } //this.state.selectedRecord['ncontainertypecode']['item']['noutsourcecode'] = parseInt(this.state.selectedRecord.noutsourcecode);\n\n\n      if (this.state.selectedRecord.nunitcode) {\n        this.state.selectedRecord['ncontainertypecode']['item']['nunitcode'] = parseInt(this.state.selectedRecord.nunitcode.value);\n      } else {\n        this.state.selectedRecord['ncontainertypecode']['item']['nunitcode'] = -1;\n      }\n\n      inputData = {\n        [methodUrl.toLocaleLowerCase()]: this.state.selectedRecord.ncontainertypecode.item,\n        ntestcontainertypecode: this.state.selectedRecord.ntestcontainertypecode,\n        ntestcode: this.state.selectedRecord.ntestcode,\n        userinfo: this.props.userInfo,\n        testcode: this.props.masterData.SelectedTest.ntestcode,\n        //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n        \"isQualisLite\": parseInt(this.props.settings[71])\n      };\n    } else {\n      // edit\n      postParam = {\n        inputListName: \"TestMaster\",\n        selectedObject: \"SelectedTest\",\n        primaryKeyField: \"ntestcode\"\n      };\n      let unitCode = this.state.selectedRecord.nquantity === 0 || this.state.selectedRecord.nquantity === undefined ? -1 : this.state.selectedRecord.nunitcode.value;\n      inputData = {\n        ntestcontainertypecode: this.state.selectedRecord.ntestcontainertypecode,\n        ntestcode: this.state.selectedRecord.ntestcode,\n        ncontainertypecode: this.state.selectedRecord.ncontainertypecode.value,\n        // nunitcode: this.state.selectedRecord.nunitcode.value,\n        nunitcode: unitCode,\n        nquantity: parseInt(Number.parseFloat(this.state.selectedRecord.nquantity).toFixed(3)),\n        //noutsourcecode:this.state.selectedRecord.noutsourcecode,\n        userinfo: this.props.userInfo,\n        testcode: this.props.masterData.SelectedTest.ntestcode,\n        //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n        \"isQualisLite\": parseInt(this.props.settings[71])\n      };\n    }\n\n    const inputParam = {\n      inputData: inputData,\n      classUrl: \"testmaster\",\n      operation: this.props.operation,\n      methodUrl: methodUrl,\n      saveType,\n      formRef,\n      postParam\n    };\n    return inputParam;\n  }\n\n  saveTestData(saveType, formRef) {\n    let availableData = [];\n    this.state.selectedRecord.availableData.map(data => {\n      return availableData.push(data.item);\n    });\n    let methodUrl = \"\";\n\n    if (this.props.screenName === \"IDS_SECTION\") {\n      //Test Section\n      methodUrl = \"TestSection\";\n    } else if (this.props.screenName === \"IDS_METHOD\") {\n      //Test Method\n      methodUrl = \"TestMethod\";\n    } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\n      //Test Instrument Category\n      methodUrl = \"TestInstrumentCategory\";\n    } else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\n      //Test Instrument Category\n      methodUrl = \"TestContainerType\";\n    } else if (this.props.screenName === \"IDS_PACKAGE\") {\n      //Test Package\n      methodUrl = \"Testpackage\";\n    } else if (this.props.screenName === \"IDS_TECHNIQUE\") {\n      //Test Technique\n      methodUrl = \"TestTechnique\";\n    } // let selectedId = null;\n\n\n    let postParam = undefined;\n\n    if (this.props.operation === \"update\") {\n      // edit\n      postParam = {\n        inputListName: \"TestMaster\",\n        selectedObject: \"SelectedTest\",\n        primaryKeyField: \"ntestcode\"\n      }; //  selectedId = selectedRecord[\"ntestparametercode\"];               \n    }\n\n    const inputParam = {\n      inputData: {\n        [methodUrl.toLocaleLowerCase()]: availableData,\n        userinfo: this.props.userInfo,\n        //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n        \"isQualisLite\": parseInt(this.props.settings[71])\n      },\n      classUrl: \"testmaster\",\n      operation: \"create\",\n      methodUrl: methodUrl,\n      saveType,\n      formRef,\n      postParam\n    };\n    return inputParam;\n  }\n\n  onFormulaDrop(data) {\n    let selectedRecord = this.state.selectedRecord;\n    let formulaName = \"\";\n    let formulaCalculationCode = \"\";\n    let fieldFlag = this.state.fieldFlag;\n    let functionFlag = this.state.functionFlag;\n    let operatorFlag = this.state.operatorFlag;\n    let sfunctionsyntax = this.state.sfunctionsyntax;\n    let isDropped = false;\n\n    if (data['testfields'] !== \"\") {\n      const testfields = JSON.parse(data['testfields']);\n\n      if (this.state.fieldFlag) {\n        let sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\n        let sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\n        const sparametername = testfields.sparametername;\n        const ntestparametercode = testfields.ntestparametercode;\n\n        if (sparametername !== \"Parameter-Field\" && sparametername !== \"Formula-Field\" && sparametername !== \"Dynamic-Field\") {\n          if (testfields.isformula === 1) {\n            formulaName = `${sformulacalculationdetail} (${sparametername}) `;\n            formulaCalculationCode = `${sformulacalculationcode}$O20O$${ntestparametercode}$O18O$`;\n          } else {\n            formulaName = `${sformulacalculationdetail} ${sparametername}`;\n            formulaCalculationCode = `${sformulacalculationcode}$P${ntestparametercode}P$`;\n          }\n        } else if (sparametername !== \"Formula-Field\") {\n          formulaName = `${sformulacalculationdetail} ${testfields.stestname}`;\n          formulaCalculationCode = `${sformulacalculationcode}$D${ntestparametercode}D$`;\n        } else {\n          formulaName = `${sformulacalculationdetail} ${testfields.stestname}`;\n          formulaCalculationCode = `${sformulacalculationcode}${testfields.sformulacalculationcode}`;\n        }\n\n        fieldFlag = false;\n        functionFlag = false;\n        operatorFlag = true;\n        isDropped = true;\n      }\n    } else if (data['operatorfields'] !== \"\") {\n      const operatorfields = JSON.parse(data['operatorfields']);\n      const noperatorcode = operatorfields.noperatorcode;\n      const sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\n      const sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\n\n      if (this.state.operatorFlag) {\n        formulaName = `${sformulacalculationdetail} ${operatorfields.soperator}`;\n        formulaCalculationCode = `${sformulacalculationcode}$O${noperatorcode}O$`;\n\n        if (noperatorcode === operators.OPENPARENTHESIS) {\n          fieldFlag = true;\n          functionFlag = true;\n          operatorFlag = false;\n        } else if (noperatorcode === operators.CLOSEPARENTHESIS) {\n          fieldFlag = false;\n          functionFlag = false;\n          operatorFlag = true;\n        } else {\n          fieldFlag = true;\n          functionFlag = true;\n          operatorFlag = false;\n        }\n\n        isDropped = true;\n      } else if (noperatorcode === operators.OPENPARENTHESIS) {\n        formulaName = `${sformulacalculationdetail} ${operatorfields.soperator}`;\n        formulaCalculationCode = `${sformulacalculationcode}$O${noperatorcode}O$`;\n        fieldFlag = true;\n        functionFlag = true;\n        operatorFlag = false;\n        isDropped = true;\n      } else if (noperatorcode === operators.CLOSEPARENTHESIS) {\n        formulaName = `${sformulacalculationdetail} ${operatorfields.soperator}`;\n        formulaCalculationCode = `${sformulacalculationcode}$O${noperatorcode}O$`;\n        fieldFlag = false;\n        functionFlag = false;\n        operatorFlag = true;\n        isDropped = true;\n      }\n    } else if (data['functionfields'] !== \"\") {\n      if (this.state.functionFlag) {\n        const functionfields = JSON.parse(data['functionfields']);\n        const sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\n        const sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\n        formulaName = `${sformulacalculationdetail}${functionfields.sfunctionname}(`;\n        formulaCalculationCode = `${sformulacalculationcode}$F${functionfields.nfunctioncode}F$$O20O$`;\n        fieldFlag = true;\n        functionFlag = false;\n        operatorFlag = false;\n        sfunctionsyntax = functionfields.sfunctionsyntax;\n        isDropped = true;\n      }\n    }\n\n    if (isDropped) {\n      const sliceFormulaName = formulaName.slice(0, 512);\n\n      if (sliceFormulaName.length <= 512) {\n        selectedRecord[\"sformulacalculationcode\"] = formulaCalculationCode;\n        selectedRecord[\"sformulacalculationdetail\"] = sliceFormulaName;\n        this.setState({\n          fieldFlag,\n          functionFlag,\n          operatorFlag,\n          sfunctionsyntax,\n          selectedRecord\n        });\n      } else {\n        selectedRecord[\"sformulacalculationdetail\"] = sliceFormulaName;\n        this.setState({\n          fieldFlag,\n          functionFlag,\n          operatorFlag,\n          sfunctionsyntax,\n          selectedRecord\n        });\n      }\n    }\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.isFormulaOpen) {\n      this.setState({\n        fieldFlag: true,\n        operatorFlag: false,\n        functionFlag: true,\n        query: \"\",\n        result: \"\"\n      });\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          isFormulaOpen: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n\n    if (this.props.masterData !== previousProps.masterData) {\n      let {\n        testFileDataState,\n        sectionDataState,\n        methodDataState,\n        instrumentCatDataState,\n        containerTypeDataState,\n        testPackageDataState,\n        testClinicalSpecDataState\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        if (this.props.screenName === \"IDS_SECTION\") {\n          sectionDataState = {\n            skip: 0,\n            take: 5\n          };\n        } else if (this.props.screenName === \"IDS_METHOD\") {\n          methodDataState = {\n            skip: 0,\n            take: 5\n          };\n        } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\n          instrumentCatDataState = {\n            skip: 0,\n            take: 5\n          };\n        } else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\n          containerTypeDataState = {\n            skip: 0,\n            take: 5\n          };\n        } else if (this.props.screenName === \"IDS_TESTPACKAGE\") {\n          testPackageDataState = {\n            skip: 0,\n            take: 5\n          };\n        } else if (this.props.screenName === \"IDS_TESTFILE\" || this.props.screenName === \"IDS_FILE\") {\n          testFileDataState = {\n            skip: 0,\n            take: 5\n          };\n        } else {\n          sectionDataState = {\n            skip: 0,\n            take: 5\n          };\n          methodDataState = {\n            skip: 0,\n            take: 5\n          };\n          instrumentCatDataState = {\n            skip: 0,\n            take: 5\n          };\n          containerTypeDataState = {\n            skip: 0,\n            take: 5\n          };\n          testPackageDataState = {\n            skip: 0,\n            take: 5\n          };\n          testFileDataState = {\n            skip: 0,\n            take: 5\n          }; // testClinicalSpecDataState = { skip: 0, take: 5 ,group: [{ field: 'sgendername' }]};\n        }\n      } else {\n        if (this.props.screenName === \"IDS_SECTION\") {\n          sectionDataState = this.props.dataState;\n        } else if (this.props.screenName === \"IDS_METHOD\") {\n          methodDataState = this.props.dataState;\n        } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\n          instrumentCatDataState = this.props.dataState;\n        } else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\n          containerTypeDataState = this.props.dataState;\n        } else if (this.props.screenName === \"IDS_TESTPACKAGE\") {\n          testPackageDataState = this.props.dataState;\n        } else if (this.props.screenName === \"IDS_TESTFILE\" || this.props.screenName === \"IDS_FILE\") {\n          testFileDataState = {\n            skip: 0,\n            take: 5\n          };\n        } else {\n          sectionDataState = {\n            skip: 0,\n            take: 5\n          };\n          methodDataState = {\n            skip: 0,\n            take: 5\n          };\n          instrumentCatDataState = {\n            skip: 0,\n            take: 5\n          };\n          containerTypeDataState = {\n            skip: 0,\n            take: 5\n          };\n          testPackageDataState = {\n            skip: 0,\n            take: 5\n          };\n          testFileDataState = {\n            skip: 0,\n            take: 5\n          };\n        }\n      } // let skipcount=this.props.masterData[\"TestMethod\"].length>0?(this.props.masterData[\"TestMethod\"].length-this.props.dataState.take):\n      // this.props.dataState.skip;\n      // if (this.props.screenName === \"IDS_METHOD\") {\n      //     methodDataState = { skip: skipcount, take: 5 };\n      // } \n      // let dataResultMethod=process(this.props.masterData[\"TestMethod\"], this.props.dataState );\n      // let { dataState } = this.state;\n      // if (this.props.dataState === undefined) {\n      //     dataState = { skip:0,take:this.state.dataState.take }\n      // }\n      // if(dataResultMethod){\n      //     if(dataResultMethod >=5){\n      //        let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\n      //        this.state.dataState.skip\n      //         methodDataState={skip:skipcount,take:this.state.dataState.take}\n      //     }\n      // }\n      // dataResult={process(this.props.masterData[\"TestSection\"], \n      //     (this.props.screenName === undefined || this.props.screenName === \"IDS_SECTION\") ? \n      //     this.state.sectionDataState : { skip: 0, take: 10 })}\n      //     dataResult: process(this.props.Login.masterData, this.state.dataState),\n      // this.setState({\n      //     data: this.props.Login.masterData, \n      //     dataResult: process(this.props.Login.masterData, dataState),\n      //     dataState\n      // });\n      //     // Maintain pagination after delete\n      // const totalRecords = this.props.masterData[\"TestMethod\"].length;\n      // const currentPageRecords = this.props.dataState.take;\n      // const currentSkip = this.props.dataState.skip;\n      // // If there are fewer records in the current page (because of a deletion), adjust skip\n      // if (totalRecords % currentPageRecords === 0 && currentSkip > 0) {\n      //     this.setState({\n      //         methodDataState: { ...methodDataState, skip: currentSkip - currentPageRecords }\n      //     });\n      // }\n\n\n      this.setState({\n        testFileDataState,\n        sectionDataState,\n        methodDataState,\n        instrumentCatDataState,\n        containerTypeDataState,\n        testPackageDataState,\n        testClinicalSpecDataState\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(TestView);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/testmanagement/TestView.jsx"],"names":["React","Component","toast","injectIntl","rsapi","process","Col","Row","SlideOutModal","AddSpecification","AddCodedResult","AddParameter","DEFAULT_RETURN","showEsign","create_UUID","onDropAttachFileList","deleteAttachmentDropZone","Lims_JSON_stringify","replaceBackSlash","Esign","AddTestSection","AddTestMethod","AddTestInstrumentCategory","AddFormula","ValidateFormula","AddFile","parameterType","transactionStatus","operators","attachmentType","FORMULAFIELDTYPE","formCode","CustomTab","TestSectionTab","TestMethodTab","TestInstrumentCategoryTab","TestFileTab","AddTestContainerType","TestContainerTypeTab","ParameterTab","ConfirmMessage","TestPackageTab","AddTestPackageTest","AddSubCodedResult","AddTestGroupNumericSpecification","AddPredefinedUserFormula","TestView","constructor","props","deleteAttachment","event","file","fieldName","selectedRecord","state","setState","actionType","onTabChange","tabProps","screenName","updateInfo","typeName","data","updateStore","tabDetail","tabMap","Map","set","controlMap","userRoleControlRights","masterData","TestParameter","userInfo","getTestDetails","inputParam","addParameter","deleteAction","ConfirmDelete","addCodedResult","addSubCodedResult","addFormula","openPredefinedModal","onSwitchChange","addParameterSpecification","addClinicalSpecification","grade","dataStateChange","clinicalspecDataState","EditSpecDetails","DeleteSpecDetails","undefined","sectionDataState","skip","take","dataState","SelectedTest","deleteRecord","defaultRecord","getAvailableData","TestSection","methodDataState","TestMethod","instrumentCatDataState","TestInstrumentCategory","testFileDataState","TestFile","addTestFile","viewTestFile","settings","hideQualisForms","findIndex","item","nformcode","TESTPACKAGE","testPackageDataState","TestPackage","containerTypeDataState","Containertype","getActiveTestContainerTypeById","addContainerType","intl","filedata","inputData","testfile","userinfo","classUrl","operation","methodUrl","viewAttachment","viewdetails","ncontrolCode","deleteParam","dataResultRecord","skipDataRecords","selected","length","skipcount","toLowerCase","slanguagename","parseInt","esignRights","loadEsign","screenData","openChildModal","crudMaster","defaultParam","dataItem","postParam","inputListName","selectedObject","primaryKeyField","key","defaultTestFormulaId","hideValidateFormula","openValidate","showCalculate","formulaScreenName","validateFormulaMandyFields","validateFormula","testData","sformulacalculationcode","includes","post","ntestcode","then","response","map","index","DynamicFields","dynamicField","catch","error","message","dynamicformulafields","calculateFormulaFunction","info","formatMessage","id","calculateFormula","Object","keys","keyname","closeModal","onComboChange","comboData","caseNo","value","getUnitConversion","nunitcode","getConversionOperator","ndestinationunitcode","parameterData","needUnit","needRoundingDigit","needCodedResult","needActualResult","npredefinedcode","defaultUnit","defaultGrade","parameterInfo","formulaChangeFunction","ntestcategorycode","nFlag","formulaData","onEsignInputOnChange","target","type","name","checked","onInputOnChange","optional","YES","NO","inputValue","test","ndynamicformulafieldcode","INTEGER","sdescription","indexOf","replace","sparameter","svalues","inputValues","inputvalues","gradenew","onNumericInputChange","secondaryFieldName","console","log","values","onSaveClick","saveType","formRef","defaultInput","isValidRequest","onSaveParameter","nparametertypecode","onSaveCodedResult","onSaveSpecification","warn","onSaveClinicalSpec","onSaveFormula","onSavePreDefinedFormula","onSaveTestFile","saveContainerType","saveTestData","selectedParameter","testformula","ntestparametercode","ndefaultstatus","nispredefinedformula","nstatus","ACTIVE","sformulaname","sformulacalculationdetail","npredefinedformulacode","selectedId","storeData","customobject","testColumns","nisadhocparameter","nisvisible","trim","label","columns","ngradecode","TestGroupAddSpecification","ngendercode","nfromage","ntoage","shigha","shighb","slowa","slowb","sminlod","smaxlod","sminloq","smaxloq","sdisregard","sresultvalue","ntestmasterclinicspeccode","nfromageperiod","ntoageperiod","testPredefinedParameter","spredefinedname","ntestpredefinedcode","spredefinedsynonym","spredefinedcomments","testpredefinedparameter","formulafield","NA","field","clearFormula","fieldFlag","operatorFlag","functionFlag","query","result","sfunctionsyntax","onUserInputs","keyCode","getSyntax","acceptedFiles","sfilename","nattachmenttypecode","isFileEdited","testFileArray","testFile","ntestfilecode","nqualislite","LINK","formData","FormData","FTP","Array","isArray","forEach","tempData","assign","splittedFileName","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","size","append","push","nfilesize","slinkfilename","slinkdescription","nlinkcode","JSON","stringify","sformname","smodulename","isFileupload","onDropTestFile","attachedFiles","maxSize","validateEsign","sreason","nreasoncode","spredefinedreason","password","validateEsignCredential","modalName","confirmMessage","confirm","render","Login","mandatoryFields","findMandatoryFields","showSaveContinue","onFocus","DestinationUnit","otherTestData","section","method","onFormulaDrop","bind","functions","testCategory","testMaster","dynamicFormulaFields","preDefinedFormula","instrumentcategory","package","containertype","unit","onDropAccepted","linkMaster","editFiles","mandyFields","NUMERIC","PREDEFINED","unitMandatory","finalMandyFields","mandatory","status","nquantity","Number","parseFloat","toFixed","toLocaleLowerCase","ncontainertypecode","ntestcontainertypecode","testcode","unitCode","availableData","formulaName","formulaCalculationCode","isDropped","testfields","parse","sparametername","isformula","stestname","operatorfields","noperatorcode","soperator","OPENPARENTHESIS","CLOSEPARENTHESIS","functionfields","sfunctionname","nfunctioncode","sliceFormulaName","slice","componentDidUpdate","previousProps","isFormulaOpen","testClinicalSpecDataState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl } from 'react-intl';\r\nimport rsapi from '../../rsapi';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport '../../assets/styles/lims-global-theme.css';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddCodedResult from './AddCodedResult';\r\nimport AddParameter from './AddParameter';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, create_UUID, onDropAttachFileList, deleteAttachmentDropZone, Lims_JSON_stringify,replaceBackSlash } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddTestSection from './AddTestSection';\r\nimport AddTestMethod from './AddTestMethod';\r\nimport AddTestInstrumentCategory from './AddTestInstrumentCategory';\r\nimport AddFormula from './AddFormula';\r\nimport ValidateFormula from './ValidateFormula';\r\nimport AddFile from './AddFile';\r\nimport { parameterType, transactionStatus, operators, attachmentType, FORMULAFIELDTYPE, formCode } from '../../components/Enumeration';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component'\r\nimport TestSectionTab from './TestSectionTab';\r\nimport TestMethodTab from './TestMethodTab';\r\nimport TestInstrumentCategoryTab from './TestInstrumentCategoryTab';\r\nimport TestFileTab from './TestFileTab';\r\nimport AddTestContainerType from './AddTestContainerType';\r\nimport TestContainerTypeTab from './TestContainerTypeTab';\r\nimport ParameterTab from './ParameterTab';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport TestPackageTab from './TestPackageTab';\r\nimport AddTestPackageTest from './AddTestPackageTest';\r\nimport AddSubCodedResult from './AddSubCodedResult';\r\nimport AddTestGroupNumericSpecification from '../../pages/testgroup/AddTestGroupNumericSpecification';\r\nimport AddPredefinedUserFormula from './AddPredefinedUserFormula';\r\n\r\nclass TestView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            fieldFlag: true,\r\n            operatorFlag: false,\r\n            functionFlag: true,\r\n            sectionDataState: dataState,\r\n            methodDataState: dataState,\r\n            instrumentCatDataState: dataState,\r\n            containerTypeDataState: dataState,\r\n            testPackageDataState: dataState,\r\n          //  techniqueDataState: dataState,\r\n            formulaScreenName: \"\",\r\n            query:\"\",\r\n            result:\"\"\r\n        });\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render in test view:\", this.props.Login);\r\n        const { SelectedTest } = this.props.masterData;\r\n        if (this.props.openChildModal || this.state.openValidate) {\r\n            this.mandatoryFields = this.findMandatoryFields(this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.formulaScreenName :\r\n                this.props.screenName, this.state.selectedRecord, this.state.formulaScreenName)\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {SelectedTest && <CustomTab tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />}\r\n\r\n                {this.props.openChildModal &&\r\n                    <SlideOutModal\r\n                        show={this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.openValidate : this.props.openChildModal}\r\n                        size={this.props.screenName === \"IDS_FORMULA\" ? 'xl' : 'lg'}\r\n                        closeModal={this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.hideValidateFormula : this.closeModal}\r\n                        operation={this.props.operation}\r\n                        inputParam={this.props.inputParam}\r\n                        screenName={this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.formulaScreenName : this.props.screenName}\r\n                        esign={this.props.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        onSaveClick={this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.calculateFormula : this.onSaveClick}\r\n                        showCalculate={this.state.showCalculate}\r\n                        showSaveContinue={this.props.showSaveContinue}\r\n                        selectedRecord={this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.selectedRecord['formulainput'] : this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.mandatoryFields}\r\n                        addComponent={this.props.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> : this.props.screenName === \"IDS_PARAMETER\" ?\r\n                                <AddParameter\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onNumericInputChange={this.onNumericInputChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    parameterData={this.props.parameterData}\r\n                                    userInfo={this.props.userInfo}\r\n                                    onFocus={this.props.onFocus}\r\n                                    DestinationUnit={this.props.DestinationUnit}    \r\n                                />\r\n                                : this.props.screenName === \"IDS_CODEDRESULT\" ?\r\n                                    <Row>\r\n                                        <AddCodedResult\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onComboChange={this.onComboChange}\r\n                                            parameterData={this.props.parameterData}\r\n                                            addSubCodedResult={this.props.addSubCodedResult}\r\n                                            controlMap={this.props.controlMap}\r\n                                        userRoleControlRights={this.props.userRoleControlRights}\r\n                                        userInfo={this.props.userInfo}\r\n                                            //selectedsubcodedresult={this.props.selectedsubcodedresult||[]}\r\n                                        />\r\n                                    </Row>\r\n                                    : this.props.screenName === \"IDS_SUBCODEDRESULT\" ?\r\n                                    <Row>\r\n                                        <AddSubCodedResult\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onComboChange={this.onComboChange}\r\n                                            parameterData={this.props.parameterData}\r\n                                            addSubCodedResult={this.props.addSubCodedResult}\r\n                                        />\r\n                                    </Row>\r\n                                    : this.props.screenName === \"IDS_SPECIFICATION\" ?\r\n                                        <AddSpecification\r\n                                            selectedRecord={this.props.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onComboChange={this.onComboChange}\r\n                                            grade={this.props.grade}\r\n                                            \r\n                                        />\r\n                                        : this.props.screenName === \"IDS_SECTION\" ?\r\n                                            <Row>\r\n                                                <Col md=\"12\">\r\n                                                    <AddTestSection\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        section={this.props.otherTestData.section}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        isMulti={true}\r\n                                                    />\r\n                                                </Col>\r\n                                            </Row>\r\n                                            : this.props.screenName === \"IDS_METHOD\" ?\r\n                                                <Row>\r\n                                                    <Col md=\"12\">\r\n                                                        <AddTestMethod\r\n                                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                                            method={this.props.otherTestData.method}\r\n                                                            onComboChange={this.onComboChange}\r\n                                                            isMulti={true}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                : this.state.formulaScreenName === \"\" && this.props.screenName === \"IDS_FORMULA\" ?\r\n                                                    <AddFormula\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        onNumericInputChange={this.onNumericInputChange}\r\n                                                        onFormulaDrop={this.onFormulaDrop.bind(this)}\r\n                                                        validateFormula={() => this.validateFormula(this.props.masterData.selectedParameter, this.state.selectedRecord, this.props.formulaData)}\r\n                                                        clearFormula={this.clearFormula}\r\n                                                        onUserInputs={this.onUserInputs}\r\n                                                        operators={this.props.formulaData.operators}\r\n                                                        functions={this.props.formulaData.functions}\r\n                                                        testCategory={this.props.formulaData.testCategory}\r\n                                                        testMaster={this.props.formulaData.testMaster}\r\n                                                        dynamicFormulaFields={this.props.formulaData.dynamicFormulaFields}\r\n                                                        result={this.state.result ? this.state.result : \"\"}\r\n                                                        query={this.state.query ? this.state.query : \"\"}\r\n                                                        getSyntax={this.getSyntax}\r\n                                                        sfunctionsyntax={this.state.sfunctionsyntax}\r\n                                                        onFocus={this.props.onFocus}\r\n                                                    />\r\n                                                    : this.props.screenName === \"IDS_PREDEFINEDFORMULA\" ?\r\n                                                    <AddPredefinedUserFormula\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        preDefinedFormula={this.props.preDefinedFormula}\r\n                                                    />\r\n                                                    : this.props.screenName === \"IDS_INSTRUMENTCATEGORY\" ?\r\n                                                        <Row>\r\n                                                            <Col md=\"12\">\r\n                                                                <AddTestInstrumentCategory\r\n                                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                                    instrumentcategory={this.props.otherTestData.instrumentcategory}\r\n                                                                    onComboChange={this.onComboChange}\r\n                                                                    isMulti={true}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </Row>\r\n\r\n                                                        : this.props.screenName === \"IDS_PACKAGE\" ?\r\n                                                            <Row>\r\n                                                                <Col md=\"12\">\r\n                                                                    <AddTestPackageTest\r\n                                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                                        package={this.props.otherTestData.package}\r\n                                                                        onComboChange={this.onComboChange}\r\n                                                                        isMulti={true}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n\r\n                                                            // : this.props.screenName === \"IDS_TECHNIQUE\" ?\r\n                                                            //     <Row>\r\n                                                            //         <Col md=\"12\">\r\n                                                            //             <AddTestTechnique\r\n                                                            //                 selectedRecord={this.state.selectedRecord || {}}\r\n                                                            //                 technique={this.props.otherTestData.technique}\r\n                                                            //                 onComboChange={this.onComboChange}\r\n                                                            //                 onInputOnChange={this.onInputOnChange}\r\n                                                            //                 isMulti={true}\r\n                                                            //             />\r\n                                                            //         </Col>\r\n                                                            //     </Row>\r\n\r\n                                                                : this.props.screenName === \"IDS_CONTAINERTYPE\" ?\r\n                                                                    <Row>\r\n                                                                        <AddTestContainerType\r\n                                                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                                                            containertype={this.props.otherTestData.containertype}\r\n                                                                            unit={this.props.otherTestData.unit}\r\n                                                                            onComboChange={this.onComboChange}\r\n                                                                            onInputOnChange={this.onInputOnChange}\r\n                                                                            onNumericInputChange={this.onNumericInputChange}\r\n                                                                            isMulti={false}\r\n                                                                        />\r\n                                                                    </Row>                          \r\n                                                                    \r\n                                                                    : this.props.screenName === \"IDS_TESTFILE\" ?\r\n                                                                        <AddFile\r\n                                                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                                                            onInputOnChange={this.onInputOnChange}\r\n                                                                            onDrop={this.onDropTestFile}\r\n                                                                            onDropAccepted={this.onDropAccepted}\r\n                                                                            deleteAttachment={this.deleteAttachment}\r\n                                                                            actionType={this.state.actionType}\r\n                                                                            onComboChange={this.onComboChange}\r\n                                                                            linkMaster={this.props.linkMaster}\r\n                                                                            editFiles={this.props.editFiles}\r\n                                                                            maxSize={20}\r\n                                                                            // maxFiles={this.props.operation === \"update\" ? 1 : 3}\r\n                                                                            // multiple={this.props.operation === \"update\" ? false : true}\r\n                                                                            maxFiles={1}\r\n                                                                            multiple={false}\r\n                                                                            label={this.props.intl.formatMessage({ id: \"IDS_TESTFILE\" })}\r\n                                                                            name=\"testfilename\"\r\n                                                                        />\r\n                                                                        : this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ?\r\n                                                                            <ValidateFormula\r\n                                                                                DynamicFormulaFields={this.state.DynamicFields}\r\n                                                                                selectedRecord={this.state.selectedRecord}\r\n                                                                                onInputOnChange={this.onInputOnChange}\r\n                                                                            />:\r\n                                                                            this.props.screenName === \"IDS_CLINICALSPEC\" ?\r\n                                                                            <AddTestGroupNumericSpecification\r\n                                                                                //gradenew={this.props.testGroupInputData.grade||[]}\r\n                                                                                onInputOnChange={this.onInputOnChange}\r\n                                                                                parameterData={this.props.parameterData}\r\n                                                                                selectedRecord={this.state.selectedRecord}\r\n                                                                                onComboChange={this.onComboChange}\r\n                                                                                onNumericInputChange={this.onNumericInputChange}\r\n                                                                            />\r\n                                                                        // : this.props.screenName ===\"IDS_REPORTINFOTEST\" ?\r\n                                                                        //     <TestReportInfo\r\n                                                                        //         selectedRecord={this.state.selectedRecord || {}}\r\n                                                                        //     />\r\n                                                                        :\"\"\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n\r\n\r\n    findMandatoryFields(screenName, selectedRecord, optional) {\r\n        let mandyFields = [];\r\n        if (screenName === \"IDS_SECTION\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_SECTION\", \"dataField\": \"availableData\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        }\r\n        else if (screenName === \"IDS_TECHNIQUE\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_TECHNIQUE\", \"dataField\": \"availableData\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        }\r\n        else if (screenName === \"IDS_METHOD\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_METHOD\", \"dataField\": \"availableData\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        } else if (screenName === \"IDS_INSTRUMENTCATEGORY\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"availableData\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        } else if (screenName === \"IDS_PACKAGE\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_TESTPACKAGE\", \"dataField\": \"availableData\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        } else if (screenName === \"IDS_FORMULA\" && optional === \"\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_FORMULANAME\", \"dataField\": \"sformulaname\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_FORMULA\", \"dataField\": \"sformulacalculationdetail\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }else if (screenName === \"IDS_PREDEFINEDFORMULA\" ) {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_FORMULANAME\", \"dataField\": \"sformulaname\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_PREDEFINEDFORMULA\", \"dataField\": \"npredefinedformulacode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        else if (screenName === \"IDS_PARAMETER\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_PARAMETERNAME\", \"dataField\": \"sparametername\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n            if (selectedRecord && Object.values(selectedRecord).length > 0 && selectedRecord[\"nparametertypecode\"]) {\r\n                if (selectedRecord[\"nparametertypecode\"].value === parameterType.NUMERIC) {\r\n                    mandyFields.push(\r\n                        { \"idsName\": \"IDS_ROUNDINGDIGITS\", \"dataField\": \"nroundingdigits\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"idsName\": \"IDS_UNIT\", \"dataField\": \"nunitcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    );\r\n                } else if (selectedRecord[\"nparametertypecode\"].value === parameterType.PREDEFINED) {\r\n                    mandyFields.push(\r\n                        { \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"idsName\": \"IDS_ACTUALRESULT\", \"dataField\": \"ngradecode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"idsName\": \"IDS_CODEDRESULTSYNONYM\", \"dataField\": \"spredefinedsynonym\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                    );\r\n                }\r\n            }\r\n        } \r\n        else if(screenName === \"IDS_CODEDRESULT\")\r\n            {\r\n                mandyFields.push(\r\n                    { \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"idsName\": \"IDS_ACTUALRESULT\", \"dataField\": \"ngradecode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_CODEDRESULTSYNONYM\", \"dataField\": \"spredefinedsynonym\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                );\r\n            }else if (screenName === \"IDS_VALIDATEFORMULA\") {\r\n            mandyFields = this.state.validateFormulaMandyFields;\r\n        } else if (screenName === \"IDS_TESTFILE\") {\r\n            if (this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK) {\r\n                mandyFields = [\r\n                    { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                    { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ];\r\n            } else {\r\n                // if (this.props.operation !== 'update') {\r\n                mandyFields = [\r\n                    { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                ];\r\n                // }\r\n            }\r\n        }\r\n        else if (screenName === \"IDS_CONTAINERTYPE\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_CONTAINERTYPE\", \"dataField\": \"ncontainertypecode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                // { \"idsName\": \"IDS_QUANTITY\", \"dataField\": \"nquantity\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                this.state.selectedRecord.unitMandatory === true ?  { \"idsName\": \"IDS_UNIT\", \"dataField\": \"nunitcode\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" } : {},\r\n\r\n            ] \r\n        }else if (screenName === \"IDS_CLINICALSPEC\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_GENDER\", \"dataField\": \"ngendercode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        { \"idsName\": \"IDS_FROMAGE\", \"dataField\": \"nfromage\", \"width\": \"200px\", \"mandatory\": true },\r\n        { \"idsName\": \"IDS_TOAGE\", \"dataField\": \"ntoage\", \"width\": \"200px\", \"mandatory\": true }\r\n            ] \r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n        let finalMandyFields = [];\r\n        mandyFields.forEach(item => item.mandatory === true && finalMandyFields.push(item));\r\n        return finalMandyFields;\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n\r\n        tabMap.set(\"IDS_PARAMETER\",\r\n            <ParameterTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                TestParameter={this.props.masterData.TestParameter}\r\n                masterData={this.props.masterData}\r\n                userInfo={this.props.userInfo}\r\n                getTestDetails={this.props.getTestDetails}\r\n                inputParam={this.props.inputParam}\r\n                addParameter={this.props.addParameter}\r\n                deleteAction={this.props.deleteAction}\r\n                ConfirmDelete={this.ConfirmDelete}\r\n                addCodedResult={this.props.addCodedResult}\r\n                addSubCodedResult={this.props.addSubCodedResult}\r\n                addFormula={this.props.addFormula}\r\n                openPredefinedModal={this.props.openPredefinedModal}\r\n                onSwitchChange={this.onSwitchChange}\r\n                addParameterSpecification={this.props.addParameterSpecification}\r\n                addClinicalSpecification={this.props.addClinicalSpecification}\r\n                screenName=\"IDS_PARAMETER\"\r\n                grade={this.props.grade}\r\n                dataStateChange={this.props.dataStateChange}\r\n                dataState={this.props.clinicalspecDataState}\r\n                EditSpecDetails={this.EditSpecDetails}\r\n                deleteRecord={this.DeleteSpecDetails}\r\n            />\r\n        );\r\n        tabMap.set(\"IDS_SECTION\",\r\n            <TestSectionTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                dataResult={process(this.props.masterData[\"TestSection\"], (this.props.screenName === undefined || this.props.screenName === \"IDS_SECTION\") ? this.state.sectionDataState : { skip: 0, take: 10 })}\r\n                dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_SECTION\") ? this.state.sectionDataState : { skip: 0, take: 5 }}\r\n                dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\r\n                selectedTest={this.props.masterData.SelectedTest}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                deleteRecord={this.deleteRecord}\r\n                defaultRecord={this.defaultRecord}\r\n                getAvailableData={this.props.getAvailableData}\r\n                TestSection={this.props.masterData.TestSection || []}\r\n                screenName=\"IDS_SECTION\"\r\n            />);\r\n        tabMap.set(\"IDS_METHOD\",\r\n            <TestMethodTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                dataResult={process(this.props.masterData[\"TestMethod\"], (this.props.screenName === undefined || this.props.screenName === \"IDS_METHOD\") ? this.state.methodDataState : { skip: 0, take: 5 })}\r\n               // dataResult={this.state.testmethodata && this.state.testmethodata===undefined?this.props.masterData[\"TestMethod\"]:this.state.testmethodata }\r\n                dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_METHOD\") ? this.state.methodDataState : { skip: 0, take: 5 }}\r\n                dataStateChange={(event) => this.setState({ methodDataState: event.dataState })}\r\n                selectedTest={this.props.masterData.SelectedTest}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                deleteRecord={this.deleteRecord}\r\n                defaultRecord={this.defaultRecord}\r\n                getAvailableData={this.props.getAvailableData}\r\n                TestMethod={this.props.masterData.TestMethod || []}\r\n                screenName=\"IDS_METHOD\"\r\n            />\r\n        );\r\n        tabMap.set(\"IDS_INSTRUMENTCATEGORY\",\r\n            <TestInstrumentCategoryTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                dataResult={process(this.props.masterData[\"TestInstrumentCategory\"], (this.props.screenName === undefined || this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") ? this.state.instrumentCatDataState : { skip: 0, take: 5 })}\r\n                dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") ? this.state.instrumentCatDataState : { skip: 0, take: 5 }}\r\n                dataStateChange={(event) => this.setState({ instrumentCatDataState: event.dataState })}\r\n                selectedTest={this.props.masterData.SelectedTest}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                deleteRecord={this.deleteRecord}\r\n                defaultRecord={this.defaultRecord}\r\n                getAvailableData={this.props.getAvailableData}\r\n                TestInstrumentCategory={this.props.masterData.TestInstrumentCategory}\r\n                screenName=\"IDS_INSTRUMENTCATEGORY\"\r\n            />\r\n        );\r\n        tabMap.set(\"IDS_FILE\",\r\n            <TestFileTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                deleteRecord={this.deleteRecord}\r\n                dataStateChange={(event) => this.setState({ testFileDataState: event.dataState })}\r\n                testFileDataState={this.state.testFileDataState}\r\n                TestFile={this.props.masterData.TestFile || []}\r\n                getAvailableData={this.props.getAvailableData}\r\n                addTestFile={this.props.addTestFile}\r\n                viewTestFile={this.viewTestFile}\r\n                defaultRecord={this.defaultRecord}\r\n                screenName=\"IDS_FILE\"\r\n                settings={this.props.settings}\r\n            />);\r\n\r\n       // if (this.props.esignRights && Object.keys(this.props.esignRights).indexOf(formCode.TESTPACKAGE.toString())!==-1){\r\n       if (this.props.hideQualisForms && this.props.hideQualisForms.findIndex(item=>item.nformcode === formCode.TESTPACKAGE) === -1)\r\n       {                   \r\n            tabMap.set(\"IDS_TESTPACKAGE\",\r\n                <TestPackageTab\r\n                    controlMap={this.props.controlMap}\r\n                    userRoleControlRights={this.props.userRoleControlRights}\r\n                    dataResult={process(this.props.masterData[\"TestPackage\"] || [], (this.props.screenName === undefined || this.props.screenName === \"IDS_PACKAGE\") ? this.state.testPackageDataState : { skip: 0, take: 5 })}\r\n                    dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_PACKAGE\") ? this.state.testPackageDataState : { skip: 0, take: 5 }}\r\n                    dataStateChange={(event) => this.setState({ testPackageDataState: event.dataState })}\r\n                    selectedTest={this.props.masterData.SelectedTest}\r\n                    userInfo={this.props.userInfo}\r\n                    inputParam={this.props.inputParam} \r\n                    deleteRecord={this.deleteRecord}\r\n                    defaultRecord={this.defaultRecord}\r\n                    getAvailableData={this.props.getAvailableData}\r\n                    TestPackage={this.props.masterData.TestPackage}\r\n                    screenName=\"IDS_PACKAGE\"\r\n                />\r\n            );\r\n        }\r\n\r\n        // tabMap.set(\"IDS_TECHNIQUE\",\r\n        //     <TestTechniqueTab\r\n        //         controlMap={this.props.controlMap}\r\n        //         userRoleControlRights={this.props.userRoleControlRights}\r\n        //         dataResult={process(this.props.masterData[\"TestTechnique\"] ||[], (this.props.screenName === undefined || this.props.screenName === \"IDS_TECHNIQUE\") ? this.state.sectionDataState : { skip: 0, take: 10 })}\r\n        //         dataState={(this.props.screenName === undefined \r\n        //             || this.props.screenName === \"IDS_TECHNIQUE\") ? this.state.techniqueDataState : { skip: 0, take: 10 }}\r\n        //         dataStateChange={(event) => this.setState({ techniqueDataState: event.dataState })}\r\n        //         selectedTest={this.props.masterData.SelectedTest}\r\n        //         userInfo={this.props.userInfo}\r\n        //         inputParam={this.props.inputParam}\r\n        //         deleteRecord={this.deleteRecord}\r\n        //         defaultRecord={this.defaultRecord}\r\n        //         getAvailableData={this.props.getAvailableData}\r\n        //         TestTechnique={this.props.masterData.TestTechnique || []}\r\n        //         screenName=\"IDS_TECHNIQUE\"\r\n        //     />);\r\n\r\n        tabMap.set(\"IDS_CONTAINERTYPE\",\r\n            <TestContainerTypeTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                dataResult={process(this.props.masterData[\"Containertype\"], (this.props.screenName === undefined || this.props.screenName === \"IDS_CONTAINERTYPE\") ? this.state.containerTypeDataState : { skip: 0, take: 5 })}\r\n                dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_CONTAINERTYPE\") ? this.state.containerTypeDataState : { skip: 0, take: 5 }}\r\n                dataStateChange={(event) => this.setState({ containerTypeDataState: event.dataState })}\r\n                selectedTest={this.props.masterData.SelectedTest}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                deleteRecord={this.deleteRecord}\r\n                defaultRecord={this.defaultRecord}\r\n                getAvailableData={this.props.getAvailableData}\r\n                TestContainerType={this.props.masterData.Containertype}\r\n                getActiveTestContainerTypeById={this.props.getActiveTestContainerTypeById}\r\n                addContainerType={this.props.addContainerType}\r\n                intl={this.props.intl}\r\n                screenName=\"IDS_CONTAINERTYPE\"\r\n            />\r\n        );\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    viewTestFile = (filedata) => {\r\n        const inputParam = {\r\n            inputData: {\r\n                testfile: filedata,\r\n                userinfo: this.props.userInfo\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: \"view\",\r\n            methodUrl: \"AttachedTestFile\",\r\n            screenName: \"IDS_TEST\"\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n    DeleteSpecDetails = (viewdetails, ncontrolCode) => {\r\n        this.ConfirmDelete(viewdetails,\"delete\", ncontrolCode,'TestParameterClinicalSpec','openChildModal')\r\n    };\r\n    EditSpecDetails = (viewdetails, ncontrolCode) => {\r\n\r\n        this.props.addClinicalSpecification(\"update\", viewdetails, this.props.userInfo, ncontrolCode)\r\n    };\r\n\r\n    deleteRecord = (deleteParam) => {\r\n\r\n        let dataResultRecord;\r\n        let skipDataRecords;\r\n\r\n        const methodUrl = deleteParam.methodUrl;\r\n        const selected = deleteParam.selectedRecord;\r\n        let dataState = undefined;\r\n        if (this.props.screenName === \"IDS_SECTION\") {     \r\n            dataResultRecord=process(this.props.masterData[\"TestSection\"], this.state.sectionDataState );\r\n            dataState = this.state.sectionDataState;\r\n        } else if (this.props.screenName === \"IDS_METHOD\") {\r\n            dataResultRecord=process(this.props.masterData[\"TestMethod\"], this.state.methodDataState );\r\n            dataState = this.state.methodDataState;\r\n        } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\r\n            dataResultRecord=process(this.props.masterData[\"TestInstrumentCategory\"], this.state.instrumentCatDataState );\r\n            dataState = this.state.instrumentCatDataState;\r\n        }\r\n        else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\r\n            dataResultRecord=process(this.props.masterData[\"TestMethod\"], this.state.containerTypeDataState );\r\n            dataState = this.state.containerTypeDataState;\r\n        }\r\n        else if (this.props.screenName === \"IDS_TESTPACKAGE\") {\r\n            dataResultRecord=process(this.props.masterData[\"TestPackage\"], this.state.testPackageDataState );\r\n            dataState = this.state.testPackageDataState;\r\n        } else if (this.props.screenName === \"IDS_TESTFILE\" || this.props.screenName === \"IDS_FILE\" ) {  \r\n            dataResultRecord=process(this.props.masterData[\"TestFile\"], this.state.testPackageDataState );\r\n            dataState = this.state.testFileDataState; \r\n        }\r\n\r\n        if(dataResultRecord.data){\r\n            if(dataResultRecord.data.length ===1){\r\n               let skipcount=dataState.skip>0?(dataState.skip-dataState.take):\r\n               dataState.skip\r\n               skipDataRecords={skip:skipcount,take:dataState.take}\r\n            }else{\r\n                skipDataRecords=dataState;\r\n            }\r\n        }\r\n\r\n\r\n        const inputParam = {      \r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: selected,\r\n                \"userinfo\": {...this.props.userInfo,\r\n               \r\n\t\t\t\t//ALPD-1628(while file saving,audit trail is not captured respective language)\r\n                    slanguagename: Lims_JSON_stringify(this.props.userInfo.slanguagename)},\r\n                   \t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n\t\t\t\t\t \"isQualisLite\":parseInt(this.props.settings[71])\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: deleteParam.operation,\r\n            methodUrl: methodUrl,\r\n            screenName: \"IDS_TEST\", \r\n            dataState:skipDataRecords\r\n        }\r\n        const masterData = this.props.masterData;\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openChildModal: true, screenName: \"IDS_TEST\", operation: deleteParam.operation, selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n\r\n    defaultRecord = (defaultParam, event) => {\r\n        const methodUrl = defaultParam.methodUrl;\r\n        let dataItem = defaultParam.selectedRecord;\r\n        // dataItem[\"ndefaultstatus\"] = transactionStatus.YES;\r\n        let dataState = undefined;\r\n        if (this.props.screenName === \"IDS_SECTION\") {\r\n            dataState = this.state.sectionDataState;\r\n        } else if (this.props.screenName === \"IDS_METHOD\") {\r\n            dataState = this.state.methodDataState;\r\n        } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\r\n            dataState = this.state.instrumentCatDataState;\r\n        }\r\n        else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\r\n            dataState = this.state.containerTypeDataState;\r\n        }\r\n        else if (this.props.screenName === \"IDS_TESTPACKAGE\") {\r\n            dataState = this.state.testPackageDataState;\r\n        }\r\n\r\n        let postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: dataItem,\r\n                userinfo: this.props.userInfo,\r\n\t\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n                \"isQualisLite\":parseInt(this.props.settings[71])\r\n\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: \"setDefault\",\r\n            methodUrl: methodUrl, dataState, postParam\r\n        }\r\n        const masterData = this.props.masterData;\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, defaultParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openChildModal: true, screenName: \"Test\", operation: defaultParam.operation, selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n\r\n    onSwitchChange = (item, key, methodUrl, event,defaultTestFormulaId) => {\r\n        const masterData =this.props.masterData;\r\n        let dataItem = item;\r\n        // dataItem[\"ndefaultstatus\"] = 3;\r\n        //dataItem['ndefaultstatus'] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        const inputParam = {\r\n            inputData: {\r\n                [key]: dataItem,\r\n                userinfo: this.props.userInfo,\r\n\t\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n                \"isQualisLite\":parseInt(this.props.settings[71])\r\n\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: \"setDefault\",\r\n            methodUrl: methodUrl\r\n        }\r\n        if(showEsign(this.props.esignRights, this.props.userInfo.nformcode, defaultTestFormulaId)){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openChildModal: true, screenName: \"Test\", operation: \"setDefault\", selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }else{\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n        }\r\n        \r\n    }\r\n\r\n    hideValidateFormula = () => {\r\n        this.setState({ openValidate: false, showCalculate: false, formulaScreenName: \"\", validateFormulaMandyFields: [] });\r\n    }\r\n\r\n    validateFormula = (testData) => {\r\n        const sformulacalculationcode = this.state.selectedRecord.sformulacalculationcode;\r\n        if (sformulacalculationcode) {\r\n            if (sformulacalculationcode.includes(\"$D\") || sformulacalculationcode.includes(\"$P\")) {\r\n                rsapi.post(\"/testmaster/validateTestFormula\", { ntestcode: testData.ntestcode, \"sformula\": sformulacalculationcode, userinfo: this.props.userInfo })\r\n                    .then(response => {\r\n                        let selectedRecord = this.state.selectedRecord || {};\r\n                        selectedRecord[\"formulainput\"] = {};\r\n                        const validateFormulaMandyFields = response.data.map((item, index) => {\r\n                            return { \"idsName\": \"IDS_FILLALLFIELDS\", \"dataField\": \"dynamicformulafield_\" + index, \"mandatory\": true }\r\n                        });\r\n                        this.setState({\r\n                            openValidate: true,\r\n                            DynamicFields: response.data,\r\n                            dynamicField: [],\r\n                            selectedRecord,\r\n                            formulaScreenName: \"IDS_VALIDATEFORMULA\",\r\n                            showCalculate: true, validateFormulaMandyFields\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        toast.error(error.message)\r\n                    });\r\n            } else {\r\n                const inputParam = {\r\n                    dynamicformulafields: [],\r\n                    sformulacalculationcode: this.state.selectedRecord.sformulacalculationcode,\r\n                    userinfo: this.props.userInfo\r\n                }\r\n                this.calculateFormulaFunction(inputParam);\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERFORMULA\" }))\r\n        }\r\n    }\r\n\r\n    calculateFormulaFunction(inputParam) {\r\n        rsapi.post(\"/testmaster/calculateFormula\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                this.setState({\r\n                    openValidate: false,\r\n                    query: response.data[\"Query\"],\r\n                    result: response.data[\"Result\"],\r\n                    showCalculate: false, formulaScreenName: \"\"\r\n                })\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    //toast.warn(error.response.data);\r\n                    toast.warn(error.response.data[\"Result\"]);\r\n                }\r\n            });\r\n    }\r\n\r\n    calculateFormula = () => {\r\n        const dynamicField = this.state.dynamicField;\r\n        const dynamicformulafields = Object.keys(dynamicField).map((keyname) => {\r\n            return dynamicField[keyname];\r\n        });\r\n        const inputParam = {\r\n            dynamicformulafields: dynamicformulafields,\r\n            sformulacalculationcode: this.state.selectedRecord.sformulacalculationcode,\r\n            userinfo: this.props.userInfo\r\n        }\r\n        this.calculateFormulaFunction(inputParam);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            //ALPD-707 fix\r\n            if (this.props.operation === \"delete\" || this.props.operation === \"Default\"\r\n                ||   this.props.operation === \"setDefault\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = 4;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        } else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (fieldName === \"sparametername\") {\r\n                    selectedRecord[fieldName] = comboData;\r\n                    selectedRecord[\"sparametersynonym\"] = comboData.value;\r\n                }  else if(fieldName  === \"nunitcode\") {\r\n                    //ALPD-3637-Vignesh R(02-08-2024)-- Test master--> parameter records are disappeared when clicking the refresh button.\r\n                    selectedRecord[\"noperatorcode\"]=-1;\r\n                    selectedRecord[\"nconversionfactor\"]=\"\";\r\n                    selectedRecord[\"ndestinationunitcode\"]=\"\";  \r\n                    selectedRecord[\"sunitname\"]=\"\";\r\n                    selectedRecord[\"sunitname1\"]=\"\";\r\n                    selectedRecord[\"nunitcode\"] = comboData;\r\n                    this.props.getUnitConversion(this.state.selectedRecord.nunitcode.value,this.props.masterData,this.props.userInfo, selectedRecord);\r\n                } else  if(fieldName === \"ndestinationunitcode\") {\r\n                    if(comboData !==null){\r\n                         selectedRecord[\"ndestinationunitcode\"]= comboData;\r\n                        this.props.getConversionOperator(this.state.selectedRecord.nunitcode.value,this.state.selectedRecord.ndestinationunitcode.value,this.props.masterData,this.props.userInfo, selectedRecord);\r\n                    }else{\r\n                        delete selectedRecord[\"ndestinationunitcode\"];\r\n\t\t\t\t\t\t//ALPD-3521\r\n                        delete selectedRecord[\"soperator\"];\r\n                        delete selectedRecord[\"nconversionfactor\"];\r\n                         selectedRecord[\"noperatorcode\"]=-1;\r\n                    }\r\n                   \r\n                }\r\n\r\n                 else {\r\n                    selectedRecord[fieldName] = comboData;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                const parameterData = this.props.parameterData;\r\n                let item = comboData['item'];\r\n                let needUnit = true;\r\n                let needRoundingDigit = true;\r\n                let needCodedResult = true;\r\n                let needActualResult = true;\r\n                let npredefinedcode = 4;\r\n                if (item[\"nunitrequired\"] === 3) {\r\n                    needUnit = false;\r\n                    selectedRecord[\"nunitcode\"] = this.props.parameterData.defaultUnit;\r\n                } else {\r\n                    selectedRecord[\"nunitcode\"] = \"\";\r\n\t\t\t\t\t//ALPD-3521\r\n                    selectedRecord[\"ndestinationunitcode\"]=\"\";\r\n                    selectedRecord[\"noperatorcode\"]=-1;\r\n                    selectedRecord[\"sunitname\"]=\"\";\r\n                    selectedRecord[\"sunitname1\"]=\"\";\r\n                    selectedRecord[\"nconversionfactor\"]=\"\";\r\n\r\n\r\n                    // selectedRecord[\"nunitcode\"] = \"\";\r\n\r\n                }\r\n                if (item[\"nroundingrequired\"] === 3) {\r\n                    needRoundingDigit = false;\r\n                } else {\r\n                    selectedRecord[\"nroundingdigits\"] = \"0\";\r\n                }\r\n                if (item[\"npredefinedrequired\"] === 3) {\r\n                    needCodedResult = false;\r\n                    npredefinedcode = item[\"npredefinedrequired\"];\r\n                } else {\r\n                    selectedRecord[\"spredefinedname\"] = \"\";\r\n                }\r\n                if (item[\"ngraderequired\"] === 3) {\r\n                    needActualResult = false;\r\n                    selectedRecord[\"ngradecode\"] = this.props.parameterData.defaultGrade;\r\n                } else {\r\n                    selectedRecord[\"ngradecode\"] = \"\";\r\n                }\r\n                selectedRecord[fieldName] = comboData;\r\n                const parameterInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord, parameterData: { ...parameterData, needUnit, needRoundingDigit, needCodedResult, needActualResult, npredefinedcode } }\r\n                }\r\n                this.props.updateStore(parameterInfo);\r\n                break;\r\n\r\n            case 3:\r\n                selectedRecord[fieldName] = comboData;\r\n                this.props.formulaChangeFunction({ ntestcategorycode: comboData.value, nFlag: 2, userinfo: this.props.userInfo }, this.props.formulaData, 1, selectedRecord, '/changeTestCatgoryInFormula');\r\n                break;\r\n\r\n            case 4:\r\n                selectedRecord[fieldName] = comboData;\r\n                this.props.formulaChangeFunction({ ntestcode: comboData.value, nFlag: 3, userinfo: this.props.userInfo }, this.props.formulaData, 2, selectedRecord, '/changeTestInFormula');\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange = (event, caseNo, optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n                } else if (event.target.type === 'radio') {\r\n                    selectedRecord[event.target.name] = optional;\r\n                    //  selectedRecord[\"sfilename\"]=\"\";\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 4:\r\n                const inputValue = event.target.value;\r\n                if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 5:\r\n                if (optional.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER && optional.sdescription.indexOf('P$') === -1) {\r\n                    const value = event.target.value.replace(/[^-^0-9]/g, '');\r\n                    const dynamicField = this.state.dynamicField || [];\r\n                    if ((/^-?\\d*?$/.test(value))) {\r\n                        if (!selectedRecord['formulainput']) {\r\n                            selectedRecord['formulainput'] = {};\r\n                        }\r\n                        selectedRecord['formulainput'][event.target.name] = value;\r\n                        dynamicField[event.target.name] = {\r\n                            sparameter: optional.sdescription,\r\n                            svalues: value\r\n                        };\r\n                    } \r\n                    else if (value === \"\") {\r\n                        if (!selectedRecord['formulainput']) {\r\n                            selectedRecord['formulainput'] = {};\r\n                        }\r\n                        selectedRecord['formulainput'][event.target.name] = value;\r\n                        dynamicField[event.target.name] = {\r\n                            sparameter: optional.sdescription,\r\n                            svalues: value\r\n                        };\r\n                    }\r\n                    this.setState({ dynamicField, selectedRecord });\r\n                    break;\r\n                } else {\r\n                    const value = event.target.value.replace(/[^-^0-9.]/g, '');\r\n                    const dynamicField = this.state.dynamicField || [];\r\n                    if ((/^-?\\d*?\\.?\\d*?$/.test(value)) || value !== \"\") {\r\n                        if (!selectedRecord['formulainput']) {\r\n                            selectedRecord['formulainput'] = {};\r\n                        }\r\n                        selectedRecord['formulainput'][event.target.name] = value;\r\n                        dynamicField[event.target.name] = {\r\n                            sparameter: optional.sdescription,\r\n                            svalues: value\r\n                        };\r\n                    }\r\n                    this.setState({ dynamicField, selectedRecord });\r\n                    break;\r\n                }\r\n\r\n                case 6:\r\n                    // selectedRecord[event.target.name] = selectedRecord[\"sresultparacomment\"] = { label: event.target.value, value: event.target.value };\r\n                    // this.setState({ selectedRecord });\r\n                    // break;\r\n                    selectedRecord[event.target.name] = selectedRecord[\"spredefinedsynonym\"] = event.target.value;\r\n                    //selectedRecord[event.target.name] = selectedRecord[\"sresultparacomment\"] = event.target.value;\r\n                    //selectedRecord[\"sparametername\"] = { label: event.target.value, value: event.target.value };\r\n                    this.setState({ selectedRecord });\r\n                    break;\r\n                    case 7:\r\n                        const inputValues = event.target.value;\r\n                       if (/^-?\\d*?\\.?\\d*?$/.test(inputValues) || inputValues === \"\") {\r\n                           selectedRecord[event.target.name] = event.target.value;\r\n                       }\r\n                       \r\n                       if(selectedRecord[\"sresultvalue\"]!==\"\"  && selectedRecord[\"sresultvalue\"]!==undefined  && selectedRecord[\"sresultvalue\"].value !== -1)\r\n                        {\r\n                            selectedRecord[\"ngradecode\"]=this.props.parameterData.grade[3];\r\n                            \r\n                        }\r\n                       else if(selectedRecord[\"sresultvalue\"]===\"\")\r\n                        {\r\n                            delete selectedRecord[\"ngradecode\"];\r\n                        }\r\n                       this.setState({ selectedRecord });\r\n                       break;\r\n    \r\n    \r\n                       case 8:\r\n                        const inputvalues = event.target.value;\r\n                       if (/^-?\\d*?\\.?\\d*?$/.test(inputvalues) || inputvalues === \"\") {\r\n                           selectedRecord[event.target.name] = event.target.value;\r\n                       }\r\n                       \r\n                       if(selectedRecord[\"sresultvalue\"]!==\"\" && (selectedRecord[\"ngradecode\"]===undefined|| selectedRecord[\"ngradecode\"].value===-1))\r\n                        {\r\n                            selectedRecord[\"ngradecode\"]=this.props.parameterData.gradenew[3];\r\n                            \r\n                        }\r\n                       else if(selectedRecord[\"sresultvalue\"]===\"\")\r\n                        {\r\n                            delete selectedRecord[\"ngradecode\"];\r\n                        }\r\n                       this.setState({ selectedRecord });\r\n                       break;\r\n\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // onNumericInputChange = (value, name) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[name] = value;\r\n    //     this.setState({ selectedRecord });\r\n    // }\r\n\r\n    onNumericInputChange = (value, name, secondaryFieldName) => {\r\n        console.log(\"value:\", value, name);\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (name === \"nroundingdigits\") {\r\n            const values = value.target.value;  //.replace(/[^-^0-9]/g, '');\r\n            if (/^\\d*?$/.test(values) || values === \"\") {\r\n                console.log(\"val:\", values);\r\n                selectedRecord[name] = values;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[name] = value;\r\n\r\n            if(secondaryFieldName !== undefined){\r\n                if(selectedRecord[name] === 0 || selectedRecord[name] === undefined){\r\n                    selectedRecord[\"unitMandatory\"] = false;\r\n                    selectedRecord[\"nunitcode\"] = undefined;\r\n                }\r\n                else{\r\n                    selectedRecord[\"unitMandatory\"] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        let defaultInput = {};\r\n        let isValidRequest = true;\r\n        if (this.props.screenName === \"IDS_PARAMETER\") {\r\n            inputParam = this.onSaveParameter(saveType, formRef);\r\n            defaultInput = {\r\n                nparametertypecode: this.state.selectedRecord.nparametertypecode,\r\n             //   ngradecode: this.state.selectedRecord.ngradecode,\r\n                nunitcode: \"\"\r\n            };\r\n        } else if (this.props.screenName === \"IDS_CODEDRESULT\") {\r\n            inputParam = this.onSaveCodedResult(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_SPECIFICATION\") {\r\n            const selectedRecord = this.props.selectedRecord;\r\n            if (selectedRecord[\"sminb\"] || selectedRecord[\"smina\"] || selectedRecord[\"smaxa\"] || selectedRecord[\"smaxb\"]\r\n                || selectedRecord[\"sminlod\"] || selectedRecord[\"smaxlod\"] || selectedRecord[\"sminloq\"] || selectedRecord[\"smaxloq\"]\r\n                || selectedRecord[\"sdisregard\"] || selectedRecord[\"sresultvalue\"]) {\r\n                inputParam = this.onSaveSpecification(saveType, formRef);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERSPECLIMIT\" }));\r\n                isValidRequest = false;\r\n            }\r\n        } else if(this.props.screenName === \"IDS_CLINICALSPEC\"){\r\n            inputParam = this.onSaveClinicalSpec(saveType, formRef);\r\n        }\r\n        else if (this.props.screenName === \"IDS_FORMULA\"){\r\n            inputParam = this.onSaveFormula(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_PREDEFINEDFORMULA\") {\r\n            inputParam = this.onSavePreDefinedFormula(saveType, formRef);\r\n        }\r\n        else if (this.props.screenName === \"IDS_TESTFILE\") {\r\n            inputParam = this.onSaveTestFile(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\r\n            inputParam = this.saveContainerType(saveType, formRef);\r\n        }\r\n        else {\r\n            inputParam = this.saveTestData(saveType, formRef);\r\n        }\r\n        if (isValidRequest) {\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", defaultInput);\r\n            }\r\n        }\r\n    }\r\n    onSavePreDefinedFormula = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const selectedParameter = this.props.masterData.selectedParameter;\r\n        let testformula = {\r\n            ntestcode: selectedParameter[\"ntestcode\"],\r\n            ntestparametercode: selectedParameter[\"ntestparametercode\"],\r\n            ndefaultstatus: transactionStatus.NO,\r\n            nispredefinedformula: transactionStatus.YES,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            sformulaname: this.state.selectedRecord.sformulaname,\r\n            sformulacalculationcode: \"\",\r\n            sformulacalculationdetail: this.state.selectedRecord.sformulaname,\r\n            npredefinedformulacode:this.state.selectedRecord.npredefinedformulacode&&this.state.selectedRecord.npredefinedformulacode.value\r\n        }\r\n      \r\n\r\n        let selectedId = null;\r\n        let postParam = undefined;\r\n        if (this.props.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n            selectedId = selectedRecord[\"ntestparametercode\"];\r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                testformula: testformula,\r\n                userinfo: this.props.userInfo,\r\n\t\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n                \"isQualisLite\":parseInt(this.props.settings[71])\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: \"create\",\r\n            methodUrl: \"TestFormula\", saveType, formRef, postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    saveContainerType(saveType, formRef) {\r\n        let inputData = {};\r\n        let postParam = undefined;\r\n        let methodUrl = \"TestContainerType\";\r\n        if (this.props.operation == \"create\") {\r\n            if (this.state.selectedRecord.nquantity) {\r\n                this.state.selectedRecord['ncontainertypecode']['item']['nquantity'] = Number.parseFloat(this.state.selectedRecord.nquantity).toFixed(3);\r\n            }\r\n            //this.state.selectedRecord['ncontainertypecode']['item']['noutsourcecode'] = parseInt(this.state.selectedRecord.noutsourcecode);\r\n            if (this.state.selectedRecord.nunitcode) {\r\n                this.state.selectedRecord['ncontainertypecode']['item']['nunitcode'] = parseInt(this.state.selectedRecord.nunitcode.value);\r\n            }\r\n            else {\r\n                this.state.selectedRecord['ncontainertypecode']['item']['nunitcode'] = -1\r\n            }\r\n            inputData = {\r\n                [methodUrl.toLocaleLowerCase()]: this.state.selectedRecord.ncontainertypecode.item,\r\n                ntestcontainertypecode: this.state.selectedRecord.ntestcontainertypecode,\r\n                ntestcode: this.state.selectedRecord.ntestcode,\r\n\r\n\r\n                userinfo: this.props.userInfo,\r\n                testcode: this.props.masterData.SelectedTest.ntestcode,\r\n\t\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n                \"isQualisLite\":parseInt(this.props.settings[71])\r\n            }\r\n        }\r\n        else {\r\n            // edit\r\n            postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n\r\n            let unitCode = (this.state.selectedRecord.nquantity === 0 || this.state.selectedRecord.nquantity === undefined) ? -1 : \r\n                            this.state.selectedRecord.nunitcode.value;\r\n\r\n            inputData = {\r\n                ntestcontainertypecode: this.state.selectedRecord.ntestcontainertypecode,\r\n                ntestcode: this.state.selectedRecord.ntestcode,\r\n                ncontainertypecode: this.state.selectedRecord.ncontainertypecode.value,\r\n                // nunitcode: this.state.selectedRecord.nunitcode.value,\r\n                nunitcode : unitCode,\r\n                nquantity: parseInt(Number.parseFloat(this.state.selectedRecord.nquantity).toFixed(3)),\r\n                //noutsourcecode:this.state.selectedRecord.noutsourcecode,\r\n                userinfo: this.props.userInfo,\r\n                testcode: this.props.masterData.SelectedTest.ntestcode,\r\n\t\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n                \"isQualisLite\":parseInt(this.props.settings[71])\r\n\r\n            }\r\n        }\r\n        const inputParam = {\r\n            inputData: inputData,\r\n            classUrl: \"testmaster\",\r\n            operation: this.props.operation,\r\n            methodUrl: methodUrl, saveType, formRef, postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n    saveTestData(saveType, formRef) {\r\n        let availableData = [];\r\n        this.state.selectedRecord.availableData.map(data => {\r\n            return availableData.push(data.item);\r\n        });\r\n        let methodUrl = \"\";\r\n        if (this.props.screenName === \"IDS_SECTION\") { //Test Section\r\n            methodUrl = \"TestSection\";\r\n        } else if (this.props.screenName === \"IDS_METHOD\") { //Test Method\r\n            methodUrl = \"TestMethod\";\r\n        } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") { //Test Instrument Category\r\n            methodUrl = \"TestInstrumentCategory\";\r\n        } else if (this.props.screenName === \"IDS_CONTAINERTYPE\") { //Test Instrument Category\r\n            methodUrl = \"TestContainerType\";\r\n        }\r\n        else if (this.props.screenName === \"IDS_PACKAGE\") { //Test Package\r\n            methodUrl = \"Testpackage\";\r\n        }\r\n        else if (this.props.screenName === \"IDS_TECHNIQUE\") { //Test Technique\r\n            methodUrl = \"TestTechnique\";\r\n        }\r\n\r\n        // let selectedId = null;\r\n        let postParam = undefined;\r\n        if (this.props.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n            //  selectedId = selectedRecord[\"ntestparametercode\"];               \r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                [methodUrl.toLocaleLowerCase()]: availableData,\r\n                userinfo: this.props.userInfo,\r\n\t\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n                \"isQualisLite\":parseInt(this.props.settings[71])\r\n\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: \"create\",\r\n            methodUrl: methodUrl, saveType, formRef, postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveParameter = (saveType, formRef) => {\r\n        const storeData = this.props;\r\n        let inputData = {};\r\n        let customobject = null;\r\n        const userInfo = storeData.userInfo;\r\n        let postParam = undefined;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let testColumns = [{ \"ntestparametercode\": \"int\" }, { \"nparametertypecode\": \"input\" }, { \"nunitcode\": \"input\" }, { \"ndestinationunitcode\":\"input\" }, \r\n        { \"noperatorcode\":\"int\" }, { \"nconversionfactor\":\"float\" }, { \"sparametername\": \"input\" },\r\n            { \"sparametersynonym\": \"string\" }, { \"nroundingdigits\": \"int\" }, { \"objPredefinedParameter\": \"customobject\" },\r\n            { \"ndeltachecklimitcode\": \"float\" }, { \"ndeltacheck\": \"int\" }, { \"ndeltaunitcode\": \"input\" },\r\n            { \"ndeltacheckframe\": \"int\" },{\"nresultaccuracycode\":\"input\"}]\r\n        if (storeData.operation === \"create\") {\r\n            inputData = {\r\n                \"testparameter\": {\r\n                    nisadhocparameter: transactionStatus.NO,\r\n                    nisvisible: transactionStatus.YES,\r\n                    nstatus: transactionStatus.ACTIVE,\r\n                    \r\n                }\r\n            };\r\n        } else {\r\n            inputData = { \"testparameter\": {} }\r\n            let selectedId = null;\r\n\r\n            if (storeData.operation === \"update\") {\r\n                // edit\r\n                postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n                selectedId = selectedRecord[\"ntestparametercode\"];\r\n            }\r\n        }\r\n        if (selectedRecord[\"nparametertypecode\"]) {\r\n            if (this.props.parameterData.npredefinedcode === transactionStatus.YES) {\r\n                customobject = {};\r\n                customobject[\"ntestparametercode\"] = selectedRecord[\"ntestparametercode\"];\r\n                customobject[\"ntestpredefinedcode\"] = selectedRecord[\"ntestpredefinedcode\"];\r\n                customobject[\"spredefinedname\"] = selectedRecord[\"spredefinedname\"].trim();\r\n                customobject[\"nstatus\"] = 1;\r\n                customobject[\"ndefaultstatus\"] = transactionStatus.YES;\r\n                customobject[\"ngradecode\"] = selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1;\r\n                // if (selectedRecord[\"sresultparacomment\"]) {\r\n                    customobject[\"spredefinedsynonym\"] = selectedRecord[\"spredefinedsynonym\"] ? selectedRecord[\"spredefinedsynonym\"].trim() : \"\";\r\n\r\n                    //customobject[\"sresultparacomment\"] = selectedRecord[\"sresultparacomment\"] ? selectedRecord[\"sresultparacomment\"].trim() : \"\";\r\n                // }\r\n            }\r\n            inputData[\"userinfo\"] = userInfo;\r\n\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n            inputData[\"isQualisLite\"]=parseInt(this.props.settings[71]);\r\n            testColumns.map(item => {\r\n                const key = Object.keys(item)[0];\r\n                const value = Object.values(item)[0];\r\n                if (value === \"input\") {\r\n                    return inputData[\"testparameter\"][key] = selectedRecord[key] ? selectedRecord[key].value ? selectedRecord[key].value : -1 : -1;\r\n                } else if (value === \"int\") {\r\n                    return inputData[\"testparameter\"][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n                } else if (value === \"string\") {\r\n                    return inputData[\"testparameter\"][key] = selectedRecord[key] ? selectedRecord[key].trim() : \"\";\r\n                } else if (value === \"customobject\") {\r\n                    return inputData[\"testparameter\"][key] = customobject;\r\n\r\n                } else if (value === \"float\") {\r\n                    return inputData[\"testparameter\"][key] = selectedRecord[key] ? selectedRecord[key] : 0.0;\r\n                } else {\r\n                    return null;\r\n                }\r\n            });\r\n            inputData[\"testparameter\"][\"ntestcode\"] = storeData.masterData[\"SelectedTest\"][\"ntestcode\"];\r\n            inputData[\"testparameter\"][\"sdisplaystatus\"] = selectedRecord[\"nparametertypecode\"].label;\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testmaster\",\r\n            operation: storeData.operation,\r\n            methodUrl: \"TestParameter\",\r\n            saveType, formRef, postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveSpecification = (saveType, formRef) => {\r\n        const selectedRecord = this.props.selectedRecord;\r\n        const columns = [{ \"ntestparametercode\": \"int\" }, { \"ntestparamnumericcode\": \"int\" }, { \"sminb\": \"string\" },\r\n        { \"smina\": \"string\" }, { \"smaxa\": \"string\" }, { \"smaxb\": \"string\" }, { \"sminlod\": \"string\" }, { \"smaxlod\": \"string\" },\r\n        { \"sminloq\": \"string\" }, { \"smaxloq\": \"string\" }, { \"sdisregard\": \"string\" }, { \"sresultvalue\": \"string\" }];\r\n        let inputData = {\r\n            \"testparameternumeric\": {\r\n                nstatus: 1\r\n            },\r\n            userinfo: this.props.userInfo,\r\n\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n            \"isQualisLite\":parseInt(this.props.settings[71])\r\n        };\r\n        inputData[\"testparameternumeric\"][\"ngradecode\"] =selectedRecord.ngradecode? selectedRecord.ngradecode.value:-1;\r\n        columns.map(item => {\r\n            const key = Object.keys(item)[0];\r\n            const value = Object.values(item)[0];\r\n            if (value === \"int\") {\r\n                return inputData[\"testparameternumeric\"][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n            } else if (value === \"string\") {\r\n                return inputData[\"testparameternumeric\"][key] = selectedRecord[key] ?\r\n                    selectedRecord[key] === \"0\" ? selectedRecord[key] : selectedRecord[key].replace(/^0+/, '') : null;\r\n            } else {\r\n                return null;\r\n            }\r\n        });\r\n        let selectedId = null;\r\n        let postParam = undefined;\r\n        if (this.props.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n            selectedId = selectedRecord[\"ntestparametercode\"];\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testmaster\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestParameterNumeric\",\r\n            saveType, formRef, postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n    onSaveClinicalSpec = (saveType, formRef) => {\r\n        const selectedRecord = this.props.selectedRecord;\r\n      \r\n        const TestGroupAddSpecification = {\r\n            nstatus: transactionStatus.ACTIVE,\r\n            ntestparametercode: this.props.masterData.selectedParameter[\"ntestparametercode\"],\r\n            ngendercode: selectedRecord[\"ngendercode\"] ?selectedRecord[\"ngendercode\"]&&  selectedRecord[\"ngendercode\"].value:-1,\r\n            nfromage: selectedRecord[\"nfromage\"],\r\n            ntoage: selectedRecord[\"ntoage\"],\r\n            shigha: selectedRecord[\"nhigha\"]||'',\r\n            shighb: selectedRecord[\"nhighb\"]||'',\r\n            slowa: selectedRecord[\"nlowa\"]||'',\r\n            slowb: selectedRecord[\"nlowb\"]||'',\r\n            sminlod: selectedRecord[\"sminlod\"]||'',\r\n            smaxlod: selectedRecord[\"smaxlod\"]||'',\r\n            sminloq: selectedRecord[\"sminloq\"]||'',\r\n            smaxloq: selectedRecord[\"smaxloq\"]||'',\r\n            sdisregard: selectedRecord[\"sdisregard\"]||'',\r\n            sresultvalue: selectedRecord[\"sresultvalue\"]||'',\r\n            ngradecode: selectedRecord[\"ngradecode\"] && selectedRecord[\"ngradecode\"].value || -1,\r\n\r\n            ntestmasterclinicspeccode: selectedRecord[\"ntestmasterclinicspeccode\"],\r\n            nfromageperiod: selectedRecord[\"nfromageperiod\"] && selectedRecord[\"nfromageperiod\"].value || -1,\r\n            ntoageperiod: selectedRecord[\"ntoageperiod\"] && selectedRecord[\"ntoageperiod\"].value || -1,\r\n\r\n        };\r\n        let inputData = {\r\n            \"TestGroupAddSpecification\": {...TestGroupAddSpecification,\r\n                nstatus: 1\r\n            },\r\n            userinfo: this.props.userInfo,\r\n\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n            \"isQualisLite\":parseInt(this.props.settings[71])\r\n\r\n        };\r\n        let selectedId = null;\r\n        let postParam = undefined;\r\n        if (this.props.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n            selectedId = selectedRecord[\"ntestparametercode\"];\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testmaster\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestParameterClinicalSpec\",\r\n            saveType, formRef, postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveCodedResult = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const testPredefinedParameter = {\r\n            spredefinedname: selectedRecord[\"spredefinedname\"].trim(),\r\n            ngradecode: selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1,\r\n            ntestparametercode: selectedRecord[\"ntestparametercode\"],\r\n            ntestpredefinedcode: selectedRecord[\"ntestpredefinedcode\"],\r\n            //sresultparacomment:selectedRecord[\"sresultparacomment\"],\r\n            spredefinedsynonym:selectedRecord[\"spredefinedsynonym\"],\r\n            spredefinedcomments:selectedRecord[\"spredefinedcomments\"],\r\n            nstatus: transactionStatus.ACTIVE,\r\n            ndefaultstatus: selectedRecord[\"ndefaultstatus\"],//transactionStatus.NO\r\n\r\n        }\r\n\r\n        //let selectedId = null;\r\n        let postParam = undefined;\r\n        if (this.props.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n            //selectedId = selectedRecord[\"ntestparametercode\"];               \r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                testpredefinedparameter: testPredefinedParameter,\r\n                userinfo: this.props.userInfo,\r\n\t\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n                \"isQualisLite\":parseInt(this.props.settings[71])\r\n\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestPredefinedParameter\",\r\n            saveType, formRef, postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveFormula = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const formulafield = [\"sformulaname\", \"sformulacalculationcode\", \"sformulacalculationdetail\"];\r\n        const selectedParameter = this.props.masterData.selectedParameter;\r\n        let testformula = {\r\n            ntestcode: selectedParameter[\"ntestcode\"],\r\n            ntestparametercode: selectedParameter[\"ntestparametercode\"],\r\n            ndefaultstatus: transactionStatus.NO,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nispredefinedformula: transactionStatus.NO,\r\n            npredefinedformulacode:transactionStatus.NA\r\n        }\r\n        formulafield.map(field => {\r\n            return testformula[field] = selectedRecord[field].trim()\r\n        })\r\n\r\n        let selectedId = null;\r\n        let postParam = undefined;\r\n        if (this.props.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n            selectedId = selectedRecord[\"ntestparametercode\"];\r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                testformula: testformula,\r\n                userinfo: this.props.userInfo,\r\n\t\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n                \"isQualisLite\":parseInt(this.props.settings[71])\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: \"create\",\r\n            methodUrl: \"TestFormula\", saveType, formRef, postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    clearFormula = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        selectedRecord[\"sformulacalculationcode\"] = \"\";\r\n        selectedRecord[\"sformulacalculationdetail\"] = \"\";\r\n        selectedRecord[\"userinput\"] = \"\";\r\n        this.setState({\r\n            fieldFlag: true,\r\n            operatorFlag: false,\r\n            functionFlag: true,\r\n            selectedRecord,\r\n            query: \"\",\r\n            result: \"\",\r\n            openValidate: false,\r\n            sfunctionsyntax: \"\"\r\n        })\r\n    }\r\n\r\n    onFormulaDrop(data) {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let formulaName = \"\";\r\n        let formulaCalculationCode = \"\";\r\n        let fieldFlag = this.state.fieldFlag;\r\n        let functionFlag = this.state.functionFlag;\r\n        let operatorFlag = this.state.operatorFlag;\r\n        let sfunctionsyntax = this.state.sfunctionsyntax;\r\n        let isDropped = false;\r\n        if (data['testfields'] !== \"\") {\r\n            const testfields = JSON.parse(data['testfields']);\r\n            if (this.state.fieldFlag) {\r\n                let sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\r\n                let sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\r\n                const sparametername = testfields.sparametername;\r\n                const ntestparametercode = testfields.ntestparametercode;\r\n                if (sparametername !== \"Parameter-Field\" && sparametername !== \"Formula-Field\" && sparametername !== \"Dynamic-Field\") {\r\n                    if (testfields.isformula === 1) {\r\n                        formulaName = `${sformulacalculationdetail} (${sparametername}) `;\r\n                        formulaCalculationCode = `${sformulacalculationcode}$O20O$${ntestparametercode}$O18O$`;\r\n                    } else {\r\n                        formulaName = `${sformulacalculationdetail} ${sparametername}`;\r\n                        formulaCalculationCode = `${sformulacalculationcode}$P${ntestparametercode}P$`;\r\n                    }\r\n                } else if (sparametername !== \"Formula-Field\") {\r\n                    formulaName = `${sformulacalculationdetail} ${testfields.stestname}`;\r\n                    formulaCalculationCode = `${sformulacalculationcode}$D${ntestparametercode}D$`;\r\n                } else {\r\n                    formulaName = `${sformulacalculationdetail} ${testfields.stestname}`;\r\n                    formulaCalculationCode = `${sformulacalculationcode}${testfields.sformulacalculationcode}`;\r\n                }\r\n                fieldFlag = false;\r\n                functionFlag = false;\r\n                operatorFlag = true;\r\n                isDropped = true;\r\n            }\r\n        } else if (data['operatorfields'] !== \"\") {\r\n            const operatorfields = JSON.parse(data['operatorfields']);\r\n            const noperatorcode = operatorfields.noperatorcode;\r\n            const sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\r\n            const sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\r\n            if (this.state.operatorFlag) {\r\n                formulaName = `${sformulacalculationdetail} ${operatorfields.soperator}`;\r\n                formulaCalculationCode = `${sformulacalculationcode}$O${noperatorcode}O$`;\r\n                if (noperatorcode === operators.OPENPARENTHESIS) {\r\n                    fieldFlag = true;\r\n                    functionFlag = true;\r\n                    operatorFlag = false;\r\n                } else if (noperatorcode === operators.CLOSEPARENTHESIS) {\r\n                    fieldFlag = false\r\n                    functionFlag = false;\r\n                    operatorFlag = true;\r\n                } else {\r\n                    fieldFlag = true;\r\n                    functionFlag = true;\r\n                    operatorFlag = false;\r\n                }\r\n                isDropped = true;\r\n            } else if (noperatorcode === operators.OPENPARENTHESIS) {\r\n                formulaName = `${sformulacalculationdetail} ${operatorfields.soperator}`;\r\n                formulaCalculationCode = `${sformulacalculationcode}$O${noperatorcode}O$`;\r\n                fieldFlag = true;\r\n                functionFlag = true;\r\n                operatorFlag = false;\r\n                isDropped = true;\r\n            } else if (noperatorcode === operators.CLOSEPARENTHESIS) {\r\n                formulaName = `${sformulacalculationdetail} ${operatorfields.soperator}`;\r\n                formulaCalculationCode = `${sformulacalculationcode}$O${noperatorcode}O$`;\r\n                fieldFlag = false;\r\n                functionFlag = false;\r\n                operatorFlag = true;\r\n                isDropped = true;\r\n            }\r\n        } else if (data['functionfields'] !== \"\") {\r\n            if (this.state.functionFlag) {\r\n                const functionfields = JSON.parse(data['functionfields']);\r\n                const sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\r\n                const sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\r\n                formulaName = `${sformulacalculationdetail}${functionfields.sfunctionname}(`;\r\n                formulaCalculationCode = `${sformulacalculationcode}$F${functionfields.nfunctioncode}F$$O20O$`;\r\n                fieldFlag = true;\r\n                functionFlag = false;\r\n                operatorFlag = false;\r\n                sfunctionsyntax = functionfields.sfunctionsyntax;\r\n                isDropped = true;\r\n            }\r\n        }\r\n        if (isDropped) {\r\n            const sliceFormulaName = formulaName.slice(0, 512);\r\n            if (sliceFormulaName.length <= 512) {\r\n                selectedRecord[\"sformulacalculationcode\"] = formulaCalculationCode;\r\n                selectedRecord[\"sformulacalculationdetail\"] = sliceFormulaName;\r\n                this.setState({ fieldFlag, functionFlag, operatorFlag, sfunctionsyntax, selectedRecord });\r\n            } else {\r\n                selectedRecord[\"sformulacalculationdetail\"] = sliceFormulaName;\r\n                this.setState({ fieldFlag, functionFlag, operatorFlag, sfunctionsyntax, selectedRecord });\r\n            }\r\n        }\r\n    }\r\n\r\n    onUserInputs = (event) => {\r\n        const value = event.target.value.replace(/^0+/, '');\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (event.keyCode === 13) {\r\n            if (this.state.fieldFlag) {\r\n                const sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\r\n                const sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\r\n                selectedRecord[\"sformulacalculationcode\"] = `${sformulacalculationcode}$V${value}V$`;\r\n                selectedRecord[\"sformulacalculationdetail\"] = `${sformulacalculationdetail} ${value}`;\r\n                selectedRecord[event.target.name] = \"\";\r\n                this.setState({\r\n                    fieldFlag: false,\r\n                    functionFlag: false,\r\n                    operatorFlag: true,\r\n                    selectedRecord\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    getSyntax = (event) => {\r\n        this.setState({ sfunctionsyntax: event.dataItem.sfunctionsyntax })\r\n    }\r\n\r\n    onSaveTestFile = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let testFileArray = [];\r\n        let testFile = {\r\n            ntestcode: this.props.masterData.SelectedTest.ntestcode,\r\n            ntestfilecode: selectedRecord.ntestfilecode ? selectedRecord.ntestfilecode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nattachmenttypecode,\r\n\t\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n            nqualislite:parseInt(this.props.settings[71]),\r\n            ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, testFile);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !== undefined ? selectedRecord.ssystemfilename.split('.') : create_UUID();\r\n                    const filesystemfileext = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !== undefined ? file.name.split('.')[ssystemfilename.length - 1] : fileExtension;\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntestfilecode && selectedRecord.ntestfilecode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] =Lims_JSON_stringify(file.name,false) ;\r\n                    tempData[\"sdescription\"] =Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim(): \"\") ,false) ;\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    testFileArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                testFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename.trim(),false);\r\n                testFile[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"),false);\r\n                testFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                testFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                testFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n\t\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n                testFile[\"nqualislite\"]=parseInt(this.props.settings[71]);\r\n\r\n                testFileArray.push(testFile);\r\n            }\r\n        } else {\r\n            testFile[\"sfilename\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkfilename?selectedRecord.slinkfilename.trim():\"\"),false);\r\n            testFile[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\"),false);\r\n            testFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            testFile[\"ssystemfilename\"] = \"\";\r\n            testFile[\"nfilesize\"] = 0;\r\n\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n            testFile[\"nqualislite\"]=parseInt(this.props.settings[71]);\r\n\r\n            testFileArray.push(testFile);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"testfile\",JSON.stringify(testFileArray));\r\n\r\n      //  formData.append(\"userinfo\", JSON.stringify(this.props.userInfo));\r\n\r\n\r\n\r\n        let selectedId = null;\r\n        let postParam = undefined;\r\n        if (this.props.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n            selectedId = selectedRecord[\"ntestfilecode\"];\r\n        }\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": {...this.props.userInfo,\r\n                sformname: Lims_JSON_stringify(this.props.userInfo.sformname),\r\n                smodulename: Lims_JSON_stringify(this.props.userInfo.smodulename),\r\n\t\t\t\t//ALPD-1628(while file saving,audit trail is not captured respective language)\r\n                slanguagename: Lims_JSON_stringify(this.props.userInfo.slanguagename)\r\n            },\r\n },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.operation,\r\n            classUrl: \"testmaster\",\r\n            saveType, formRef, methodUrl: \"TestFile\", postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onDropTestFile = (attachedFiles, fieldName, maxSize) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n    ConfirmDelete = (item, operation, ncontrolCode, methodUrl, modalName) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.props.deleteAction(item, operation, ncontrolCode, methodUrl, modalName));\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.isFormulaOpen) {\r\n            this.setState({\r\n                fieldFlag: true,\r\n                operatorFlag: false,\r\n                functionFlag: true,\r\n                query:\"\",\r\n                result:\"\"\r\n            });\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { isFormulaOpen: false }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n            let { testFileDataState,sectionDataState, methodDataState, instrumentCatDataState, containerTypeDataState,testPackageDataState,testClinicalSpecDataState } = this.state;\r\n            if (this.props.dataState === undefined) {\r\n                if (this.props.screenName === \"IDS_SECTION\") {\r\n                    sectionDataState = { skip: 0, take: 5 };\r\n                } else if (this.props.screenName === \"IDS_METHOD\") {\r\n                    methodDataState = { skip: 0, take: 5 };\r\n                } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\r\n                    instrumentCatDataState = { skip: 0, take: 5 };\r\n                }\r\n                else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\r\n                    containerTypeDataState = { skip: 0, take: 5 };\r\n                }\r\n                else if (this.props.screenName === \"IDS_TESTPACKAGE\") {  \r\n                    testPackageDataState = { skip: 0, take: 5 };\r\n                } else if (this.props.screenName === \"IDS_TESTFILE\" || this.props.screenName === \"IDS_FILE\") {  \r\n                    testFileDataState = { skip: 0, take: 5 };\r\n                }else {\r\n                    sectionDataState = { skip: 0, take: 5 };\r\n                    methodDataState = { skip: 0, take: 5 };\r\n                    instrumentCatDataState = { skip: 0, take: 5 };\r\n                    containerTypeDataState = { skip: 0, take: 5 };\r\n                    testPackageDataState = { skip: 0, take: 5 };\r\n                    testFileDataState={ skip: 0, take: 5 };\r\n                   // testClinicalSpecDataState = { skip: 0, take: 5 ,group: [{ field: 'sgendername' }]};\r\n                }\r\n            }\r\n            else{\r\n\r\n                if (this.props.screenName === \"IDS_SECTION\") {\r\n                    sectionDataState = this.props.dataState;\r\n                } else if (this.props.screenName === \"IDS_METHOD\") {\r\n                    methodDataState =this.props.dataState;\r\n                } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\r\n                    instrumentCatDataState = this.props.dataState;\r\n                }\r\n                else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\r\n                    containerTypeDataState = this.props.dataState;\r\n                }\r\n                else if (this.props.screenName === \"IDS_TESTPACKAGE\") {\r\n                    testPackageDataState = this.props.dataState;\r\n                }else if (this.props.screenName === \"IDS_TESTFILE\" || this.props.screenName === \"IDS_FILE\") {  \r\n                    testFileDataState = { skip: 0, take: 5 };\r\n                }else{\r\n                    sectionDataState = { skip: 0, take: 5 };\r\n                    methodDataState = { skip: 0, take: 5 };\r\n                    instrumentCatDataState = { skip: 0, take: 5 };\r\n                    containerTypeDataState = { skip: 0, take: 5 };\r\n                    testPackageDataState = { skip: 0, take: 5 };\r\n                    testFileDataState={ skip: 0, take: 5 };\r\n                }\r\n            }\r\n                // let skipcount=this.props.masterData[\"TestMethod\"].length>0?(this.props.masterData[\"TestMethod\"].length-this.props.dataState.take):\r\n                // this.props.dataState.skip;\r\n                // if (this.props.screenName === \"IDS_METHOD\") {\r\n                //     methodDataState = { skip: skipcount, take: 5 };\r\n                // } \r\n                // let dataResultMethod=process(this.props.masterData[\"TestMethod\"], this.props.dataState );\r\n            \r\n                // let { dataState } = this.state;\r\n                // if (this.props.dataState === undefined) {\r\n                //     dataState = { skip:0,take:this.state.dataState.take }\r\n                // }\r\n                // if(dataResultMethod){\r\n                //     if(dataResultMethod >=5){\r\n                //        let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                //        this.state.dataState.skip\r\n                //         methodDataState={skip:skipcount,take:this.state.dataState.take}\r\n                //     }\r\n                // }\r\n\r\n                \r\n                // dataResult={process(this.props.masterData[\"TestSection\"], \r\n                //     (this.props.screenName === undefined || this.props.screenName === \"IDS_SECTION\") ? \r\n                //     this.state.sectionDataState : { skip: 0, take: 10 })}\r\n\r\n                //     dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n\r\n                // this.setState({\r\n                //     data: this.props.Login.masterData, \r\n                //     dataResult: process(this.props.Login.masterData, dataState),\r\n                //     dataState\r\n                // });\r\n\r\n        //     // Maintain pagination after delete\r\n        // const totalRecords = this.props.masterData[\"TestMethod\"].length;\r\n        // const currentPageRecords = this.props.dataState.take;\r\n        // const currentSkip = this.props.dataState.skip;\r\n\r\n        // // If there are fewer records in the current page (because of a deletion), adjust skip\r\n        // if (totalRecords % currentPageRecords === 0 && currentSkip > 0) {\r\n        //     this.setState({\r\n        //         methodDataState: { ...methodDataState, skip: currentSkip - currentPageRecords }\r\n        //     });\r\n        // }\r\n\r\n\r\n\r\n            this.setState({ testFileDataState,sectionDataState, methodDataState, instrumentCatDataState, containerTypeDataState, testPackageDataState,testClinicalSpecDataState });\r\n        }\r\n    }\r\n}\r\n\r\nexport default injectIntl(TestView);"]},"metadata":{},"sourceType":"module"}