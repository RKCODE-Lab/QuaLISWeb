{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\DynamicSlideout.jsx\";\nimport React from 'react';\nimport { Row, Col, Button, Form, InputGroup, Nav } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport LabelComponent from '../../components/label/label.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport { orderType, transactionStatus, SampleType } from '../../components/Enumeration';\nimport { toast } from 'react-toastify';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormEmail from '../../components/form-email/form-email.component';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport DropZone from '../../components/dropzone/dropzone.component';\nimport { faPlus, faSearch, faFilter, faEye, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FormSelectSearchComponent from '../../components/form-select-search/Form-select-search-componnet'; // import CollapseTransition from './collapseTransition'\n\nclass DynamicSlideout extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderSwitch = (control, selectedRecord, componentLength, componentRowLength, count1) => {\n      const index = this.props.editfield ? this.props.editfield.findIndex(x => x.label === control.label) : -1;\n      let checkReadOnly = false;\n\n      if (index !== -1) {\n        const listdata = this.props.editfield[index] && this.props.editfield[index].editableuntill || [];\n        checkReadOnly = listdata ? this.props.selectedSample && this.props.selectedSample.ntransactionstatus ? !listdata.includes(this.props.selectedSample.ntransactionstatus) : false : false;\n      } // if(control.name  && control.name === 'manualordertype')\n      // {\n      //     manualOrderTypeData = this.props.selectedRecord[control.label];\n      // }\n      // if(control.name  && control.name === 'manualordertype')\n      // {\n      //     if(this.props.templateData)\n      //     {\n      //         for (var i = 0; i < this.props.templateData.length; i++) {\n      //             if (this.props.templateData[i].children)\n      //             {\n      //                 for (var j = 0; j < this.props.templateData[i].children.length; j++) {\n      //                     if (this.props.templateData[i].children[j].children)\n      //                     {\n      //                         for (var k = 0; k < this.props.templateData[i].children[j].children.length; k++) {\n      //                             if(this.props.templateData[i].children[j].children[k].name === 'manualordertype')\n      //                             {\n      //                                 manualOrderTypeData = this.props.selectedRecord[this.props.templateData[i].children[j].children[k].label];\n      //                                 break;\n      //                             }\n      //                         }\n      //                     }  \n      //                     else{\n      //                         if(this.props.templateData[i].children[j].name === 'manualordertype')\n      //                         {\n      //                             manualOrderTypeData = this.props.selectedRecord[this.props.templateData[i].children[j].label];\n      //                             break;\n      //                         }\n      //                     }                      \n      //                 }\n      //             }            \n      //         }\n      //     }\n      // }\n      // console.log(\"control.name, manualOrderTypeData:\", control.name, manualOrderTypeData);\n      // if (control.name  && control.name === 'manualorderid'){\n      //     if(this.props.sampleType.value === 5 ){\n      //         if(this.props.sampleType.item.nportalrequired === 3){\n      //             if(manualOrderTypeData.value === 1){\n      //                 //manual order\n      //                 showAddMaster = true;                        \n      //             }\n      //         }\n      //         else{\n      //             showAddMaster = true;\n      //         }\n      //     }  \n      //     else{\n      //         showAddMaster = true;\n      //     }                     \n      // }\n      // else{\n      //     showAddMaster = true;\n      // }\n      //console.log(\"showAddMaster:\", showAddMaster);\n\n\n      switch (control.inputtype) {\n        case 'frontendsearchfilter':\n          {\n            return /*#__PURE__*/React.createElement(Row, {\n              style: {\n                height: '50px'\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(\"button\", {\n              className: \"btn btn-primary btn-padd-custom\",\n              disabled: control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : false // style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\n              ,\n              onClick: e => this.props.custombuttonclick(e, control),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faFilter,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 33\n              }\n            }), \" \", this.props.intl.formatMessage({\n              id: control.label\n            }))));\n          }\n\n        case 'backendsearchfilter':\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, control.table.item.masterAdd && control.isAddMaster && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] && this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.addControlCode) !== -1 ? /*#__PURE__*/React.createElement(Row, {\n              style: {\n                height: '50px'\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(Col, {\n              md: componentLength === 1 ? componentRowLength > 1 ? 10 : 11 : componentRowLength > 1 ? 8 : 10,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(\"button\", {\n              className: \"btn btn-primary btn-padd-custom\",\n              disabled: control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : false // style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\n              ,\n              onClick: e => this.props.custombuttonclick(e, control),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 41\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faSearch,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 45\n              }\n            }), \" \", this.props.intl.formatMessage({\n              id: control.label\n            }))), /*#__PURE__*/React.createElement(Col, {\n              md: 1,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(Nav.Link, {\n              \"data-tip\": this.props.intl.formatMessage({\n                id: \"IDS_ADD\"\n              }),\n              className: \"btn btn-circle outline-grey mr-2\",\n              onClick: e => this.props.addMasterRecord(control),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 41\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faPlus,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 45\n              }\n            })))) : /*#__PURE__*/React.createElement(Row, {\n              style: {\n                height: '50px'\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 42\n              }\n            }, /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(\"button\", {\n              className: \"btn btn-primary btn-padd-custom\",\n              disabled: control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : false // style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\n              ,\n              onClick: e => this.props.custombuttonclick(e, control),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 41\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faSearch,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 45\n              }\n            }), \" \", this.props.intl.formatMessage({\n              id: control.label\n            })))));\n          }\n\n        case 'combo':\n          {\n            // console.log(this.props.sampleType)\n            // console.log('check',(control.table.item.masterAdd && control.isAddMaster\n            //     && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] &&\n            //     (this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.addControlCode) !== -1) \n            //     &&(this.props.sampleType&&this.props.sampleType.value === 5))\n            //    );\n            return /*#__PURE__*/React.createElement(React.Fragment, null, \"  \", /*#__PURE__*/React.createElement(Row, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 25\n              }\n            }, control.name && control.name === 'manualsampleid' ? this.props.sampleType && this.props.sampleType.value === SampleType.CLINICALTYPE && this.props.sampleType.item.nportalrequired === transactionStatus.YES && this.props.comboComponents && this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')] && this.props.selectedRecord[this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')].label] && this.props.selectedRecord[this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')].label].value === orderType.MANUAL ? \"\" : /*#__PURE__*/React.createElement(Col, {\n              md: 12 //md={componentLength === 1 ? componentRowLength > 1 ? 10 : 11 : componentRowLength > 1 ? 8 : 10}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(FormSelectSearchComponent, {\n              name: control.label,\n              as: \"select\",\n              onChange: event => this.props.onComboChange(event, control),\n              formLabel: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              placeholder: this.props.intl.formatMessage({\n                id: \"IDS_SELECTRECORD\"\n              }),\n              isMandatory: control.mandatory,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              options: this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : [],\n              optionId: \"value\",\n              optionValue: \"label\",\n              isMulti: false,\n              isClearable: control.mandatory ? false : true,\n              isDisabled: this.props.operation && this.props.operation === \"update\" && control.iseditablereadonly && control.iseditablereadonly === true && !checkReadOnly ? false : control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              isSearchable: true,\n              select: this.select[count1] && this.select[count1],\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 33\n              }\n            })) : /*#__PURE__*/React.createElement(Col, {\n              md: control.isAddMaster && control.isEditMaster ? 8 : control.isAddMaster || control.isEditMaster || control.isView ? 10 : 12 //md={componentLength === 1 ? componentRowLength > 1 ? 10 : 11 : componentRowLength > 1 ? 8 : 10}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(FormSelectSearchComponent, {\n              name: control.label,\n              as: \"select\",\n              onChange: event => this.props.onComboChange(event, control),\n              formLabel: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              placeholder: this.props.intl.formatMessage({\n                id: \"IDS_SELECTRECORD\"\n              }),\n              isMandatory: control.mandatory,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              options: this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : [],\n              optionId: \"value\",\n              optionValue: \"label\",\n              isMulti: false,\n              isClearable: control.mandatory ? false : true,\n              isDisabled: this.props.operation && this.props.operation === \"update\" && control.iseditablereadonly && control.iseditablereadonly === true && !checkReadOnly ? false : control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              isSearchable: true,\n              select: this.focusCount === count1 ? this.select[count1] : undefined,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 33\n              }\n            })), control.table.item.masterAdd && (control.isAddMaster || control.isEditMaster) ? control.name && control.name === 'manualorderid' ? this.props.sampleType && this.props.sampleType.value === SampleType.CLINICALTYPE && this.props.sampleType.item.nportalrequired === transactionStatus.YES && this.props.comboComponents && this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')] && this.props.selectedRecord[this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')].label] && this.props.selectedRecord[this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')].label].value === orderType.MANUAL ? /*#__PURE__*/React.createElement(React.Fragment, null, control.isAddMaster && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] && this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.addControlCode) !== -1 && /*#__PURE__*/React.createElement(Col, {\n              md: 1,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 45\n              }\n            }, /*#__PURE__*/React.createElement(Nav.Link, {\n              \"data-tip\": this.props.intl.formatMessage({\n                id: \"IDS_ADD\"\n              }),\n              className: \"btn btn-circle outline-grey mr-2\",\n              disabled: this.props.operation === \"update\",\n              onClick: e => this.props.addMasterRecord(control),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 49\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faPlus,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 53\n              }\n            }))), control.isEditMaster && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] && this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.editControlCode) !== -1 && /*#__PURE__*/React.createElement(Col, {\n              md: 1,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 45\n              }\n            }, /*#__PURE__*/React.createElement(Nav.Link, {\n              \"data-tip\": this.props.intl.formatMessage({\n                id: \"IDS_EDIT\"\n              }),\n              className: \"btn btn-circle outline-grey mr-2\",\n              disabled: this.props.operation === \"update\",\n              onClick: e => this.props.editMasterRecord(control, this.props.selectedRecord[control.label]),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 49\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faPencilAlt,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 53\n              }\n            })))) : \"\" : /*#__PURE__*/React.createElement(React.Fragment, null, control.isAddMaster && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] && this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.addControlCode) !== -1 && /*#__PURE__*/React.createElement(Col, {\n              md: 1,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 41\n              }\n            }, /*#__PURE__*/React.createElement(Nav.Link, {\n              \"data-tip\": this.props.intl.formatMessage({\n                id: \"IDS_ADD\"\n              }),\n              className: \"btn btn-circle outline-grey mr-2\",\n              disabled: this.props.operation === \"update\",\n              onClick: e => this.props.addMasterRecord(control),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 45\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faPlus,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 49\n              }\n            }))), control.isEditMaster && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] && this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.editControlCode) !== -1 && /*#__PURE__*/React.createElement(Col, {\n              md: 1,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 45\n              }\n            }, /*#__PURE__*/React.createElement(Nav.Link, {\n              \"data-tip\": this.props.intl.formatMessage({\n                id: \"IDS_EDIT\"\n              }),\n              className: \"btn btn-circle outline-grey mr-2\",\n              disabled: this.props.operation === \"update\",\n              onClick: e => this.props.editMasterRecord(control, this.props.selectedRecord[control.label]),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 49\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faPencilAlt,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 53\n              }\n            })))) : \"\", control.isView && this.props.sampleType && this.props.sampleType.value === SampleType.CLINICALTYPE && this.props.sampleType.item.nportalrequired === transactionStatus.YES && this.props.comboComponents && this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')] && this.props.selectedRecord[this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')].label] && this.props.selectedRecord[this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')].label].value === orderType.EXTERNAL ? /*#__PURE__*/React.createElement(Col, {\n              md: 1,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(Nav.Link, {\n              \"data-tip\": this.props.intl.formatMessage({\n                id: \"IDS_VIEW\"\n              }),\n              className: \"btn btn-circle outline-grey mr-2\",\n              disabled: this.props.operation === \"update\",\n              onClick: e => this.props.onClickView(control),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faEye,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 37\n              }\n            }))) : \"\"));\n          }\n\n        case 'textinput':\n          {\n            return /*#__PURE__*/React.createElement(FormInput, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              type: \"text\",\n              placeholder: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              maxLength: control.sfieldlength,\n              isDisabled: this.props.operation && this.props.operation === \"update\" && control.iseditablereadonly && control.iseditablereadonly === true && !checkReadOnly ? false : control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              onChange: event => this.props.onInputOnChange(event, control, control.label),\n              inputRef: this.focusCount === count1 ? this.select[count1] : undefined,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'email':\n          {\n            return /*#__PURE__*/React.createElement(FormEmail, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              type: \"email\",\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              placeholder: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              maxLength: control.sfieldlength,\n              isDisabled: this.props.operation && this.props.operation === \"update\" && control.iseditablereadonly && control.iseditablereadonly === true && !checkReadOnly ? false : control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              onChange: event => this.props.onInputOnChange(event, control.label) // ref={this.select}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'textarea':\n          {\n            return /*#__PURE__*/React.createElement(FormTextarea, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              type: \"text\",\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              placeholder: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              onChange: event => this.props.onInputOnChange(event, control.label),\n              rows: \"2\",\n              maxLength: control.sfieldlength,\n              isDisabled: this.props.operation && this.props.operation === \"update\" && control.iseditablereadonly && control.iseditablereadonly === true && !checkReadOnly ? false : control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'toggle':\n          return /*#__PURE__*/React.createElement(CustomSwitch, {\n            label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n            type: \"switch\",\n            name: control.label,\n            onChange: event => this.props.onInputOnChange(event),\n            placeholder: control.label,\n            defaultValue: this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false,\n            checked: this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false,\n            disabled: this.props.operation && this.props.operation === \"update\" && control.iseditablereadonly && control.iseditablereadonly === true && !checkReadOnly ? false : control.readonly ? control.readonly : checkReadOnly,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 21\n            }\n          });\n\n        case 5:\n          {\n            return /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 25\n              }\n            }, control.isMultiLingualLabel ? this.props.intl.formatMessage({\n              id: control.squestion\n            }) : control.squestion, control.mandatory && /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 464,\n                columnNumber: 70\n              }\n            }, \"*\")));\n          }\n\n        case 6:\n          {\n            return /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              htmlFor: control.squestion,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 25\n              }\n            }, control.squestion, control.mandatory && /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 106\n              }\n            }, \"*\")), /*#__PURE__*/React.createElement(Button, {\n              className: \"btn\",\n              name: control.squestion,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 25\n              }\n            }, control.squestion));\n          }\n\n        case 'Numeric':\n          {\n            return /*#__PURE__*/React.createElement(FormNumericInput, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              className: \"form-control\",\n              type: \"text\",\n              strict: true,\n              value: control.precision && control.precision.length > 0 ? this.props.selectedRecord[control.label] : this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              maxLength: control.sfieldlength,\n              isDisabled: this.props.operation && this.props.operation === \"update\" && control.iseditablereadonly && control.iseditablereadonly === true && !checkReadOnly ? false : control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              onChange: event => this.props.onNumericInputChange(event, control.label),\n              precision: control.precision || 0,\n              onBlur: event => this.props.onNumericBlur(event, control) // max={control.max}\n              //min={control.min}\n              ,\n              noStyle: true,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'date':\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, control.timezone ? /*#__PURE__*/React.createElement(Row, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(Col, {\n              md: 6,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(DateTimePicker, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              className: \"form-control\",\n              placeholderText: this.props.intl.formatMessage({\n                id: \"IDS_SELECTDATE\"\n              }),\n              selected: selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : control.loadcurrentdate ? new Date() : null,\n              dateFormat: control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"],\n              timeInputLabel: this.props.intl.formatMessage({\n                id: \"IDS_TIME\"\n              }),\n              showTimeInput: control.dateonly === true ? false : true,\n              showTimeSelectOnly: control.timeonly,\n              isDisabled: this.props.operation && this.props.operation === \"update\" && control.iseditablereadonly && control.iseditablereadonly === true && !checkReadOnly ? false : control.recordbasedreadonly ? this.props.selectedRecord[control.parentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly // isClearable={false}\n              ,\n              isMandatory: control.mandatory,\n              maxDate: control.maxdate ? new Date(control.maxdate) : this.props.CurrentTime,\n              maxTime: control.maxdate ? new Date(control.maxdate) : this.props.CurrentTime,\n              minDate: control.mindate ? new Date(control.mindate) : this.props.CurrentTime,\n              minTime: control.mindate ? new Date(control.mindate) : this.props.CurrentTime,\n              onChange: date => this.props.handleDateChange(date, control.label),\n              value: this.props.selectedRecord[control.label + \"value\"] ? new Date(this.props.selectedRecord[control.label + \"value\"]) : new Date(),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 37\n              }\n            })), /*#__PURE__*/React.createElement(Col, {\n              md: 6,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 535,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n              name: `tz${control.label}`,\n              as: \"select\",\n              onChange: event => this.props.onComboChange(event, control, `tz${control.label}`),\n              formLabel: this.props.intl.formatMessage({\n                id: \"IDS_TIMEZONE\"\n              }),\n              placeholder: this.props.intl.formatMessage({\n                id: \"IDS_SELECTRECORD\"\n              }),\n              isMandatory: true // defaultValue={this.props.defaultTimeZone}\n              ,\n              value: this.props.selectedRecord[`tz${control.label}`] ? this.props.selectedRecord[`tz${control.label}`] : this.props.defaultTimeZone,\n              options: this.props.timeZoneList,\n              optionId: \"value\",\n              optionValue: \"label\",\n              isMulti: false,\n              isDisabled: this.props.operation && this.props.operation === \"update\" && control.iseditablereadonly && control.iseditablereadonly === true && !checkReadOnly ? false : control.readonly ? control.readonly : checkReadOnly,\n              isSearchable: false,\n              isClearable: false,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 536,\n                columnNumber: 37\n              }\n            }))) : /*#__PURE__*/React.createElement(DateTimePicker, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              className: \"form-control\",\n              placeholderText: this.props.intl.formatMessage({\n                id: \"IDS_SELECTDATE\"\n              }),\n              selected: selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : null,\n              dateFormat: control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"],\n              timeInputLabel: this.props.intl.formatMessage({\n                id: \"IDS_TIME\"\n              }),\n              showTimeInput: control.dateonly === true ? false : true,\n              showTimeSelectOnly: control.timeonly // isClearable={false}\n              ,\n              isDisabled: this.props.operation && this.props.operation === \"update\" && control.iseditablereadonly && control.iseditablereadonly === true && !checkReadOnly ? false : control.recordbasedreadonly ? this.props.selectedRecord[control.parentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              isMandatory: control.mandatory,\n              maxDate: control.hideafterdate ? this.props.selectedRecord[control.label + \"max\"] ? this.props.selectedRecord[control.label + \"max\"] : this.props.CurrentTime : this.props.CurrentTime,\n              maxTime: control.hideafterdate ? this.props.selectedRecord[control.label + \"max\"] ? this.props.selectedRecord[control.label + \"max\"] : this.props.CurrentTime : this.props.CurrentTime,\n              minDate: control.hidebeforedate ? this.props.selectedRecord[control.label + \"min\"] ? this.props.selectedRecord[control.label + \"min\"] : this.props.CurrentTime : this.props.CurrentTime,\n              minTime: control.hidebeforedate ? this.props.selectedRecord[control.label + \"min\"] ? this.props.selectedRecord[control.label + \"min\"] : this.props.CurrentTime : this.props.CurrentTime,\n              onChange: date => this.props.handleDateChange(date, control.label),\n              value: this.props.selectedRecord[control.label + \"value\"] ? this.props.selectedRecord[control.label + \"value\"] : new Date(),\n              openToDate: this.props.selectedRecord[control.label + \"value\"] ? this.props.selectedRecord[control.label + \"value\"] : new Date() // showTimeInput={true}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 557,\n                columnNumber: 29\n              }\n            }));\n          }\n\n        case 'checkbox':\n          {\n            let checkboxes = control.radioOptions ? control.radioOptions.tags : [];\n            const data = this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label].toLowerCase().split(\",\") : [];\n            return /*#__PURE__*/React.createElement(InputGroup, {\n              size: 'lg',\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 600,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 601,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              as: \"legend\",\n              htmlFor: control.label,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 602,\n                columnNumber: 29\n              }\n            }, control.displayname[this.props.userInfo.slanguagetypecode] || control.label, control.mandatory ? /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 603,\n                columnNumber: 130\n              }\n            }, \"*\") : \"\"), checkboxes.map(checkbox => /*#__PURE__*/React.createElement(Form.Check, {\n              inline: true,\n              type: \"checkbox\",\n              name: control.label,\n              label: control.isMultiLingualLabel ? this.props.intl.formatMessage({\n                id: checkbox.text\n              }) : checkbox.text // label={checkbox.text}\n              ,\n              onChange: event => this.props.onInputOnChange(event, control, checkbox.text),\n              id: checkbox.id,\n              checked: this.props.selectedRecord[control.label] ? data.includes(checkbox.text.toLowerCase().trim()) ? true : false : false,\n              defaultChecked: this.props.selectedRecord[control.label] ? data.includes(checkbox.text.toLowerCase().trim()) ? true : false : false,\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              size: 'lg',\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 33\n              }\n            }))));\n          }\n\n        case 'radio':\n          {\n            let radioButtons = control.radioOptions ? control.radioOptions.tags : [];\n            return /*#__PURE__*/React.createElement(\"fieldset\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 634,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 635,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              as: \"legend\",\n              htmlFor: control.label,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 636,\n                columnNumber: 29\n              }\n            }, control.displayname[this.props.userInfo.slanguagetypecode] || control.label, control.mandatory ? /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 636,\n                columnNumber: 175\n              }\n            }, \"*\") : \"\"), radioButtons.map(radioButton => /*#__PURE__*/React.createElement(Form.Check, {\n              inline: true,\n              type: \"radio\",\n              name: control.label,\n              label: radioButton.text,\n              onChange: event => this.props.onInputOnChange(event, control, radioButton.text),\n              id: radioButton.id,\n              checked: selectedRecord[control.label] ? radioButton.text.toLowerCase().trim() === selectedRecord[control.label].toLowerCase().trim() ? true : false : false,\n              defaultChecked: selectedRecord[control.label] ? radioButton.text.toLowerCase().trim() === selectedRecord[control.label].toLowerCase().trim() ? true : false : false,\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              disabled: this.props.operation && this.props.operation === \"update\" && control.iseditablereadonly && control.iseditablereadonly === true && !checkReadOnly ? false : control.readonly ? control.readonly : checkReadOnly,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 639,\n                columnNumber: 33\n              }\n            }))));\n          }\n\n        case 'predefineddropdown':\n          {\n            let radioButtons = control.radioOptions && control.radioOptions.tags.map(x => {\n              return {\n                label: x.text,\n                value: x.text\n              };\n            });\n            return /*#__PURE__*/React.createElement(FormSelectSearch, {\n              name: control.label,\n              as: \"select\",\n              onChange: event => this.props.onComboChange(event, control),\n              formLabel: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              placeholder: this.props.intl.formatMessage({\n                id: \"IDS_SELECTRECORD\"\n              }),\n              isMandatory: control.mandatory,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              options: radioButtons || [],\n              isMulti: false,\n              isClearable: control.mandatory ? false : true,\n              isDisabled: this.props.operation && this.props.operation === \"update\" && control.iseditablereadonly && control.iseditablereadonly === true && !checkReadOnly ? false : control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              isSearchable: true,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 666,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'files':\n          {\n            return /*#__PURE__*/React.createElement(DropZone, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label //maxFiles={control.maxFiles || 1}\n              ,\n              maxFiles: 1,\n              accept: control.accept && control.accept.value === '*.*' ? undefined : control.accept && control.accept.value,\n              minSize: 0,\n              maxSize: 1,\n              onDrop: event => this.props.onDropFile(event, control.label, control.maxFiles) // multiple={control.maxFiles > 1 ? true : false}\n              ,\n              multiple: false,\n              editFiles: this.props.selectedRecord ? this.props.selectedRecord : {} // attachmentTypeCode={this.props.operation === \"update\" ? attachmentType.PRN : \"\"}\n              // fileSizeName=\"nfilesize\"\n              ,\n              fileName: control.label,\n              deleteAttachment: this.props.deleteAttachment,\n              actionType: this.props.actionType,\n              isMandatory: control.mandatory,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 686,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'label':\n          {\n            /**ALPD-4466 - Label Component - L.Subashini**/\n            const labelClass = `${control.bold === true ? 'font-weight-bold' : ''}\n                                   ${control.italic === true ? 'font-italic' : ''}`; ////                   ${control.lowercase === true ? 'text-lowercase' :''}\n            //                   ${control.uppercase === true ? 'text-uppercase' :''}\n            //                   ${control.capitalize === true ? 'text-capitalize' :''}\n\n            const underLine = control.underline === true ? 'underline' : 'none'; // console.log(\"control.sfontsize:\", control);\n\n            const labelStyle = {\n              'font-size': `${control.sfontsize}px`,\n              'text-decoration': `${underLine}`\n            }; // console.log(\"labelStyle:\", labelStyle);\n\n            return /*#__PURE__*/React.createElement(LabelComponent, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              className: labelClass,\n              style: labelStyle,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 722,\n                columnNumber: 21\n              }\n            });\n          }\n\n        default:\n          return \"\";\n      }\n    };\n\n    this.onSaveClick = () => {\n      if (this.props.needValidation) {\n        const failedControls = [];\n        const mandatoryFields = [];\n        this.props.templateData.map(control => control.nmandatoryfield === transactionStatus.YES ? mandatoryFields.push(control) : '');\n        mandatoryFields.forEach(item => {\n          if (this.props.selectedRecord && this.props.selectedRecord[item.nchecklistversionqbcode] && this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue) {\n            if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"object\") {\n              //to validate FormSelectSearch component\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            } else if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"string\") {\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.trim().length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            } else {\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            }\n          } else {\n            const alertMessage = item.squestion;\n            failedControls.push(alertMessage);\n          }\n        }); // console.log(\"validationPassed:\", failedControls);\n\n        if (failedControls.length === 0) {\n          this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode);\n        } else {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${failedControls[0]}`);\n        }\n      } else {\n        this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode);\n      }\n    };\n\n    this.formElement = React.createRef();\n    this.select = [];\n    let count = 0;\n    this.focusCount = -1;\n    this.props.templateData.map(item => item.children.map(column => column.children.map(componnet => {\n      if (componnet.hasOwnProperty('children')) {\n        componnet.children.map(componnetrow => {\n          if (componnetrow.inputtype === 'combo' || componnetrow.inputtype === 'textinput') {\n            if (componnetrow.autoFocus) {\n              this.focusCount = count;\n            }\n          }\n\n          count++;\n        });\n      } else {\n        if (componnet.inputtype === 'combo' || componnet.inputtype === 'textinput') {\n          if (componnet.autoFocus) {\n            this.focusCount = count;\n          }\n        }\n\n        count++;\n      }\n    })));\n    if (this.focusCount !== -1) this.select[this.focusCount] = React.createRef();\n  }\n\n  componentDidMount() {\n    if (this.props.triggerCallback !== undefined && this.props.enableCallback) console.log(\"this.formElement:\", this.formElement);\n    console.log(\"this.formElement:\", this.formElement.current);\n    setTimeout(() => {\n      this.props.triggerCallback(this.formElement.current.clientHeight + 30);\n    }, 200);\n\n    if (this.focusCount !== -1) {\n      if (this.select[this.focusCount] && this.select[this.focusCount].current) {\n        setTimeout(() => {\n          this.select[this.focusCount].current && this.select[this.focusCount].current.focus();\n        }, 400);\n      }\n    }\n  }\n\n  render() {\n    let count1 = 0;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.formElement,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814,\n        columnNumber: 13\n      }\n    }, this.props.templateData ? this.props.templateData.map(item => /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820,\n        columnNumber: 29\n      }\n    }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n      md: 12 / item.children.length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 41\n      }\n    }, column.children.map(component => {\n      return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 829,\n          columnNumber: 61\n        }\n      }, component.children.map(componentrow => /*#__PURE__*/React.createElement(Col, {\n        md: 12 / component.children.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 69\n        }\n      }, componentrow.recordbasedshowhide ? this.props.selectedRecord[componentrow.radioparentLabel] === componentrow.recordbasedhide ? \"\" : this.renderSwitch(componentrow, this.props.selectedRecord, item.children.length, component.children.length, count1++) : this.renderSwitch(componentrow, this.props.selectedRecord, item.children.length, component.children.length, count1++)))) : /*#__PURE__*/React.createElement(React.Fragment, null, component.recordbasedshowhide ? this.props.selectedRecord[component.radioparentLabel] === component.recordbasedhide ? \"\" : this.renderSwitch(component, this.props.selectedRecord, item.children.length, undefined, count1++) : this.renderSwitch(component, this.props.selectedRecord, item.children.length, undefined, count1++));\n    }))) : \"\")) : \"\");\n  }\n\n}\n\nexport default injectIntl(DynamicSlideout);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/dynamicpreregdesign/DynamicSlideout.jsx"],"names":["React","Row","Col","Button","Form","InputGroup","Nav","injectIntl","FormTextarea","FormInput","LabelComponent","FormSelectSearch","DateTimePicker","orderType","transactionStatus","SampleType","toast","CustomSwitch","FormEmail","FormNumericInput","DropZone","faPlus","faSearch","faFilter","faEye","faPencilAlt","FontAwesomeIcon","FormSelectSearchComponent","DynamicSlideout","Component","constructor","props","renderSwitch","control","selectedRecord","componentLength","componentRowLength","count1","index","editfield","findIndex","x","label","checkReadOnly","listdata","editableuntill","selectedSample","ntransactionstatus","includes","inputtype","height","recordbasedreadonly","radioparentLabel","recordbasedhide","e","custombuttonclick","intl","formatMessage","id","table","item","masterAdd","isAddMaster","userRoleControlRights","nformcode","ncontrolcode","addControlCode","addMasterRecord","name","sampleType","value","CLINICALTYPE","nportalrequired","YES","comboComponents","MANUAL","event","onComboChange","displayname","userInfo","slanguagetypecode","mandatory","comboData","operation","iseditablereadonly","readonly","select","isEditMaster","isView","focusCount","undefined","editControlCode","editMasterRecord","EXTERNAL","onClickView","sfieldlength","onInputOnChange","isMultiLingualLabel","squestion","precision","length","onNumericInputChange","onNumericBlur","timezone","Date","loadcurrentdate","dateonly","timeonly","parentLabel","maxdate","CurrentTime","mindate","date","handleDateChange","defaultTimeZone","timeZoneList","hideafterdate","hidebeforedate","checkboxes","radioOptions","tags","data","toLowerCase","split","map","checkbox","text","trim","radioButtons","radioButton","accept","onDropFile","maxFiles","deleteAttachment","actionType","labelClass","bold","italic","underLine","underline","labelStyle","sfontsize","onSaveClick","needValidation","failedControls","mandatoryFields","templateData","nmandatoryfield","push","forEach","nchecklistversionqbcode","sdefaultvalue","alertMessage","Login","nregtypecode","nregsubtypecode","info","formElement","createRef","count","children","column","componnet","hasOwnProperty","componnetrow","autoFocus","componentDidMount","triggerCallback","enableCallback","console","log","current","setTimeout","clientHeight","focus","render","component","componentrow","recordbasedshowhide"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Button, Form, InputGroup, Nav } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport LabelComponent from '../../components/label/label.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport { orderType, transactionStatus, SampleType } from '../../components/Enumeration'\r\nimport { toast } from 'react-toastify';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormEmail from '../../components/form-email/form-email.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport DropZone from '../../components/dropzone/dropzone.component';\r\nimport { faPlus, faSearch,  faFilter, faEye,  faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FormSelectSearchComponent from '../../components/form-select-search/Form-select-search-componnet';\r\n\r\n// import CollapseTransition from './collapseTransition'\r\n\r\nclass DynamicSlideout extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formElement = React.createRef();\r\n        this.select = [];\r\n        let count = 0;\r\n        this.focusCount = -1;\r\n\r\n        this.props.templateData.map((item) =>\r\n            item.children.map((column) =>\r\n                column.children.map((componnet) => {\r\n                    if (componnet.hasOwnProperty('children')) {\r\n                        componnet.children.map((componnetrow) => {\r\n                            if (componnetrow.inputtype === 'combo' || componnetrow.inputtype === 'textinput') {\r\n                                if (componnetrow.autoFocus) {\r\n                                    this.focusCount = count;\r\n                                }\r\n                            }\r\n                            count++;\r\n                        }\r\n                        )\r\n                    } else {\r\n                        if (componnet.inputtype === 'combo' || componnet.inputtype === 'textinput') {\r\n                            if (componnet.autoFocus) {\r\n                                this.focusCount = count;\r\n                            }\r\n                        }\r\n                        count++;\r\n                    }\r\n                }\r\n                )\r\n            ))\r\n        if (this.focusCount !== -1)\r\n            this.select[this.focusCount] = React.createRef();\r\n    }\r\n    renderSwitch = (control, selectedRecord, componentLength, componentRowLength, count1) => {\r\n        const index = this.props.editfield ?\r\n            this.props.editfield.findIndex(x => x.label === control.label) : -1\r\n        let checkReadOnly = false;\r\n        if (index !== -1) {\r\n            const listdata = (this.props.editfield[index] && this.props.editfield[index].editableuntill) || []\r\n            checkReadOnly = listdata ? this.props.selectedSample && this.props.selectedSample.ntransactionstatus ?\r\n                !listdata.includes(this.props.selectedSample.ntransactionstatus)\r\n                : false : false\r\n        }\r\n\r\n\r\n        // if(control.name  && control.name === 'manualordertype')\r\n        // {\r\n        //     manualOrderTypeData = this.props.selectedRecord[control.label];\r\n        // }\r\n\r\n        // if(control.name  && control.name === 'manualordertype')\r\n        // {\r\n        //     if(this.props.templateData)\r\n        //     {\r\n        //         for (var i = 0; i < this.props.templateData.length; i++) {\r\n\r\n        //             if (this.props.templateData[i].children)\r\n        //             {\r\n        //                 for (var j = 0; j < this.props.templateData[i].children.length; j++) {\r\n\r\n        //                     if (this.props.templateData[i].children[j].children)\r\n        //                     {\r\n        //                         for (var k = 0; k < this.props.templateData[i].children[j].children.length; k++) {\r\n        //                             if(this.props.templateData[i].children[j].children[k].name === 'manualordertype')\r\n        //                             {\r\n        //                                 manualOrderTypeData = this.props.selectedRecord[this.props.templateData[i].children[j].children[k].label];\r\n        //                                 break;\r\n        //                             }\r\n        //                         }\r\n        //                     }  \r\n        //                     else{\r\n        //                         if(this.props.templateData[i].children[j].name === 'manualordertype')\r\n        //                         {\r\n        //                             manualOrderTypeData = this.props.selectedRecord[this.props.templateData[i].children[j].label];\r\n        //                             break;\r\n        //                         }\r\n        //                     }                      \r\n\r\n        //                 }\r\n        //             }            \r\n\r\n\r\n        //         }\r\n\r\n        //     }\r\n        // }\r\n        // console.log(\"control.name, manualOrderTypeData:\", control.name, manualOrderTypeData);\r\n        // if (control.name  && control.name === 'manualorderid'){\r\n        //     if(this.props.sampleType.value === 5 ){\r\n        //         if(this.props.sampleType.item.nportalrequired === 3){\r\n        //             if(manualOrderTypeData.value === 1){\r\n        //                 //manual order\r\n        //                 showAddMaster = true;                        \r\n        //             }\r\n        //         }\r\n        //         else{\r\n        //             showAddMaster = true;\r\n        //         }\r\n        //     }  \r\n        //     else{\r\n        //         showAddMaster = true;\r\n        //     }                     \r\n        // }\r\n        // else{\r\n        //     showAddMaster = true;\r\n        // }\r\n        //console.log(\"showAddMaster:\", showAddMaster);\r\n\r\n\r\n\r\n\r\n        switch (control.inputtype) {\r\n            case 'frontendsearchfilter': {\r\n                return (\r\n                    <Row style={{ height: '50px' }}>\r\n                        <Col md={12}>\r\n\r\n                            <button className=\"btn btn-primary btn-padd-custom\"\r\n                                disabled={control.recordbasedreadonly ?\r\n                                    this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : false}\r\n                                // style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                onClick={(e) => this.props.custombuttonclick(e, control)}\r\n                            >\r\n                                <FontAwesomeIcon icon={faFilter}></FontAwesomeIcon> { }\r\n                                {this.props.intl.formatMessage({ id: control.label })}\r\n                            </button>\r\n                        </Col>\r\n                    </Row>\r\n                );\r\n            }\r\n            case 'backendsearchfilter': {\r\n                return (\r\n                    <>\r\n                        {\r\n                            control.table.item.masterAdd && control.isAddMaster\r\n                                && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] &&\r\n                                (this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.addControlCode) !== -1) ?\r\n                                <Row style={{ height: '50px' }}>\r\n                                    <Col md={componentLength === 1 ? componentRowLength > 1 ? 10 : 11 : componentRowLength > 1 ? 8 : 10}>\r\n                                        <button className=\"btn btn-primary btn-padd-custom\"\r\n                                            disabled={control.recordbasedreadonly ?\r\n                                                this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : false}\r\n                                            // style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                            onClick={(e) => this.props.custombuttonclick(e, control)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faSearch}></FontAwesomeIcon> { }\r\n                                            {this.props.intl.formatMessage({ id: control.label })}\r\n                                        </button>\r\n                                    </Col>\r\n                                    <Col md={1}>\r\n                                        <Nav.Link\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                            onClick={(e) => this.props.addMasterRecord(control)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPlus} />\r\n                                        </Nav.Link>\r\n                                    </Col>\r\n                                </Row> : <Row style={{ height: '50px' }}>\r\n                                    <Col md={12}>\r\n                                        <button className=\"btn btn-primary btn-padd-custom\"\r\n                                            disabled={control.recordbasedreadonly ?\r\n                                                this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : false}\r\n                                            // style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                            onClick={(e) => this.props.custombuttonclick(e, control)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faSearch}></FontAwesomeIcon> { }\r\n                                            {this.props.intl.formatMessage({ id: control.label })}\r\n                                        </button>\r\n                                    </Col></Row>}\r\n                    </>\r\n                );\r\n            }\r\n            case 'combo': {\r\n                // console.log(this.props.sampleType)\r\n                // console.log('check',(control.table.item.masterAdd && control.isAddMaster\r\n                //     && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] &&\r\n                //     (this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.addControlCode) !== -1) \r\n                //     &&(this.props.sampleType&&this.props.sampleType.value === 5))\r\n                //    );\r\n                return (\r\n                    <>  <Row>\r\n                        {control.name && control.name === 'manualsampleid' ? (this.props.sampleType && this.props.sampleType.value === SampleType.CLINICALTYPE\r\n                            && this.props.sampleType.item.nportalrequired === transactionStatus.YES\r\n                            && this.props.comboComponents\r\n                            && this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')] &&\r\n                            this.props.selectedRecord[this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')].label] &&\r\n                            this.props.selectedRecord[this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')].label].value === orderType.MANUAL) ? \"\" :\r\n                            <Col md={12}\r\n                            //md={componentLength === 1 ? componentRowLength > 1 ? 10 : 11 : componentRowLength > 1 ? 8 : 10}\r\n                            >\r\n                                <FormSelectSearchComponent\r\n                                    name={control.label}\r\n                                    as={\"select\"}\r\n                                    onChange={(event) => this.props.onComboChange(event, control)}\r\n                                    formLabel={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    isMandatory={control.mandatory}\r\n                                    value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                                    options={this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : []}\r\n                                    optionId={\"value\"}\r\n                                    optionValue={\"label\"}\r\n                                    isMulti={false}\r\n                                    isClearable={control.mandatory ? false : true}\r\n                                    isDisabled={((this.props.operation && this.props.operation === \"update\") && (control.iseditablereadonly && control.iseditablereadonly === true) && !checkReadOnly)? false : (control.recordbasedreadonly ?\r\n                                        this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ?\r\n                                            control.readonly : checkReadOnly)}\r\n                                    isSearchable={true}\r\n                                    select={ this.select[count1]&&this.select[count1]}\r\n\r\n                                />\r\n                            </Col> :\r\n                            <Col md={(control.isAddMaster && control.isEditMaster) ? 8 : (control.isAddMaster || control.isEditMaster || control.isView) ? 10 : 12}\r\n                            //md={componentLength === 1 ? componentRowLength > 1 ? 10 : 11 : componentRowLength > 1 ? 8 : 10}\r\n                            >\r\n                                <FormSelectSearchComponent\r\n                                    name={control.label}\r\n                                    as={\"select\"}\r\n                                    onChange={(event) => this.props.onComboChange(event, control)}\r\n                                    formLabel={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    isMandatory={control.mandatory}\r\n                                    value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                                    options={this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : []}\r\n                                    optionId={\"value\"}\r\n                                    optionValue={\"label\"}\r\n                                    isMulti={false}\r\n                                    isClearable={control.mandatory ? false : true}\r\n                                    isDisabled={((this.props.operation && this.props.operation === \"update\") && (control.iseditablereadonly && control.iseditablereadonly === true) && !checkReadOnly)? false : (control.recordbasedreadonly ?\r\n                                        this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ?\r\n                                            control.readonly : checkReadOnly)}\r\n                                    isSearchable={true}\r\n                                    select={this.focusCount === count1 ? this.select[count1] : undefined}\r\n\r\n                                />\r\n                            </Col>}\r\n\r\n                        {control.table.item.masterAdd && (control.isAddMaster || control.isEditMaster)\r\n                            ?\r\n                            control.name && control.name === 'manualorderid'\r\n                                ? (this.props.sampleType && this.props.sampleType.value === SampleType.CLINICALTYPE\r\n                                    && this.props.sampleType.item.nportalrequired === transactionStatus.YES\r\n                                    && this.props.comboComponents\r\n                                    && this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')] &&\r\n                                    this.props.selectedRecord[this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')].label] &&\r\n                                    this.props.selectedRecord[this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')].label].value === orderType.MANUAL)\r\n                                    ? (<>\r\n                                        {control.isAddMaster && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] &&\r\n                                            (this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.addControlCode) !== -1) &&\r\n                                            <Col md={1}>\r\n\r\n                                                <Nav.Link\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                    className=\"btn btn-circle outline-grey mr-2\"\r\n                                                    disabled={this.props.operation === \"update\"}\r\n                                                    onClick={(e) => this.props.addMasterRecord(control)}\r\n                                                >\r\n                                                    <FontAwesomeIcon icon={faPlus} />\r\n                                                </Nav.Link>\r\n                                            </Col>}\r\n                                        {control.isEditMaster && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] &&\r\n                                            (this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.editControlCode) !== -1)\r\n                                            &&\r\n                                            <Col md={1}>\r\n                                                <Nav.Link\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                    className=\"btn btn-circle outline-grey mr-2\"\r\n                                                    disabled={this.props.operation === \"update\"}\r\n                                                    onClick={(e) => this.props.editMasterRecord(control, this.props.selectedRecord[control.label])}\r\n                                                >\r\n                                                    <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                </Nav.Link>\r\n                                            </Col>\r\n                                        }\r\n                                    </>)\r\n\r\n                                    : \"\"\r\n                                : (<>\r\n                                    {control.isAddMaster && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] &&\r\n                                        (this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.addControlCode) !== -1) &&\r\n                                        <Col md={1}>\r\n                                            <Nav.Link\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                disabled={this.props.operation === \"update\"}\r\n                                                onClick={(e) => this.props.addMasterRecord(control)}\r\n                                            >\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Nav.Link>\r\n                                        </Col>\r\n                                    }\r\n                                    {control.isEditMaster && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] &&\r\n                                        (this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.editControlCode) !== -1)\r\n                                        && (\r\n                                            <Col md={1}>\r\n                                                <Nav.Link\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                    className=\"btn btn-circle outline-grey mr-2\"\r\n                                                    disabled={this.props.operation === \"update\"}\r\n                                                    onClick={(e) => this.props.editMasterRecord(control, this.props.selectedRecord[control.label])}\r\n                                                >\r\n                                                    <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                </Nav.Link>\r\n                                            </Col>\r\n                                        )\r\n                                    }\r\n                                </>)\r\n\r\n                            : \"\"\r\n                        }\r\n\r\n                        {control.isView && (this.props.sampleType && this.props.sampleType.value === SampleType.CLINICALTYPE\r\n                            && this.props.sampleType.item.nportalrequired === transactionStatus.YES\r\n                            && this.props.comboComponents\r\n                            && this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')] &&\r\n                            this.props.selectedRecord[this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')].label] &&\r\n                            this.props.selectedRecord[this.props.comboComponents[this.props.comboComponents.findIndex(x => x.name === 'manualordertype')].label].value === orderType.EXTERNAL) ?\r\n\r\n                            <Col md={1}>\r\n                                <Nav.Link\r\n                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEW\" })}\r\n                                    className=\"btn btn-circle outline-grey mr-2\"\r\n                                    disabled={this.props.operation === \"update\"}\r\n                                    onClick={(e) => this.props.onClickView(control)}\r\n                                >\r\n                                    <FontAwesomeIcon icon={faEye} />\r\n                                </Nav.Link>\r\n                            </Col> : \"\"}\r\n                            {/* { \r\n                                (<>\r\n                                         {control.isAddMaster && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] &&\r\n                                            (this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.addControlCode) !== -1) &&\r\n                                            <Col md={1}>\r\n\r\n                                                <Nav.Link\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                    className=\"btn btn-circle outline-grey mr-2\"\r\n                                                    disabled={this.props.operation === \"update\"}\r\n                                                    onClick={(e) => this.props.addMasterRecord(control)}\r\n                                                >\r\n                                                    <FontAwesomeIcon icon={faPlus} />\r\n                                                </Nav.Link>\r\n                                            </Col>}\r\n                                            {control.isEditMaster && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] &&\r\n                                            (this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.editControlCode) !== -1)\r\n                                            &&   <Col md={1}>\r\n                                                <Nav.Link\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                    className=\"btn btn-circle outline-grey mr-2\"\r\n                                                    disabled={this.props.operation === \"update\"}\r\n                                                    onClick={(e) => this.props.editMasterRecord(control, this.props.selectedRecord[control.label])}\r\n                                                >\r\n                                                    <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                </Nav.Link>\r\n                                            </Col>\r\n                                        }\r\n                                    </>)      \r\n                            } */}\r\n\r\n                    </Row>\r\n                    </>\r\n                );\r\n\r\n            }\r\n            case 'textinput': {\r\n                return (\r\n                    <FormInput\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        type=\"text\"\r\n                        placeholder={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        isMandatory={control.mandatory}\r\n                        required={control.mandatory}\r\n                        maxLength={ control.sfieldlength}\r\n                        isDisabled={((this.props.operation && this.props.operation === \"update\") && (control.iseditablereadonly && control.iseditablereadonly === true) && !checkReadOnly)? false  : (control.recordbasedreadonly ?\r\n                            this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ?\r\n                                control.readonly : checkReadOnly)}\r\n                        onChange={(event) => this.props.onInputOnChange(event,control, control.label)}\r\n                        inputRef={this.focusCount === count1 ? this.select[count1] : undefined}\r\n                    />\r\n\r\n                );\r\n            }\r\n            case 'email': {\r\n                return (\r\n                    <FormEmail\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        type=\"email\"\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        placeholder={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        isMandatory={control.mandatory}\r\n                        required={control.mandatory}\r\n                        maxLength={control.sfieldlength}\r\n                        isDisabled={((this.props.operation && this.props.operation === \"update\") && (control.iseditablereadonly && control.iseditablereadonly === true) && !checkReadOnly)? false :(control.recordbasedreadonly ?\r\n                            this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ?\r\n                                control.readonly : checkReadOnly)}\r\n                        onChange={(event) => this.props.onInputOnChange(event, control.label)}\r\n                    // ref={this.select}\r\n                    />\r\n                );\r\n            }\r\n            case 'textarea': {\r\n                return (\r\n                    <FormTextarea\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        type=\"text\"\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        placeholder={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        isMandatory={control.mandatory}\r\n                        required={control.mandatory}\r\n                        onChange={(event) => this.props.onInputOnChange(event, control.label)}\r\n                        rows=\"2\"\r\n                        maxLength={control.sfieldlength}\r\n                        isDisabled={((this.props.operation && this.props.operation === \"update\") && (control.iseditablereadonly && control.iseditablereadonly === true) && !checkReadOnly)? false :control.recordbasedreadonly ?\r\n                            this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ?\r\n                                control.readonly : checkReadOnly}\r\n                    />\r\n                );\r\n            }\r\n            case 'toggle':\r\n                return (\r\n                    <CustomSwitch\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        type=\"switch\"\r\n                        name={control.label}\r\n                        onChange={(event) => this.props.onInputOnChange(event)}\r\n                        placeholder={control.label}\r\n                        defaultValue={this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false}\r\n                        checked={this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false}\r\n                        disabled={((this.props.operation && this.props.operation === \"update\") && (control.iseditablereadonly && control.iseditablereadonly === true) && !checkReadOnly)? false : (control.readonly ?\r\n                            control.readonly : checkReadOnly)}\r\n                    />\r\n                );\r\n            case 5: {\r\n                return (\r\n                    <Form.Group>\r\n                        <Form.Label>{control.isMultiLingualLabel ? this.props.intl.formatMessage({\r\n                            id: control.squestion\r\n                        }) : control.squestion}{control.mandatory && <sup>*</sup>}</Form.Label>{ }\r\n                    </Form.Group>\r\n                );\r\n            }\r\n            case 6: {\r\n                return (\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor={control.squestion}>{control.squestion}{control.mandatory && <sup>*</sup>}</Form.Label>\r\n                        <Button className=\"btn\" name={control.squestion}>\r\n                            {control.squestion}\r\n                        </Button>\r\n                    </Form.Group>\r\n                );\r\n            }\r\n            case 'Numeric': {\r\n                return (\r\n                    <FormNumericInput\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        strict={true}\r\n                        value={control.precision && control.precision.length > 0 ? this.props.selectedRecord[control.label]  :this.props.selectedRecord[control.label]? this.props.selectedRecord[control.label] : \"\"}\r\n                        isMandatory={control.mandatory}\r\n                        required={\r\n                            control.mandatory}\r\n                        maxLength={control.sfieldlength}\r\n                        isDisabled={((this.props.operation && this.props.operation === \"update\") && (control.iseditablereadonly && control.iseditablereadonly === true) && !checkReadOnly)? false : (control.recordbasedreadonly ?\r\n                            this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ?\r\n                                control.readonly : checkReadOnly)}\r\n                        onChange={(event) => this.props.onNumericInputChange(event, control.label)}\r\n                        precision={control.precision || 0}\r\n                        onBlur={(event) => this.props.onNumericBlur(event, control)}\r\n                        // max={control.max}\r\n                        //min={control.min}\r\n                        noStyle={true}\r\n                       \r\n                    />\r\n                )\r\n            }\r\n            case 'date': {\r\n                return (\r\n                    <>\r\n                        {control.timezone ?\r\n                            <Row>\r\n                                <Col md={6}>\r\n                                    <DateTimePicker\r\n                                        name={control.label}\r\n                                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                                        className='form-control'\r\n                                        placeholderText={this.props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                                        selected={selectedRecord && this.props.selectedRecord[control.label] ?\r\n                                            new Date(this.props.selectedRecord[control.label]) : control.loadcurrentdate ? new Date() : null}\r\n                                        dateFormat={control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"]}\r\n                                        timeInputLabel={this.props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                                        showTimeInput={control.dateonly === true ? false : true}\r\n                                        showTimeSelectOnly={control.timeonly}\r\n                                        isDisabled={((this.props.operation && this.props.operation === \"update\") && (control.iseditablereadonly && control.iseditablereadonly === true) && !checkReadOnly)? false : (control.recordbasedreadonly ?\r\n                                            this.props.selectedRecord[control.parentLabel] === control.recordbasedhide : control.readonly ?\r\n                                                control.readonly : checkReadOnly)}\r\n                                        // isClearable={false}\r\n                                        isMandatory={control.mandatory}\r\n                                        maxDate={control.maxdate ? new Date(control.maxdate) : this.props.CurrentTime}\r\n                                        maxTime={control.maxdate ? new Date(control.maxdate) : this.props.CurrentTime}\r\n                                        minDate={control.mindate ? new Date(control.mindate) : this.props.CurrentTime}\r\n                                        minTime={control.mindate ? new Date(control.mindate) : this.props.CurrentTime}\r\n                                        onChange={(date) => this.props.handleDateChange(date, control.label)}\r\n                                        value={this.props.selectedRecord[control.label + \"value\"] ?\r\n                                            new Date(this.props.selectedRecord[control.label + \"value\"]) : new Date()}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    <FormSelectSearch\r\n                                        name={`tz${control.label}`}\r\n                                        as={\"select\"}\r\n                                        onChange={(event) => this.props.onComboChange(event, control, `tz${control.label}`)}\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_TIMEZONE\" })}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={true}\r\n                                        // defaultValue={this.props.defaultTimeZone}\r\n                                        value={this.props.selectedRecord[`tz${control.label}`] ? this.props.selectedRecord[`tz${control.label}`] : this.props.defaultTimeZone}\r\n                                        options={this.props.timeZoneList}\r\n                                        optionId={\"value\"}\r\n                                        optionValue={\"label\"}\r\n                                        isMulti={false}\r\n\r\n                                        isDisabled={((this.props.operation && this.props.operation === \"update\") && (control.iseditablereadonly && control.iseditablereadonly === true) && !checkReadOnly)? false : (control.readonly ?\r\n                                            control.readonly : checkReadOnly)}\r\n                                        isSearchable={false}\r\n                                        isClearable={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row> :\r\n                            <DateTimePicker\r\n                                name={control.label}\r\n                                label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                                className='form-control'\r\n                                placeholderText={this.props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                                selected={selectedRecord && this.props.selectedRecord[control.label] ?\r\n                                    new Date(this.props.selectedRecord[control.label]) : null}\r\n                                dateFormat={control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"]}\r\n                                timeInputLabel={this.props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                                showTimeInput={control.dateonly === true ? false : true}\r\n                                showTimeSelectOnly={control.timeonly}\r\n                                // isClearable={false}\r\n                                isDisabled={((this.props.operation && this.props.operation === \"update\") && (control.iseditablereadonly && control.iseditablereadonly === true) && !checkReadOnly)? false : (control.recordbasedreadonly ?\r\n                                    this.props.selectedRecord[control.parentLabel] === control.recordbasedhide : control.readonly ?\r\n                                        control.readonly : checkReadOnly)}\r\n                                isMandatory={control.mandatory}\r\n                                maxDate={control.hideafterdate ? this.props.selectedRecord[control.label + \"max\"] ?\r\n                                    this.props.selectedRecord[control.label + \"max\"] : this.props.CurrentTime : this.props.CurrentTime}\r\n                                maxTime={control.hideafterdate ? this.props.selectedRecord[control.label + \"max\"] ?\r\n                                    this.props.selectedRecord[control.label + \"max\"] : this.props.CurrentTime : this.props.CurrentTime}\r\n                                minDate={control.hidebeforedate ? this.props.selectedRecord[control.label + \"min\"] ?\r\n                                    this.props.selectedRecord[control.label + \"min\"] : this.props.CurrentTime : this.props.CurrentTime}\r\n                                minTime={control.hidebeforedate ? this.props.selectedRecord[control.label + \"min\"] ?\r\n                                    this.props.selectedRecord[control.label + \"min\"] : this.props.CurrentTime : this.props.CurrentTime}\r\n                                onChange={(date) => this.props.handleDateChange(date, control.label)}\r\n                                value={this.props.selectedRecord[control.label + \"value\"] ?\r\n                                    this.props.selectedRecord[control.label + \"value\"] : new Date()}\r\n                                openToDate={this.props.selectedRecord[control.label + \"value\"] ?\r\n                                    this.props.selectedRecord[control.label + \"value\"] : new Date()}\r\n                               // showTimeInput={true}\r\n\r\n                            />\r\n                        }\r\n\r\n                    </>\r\n                );\r\n            }\r\n            case 'checkbox': {\r\n                let checkboxes = control.radioOptions ? control.radioOptions.tags : []\r\n                const data = this.props.selectedRecord[control.label] ?\r\n                    this.props.selectedRecord[control.label].toLowerCase().split(\",\") : [];\r\n\r\n                return (\r\n                    <InputGroup size={'lg'}>\r\n                        <Form.Group>\r\n                            <Form.Label as=\"legend\" htmlFor={control.label}>{\r\n                                control.displayname[this.props.userInfo.slanguagetypecode] || control.label}{control.mandatory ? <sup>*</sup> : \"\"}</Form.Label>\r\n                            {checkboxes.map(checkbox =>\r\n\r\n                                <Form.Check\r\n                                    inline={true}\r\n                                    type=\"checkbox\"\r\n                                    name={control.label}\r\n                                    label={control.isMultiLingualLabel ? this.props.intl.formatMessage({ id: checkbox.text }) : checkbox.text}\r\n                                    // label={checkbox.text}\r\n                                    onChange={(event) => this.props.onInputOnChange(event,control, checkbox.text)}\r\n                                    id={checkbox.id}\r\n\r\n                                    checked={this.props.selectedRecord[control.label] ?\r\n                                        data.includes(checkbox.text.toLowerCase().trim()) ? true : false : false}\r\n\r\n                                    defaultChecked={this.props.selectedRecord[control.label] ?\r\n                                        data.includes(checkbox.text.toLowerCase().trim()) ? true : false : false}\r\n                                    isMandatory={control.mandatory}\r\n                                    required={control.mandatory}\r\n                                    size={'lg'}\r\n                                />\r\n\r\n                            )}\r\n                        </Form.Group>\r\n                    </InputGroup >\r\n\r\n                );\r\n            }\r\n            case 'radio': {\r\n                let radioButtons = control.radioOptions ? control.radioOptions.tags : []\r\n                return (\r\n                    <fieldset>\r\n                        <Form.Group>\r\n                            <Form.Label as=\"legend\" htmlFor={control.label}>{control.displayname[this.props.userInfo.slanguagetypecode] || control.label}{control.mandatory ? <sup>*</sup> : \"\"}</Form.Label>\r\n                            {radioButtons.map(radioButton =>\r\n\r\n                                <Form.Check\r\n                                    inline={true}\r\n                                    type=\"radio\"\r\n                                    name={control.label}\r\n                                    label={radioButton.text}\r\n                                    onChange={(event) => this.props.onInputOnChange(event,control, radioButton.text)}\r\n                                    id={radioButton.id}\r\n                                    checked={selectedRecord[control.label] ?\r\n                                        radioButton.text.toLowerCase().trim() === selectedRecord[control.label].toLowerCase().trim() ? true : false : false}\r\n                                    defaultChecked={selectedRecord[control.label] ?\r\n                                        radioButton.text.toLowerCase().trim() === selectedRecord[control.label].toLowerCase().trim() ? true : false : false}\r\n                                    isMandatory={control.mandatory}\r\n                                    required={control.mandatory}\r\n                                    disabled={((this.props.operation && this.props.operation === \"update\") && (control.iseditablereadonly && control.iseditablereadonly === true) && !checkReadOnly)? false : (control.readonly ?\r\n                                        control.readonly : checkReadOnly)}\r\n                                />\r\n\r\n                            )}\r\n                        </Form.Group>\r\n                    </fieldset>\r\n                );\r\n            }\r\n            case 'predefineddropdown': {\r\n                let radioButtons = control.radioOptions && control.radioOptions.tags.map(x => {\r\n                    return { label: x.text, value: x.text }\r\n                })\r\n                return (\r\n                    <FormSelectSearch\r\n                        name={control.label}\r\n                        as={\"select\"}\r\n                        onChange={(event) => this.props.onComboChange(event, control)}\r\n                        formLabel={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        isMandatory={control.mandatory}\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        options={radioButtons || []}\r\n                        isMulti={false}\r\n                        isClearable={control.mandatory ? false : true}\r\n                        isDisabled={((this.props.operation && this.props.operation === \"update\") && (control.iseditablereadonly && control.iseditablereadonly === true) && !checkReadOnly)? false :(control.recordbasedreadonly ?\r\n                            this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ?\r\n                                control.readonly : checkReadOnly)}\r\n                        isSearchable={true}\r\n                    />\r\n                );\r\n            }\r\n            case 'files': {\r\n                return (\r\n                    <DropZone\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        //maxFiles={control.maxFiles || 1}\r\n                        maxFiles={1}\r\n                        accept={control.accept && control.accept.value ==='*.*' ? undefined : control.accept && control.accept.value}\r\n                        minSize={0}\r\n                        maxSize={1}\r\n                        onDrop={(event) => this.props.onDropFile(event, control.label, control.maxFiles)}\r\n                       // multiple={control.maxFiles > 1 ? true : false}\r\n                        multiple ={false}\r\n                        editFiles={this.props.selectedRecord ? this.props.selectedRecord : {}}\r\n                        // attachmentTypeCode={this.props.operation === \"update\" ? attachmentType.PRN : \"\"}\r\n                        // fileSizeName=\"nfilesize\"\r\n                        fileName={control.label}\r\n                        deleteAttachment={this.props.deleteAttachment}\r\n                        actionType={this.props.actionType}\r\n                        isMandatory={control.mandatory}\r\n                    />\r\n                )\r\n            }\r\n            case 'label': {\r\n                /**ALPD-4466 - Label Component - L.Subashini**/\r\n                 const labelClass = `${control.bold === true ? 'font-weight-bold' :''}\r\n                                   ${control.italic === true ? 'font-italic' :''}`;\r\n                ////                   ${control.lowercase === true ? 'text-lowercase' :''}\r\n                //                   ${control.uppercase === true ? 'text-uppercase' :''}\r\n                //                   ${control.capitalize === true ? 'text-capitalize' :''}\r\n                 \r\n                const underLine = control.underline === true ? 'underline' :'none';\r\n               // console.log(\"control.sfontsize:\", control);\r\n              \r\n                const labelStyle ={'font-size':`${control.sfontsize}px`,'text-decoration':`${underLine}`};\r\n               // console.log(\"labelStyle:\", labelStyle);\r\n              \r\n                return (\r\n                    <LabelComponent\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        className={labelClass}\r\n                        style={labelStyle}\r\n                    />\r\n\r\n                );\r\n            }\r\n            default:\r\n                return (\"\");\r\n        }\r\n\r\n\r\n    }\r\n    onSaveClick = () => {\r\n        if (this.props.needValidation) {\r\n            const failedControls = [];\r\n            const mandatoryFields = [];\r\n            this.props.templateData.map(control =>\r\n                control.nmandatoryfield === transactionStatus.YES ? mandatoryFields.push(control) : ''\r\n\r\n            )\r\n            mandatoryFields.forEach(item => {\r\n\r\n                if (this.props.selectedRecord && this.props.selectedRecord[item.nchecklistversionqbcode] && this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue) {\r\n                    if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\r\n                            const alertMessage = item.squestion\r\n                            failedControls.push(alertMessage);\r\n                        }\r\n                    }\r\n                    else if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"string\") {\r\n                        if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.trim().length === 0) {\r\n                            const alertMessage = item.squestion\r\n                            failedControls.push(alertMessage);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\r\n                            const alertMessage = item.squestion\r\n                            failedControls.push(alertMessage);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const alertMessage = item.squestion\r\n                    failedControls.push(alertMessage);\r\n                }\r\n            });\r\n            // console.log(\"validationPassed:\", failedControls);\r\n\r\n            if (failedControls.length === 0) {\r\n                this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode)\r\n            }\r\n            else {\r\n\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${failedControls[0]}`);\r\n\r\n\r\n            }\r\n        } else {\r\n            this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode)\r\n        }\r\n    }\r\n    componentDidMount() {\r\n\r\n        if (this.props.triggerCallback !== undefined && this.props.enableCallback)\r\n            console.log(\"this.formElement:\", this.formElement);\r\n            console.log(\"this.formElement:\", this.formElement.current);\r\n\r\n            setTimeout(() => {\r\n                this.props.triggerCallback(this.formElement.current.clientHeight + 30);\r\n            }, 200);\r\n\r\n        if (this.focusCount !== -1) {\r\n            if(this.select[this.focusCount]&&this.select[this.focusCount].current)\r\n            {\r\n                setTimeout(() => {\r\n                    this.select[this.focusCount].current&&this.select[this.focusCount].current.focus();\r\n                }, 400);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let count1 = 0;\r\n        return (\r\n\r\n            <div ref={this.formElement}>\r\n                {//console.log('sdd', this.select)\r\n                }\r\n                {\r\n                    this.props.templateData ?\r\n                        this.props.templateData.map((item) =>\r\n                            <Row>\r\n                                {/* <CollapseTransition> */}\r\n                                {item.children.length > 0 ?\r\n                                    item.children.map((column) =>\r\n                                        <Col md={12 / item.children.length}>\r\n                                            {\r\n                                                column.children.map((component) => {\r\n                                                    return (\r\n                                                        component.hasOwnProperty(\"children\") ?\r\n                                                            <Row>\r\n                                                                {component.children.map(componentrow =>\r\n                                                                    <Col md={12 / component.children.length}>\r\n                                                                        {componentrow.recordbasedshowhide ?\r\n                                                                            this.props.selectedRecord[componentrow.radioparentLabel] === componentrow.recordbasedhide ?\r\n                                                                                \"\" : this.renderSwitch(componentrow, this.props.selectedRecord, item.children.length, component.children.length, count1++) :\r\n                                                                            this.renderSwitch(componentrow, this.props.selectedRecord, item.children.length, component.children.length, count1++)}\r\n                                                                    </Col>\r\n                                                                )\r\n                                                                }\r\n                                                            </Row>\r\n                                                            : <>\r\n                                                                {component.recordbasedshowhide ?\r\n                                                                    this.props.selectedRecord[component.radioparentLabel] === component.recordbasedhide ?\r\n                                                                        \"\" : this.renderSwitch(component, this.props.selectedRecord, item.children.length, undefined, count1++) :\r\n                                                                    this.renderSwitch(component, this.props.selectedRecord, item.children.length, undefined, count1++)}\r\n                                                            </>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n\r\n                                        </Col>\r\n                                    )\r\n                                    : \"\"}\r\n\r\n                                {/* </CollapseTransition> */}\r\n                            </Row>\r\n                        )\r\n                        :\r\n                        \"\"\r\n                }\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default injectIntl(DynamicSlideout);"]},"metadata":{},"sourceType":"module"}