{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, sortData } from '../components/CommonScript';\nimport { intl } from '../components/App';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getClientComboService(clientparam) {\n  return function (dispatch) {\n    if (clientparam.operation === \"create\" || clientparam.operation === \"update\") {\n      const countryService = rsapi.post(\"country/getCountry\", {\n        userinfo: clientparam.userInfo\n      });\n      let urlArray = [];\n      let selectedId = null;\n\n      if (clientparam.operation === \"create\") {\n        urlArray = [countryService];\n      } else {\n        const clientById = rsapi.post(\"client/getActiveClientById\", {\n          [clientparam.primaryKeyField]: clientparam.masterData.selectedClient[clientparam.primaryKeyField],\n          \"userinfo\": clientparam.userInfo\n        });\n        urlArray = [countryService, clientById];\n        selectedId = clientparam.primaryKeyValue;\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let country = [];\n        let selectedRecord = {};\n\n        if (clientparam.operation === \"update\") {\n          selectedRecord = response[1].data;\n          country.push({\n            \"value\": response[1].data[\"ncountrycode\"],\n            \"label\": response[1].data[\"scountryname\"]\n          });\n          selectedRecord[\"ncountrycode\"] = country[0];\n        } else {\n          selectedRecord[\"ntransactionstatus\"] = 1;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            countryList: response[0].data || [],\n            selectedRecord,\n            openModal: true,\n            operation: clientparam.operation,\n            screenName: clientparam.screenName,\n            ncontrolCode: clientparam.ncontrolCode,\n            loading: false,\n            selectedId\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function getClientDetail(client, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"client/getClientDetail\", {\n      nclientcode: client.nclientcode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getClientDepartmentForAddEdit(screenName, operation, nclientcode, nclientdeptcode, ncontrolCode, userInfo) {\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedRecord = {};\n\n    if (operation === \"create\") {\n      const Country = rsapi.post(\"/country/getCountry\", {\n        \"userinfo\": userInfo\n      });\n      urlArray = [Country];\n    } else {\n      const Country = rsapi.post(\"/country/getCountry\", {\n        \"userinfo\": userInfo\n      });\n      const clientDepartmentByID = rsapi.post(\"/client/getClientDepartmentById\", {\n        \"nclientcode\": nclientcode,\n        \"nclientdeptcode\": nclientdeptcode,\n        \"userinfo\": userInfo\n      });\n      urlArray = [Country, clientDepartmentByID];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let countryCode = [];\n      const countryMap = constructOptionList(response[0].data || [], \"ncountrycode\", \"scountryname\", undefined, undefined, true);\n      const countryList = countryMap.get(\"OptionList\");\n\n      if (operation === \"update\") {\n        selectedRecord = response[1].data;\n        selectedRecord[\"ncountrycode\"] = {\n          label: response[1].data[\"scountryname\"],\n          value: response[1].data[\"ncountrycode\"]\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Country: countryList,\n          openChildModal: true,\n          operation,\n          selectedRecord: operation === \"update\" ? selectedRecord : {\n            \"ntransactionstatus\": transactionStatus.ACTIVE,\n            \"ndefaultstatus\": transactionStatus.YES\n          },\n          countryCode: countryCode,\n          ncontrolCode,\n          screenName: \"IDS_CLIENTDEPARTMENT\",\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getClientDeptContactDetails(inputParam) {\n  return function (dispatch) {\n    let Map = {};\n    Map[\"nclientcode\"] = inputParam.clientDepartment.nclientcode;\n    Map[\"nclientdeptcode\"] = inputParam.clientDepartment.nclientsitecode;\n    Map[\"userinfo\"] = inputParam.userInfo;\n    dispatch(initRequest(true));\n    rsapi.post(\"/client/getClientContactByDepartment\", Map).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ClientContact: response.data,\n        selectedClientDepartment: inputParam.clientDepartment\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getClientContactForAddEdit(fetchRecord) {\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedId = null;\n    const ClientContactByID = rsapi.post(\"/client/getClientContactById\", {\n      \"nclientcode\": fetchRecord.editRow.nclientcode,\n      \"nclientdeptcode\": fetchRecord.editRow.nclientsitecode,\n      \"nclientcontactcode\": fetchRecord.editRow.nclientcontactcode,\n      \"userinfo\": fetchRecord.userInfo\n    });\n    urlArray = [ClientContactByID];\n    selectedId = fetchRecord.editRow.nclientcontactcode;\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          operation: fetchRecord.operation,\n          selectedRecord: fetchRecord.operation === \"update\" ? response[0].data : undefined,\n          defaultSite: fetchRecord.editRow.nclientdeptcode,\n          ncontrolCode: fetchRecord.ncontrolCode,\n          screenName: \"IDS_CONTACTDETAILS\",\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/ClientAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","constructOptionList","sortData","intl","transactionStatus","getClientComboService","clientparam","dispatch","operation","countryService","post","userinfo","userInfo","urlArray","selectedId","clientById","primaryKeyField","masterData","selectedClient","primaryKeyValue","all","then","response","country","selectedRecord","data","push","type","payload","countryList","openModal","screenName","ncontrolCode","loading","catch","error","status","message","warn","getClientDetail","client","nclientcode","modalName","undefined","getClientDepartmentForAddEdit","nclientdeptcode","Country","clientDepartmentByID","countryCode","countryMap","get","label","value","openChildModal","ACTIVE","YES","formatMessage","id","getClientDeptContactDetails","inputParam","Map","clientDepartment","nclientsitecode","ClientContact","selectedClientDepartment","dataState","getClientContactForAddEdit","fetchRecord","ClientContactByID","editRow","nclientcontactcode","defaultSite"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, sortData } from '../components/CommonScript';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\n\r\nexport function getClientComboService(clientparam) {\r\n    return function (dispatch) {\r\n        if (clientparam.operation === \"create\" || clientparam.operation === \"update\") {\r\n            const countryService = rsapi.post(\"country/getCountry\", { userinfo: clientparam.userInfo });\r\n            let urlArray = [];\r\n            let selectedId = null;\r\n            if (clientparam.operation === \"create\") {\r\n\r\n                urlArray = [countryService];\r\n            }\r\n            else {\r\n                const clientById = rsapi.post(\"client/getActiveClientById\", { [clientparam.primaryKeyField]: clientparam.masterData.selectedClient[clientparam.primaryKeyField], \"userinfo\": clientparam.userInfo });\r\n\r\n                urlArray = [countryService, clientById];\r\n                selectedId = clientparam.primaryKeyValue;\r\n            }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let country = [];\r\n                    let selectedRecord = {};\r\n                    if (clientparam.operation === \"update\") {\r\n                        selectedRecord = response[1].data;\r\n                        country.push({ \"value\": response[1].data[\"ncountrycode\"], \"label\": response[1].data[\"scountryname\"] });\r\n                        selectedRecord[\"ncountrycode\"] = country[0];\r\n                    } else {\r\n                        selectedRecord[\"ntransactionstatus\"] = 1;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            countryList: response[0].data || [],\r\n\r\n                            selectedRecord, openModal: true,\r\n                            operation: clientparam.operation, screenName: clientparam.screenName,\r\n                            ncontrolCode: clientparam.ncontrolCode, loading: false, selectedId\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\nexport function getClientDetail (client, userInfo, masterData) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"client/getClientDetail\", {nclientcode:client.nclientcode, userinfo:userInfo})\r\n   .then(response=>{     \r\n        masterData = {...masterData, ...response.data};       \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\nexport function getClientDepartmentForAddEdit(screenName, operation, nclientcode, nclientdeptcode, ncontrolCode, userInfo){\r\n    return function(dispatch){ \r\n    let urlArray = [];\r\n    let selectedRecord = {};\r\n\r\n    if (operation === \"create\") {\r\n        const Country = rsapi.post(\"/country/getCountry\", { \"userinfo\": userInfo });\r\n        urlArray = [Country];\r\n    }\r\n    else {\r\n\r\n        const Country = rsapi.post(\"/country/getCountry\", { \"userinfo\": userInfo });\r\n        const clientDepartmentByID = rsapi.post(\"/client/getClientDepartmentById\", { \"nclientcode\": nclientcode, \"nclientdeptcode\": nclientdeptcode ,\"userinfo\": userInfo});\r\n        urlArray = [Country, clientDepartmentByID];\r\n    }\r\n\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response => {\r\n\r\n            let countryCode = [];\r\n\r\n            const countryMap = constructOptionList(response[0].data || [], \"ncountrycode\",\r\n            \"scountryname\", undefined, undefined, true);\r\n\r\n            const countryList = countryMap.get(\"OptionList\");\r\n\r\n\r\n            if (operation === \"update\") {\r\n\r\n                selectedRecord = response[1].data;\r\n                selectedRecord[\"ncountrycode\"] = {\r\n                    label: response[1].data[\"scountryname\"],\r\n                    value: response[1].data[\"ncountrycode\"]\r\n                };\r\n            \r\n            }\r\n\r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                Country: countryList, openChildModal:true, operation, \r\n                selectedRecord: operation === \"update\" ? selectedRecord : {\"ntransactionstatus\": transactionStatus.ACTIVE,\"ndefaultstatus\":transactionStatus.YES}, countryCode: countryCode, ncontrolCode,\r\n                screenName: \"IDS_CLIENTDEPARTMENT\", loading:false\r\n             }});\r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: error.response.data }));\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function getClientDeptContactDetails(inputParam){\r\n    return function(dispatch){ \r\n    let Map={};\r\n \r\n    Map[\"nclientcode\"]=inputParam.clientDepartment.nclientcode;\r\n    Map[\"nclientdeptcode\"]=inputParam.clientDepartment.nclientsitecode;\r\n    Map[\"userinfo\"]=inputParam.userInfo;\r\n    dispatch(initRequest(true));\r\n    rsapi.post(\"/client/getClientContactByDepartment\",Map)\r\n    .then(response =>{          \r\n       let masterData = {...inputParam.masterData, ClientContact: response.data,\r\n            selectedClientDepartment:  inputParam.clientDepartment,\r\n            };     \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, loading:false, dataState: undefined}}); \r\n\r\n    })\r\n    .catch(error =>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n    })\r\n}\r\n}\r\nexport function getClientContactForAddEdit(fetchRecord){\r\n    return function(dispatch){ \r\n    let urlArray = [];\r\n    let selectedId = null;\r\n    const ClientContactByID = rsapi.post(\"/client/getClientContactById\", { \"nclientcode\": fetchRecord.editRow.nclientcode, \"nclientdeptcode\": fetchRecord.editRow.nclientsitecode, \"nclientcontactcode\": fetchRecord.editRow.nclientcontactcode,\"userinfo\": fetchRecord.userInfo });\r\n    urlArray = [ClientContactByID];\r\n    selectedId = fetchRecord.editRow.nclientcontactcode;\r\n\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response => {            \r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                openChildModal:true, operation:fetchRecord.operation, \r\n                selectedRecord: fetchRecord.operation === \"update\" ? response[0].data : undefined,\r\n          defaultSite: fetchRecord.editRow.nclientdeptcode, ncontrolCode:fetchRecord.ncontrolCode ,\r\n          screenName: \"IDS_CONTACTDETAILS\", loading:false, selectedId\r\n        }});\r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: error.response.data }));\r\n            }\r\n        })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}