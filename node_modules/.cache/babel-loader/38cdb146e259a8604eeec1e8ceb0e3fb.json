{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData } from '../components/CommonScript'; //getComboLabelValue,, searchData\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getPasswordPolicyDetail(passwordPolicy, userInfo, masterData, selectedcombo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"passwordpolicy/getPasswordPolicy\", {\n      npolicycode: passwordPolicy.npolicycode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getPasswordPolicyComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (masterData.UserRole.length > 0) {\n      if (operation === \"create\" || operation === \"update\" && masterData.SelectedPasswordPolicy.ntransactionstatus !== transactionStatus.RETIRED && masterData.SelectedPasswordPolicy.ntransactionstatus !== transactionStatus.APPROVED) {\n        let selectedRecord = {};\n        let urlArray = [];\n\n        if (operation === \"update\") {\n          const policyById = rsapi.post(\"passwordpolicy/getActivePasswordPolicyById\", {\n            [primaryKeyName]: primaryKeyValue,\n            \"userinfo\": userInfo\n          });\n          urlArray = [policyById];\n          dispatch(initRequest(true));\n          Axios.all(urlArray).then(response => {\n            selectedRecord = response[0].data;\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                operation,\n                screenName,\n                selectedRecord,\n                openModal: true,\n                ncontrolCode,\n                loading: false\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(intl.formatMessage({\n                id: error.message\n              }));\n            } else {\n              toast.warn(intl.formatMessage({\n                id: error.response.data\n              }));\n            }\n          });\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              operation,\n              screenName,\n              selectedRecord,\n              openModal: true,\n              ncontrolCode\n            }\n          });\n        }\n      } else {\n        //toast.warn(intl.formatMessage({ id: masterData.SelectedPasswordPolicy.stransstatus }));\n        //toast.warn(intl.formatMessage({ id: masterData.SelectedPasswordPolicy.stransstatus }));\n        // let message = \"IDS_SELECTDRAFTRECORDTOEDIT\";\n        // if (masterData.SelectedPasswordPolicy.ntransactionstatus === transactionStatus.APPROVED) {\n        //     message = \"IDS_CANNOTEDITAPPROVEPOLICY\";\n        // }\n        // toast.warn(intl.FormattedMessage({\n        //     id: \"IDS_PLSSELECTASAMPLE\"\n        // }));\n        // toast.warn(intl.formatMessage({\n        //     id: \"IDS_SELECTPRODUCT\"\n        // }));\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORDTOEDITS\"\n        }));\n      }\n    } else {\n      //  let message = \"\";\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTUSERROLEFROMFILTER\"\n      }));\n    }\n  };\n}\nexport function getCopyUseRolePolicy(screenName, operation, ncontrolCode) {\n  return function (dispatch) {\n    let selectedRecord = {};\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: {\n        operation,\n        screenName,\n        openModal: true,\n        selectedRecord,\n        ncontrolCode\n      }\n    });\n  };\n}\nexport function comboChangeUserRolePolicy(userrolecode, data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/passwordpolicy/getPasswordPolicyByUserRoleCode\", {\n      nuserrolecode: userrolecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      const masterData = { ...data,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n} // export function filterColumnDataPasswordPolicy(filterValue, masterData, userInfo) {\n//     return function (dispatch) {\n//         let policyCode = 0;\n//         let searchedData = undefined;\n//         if (filterValue === \"\") {\n//             policyCode = masterData[\"PasswordPolicy\"][0].npolicycode;\n//         }\n//         else {\n//             searchedData = searchData(filterValue, masterData[\"PasswordPolicy\"], \"spolicyname\");\n//             if (searchedData.length > 0) {\n//                 policyCode = searchedData[0].npolicycode;\n//             }\n//             else {\n//                 masterData[\"PasswordPolicy\"] = [];\n//                 masterData[\"UserRole\"] = [];\n//                 masterData[\"SelectedPasswordPolicy\"] = [];\n//                 masterData[\"searchedData\"] = [];\n//                 dispatch({ type: DEFAULT_RETURN, payload: { masterData } });\n//             }\n//         }\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"passwordpolicy/getPasswordPolicy\", { npolicycode: policyCode, userinfo: userInfo })\n//             .then(response => {\n//                 masterData[\"PasswordPolicy\"] = response.data[\"PasswordPolicy\"];\n//                 masterData[\"UserRole\"] = response.data[\"UserRole\"];\n//                 masterData[\"SelectedPasswordPolicy\"] = response.data[\"SelectedPasswordPolicy\"];\n//                 masterData[\"searchedData\"] = searchedData;\n//                 dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/actions/PasswordPolicyAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","toast","Axios","initRequest","intl","transactionStatus","getPasswordPolicyDetail","passwordPolicy","userInfo","masterData","selectedcombo","dispatch","post","npolicycode","then","response","data","type","payload","loading","catch","error","status","formatMessage","id","message","warn","getPasswordPolicyComboService","screenName","operation","primaryKeyName","primaryKeyValue","ncontrolCode","UserRole","length","SelectedPasswordPolicy","ntransactionstatus","RETIRED","APPROVED","selectedRecord","urlArray","policyById","all","openModal","getCopyUseRolePolicy","comboChangeUserRolePolicy","userrolecode","nuserrolecode","searchedData","undefined"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData } from '../components/CommonScript'//getComboLabelValue,, searchData\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getPasswordPolicyDetail(passwordPolicy, userInfo, masterData, selectedcombo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"passwordpolicy/getPasswordPolicy\", {\r\n            npolicycode: passwordPolicy.npolicycode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPasswordPolicyComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n\r\n        if(masterData.UserRole.length >0)\r\n        {\r\n        if (operation === \"create\" || (operation === \"update\" && masterData.SelectedPasswordPolicy.ntransactionstatus !== transactionStatus.RETIRED && masterData.SelectedPasswordPolicy.ntransactionstatus !== transactionStatus.APPROVED)) {\r\n            let selectedRecord = {};\r\n            let urlArray = [];\r\n            if (operation === \"update\") {\r\n                const policyById = rsapi.post(\"passwordpolicy/getActivePasswordPolicyById\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": userInfo });\r\n\r\n                urlArray = [policyById];\r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        selectedRecord = response[0].data;\r\n                       dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n\r\n                                operation, screenName, selectedRecord, openModal: true,\r\n                                ncontrolCode, loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(intl.formatMessage({ id: error.message }));\r\n                        }\r\n                        else {\r\n\r\n                            toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                        }\r\n                    })\r\n            }\r\n            else {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        operation, screenName, selectedRecord, openModal: true,\r\n                        ncontrolCode\r\n                    }\r\n                });\r\n            }\r\n\r\n\r\n        }\r\n        else {\r\n\r\n            //toast.warn(intl.formatMessage({ id: masterData.SelectedPasswordPolicy.stransstatus }));\r\n            //toast.warn(intl.formatMessage({ id: masterData.SelectedPasswordPolicy.stransstatus }));\r\n           // let message = \"IDS_SELECTDRAFTRECORDTOEDIT\";\r\n            // if (masterData.SelectedPasswordPolicy.ntransactionstatus === transactionStatus.APPROVED) {\r\n            //     message = \"IDS_CANNOTEDITAPPROVEPOLICY\";\r\n            // }\r\n\r\n            // toast.warn(intl.FormattedMessage({\r\n            //     id: \"IDS_PLSSELECTASAMPLE\"\r\n            // }));\r\n\r\n            // toast.warn(intl.formatMessage({\r\n            //     id: \"IDS_SELECTPRODUCT\"\r\n            // }));\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTOEDITS\" }));\r\n\r\n        }\r\n    }\r\n    else{\r\n        //  let message = \"\";\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTUSERROLEFROMFILTER\" }));\r\n    } \r\n    }\r\n}\r\n\r\nexport function getCopyUseRolePolicy(screenName, operation, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let selectedRecord = {};\r\n\r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n                operation, screenName, openModal: true,selectedRecord,\r\n                ncontrolCode\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport function comboChangeUserRolePolicy(userrolecode, data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/passwordpolicy/getPasswordPolicyByUserRoleCode\", { nuserrolecode: userrolecode, \"userinfo\": userInfo })\r\n            .then(response => {\r\n\r\n                const masterData = { ...data, ...response.data, searchedData: undefined }\r\n\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\n// export function filterColumnDataPasswordPolicy(filterValue, masterData, userInfo) {\r\n//     return function (dispatch) {\r\n\r\n//         let policyCode = 0;\r\n//         let searchedData = undefined;\r\n//         if (filterValue === \"\") {\r\n//             policyCode = masterData[\"PasswordPolicy\"][0].npolicycode;\r\n//         }\r\n//         else {\r\n\r\n//             searchedData = searchData(filterValue, masterData[\"PasswordPolicy\"], \"spolicyname\");\r\n\r\n//             if (searchedData.length > 0) {\r\n//                 policyCode = searchedData[0].npolicycode;\r\n//             }\r\n//             else {\r\n//                 masterData[\"PasswordPolicy\"] = [];\r\n//                 masterData[\"UserRole\"] = [];\r\n//                 masterData[\"SelectedPasswordPolicy\"] = [];\r\n//                 masterData[\"searchedData\"] = [];\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { masterData } });\r\n//             }\r\n\r\n//         }\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"passwordpolicy/getPasswordPolicy\", { npolicycode: policyCode, userinfo: userInfo })\r\n//             .then(response => {\r\n//                 masterData[\"PasswordPolicy\"] = response.data[\"PasswordPolicy\"];\r\n//                 masterData[\"UserRole\"] = response.data[\"UserRole\"];\r\n//                 masterData[\"SelectedPasswordPolicy\"] = response.data[\"SelectedPasswordPolicy\"];\r\n//                 masterData[\"searchedData\"] = searchedData;\r\n\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n\r\n\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}