{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { transactionStatus } from '../components/Enumeration';\nimport { intl } from \"../components/App\";\nexport function getTestPriceVersionDetail(testPriceVersion, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"testpricing/getTestPriceVersion\", {\n      npriceversioncode: testPriceVersion.npriceversioncode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditTestPriceVersionService(inputParam) {\n  return function (dispatch) {\n    if (inputParam.masterData.SelectedTestPriceVersion.ntransactionstatus !== transactionStatus.APPROVED && inputParam.masterData.SelectedTestPriceVersion.ntransactionstatus !== transactionStatus.RETIRED) {\n      dispatch(initRequest(true));\n      rsapi.post(\"testpricing/getActiveTestPriceVersionById\", {\n        [inputParam.primaryKeyName]: inputParam.masterData.SelectedTestPriceVersion[inputParam.primaryKeyName],\n        userinfo: inputParam.userInfo\n      }).then(response => {\n        //const masterData = {...inputParam.masterData, SelectedTestPriceVersion: response.data};\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            operation: inputParam.operation,\n            loading: false,\n            screenName: inputParam.screenName,\n            selectedRecord: response.data,\n            ncontrolCode: inputParam.ncontrolcode\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      //toast.warn(this.props.formatMessage({ id: masterData.SelectedSupplier.stranstatus }));\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTTESTPRICEVERSION\"\n      }));\n    }\n  };\n}\nexport function getPricingAddTestService(screenName, operation, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT) {\n      dispatch(initRequest(true));\n      rsapi.post(\"testpricing/getPriceUnmappedTest\", {\n        \"npriceversioncode\": masterData.SelectedTestPriceVersion[\"npriceversioncode\"],\n        userinfo: userInfo\n      }).then(response => {\n        // const testMap = constructOptionList(response.data || [], \"ntestcode\", \"stestname\",\n        //              undefined, undefined, true) ;\n        // const testList = testMap.get(\"OptionList\");                          \n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            //pricingTestList:testList, \n            pricingTestList: response.data,\n            openModal: true,\n            operation,\n            screenName,\n            ncontrolCode,\n            //selectedRecord, \n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTTESTPRICEVERSION\"\n      }));\n    }\n  };\n}\nexport function getPricingEditService(editParam) {\n  return function (dispatch) {\n    // screenName, operation, masterData, userInfo, ncontrolCode\n    //console.log(\"editParam:\", editParam);\n    if (editParam.masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT) {\n      dispatch(initRequest(true));\n      rsapi.post(\"testpricing/getTestPrice\", {\n        \"npriceversioncode\": editParam.masterData.SelectedTestPriceVersion[\"npriceversioncode\"],\n        \"ntestpricedetailcode\": editParam.editRow ? editParam.editRow.ntestpricedetailcode : null,\n        userinfo: editParam.userInfo\n      }).then(response => {\n        let selectedRecord = [];\n\n        if (response.data.hasOwnProperty(\"TestPrice\") && response.data[\"TestPrice\"].length === 0) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              loadEsign: false,\n              openModal: false\n            }\n          });\n          toast.warn(intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        } else {\n          if (editParam.editRow) {\n            selectedRecord.push(response.data[\"SelectedTestPrice\"]);\n          } else {\n            selectedRecord = sortData(response.data[\"TestPrice\"]);\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //pricingTestList:testList, \n              //testPriceList:response.data[\"TestPrice\"],\n              openModal: true,\n              operation: editParam.operation,\n              screenName: editParam.screenName,\n              ncontrolCode: editParam.ncontrolCode,\n              selectedRecord,\n              selectedId: editParam.editRow ? editParam.editRow.ntestpricedetailcode : null,\n              loading: false,\n              priceDataState: editParam.priceDataState\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTTESTPRICEVERSION\"\n      }));\n    }\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/actions/TestMasterPricingAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","toast","initRequest","transactionStatus","intl","getTestPriceVersionDetail","testPriceVersion","userInfo","masterData","dispatch","post","npriceversioncode","userinfo","then","response","data","type","payload","operation","modalName","undefined","loading","catch","error","status","message","warn","getEditTestPriceVersionService","inputParam","SelectedTestPriceVersion","ntransactionstatus","APPROVED","RETIRED","primaryKeyName","openModal","screenName","selectedRecord","ncontrolCode","ncontrolcode","formatMessage","id","getPricingAddTestService","DRAFT","pricingTestList","getPricingEditService","editParam","editRow","ntestpricedetailcode","hasOwnProperty","length","loadEsign","push","selectedId","priceDataState"],"mappings":"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","sourcesContent":["\r\nimport rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport { sortData} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { transactionStatus } from '../components/Enumeration';\r\nimport { intl } from \"../components/App\";\r\n\r\nexport function getTestPriceVersionDetail (testPriceVersion, userInfo, masterData) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"testpricing/getTestPriceVersion\", {npriceversioncode:testPriceVersion.npriceversioncode, \r\n                                                          userinfo:userInfo})\r\n   .then(response=>{     \r\n        masterData = {...masterData, ...response.data};       \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\nexport function getEditTestPriceVersionService(inputParam){\r\n    return function(dispatch){\r\n        if (inputParam.masterData.SelectedTestPriceVersion.ntransactionstatus !== transactionStatus.APPROVED && inputParam.masterData.SelectedTestPriceVersion.ntransactionstatus !== transactionStatus.RETIRED) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testpricing/getActiveTestPriceVersionById\",{[inputParam.primaryKeyName]:inputParam.masterData.SelectedTestPriceVersion[inputParam.primaryKeyName], \r\n                                                                    userinfo:inputParam.userInfo})\r\n        .then(response=>{\r\n            //const masterData = {...inputParam.masterData, SelectedTestPriceVersion: response.data};\r\n            \r\n            \r\n            dispatch({type: DEFAULT_RETURN, payload:{ openModal:true,\r\n                                                       operation:inputParam.operation, \r\n                                                       loading:false,\r\n                                                       screenName:inputParam.screenName,   \r\n                                                       selectedRecord:response.data,\r\n                                                       ncontrolCode:inputParam.ncontrolcode,}})\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })\r\n    }\r\n    else {\r\n        //toast.warn(this.props.formatMessage({ id: masterData.SelectedSupplier.stranstatus }));\r\n        toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTTESTPRICEVERSION\" }));\r\n    }\r\n    }\r\n}\r\n\r\nexport function getPricingAddTestService(screenName, operation, masterData, userInfo, ncontrolCode){\r\n    return function (dispatch) {    \r\n        if (masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT){     \r\n        \r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testpricing/getPriceUnmappedTest\",{\"npriceversioncode\":masterData.SelectedTestPriceVersion[\"npriceversioncode\"], \r\n            userinfo:userInfo})\r\n\r\n        .then(response=>{\r\n\r\n                // const testMap = constructOptionList(response.data || [], \"ntestcode\", \"stestname\",\r\n                //              undefined, undefined, true) ;\r\n\r\n                // const testList = testMap.get(\"OptionList\");                          \r\n                dispatch({type: DEFAULT_RETURN, payload:{//pricingTestList:testList, \r\n                                                        pricingTestList:response.data,\r\n                                                        openModal:true,\r\n                                                        operation, screenName, ncontrolCode,\r\n                                                        //selectedRecord, \r\n                                                        loading:false}});\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }      \r\n            }) \r\n    }\r\n    else{\r\n        toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTTESTPRICEVERSION\"}));\r\n    }\r\n}}\r\n\r\nexport function getPricingEditService(editParam){\r\n    return function (dispatch) {    \r\n       // screenName, operation, masterData, userInfo, ncontrolCode\r\n       //console.log(\"editParam:\", editParam);\r\n        if (editParam.masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT){     \r\n        \r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testpricing/getTestPrice\",{\"npriceversioncode\":editParam.masterData.SelectedTestPriceVersion[\"npriceversioncode\"], \r\n                                                \"ntestpricedetailcode\":editParam.editRow ? editParam.editRow.ntestpricedetailcode :null,\r\n                                                userinfo:editParam.userInfo})\r\n\r\n        .then(response=>{\r\n            let selectedRecord =[];\r\n            if(response.data.hasOwnProperty(\"TestPrice\") && response.data[\"TestPrice\"].length === 0){\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false\r\n                    }\r\n                });\r\n\r\n                toast.warn(intl.formatMessage({id:\"IDS_SELECTTEST\"}));\r\n            }else {\r\n                if (editParam.editRow){\r\n                    selectedRecord.push(response.data[\"SelectedTestPrice\"]);\r\n                }else{\r\n                    selectedRecord = sortData(response.data[\"TestPrice\"])\r\n                }\r\n                dispatch({type: DEFAULT_RETURN, payload:{//pricingTestList:testList, \r\n                    //testPriceList:response.data[\"TestPrice\"],\r\n                    openModal:true,\r\n                    operation:editParam.operation,\r\n                    screenName:editParam.screenName, \r\n                    ncontrolCode:editParam.ncontrolCode,\r\n                    selectedRecord, \r\n                    selectedId:editParam.editRow ? editParam.editRow.ntestpricedetailcode :null,\r\n                    loading:false,\r\n                    priceDataState:editParam.priceDataState\r\n                }});\r\n            }\r\n\r\n\r\n             \r\n        })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }      \r\n            }) \r\n    }\r\n    else{\r\n        toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTTESTPRICEVERSION\"}));\r\n    }\r\n}}"]},"metadata":{},"sourceType":"module"}