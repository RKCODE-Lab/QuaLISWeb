{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\type3component\\\\AddType3Component.js\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport FormTextarea from '../form-textarea/form-textarea.component';\nimport FormInput from '../form-input/form-input.component';\nimport FormSelectSearch from '../form-select-search/form-select-search.component';\nimport DateTimePicker from '../date-time-picker/date-time-picker.component';\nimport FormNumericInput from '../form-numeric-input/form-numeric-input.component';\nimport CustomSwitch from '../custom-switch/custom-switch.component';\nimport { transactionStatus } from '../Enumeration';\n\nconst AddType3Component = props => {\n  return props.extractedColumnList.map(item => {\n    switch (item.ndesigncomponentcode) {\n      case 1:\n        {\n          //TextBox            \n          return /*#__PURE__*/React.createElement(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(Col, {\n            md: 12,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(FormInput, {\n            label: props.intl.formatMessage({\n              id: item.idsName\n            }),\n            name: item.dataField,\n            type: \"text\",\n            onChange: event => props.onInputOnChange(event),\n            placeholder: props.intl.formatMessage({\n              id: item.idsName\n            }),\n            value: props.selectedRecord[item.dataField] || \"\",\n            isMandatory: item.mandatory,\n            required: item.mandatory,\n            maxLength: item.fieldLength,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 29\n            }\n          })));\n        }\n\n      case 2:\n        {\n          //Textarea           \n          return /*#__PURE__*/React.createElement(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(Col, {\n            md: 12,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(FormTextarea, {\n            label: props.intl.formatMessage({\n              id: item.idsName\n            }),\n            name: item.dataField,\n            onChange: event => props.onInputOnChange(event),\n            placeholder: props.intl.formatMessage({\n              id: item.idsName\n            }),\n            value: props.selectedRecord[item.dataField],\n            rows: \"2\",\n            isMandatory: item.mandatory,\n            required: item.mandatory,\n            maxLength: item.fieldLength,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 29\n            }\n          })));\n        }\n\n      case 3:\n        {\n          //Combobox--yet to include functionality & logic to handle this case in Type3Component.jsx\n          return /*#__PURE__*/React.createElement(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(Col, {\n            md: 12,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n            name: item.dataField,\n            formLabel: props.intl.formatMessage({\n              id: item.idsName\n            }),\n            placeholder: props.intl.formatMessage({\n              id: item.idsName\n            }),\n            options: item.dataList || [],\n            value: props.selectedRecord[item.dataField] || \"\",\n            isMandatory: item.nmandatory === transactionStatus.YES ? true : false,\n            isMulti: false,\n            isClearable: false,\n            isSearchable: true,\n            isDisabled: false,\n            closeMenuOnSelect: true,\n            onChange: event => props.onComboChange(event, item.dataField, item),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }\n          })));\n        }\n\n      case 4:\n        {\n          //Date Picker\n          return /*#__PURE__*/React.createElement(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(Col, {\n            md: 12,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(DateTimePicker, {\n            name: item.dataField,\n            label: props.intl.formatMessage({\n              id: item.idsName\n            }),\n            className: \"form-control\",\n            placeholderText: \"Select date..\",\n            selected: props.selectedRecord[item.dataField] || \"\",\n            dateFormat: props.userInfo.ssitedate,\n            showTimeInput: false,\n            isClearable: false,\n            isMandatory: item.nmandatory === transactionStatus.YES ? true : false,\n            required: item.nmandatory === transactionStatus.YES ? true : false,\n            onChange: date => props.handleDateChange(item.dataField, date, item),\n            value: props.selectedRecord[item.dataField],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }\n          })));\n        }\n\n      case 5:\n        {\n          //Numeric Input             \n          return /*#__PURE__*/React.createElement(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(Col, {\n            md: 12,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(FormNumericInput, {\n            name: item.dataField,\n            label: props.intl.formatMessage({\n              id: item.idsName\n            }),\n            placeholder: props.intl.formatMessage({\n              id: item.idsName\n            }),\n            value: props.selectedRecord[item.dataField] || \"\",\n            type: \"number\",\n            strict: true,\n            maxLength: 10,\n            noStyle: true,\n            onChange: event => props.onNumericInputOnChange(event, item.dataField, item),\n            precision: 0,\n            min: 0,\n            className: \"form-control\",\n            isMandatory: item.nmandatory === transactionStatus.YES ? true : false,\n            required: item.nmandatory === transactionStatus.YES ? true : false,\n            errors: \"Please provide a valid number.\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 29\n            }\n          })));\n        }\n\n      case 6:\n        {\n          //Check box/switch           \n          return /*#__PURE__*/React.createElement(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(Col, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(CustomSwitch, {\n            name: item.controlName,\n            type: \"switch\",\n            label: props.intl.formatMessage({\n              id: item.idsName\n            }),\n            placeholder: props.intl.formatMessage({\n              id: item.idsName\n            }),\n            isMandatory: item.mandatory,\n            required: item.mandatory,\n            onChange: event => props.onInputOnChange(event, item),\n            defaultValue: props.selectedRecord[item.controlName] === 3 ? true : false,\n            checked: props.selectedRecord[item.controlName] === 3 ? true : false,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }\n          })));\n        }\n\n      default:\n        return \"\";\n    }\n  });\n};\n\nexport default injectIntl(AddType3Component);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/type3component/AddType3Component.js"],"names":["React","Row","Col","injectIntl","FormTextarea","FormInput","FormSelectSearch","DateTimePicker","FormNumericInput","CustomSwitch","transactionStatus","AddType3Component","props","extractedColumnList","map","item","ndesigncomponentcode","intl","formatMessage","id","idsName","dataField","event","onInputOnChange","selectedRecord","mandatory","fieldLength","dataList","nmandatory","YES","onComboChange","userInfo","ssitedate","date","handleDateChange","onNumericInputOnChange","controlName"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col} from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormTextarea from '../form-textarea/form-textarea.component';\r\nimport FormInput from '../form-input/form-input.component';\r\nimport FormSelectSearch from '../form-select-search/form-select-search.component';\r\nimport DateTimePicker from '../date-time-picker/date-time-picker.component';\r\nimport FormNumericInput from '../form-numeric-input/form-numeric-input.component';\r\nimport CustomSwitch from '../custom-switch/custom-switch.component';\r\nimport { transactionStatus } from '../Enumeration'\r\n\r\nconst AddType3Component = (props) => {\r\n    return(      \r\n       props.extractedColumnList.map(item=>{\r\n        switch (item.ndesigncomponentcode) {\r\n\r\n            case 1: {    \r\n                //TextBox            \r\n                return (\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <FormInput\r\n                                label={props.intl.formatMessage({ id:item.idsName})}\r\n                                name={item.dataField}\r\n                                type=\"text\"\r\n                                onChange={(event)=>props.onInputOnChange(event)}\r\n                                placeholder={props.intl.formatMessage({ id:item.idsName})}\r\n                                value ={props.selectedRecord[item.dataField]  || \"\"}\r\n                                isMandatory={item.mandatory}\r\n                                required={item.mandatory}\r\n                                maxLength={item.fieldLength}\r\n                            />\r\n                                          \r\n                        </Col>\r\n                    </Row>\r\n                    )\r\n            }\r\n            case 2: {     \r\n                //Textarea           \r\n                return (\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <FormTextarea\r\n                                label={props.intl.formatMessage({ id:item.idsName})}\r\n                                name={item.dataField}\r\n                                onChange={(event)=>props.onInputOnChange(event)}\r\n                                placeholder={props.intl.formatMessage({ id:item.idsName})}\r\n                                value ={props.selectedRecord[item.dataField]}\r\n                                rows=\"2\"\r\n                                isMandatory={item.mandatory}\r\n                                required={item.mandatory}\r\n                                maxLength={item.fieldLength}\r\n                            />\r\n                          \r\n                        </Col>\r\n                    </Row>\r\n                    )\r\n            }\r\n            case 3: {\r\n                //Combobox--yet to include functionality & logic to handle this case in Type3Component.jsx\r\n                return (\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <FormSelectSearch\r\n                                name={item.dataField}\r\n                                formLabel={ props.intl.formatMessage({ id:item.idsName})}                              \r\n                                placeholder={props.intl.formatMessage({ id:item.idsName}) }                            \r\n                                options={item.dataList || []}\r\n                                value = { props.selectedRecord[item.dataField] || \"\"}\r\n                                isMandatory={item.nmandatory === transactionStatus.YES ? true :false}\r\n                                isMulti={false}\r\n                                isClearable={false}\r\n                                isSearchable={true}                                \r\n                                isDisabled={false}\r\n                                closeMenuOnSelect={true}\r\n                                onChange = {(event)=> props.onComboChange(event, item.dataField, item)}                               \r\n                            />  \r\n                           \r\n                        </Col>\r\n                    </Row>\r\n                );\r\n            }\r\n            case 4: {\r\n                //Date Picker\r\n                return (\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <DateTimePicker\r\n                                    name={item.dataField} \r\n                                    label={ props.intl.formatMessage({ id:item.idsName})}                     \r\n                                    className='form-control'\r\n                                    placeholderText=\"Select date..\"\r\n                                    selected={props.selectedRecord[item.dataField] || \"\"}\r\n                                    dateFormat={props.userInfo.ssitedate}\r\n                                    showTimeInput={false}\r\n                                    isClearable={false}\r\n                                    isMandatory={item.nmandatory === transactionStatus.YES ? true :false}                       \r\n                                    required={item.nmandatory === transactionStatus.YES ? true :false}\r\n                                    onChange={date => props.handleDateChange(item.dataField, date, item)}\r\n                                    value={props.selectedRecord[item.dataField]}\r\n                              />\r\n                           \r\n                        </Col>\r\n                    </Row>\r\n                );\r\n            }\r\n            case 5: {   \r\n                //Numeric Input             \r\n                return (\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <FormNumericInput\r\n                                   name={item.dataField}\r\n                                   label={ props.intl.formatMessage({ id:item.idsName})}                          \r\n                                   placeholder={props.intl.formatMessage({ id:item.idsName})}\r\n                                   value ={ props.selectedRecord[item.dataField] || \"\"}\r\n                                   type=\"number\"                               \r\n                                   strict={true}\r\n                                   maxLength={10}\r\n                                   noStyle={true}\r\n                                   onChange={(event) => props.onNumericInputOnChange(event, item.dataField, item)}\r\n                                   precision={0}\r\n                                   min={0}\r\n                                   className=\"form-control\"\r\n                                   isMandatory={item.nmandatory === transactionStatus.YES ? true :false}                       \r\n                                   required={item.nmandatory === transactionStatus.YES ? true :false}\r\n                                   errors=\"Please provide a valid number.\"\r\n                              />\r\n                        </Col>\r\n                    </Row>\r\n                    )\r\n            }\r\n            case 6: {     \r\n                //Check box/switch           \r\n                return (\r\n                    <Row>\r\n                        <Col>\r\n                            <CustomSwitch\r\n                                   name={item.controlName}\r\n                                   type=\"switch\"\r\n                                   label={props.intl.formatMessage({ id:item.idsName})}\r\n                                   placeholder={props.intl.formatMessage({ id:item.idsName})}                            \r\n                                   isMandatory={item.mandatory}                       \r\n                                   required={item.mandatory}                                   \r\n                                   onChange={(event)=> props.onInputOnChange(event, item)}\r\n                                   defaultValue ={props.selectedRecord[item.controlName] === 3 ? true :false }\r\n                                   checked={props.selectedRecord[item.controlName] === 3 ? true :false}\r\n                                   />\r\n                        </Col>\r\n                    </Row>\r\n                    )\r\n            }\r\n            default :\r\n                return \"\";\r\n        }\r\n        \r\n        } )\r\n\r\n    )\r\n}\r\n\r\nexport default injectIntl(AddType3Component);"]},"metadata":{},"sourceType":"module"}