{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\myjobs\\\\TestWiseMyJobs.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { faCheck, faPencilAlt, faSync, faBolt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Card, Col, Nav, Row } from 'react-bootstrap';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { ProductList } from '../testmanagement/testmaster-styled';\nimport SplitterLayout from \"react-splitter-layout\";\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { getMyJobsubSampleDetailTestWise, getMyJobTestDetailTestWise, getMJTestChildTabDetailTestWise, performAction, updateStore, updateDecision, getRegTypeTestWise, getRegSubTypeTestWise, getTestStatusTestWise, getSectionTestWise, getFilterStatusTestWise, getMyJobsSampleTestWise, getStatusCombo, validateEsignCredential, crudMaster, validateEsignforAccept, getAppConfigVersionTestWise, getAcceptTestTestWise, filterTransactionList, checkListRecord, generateCOAReport, getMJSampleChildTabDetailTestWise, getAttachmentCombo, viewAttachment, deleteAttachment, getCommentsCombo, previewSampleReport, getEnforceCommentsHistory, reportGenerate } from '../../actions';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport { getControlMap, showEsign, sortData, constructOptionList, getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport TestWiseMyJobsFilter from './TestWiseMyJobsFilter';\nimport { designProperties, transactionStatus, RegistrationType, RegistrationSubType } from '../../components/Enumeration';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport { onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\nimport ScrollBar from 'react-perfect-scrollbar';\nimport CustomPopOver from '../../components/customPopover';\nimport { ContentPanel } from '../../components/App.styles';\nimport TestWiseMyJobsSampleInfoGrid from './TestWiseMyJobsSampleInfoGrid';\nimport TestWiseMyJobsSampleInfoView from './TestWiseMyJobsSampleInfoView';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass TestWiseMyJobs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take\n      });\n    };\n\n    this.testTabDetail = () => {\n      const testTabMap = new Map();\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.MJ_TEST || [];\n      const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\n      let ntransactiontestcode = this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n\n      if (this.state.showTest) {\n        testTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n          screenName: \"IDS_TESTATTACHMENTS\",\n          selectedMaster: selectedTestList,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n          deleteRecord: this.props.deleteAttachment,\n          fetchRecord: this.props.getAttachmentCombo,\n          onSaveClick: this.onAttachmentSaveClick,\n          masterList: selectedTestList,\n          masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n          addName: \"AddTestAttachment\",\n          editName: \"EditTestAttachment\",\n          deleteName: \"DeleteTestAttachment\",\n          viewName: \"ViewTestAttachment\",\n          methodUrl: \"TestAttachment\",\n          nsubsampleneed: this.props.Login.masterData[\"RegSubTypeValue\"],\n          subFields: [{\n            [designProperties.VALUE]: \"stestsynonym\"\n          }, {\n            [designProperties.VALUE]: \"dcreateddate\"\n          }],\n          masterData: this.props.Login.masterData,\n          deleteParam: {\n            methodUrl: \"TestAttachment\",\n            ntransactiontestcode,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            esignRights: this.props.Login.userRoleControlRights,\n            screenName: \"IDS_TESTATTACHMENTS\"\n          },\n          editParam: {\n            methodUrl: \"TestAttachment\",\n            ntransactiontestcode,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            esignRights: this.props.Login.userRoleControlRights,\n            screenName: \"IDS_TESTATTACHMENTS\",\n            masterList: selectedTestList\n          },\n          selectedListName: \"IDS_TESTS\",\n          displayName: \"stestsynonym\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 51\n          }\n        }));\n        testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n          screenName: \"IDS_TESTCOMMENTS\",\n          selectedMaster: selectedTestList,\n          onSaveClick: this.onCommentsSaveClick,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          Comments: this.props.Login.masterData.RegistrationTestComment || [],\n          fetchRecord: this.props.getCommentsCombo,\n          masterList: selectedTestList,\n          masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n          addName: \"AddTestComment\",\n          editName: \"EditTestComment\",\n          deleteName: \"DeleteTestComment\",\n          methodUrl: \"TestComment\",\n          isTestComment: false,\n          primaryKeyField: \"ntestcommentcode\",\n          dataState: this.state.testCommentDataState,\n          dataStateChange: this.testDataStateChange,\n          masterData: this.props.Login.masterData,\n          deleteParam: {\n            methodUrl: \"TestComment\",\n            ntransactiontestcode,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            esignRights: this.props.Login.userRoleControlRights,\n            screenName: \"IDS_TESTCOMMENTS\"\n          },\n          editParam: {\n            methodUrl: \"TestComment\",\n            ntransactiontestcode,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            esignRights: this.props.Login.userRoleControlRights,\n            screenName: \"IDS_TESTCOMMENTS\",\n            operation: \"update\",\n            masterList: selectedTestList,\n            ncontrolCode: editTestCommentsId\n          },\n          selectedListName: \"IDS_TESTS\",\n          displayName: \"stestsynonym\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 48\n          }\n        }));\n      }\n\n      return testTabMap;\n    };\n\n    this.onTestTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n\n      if (activeTestTab !== this.props.Login.activeTestTab) {\n        if (this.props.Login.masterData.MJSelectedTest && this.props.Login.masterData.MJSelectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            MJSelectedTest: this.props.Login.masterData.MJSelectedTest,\n            ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ? String(this.props.Login.masterData.MJSelectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n            npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestTab,\n            screenName: activeTestTab,\n            testAttachmentDataState: this.state.testAttachmentDataState,\n            testCommentDataState: this.state.testCommentDataState\n          };\n          this.props.getMJTestChildTabDetailTestWise(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.onFilterComboChange = (comboData, fieldName) => {\n      if (comboData) {\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n        let inputParamData = {};\n\n        if (fieldName === 'nsampletypecode') {\n          if (comboData.value !== this.props.Login.masterData.realSampleTypeValue.nsampletypecode) {\n            inputParamData = {\n              nflag: 2,\n              fromdate: obj.fromDate,\n              todate: obj.toDate,\n              nsampletypecode: comboData.value,\n              userinfo: this.props.Login.userInfo,\n              masterData: this.props.Login.masterData,\n              realSampleTypeValue: comboData.item\n            };\n            this.props.getRegTypeTestWise(inputParamData);\n          }\n        } else if (fieldName === 'nregtypecode') {\n          if (comboData.value !== this.props.Login.masterData.realRegTypeValue.nregtypecode) {\n            inputParamData = {\n              nflag: 3,\n              fromdate: obj.fromDate,\n              todate: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n              nregtypecode: comboData.value,\n              userinfo: this.props.Login.userInfo,\n              masterData: this.props.Login.masterData,\n              realRegTypeValue: comboData.item\n            };\n            this.props.getRegSubTypeTestWise(inputParamData);\n          }\n        } else if (fieldName === 'nregsubtypecode') {\n          if (comboData.value !== this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode) {\n            let inputData = {\n              nflag: 4,\n              fromdate: obj.fromDate,\n              todate: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n              nregsubtypecode: comboData.value,\n              userinfo: this.props.Login.userInfo\n            };\n            inputParamData = {\n              inputData,\n              masterData: { ...this.props.Login.masterData,\n                realRegSubTypeValue: comboData.item\n              }\n            };\n            this.props.getAppConfigVersionTestWise(inputParamData);\n          }\n        } else if (fieldName === 'napproveconfversioncode') {\n          if (comboData.value !== this.props.Login.masterData.realApprovalVersionValue.napproveconfversioncode) {\n            inputParamData = {\n              nflag: 5,\n              dfrom: obj.fromDate,\n              dto: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n              nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n              napprovalversioncode: comboData.value,\n              userinfo: this.props.Login.userInfo,\n              masterData: { ...this.props.Login.masterData,\n                realApprovalVersionValue: comboData.item\n              },\n              RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n              nsectioncode: this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.realUserSectionValue.nsectioncode\n            };\n            this.props.getFilterStatus(inputParamData);\n          }\n        } else if (fieldName === 'nsectioncode') {\n          if (comboData.value !== this.props.Login.masterData.realUserSectionValue.nsectioncode) {\n            inputParamData = {\n              nflag: 6,\n              fromdate: obj.fromDate,\n              todate: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n              nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n              napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode,\n              nsectioncode: comboData.value === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : comboData.value,\n              userinfo: this.props.Login.userInfo,\n              masterData: { ...this.props.Login.masterData,\n                realUserSectionValue: comboData.item\n              },\n              RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n              ntransactionstatus: JSON.stringify(this.props.Login.masterData.realFilterStatusValue.ntransactionstatus),\n              stransactionstatus: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.realFilterStatusValue.ntransactionstatus\n            };\n            this.props.getSectionTestWise(inputParamData);\n          }\n        } else if (fieldName === 'ntransactionstatus') {\n          if (comboData.value !== this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) {\n            inputParamData = {\n              nflag: 7,\n              fromdate: obj.fromDate,\n              todate: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n              nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n              napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode,\n              //nsectioncode:this.props.Login.masterData.realUserSectionValue.nsectioncode,\n              userinfo: this.props.Login.userInfo,\n              masterData: { ...this.props.Login.masterData,\n                realFilterStatusValue: comboData.item\n              },\n              RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n              ntransactionstatus: comboData.value === -1 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : comboData.value\n            };\n            this.props.getFilterStatusTestWise(inputParamData);\n          }\n        } else if (fieldName === 'ntestcode') {\n          if (comboData.value !== this.props.Login.masterData.realTestValue.ntestcode) {\n            let masterData = { ...this.props.Login.masterData,\n              realTestValue: comboData.item\n            };\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        } else {\n          if (comboData.value !== this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) {\n            inputParamData = {\n              dfrom: obj.fromDate,\n              dto: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n              nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n              napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode,\n              userinfo: this.props.Login.userInfo,\n              masterData: { ...this.props.Login.masterData,\n                FilterStatusValue: comboData.item\n              },\n              RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n              ntransactionstatus: comboData.value,\n              stransactionstatus: comboData.value === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : comboData.value,\n              nsectioncode: this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.realUserSectionValue.nsectioncode\n            };\n            this.props.getTestStatusTestWise(inputParamData);\n          }\n        }\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      let fromdate = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date();\n      let todate = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date();\n      let obj = {};\n\n      if (dateName === 'fromDate') {\n        obj = convertDateValuetoString(dateValue, todate, this.props.Login.userInfo);\n        fromdate = obj.fromDate;\n        todate = obj.toDate;\n      } else {\n        obj = convertDateValuetoString(fromdate, dateValue, this.props.Login.userInfo);\n        fromdate = obj.fromDate;\n        todate = obj.toDate;\n      }\n\n      let inputParam = {\n        inputData: {\n          nflag: 2,\n          nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n          fromdate: String(fromdate),\n          todate: String(todate),\n          userinfo: this.props.Login.userInfo\n        },\n        masterData: this.props.Login.masterData\n      };\n      this.props.getAppConfigVersionTestWise(inputParam);\n    };\n\n    this.onReload = () => {\n      let {\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApprovalVersionValue,\n        realUserSectionValue,\n        realTestValue\n      } = this.props.Login.masterData;\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApprovalVersionValue,\n        realUserSectionValue,\n        realTestValue\n      };\n      let inputData = {\n        nneedsubsample: realRegSubTypeValue && realRegSubTypeValue.nneedsubsample || false,\n        nsampletypecode: realSampleTypeValue && realSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: realRegTypeValue && realRegTypeValue.nregtypecode || -1,\n        nregsubtypecode: realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode || -1,\n        ntransactionstatus: String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\n        // ntransactionstatus: ((realFilterStatusValue && realFilterStatusValue.ntransactionstatus !== undefined) || realFilterStatusValue.ntransactionstatus !== '0') ? String(realFilterStatusValue.ntransactionstatus) : -1,\n        napprovalconfigcode: realApprovalVersionValue && realApprovalVersionValue.napprovalconfigcode || -1,\n        napprovalversioncode: String(realApprovalVersionValue ? realApprovalVersionValue.napprovalconfigversioncode : 1),\n        // napprovalversioncode: realApprovalVersionValue && realApprovalVersionValue.napprovalconfigversioncode ? String(realApprovalVersionValue.napprovalconfigversioncode) : -1,\n        nsectioncode: realUserSectionValue ? realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(realUserSectionValue.nsectioncode) : null,\n        ntestcode: realTestValue && realTestValue.ntestcode ? realTestValue.ntestcode : -1,\n        userinfo: this.props.Login.userInfo,\n        showTest: true,\n        activeTestTab: this.props.Login.activeTestTab || \"\",\n        checkBoxOperation: 3,\n        ntype: 2,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.ntransactionstatus !== -1 && inputData.napprovalconfigcode !== -1 && inputData.napprovalversioncode !== -1 && realUserSectionValue.nsectioncode !== null && realTestValue.ntestcode !== -1) {\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n        inputData['fromdate'] = obj.fromDate;\n        inputData['todate'] = obj.toDate;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchTestRef: this.searchTestRef,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake,\n          testAttachmentDataState: this.state.testAttachmentDataState,\n          testCommentDataState: this.state.testCommentDataState\n        };\n        this.props.getMyJobsSampleTestWise(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let realSampleTypeValue = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue;\n      let realRegTypeValue = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue;\n      let realRegSubTypeValue = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue;\n      let realFilterStatusValue = this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue;\n      let realApprovalVersionValue = this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue;\n      let realUserSectionValue = this.props.Login.masterData.realUserSectionValue && this.props.Login.masterData.realUserSectionValue;\n      let realTestValue = this.props.Login.masterData.realTestValue && this.props.Login.masterData.realTestValue;\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApprovalVersionValue,\n        realUserSectionValue,\n        realTestValue\n      };\n      let inputData = {\n        npreregno: \"0\",\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode) || -1,\n        nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode) || -1,\n        ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus !== undefined || this.props.Login.masterData.realFilterStatusValue.ntransactionstatus !== '0' ? String(this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) : \"-1\",\n        napprovalconfigcode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigcode || -1 : null,\n        napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode ? String(this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode) : null,\n        nsectioncode: this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.realUserSectionValue.nsectioncode) : null,\n        ntestcode: this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode : -1,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || -1,\n        userinfo: this.props.Login.userInfo,\n        activeTestTab: this.props.Login.activeTestTab,\n        checkBoxOperation: 3,\n        ntype: 2,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.ntransactionstatus !== \"-1\" && inputData.napprovalconfigcode !== -1 && inputData.napprovalversioncode !== \"-1\" && realFilterStatusValue.sfilterstatus !== null && inputData.nsectioncode !== \"undefined\" && inputData.ntestcode !== undefined) {\n        inputData['fromdate'] = obj.fromDate;\n        inputData['todate'] = obj.toDate;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchTestRef: this.searchTestRef,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake,\n          testAttachmentDataState: this.state.testAttachmentDataState,\n          testCommentDataState: this.state.testCommentDataState\n        };\n        this.props.getMyJobsSampleTestWise(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.onAcceptTestWise = (action, inputParam, MJSelectedTest, userInfo) => {\n      let inputData = {};\n      let Map = {\n        nflag: 3,\n        ncheck: 1,\n        nsampletypecode: inputParam.nsampletypecode,\n        nregtypecode: inputParam.nregtypecode,\n        nregsubtypecode: inputParam.nregsubtypecode,\n        ntransactionstatus: inputParam.ntransactionstatus,\n        napprovalversioncode: inputParam.napprovalversioncode,\n        nsectioncode: inputParam.nsectioncode,\n        ntestcode: inputParam.ntestcode,\n        fromdate: inputParam.dfrom,\n        todate: inputParam.dto,\n        npreregno: MJSelectedTest ? MJSelectedTest.map(sample => sample.npreregno).join(\",\") : \"\",\n        ntransactionsamplecode: MJSelectedTest ? MJSelectedTest.map(subsample => subsample.ntransactionsamplecode).join(\",\") : \"\",\n        transactiontestcode: MJSelectedTest ? MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        ntransactiontestcode: 0,\n        ncontrolcode: action.ncontrolcode,\n        nneedsubsample: inputParam.masterData.nneedsubsample,\n        ndesigntemplatemappingcode: inputParam.ndesigntemplatemappingcode,\n        checkBoxOperation: 3,\n        scontrolname: action.scontrolname,\n        userinfo: userInfo,\n        masterData: inputParam.masterData\n      };\n      inputParam = {\n        inputData: Map,\n        masterData: inputParam.masterData\n      };\n\n      if (inputParam.inputData.transactiontestcode && inputParam.inputData.transactiontestcode.length > 0) {\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, action.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              parentPopUpSize: 'lg',\n              screenName: this.props.Login.screenName,\n              operation: 'accept'\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.getAcceptTestTestWise(inputParam);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTEST\"\n        }));\n      }\n    };\n\n    this.testDataStateChange = event => {\n      switch (this.props.Login.activeTestTab) {\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.sampleGridDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.sampleDataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_SAMPLEINFO\":\n          this.setState({\n            sampleGridDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SAMPLEAPPROVALHISTORY\":\n          this.setState({\n            sampleHistoryDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_PRINTHISTORY\":\n          this.setState({\n            samplePrintHistoryDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_REPORTHISTORY\":\n          this.setState({\n            reportHistoryDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sampleGridDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let showReport = this.props.Login.showReport;\n\n      if (this.props.Login.loadEsign) {\n        loadEsign = false;\n        selectedRecord.agree = false;\n        openModal = false;\n      } else {\n        selectedRecord = {};\n        showReport = false;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          showReport\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleClose = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openChildModal = this.props.Login.openChildModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let templateData = this.props.Login.templateData;\n      let operation = this.props.Login.operation;\n      let openTemplateModal = this.props.Login.openTemplateModal;\n\n      if (this.props.Login.loadEsign) {\n        if (operation === \"accept\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          selectedRecord = {};\n          templateData = {};\n          operation = undefined;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openTemplateModal = false;\n        openModal = false;\n        openChildModal = false;\n        selectedRecord = {};\n        templateData = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          templateData,\n          selectedParamId: null,\n          operation,\n          openTemplateModal\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData,\n        operation: this.props.Login.operation\n      };\n\n      if (this.props.Login.operation === 'accept') {\n        this.props.validateEsignforAccept(inputParam, \"openChildModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\n      }\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let {\n          testskip,\n          testtake\n        } = this.state;\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.MJ_TEST];\n        testList = testList.slice(testskip, testskip + testtake);\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, selectedTestList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.MJ_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let ok = true;\n\n      if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n\n        if (selectedTestList.length > 0) {\n          inputParam = onSaveTestAttachment(saveParam, selectedTestList);\n        } else {\n          ok = false;\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSAMPLE\"\n          }));\n        }\n      }\n\n      if (ok) {\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              operation: this.props.Login.operation,\n              screenName: this.props.Login.screenName\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n        }\n      }\n    };\n\n    this.searchTestRef = React.createRef();\n    this.formRef = React.createRef();\n    this.state = {\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      testAttachmentDataState: {},\n      testCommentDataState: {},\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      masterStatus: \"\",\n      error: \"\",\n      oldComboData: {},\n      selectedRecord: {},\n      operation: \"\",\n      screenName: undefined,\n      showSample: false,\n      showTest: true,\n      sampleListColumns: [],\n      subSampleListColumns: [],\n      testListColumns: [],\n      TableExpandableItem: [],\n      SingleItem: [],\n      SampleGridItem: [],\n      SampleGridExpandableItem: [],\n      sampleListMainField: [],\n      subSampleListMainField: [],\n      testListMainField: [],\n      testMoreField: [],\n      firstPane: 0,\n      paneHeight: 0,\n      secondPaneHeight: 0,\n      tabPane: 0,\n      SampletypeList: [],\n      RegistrationTypeList: [],\n      RegistrationSubTypeList: [],\n      FilterStatusList: [],\n      ConfigVersionList: [],\n      UserSectionList: [],\n      TestList: [],\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      testskip: 0,\n      testtake: this.props.Login.settings && this.props.Login.settings[12],\n      splitChangeWidthPercentage: 22,\n      subSampleSkip: 0,\n      subSampleTake: 5\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.multilingualMsg !== undefined && props.Login.multilingualMsg !== \"\") {\n      toast.warn(props.intl.formatMessage({\n        id: props.Login.multilingualMsg\n      }));\n      props.Login.multilingualMsg = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  render() {\n    let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n    const filterTestParam = {\n      inputListName: \"MJ_TEST\",\n      selectedObject: \"MJSelectedTest\",\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      fecthInputObject: {\n        ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n        userinfo: this.props.Login.userInfo,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n      },\n      isSingleSelect: false,\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sarno\", \"ssamplearno\", \"stestsynonym\", \"dtransactiondate\", \"smethodname\", \"ssectionname\", \"ssourcename\", \"stransdisplaystatus\", \"sinstrumentcatname\", \"stestname\"],\n      changeList: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"MJSelectedTest\"]\n    };\n    let AP_TestList = this.props.Login.masterData.MJ_TEST ? sortData(this.props.Login.masterData.MJ_TEST, 'descending', 'ntransactiontestcode') : [];\n    let actionStatus = this.props.Login.masterData.actionStatus ? sortData(this.props.Login.masterData.actionStatus, 'ascending', 'ncontrolcode') : [];\n    let testGetParam = {\n      masterData: this.props.Login.masterData,\n      ntransactionstatus: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.ntransactionstatus : -1),\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      npreregno: this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.map(sample => sample.npreregno).join(\",\"),\n      napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode : -1,\n      nsectioncode: this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.realUserSectionValue.nsectioncode) : null,\n      ntestcode: this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode : -1,\n      dfrom: obj.fromDate,\n      dto: obj.toDate,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\",\n      // activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEINFO\",\n      screenName: this.props.Login.screenName,\n      searchTestRef: this.searchTestRef,\n      postParamList: this.postParamList,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n    };\n    let testChildGetParam = {\n      masterData: this.props.Login.masterData,\n      ntransactionstatus: String(this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus),\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      npreregno: this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.map(sample => sample.npreregno).join(\",\"),\n      ntransactionsamplecode: this.props.Login.masterData.MJSelectedSubSample && this.props.Login.masterData.MJSelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\",\n      screenName: this.props.Login.screenName,\n      postParamList: this.postParamList,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      testAttachmentDataState: this.state.testAttachmentDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n    };\n    let breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto\n    }, {\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.ssampletypename || \"NA\" : this.props.Login.masterData.SampleTypeValue ? this.props.Login.masterData.SampleTypeValue.ssampletypename || \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" : this.props.Login.masterData.RegTypeValue ? this.props.Login.masterData.RegTypeValue.sregtypename || \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename || \"NA\" : this.props.Login.masterData.RegSubTypeValue ? this.props.Login.masterData.RegSubTypeValue.sregsubtypename : \"NA\"\n    }, //  {\n    //     \"label\": \"IDS_DESIGNTEMPLATE\",\n    //     \"value\": this.props.Login.masterData.realDesignTemplateMappingValue ? this.props.Login.masterData.realDesignTemplateMappingValue.sregtemplatename || \"NA\" :\n    //              this.props.Login.masterData.realDesignTemplateMappingValue ?\n    //              this.props.Login.masterData.DesignTemplateMappingValue.sregtemplatename : \"NA\"\n    // },\n    {\n      \"label\": \"IDS_CONFIGVERSION\",\n      \"value\": this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.sversionname || \"NA\" : this.props.Login.masterData.ApprovalVersionValue ? this.props.Login.masterData.ApprovalVersionValue.sversionname || \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_SECTION\",\n      \"value\": this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.ssectionname || \"NA\" : this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.ssectionname || \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_Test\",\n      \"value\": this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.stestsynonym || \"NA\" : this.props.Login.masterData.TestValue ? this.props.Login.masterData.TestValue.stestsynonym || \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_FILTERSTATUS\",\n      \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus || \"NA\" : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.sfilterstatus || \"NA\" : \"NA\"\n    }];\n    const TestAcceptActionId = this.state.controlMap.has(\"Accept\") && this.state.controlMap.get(\"Accept\").ncontrolcode;\n    const TestMyJobActionId = this.state.controlMap.has(\"TestMyJobAction\") && this.state.controlMap.get(\"TestMyJobAction\").ncontrolcode;\n    this.postParamList = [{\n      filteredListName: \"searchedTest\",\n      clearFilter: \"no\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      fecthInputObject: testChildGetParam,\n      selectedObject: \"MJSelectedTest\",\n      inputListName: \"MJ_TEST\",\n      updatedListname: \"MJSelectedTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\", \"SampletypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"FilterStatusList\", \"UserSectionList\", \"TestList\"]\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      ref: parentHeight => {\n        this.parentHeight = parentHeight;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      needMultiSelect: true,\n      masterList: this.props.Login.masterData.searchedTest || AP_TestList,\n      selectedMaster: this.props.Login.masterData.MJSelectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getMJTestChildTabDetailTestWise,\n      inputParam: testChildGetParam,\n      subFieldsLabel: true,\n      additionalParam: [''],\n      mainField: 'stestsynonym',\n      selectionList: this.props.Login.masterData.FilterStatus,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"sfilterstatus\",\n      selectionColorField: \"scolorhexcode\",\n      selectedListName: \"MJSelectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      needValidation: true,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      subFields: this.state.DynamicTestColumns //  moreField={this.state.testMoreField}\n      ,\n      jsonDesignFields: true,\n      jsonField: 'jsondata',\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\" // statusColor=\"stranscolor\"\n      ,\n      showStatusIcon: false,\n      showStatusName: true,\n      needFilter: true,\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      handlePageChange: this.handleTestPageChange,\n      showStatusBlink: true,\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '',\n      childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 49\n        }\n      }, this.props.Login.masterData.actionStatus && this.state.userRoleControlRights.indexOf(TestMyJobActionId) !== -1 && actionStatus.length > 0 ? /*#__PURE__*/React.createElement(CustomPopOver, {\n        icon: faBolt,\n        nav: true,\n        data: actionStatus,\n        btnClasses: \"btn-circle btn_grey ml-2 spacesremovefromaction\" //dynamicButton={(value) => this.props.getAcceptTestTestWise(value,testGetParam,this.props.Login.masterData.MJSelectedTest,this.props.Login.userInfo)}\n        ,\n        dynamicButton: value => this.onAcceptTestWise(value, testGetParam, this.props.Login.masterData.MJSelectedTest, this.props.Login.userInfo),\n        textKey: \"scontrolname\",\n        iconKey: \"ncontrolcode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 57\n        }\n      }) : \"\", /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.onReload(),\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 57\n        }\n      })))),\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(TestWiseMyJobsFilter, {\n          SampleType: this.state.SampletypeList || [],\n          SampleTypeValue: this.props.Login.masterData.realSampleTypeValue || [],\n          RegType: this.state.RegistrationTypeList || [],\n          RegTypeValue: this.props.Login.masterData.realRegTypeValue || [],\n          RegSubType: this.state.RegistrationSubTypeList || [],\n          RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue || [],\n          ApprovalVersion: this.state.ConfigVersionList || [],\n          ApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue || [],\n          UserSection: this.state.UserSectionList || [],\n          UserSectionValue: this.props.Login.masterData.realUserSectionValue || [],\n          JobStatus: this.props.Login.masterData.JobStatus || [],\n          Test: this.state.TestList || [],\n          TestValue: this.props.Login.masterData.realTestValue || [],\n          FilterStatus: this.state.FilterStatusList || [],\n          FilterStatusValue: this.props.Login.masterData.realFilterStatusValue || [],\n          fromDate: this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\n          toDate: this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\n          onFilterComboChange: this.onFilterComboChange,\n          handleDateChange: this.handleDateChange,\n          userInfo: this.props.Login.userInfo,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 66\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(ScrollBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: \"detailed-inner no-height\",\n      vertical: true,\n      borderColor: \"#999\",\n      primaryIndex: 1 // onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\n      ,\n      secondaryInitialSize: window.outerHeight - 260 // secondaryInitialSize={this.state.splitChangeWidthPercentage}\n      // onSecondaryPaneSizeChange={this.paneSizeChange}\n      // primaryMinSize={40}\n      // secondaryMinSize={30}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 34\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showTest === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 65\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEINFO\"\n    })))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(ScrollBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: this.state.initialVerticalWidth\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.MJSelectedTest && this.props.Login.masterData.MJSelectedTest.length === 1 ? /*#__PURE__*/React.createElement(TestWiseMyJobsSampleInfoView, {\n      data: this.props.Login.masterData.MJSelectedTest && this.props.Login.masterData.MJSelectedTest.length > 0 ? this.props.Login.masterData.MJSelectedTest[this.props.Login.masterData.MJSelectedTest.length - 1] : {},\n      SingleItem: this.props.Login.masterData.MJSelectedTest && this.props.Login.masterData.MJSelectedTest ? this.state.SingleItem : [],\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 69\n      }\n    }) : /*#__PURE__*/React.createElement(TestWiseMyJobsSampleInfoGrid, {\n      selectedSample: this.props.Login.masterData.MJSelectedTest,\n      userInfo: this.props.Login.userInfo || {},\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleInfoDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      primaryKeyField: \"npreregno\",\n      expandField: \"expanded\",\n      screenName: \"IDS_SAMPLEINFO\" // jsonField={\"jsondata\"}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 69\n      }\n    }))))))))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ScrollBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 37\n      }\n    }, this.state.showTest ? /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(CustomTabs, {\n      paneHeight: this.state.tabPane,\n      activeKey: this.props.Login.activeTestTab || \"IDS_RESULTS\",\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.onTestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 49\n      }\n    })) : \"\")))))))))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      esign: this.props.Login.loadEsign,\n      onSaveClick: this.onSaveClick,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      showSaveContinue: this.state.showSaveContinue,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 29\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      userRoleControlRights,\n      controlMap,\n      testListColumns,\n      SingleItem,\n      testListMainField,\n      SampleGridItem,\n      SampleGridExpandableItem,\n      testMoreField,\n      testAttachmentDataState,\n      testCommentDataState,\n      selectedRecord,\n      SampletypeList,\n      RegistrationTypeList,\n      RegistrationSubTypeList,\n      FilterStatusList,\n      ConfigVersionList,\n      UserSectionList,\n      TestList,\n      testskip,\n      testtake,\n      selectedFilter,\n      DynamicTestColumns,\n      DynamicGridItem,\n      DynamicGridMoreField\n    } = this.state;\n    let bool = false;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.RegSubTypeValue !== previousProps.Login.masterData.RegSubTypeValue) {\n      if (this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nsubsampleneed === transactionStatus.NO) {\n        let dataState = {\n          skip: 0,\n          take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n          group: [{\n            field: 'sarno'\n          }]\n        };\n        testAttachmentDataState = dataState;\n        testCommentDataState = dataState;\n        bool = true;\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      bool = true;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const SampletypeListMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'ascending', 'nsampletypecode', false);\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      const FilterStatusListMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", undefined, undefined, true);\n      const ConfigVersionListMap = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], \"napprovalconfigversioncode\", \"sversionname\", 'descending', 'ntransactionstatus', false);\n      const UserSectionListMap = constructOptionList(this.props.Login.masterData.UserSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n      const TestListMap = constructOptionList(this.props.Login.masterData.Test || [], \"ntestcode\", \"stestsynonym\", undefined, undefined, true);\n      SampletypeList = SampletypeListMap.get(\"OptionList\");\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\n      FilterStatusList = FilterStatusListMap.get(\"OptionList\");\n      ConfigVersionList = ConfigVersionListMap.get(\"OptionList\");\n      UserSectionList = UserSectionListMap.get(\"OptionList\");\n      TestList = TestListMap.get(\"OptionList\");\n      bool = true;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      let selectFilterStatus = {\n        ntransactionstatus: transactionStatus.PARTIAL,\n        sfilterstatus: this.props.intl.formatMessage({\n          id: \"IDS_PARTIAL\"\n        }),\n        scolorhexcode: \"#800000\"\n      };\n      const selectedFilters = this.props.Login.masterData.FilterStatus || [];\n      const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\n      const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL);\n\n      if (selectedFiltersNew.length > 0 && index === -1) {\n        selectedFiltersNew.push(selectFilterStatus);\n      }\n\n      selectedFilter = selectedFiltersNew;\n\n      if (this.props.Login.testAttachmentDataState && this.props.Login.testAttachmentDataState !== previousProps.Login.testAttachmentDataState) {\n        testAttachmentDataState = this.props.Login.testAttachmentDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      }\n    }\n\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n      DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n      DynamicGridMoreField = dynamicColumn.samplegridmoreitems ? dynamicColumn.samplegridmoreitems : [];\n      SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\n      testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\n      testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      bool = true;\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      selectedRecord['fromDate'] = obj.fromDate;\n      selectedRecord['toDate'] = obj.toDate;\n      bool = true;\n    }\n\n    if (bool) {\n      bool = false;\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        testListColumns,\n        SingleItem,\n        testListMainField,\n        SampleGridItem,\n        SampleGridExpandableItem,\n        testMoreField,\n        testAttachmentDataState,\n        testCommentDataState,\n        selectedRecord,\n        SampletypeList,\n        RegistrationTypeList,\n        RegistrationSubTypeList,\n        FilterStatusList,\n        ConfigVersionList,\n        UserSectionList,\n        TestList,\n        testskip,\n        testtake,\n        selectedFilter,\n        DynamicTestColumns,\n        DynamicGridItem,\n        DynamicGridMoreField\n      });\n    }\n  }\n\n  gridfillingColumn(data) {\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  getActiveTestURL() {\n    let url = \"attachment/getTestAttachment\";\n\n    switch (this.props.Login.activeTestTab) {\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      default:\n        url = \"comments/getTestComment\";\n        break;\n    }\n\n    return url;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getMyJobsubSampleDetailTestWise,\n  getMyJobTestDetailTestWise,\n  getMJTestChildTabDetailTestWise,\n  performAction,\n  updateStore,\n  viewAttachment,\n  checkListRecord,\n  updateDecision,\n  getRegTypeTestWise,\n  getRegSubTypeTestWise,\n  getTestStatusTestWise,\n  getSectionTestWise,\n  getFilterStatusTestWise,\n  getMyJobsSampleTestWise,\n  getStatusCombo,\n  validateEsignCredential,\n  crudMaster,\n  validateEsignforAccept,\n  getAppConfigVersionTestWise,\n  getAcceptTestTestWise,\n  filterTransactionList,\n  getMJSampleChildTabDetailTestWise,\n  getAttachmentCombo,\n  deleteAttachment,\n  getCommentsCombo,\n  previewSampleReport,\n  generateCOAReport,\n  getEnforceCommentsHistory,\n  reportGenerate\n})(injectIntl(TestWiseMyJobs));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/myjobs/TestWiseMyJobs.jsx"],"names":["React","connect","injectIntl","faCheck","faPencilAlt","faSync","faBolt","FontAwesomeIcon","Button","Card","Col","Nav","Row","ListWrapper","ProductList","SplitterLayout","DEFAULT_RETURN","getMyJobsubSampleDetailTestWise","getMyJobTestDetailTestWise","getMJTestChildTabDetailTestWise","performAction","updateStore","updateDecision","getRegTypeTestWise","getRegSubTypeTestWise","getTestStatusTestWise","getSectionTestWise","getFilterStatusTestWise","getMyJobsSampleTestWise","getStatusCombo","validateEsignCredential","crudMaster","validateEsignforAccept","getAppConfigVersionTestWise","getAcceptTestTestWise","filterTransactionList","checkListRecord","generateCOAReport","getMJSampleChildTabDetailTestWise","getAttachmentCombo","viewAttachment","deleteAttachment","getCommentsCombo","previewSampleReport","getEnforceCommentsHistory","reportGenerate","CustomTabs","getControlMap","showEsign","sortData","constructOptionList","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","toast","TransactionListMasterJson","TestWiseMyJobsFilter","designProperties","transactionStatus","RegistrationType","RegistrationSubType","BreadcrumbComponent","Attachments","onSaveTestAttachment","Comments","onSaveTestComments","ScrollBar","CustomPopOver","ContentPanel","TestWiseMyJobsSampleInfoGrid","TestWiseMyJobsSampleInfoView","SlideOutModal","Esign","mapStateToProps","state","Login","TestWiseMyJobs","Component","constructor","props","handleTestPageChange","e","setState","testskip","skip","testtake","take","testTabDetail","testTabMap","Map","testList","masterData","searchedTests","MJ_TEST","editTestCommentsId","controlMap","has","get","ncontrolcode","slice","selectedTestList","MJSelectedTest","ntransactiontestcode","map","test","join","showTest","set","userRoleControlRights","RegistrationTestAttachment","onAttachmentSaveClick","VALUE","methodUrl","userInfo","esignRights","screenName","masterList","onCommentsSaveClick","RegistrationTestComment","testCommentDataState","testDataStateChange","operation","ncontrolCode","onTestTabChange","tabProps","activeTestTab","length","inputData","String","item","npreregno","selectedSample","userinfo","testAttachmentDataState","warn","intl","formatMessage","id","onFilterComboChange","comboData","fieldName","obj","fromDate","toDate","inputParamData","value","realSampleTypeValue","nsampletypecode","nflag","fromdate","todate","realRegTypeValue","nregtypecode","realRegSubTypeValue","nregsubtypecode","realApprovalVersionValue","napproveconfversioncode","dfrom","dto","napprovalversioncode","RegSubTypeValue","nsectioncode","realUserSectionValue","UserSection","getFilterStatus","napprovalconfigversioncode","ntransactionstatus","JSON","stringify","realFilterStatusValue","stransactionstatus","FilterStatus","realTestValue","ntestcode","updateInfo","typeName","data","FilterStatusValue","handleDateChange","dateName","dateValue","Date","inputParam","onReload","realFromDate","realToDate","nneedsubsample","napprovalconfigcode","section","checkBoxOperation","ntype","ndesigntemplatemappingcode","searchTestRef","onFilterSubmit","parseInt","undefined","sfilterstatus","onAcceptTestWise","action","ncheck","sample","ntransactionsamplecode","subsample","transactiontestcode","scontrolname","nformcode","loadEsign","screenData","openModal","parentPopUpSize","event","dataState","sampleGridDataStateChange","sampleGridDataState","sampleDataStateChange","activeSampleTab","sampleHistoryDataState","samplePrintHistoryDataState","reportHistoryDataState","closeModal","selectedRecord","showReport","agree","handleClose","openChildModal","templateData","openTemplateModal","selectedParamId","onInputOnChange","target","type","name","checked","ACTIVE","DEACTIVE","YES","NO","validateEsign","sreason","password","saveType","formRef","saveParam","isTestComment","x","ok","selectedMaster","createRef","settings","masterStatus","error","oldComboData","showSample","sampleListColumns","subSampleListColumns","testListColumns","TableExpandableItem","SingleItem","SampleGridItem","SampleGridExpandableItem","sampleListMainField","subSampleListMainField","testListMainField","testMoreField","firstPane","paneHeight","secondPaneHeight","tabPane","SampletypeList","RegistrationTypeList","RegistrationSubTypeList","FilterStatusList","ConfigVersionList","UserSectionList","TestList","splitChangeWidthPercentage","subSampleSkip","subSampleTake","getDerivedStateFromProps","multilingualMsg","componentDidMount","parentHeight","height","clientHeight","render","filterTestParam","inputListName","selectedObject","primaryKeyField","fetchUrl","getActiveTestURL","fecthInputObject","isSingleSelect","searchFieldList","changeList","AP_TestList","actionStatus","testGetParam","MJSelectedSample","postParamList","testChildGetParam","MJSelectedSubSample","breadCrumbData","breadCrumbFrom","breadCrumbto","ssampletypename","SampleTypeValue","sregtypename","RegTypeValue","sregsubtypename","sversionname","ApprovalVersionValue","ssectionname","UserSectionValue","stestsynonym","TestValue","TestAcceptActionId","TestMyJobActionId","filteredListName","clearFilter","searchRef","updatedListname","unchangeList","paneSizeChange","searchedTest","showFilter","openFilter","closeFilter","DynamicTestColumns","indexOf","JobStatus","window","outerHeight","display","borderBottom","marginTop","initialVerticalWidth","sampleInfoDataStateChange","gridfillingColumn","DynamicGridItem","DynamicGridMoreField","onSaveClick","showSaveContinue","componentDidUpdate","previousProps","selectedFilter","bool","Object","values","push","nsubsampleneed","group","field","SampletypeListMap","SampleType","RegistrationTypeListMap","RegistrationSubTypeListMap","FilterStatusListMap","ConfigVersionListMap","ApprovalConfigVersion","UserSectionListMap","TestListMap","Test","selectFilterStatus","PARTIAL","scolorhexcode","selectedFilters","selectedFiltersNew","parse","index","findIndex","DynamicDesign","dynamicColumn","jsondata","testlistitem","samplegriditem","samplegridmoreitems","sampledisplayfields","testlistmoreitems","temparray","option","LABEL","slanguagetypecode","url"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport {  faCheck, faPencilAlt, faSync,faBolt, } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Button, Card, Col, Nav, Row, } from 'react-bootstrap';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { ProductList } from '../testmanagement/testmaster-styled';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {\r\n    getMyJobsubSampleDetailTestWise, getMyJobTestDetailTestWise, getMJTestChildTabDetailTestWise, performAction, updateStore, updateDecision,\r\n    getRegTypeTestWise, getRegSubTypeTestWise,getTestStatusTestWise,getSectionTestWise, getFilterStatusTestWise, getMyJobsSampleTestWise, getStatusCombo, validateEsignCredential,\r\n    crudMaster, validateEsignforAccept, getAppConfigVersionTestWise, getAcceptTestTestWise, filterTransactionList, checkListRecord, generateCOAReport,\r\n    getMJSampleChildTabDetailTestWise, getAttachmentCombo, viewAttachment, deleteAttachment, getCommentsCombo, previewSampleReport,\r\n    getEnforceCommentsHistory,reportGenerate\r\n} from '../../actions'\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport { getControlMap,showEsign, sortData, constructOptionList, getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport TestWiseMyJobsFilter from './TestWiseMyJobsFilter'\r\nimport { designProperties, transactionStatus, RegistrationType, RegistrationSubType } from '../../components/Enumeration';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport { onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport {  onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport CustomPopOver from '../../components/customPopover';\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport TestWiseMyJobsSampleInfoGrid from './TestWiseMyJobsSampleInfoGrid';\r\nimport TestWiseMyJobsSampleInfoView from './TestWiseMyJobsSampleInfoView';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass TestWiseMyJobs extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.searchTestRef = React.createRef();\r\n        this.formRef = React.createRef();\r\n        this.state = {\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            testAttachmentDataState: { },\r\n            testCommentDataState: { },\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            oldComboData: {},\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            screenName: undefined,\r\n            showSample: false,\r\n            showTest: true,\r\n            sampleListColumns: [],\r\n            subSampleListColumns: [],\r\n            testListColumns: [],\r\n            TableExpandableItem: [],\r\n            SingleItem: [],\r\n            SampleGridItem: [],\r\n            SampleGridExpandableItem: [],\r\n            sampleListMainField: [],\r\n            subSampleListMainField: [],\r\n            testListMainField: [],\r\n            testMoreField: [],\r\n            firstPane: 0,\r\n            paneHeight: 0,\r\n            secondPaneHeight: 0,\r\n            tabPane: 0,\r\n            SampletypeList: [],\r\n            RegistrationTypeList: [],\r\n            RegistrationSubTypeList: [],\r\n            FilterStatusList: [],\r\n            ConfigVersionList: [],\r\n            UserSectionList: [],\r\n            TestList: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            testskip: 0,\r\n            testtake: this.props.Login.settings && this.props.Login.settings[12],\r\n            splitChangeWidthPercentage: 22,\r\n            subSampleSkip: 0,\r\n            subSampleTake :5,\r\n        }\r\n    }\r\n\r\n \r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\") {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.multilingualMsg !== undefined && props.Login.multilingualMsg !== \"\") {\r\n            toast.warn(props.intl.formatMessage({ id: props.Login.multilingualMsg }));\r\n            props.Login.multilingualMsg = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n    \r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo)\r\n      \r\n\r\n        const filterTestParam = {\r\n            inputListName: \"MJ_TEST\",\r\n            selectedObject: \"MJSelectedTest\",\r\n            primaryKeyField: \"ntransactiontestcode\",\r\n            fetchUrl: this.getActiveTestURL(),\r\n            fecthInputObject: {\r\n                ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                checkBoxOperation:3,\r\n                ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\r\n            },\r\n            isSingleSelect: false,\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sarno\", \"ssamplearno\", \"stestsynonym\", \"dtransactiondate\", \"smethodname\", \"ssectionname\", \"ssourcename\", \"stransdisplaystatus\", \"sinstrumentcatname\", \"stestname\"],\r\n            changeList: [\"RegistrationTestAttachment\", \"RegistrationTestComment\",\"MJSelectedTest\"]\r\n        };\r\n        let AP_TestList = this.props.Login.masterData.MJ_TEST ? sortData(this.props.Login.masterData.MJ_TEST, 'descending', 'ntransactiontestcode') : [];\r\n        let actionStatus = this.props.Login.masterData.actionStatus ? sortData(this.props.Login.masterData.actionStatus, 'ascending', 'ncontrolcode') : [];\r\n     \r\n        let testGetParam = {\r\n            masterData: this.props.Login.masterData,\r\n            ntransactionstatus: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.ntransactionstatus : -1),\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            npreregno: this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            napprovalversioncode : this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode : -1,\r\n            nsectioncode: this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.realUserSectionValue.nsectioncode) : null,\r\n            ntestcode: this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode : -1,\r\n            dfrom: obj.fromDate,\r\n            dto: obj.toDate,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\",\r\n           // activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEINFO\",\r\n            screenName: this.props.Login.screenName,\r\n            searchTestRef: this.searchTestRef,\r\n            postParamList: this.postParamList,\r\n            ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\r\n        };\r\n        let testChildGetParam = {\r\n            masterData: this.props.Login.masterData,\r\n            ntransactionstatus: String(this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus),\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            npreregno: this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            ntransactionsamplecode: this.props.Login.masterData.MJSelectedSubSample && this.props.Login.masterData.MJSelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\",\r\n            screenName: this.props.Login.screenName,\r\n            postParamList: this.postParamList,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            testAttachmentDataState: this.state.testAttachmentDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\r\n\r\n        };\r\n        let breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto\r\n            },\r\n            {\r\n                \"label\": \"IDS_SAMPLETYPE\",\r\n                \"value\": this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.ssampletypename || \"NA\" :\r\n                    this.props.Login.masterData.SampleTypeValue ? this.props.Login.masterData.SampleTypeValue.ssampletypename || \"NA\" : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_REGTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\r\n                    this.props.Login.masterData.RegTypeValue ? this.props.Login.masterData.RegTypeValue.sregtypename || \"NA\" : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_REGSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename || \"NA\" :\r\n                    this.props.Login.masterData.RegSubTypeValue ?\r\n                        this.props.Login.masterData.RegSubTypeValue.sregsubtypename : \"NA\"\r\n            },\r\n            //  {\r\n            //     \"label\": \"IDS_DESIGNTEMPLATE\",\r\n            //     \"value\": this.props.Login.masterData.realDesignTemplateMappingValue ? this.props.Login.masterData.realDesignTemplateMappingValue.sregtemplatename || \"NA\" :\r\n            //              this.props.Login.masterData.realDesignTemplateMappingValue ?\r\n            //              this.props.Login.masterData.DesignTemplateMappingValue.sregtemplatename : \"NA\"\r\n\r\n            // },\r\n             {\r\n                \"label\": \"IDS_CONFIGVERSION\",\r\n                \"value\": this.props.Login.masterData.realApprovalVersionValue ?\r\n                    this.props.Login.masterData.realApprovalVersionValue.sversionname || \"NA\" :\r\n                    this.props.Login.masterData.ApprovalVersionValue ? this.props.Login.masterData.ApprovalVersionValue.sversionname || \"NA\" : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_SECTION\",\r\n                \"value\": this.props.Login.masterData.realUserSectionValue ?\r\n                    this.props.Login.masterData.realUserSectionValue.ssectionname || \"NA\" :\r\n                    this.props.Login.masterData.UserSectionValue ?\r\n                        this.props.Login.masterData.UserSectionValue.ssectionname || \"NA\" : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_Test\",\r\n                \"value\": this.props.Login.masterData.realTestValue ?\r\n                    this.props.Login.masterData.realTestValue.stestsynonym || \"NA\" :\r\n                    this.props.Login.masterData.TestValue ?\r\n                        this.props.Login.masterData.TestValue.stestsynonym || \"NA\" : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_FILTERSTATUS\",\r\n                \"value\": this.props.Login.masterData.realFilterStatusValue ?\r\n                    this.props.Login.masterData.realFilterStatusValue.sfilterstatus || \"NA\" :\r\n                    this.props.Login.masterData.FilterStatusValue ?\r\n                    this.props.Login.masterData.FilterStatusValue.sfilterstatus || \"NA\" : \"NA\"\r\n            }\r\n        ];\r\n        \r\n        const TestAcceptActionId = this.state.controlMap.has(\"Accept\") && this.state.controlMap.get(\"Accept\").ncontrolcode;\r\n        const TestMyJobActionId = this.state.controlMap.has(\"TestMyJobAction\") && this.state.controlMap.get(\"TestMyJobAction\").ncontrolcode;\r\n\r\n\r\n\r\n         this.postParamList = [\r\n             {\r\n       \r\n                filteredListName: \"searchedTest\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: this.getActiveTestURL(),\r\n                fecthInputObject: testChildGetParam,\r\n                selectedObject: \"MJSelectedTest\",\r\n                inputListName: \"MJ_TEST\",\r\n                updatedListname: \"MJSelectedTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\",\r\n                    \"SampletypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"FilterStatusList\", \"UserSectionList\", \"TestList\"]\r\n             }]\r\n\r\n\r\n        return (\r\n            <>\r\n              <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                 <Row noGutters={\"true\"}>\r\n                   <Col md={12} className='parent-port-height sticky_head_parent' ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                     <ListWrapper>\r\n                        <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} secondaryInitialSize={this.state.splitChangeWidthPercentage} onSecondaryPaneSizeChange={this.paneSizeChange} primaryMinSize={40} secondaryMinSize={20}>\r\n                          <TransactionListMasterJson\r\n                                        splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                        needMultiSelect={true}\r\n                                        masterList={this.props.Login.masterData.searchedTest || AP_TestList}\r\n                                        selectedMaster={this.props.Login.masterData.MJSelectedTest}\r\n                                        primaryKeyField=\"ntransactiontestcode\"\r\n                                        getMasterDetail={this.props.getMJTestChildTabDetailTestWise}\r\n                                        inputParam={testChildGetParam}\r\n                                        subFieldsLabel ={true}\r\n                                        additionalParam={['']}\r\n                                        mainField={'stestsynonym'}\r\n                                        selectionList={this.props.Login.masterData.FilterStatus}\r\n                                        selectionField=\"ntransactionstatus\"\r\n                                        selectionFieldName=\"sfilterstatus\"\r\n                                        selectionColorField=\"scolorhexcode\"\r\n                                        selectedListName=\"MJSelectedTest\"\r\n                                        objectName=\"test\"\r\n                                        listName=\"IDS_TEST\"\r\n                                        filterColumnData={this.props.filterTransactionList}\r\n                                        searchListName=\"searchedTest\"\r\n                                        needValidation={true}\r\n                                        validationKey=\"napprovalversioncode\"\r\n                                        validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                        showFilter={this.props.Login.showFilter}\r\n                                        openFilter={this.openFilter}\r\n                                        closeFilter={this.closeFilter}\r\n                                        onFilterSubmit={this.onFilterSubmit}\r\n                                        subFields={this.state.DynamicTestColumns}\r\n                                        //  moreField={this.state.testMoreField}\r\n                                        jsonDesignFields={true}\r\n                                        jsonField={'jsondata'}\r\n                                        showStatusLink={true}\r\n                                        statusFieldName=\"stransdisplaystatus\"\r\n                                        statusField=\"ntransactionstatus\"\r\n                                       // statusColor=\"stranscolor\"\r\n                                        showStatusIcon={false}\r\n                                        showStatusName={true}\r\n                                        needFilter={true}\r\n                                        searchRef={this.searchTestRef}\r\n                                        filterParam={filterTestParam}\r\n                                        skip={this.state.testskip}\r\n                                        take={this.state.testtake}\r\n                                        handlePageChange={this.handleTestPageChange}\r\n                                        showStatusBlink={true}\r\n                                        splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                        childTabsKey={[\"RegistrationTestAttachment\", \"RegistrationTestComment\"]}\r\n                                        commonActions={\r\n                                            <>\r\n                                                <ProductList className=\"d-flex product-category float-right\">\r\n                                                    {/* <Nav.Link \r\n                                                        data-for=\"tooltip-common-wrap\" \r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ACCEPT\" })} \r\n                                                        hidden={this.state.userRoleControlRights.indexOf(TestAcceptActionId) === -1} \r\n                                                        className=\"btn btn-icon-rounded btn-circle solid-blue ml-2\" role=\"button\"\r\n                                                        onClick={() => this.props.getAcceptTestTestWise({testGetParam, MJSelectedTest: this.props.Login.masterData.MJSelectedTest,userInfo: this.props.Login.userInfo, ncontrolcode:TestAcceptActionId})}>\r\n                                                        <FontAwesomeIcon icon={faCheck} />\r\n                                                    </Nav.Link> */}\r\n\r\n\r\n                                                    {this.props.Login.masterData.actionStatus &&\r\n                                                        this.state.userRoleControlRights.indexOf(TestMyJobActionId) !== -1 &&\r\n                                                        actionStatus.length > 0 ?\r\n                                                        <CustomPopOver\r\n                                                            icon={faBolt}\r\n                                                            nav={true}\r\n                                                            data={actionStatus}\r\n                                                            btnClasses=\"btn-circle btn_grey ml-2 spacesremovefromaction\"\r\n                                                            //dynamicButton={(value) => this.props.getAcceptTestTestWise(value,testGetParam,this.props.Login.masterData.MJSelectedTest,this.props.Login.userInfo)}\r\n                                                            dynamicButton={(value) => this.onAcceptTestWise(value,testGetParam,this.props.Login.masterData.MJSelectedTest,this.props.Login.userInfo)}\r\n                                                            textKey=\"scontrolname\"\r\n                                                            iconKey=\"ncontrolcode\"\r\n                                                        >\r\n                                                        </CustomPopOver>\r\n                                                    : \"\"}\r\n\r\n                                                    <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                        onClick={() => this.onReload()}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                        <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                    </Button>                   \r\n                                                </ProductList>\r\n                                            </>\r\n                                        }\r\n                                        filterComponent={[\r\n                                            {\r\n                                                \"Sample Filter\": <TestWiseMyJobsFilter\r\n                                                    SampleType={this.state.SampletypeList || []}\r\n                                                    SampleTypeValue={this.props.Login.masterData.realSampleTypeValue || []}\r\n                                                    RegType={this.state.RegistrationTypeList || []}\r\n                                                    RegTypeValue={this.props.Login.masterData.realRegTypeValue || []}\r\n                                                    RegSubType={this.state.RegistrationSubTypeList || []}\r\n                                                    RegSubTypeValue={this.props.Login.masterData.realRegSubTypeValue || []}\r\n                                                    ApprovalVersion={this.state.ConfigVersionList || []}\r\n                                                    ApprovalVersionValue={this.props.Login.masterData.realApprovalVersionValue || []}\r\n                                                    UserSection={this.state.UserSectionList || []}\r\n                                                    UserSectionValue={this.props.Login.masterData.realUserSectionValue || []}\r\n                                                    JobStatus={this.props.Login.masterData.JobStatus || []}\r\n                                                    Test={this.state.TestList || []}\r\n                                                    TestValue={this.props.Login.masterData.realTestValue || []}\r\n                                                    FilterStatus={this.state.FilterStatusList || []}\r\n                                                    FilterStatusValue={this.props.Login.masterData.realFilterStatusValue || []}\r\n                                                    fromDate={this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date()}\r\n                                                    toDate={this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date()}\r\n                                                    onFilterComboChange={this.onFilterComboChange}\r\n                                                    handleDateChange={this.handleDateChange}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    \r\n                                                />\r\n                                            }\r\n                                        ]}\r\n\r\n                          />\r\n                            <ScrollBar>\r\n                                <SplitterLayout\r\n                                    customClassName=\"detailed-inner no-height\"\r\n                                    vertical\r\n                                    borderColor=\"#999\"\r\n                                    primaryIndex={1}\r\n                                   // onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n                                    secondaryInitialSize={window.outerHeight - 260}\r\n\r\n                                    // secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                    // onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                    // primaryMinSize={40}\r\n                                    // secondaryMinSize={30}\r\n                                >\r\n                                 <div>\r\n                                  <ContentPanel style={this.state.showTest === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Body className='p-0'>\r\n                                            <Row>\r\n                                                <Col md={12}>\r\n                                                    <Card className='p-0'>\r\n                                                        <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLEINFO\" })}</h4>\r\n                                                            </span>\r\n                                                        </Card.Header>\r\n                                                        <Card.Body>\r\n                                                            <ScrollBar>\r\n                                                                <div style={{ height: this.state.initialVerticalWidth }}>\r\n                                                                    {this.props.Login.masterData.MJSelectedTest && this.props.Login.masterData.MJSelectedTest.length === 1 ?\r\n                                                                    \r\n\r\n                                                                    <TestWiseMyJobsSampleInfoView\r\n                                                                        data={(this.props.Login.masterData.MJSelectedTest && this.props.Login.masterData.MJSelectedTest.length > 0) ?\r\n                                                                               this.props.Login.masterData.MJSelectedTest[this.props.Login.masterData.MJSelectedTest.length - 1] : {}}\r\n                                                                        SingleItem={this.props.Login.masterData.MJSelectedTest && this.props.Login.masterData.MJSelectedTest ?\r\n                                                                                    this.state.SingleItem : []}\r\n                                                                        screenName=\"IDS_SAMPLEINFO\"\r\n                                                                        userInfo = {this.props.Login.userInfo}\r\n                                                                    />\r\n                                                                    :\r\n                                                                    <TestWiseMyJobsSampleInfoGrid\r\n                                                                        selectedSample={this.props.Login.masterData.MJSelectedTest}\r\n                                                                        userInfo={this.props.Login.userInfo || {}}\r\n                                                                        masterData={this.props.Login.masterData}\r\n                                                                        inputParam={this.props.Login.inputParam}\r\n                                                                        dataState={this.state.sampleGridDataState}\r\n                                                                        dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                        extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem)||[]}\r\n                                                                        detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField)||[]}\r\n                                                                        primaryKeyField={\"npreregno\"}\r\n                                                                        expandField=\"expanded\"\r\n                                                                        screenName=\"IDS_SAMPLEINFO\"\r\n                                                                       // jsonField={\"jsondata\"}\r\n                                                                    />\r\n\r\n\r\n                                                                    }\r\n                                                                </div>\r\n                                                            </ScrollBar>\r\n                                                        </Card.Body>\r\n                                                    </Card>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                  </ContentPanel>\r\n                                </div>\r\n                                <div>\r\n                                    <ScrollBar>\r\n                                    <div style={{ height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\" }}>\r\n                                        {this.state.showTest ?\r\n                                            <Card>\r\n                                                {/* <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                            <h4 className=\"card-title\">Parameter Results</h4>\r\n                                                        </span>\r\n                                                </Card.Header> */}\r\n                                                <CustomTabs paneHeight={this.state.tabPane} activeKey={this.props.Login.activeTestTab || \"IDS_RESULTS\"}\r\n                                                            tabDetail={this.testTabDetail()} onTabChange={this.onTestTabChange} />\r\n                                            </Card>\r\n                                        : \"\"}\r\n                                        </div>\r\n                                    </ScrollBar>\r\n                                    </div>\r\n                                </SplitterLayout>\r\n                             </ScrollBar> \r\n                       </SplitterLayout>\r\n                     </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n            </ListWrapper>\r\n           \r\n            {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        esign={this.props.Login.loadEsign}\r\n                        onSaveClick={this.onSaveClick}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        showSaveContinue={this.state.showSaveContinue}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : \"\"}\r\n                    /> : \"\"}\r\n         </>\r\n        )\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let { userRoleControlRights, controlMap,\r\n            testListColumns, SingleItem,\r\n            testListMainField,\r\n            SampleGridItem, SampleGridExpandableItem, testMoreField,\r\n            testAttachmentDataState,testCommentDataState,           \r\n            selectedRecord, SampletypeList, RegistrationTypeList,\r\n            RegistrationSubTypeList, FilterStatusList,\r\n            ConfigVersionList, UserSectionList, TestList,  testskip, testtake, selectedFilter,\r\n            DynamicTestColumns, DynamicGridItem,\r\n            DynamicGridMoreField } = this.state;\r\n        let bool = false;\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            bool = true;\r\n        }\r\n        if (this.props.Login.masterData.RegSubTypeValue !== previousProps.Login.masterData.RegSubTypeValue) {\r\n            if (this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nsubsampleneed === transactionStatus.NO) {\r\n                let dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] }\r\n               \r\n                testAttachmentDataState = dataState\r\n                testCommentDataState = dataState\r\n               \r\n                bool = true;\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n\r\n            selectedRecord = this.props.Login.selectedRecord\r\n            bool = true;\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const SampletypeListMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'ascending', 'nsampletypecode', false);\r\n            const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n            const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n            const FilterStatusListMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", undefined, undefined, true);\r\n            const ConfigVersionListMap = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], \"napprovalconfigversioncode\", \"sversionname\", 'descending', 'ntransactionstatus', false);\r\n            const UserSectionListMap = constructOptionList(this.props.Login.masterData.UserSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\r\n            const TestListMap = constructOptionList(this.props.Login.masterData.Test || [], \"ntestcode\", \"stestsynonym\", undefined, undefined, true);\r\n            SampletypeList = SampletypeListMap.get(\"OptionList\");\r\n            RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\r\n            RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\r\n            FilterStatusList = FilterStatusListMap.get(\"OptionList\");\r\n            ConfigVersionList = ConfigVersionListMap.get(\"OptionList\");\r\n            UserSectionList = UserSectionListMap.get(\"OptionList\");\r\n            TestList = TestListMap.get(\"OptionList\");\r\n            bool = true;\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            let selectFilterStatus = { ntransactionstatus: transactionStatus.PARTIAL, sfilterstatus: this.props.intl.formatMessage({ id: \"IDS_PARTIAL\" }), scolorhexcode: \"#800000\" }\r\n\r\n            const selectedFilters = this.props.Login.masterData.FilterStatus || [];\r\n\r\n            const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\r\n\r\n            const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL)\r\n            if (selectedFiltersNew.length > 0 && index === -1) {\r\n                selectedFiltersNew.push(selectFilterStatus)\r\n            }\r\n            selectedFilter = selectedFiltersNew;\r\n            \r\n            if (this.props.Login.testAttachmentDataState && this.props.Login.testAttachmentDataState !== previousProps.Login.testAttachmentDataState) {\r\n                testAttachmentDataState = this.props.Login.testAttachmentDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n           \r\n        }\r\n\r\n        if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n            const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n            \r\n            DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\r\n\r\n            DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n            DynamicGridMoreField = dynamicColumn.samplegridmoreitems ? dynamicColumn.samplegridmoreitems : [];\r\n\r\n            SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\r\n            testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\r\n            testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\r\n            bool = true;\r\n            \r\n            let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n            selectedRecord['fromDate'] = obj.fromDate;\r\n            selectedRecord['toDate'] = obj.toDate;\r\n            \r\n            bool = true;\r\n        }\r\n        if (bool) {\r\n            bool = false;\r\n            this.setState({\r\n                userRoleControlRights, controlMap,\r\n                 testListColumns, SingleItem,\r\n                 testListMainField,\r\n                 SampleGridItem, SampleGridExpandableItem, testMoreField,\r\n                 testAttachmentDataState, testCommentDataState,\r\n                 selectedRecord, SampletypeList, RegistrationTypeList,\r\n                 RegistrationSubTypeList, FilterStatusList,\r\n                 ConfigVersionList, UserSectionList, TestList,\r\n                 testskip, testtake, selectedFilter,\r\n                 DynamicTestColumns, DynamicGridItem,\r\n                 DynamicGridMoreField\r\n            });\r\n        }\r\n    }\r\n\r\n    \r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take\r\n        });\r\n    };\r\n  \r\n    gridfillingColumn(data) {\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n        });\r\n\r\n        return temparray;\r\n    }\r\n\r\n    testTabDetail = () => {\r\n        const testTabMap = new Map();\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.MJ_TEST || [];\r\n        const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\r\n        let ntransactiontestcode = this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        if (this.state.showTest) {\r\n          \r\n           \r\n            \r\n            testTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n                screenName=\"IDS_TESTATTACHMENTS\"\r\n                selectedMaster={selectedTestList}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                masterList={selectedTestList}\r\n                masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n                addName={\"AddTestAttachment\"}\r\n                editName={\"EditTestAttachment\"}\r\n                deleteName={\"DeleteTestAttachment\"}\r\n                viewName={\"ViewTestAttachment\"}\r\n                methodUrl={\"TestAttachment\"}\r\n                nsubsampleneed={this.props.Login.masterData[\"RegSubTypeValue\"]}\r\n                subFields={[{ [designProperties.VALUE]: \"stestsynonym\" }, { [designProperties.VALUE]: \"dcreateddate\" }]}\r\n                masterData={this.props.Login.masterData}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"TestAttachment\",\r\n                        ntransactiontestcode,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\",\r\n                    masterList: selectedTestList\r\n\r\n                }}\r\n                selectedListName=\"IDS_TESTS\"\r\n                displayName=\"stestsynonym\"\r\n            />)\r\n            testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n                screenName=\"IDS_TESTCOMMENTS\"\r\n                selectedMaster={selectedTestList}\r\n                onSaveClick={this.onCommentsSaveClick}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n                fetchRecord={this.props.getCommentsCombo}\r\n                masterList={selectedTestList}\r\n                masterAlertStatus={\"IDS_SELECTTESTTOADDCOMMENTS\"}\r\n                addName={\"AddTestComment\"}\r\n                editName={\"EditTestComment\"}\r\n                deleteName={\"DeleteTestComment\"}\r\n                methodUrl={\"TestComment\"}\r\n                isTestComment={false}\r\n                primaryKeyField={\"ntestcommentcode\"}\r\n                dataState={this.state.testCommentDataState}\r\n                dataStateChange={this.testDataStateChange}\r\n                masterData={this.props.Login.masterData}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"TestComment\",\r\n                        ntransactiontestcode,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\",\r\n                    operation: \"update\",\r\n                    masterList: selectedTestList,\r\n                    ncontrolCode: editTestCommentsId\r\n\r\n                }}\r\n                selectedListName=\"IDS_TESTS\"\r\n                displayName=\"stestsynonym\"\r\n            />)\r\n\r\n           \r\n\r\n\r\n\r\n\r\n            \r\n        }\r\n\r\n        return testTabMap;\r\n    }\r\n    \r\n    onTestTabChange = (tabProps) => {\r\n\r\n        const activeTestTab = tabProps.screenName;\r\n        if (activeTestTab !== this.props.Login.activeTestTab) {\r\n            if (this.props.Login.masterData.MJSelectedTest && this.props.Login.masterData.MJSelectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    MJSelectedTest: this.props.Login.masterData.MJSelectedTest,\r\n                    ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ?\r\n                        String(this.props.Login.masterData.MJSelectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    npreregno: this.props.Login.masterData.selectedSample ?\r\n                        this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                }\r\n                this.props.getMJTestChildTabDetailTestWise(inputData, true)\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    onFilterComboChange = (comboData, fieldName) => {\r\n\r\n        if (comboData) {\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n            let inputParamData = {};\r\n            if (fieldName === 'nsampletypecode') {\r\n                if (comboData.value !== this.props.Login.masterData.realSampleTypeValue.nsampletypecode) {\r\n                    inputParamData = {\r\n                        nflag: 2,\r\n                        fromdate: obj.fromDate,\r\n                        todate: obj.toDate,\r\n                        nsampletypecode: comboData.value,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        realSampleTypeValue: comboData.item\r\n                    };\r\n                    this.props.getRegTypeTestWise(inputParamData)\r\n                }\r\n            } else if (fieldName === 'nregtypecode') {\r\n                if (comboData.value !== this.props.Login.masterData.realRegTypeValue.nregtypecode) {\r\n                    inputParamData = {\r\n                        nflag: 3,\r\n                        fromdate: obj.fromDate,\r\n                        todate: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                        nregtypecode: comboData.value,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        realRegTypeValue: comboData.item\r\n                    }\r\n                    this.props.getRegSubTypeTestWise(inputParamData)\r\n                }\r\n            } else if (fieldName === 'nregsubtypecode') {\r\n\r\n                if (comboData.value !== this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode) {\r\n                    let inputData = {\r\n                        nflag: 4,\r\n                        fromdate: obj.fromDate,\r\n                        todate: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                        nregsubtypecode: comboData.value,\r\n                        userinfo: this.props.Login.userInfo\r\n                    }\r\n                    inputParamData = {\r\n                        inputData,\r\n                        masterData: {\r\n                            ...this.props.Login.masterData,\r\n                            realRegSubTypeValue: comboData.item\r\n                        }\r\n                    }\r\n                    this.props.getAppConfigVersionTestWise(inputParamData)\r\n                }\r\n            }\r\n\r\n            else if (fieldName === 'napproveconfversioncode') {\r\n                if (comboData.value !== this.props.Login.masterData.realApprovalVersionValue.napproveconfversioncode) {\r\n                   \r\n                    inputParamData = {\r\n                        nflag: 5,\r\n                        dfrom: obj.fromDate,\r\n                        dto: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                        napprovalversioncode: comboData.value,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: { ...this.props.Login.masterData, realApprovalVersionValue: comboData.item },\r\n                        RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                        nsectioncode: this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.realUserSectionValue.nsectioncode,\r\n                    }\r\n                    this.props.getFilterStatus(inputParamData)\r\n                }\r\n            }\r\n            else if (fieldName === 'nsectioncode') {\r\n                if (comboData.value !== this.props.Login.masterData.realUserSectionValue.nsectioncode) {\r\n                    inputParamData = {\r\n                        nflag: 6,\r\n                        fromdate: obj.fromDate,\r\n                        todate: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                        napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode,\r\n                        nsectioncode: comboData.value === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : comboData.value,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: { ...this.props.Login.masterData, realUserSectionValue: comboData.item },\r\n                        RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                        ntransactionstatus: JSON.stringify(this.props.Login.masterData.realFilterStatusValue.ntransactionstatus),\r\n                        stransactionstatus: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n                    }\r\n\r\n                    this.props.getSectionTestWise(inputParamData);\r\n                }\r\n            } else if (fieldName === 'ntransactionstatus') {\r\n                if (comboData.value !== this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) {\r\n\r\n                    inputParamData = {\r\n                        nflag: 7,\r\n                        fromdate: obj.fromDate,\r\n                        todate: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                        napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode,\r\n                        //nsectioncode:this.props.Login.masterData.realUserSectionValue.nsectioncode,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: { ...this.props.Login.masterData, realFilterStatusValue: comboData.item },\r\n                        RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                        ntransactionstatus:comboData.value === -1 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : comboData.value\r\n\r\n                    }\r\n\r\n                    this.props.getFilterStatusTestWise(inputParamData);\r\n                }\r\n            }\r\n            else if (fieldName === 'ntestcode') {\r\n                if (comboData.value !== this.props.Login.masterData.realTestValue.ntestcode) {\r\n                    let masterData = { ...this.props.Login.masterData, realTestValue: comboData.item }\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { masterData }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n            else {\r\n                if (comboData.value !== this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) {\r\n                    inputParamData = {\r\n                        dfrom: obj.fromDate,\r\n                        dto: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                        napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: { ...this.props.Login.masterData, FilterStatusValue: comboData.item },\r\n                        RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                        ntransactionstatus: comboData.value,\r\n                        stransactionstatus: comboData.value === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : comboData.value,\r\n                        nsectioncode: this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.realUserSectionValue.nsectioncode,\r\n                    }\r\n\r\n                    this.props.getTestStatusTestWise(inputParamData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n \r\n    \r\n    handleDateChange = (dateName, dateValue) => {\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        let fromdate = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date()\r\n        let todate = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date()\r\n        let obj = {}\r\n        if (dateName === 'fromDate') {\r\n            obj = convertDateValuetoString(dateValue, todate, this.props.Login.userInfo)\r\n            fromdate = obj.fromDate\r\n            todate = obj.toDate\r\n        } else {\r\n            obj = convertDateValuetoString(fromdate, dateValue, this.props.Login.userInfo)\r\n            fromdate = obj.fromDate\r\n            todate = obj.toDate\r\n\r\n        }\r\n        let inputParam = {\r\n            inputData: {\r\n                nflag: 2,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                fromdate: String(fromdate),\r\n                todate: String(todate),\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            masterData: this.props.Login.masterData\r\n\r\n        }\r\n        this.props.getAppConfigVersionTestWise(inputParam)\r\n    }\r\n   \r\n    onReload = () => {\r\n        let { realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue,\r\n            realFilterStatusValue, realApprovalVersionValue, realUserSectionValue, realTestValue } = this.props.Login.masterData\r\n        let masterData = { ...this.props.Login.masterData, realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApprovalVersionValue, realUserSectionValue, realTestValue }\r\n        let inputData = {\r\n            nneedsubsample: (realRegSubTypeValue && realRegSubTypeValue.nneedsubsample) || false,\r\n            nsampletypecode: (realSampleTypeValue && realSampleTypeValue.nsampletypecode) || -1,\r\n            nregtypecode: (realRegTypeValue && realRegTypeValue.nregtypecode) || -1,\r\n            nregsubtypecode: (realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode) || -1,\r\n            ntransactionstatus:String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\r\n           // ntransactionstatus: ((realFilterStatusValue && realFilterStatusValue.ntransactionstatus !== undefined) || realFilterStatusValue.ntransactionstatus !== '0') ? String(realFilterStatusValue.ntransactionstatus) : -1,\r\n            napprovalconfigcode: (realApprovalVersionValue && realApprovalVersionValue.napprovalconfigcode) || -1 ,\r\n            napprovalversioncode:String(realApprovalVersionValue ? realApprovalVersionValue.napprovalconfigversioncode :1),\r\n           // napprovalversioncode: realApprovalVersionValue && realApprovalVersionValue.napprovalconfigversioncode ? String(realApprovalVersionValue.napprovalconfigversioncode) : -1,\r\n            nsectioncode: realUserSectionValue ? realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(realUserSectionValue.nsectioncode) : null,\r\n            ntestcode: realTestValue && realTestValue.ntestcode ? realTestValue.ntestcode : -1,\r\n            userinfo: this.props.Login.userInfo,\r\n            showTest: true,\r\n            activeTestTab: this.props.Login.activeTestTab || \"\",\r\n            checkBoxOperation:3,\r\n            ntype:2,\r\n            ndesigntemplatemappingcode:(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode)||-1\r\n        }\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1\r\n            && inputData.ntransactionstatus !== -1 && inputData.napprovalconfigcode !== -1 && inputData.napprovalversioncode !== -1\r\n            && realUserSectionValue.nsectioncode !== null && realTestValue.ntestcode!==-1) {\r\n\r\n            let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo)\r\n            inputData['fromdate'] = obj.fromDate;\r\n            inputData['todate'] = obj.toDate;\r\n            let inputParam = {\r\n                masterData,\r\n                inputData,\r\n                searchTestRef: this.searchTestRef,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n                testAttachmentDataState: this.state.testAttachmentDataState,\r\n                testCommentDataState: this.state.testCommentDataState,\r\n               \r\n            }\r\n            this.props.getMyJobsSampleTestWise(inputParam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }))\r\n        }\r\n    }\r\n    onFilterSubmit = () => {\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n     \r\n        let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n        let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n    \r\n        let realSampleTypeValue = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue\r\n        let realRegTypeValue = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue\r\n        let realRegSubTypeValue = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue\r\n        let realFilterStatusValue = this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue\r\n        let realApprovalVersionValue = this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue\r\n        let realUserSectionValue = this.props.Login.masterData.realUserSectionValue && this.props.Login.masterData.realUserSectionValue\r\n        let realTestValue = this.props.Login.masterData.realTestValue && this.props.Login.masterData.realTestValue\r\n        let masterData = { ...this.props.Login.masterData, realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApprovalVersionValue, realUserSectionValue, realTestValue }\r\n        let inputData = {\r\n            npreregno: \"0\",\r\n            nsampletypecode: (this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode) || -1,\r\n            nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode) || -1,\r\n            nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode) || -1,\r\n            ntransactionstatus: ((this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus !== undefined) || this.props.Login.masterData.realFilterStatusValue.ntransactionstatus !== '0') ? String(this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) : \"-1\",\r\n            napprovalconfigcode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigcode || -1 : null,\r\n            napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode ? String(this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode) : null,\r\n            nsectioncode: this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.realUserSectionValue.nsectioncode) : null,\r\n            ntestcode: this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode : -1,\r\n            nneedsubsample: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) || -1,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestTab: this.props.Login.activeTestTab,\r\n            checkBoxOperation: 3,\r\n            ntype:2,\r\n            ndesigntemplatemappingcode:(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode)||-1\r\n        }\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1\r\n            && inputData.ntransactionstatus !== \"-1\" && inputData.napprovalconfigcode !== -1 && inputData.napprovalversioncode !== \"-1\"\r\n            && realFilterStatusValue.sfilterstatus !== null && inputData.nsectioncode !==\"undefined\" && inputData.ntestcode !== undefined) {\r\n\r\n            inputData['fromdate'] = obj.fromDate;\r\n            inputData['todate'] = obj.toDate;\r\n            let inputParam = {\r\n                masterData,\r\n                inputData,\r\n                searchTestRef: this.searchTestRef,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n                testAttachmentDataState: this.state.testAttachmentDataState,\r\n                testCommentDataState: this.state.testCommentDataState\r\n               \r\n            }\r\n            this.props.getMyJobsSampleTestWise(inputParam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }))\r\n        }\r\n\r\n    }\r\n\r\n    onAcceptTestWise = (action,inputParam,MJSelectedTest,userInfo) => {\r\n        let inputData={};\r\n        let Map = {\r\n            nflag:3,\r\n            ncheck:1,\r\n            nsampletypecode :inputParam.nsampletypecode,\r\n            nregtypecode :inputParam.nregtypecode,\r\n            nregsubtypecode : inputParam.nregsubtypecode,\r\n            ntransactionstatus :inputParam.ntransactionstatus,\r\n            napprovalversioncode :inputParam.napprovalversioncode,\r\n            nsectioncode :inputParam.nsectioncode,\r\n            ntestcode :inputParam.ntestcode,\r\n            fromdate: inputParam.dfrom,\r\n            todate: inputParam.dto,\r\n            npreregno :MJSelectedTest ? MJSelectedTest.map(sample => sample.npreregno).join(\",\") : \"\",\r\n            ntransactionsamplecode : MJSelectedTest ? MJSelectedTest.map(subsample => subsample.ntransactionsamplecode).join(\",\") : \"\",\r\n            transactiontestcode: MJSelectedTest ? MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n            ntransactiontestcode: 0,\r\n            ncontrolcode : action.ncontrolcode,\r\n            nneedsubsample:inputParam.masterData.nneedsubsample,\r\n            ndesigntemplatemappingcode :inputParam.ndesigntemplatemappingcode,\r\n            checkBoxOperation:3,\r\n            scontrolname : action.scontrolname,\r\n            userinfo: userInfo,\r\n            masterData:inputParam.masterData\r\n        }\r\n        inputParam ={\r\n            inputData: Map,\r\n            masterData:inputParam.masterData,\r\n        } \r\n        if (inputParam.inputData.transactiontestcode && inputParam.inputData.transactiontestcode.length > 0) {\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, action.ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: {inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        parentPopUpSize: 'lg',\r\n                        screenName: this.props.Login.screenName,\r\n                        operation: 'accept'\r\n                    }                 \r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }else{\r\n                this.props.getAcceptTestTestWise(inputParam);\r\n            }    \r\n            \r\n        }else{\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n\r\n        }    \r\n\r\n\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n          \r\n            default:\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n    sampleGridDataStateChange = (event) => {\r\n        this.setState({\r\n            sampleGridDataState: event.dataState\r\n        });\r\n    }\r\n    sampleDataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_SAMPLEINFO\":\r\n                this.setState({\r\n                    sampleGridDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SAMPLEAPPROVALHISTORY\":\r\n                this.setState({\r\n                    sampleHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            case \"IDS_PRINTHISTORY\":\r\n                this.setState({\r\n                    samplePrintHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            case \"IDS_REPORTHISTORY\":\r\n                this.setState({\r\n                    reportHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sampleGridDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let showReport = this.props.Login.showReport;\r\n        if (this.props.Login.loadEsign) {\r\n            loadEsign = false;\r\n            selectedRecord.agree = false;\r\n            openModal = false;\r\n\r\n        } else {\r\n            selectedRecord = {};\r\n            showReport=false;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,showReport }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n   \r\n    handleClose = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openChildModal = this.props.Login.openChildModal\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let templateData = this.props.Login.templateData;\r\n        let operation = this.props.Login.operation;\r\n        let openTemplateModal = this.props.Login.openTemplateModal;\r\n        if (this.props.Login.loadEsign) {\r\n            if (operation === \"accept\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n                templateData = {};\r\n                operation = undefined;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openTemplateModal = false;\r\n            openModal = false;\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n            templateData = {}\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, openChildModal, loadEsign, selectedRecord, templateData, selectedParamId: null, operation, openTemplateModal }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData,\r\n            operation: this.props.Login.operation\r\n        }\r\n        if (this.props.Login.operation === 'accept') {\r\n            this.props.validateEsignforAccept(inputParam, \"openChildModal\");\r\n        } else {\r\n            this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n        }\r\n    }\r\n    \r\n    getActiveTestURL() {\r\n        let url = \"attachment/getTestAttachment\"\r\n        switch (this.props.Login.activeTestTab) {\r\n          \r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                break;\r\n            default:\r\n                url = \"comments/getTestComment\"\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n    \r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let { testskip, testtake } = this.state\r\n            let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.MJ_TEST];\r\n            testList = testList.slice(testskip, testskip + testtake);\r\n            let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, selectedTestList);\r\n        }\r\n\r\n       \r\n              if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData },\r\n                        operation: this.props.Login.operation,\r\n                        screenName: this.props.Login.screenName,\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n            }\r\n\r\n       }\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.MJ_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let ok = true;\r\n        if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            if (selectedTestList.length > 0) {\r\n                inputParam = onSaveTestAttachment(saveParam, selectedTestList);\r\n            }\r\n            else {\r\n                ok = false\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }))\r\n            }\r\n        }\r\n        if (ok) {\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData },\r\n                        operation: this.props.Login.operation,\r\n                        screenName: this.props.Login.screenName,\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    }\r\n\r\nexport default connect(mapStateToProps, {\r\n    getMyJobsubSampleDetailTestWise, getMyJobTestDetailTestWise, getMJTestChildTabDetailTestWise, performAction, updateStore, viewAttachment, checkListRecord,\r\n    updateDecision, getRegTypeTestWise, getRegSubTypeTestWise, getTestStatusTestWise,getSectionTestWise,getFilterStatusTestWise, getMyJobsSampleTestWise, getStatusCombo,\r\n    validateEsignCredential, crudMaster, validateEsignforAccept, getAppConfigVersionTestWise, getAcceptTestTestWise, filterTransactionList,\r\n    getMJSampleChildTabDetailTestWise, getAttachmentCombo, deleteAttachment, getCommentsCombo, previewSampleReport, \r\n    generateCOAReport, getEnforceCommentsHistory,reportGenerate\r\n})(injectIntl(TestWiseMyJobs))"]},"metadata":{},"sourceType":"module"}