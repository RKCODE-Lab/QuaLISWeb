{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\organisation\\\\organisationmapping\\\\Organisation.jsx\";\nimport React from 'react';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Affix } from 'rsuite';\nimport Tree from 'react-tree-graph';\nimport '../../../../node_modules/react-simple-tree-menu/dist/main.css';\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { Row, Col, Button, Card, Nav } from 'react-bootstrap';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport 'react-tree-graph/dist/style.css';\nimport { callService, crudMaster, updateStore, validateEsignCredential, organisationService, getSectionUserRole, getOrganisationComboService } from '../../../actions';\nimport AddChild from './AddChild';\nimport Esign from '../../../pages/audittrail/Esign';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\nimport { transactionStatus } from '../../../components/Enumeration';\nimport { showEsign, getControlMap, constructOptionList } from '../../../components/CommonScript';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport FormTreeMenu from '../../../components/form-tree-menu/form-tree-menu.component';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport './treegraph.css';\nimport { SearchAdd } from '../../../components/App.styles';\nimport { ReactComponent as Graph } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/image/organisational-graph.svg\"; // import ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Organisation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      // const viewParam = {\n      //     nsitecode: this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode,\n      //     userInfo: this.props.Login.userInfo, primaryKeyField: \"nusercode\",\n      //     masterData: this.props.Login.masterData\n      // };\n      this.setState({\n        dataState: event.dataState,\n        dataResult: process(this.state.data, event.dataState)\n      }); // const row = process(this.state.data, event.dataState);\n      // if (row.data.length > 0) {\n      //     this.props.getSectionUserRole({\n      //         ...viewParam,\n      //         primaryKeyValue: row.data[0][viewParam.primaryKeyField],\n      //         viewRow: row.data[0], data: this.state.data, dataResult: row, dataState: event.dataState\n      //     });\n      // }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.resetView = () => {\n      const inputParam = {\n        inputData: {\n          nsitecode: this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode,\n          userinfo: this.props.Login.userInfo,\n          graphview: true,\n          completetreepath: \"\",\n          primarykey: 0\n        },\n        masterData: this.props.Login.masterData,\n        selectedNode: \"Site\",\n        url: \"organisation/getSiteDepartment\"\n      };\n      this.props.organisationService(inputParam);\n    };\n\n    this.handleExpandChange = (row, dataState) => {\n      const viewParam = {\n        nsitecode: this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode,\n        userInfo: this.props.Login.userInfo,\n        primaryKeyField: \"nusercode\",\n        masterData: this.props.Login.masterData\n      };\n      this.props.getSectionUserRole({ ...viewParam,\n        dataState,\n        primaryKeyValue: row[\"dataItem\"][viewParam.primaryKeyField],\n        viewRow: row[\"dataItem\"]\n      });\n    };\n\n    this.confirmDelete = deleteParam => {\n      const deleteConfirmMsg = `IDS_CONFIRMDELETE${this.props.Login.organisation && this.props.Login.organisation.selectedNode && this.props.Login.organisation.selectedNode.toUpperCase()}`;\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: `${deleteConfirmMsg}`\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(deleteParam));\n    };\n\n    this.onTreeClick = event => {\n      if (event) {\n        if (event.item.selectedNode === \"Section\") {\n          let masterData = { ...this.props.Login.masterData\n          };\n          let inputData = {\n            userinfo: this.props.Login.userInfo,\n            selectedtreepath: event.key,\n            graphview: false,\n            [event.item.primaryKeyField]: event.item.selectedNodeDetail[event.item.primaryKeyField]\n          };\n          masterData[\"CompleteTreePath\"] = event.key;\n          this.props.organisationService({\n            inputData,\n            //url:event.getParam.url,\n            url: event.serviceUrl,\n            masterData,\n            organisation: { ...event.item\n            }\n          });\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              organisation: { ...event.item\n              },\n              data: undefined,\n              dataState: undefined,\n              masterData: { ...this.props.Login.masterData,\n                \"CompleteTreePath\": event.key,\n                SectionUsers: []\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.openModal = () => {\n      let inputParam = {}; //const primaryKey = this.props.Login.masterData.AddedChildPrimaryKey;\n      // console.log(\"master data in open modal:\", this.props.Login.masterData);\n\n      if (this.props.Login.masterData.SiteDepartment.length === 0) {\n        let completeTreePath = this.props.Login.masterData.CompleteTreePath;\n\n        if (completeTreePath === \"\") {\n          completeTreePath = this.props.Login.masterData.SelectedOrgSite.ssitename;\n        }\n\n        inputParam = {\n          operation: \"create\",\n          screenName: \"IDS_DEPARTMENT\",\n          selectedRecord: {\n            ssitename: this.props.Login.masterData.SelectedOrgSite.ssitename,\n            nsitecode: this.props.Login.masterData.SelectedOrgSite.nsitecode\n          },\n          url: \"organisation/getSiteDepartmentComboData\",\n          listName: \"siteDepartmentList\",\n          columnList: this.siteDepartmentColumnList,\n          inputData: {\n            nsitecode: this.props.Login.masterData.SelectedOrgSite.nsitecode,\n            userinfo: this.props.Login.userInfo,\n            completetreepath: completeTreePath\n          },\n          organisation: {\n            selectedNode: \"Site\"\n          }\n        };\n        this.props.getOrganisationComboService(inputParam);\n      } else {\n        if (this.props.Login.organisation && this.props.Login.organisation.selectedNode !== \"Section\") {\n          if (this.props.Login.organisation.selectedNode === \"Site\") inputParam = {\n            operation: \"create\",\n            screenName: \"IDS_DEPARTMENT\",\n            selectedRecord: {\n              ssitename: this.props.Login.masterData.SelectedOrgSite.ssitename,\n              //this.props.Login.organisation.selectedNodeName, \n              nsitecode: this.props.Login.masterData.SelectedOrgSite.nsitecode //this.props.Login.organisation.primaryKeyValue\n\n            },\n            url: \"organisation/getSiteDepartmentComboData\",\n            listName: \"siteDepartmentList\",\n            columnList: this.siteDepartmentColumnList,\n            inputData: {\n              nsitecode: this.props.Login.masterData.SelectedOrgSite.nsitecode,\n              //this.props.Login.organisation.primaryKeyValue, \n              userinfo: this.props.Login.userInfo,\n              completetreepath: this.props.Login.masterData.CompleteTreePath\n            }\n          };else if (this.props.Login.organisation.selectedNode === \"Department\") inputParam = {\n            operation: \"create\",\n            screenName: \"IDS_LAB\",\n            selectedRecord: {\n              sdeptname: this.props.Login.organisation.selectedNodeName,\n              nsitedeptcode: this.props.Login.organisation.primaryKeyValue\n            },\n            url: \"organisation/getDepartmentLabComboData\",\n            listName: \"departmentLabList\",\n            columnList: this.deptLabColumnList,\n            inputData: {\n              nsitedeptcode: this.props.Login.organisation.primaryKeyValue,\n              userinfo: this.props.Login.userInfo,\n              completetreepath: this.props.Login.masterData.CompleteTreePath\n            }\n          };else if (this.props.Login.organisation.selectedNode === \"Lab\") inputParam = {\n            operation: \"create\",\n            screenName: \"IDS_SECTION\",\n            selectedRecord: {\n              slabname: this.props.Login.organisation.selectedNodeName,\n              ndeptlabcode: this.props.Login.organisation.primaryKeyValue\n            },\n            url: \"organisation/getLabSectionComboData\",\n            listName: \"labSectionList\",\n            columnList: this.labSectionColumnList,\n            inputData: {\n              ndeptlabcode: this.props.Login.organisation.primaryKeyValue,\n              userinfo: this.props.Login.userInfo,\n              completetreepath: this.props.Login.masterData.CompleteTreePath\n            }\n          };\n          this.props.getOrganisationComboService(inputParam);\n        } else if (this.props.Login.organisation && this.props.Login.organisation.selectedNode === \"Section\") {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CLICKADDUSER\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTNODE\"\n          }));\n        }\n      }\n    };\n\n    this.addUser = () => {\n      let inputParam = {};\n\n      if (this.props.Login.organisation && this.props.Login.organisation.selectedNode === \"Section\") {\n        inputParam = {\n          operation: \"create\",\n          screenName: \"IDS_USERS\",\n          selectedRecord: {\n            ssectionname: this.props.Login.organisation.selectedNodeName,\n            nlabsectioncode: this.props.Login.organisation.primaryKeyValue\n          },\n          url: \"organisation/getSectionUsersComboData\",\n          listName: \"sectionUsersList\",\n          columnList: this.sectionUserColumnList,\n          inputData: {\n            nlabsectioncode: this.props.Login.organisation.primaryKeyValue,\n            userinfo: this.props.Login.userInfo,\n            completetreepath: this.props.Login.masterData.CompleteTreePath,\n            nsitecode: this.props.Login.masterData.SelectedOrgSite.nsitecode\n          }\n        };\n        this.props.getOrganisationComboService(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSECTIONTOADD\"\n        }));\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let operation = this.props.Login.operation;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = '';\n          selectedRecord['esigncomments'] = '';\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {}; //operation = undefined;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          operation: operation\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n\n      if (fieldName === \"nsitecode\") {\n        // this.props.organisationService({\n        //     inputData: {\n        //         nsitecode: selectedRecord.nsitecode.value,\n        //         userinfo: this.props.Login.userInfo, graphview: false,\n        //         completetreepath: selectedRecord.nsitecode.label,\n        //         primarykey: selectedRecord.nsitecode.value\n        //     },\n        //     masterData: this.props.Login.masterData,\n        //     url: \"organisation/getSiteDepartment\"\n        // });\n        this.reloadData(comboData);\n      } else {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.reloadData = comboChangeData => {\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          nsitecode: comboChangeData ? comboChangeData.value : this.props.Login.masterData && this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode\n        },\n        classUrl: \"organisation\",\n        methodUrl: \"Organisation\",\n        displayName: \"IDS_ORGANISATION\",\n        userInfo: this.props.Login.userInfo\n      }; //this.props.reloadTreeData(inputParam);  \n\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let methodUrl = \"\";\n      let nextNode = \"\";\n\n      if (this.props.Login.organisation.selectedNode === \"Site\") {\n        methodUrl = \"SiteDepartment\";\n        let siteDepartment = [];\n        this.state.selectedRecord[\"ndeptcode\"] && this.state.selectedRecord[\"ndeptcode\"].map(item => {\n          return siteDepartment.push({\n            nsitecode: this.state.selectedRecord.nsitecode,\n            ndeptcode: item.value\n          });\n        });\n        inputData[\"sitedepartmentlist\"] = siteDepartment;\n        nextNode = \"Department\";\n      } else if (this.props.Login.organisation.selectedNode === \"Department\") {\n        methodUrl = \"DepartmentLab\";\n        let departmentLab = [];\n        this.state.selectedRecord[\"nlabcode\"] && this.state.selectedRecord[\"nlabcode\"].map(item => {\n          return departmentLab.push({\n            nsitedeptcode: this.state.selectedRecord.nsitedeptcode,\n            nlabcode: item.value\n          });\n        });\n        inputData[\"nsitecode\"] = this.props.Login.masterData.SelectedOrgSite.nsitecode;\n        inputData[\"departmentlablist\"] = departmentLab;\n        nextNode = \"Lab\";\n      } else if (this.props.Login.organisation.selectedNode === \"Lab\") {\n        methodUrl = \"LabSection\";\n        let labSection = [];\n        this.state.selectedRecord[\"nsectioncode\"] && this.state.selectedRecord[\"nsectioncode\"].map(item => {\n          return labSection.push({\n            ndeptlabcode: this.state.selectedRecord.ndeptlabcode,\n            nsectioncode: item.value\n          });\n        });\n        inputData[\"nsitecode\"] = this.props.Login.masterData.SelectedOrgSite.nsitecode;\n        inputData[\"labsectionlist\"] = labSection;\n        nextNode = \"Section\";\n      } else if (this.props.Login.organisation.selectedNode === \"Section\") {\n        methodUrl = \"SectionUsers\";\n        let sectionUsers = [];\n        this.state.selectedRecord[\"nusercode\"] && this.state.selectedRecord[\"nusercode\"].map(item => {\n          return sectionUsers.push({\n            nlabsectioncode: this.state.selectedRecord.nlabsectioncode,\n            nusercode: item.value,\n            nsitecode: this.props.Login.masterData.SelectedOrgSite.nsitecode\n          });\n        });\n        inputData[\"nsitecode\"] = this.props.Login.masterData.SelectedOrgSite.nsitecode;\n        inputData[\"sectionuserslist\"] = sectionUsers;\n        nextNode = \"Section\";\n      }\n\n      const masterData = this.props.Login.masterData;\n      inputData[\"completetreepath\"] = masterData.CompleteTreePath;\n      const inputParam = {\n        classUrl: \"organisation\",\n        methodUrl,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        nextNode\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      let validateDelete = false;\n\n      if (deleteParam.methodUrl === \"SectionUsers\") {\n        deleteParam[\"inputData\"] = { ...deleteParam[\"inputData\"],\n          //sectionusers:deleteParam.selectedRecord,\n          deleteid: deleteParam.selectedRecord.nsectionusercode\n        };\n        validateDelete = true;\n      } else {\n        if (this.props.Login.organisation) {\n          if (this.props.Login.organisation.selectedNode !== \"Site\") {\n            deleteParam[\"inputData\"] = { ...deleteParam[\"inputData\"] //sectionusers:deleteParam.selectedRecord,\n              //deleteid:deleteParam.selectedRecord.nsectionusercode\n\n            };\n            validateDelete = true;\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_CANNOTDELETESITE\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTNODETODELETE\"\n          }));\n        }\n      }\n\n      if (validateDelete) {\n        if (deleteParam.inputData.sectionusers && deleteParam.inputData.sectionusers.expanded !== undefined) {\n          delete deleteParam.inputData.sectionusers.expanded;\n        }\n\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          displayName: \"IDS_ORGANISATION\",\n          methodUrl: deleteParam.methodUrl,\n          inputData: { ...deleteParam.inputData,\n            completetreepath: this.props.Login.masterData.CompleteTreePath\n          },\n          operation: deleteParam.operation,\n          nextNode: deleteParam.nextNode\n        };\n        const deleteId = this.state.controlMap.has(\"Delete\") && this.state.controlMap.get(\"Delete\").ncontrolcode;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"Organisation\",\n              operation: deleteParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.childRef = React.createRef();\n    const _dataState = {\n      skip: 0\n    };\n    this.confirmMessage = new ConfirmMessage();\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      selectedClass: 'selectedClass',\n      siteClass: 'siteClass',\n      deptClass: 'deptClass',\n      labClass: 'labClass',\n      sectionClass: 'sectionClass',\n      userClass: 'userClass'\n    };\n    this.usersColumnList = [{\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"300px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_EMPLOYEENO\",\n      \"dataField\": \"sempid\",\n      \"width\": \"300px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_DESIGNATION\",\n      \"dataField\": \"sdesignationname\",\n      \"width\": \"200px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.roleColumnList = [{\n      \"idsName\": \"IDS_ROLE\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_DEFAULTROLE\",\n      \"dataField\": \"sdefaultstatus\",\n      \"width\": \"100px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.siteDepartmentColumnList = [{\n      \"mandatory\": false,\n      \"controlType\": \"textbox\",\n      \"idsName\": \"IDS_SITE\",\n      \"dataField\": \"ssitename\",\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_DEPARTMENT\",\n      \"dataField\": \"ndeptcode\",\n      \"optionId\": \"ndeptcode\",\n      \"optionValue\": \"sdeptname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.deptLabColumnList = [{\n      \"mandatory\": false,\n      \"controlType\": \"textbox\",\n      \"idsName\": \"IDS_DEPTNAME\",\n      \"dataField\": \"sdeptname\",\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_LAB\",\n      \"dataField\": \"nlabcode\",\n      \"optionId\": \"nlabcode\",\n      \"optionValue\": \"slabname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.labSectionColumnList = [{\n      \"mandatory\": false,\n      \"controlType\": \"textbox\",\n      \"idsName\": \"IDS_LAB\",\n      \"dataField\": \"slabname\",\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SECTION\",\n      \"dataField\": \"nsectioncode\",\n      \"optionId\": \"nsectioncode\",\n      \"optionValue\": \"ssectionname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.sectionUserColumnList = [{\n      \"mandatory\": false,\n      \"controlType\": \"textbox\",\n      \"idsName\": \"IDS_SECTION\",\n      \"dataField\": \"ssectionname\",\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_USERS\",\n      \"dataField\": \"nusercode\",\n      \"optionId\": \"nusercode\",\n      \"optionValue\": \"susername\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add\") && this.state.controlMap.get(\"Add\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete\") && this.state.controlMap.get(\"Delete\").ncontrolcode;\n    const addUserId = this.state.controlMap.has(\"AddSectionUsers\") && this.state.controlMap.get(\"AddSectionUsers\").ncontrolcode;\n    const usersDeleteParam = {\n      operation: \"delete\",\n      methodUrl: \"SectionUsers\",\n      nextNode: \"Section\",\n      inputData: {\n        userinfo: this.props.Login.userInfo,\n        nsitecode: this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode\n      }\n    };\n    const selectedOrgSite = this.props.Login.masterData.SelectedOrgSite || {};\n    let deleteParam = {};\n    let comboDataList = [];\n    let columnList = [];\n\n    if (this.props.Login.organisation && this.props.Login.organisation.selectedNode === \"Site\") {\n      comboDataList = this.props.Login.siteDepartmentList || [];\n      columnList = this.siteDepartmentColumnList;\n    } else if (this.props.Login.organisation && this.props.Login.organisation.selectedNode === \"Department\") {\n      comboDataList = this.props.Login.departmentLabList || [];\n      columnList = this.deptLabColumnList;\n      deleteParam = {\n        screenName: \"SiteDepartment\",\n        methodUrl: \"SiteDepartment\",\n        operation: \"delete\",\n        nextNode: \"Site\",\n        inputData: {\n          //sitedepartment:this.props.Login.organisation.selectedNodeDetail,\n          nsitedeptcode: this.props.Login.organisation.primaryKeyValue,\n          userinfo: this.props.Login.userInfo\n        }\n      };\n    } else if (this.props.Login.organisation && this.props.Login.organisation.selectedNode === \"Lab\") {\n      comboDataList = this.props.Login.labSectionList || [];\n      columnList = this.labSectionColumnList;\n      deleteParam = {\n        screenName: \"DepartmentLab\",\n        methodUrl: \"DepartmentLab\",\n        operation: \"delete\",\n        nextNode: \"Department\",\n        inputData: {\n          //departmentlab:this.props.Login.organisation.selectedNodeDetail,\n          ndeptlabcode: this.props.Login.organisation.primaryKeyValue,\n          userinfo: this.props.Login.userInfo,\n          nsitecode: this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode\n        }\n      };\n    } else if (this.props.Login.organisation && this.props.Login.organisation.selectedNode === \"Section\") {\n      comboDataList = this.props.Login.sectionUsersList || [];\n      columnList = this.sectionUserColumnList;\n      deleteParam = {\n        screenName: \"LabSection\",\n        methodUrl: \"LabSection\",\n        operation: \"delete\",\n        nextNode: \"Lab\",\n        inputData: {\n          //labsection:this.props.Login.organisation.selectedNodeDetail, \n          nlabsectioncode: this.props.Login.organisation.primaryKeyValue,\n          userinfo: this.props.Login.userInfo,\n          nsitecode: this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode\n        }\n      };\n    } // const deleteConfirmMsg = `IDS_CONFIRMDELETE${this.props.Login.organisation && this.props.Login.organisation.selectedNode && this.props.Login.organisation.selectedNode.toUpperCase()}`;\n\n\n    const selectedPath = this.props.Login.masterData && this.props.Login.masterData.CompleteTreePath && this.props.Login.masterData.CompleteTreePath.replaceAll(\"/\", \" / \"); //  const confirmMessage = new ConfirmMessage();\n\n    const mandatoryFields = [];\n    columnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    const defaultHeight = 600;\n    let graphHeight = this.props.Login.graphHeight ? this.props.Login.graphHeight : defaultHeight;\n\n    if (graphHeight < defaultHeight) {\n      graphHeight = defaultHeight;\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Affix, {\n      top: 65,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(SearchAdd, {\n      className: \"org-tree-search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nsitecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_SITE\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.siteList || [],\n      value: this.props.Login.masterData && this.props.Login.masterData.SelectedOrgSite && {\n        value: this.props.Login.masterData.SelectedOrgSite.nsitecode,\n        label: this.props.Login.masterData.SelectedOrgSite.ssitename\n      },\n      isMandatory: true,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'nsitecode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 7,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-icon-rounded btn-circle solid-blue\",\n      role: \"button\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_ADD\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n      onClick: () => this.openModal(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteLink\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      className: \"btn btn-circle outline-grey ml-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.props.Login.organisation ? this.confirmDelete({ ...deleteParam\n      }) : toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_SELECTNODETODELETE\"\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey ml-2\",\n      variant: \"link\",\n      onClick: () => this.reloadData() //data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REFRESH\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSync,\n      style: {\n        \"width\": \"0.6!important\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey ml-2\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_GRAPH\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.props.organisationService({\n        inputData: {\n          nsitecode: this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode,\n          userinfo: this.props.Login.userInfo,\n          graphview: true,\n          completetreepath: \"\",\n          primarykey: 0\n        },\n        masterData: this.props.Login.masterData,\n        selectedNode: \"Site\",\n        url: \"organisation/getSiteDepartment\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Graph, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 57\n      }\n    }), \" \")))))), selectedOrgSite && selectedOrgSite.ssitename && this.props.Login.masterData.SiteDepartment.length > 0 ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      className: \"org-tree-scroll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FormTreeMenu //data ={treeMap.get(\"data\")}\n    , {\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_FILTER\"\n      }),\n      data: this.props.Login.masterData.TreeData,\n      handleTreeClick: this.onTreeClick,\n      activeKey: this.props.Login.masterData.CompleteTreePath || \"\",\n      focusKey: this.props.Login.masterData.CompleteTreePath || \"\",\n      initialOpenNodes: this.props.Login.masterData.TreeInitialOpenNodes,\n      hasSearch: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 49\n      }\n    })))) : \"\")), /*#__PURE__*/React.createElement(Col, {\n      md: 7,\n      className: \"border\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"addrole\",\n      className: \"add-txt-btn\" // data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDUSERS\" })}\n      ,\n      hidden: this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addUserId) === -1,\n      onClick: () => this.addUser(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 49\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_USER\",\n      defaultMessage: \"User\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 49\n      }\n    }))), /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 45\n      }\n    }, selectedPath), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 53\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nusercode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.usersColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.inputParam,\n      userInfo: this.props.userInfo,\n      methodUrl: \"SectionUsers\",\n      deleteRecord: this.deleteRecord,\n      deleteParam: usersDeleteParam,\n      pageable: false,\n      scrollable: \"scrollable\" //isComponent={false}\n      ,\n      isActionRequired: true,\n      isToolBarRequired: false,\n      selectedId: this.props.Login.selectedId,\n      expandField: \"expanded\",\n      handleExpandChange: this.handleExpandChange,\n      hasChild: true,\n      childColumnList: this.roleColumnList,\n      childMappingField: \"nusercode\",\n      childList: this.props.Login.userRoleMap || new Map()\n      /**Uncomment below handleRowClick when row click is needed */\n      //handleRowClick={this.handleRowClick}  \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 61\n      }\n    }) : \"\")))))))))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: this.props.Login.graphView ? 'xl' : 'lg',\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      graphView: this.props.Login.graphView,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      resetView: this.resetView // addComponentParam={{comboDataList, columnList}}                   \n      // addComponent={this.addComponent}\n      ,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 29\n        }\n      }) : this.props.Login.graphView ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        style: {\n          backgroundColor: '#ffffff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Tree // data={this.graphView()[\"initialNode\"]}\n      , {\n        data: this.props.Login.graphData,\n        height: graphHeight // height={900}\n        ,\n        width: 1000,\n        animated: true,\n        duration: 800,\n        svgProps: {\n          // transform: 'rotate(90)',\n          className: 'custom'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 45\n        }\n      })))) : /*#__PURE__*/React.createElement(AddChild, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        comboDataList: comboDataList,\n        extractedColumnList: columnList,\n        handleDateChange: this.handleDateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 35\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n  /**Uncomment below handleRowClick event handler function when row click is needed */\n  // handleRowClick = (event) =>{\n  //     const updateInfo = {\n  //         typeName: DEFAULT_RETURN,\n  //         data: {\n  //             selectedId: event.dataItem[\"nusercode\"]\n  //         }\n  //     }\n  //     this.props.updateStore(updateInfo)\n  // }\n\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        const siteMap = constructOptionList(this.props.Login.masterData.OrganisationSite || [], \"nsitecode\", \"ssitename\", undefined, undefined, true);\n        const siteList = siteMap.get(\"OptionList\");\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          siteList: siteList,\n          data: this.props.Login.data || this.props.Login.masterData.SectionUsers || [],\n          dataResult: process(this.props.Login.data || this.props.Login.masterData.SectionUsers || [], this.state.dataState) //roleData: this.props.Login.masterData.SectionUserRoleList || [],\n          //roleDataResult:process(this.props.Login.masterData.SectionUserRoleList||[], this.state.roleDataState),\n\n        });\n      } else {\n        let dataState = this.props.Login.dataState || this.state.dataState;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0\n          };\n        }\n\n        const userData = this.props.Login.data || this.props.Login.masterData.SectionUsers || [];\n        this.setState({\n          selectedRecord: this.props.Login.selectedRecord,\n          data: userData,\n          dataResult: process(userData, this.props.Login.dataState || dataState),\n          dataState: dataState //organisation:{...this.props.Login.organisation, primaryKeyValue: this.props.Login.masterData.AddedChildPrimaryKey }\n\n        });\n      }\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getOrganisationComboService,\n  getSectionUserRole,\n  organisationService,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(Organisation));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/organisation/organisationmapping/Organisation.jsx"],"names":["React","toast","process","connect","FormattedMessage","injectIntl","PerfectScrollbar","Affix","Tree","faTrashAlt","FontAwesomeIcon","faPlus","faSync","Row","Col","Button","Card","Nav","callService","crudMaster","updateStore","validateEsignCredential","organisationService","getSectionUserRole","getOrganisationComboService","AddChild","Esign","SlideOutModal","FormSelectSearch","ConfirmMessage","transactionStatus","showEsign","getControlMap","constructOptionList","DataGrid","FormTreeMenu","DEFAULT_RETURN","SearchAdd","mapStateToProps","state","Login","Organisation","Component","constructor","props","dataStateChange","event","setState","dataState","dataResult","data","handleDateChange","dateName","dateValue","selectedRecord","resetView","inputParam","inputData","nsitecode","masterData","SelectedOrgSite","userinfo","userInfo","graphview","completetreepath","primarykey","selectedNode","url","handleExpandChange","row","viewParam","primaryKeyField","primaryKeyValue","viewRow","confirmDelete","deleteParam","deleteConfirmMsg","organisation","toUpperCase","confirmMessage","confirm","intl","formatMessage","id","deleteRecord","onTreeClick","item","selectedtreepath","key","selectedNodeDetail","serviceUrl","updateInfo","typeName","undefined","SectionUsers","openModal","SiteDepartment","length","completeTreePath","CompleteTreePath","ssitename","operation","screenName","listName","columnList","siteDepartmentColumnList","sdeptname","selectedNodeName","nsitedeptcode","deptLabColumnList","slabname","ndeptlabcode","labSectionColumnList","warn","addUser","ssectionname","nlabsectioncode","sectionUserColumnList","closeModal","loadEsign","onInputOnChange","target","type","name","checked","YES","NO","value","onComboChange","comboData","fieldName","reloadData","comboChangeData","classUrl","methodUrl","displayName","onSaveClick","saveType","formRef","nextNode","siteDepartment","map","push","ndeptcode","departmentLab","nlabcode","labSection","nsectioncode","sectionUsers","nusercode","userRoleControlRights","nformcode","ncontrolCode","screenData","validateDelete","deleteid","nsectionusercode","sectionusers","expanded","deleteId","controlMap","has","get","ncontrolcode","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","createRef","childRef","skip","masterStatus","error","Map","selectedClass","siteClass","deptClass","labClass","sectionClass","userClass","usersColumnList","roleColumnList","getDerivedStateFromProps","render","addId","addUserId","usersDeleteParam","selectedOrgSite","comboDataList","siteDepartmentList","departmentLabList","labSectionList","sectionUsersList","selectedPath","replaceAll","mandatoryFields","forEach","mandatory","defaultHeight","graphHeight","siteList","indexOf","TreeData","TreeInitialOpenNodes","selectedId","userRoleMap","graphView","backgroundColor","graphData","className","componentDidUpdate","previousProps","Object","values","siteMap","OrganisationSite","userData"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { Affix } from 'rsuite';\r\nimport Tree from 'react-tree-graph';\r\n\r\nimport '../../../../node_modules/react-simple-tree-menu/dist/main.css';\r\n\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { Row, Col, Button, Card, Nav } from 'react-bootstrap';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport 'react-tree-graph/dist/style.css';\r\n\r\nimport {\r\n    callService, crudMaster, updateStore, validateEsignCredential, organisationService,\r\n    getSectionUserRole, getOrganisationComboService\r\n} from '../../../actions';\r\n\r\nimport AddChild from './AddChild';\r\nimport Esign from '../../../pages/audittrail/Esign';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\nimport { showEsign, getControlMap, constructOptionList } from '../../../components/CommonScript';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\n\r\nimport FormTreeMenu from '../../../components/form-tree-menu/form-tree-menu.component';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\n\r\nimport './treegraph.css';\r\nimport { SearchAdd } from '../../../components/App.styles';\r\nimport { ReactComponent as Graph } from '../../../assets/image/organisational-graph.svg';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Organisation extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.childRef = React.createRef();\r\n\r\n        const dataState = {\r\n            skip: 0\r\n        };\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [], dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n\r\n            selectedClass: 'selectedClass',\r\n            siteClass: 'siteClass',\r\n            deptClass: 'deptClass',\r\n            labClass: 'labClass',\r\n            sectionClass: 'sectionClass',\r\n            userClass: 'userClass',\r\n\r\n        };\r\n\r\n        this.usersColumnList = [{ \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"300px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        { \"idsName\": \"IDS_EMPLOYEENO\", \"dataField\": \"sempid\", \"width\": \"300px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        { \"idsName\": \"IDS_DESIGNATION\", \"dataField\": \"sdesignationname\", \"width\": \"200px\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        ];\r\n\r\n        this.roleColumnList = [{ \"idsName\": \"IDS_ROLE\", \"dataField\": \"suserrolename\", \"width\": \"150px\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_DEFAULTROLE\", \"dataField\": \"sdefaultstatus\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        ];\r\n        this.siteDepartmentColumnList = [{ \"mandatory\": false, \"controlType\": \"textbox\", \"idsName\": \"IDS_SITE\", \"dataField\": \"ssitename\", \"mandatoryLabel\":\"IDS_ENTER\" },\r\n        {\r\n            \"mandatory\": true, \"idsName\": \"IDS_DEPARTMENT\",\r\n            \"dataField\": \"ndeptcode\", \"optionId\": \"ndeptcode\", \"optionValue\": \"sdeptname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n        }];\r\n\r\n        this.deptLabColumnList = [{ \"mandatory\": false, \"controlType\": \"textbox\", \"idsName\": \"IDS_DEPTNAME\", \"dataField\": \"sdeptname\", \"mandatoryLabel\":\"IDS_ENTER\" },\r\n        {\r\n            \"mandatory\": true, \"idsName\": \"IDS_LAB\",\r\n            \"dataField\": \"nlabcode\", \"optionId\": \"nlabcode\", \"optionValue\": \"slabname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n        }];\r\n\r\n        this.labSectionColumnList = [{ \"mandatory\": false, \"controlType\": \"textbox\", \"idsName\": \"IDS_LAB\", \"dataField\": \"slabname\", \"mandatoryLabel\":\"IDS_ENTER\"},\r\n        {\r\n            \"mandatory\": true, \"idsName\": \"IDS_SECTION\",\r\n            \"dataField\": \"nsectioncode\", \"optionId\": \"nsectioncode\", \"optionValue\": \"ssectionname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n        }];\r\n\r\n        this.sectionUserColumnList = [{ \"mandatory\": false, \"controlType\": \"textbox\", \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\" , \"mandatoryLabel\":\"IDS_ENTER\"},\r\n        {\r\n            \"mandatory\": true, \"idsName\": \"IDS_USERS\",\r\n            \"dataField\": \"nusercode\", \"optionId\": \"nusercode\", \"optionValue\": \"susername\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n        }];\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n\r\n        // const viewParam = {\r\n        //     nsitecode: this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode,\r\n        //     userInfo: this.props.Login.userInfo, primaryKeyField: \"nusercode\",\r\n        //     masterData: this.props.Login.masterData\r\n        // };\r\n\r\n        this.setState({ dataState: event.dataState, dataResult: process(this.state.data, event.dataState) })\r\n        // const row = process(this.state.data, event.dataState);\r\n        // if (row.data.length > 0) {\r\n        //     this.props.getSectionUserRole({\r\n        //         ...viewParam,\r\n        //         primaryKeyValue: row.data[0][viewParam.primaryKeyField],\r\n        //         viewRow: row.data[0], data: this.state.data, dataResult: row, dataState: event.dataState\r\n        //     });\r\n        // }\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    render() {\r\n\r\n        const addId = this.state.controlMap.has(\"Add\") && this.state.controlMap.get(\"Add\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete\") && this.state.controlMap.get(\"Delete\").ncontrolcode;\r\n        const addUserId = this.state.controlMap.has(\"AddSectionUsers\") && this.state.controlMap.get(\"AddSectionUsers\").ncontrolcode;\r\n\r\n        const usersDeleteParam = {\r\n            operation: \"delete\", methodUrl: \"SectionUsers\",\r\n            nextNode: \"Section\",\r\n            inputData: {\r\n                userinfo: this.props.Login.userInfo,\r\n                nsitecode: this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode\r\n            }\r\n        };\r\n\r\n        const selectedOrgSite = this.props.Login.masterData.SelectedOrgSite || {};\r\n\r\n        let deleteParam = {};\r\n        let comboDataList = [];\r\n        let columnList = [];\r\n        if (this.props.Login.organisation && this.props.Login.organisation.selectedNode === \"Site\") {\r\n            comboDataList = this.props.Login.siteDepartmentList || [];\r\n            columnList = this.siteDepartmentColumnList;\r\n        }\r\n        else if (this.props.Login.organisation && this.props.Login.organisation.selectedNode === \"Department\") {\r\n            comboDataList = this.props.Login.departmentLabList || [];\r\n            columnList = this.deptLabColumnList;\r\n            deleteParam = {\r\n                screenName: \"SiteDepartment\", methodUrl: \"SiteDepartment\",\r\n                operation: \"delete\",\r\n                nextNode: \"Site\",\r\n                inputData: {//sitedepartment:this.props.Login.organisation.selectedNodeDetail,\r\n                    nsitedeptcode: this.props.Login.organisation.primaryKeyValue,\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n            };\r\n        }\r\n        else if (this.props.Login.organisation && this.props.Login.organisation.selectedNode === \"Lab\") {\r\n            comboDataList = this.props.Login.labSectionList || [];\r\n            columnList = this.labSectionColumnList;\r\n            deleteParam = {\r\n                screenName: \"DepartmentLab\",\r\n                methodUrl: \"DepartmentLab\",\r\n                operation: \"delete\",\r\n                nextNode: \"Department\",\r\n                inputData: {//departmentlab:this.props.Login.organisation.selectedNodeDetail,\r\n                    ndeptlabcode: this.props.Login.organisation.primaryKeyValue,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsitecode: this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode\r\n                }\r\n            };\r\n        }\r\n        else if (this.props.Login.organisation && this.props.Login.organisation.selectedNode === \"Section\") {\r\n            comboDataList = this.props.Login.sectionUsersList || [];\r\n            columnList = this.sectionUserColumnList;\r\n\r\n            deleteParam = {\r\n                screenName: \"LabSection\",\r\n                methodUrl: \"LabSection\",\r\n                operation: \"delete\",\r\n                nextNode: \"Lab\",\r\n                inputData: {//labsection:this.props.Login.organisation.selectedNodeDetail, \r\n                    nlabsectioncode: this.props.Login.organisation.primaryKeyValue,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsitecode: this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode\r\n                }\r\n            };\r\n        }\r\n        // const deleteConfirmMsg = `IDS_CONFIRMDELETE${this.props.Login.organisation && this.props.Login.organisation.selectedNode && this.props.Login.organisation.selectedNode.toUpperCase()}`;\r\n\r\n        const selectedPath = this.props.Login.masterData && this.props.Login.masterData.CompleteTreePath\r\n            && this.props.Login.masterData.CompleteTreePath.replaceAll(\"/\", \" / \");\r\n\r\n        //  const confirmMessage = new ConfirmMessage();\r\n\r\n        const mandatoryFields = [];\r\n        columnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n\r\n        const defaultHeight = 600;\r\n        let graphHeight = this.props.Login.graphHeight ? this.props.Login.graphHeight : defaultHeight;\r\n        if (graphHeight < defaultHeight) {\r\n            graphHeight = defaultHeight;\r\n        }\r\n        return (\r\n            <>\r\n                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                <div className=\"client-listing-wrap mtop-5\">\r\n\r\n                    {/* Start of get display*/}\r\n                    <Row noGutters>\r\n                        <Col md={5}>\r\n                            <Affix top={65}>\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <SearchAdd className=\"org-tree-search\">\r\n                                            <Row>\r\n                                                <Col md={5}>\r\n                                                    <FormSelectSearch\r\n                                                        name={\"nsitecode\"}\r\n                                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_SITE\" })}\r\n                                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                        options={this.state.siteList || []}\r\n                                                        value={this.props.Login.masterData && this.props.Login.masterData.SelectedOrgSite\r\n                                                            && {\r\n                                                            value: this.props.Login.masterData.SelectedOrgSite.nsitecode,\r\n                                                            label: this.props.Login.masterData.SelectedOrgSite.ssitename\r\n                                                        }}\r\n                                                        isMandatory={true}\r\n                                                        isMulti={false}\r\n                                                        isClearable={false}\r\n                                                        isSearchable={true}\r\n                                                        isDisabled={false}\r\n                                                        closeMenuOnSelect={true}\r\n                                                        className=\"mb-2\"\r\n                                                        onChange={(event) => this.onComboChange(event, 'nsitecode')}\r\n                                                    />\r\n                                                </Col>\r\n\r\n                                                <Col md={7}>\r\n                                                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click'/> */}\r\n                                                    <Button\r\n                                                        className=\"btn btn-icon-rounded btn-circle solid-blue\"\r\n                                                        role=\"button\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                                        onClick={() => this.openModal()}>\r\n                                                        <FontAwesomeIcon icon={faPlus} />\r\n                                                    </Button>\r\n\r\n                                                    <Nav.Link\r\n                                                        name=\"deleteLink\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                      //  data-for=\"tooltip_list_wrap\"\r\n                                                        onClick={() => this.props.Login.organisation ? this.confirmDelete({ ...deleteParam }) : toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTNODETODELETE\" }))}\r\n                                                    >\r\n                                                        <FontAwesomeIcon icon={faTrashAlt} />\r\n\r\n                                                        {/* <ConfirmDialog\r\n                                                            name=\"deleteMessage\"\r\n                                                            message={this.props.intl.formatMessage({ id: `${deleteConfirmMsg}`})}\r\n                                                            doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                            doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                            icon={faTrashAlt}\r\n                                                            title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                            handleClickDelete={() => this.deleteRecord({ ...deleteParam })}\r\n                                                        /> */}\r\n\r\n                                                        {/* <FontAwesomeIcon\r\n                                                            icon={faTrashAlt}\r\n                                                            title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                            onClick={() => this.props.Login.organisation ? confirmMessage.confirm(\r\n                                                                \"deleteMessage\",\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                this.props.intl.formatMessage({ id: `${deleteConfirmMsg}` }),\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                                () => this.deleteRecord({ ...deleteParam })) : toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTNODETODELETE\" }))\r\n                                                            }\r\n                                                        /> */}\r\n                                                    </Nav.Link>\r\n\r\n                                                    <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                        onClick={() => this.reloadData()} \r\n                                                        //data-for=\"tooltip_list_wrap\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                        <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                    </Button>\r\n                                                    {/* <ContentPanel className=\"d-flex justify-content-end dropdown badget_menu icon-group-wrap\"> */}\r\n                                                    <Nav.Link\r\n                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                        variant=\"link\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_GRAPH\" })}\r\n                                                       // data-for=\"tooltip_list_wrap\"\r\n                                                        onClick={() => this.props.organisationService({\r\n                                                            inputData: {\r\n                                                                nsitecode: this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode,\r\n                                                                userinfo: this.props.Login.userInfo,\r\n                                                                graphview: true, completetreepath: \"\", primarykey: 0\r\n                                                            },\r\n                                                            masterData: this.props.Login.masterData, selectedNode: \"Site\",\r\n                                                            url: \"organisation/getSiteDepartment\"\r\n                                                        })}>\r\n                                                        <Graph className=\"custom_icons\" width=\"20\" height=\"20\" /> { }\r\n                                                        {/* <FontAwesomeIcon icon={faBars} title={this.props.intl.formatMessage({id:'IDS_GRAPH'})}/>  */}\r\n                                                    </Nav.Link  >\r\n                                                    {/* </ContentPanel> */}\r\n\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </SearchAdd>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                {selectedOrgSite && selectedOrgSite.ssitename &&\r\n                                    this.props.Login.masterData.SiteDepartment.length > 0 ?\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                            <PerfectScrollbar className=\"org-tree-scroll\">\r\n                                                <FormTreeMenu //data ={treeMap.get(\"data\")}\r\n                                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_FILTER\" })}\r\n                                                    data={this.props.Login.masterData.TreeData}\r\n                                                    handleTreeClick={this.onTreeClick}\r\n                                                    activeKey={this.props.Login.masterData.CompleteTreePath || \"\"}\r\n                                                    focusKey={this.props.Login.masterData.CompleteTreePath || \"\"}\r\n                                                    initialOpenNodes={this.props.Login.masterData.TreeInitialOpenNodes}\r\n                                                    hasSearch={true}\r\n                                                />\r\n                                            </PerfectScrollbar>\r\n                                        </Col>\r\n                                    </Row> : \"\"}\r\n                            </Affix>\r\n                        </Col>\r\n\r\n                        <Col md={7} className='border'>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <div className=\"p-3\">\r\n                                        {/* <Button className=\"btn btn-user btn-primary-blue mb-3\"\r\n                                            hidden={this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addUserId) === -1}\r\n                                            onClick={() => this.addUser()}\r\n                                            role=\"button\">\r\n                                            <FormattedMessage id={\"IDS_ADDUSER\"} defaultMessage='Add User' />\r\n                                        </Button> */}\r\n                                        <div className=\"d-flex justify-content-end\">\r\n                                            {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                            <Nav.Link name=\"addrole\" className=\"add-txt-btn\"\r\n                                                // data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDUSERS\" })}\r\n                                                hidden={this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addUserId) === -1}\r\n                                                onClick={() => this.addUser()}>\r\n                                                <FontAwesomeIcon icon={faPlus} /> { }\r\n                                                <FormattedMessage id='IDS_USER' defaultMessage='User' />\r\n                                            </Nav.Link>\r\n                                        </div>\r\n                                        <Card>\r\n                                            <Card.Header>\r\n                                                {selectedPath}\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Row>\r\n                                                    <Col md={12}>\r\n                                                        {this.state.data ?\r\n                                                            <DataGrid\r\n                                                                primaryKeyField={\"nusercode\"}\r\n                                                                data={this.state.data}\r\n                                                                dataResult={this.state.dataResult}\r\n                                                                dataState={this.state.dataState}\r\n                                                                dataStateChange={this.dataStateChange}\r\n                                                                extractedColumnList={this.usersColumnList}\r\n                                                                controlMap={this.state.controlMap}\r\n                                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                inputParam={this.props.inputParam}\r\n                                                                userInfo={this.props.userInfo}\r\n                                                                methodUrl=\"SectionUsers\"\r\n                                                                deleteRecord={this.deleteRecord}\r\n                                                                deleteParam={usersDeleteParam}\r\n                                                                pageable={false}\r\n                                                                scrollable={\"scrollable\"}\r\n                                                                //isComponent={false}\r\n                                                                isActionRequired={true}\r\n                                                                isToolBarRequired={false}\r\n                                                                selectedId={this.props.Login.selectedId}\r\n                                                                expandField=\"expanded\"\r\n                                                                handleExpandChange={this.handleExpandChange}\r\n                                                                hasChild={true}\r\n                                                                childColumnList={this.roleColumnList}\r\n                                                                childMappingField={\"nusercode\"}\r\n                                                                childList={this.props.Login.userRoleMap || new Map()}\r\n                                                            /**Uncomment below handleRowClick when row click is needed */\r\n                                                            //handleRowClick={this.handleRowClick}  \r\n                                                            />\r\n                                                            : \"\"}\r\n                                                    </Col>\r\n                                                </Row>\r\n\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </div>\r\n\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </div>\r\n                {/* Start of Modal Slideout*/}\r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        size={this.props.Login.graphView ? 'xl' : 'lg'}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        graphView={this.props.Login.graphView}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        resetView={this.resetView}\r\n                        // addComponentParam={{comboDataList, columnList}}                   \r\n                        // addComponent={this.addComponent}\r\n\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.graphView ?\r\n                                <>\r\n                                    {/* <Row>                                  \r\n                                    <Col md={12} style={{backgroundColor:'#ffffff', paddingTop:'20px', paddingBottom:'20px'}}>\r\n                                         <Button  className=\"btn btn-user btn-primary-blue\" role=\"button\"   \r\n                                          onClick={()=> this.props.organisationService({\r\n                                                        inputData: {\r\n                                                            nsitecode: this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode,\r\n                                                            userinfo: this.props.Login.userInfo,\r\n                                                            graphview: true, completetreepath: \"\", primarykey: 0\r\n                                                        },\r\n                                                        masterData: this.props.Login.masterData, selectedNode: \"Site\",\r\n                                                        url: \"organisation/getSiteDepartment\"\r\n                                                    })   }                              \r\n                                            >\r\n                                          <FormattedMessage id={\"IDS_RESET\"} defaultMessage='Reset' />\r\n                                    </Button>\r\n                                    </Col>\r\n                                </Row> */}\r\n                                    <Row>\r\n                                        <Col md={12} style={{ backgroundColor: '#ffffff' }}>\r\n                                            <Tree\r\n                                                // data={this.graphView()[\"initialNode\"]}\r\n                                                data={this.props.Login.graphData}\r\n                                                height={graphHeight}\r\n                                                // height={900}\r\n                                                width={1000}\r\n                                                animated\r\n                                                duration={800}\r\n                                                svgProps={{\r\n                                                    // transform: 'rotate(90)',\r\n                                                    className: 'custom'\r\n                                                }}\r\n                                            />\r\n                                            {/* <TreeGraph/> */}\r\n                                        </Col>\r\n                                    </Row></>\r\n                                : <AddChild\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    operation={this.props.Login.operation}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    comboDataList={comboDataList}\r\n                                    extractedColumnList={columnList}\r\n                                    handleDateChange={this.handleDateChange}\r\n\r\n                                />\r\n                        }\r\n                    /> : \"\"}\r\n                {/* End of Modal Sideout for GoodsIn Creation */}\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    /**Uncomment below handleRowClick event handler function when row click is needed */\r\n    // handleRowClick = (event) =>{\r\n    //     const updateInfo = {\r\n    //         typeName: DEFAULT_RETURN,\r\n    //         data: {\r\n    //             selectedId: event.dataItem[\"nusercode\"]\r\n    //         }\r\n    //     }\r\n    //     this.props.updateStore(updateInfo)\r\n    // }\r\n\r\n    resetView = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                nsitecode: this.props.Login.masterData.SelectedOrgSite\r\n                    && this.props.Login.masterData.SelectedOrgSite.nsitecode,\r\n                userinfo: this.props.Login.userInfo,\r\n                graphview: true, completetreepath: \"\", primarykey: 0\r\n            },\r\n            masterData: this.props.Login.masterData, selectedNode: \"Site\",\r\n            url: \"organisation/getSiteDepartment\"\r\n        }\r\n\r\n        this.props.organisationService(inputParam);\r\n    }\r\n\r\n    handleExpandChange = (row, dataState) => {\r\n        const viewParam = {\r\n            nsitecode: this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode,\r\n            userInfo: this.props.Login.userInfo, primaryKeyField: \"nusercode\",\r\n            masterData: this.props.Login.masterData\r\n        };\r\n\r\n        this.props.getSectionUserRole({\r\n            ...viewParam, dataState,\r\n            primaryKeyValue: row[\"dataItem\"][viewParam.primaryKeyField], viewRow: row[\"dataItem\"]\r\n        });\r\n\r\n    }\r\n\r\n    confirmDelete = (deleteParam) => {\r\n\r\n        const deleteConfirmMsg = `IDS_CONFIRMDELETE${this.props.Login.organisation && this.props.Login.organisation.selectedNode && this.props.Login.organisation.selectedNode.toUpperCase()}`;\r\n\r\n        this.confirmMessage.confirm(\"deleteMessage\",\r\n            this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n            this.props.intl.formatMessage({ id: `${deleteConfirmMsg}` }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(deleteParam)\r\n        );\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        if (event) {\r\n            if (event.item.selectedNode === \"Section\") {\r\n                let masterData = { ...this.props.Login.masterData }\r\n                let inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedtreepath: event.key, graphview: false,\r\n                    [event.item.primaryKeyField]: event.item.selectedNodeDetail[event.item.primaryKeyField]\r\n                }\r\n                masterData[\"CompleteTreePath\"] = event.key;\r\n                this.props.organisationService({\r\n                    inputData,\r\n                    //url:event.getParam.url,\r\n                    url: event.serviceUrl,\r\n                    masterData,\r\n                    organisation: { ...event.item }\r\n                })\r\n            }\r\n            else {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        organisation: { ...event.item },\r\n                        data: undefined, dataState: undefined,\r\n                        masterData: { ...this.props.Login.masterData, \"CompleteTreePath\": event.key, SectionUsers: [] }\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                const siteMap = constructOptionList(this.props.Login.masterData.OrganisationSite || [], \"nsitecode\",\r\n                    \"ssitename\", undefined, undefined, true);\r\n                const siteList = siteMap.get(\"OptionList\");\r\n\r\n\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, siteList: siteList,\r\n                    data: this.props.Login.data || this.props.Login.masterData.SectionUsers || [],\r\n                    dataResult: process(this.props.Login.data || this.props.Login.masterData.SectionUsers || [], this.state.dataState),\r\n                    //roleData: this.props.Login.masterData.SectionUserRoleList || [],\r\n                    //roleDataResult:process(this.props.Login.masterData.SectionUserRoleList||[], this.state.roleDataState),\r\n\r\n                });\r\n            }\r\n            else {\r\n                let dataState = this.props.Login.dataState || this.state.dataState;\r\n\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0 };\r\n                }\r\n                const userData = this.props.Login.data || this.props.Login.masterData.SectionUsers || [];\r\n\r\n                this.setState({\r\n                    selectedRecord: this.props.Login.selectedRecord,\r\n                    data: userData,\r\n                    dataResult: process(userData, this.props.Login.dataState || dataState),\r\n                    dataState: dataState,\r\n                    //organisation:{...this.props.Login.organisation, primaryKeyValue: this.props.Login.masterData.AddedChildPrimaryKey }\r\n                });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    openModal = () => {\r\n        let inputParam = {};\r\n        //const primaryKey = this.props.Login.masterData.AddedChildPrimaryKey;\r\n        // console.log(\"master data in open modal:\", this.props.Login.masterData);\r\n        if (this.props.Login.masterData.SiteDepartment.length === 0) {\r\n            let completeTreePath = this.props.Login.masterData.CompleteTreePath;\r\n            if (completeTreePath === \"\") {\r\n                completeTreePath = this.props.Login.masterData.SelectedOrgSite.ssitename;\r\n            }\r\n            inputParam = {\r\n                operation: \"create\", screenName: \"IDS_DEPARTMENT\",\r\n                selectedRecord: {\r\n                    ssitename: this.props.Login.masterData.SelectedOrgSite.ssitename,\r\n                    nsitecode: this.props.Login.masterData.SelectedOrgSite.nsitecode,\r\n                },\r\n                url: \"organisation/getSiteDepartmentComboData\",\r\n                listName: \"siteDepartmentList\",\r\n                columnList: this.siteDepartmentColumnList,\r\n                inputData: {\r\n                    nsitecode: this.props.Login.masterData.SelectedOrgSite.nsitecode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    completetreepath: completeTreePath,\r\n                },\r\n                organisation: { selectedNode: \"Site\", }\r\n            };\r\n            this.props.getOrganisationComboService(inputParam);\r\n        }\r\n        else {\r\n            if (this.props.Login.organisation && this.props.Login.organisation.selectedNode !== \"Section\") {\r\n                if (this.props.Login.organisation.selectedNode === \"Site\")\r\n                    inputParam = {\r\n                        operation: \"create\", screenName: \"IDS_DEPARTMENT\",\r\n                        selectedRecord: {\r\n                            ssitename: this.props.Login.masterData.SelectedOrgSite.ssitename,//this.props.Login.organisation.selectedNodeName, \r\n                            nsitecode: this.props.Login.masterData.SelectedOrgSite.nsitecode,\r\n                            //this.props.Login.organisation.primaryKeyValue\r\n                        },\r\n                        url: \"organisation/getSiteDepartmentComboData\",\r\n                        listName: \"siteDepartmentList\",\r\n                        columnList: this.siteDepartmentColumnList,\r\n                        inputData: {\r\n                            nsitecode: this.props.Login.masterData.SelectedOrgSite.nsitecode,//this.props.Login.organisation.primaryKeyValue, \r\n                            userinfo: this.props.Login.userInfo,\r\n                            completetreepath: this.props.Login.masterData.CompleteTreePath\r\n                        }\r\n                    };\r\n                else if (this.props.Login.organisation.selectedNode === \"Department\")\r\n                    inputParam = {\r\n                        operation: \"create\", screenName: \"IDS_LAB\",\r\n                        selectedRecord: {\r\n                            sdeptname: this.props.Login.organisation.selectedNodeName,\r\n                            nsitedeptcode: this.props.Login.organisation.primaryKeyValue\r\n                        },\r\n                        url: \"organisation/getDepartmentLabComboData\",\r\n                        listName: \"departmentLabList\",\r\n                        columnList: this.deptLabColumnList,\r\n                        inputData: {\r\n                            nsitedeptcode: this.props.Login.organisation.primaryKeyValue,\r\n                            userinfo: this.props.Login.userInfo,\r\n                            completetreepath: this.props.Login.masterData.CompleteTreePath\r\n                        }\r\n                    };\r\n                else if (this.props.Login.organisation.selectedNode === \"Lab\")\r\n                    inputParam = {\r\n                        operation: \"create\", screenName: \"IDS_SECTION\",\r\n                        selectedRecord: {\r\n                            slabname: this.props.Login.organisation.selectedNodeName,\r\n                            ndeptlabcode: this.props.Login.organisation.primaryKeyValue\r\n                        },\r\n                        url: \"organisation/getLabSectionComboData\",\r\n                        listName: \"labSectionList\",\r\n                        columnList: this.labSectionColumnList,\r\n                        inputData: {\r\n                            ndeptlabcode: this.props.Login.organisation.primaryKeyValue,\r\n                            userinfo: this.props.Login.userInfo,\r\n                            completetreepath: this.props.Login.masterData.CompleteTreePath\r\n                        }\r\n                    };\r\n                this.props.getOrganisationComboService(inputParam);\r\n            }\r\n            else if (this.props.Login.organisation && this.props.Login.organisation.selectedNode === \"Section\") {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CLICKADDUSER\" }));\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTNODE\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    addUser = () => {\r\n        let inputParam = {};\r\n        if (this.props.Login.organisation &&\r\n            this.props.Login.organisation.selectedNode === \"Section\") {\r\n            inputParam = {\r\n                operation: \"create\", screenName: \"IDS_USERS\",\r\n                selectedRecord: {\r\n                    ssectionname: this.props.Login.organisation.selectedNodeName,\r\n                    nlabsectioncode: this.props.Login.organisation.primaryKeyValue\r\n                },\r\n                url: \"organisation/getSectionUsersComboData\",\r\n                listName: \"sectionUsersList\",\r\n                columnList: this.sectionUserColumnList,\r\n                inputData: {\r\n                    nlabsectioncode: this.props.Login.organisation.primaryKeyValue,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    completetreepath: this.props.Login.masterData.CompleteTreePath,\r\n                    nsitecode: this.props.Login.masterData.SelectedOrgSite.nsitecode\r\n                }\r\n            };\r\n            this.props.getOrganisationComboService(inputParam);\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSECTIONTOADD\" }));\r\n        }\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n\r\n        let operation = this.props.Login.operation;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = '';\r\n                selectedRecord['esigncomments'] = '';\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            //operation = undefined;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, operation: operation }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n\r\n        if (fieldName === \"nsitecode\") {\r\n            // this.props.organisationService({\r\n            //     inputData: {\r\n            //         nsitecode: selectedRecord.nsitecode.value,\r\n            //         userinfo: this.props.Login.userInfo, graphview: false,\r\n            //         completetreepath: selectedRecord.nsitecode.label,\r\n            //         primarykey: selectedRecord.nsitecode.value\r\n            //     },\r\n            //     masterData: this.props.Login.masterData,\r\n            //     url: \"organisation/getSiteDepartment\"\r\n            // });\r\n            this.reloadData(comboData);\r\n        }\r\n        else {\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    reloadData = (comboChangeData) => {\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                userinfo: this.props.Login.userInfo,\r\n                nsitecode: comboChangeData ? comboChangeData.value : this.props.Login.masterData && this.props.Login.masterData.SelectedOrgSite && this.props.Login.masterData.SelectedOrgSite.nsitecode\r\n            },\r\n            classUrl: \"organisation\",\r\n            methodUrl: \"Organisation\",\r\n            displayName: \"IDS_ORGANISATION\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        //this.props.reloadTreeData(inputParam);  \r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        let methodUrl = \"\";\r\n        let nextNode = \"\";\r\n        if (this.props.Login.organisation.selectedNode === \"Site\") {\r\n            methodUrl = \"SiteDepartment\";\r\n            let siteDepartment = [];\r\n            this.state.selectedRecord[\"ndeptcode\"] &&\r\n                this.state.selectedRecord[\"ndeptcode\"].map(item => {\r\n                    return siteDepartment.push({\r\n                        nsitecode: this.state.selectedRecord.nsitecode,\r\n                        ndeptcode: item.value\r\n                    })\r\n                })\r\n            inputData[\"sitedepartmentlist\"] = siteDepartment;\r\n            nextNode = \"Department\";\r\n        }\r\n        else if (this.props.Login.organisation.selectedNode === \"Department\") {\r\n            methodUrl = \"DepartmentLab\";\r\n            let departmentLab = [];\r\n            this.state.selectedRecord[\"nlabcode\"] &&\r\n                this.state.selectedRecord[\"nlabcode\"].map(item => {\r\n                    return departmentLab.push({\r\n                        nsitedeptcode: this.state.selectedRecord.nsitedeptcode,\r\n                        nlabcode: item.value\r\n                    })\r\n                })\r\n            inputData[\"nsitecode\"] = this.props.Login.masterData.SelectedOrgSite.nsitecode;\r\n            inputData[\"departmentlablist\"] = departmentLab;\r\n            nextNode = \"Lab\";\r\n        }\r\n        else if (this.props.Login.organisation.selectedNode === \"Lab\") {\r\n            methodUrl = \"LabSection\";\r\n            let labSection = [];\r\n            this.state.selectedRecord[\"nsectioncode\"] &&\r\n                this.state.selectedRecord[\"nsectioncode\"].map(item => {\r\n                    return labSection.push({\r\n                        ndeptlabcode: this.state.selectedRecord.ndeptlabcode,\r\n                        nsectioncode: item.value\r\n                    })\r\n                })\r\n            inputData[\"nsitecode\"] = this.props.Login.masterData.SelectedOrgSite.nsitecode;\r\n            inputData[\"labsectionlist\"] = labSection;\r\n            nextNode = \"Section\";\r\n        }\r\n        else if (this.props.Login.organisation.selectedNode === \"Section\") {\r\n            methodUrl = \"SectionUsers\";\r\n            let sectionUsers = [];\r\n            this.state.selectedRecord[\"nusercode\"] &&\r\n                this.state.selectedRecord[\"nusercode\"].map(item => {\r\n                    return sectionUsers.push({\r\n                        nlabsectioncode: this.state.selectedRecord.nlabsectioncode,\r\n                        nusercode: item.value,\r\n                        nsitecode: this.props.Login.masterData.SelectedOrgSite.nsitecode\r\n                    })\r\n                })\r\n            inputData[\"nsitecode\"] = this.props.Login.masterData.SelectedOrgSite.nsitecode;\r\n            inputData[\"sectionuserslist\"] = sectionUsers;\r\n            nextNode = \"Section\";\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        inputData[\"completetreepath\"] = masterData.CompleteTreePath;\r\n        const inputParam = {\r\n            classUrl: \"organisation\",\r\n            methodUrl,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef,\r\n            nextNode\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n\r\n        let validateDelete = false;\r\n        if (deleteParam.methodUrl === \"SectionUsers\") {\r\n            deleteParam[\"inputData\"] = {\r\n                ...deleteParam[\"inputData\"],\r\n                //sectionusers:deleteParam.selectedRecord,\r\n                deleteid: deleteParam.selectedRecord.nsectionusercode\r\n            }\r\n            validateDelete = true;\r\n        }\r\n        else {\r\n            if (this.props.Login.organisation) {\r\n                if (this.props.Login.organisation.selectedNode !== \"Site\") {\r\n                    deleteParam[\"inputData\"] = {\r\n                        ...deleteParam[\"inputData\"],\r\n                        //sectionusers:deleteParam.selectedRecord,\r\n                        //deleteid:deleteParam.selectedRecord.nsectionusercode\r\n                    }\r\n                    validateDelete = true;\r\n                }\r\n                else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTDELETESITE\" }));\r\n                }\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTNODETODELETE\" }));\r\n            }\r\n        }\r\n        if (validateDelete) {\r\n            if (deleteParam.inputData.sectionusers &&\r\n                deleteParam.inputData.sectionusers.expanded !== undefined) {\r\n                delete deleteParam.inputData.sectionusers.expanded\r\n            }\r\n\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                displayName: \"IDS_ORGANISATION\",\r\n                methodUrl: deleteParam.methodUrl,\r\n                inputData: { ...deleteParam.inputData, completetreepath: this.props.Login.masterData.CompleteTreePath },\r\n                operation: deleteParam.operation, nextNode: deleteParam.nextNode\r\n            }\r\n            const deleteId = this.state.controlMap.has(\"Delete\") && this.state.controlMap.get(\"Delete\").ncontrolcode;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: \"Organisation\",\r\n                        operation: deleteParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, getOrganisationComboService,\r\n    getSectionUserRole, organisationService, updateStore, validateEsignCredential\r\n})(injectIntl(Organisation));\r\n\r\n"]},"metadata":{},"sourceType":"module"}