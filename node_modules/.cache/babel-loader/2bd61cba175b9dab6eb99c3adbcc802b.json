{"ast":null,"code":"import { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport rsapi from '../rsapi';\nimport { initRequest } from './LoginAction';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, rearrangeDateFormat, ageCalculate, formatInputDate } from '../components/CommonScript';\nimport { intl } from '../components/App';\nimport { transactionStatus } from '../components/Enumeration';\nimport { getLeftPosition } from '@progress/kendo-react-tooltip/dist/npm/utils';\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nconst {\n  checkTree,\n  loadTree,\n  uuid\n} = QbUtils;\nexport function getPatientDetail(patient, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"patient/getPatient\", {\n      spatientid: patient.spatientid,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          patientHistory: false,\n          patientReportHistory: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPatientComboService(inputParam) {\n  return function (dispatch) {\n    const genderService = rsapi.post(\"patient/getGender\", {\n      userinfo: inputParam.userInfo\n    });\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: inputParam.userInfo\n    });\n    const countryService = rsapi.post(\"patient/getCountry\", {\n      userinfo: inputParam.userInfo\n    });\n    const regionService = rsapi.post(\"patient/getRegion\", {\n      userinfo: inputParam.userInfo\n    });\n    let urlArray = [];\n\n    if (inputParam.operation === \"create\") {\n      urlArray = [genderService, UTCtimeZoneService, countryService, regionService];\n    } else {\n      const patientById = rsapi.post(\"patient/getActivePatientById\", {\n        [inputParam.primaryKeyName]: inputParam.masterData.SelectedPatient[inputParam.primaryKeyName],\n        \"userinfo\": inputParam.userInfo\n      });\n      const citySer = rsapi.post(\"/patient/getCity\", {\n        \"userinfo\": inputParam.userInfo,\n        \"ndistrictcode\": inputParam.masterData.SelectedPatient.ndistrictcode\n      });\n      const districtSer = rsapi.post(\"/patient/getDistrict\", {\n        \"userinfo\": inputParam.userInfo,\n        \"nregioncode\": inputParam.masterData.SelectedPatient.nregioncode\n      });\n      const citySertemp = rsapi.post(\"/patient/getCity\", {\n        \"userinfo\": inputParam.userInfo,\n        \"ndistrictcode\": inputParam.masterData.SelectedPatient.ndistrictcodetemp\n      });\n      const districtSertemp = rsapi.post(\"/patient/getDistrict\", {\n        \"userinfo\": inputParam.userInfo,\n        \"nregioncode\": inputParam.masterData.SelectedPatient.nregioncodetemp\n      });\n      urlArray = [genderService, UTCtimeZoneService, countryService, regionService, patientById, citySer, districtSer, citySertemp, districtSertemp];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let gender = [];\n      let city = [];\n      let country = [];\n      let region = [];\n      let regionTemp = [];\n      let districtTemp = [];\n      let district = [];\n      let cityTemp = [];\n      let districtList = [];\n      let cityList = [];\n      let cityListTemp = [];\n      let districtListTemp = [];\n      const genderMap = constructOptionList(response[0].data['genderList'] || [], \"ngendercode\", \"sgendername\", undefined, undefined, false);\n      const genderList = genderMap.get(\"OptionList\");\n      const countryMap = constructOptionList(response[2].data['countryList'] || [], \"ncountrycode\", \"scountryname\", undefined, undefined, false);\n      const countryList = countryMap.get(\"OptionList\");\n      const regionMap = constructOptionList(response[3].data['regionList'] || [], \"nregioncode\", \"sregionname\", undefined, undefined, false);\n      const regionList = regionMap.get(\"OptionList\");\n\n      if (inputParam.operation === \"update\") {\n        const cityserMap = constructOptionList(response[5].data['cityList'] || [], \"ncitycode\", \"scityname\", undefined, undefined, false);\n        cityList = cityserMap.get(\"OptionList\");\n        const distMap = constructOptionList(response[6].data['districtList'] || [], \"ndistrictcode\", \"sdistrictname\", undefined, undefined, false);\n        districtList = distMap.get(\"OptionList\");\n        const cityserTempMap = constructOptionList(response[7].data['cityList'] || [], \"ncitycode\", \"scityname\", undefined, undefined, false);\n        cityListTemp = cityserTempMap.get(\"OptionList\");\n        const distTempMap = constructOptionList(response[8].data['districtList'] || [], \"ndistrictcode\", \"sdistrictname\", undefined, undefined, false);\n        districtListTemp = distTempMap.get(\"OptionList\");\n      }\n\n      let selectedRecord = {};\n      const currentTime = rearrangeDateFormat(inputParam.userInfo, response[1].data);\n\n      if (inputParam.operation === \"update\") {\n        selectedRecord = response[4].data;\n        gender.push({\n          \"value\": response[4].data[\"ngendercode\"],\n          \"label\": response[4].data[\"sgendername\"]\n        });\n        city.push({\n          \"value\": response[4].data[\"ncitycode\"],\n          \"label\": response[4].data[\"scityname\"]\n        });\n        country.push({\n          \"value\": response[4].data[\"ncountrycode\"],\n          \"label\": response[4].data[\"scountryname\"]\n        });\n        region.push({\n          \"value\": response[4].data[\"nregioncode\"],\n          \"label\": response[4].data[\"sregionname\"]\n        });\n        regionTemp.push({\n          \"value\": response[4].data[\"nregioncodetemp\"],\n          \"label\": response[4].data[\"sregionnametemp\"]\n        });\n        districtTemp.push({\n          \"value\": response[4].data[\"ndistrictcodetemp\"],\n          \"label\": response[4].data[\"sdistrictnametemp\"]\n        });\n        district.push({\n          \"value\": response[4].data[\"ndistrictcode\"],\n          \"label\": response[4].data[\"sdistrictname\"]\n        });\n        cityTemp.push({\n          \"value\": response[4].data[\"ncitycodetemp\"],\n          \"label\": response[4].data[\"scitynametemp\"]\n        });\n        selectedRecord[\"ngendercode\"] = gender[0];\n        selectedRecord[\"ncitycode\"] = city[0];\n        selectedRecord[\"ncountrycode\"] = country[0];\n        selectedRecord[\"nregioncode\"] = region[0];\n        selectedRecord[\"nregioncodetemp\"] = regionTemp[0];\n        selectedRecord[\"ndistrictcodetemp\"] = districtTemp[0];\n        selectedRecord[\"ndistrictcode\"] = district[0];\n        selectedRecord[\"ncitycodetemp\"] = cityTemp[0];\n\n        if (selectedRecord[\"ddob\"] !== null) {\n          selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, selectedRecord[\"sdob\"]);\n        }\n      } else {\n        selectedRecord[\"ngendercode\"] = genderMap.get(\"DefaultValue\"); //ALPD-3267\n        //selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, response[1].data);\n\n        selectedRecord[\"ddob\"] = \"\";\n        selectedRecord[\"sage\"] = ageCalculate(selectedRecord[\"ddob\"]);\n        selectedRecord[\"nneedcurrentaddress\"] = transactionStatus.NO;\n        selectedRecord[\"today\"] = inputParam.userInfo;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          genderList,\n          cityListTemp,\n          districtListTemp,\n          districtList,\n          cityList,\n          countryList,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: inputParam.ncontrolcode,\n          loading: false,\n          currentTime,\n          regionList,\n          patientHistory: false,\n          patientReportHistory: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPatientReport(patient, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"patient/patientReportGenerate\", {\n      patient,\n      userinfo: userInfo,\n      ncontrolcode: ncontrolCode\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loadEsign: false,\n          openModal: false\n        }\n      });\n      document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n      document.getElementById(\"download_data\").click();\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPatientDetailsByFilterQuery(inputParam, masterData, SelectedPatientCaseType) {\n  return function (dispatch) {\n    let URL = [];\n    let filterData;\n    let filterData1;\n\n    if (inputParam.displayname === \"Filter\") {\n      filterData = rsapi.post(\"/patient/getFilterByDate\", {\n        \"userinfo\": inputParam.inputData.userinfo,\n        \"formdate\": inputParam.inputData.date.fromDate,\n        \"todate\": inputParam.inputData.date.toDate,\n        \"casetype\": inputParam.inputData.casetype\n      });\n    } else {\n      filterData = rsapi.post(\"/patient/filterByPatient\", {\n        \"filterquery\": inputParam.inputData.filterquery,\n        \"userinfo\": inputParam.inputData.userinfo\n      });\n\n      if (masterData.QueryName === \"Create New Query\") {\n        filterData1 = rsapi.post(\"/patient/createFilterQuery\", { ...inputParam.inputData.patientfilter,\n          userinfo: inputParam.inputData.userinfo\n        });\n      }\n    }\n\n    URL = [filterData, filterData1];\n    dispatch(initRequest(true));\n    Axios.all(URL).then(response => {\n      let slideResult = response[0].data.PatientList;\n      let selectedRecord = response[0].data.PatientList;\n      selectedRecord[\"fromdate\"] = rearrangeDateFormat(inputParam.inputData.userinfo, response[0].data.filterFromdate);\n      selectedRecord[\"ToDay\"] = rearrangeDateFormat(inputParam.inputData.userinfo, response[0].data.filterToDay);\n      masterData = { ...masterData,\n        SelectedPatientCaseType: SelectedPatientCaseType,\n        ...response[0].data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          skip: 0,\n          take: 20,\n          slideResult: false,\n          openModal: false,\n          openSolidAdvFilter: false,\n          selectedRecord,\n          patientHistory: false,\n          patientReportHistory: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getDistrictComboServices(methodParam) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/patient/getDistrict\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nregioncode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      let districtList;\n      const districtMap = constructOptionList(response[0].data['districtList'] || [], \"ndistrictcode\", \"sdistrictname\", undefined, undefined, false);\n      districtList = districtMap.get(\"OptionList\");\n      let districtListTemp;\n      const districtMapTemp = constructOptionList(response[0].data['districtList'] || [], \"ndistrictcode\", \"sdistrictname\", undefined, undefined, false);\n      districtListTemp = districtMapTemp.get(\"OptionList\");\n      const cityList = undefined;\n      const cityListTemp = undefined;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          [methodParam.inputData.optionlistname]: districtList,\n          [methodParam.inputData.optionlistname]: districtListTemp,\n          loading: false,\n          data: undefined,\n          dataState: undefined,\n          cityList,\n          cityListTemp\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getCityComboServices(methodParam) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/patient/getCity\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"ndistrictcode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      const cityMap = constructOptionList(response[0].data['cityList'] || [], \"ncitycode\", \"scityname\", undefined, undefined, false);\n      const cityList = cityMap.get(\"OptionList\");\n      const cityMapTemp = constructOptionList(response[0].data['cityList'] || [], \"ncitycode\", \"scityname\", undefined, undefined, false);\n      const cityListTemp = cityMapTemp.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          [methodParam.inputData.optionlistname]: cityList,\n          [methodParam.inputData.optionlistname]: cityListTemp,\n          loading: false,\n          data: undefined,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function filtercomboService(methodParam) {\n  return function (dispatch) {\n    let URL = [];\n    let URL1 = [];\n\n    if (methodParam.displayname === \"onSubmit\") {\n      URL = rsapi.post(\"/patient/createFilterQuery\", { ...methodParam.inputParam.inputData\n      });\n      URL1 = rsapi.post(\"/patient/filterByPatient\", {\n        \"filterquery\": methodParam.inputParam.inputData.patientfilter.filterquery,\n        \"userinfo\": methodParam.inputParam.inputData.userinfo\n      });\n    } else if (methodParam.displayname === \"ComboList\") {\n      URL = rsapi.post(\"/patient/getFilterQueryList\", {\n        \"userinfo\": methodParam.inputData.userinfo\n      });\n    } else {\n      URL = rsapi.post(\"/patient/getFilterQuery\", {\n        \"userinfo\": methodParam.inputData.userinfo,\n        \"npatientfiltercode\": methodParam.inputData.primarykey\n      });\n    }\n\n    dispatch(initRequest(true));\n    Axios.all([URL, URL1]).then(response => {\n      let filterquery;\n      let selectedRecord;\n      let QueryName;\n      let jsonTree;\n      let openSolidAdvFilter;\n      let openAlertModal;\n      let openModal;\n      let masterData = {};\n      let slideResult;\n      let patientFilerList;\n\n      if (methodParam.displayname === \"onSubmit\") {\n        //selectedRecord =response[1].data.PatientList;   \n        masterData = { ...methodParam.masterData,\n          ...response[1].data\n        };\n        openSolidAdvFilter = false;\n        openAlertModal = false;\n        openModal = false;\n        selectedRecord = {};\n      } else if (methodParam.displayname === \"ComboList\") {\n        const patcaseFiltertypeMap = constructOptionList(response[0].data.patientFilterType || [], \"npatientfiltercode\", \"spatientfiltername\", undefined, undefined, false);\n        patientFilerList = patcaseFiltertypeMap.get(\"OptionList\");\n        openSolidAdvFilter = true;\n        openModal = true;\n        selectedRecord = {};\n        masterData = { ...methodParam.masterData,\n          ...response[0].data,\n          patientFilerList: patientFilerList\n        };\n      } else {\n        masterData = { ...methodParam.masterData\n        };\n        selectedRecord = { ...methodParam.masterData.selectedRecord\n        };\n        filterquery = response[0].data.SelectedPatientFilterType.filterquery === null ? undefined : response[0].data.SelectedPatientFilterType.filterquery; //  QueryName = response[0].data.SelectedPatientFilterType.spatientfiltername;\n\n        QueryName = response[0].data.SelectedPatientFilterType.spatientfiltername !== \"Create New Query\" ? response[0].data.SelectedPatientFilterType.spatientfiltername : undefined;\n        const emptyInitValue = {\n          \"id\": uuid(),\n          \"type\": \"group\"\n        };\n        const queryFilter = JSON.parse(response[0].data.SelectedPatientFilterType.tree);\n        const initValue = queryFilter && Object.keys(queryFilter).length > 0 ? queryFilter : emptyInitValue;\n        jsonTree = checkTree(loadTree(initValue), methodParam.Patconfigs);\n        openSolidAdvFilter = true;\n        openModal = true;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          data: undefined,\n          masterData,\n          dataState: undefined,\n          tree: jsonTree,\n          filterquery,\n          QueryName,\n          openSolidAdvFilter,\n          openAlertModal,\n          selectedRecord,\n          openModal,\n          slideResult,\n          patientFilerList\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatusCombo(methodParam) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/patient/getFilterQueryList\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nfilterstatus\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      const patcaseFiltertypeMap = constructOptionList(response[0].data.patientFilterType || [], \"npatientfiltercode\", \"spatientfiltername\", undefined, undefined, false);\n      const patientFilerList = patcaseFiltertypeMap.get(\"OptionList\");\n      const openSolidAdvFilter = true;\n      const openModal = true;\n      const masterData = { ...methodParam.masterData,\n        ...response[0].data,\n        patientFilerList: patientFilerList\n      };\n      const filterquery = response[0].data.SelectedPatientFilterType.filterquery === null ? undefined : response[0].data.SelectedPatientFilterType.filterquery; // const QueryName = response[0].data.SelectedPatientFilterType.spatientfiltername;\n\n      const QueryName = response[0].data.SelectedPatientFilterType.spatientfiltername !== \"Create New Query\" ? response[0].data.SelectedPatientFilterType.spatientfiltername : undefined;\n      const emptyInitValue = {\n        \"id\": uuid(),\n        \"type\": \"group\"\n      };\n      const queryFilter = JSON.parse(response[0].data.SelectedPatientFilterType.tree);\n      const initValue = queryFilter && Object.keys(queryFilter).length > 0 ? queryFilter : emptyInitValue;\n      const jsonTree = checkTree(loadTree(initValue), methodParam.Patconfigs);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openSolidAdvFilter,\n          openModal,\n          tree: jsonTree,\n          filterquery,\n          QueryName,\n          loading: false,\n          data: undefined,\n          dataState: undefined,\n          masterData,\n          screenName: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPatientHistory(patient, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"patient/getPatientHistory\", {\n      spatientid: patient.spatientid,\n      userinfo: userInfo\n    }).then(response => {\n      let patienthist = [];\n      patienthist = response.data;\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          patienthist,\n          loading: false,\n          patientHistory: true,\n          openModal: true,\n          loadEsign: false,\n          openSolidAdvFilter: false,\n          patientReportHistory: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getpatientReportHistoryInfo(patient, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"patient/getPatientReportHistory\", {\n      spatientid: patient.spatientid,\n      userinfo: userInfo\n    }).then(response => {\n      let patientReports = [];\n      patientReports = response.data;\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          patientReports,\n          loading: false,\n          patientReportHistory: true,\n          openModal: true,\n          loadEsign: false,\n          openSolidAdvFilter: false,\n          patientHistory: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/actions/PatientAction.js"],"names":["toast","Axios","rsapi","initRequest","DEFAULT_RETURN","sortData","constructOptionList","rearrangeDateFormat","ageCalculate","formatInputDate","intl","transactionStatus","getLeftPosition","Utils","QbUtils","checkTree","loadTree","uuid","getPatientDetail","patient","userInfo","masterData","dispatch","post","spatientid","userinfo","then","response","data","type","payload","operation","modalName","undefined","loading","patientHistory","patientReportHistory","catch","error","status","message","warn","getPatientComboService","inputParam","genderService","UTCtimeZoneService","countryService","regionService","urlArray","patientById","primaryKeyName","SelectedPatient","citySer","ndistrictcode","districtSer","nregioncode","citySertemp","ndistrictcodetemp","districtSertemp","nregioncodetemp","all","gender","city","country","region","regionTemp","districtTemp","district","cityTemp","districtList","cityList","cityListTemp","districtListTemp","genderMap","genderList","get","countryMap","countryList","regionMap","regionList","cityserMap","distMap","cityserTempMap","distTempMap","selectedRecord","currentTime","push","NO","screenName","openModal","ncontrolCode","ncontrolcode","getPatientReport","loadEsign","document","getElementById","setAttribute","filepath","click","getPatientDetailsByFilterQuery","SelectedPatientCaseType","URL","filterData","filterData1","displayname","inputData","date","fromDate","toDate","casetype","filterquery","QueryName","patientfilter","slideResult","PatientList","filterFromdate","filterToDay","searchedData","skip","take","openSolidAdvFilter","formatMessage","id","getDistrictComboServices","methodParam","primarykey","districtMap","districtMapTemp","optionlistname","dataState","getCityComboServices","cityMap","cityMapTemp","filtercomboService","URL1","jsonTree","openAlertModal","patientFilerList","patcaseFiltertypeMap","patientFilterType","SelectedPatientFilterType","spatientfiltername","emptyInitValue","queryFilter","JSON","parse","tree","initValue","Object","keys","length","Patconfigs","getFilterStatusCombo","getPatientHistory","patienthist","getpatientReportHistoryInfo","patientReports"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport rsapi from '../rsapi';\r\nimport { initRequest } from './LoginAction';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData, constructOptionList, rearrangeDateFormat, ageCalculate, formatInputDate } from '../components/CommonScript';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from '../components/Enumeration';\r\nimport { getLeftPosition } from '@progress/kendo-react-tooltip/dist/npm/utils';\r\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\r\n\r\nconst { checkTree, loadTree, uuid } = QbUtils;\r\n\r\nexport function getPatientDetail(patient, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"patient/getPatient\", { spatientid: patient.spatientid, userinfo: userInfo })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, operation: null, modalName: undefined,\r\n                        loading: false,patientHistory:false,patientReportHistory:false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getPatientComboService(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        const genderService = rsapi.post(\"patient/getGender\", { userinfo: inputParam.userInfo });\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputParam.userInfo });\r\n        const countryService = rsapi.post(\"patient/getCountry\", { userinfo: inputParam.userInfo });\r\n        const regionService = rsapi.post(\"patient/getRegion\", { userinfo: inputParam.userInfo });\r\n\r\n        let urlArray = [];\r\n        if (inputParam.operation === \"create\") {\r\n            urlArray = [genderService, UTCtimeZoneService, countryService, regionService];\r\n        }\r\n        else {\r\n            const patientById = rsapi.post(\"patient/getActivePatientById\",\r\n                {\r\n                    [inputParam.primaryKeyName]: inputParam.masterData.SelectedPatient[inputParam.primaryKeyName],\r\n                    \"userinfo\": inputParam.userInfo\r\n                });\r\n            const citySer = rsapi.post(\"/patient/getCity\", { \"userinfo\": inputParam.userInfo, \"ndistrictcode\": inputParam.masterData.SelectedPatient.ndistrictcode });\r\n            const districtSer = rsapi.post(\"/patient/getDistrict\", { \"userinfo\": inputParam.userInfo, \"nregioncode\": inputParam.masterData.SelectedPatient.nregioncode })\r\n            const citySertemp = rsapi.post(\"/patient/getCity\", { \"userinfo\": inputParam.userInfo, \"ndistrictcode\": inputParam.masterData.SelectedPatient.ndistrictcodetemp });\r\n            const districtSertemp = rsapi.post(\"/patient/getDistrict\", { \"userinfo\": inputParam.userInfo, \"nregioncode\": inputParam.masterData.SelectedPatient.nregioncodetemp });\r\n            urlArray = [genderService, UTCtimeZoneService, countryService, regionService, patientById, citySer, districtSer, citySertemp, districtSertemp];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let gender = [];\r\n                let city = [];\r\n                let country = [];\r\n                let region = [];\r\n                let regionTemp = [];\r\n                let districtTemp = [];\r\n                let district = [];\r\n                let cityTemp = [];\r\n                let districtList = [];\r\n                let cityList = [];\r\n                let cityListTemp = [];\r\n                let districtListTemp = [];\r\n                const genderMap = constructOptionList(response[0].data['genderList'] || [], \"ngendercode\",\r\n                    \"sgendername\", undefined, undefined, false);\r\n                const genderList = genderMap.get(\"OptionList\");\r\n\r\n                const countryMap = constructOptionList(response[2].data['countryList'] || [], \"ncountrycode\",\r\n                    \"scountryname\", undefined, undefined, false);\r\n                const countryList = countryMap.get(\"OptionList\");\r\n\r\n                const regionMap = constructOptionList(response[3].data['regionList'] || [], \"nregioncode\",\r\n                    \"sregionname\", undefined, undefined, false);\r\n                const regionList = regionMap.get(\"OptionList\");\r\n                if (inputParam.operation === \"update\") {\r\n                    const cityserMap = constructOptionList(response[5].data['cityList'] || [], \"ncitycode\",\r\n                        \"scityname\", undefined, undefined, false);\r\n                    cityList = cityserMap.get(\"OptionList\");\r\n\r\n                    const distMap = constructOptionList(response[6].data['districtList'] || [], \"ndistrictcode\",\r\n                        \"sdistrictname\", undefined, undefined, false);\r\n                    districtList = distMap.get(\"OptionList\");\r\n\r\n                    const cityserTempMap = constructOptionList(response[7].data['cityList'] || [], \"ncitycode\",\r\n                        \"scityname\", undefined, undefined, false);\r\n                    cityListTemp = cityserTempMap.get(\"OptionList\");\r\n\r\n                    const distTempMap = constructOptionList(response[8].data['districtList'] || [], \"ndistrictcode\",\r\n                        \"sdistrictname\", undefined, undefined, false);\r\n                    districtListTemp = distTempMap.get(\"OptionList\");\r\n                }\r\n\r\n                let selectedRecord = {};\r\n                const currentTime = rearrangeDateFormat(inputParam.userInfo, response[1].data);\r\n\r\n                if (inputParam.operation === \"update\") {\r\n                    selectedRecord = response[4].data;\r\n\r\n                    gender.push({ \"value\": response[4].data[\"ngendercode\"], \"label\": response[4].data[\"sgendername\"] });\r\n                    city.push({ \"value\": response[4].data[\"ncitycode\"], \"label\": response[4].data[\"scityname\"] });\r\n                    country.push({ \"value\": response[4].data[\"ncountrycode\"], \"label\": response[4].data[\"scountryname\"] });\r\n                    region.push({ \"value\": response[4].data[\"nregioncode\"], \"label\": response[4].data[\"sregionname\"] });\r\n                    regionTemp.push({ \"value\": response[4].data[\"nregioncodetemp\"], \"label\": response[4].data[\"sregionnametemp\"] });\r\n                    districtTemp.push({ \"value\": response[4].data[\"ndistrictcodetemp\"], \"label\": response[4].data[\"sdistrictnametemp\"] });\r\n                    district.push({ \"value\": response[4].data[\"ndistrictcode\"], \"label\": response[4].data[\"sdistrictname\"] });\r\n                    cityTemp.push({ \"value\": response[4].data[\"ncitycodetemp\"], \"label\": response[4].data[\"scitynametemp\"] });\r\n                    selectedRecord[\"ngendercode\"] = gender[0];\r\n                    selectedRecord[\"ncitycode\"] = city[0];\r\n                    selectedRecord[\"ncountrycode\"] = country[0];\r\n                    selectedRecord[\"nregioncode\"] = region[0];\r\n                    selectedRecord[\"nregioncodetemp\"] = regionTemp[0];\r\n                    selectedRecord[\"ndistrictcodetemp\"] = districtTemp[0];\r\n                    selectedRecord[\"ndistrictcode\"] = district[0];\r\n                    selectedRecord[\"ncitycodetemp\"] = cityTemp[0];\r\n\r\n                    if (selectedRecord[\"ddob\"] !== null) {\r\n                        selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, selectedRecord[\"sdob\"]);\r\n                    }\r\n                }\r\n                else {\r\n\r\n                    selectedRecord[\"ngendercode\"] = genderMap.get(\"DefaultValue\");\r\n                    //ALPD-3267\r\n                    //selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, response[1].data);\r\n                    selectedRecord[\"ddob\"] = \"\";\r\n                    selectedRecord[\"sage\"] = ageCalculate(selectedRecord[\"ddob\"])\r\n                    selectedRecord[\"nneedcurrentaddress\"] = transactionStatus.NO;\r\n                    selectedRecord[\"today\"] = inputParam.userInfo;\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        genderList,\r\n                        cityListTemp,\r\n                        districtListTemp,\r\n                        districtList,\r\n                        cityList,\r\n                        countryList,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        selectedRecord,\r\n                        openModal: true,\r\n                        ncontrolCode: inputParam.ncontrolcode,\r\n                        loading: false,\r\n                        currentTime,\r\n                        regionList,\r\n                        patientHistory:false,patientReportHistory:false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function getPatientReport(patient, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"patient/patientReportGenerate\", {\r\n            patient, userinfo: userInfo,\r\n            ncontrolcode: ncontrolCode\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false,\r\n                        loadEsign: false, openModal: false\r\n                    }\r\n                })\r\n                document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                document.getElementById(\"download_data\").click();\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPatientDetailsByFilterQuery(inputParam, masterData, SelectedPatientCaseType) {\r\n    return function (dispatch) {\r\n        let URL = [];\r\n        let filterData;\r\n        let filterData1;\r\n        if (inputParam.displayname === \"Filter\") {\r\n            filterData = rsapi.post(\"/patient/getFilterByDate\", {\r\n                \"userinfo\": inputParam.inputData.userinfo,\r\n                \"formdate\": inputParam.inputData.date.fromDate, \"todate\": inputParam.inputData.date.toDate, \"casetype\": inputParam.inputData.casetype\r\n            })\r\n        }\r\n        else {\r\n            filterData = rsapi.post(\"/patient/filterByPatient\", {\r\n                \"filterquery\": inputParam.inputData.filterquery\r\n                , \"userinfo\": inputParam.inputData.userinfo\r\n            })\r\n            if (masterData.QueryName === \"Create New Query\") {\r\n                filterData1 = rsapi.post(\"/patient/createFilterQuery\", { ...inputParam.inputData.patientfilter, userinfo: inputParam.inputData.userinfo })\r\n            }\r\n        }\r\n\r\n        URL = [filterData, filterData1];\r\n        dispatch(initRequest(true));\r\n        Axios.all(URL)\r\n            .then(response => {\r\n                let slideResult = response[0].data.PatientList;\r\n                let selectedRecord = response[0].data.PatientList;\r\n                selectedRecord[\"fromdate\"] = rearrangeDateFormat(inputParam.inputData.userinfo, response[0].data.filterFromdate);\r\n                selectedRecord[\"ToDay\"] = rearrangeDateFormat(inputParam.inputData.userinfo, response[0].data.filterToDay);\r\n                masterData = {\r\n                    ...masterData, SelectedPatientCaseType: SelectedPatientCaseType,\r\n                    ...response[0].data, searchedData: undefined\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false, skip: 0, take: 20, slideResult: false,\r\n                        openModal: false, openSolidAdvFilter: false, selectedRecord,patientHistory:false,patientReportHistory:false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\nexport function getDistrictComboServices(methodParam) {\r\n    return function (dispatch) {\r\n        let URL = [];\r\n        URL = rsapi.post(\"/patient/getDistrict\", { \"userinfo\": methodParam.inputData.userinfo, \"nregioncode\": methodParam.inputData.primarykey })\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL])\r\n            .then(response => {\r\n                let districtList;\r\n                const districtMap = constructOptionList(response[0].data['districtList'] || [], \"ndistrictcode\",\r\n                    \"sdistrictname\", undefined, undefined, false);\r\n\r\n                districtList = districtMap.get(\"OptionList\");\r\n                let districtListTemp;\r\n                const districtMapTemp = constructOptionList(response[0].data['districtList'] || [], \"ndistrictcode\",\r\n                    \"sdistrictname\", undefined, undefined, false);\r\n\r\n                districtListTemp = districtMapTemp.get(\"OptionList\");\r\n\r\n                const cityList = undefined;\r\n                const cityListTemp = undefined;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        [methodParam.inputData.optionlistname]: districtList, [methodParam.inputData.optionlistname]: districtListTemp,\r\n                        loading: false, data: undefined, dataState: undefined, cityList, cityListTemp\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getCityComboServices(methodParam) {\r\n    return function (dispatch) {\r\n        let URL = [];\r\n        URL = rsapi.post(\"/patient/getCity\", { \"userinfo\": methodParam.inputData.userinfo, \"ndistrictcode\": methodParam.inputData.primarykey })\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL])\r\n            .then(response => {\r\n                const cityMap = constructOptionList(response[0].data['cityList'] || [], \"ncitycode\",\r\n                    \"scityname\", undefined, undefined, false);\r\n\r\n                const cityList = cityMap.get(\"OptionList\");\r\n                const cityMapTemp = constructOptionList(response[0].data['cityList'] || [], \"ncitycode\",\r\n                    \"scityname\", undefined, undefined, false);\r\n\r\n                const cityListTemp = cityMapTemp.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                        { [methodParam.inputData.optionlistname]: cityList, [methodParam.inputData.optionlistname]: cityListTemp, loading: false, data: undefined, dataState: undefined }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function filtercomboService(methodParam) {\r\n    return function (dispatch) {\r\n        let URL = [];\r\n        let URL1 = [];\r\n        if (methodParam.displayname === \"onSubmit\") {\r\n            URL = rsapi.post(\"/patient/createFilterQuery\", { ...methodParam.inputParam.inputData })\r\n            URL1 = rsapi.post(\"/patient/filterByPatient\", {\r\n                \"filterquery\": methodParam.inputParam.inputData.patientfilter.filterquery\r\n                , \"userinfo\": methodParam.inputParam.inputData.userinfo\r\n            })\r\n        } else if (methodParam.displayname === \"ComboList\") {\r\n            URL = rsapi.post(\"/patient/getFilterQueryList\", { \"userinfo\": methodParam.inputData.userinfo })\r\n\r\n        }\r\n        else {\r\n            URL = rsapi.post(\"/patient/getFilterQuery\", { \"userinfo\": methodParam.inputData.userinfo, \"npatientfiltercode\": methodParam.inputData.primarykey })\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL, URL1])\r\n            .then(response => {\r\n                let filterquery;\r\n                let selectedRecord;\r\n                let QueryName;\r\n                let jsonTree;\r\n                let openSolidAdvFilter;\r\n                let openAlertModal;\r\n                let openModal;\r\n                let masterData = {};\r\n                let slideResult;\r\n                let patientFilerList;\r\n                if (methodParam.displayname === \"onSubmit\") {\r\n                    //selectedRecord =response[1].data.PatientList;   \r\n                    masterData = {\r\n                        ...methodParam.masterData,\r\n                        ...response[1].data,\r\n                    };\r\n                    openSolidAdvFilter = false\r\n                    openAlertModal = false\r\n                    openModal = false\r\n                    selectedRecord={};\r\n                } else if (methodParam.displayname === \"ComboList\") {\r\n                    const patcaseFiltertypeMap = constructOptionList(response[0].data.patientFilterType || [], \"npatientfiltercode\",\r\n                        \"spatientfiltername\", undefined, undefined, false);\r\n                    patientFilerList = patcaseFiltertypeMap.get(\"OptionList\");\r\n                    openSolidAdvFilter = true\r\n                    openModal = true\r\n                    selectedRecord = {};\r\n                    masterData = {\r\n                        ...methodParam.masterData,\r\n                        ...response[0].data, patientFilerList: patientFilerList\r\n                    };\r\n                }\r\n                else {\r\n                    masterData = {\r\n                        ...methodParam.masterData,\r\n                    };\r\n                    selectedRecord = {\r\n                        ...methodParam.masterData.selectedRecord\r\n                    }\r\n                    filterquery = response[0].data.SelectedPatientFilterType.filterquery === null ? undefined : response[0].data.SelectedPatientFilterType.filterquery;\r\n                  //  QueryName = response[0].data.SelectedPatientFilterType.spatientfiltername;\r\n                    QueryName = response[0].data.SelectedPatientFilterType.spatientfiltername !==\"Create New Query\" ? response[0].data.SelectedPatientFilterType.spatientfiltername:undefined;\r\n                    const emptyInitValue = { \"id\": uuid(), \"type\": \"group\" };\r\n                    const queryFilter = JSON.parse((response[0].data.SelectedPatientFilterType.tree))\r\n                    const initValue = queryFilter && Object.keys(queryFilter).length > 0 ? queryFilter : emptyInitValue;\r\n                    jsonTree = checkTree(loadTree(initValue), methodParam.Patconfigs);\r\n                    openSolidAdvFilter = true;\r\n                    openModal = true;\r\n                   \r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, data: undefined, masterData, dataState: undefined, tree: jsonTree, filterquery, QueryName,\r\n                        openSolidAdvFilter, openAlertModal,selectedRecord , openModal, slideResult, patientFilerList\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getFilterStatusCombo(methodParam) {\r\n    return function (dispatch) {\r\n        let URL = [];\r\n        URL = rsapi.post(\"/patient/getFilterQueryList\", { \"userinfo\": methodParam.inputData.userinfo, \"nfilterstatus\": methodParam.inputData.primarykey })\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL])\r\n            .then(response => {\r\n                const patcaseFiltertypeMap = constructOptionList(response[0].data.patientFilterType || [], \"npatientfiltercode\",\r\n                    \"spatientfiltername\", undefined, undefined, false);\r\n                const patientFilerList = patcaseFiltertypeMap.get(\"OptionList\");\r\n                const openSolidAdvFilter = true\r\n                const openModal = true\r\n                const masterData = {\r\n                    ...methodParam.masterData,\r\n                    ...response[0].data, patientFilerList: patientFilerList\r\n                };\r\n                const filterquery = response[0].data.SelectedPatientFilterType.filterquery === null ? undefined : response[0].data.SelectedPatientFilterType.filterquery;\r\n               // const QueryName = response[0].data.SelectedPatientFilterType.spatientfiltername;\r\n                const   QueryName = response[0].data.SelectedPatientFilterType.spatientfiltername !==\"Create New Query\" ? response[0].data.SelectedPatientFilterType.spatientfiltername:undefined;\r\n                const emptyInitValue = { \"id\": uuid(), \"type\": \"group\" };\r\n                const queryFilter = JSON.parse((response[0].data.SelectedPatientFilterType.tree))\r\n                const initValue = queryFilter && Object.keys(queryFilter).length > 0 ? queryFilter : emptyInitValue;\r\n                const jsonTree = checkTree(loadTree(initValue), methodParam.Patconfigs);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        openSolidAdvFilter, openModal, tree: jsonTree, filterquery, QueryName,\r\n                        loading: false, data: undefined, dataState: undefined, masterData,screenName:undefined\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getPatientHistory(patient, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"patient/getPatientHistory\", { spatientid: patient.spatientid, userinfo: userInfo })\r\n            .then(response => {\r\n                let patienthist=[];\r\n                patienthist=response.data;\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, operation: null, modalName: undefined,patienthist,\r\n                        loading: false,patientHistory:true ,openModal:true,loadEsign:false,openSolidAdvFilter:false,patientReportHistory:false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false} })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getpatientReportHistoryInfo(patient, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"patient/getPatientReportHistory\", { spatientid: patient.spatientid, userinfo: userInfo })\r\n            .then(response => {\r\n                let patientReports=[];\r\n                patientReports=response.data;\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, operation: null, modalName: undefined,patientReports,\r\n                        loading: false,patientReportHistory:true ,openModal:true,loadEsign:false,openSolidAdvFilter:false,patientHistory:false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false} })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}