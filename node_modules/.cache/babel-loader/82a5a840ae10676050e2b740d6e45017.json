{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\components\\\\searchbarcomponent\\\\SearchBar.jsx\";\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Form, InputGroup, ListGroup, Media } from 'react-bootstrap';\nimport './SearchBar.css'; //import { ClientList, SearchAdd, MediaHeader, MediaSubHeader, MediaLabel, SearchIcon } from '../App.styles';\n\nimport { SearchIcon, MediaHeader, MediaSubHeader } from '../App.styles';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { ListMasterWrapper } from '../list-master/list-master.styles';\nimport FormIconForDropDown from '../../pages/home/FormIconForDropDown';\n\nconst SearchBar = props => {\n  const {\n    options,\n    onInputChange,\n    onInputChange1,\n    optionDisplayMember,\n    onClickButton\n  } = props;\n  const ulRef = useRef();\n  const inputRef = props.inputRef; // const searchValue = props.searchValue;\n\n  const [focus, setFocus] = useState(false);\n  useEffect(() => {\n    inputRef.current.focus();\n    inputRef.current.value = props.searchText; // inputRef.current.addEventListener('keydown', (event) => { \n    //   onInputChange(event);\n    //   //console.log(event)\n    // });\n\n    inputRef.current.addEventListener('keydown', event => {\n      if (event.key === 'Escape') {\n        onInputChange1(event);\n      }\n    });\n    inputRef.current.addEventListener('keypress', event => {\n      event.stopPropagation();\n\n      if (event.key !== '' && ulRef.current) {\n        ulRef.current.style.display = 'flex';\n      }\n\n      onInputChange(event); //console.log(event)\n    });\n    inputRef.current.addEventListener('click', event => {\n      event.stopPropagation();\n\n      if (event.target.value !== '' && ulRef.current) {\n        ulRef.current.style.display = 'flex';\n        onInputChange(event, inputRef);\n      }\n    });\n    document.addEventListener('click', event => {\n      if (ulRef !== undefined && ulRef.current) {\n        ulRef.current.style.display = 'none';\n      }\n    });\n  }, []);\n\n  const onClick = (inputRef, option) => {\n    inputRef.current.value = \"\";\n    onClickButton(option);\n  };\n\n  const onFocusInput = () => {\n    setFocus(true);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-bar-dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    className: `list-group-search ${focus ? 'searchMinFocus' : 'searchMin'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    id: \"search-bar\",\n    type: \"text\",\n    className: \"form-control\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SEARCHFROMS\"\n    }) //\"Search Forms\"\n    ,\n    ref: inputRef,\n    onChange: onInputChange // onFocus={(e)=>{onFocusInput(e)}}\n    // onBlur={(e)=>{setFocus(false)}}\n    ,\n    autoComplete: \"off\",\n    required: false //value={searchValue}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  })), props.pathname && props.pathname !== '/home' && /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"results\",\n    className: `list-group ${options.length > 0 ? 'border-bottom' : \"border-bottom-0\"}`,\n    ref: ulRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ListMasterWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ListGroup, {\n    as: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, options && options.map((option, index) => {\n    return /*#__PURE__*/React.createElement(ListGroup.Item, {\n      className: `list-bgcolor`,\n      onClick: e => {\n        onClick(inputRef, option);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Media, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormIconForDropDown, {\n      nformcode: option['nformcode'],\n      index: index,\n      option: option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(Media.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(MediaHeader, {\n      \"data-tip\": option[optionDisplayMember],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }\n    }, option[optionDisplayMember])))) // <button\n    //   type=\"button\"\n    //   key={index}\n    //   onClick={(e) => {\n    //     onClick(inputRef, option);\n    //   }}\n    //   className=\"list-group-item list-group-item-action\"\n    // >\n    //   {option[optionDisplayMember]}\n    // </button>\n    ;\n  }))))));\n};\n\nexport default SearchBar;","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/components/searchbarcomponent/SearchBar.jsx"],"names":["faSearch","FontAwesomeIcon","React","useState","useRef","useEffect","Form","InputGroup","ListGroup","Media","SearchIcon","MediaHeader","MediaSubHeader","PerfectScrollbar","ListMasterWrapper","FormIconForDropDown","SearchBar","props","options","onInputChange","onInputChange1","optionDisplayMember","onClickButton","ulRef","inputRef","focus","setFocus","current","value","searchText","addEventListener","event","key","stopPropagation","style","display","target","document","undefined","onClick","option","onFocusInput","intl","formatMessage","id","pathname","length","map","index","e"],"mappings":"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","sourcesContent":["import { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { Form, InputGroup, ListGroup, Media } from 'react-bootstrap';\r\nimport './SearchBar.css'\r\n//import { ClientList, SearchAdd, MediaHeader, MediaSubHeader, MediaLabel, SearchIcon } from '../App.styles';\r\n\r\nimport { SearchIcon, MediaHeader, MediaSubHeader } from '../App.styles';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { ListMasterWrapper } from '../list-master/list-master.styles';\r\nimport FormIconForDropDown from '../../pages/home/FormIconForDropDown';\r\n\r\n\r\nconst SearchBar = (props) => {\r\n  const { options, onInputChange,onInputChange1, optionDisplayMember, onClickButton } = props;\r\n  const ulRef = useRef();\r\n  const inputRef = props.inputRef;\r\n // const searchValue = props.searchValue;\r\n  const [focus, setFocus] = useState(false)\r\n  useEffect(() => {    \r\n    inputRef.current.focus();\r\n    inputRef.current.value = props.searchText;\r\n    // inputRef.current.addEventListener('keydown', (event) => { \r\n    //   onInputChange(event);\r\n    //   //console.log(event)\r\n    // });\r\n    inputRef.current.addEventListener('keydown', (event) => {    \r\n        if(event.key === 'Escape'){            \r\n          onInputChange1(event);\r\n        }\r\n    });\r\n    inputRef.current.addEventListener('keypress', (event) => {      \r\n      event.stopPropagation();\r\n      if (event.key !== '' && ulRef.current) {\r\n        ulRef.current.style.display = 'flex';\r\n      }\r\n      onInputChange(event);\r\n      //console.log(event)\r\n    });\r\n    inputRef.current.addEventListener('click', (event) => {\r\n      event.stopPropagation();\r\n      if (event.target.value !== '' && ulRef.current) {\r\n        ulRef.current.style.display = 'flex';\r\n        onInputChange(event, inputRef);\r\n      }\r\n    });\r\n    document.addEventListener('click', (event) => {\r\n      if (ulRef !== undefined && ulRef.current) {\r\n        ulRef.current.style.display = 'none';\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const onClick = (inputRef, option) => {\r\n    inputRef.current.value = \"\";\r\n    onClickButton(option)\r\n  }\r\n\r\n\r\n  const onFocusInput = () => {\r\n    setFocus(true)\r\n  }\r\n\r\n  return (\r\n    <div className=\"search-bar-dropdown\">\r\n      <InputGroup className={`list-group-search ${focus ? 'searchMinFocus' : 'searchMin'}`}>\r\n\r\n\r\n        <Form.Control\r\n          id=\"search-bar\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder={props.intl.formatMessage({ id: \"IDS_SEARCHFROMS\" })}\r\n          //\"Search Forms\"\r\n          ref={inputRef}\r\n          onChange={onInputChange}\r\n          // onFocus={(e)=>{onFocusInput(e)}}\r\n          // onBlur={(e)=>{setFocus(false)}}\r\n          autoComplete=\"off\"\r\n          required={false}\r\n          //value={searchValue}\r\n        />\r\n      </InputGroup>\r\n      {props.pathname && props.pathname !== '/home' &&\r\n        <ul id=\"results\" className= {`list-group ${options.length > 0 ? 'border-bottom' : \"border-bottom-0\"}`} ref={ulRef}>\r\n        <PerfectScrollbar>\r\n          <ListMasterWrapper >\r\n            <ListGroup as=\"ul\"  >\r\n              {options && options.map((option, index) => {\r\n                return (\r\n                  <ListGroup.Item className={`list-bgcolor`} onClick={(e) => {\r\n                    onClick(inputRef, option);\r\n                  }}>\r\n                    <Media>\r\n                      <FormIconForDropDown nformcode={option['nformcode']} index={index} option={option} />\r\n\r\n                      <Media.Body>\r\n                        <MediaHeader data-tip={option[optionDisplayMember]}\r\n                        >{option[optionDisplayMember]}</MediaHeader>\r\n                      </Media.Body>\r\n                    </Media>\r\n                  </ListGroup.Item>\r\n                  // <button\r\n                  //   type=\"button\"\r\n                  //   key={index}\r\n                  //   onClick={(e) => {\r\n                  //     onClick(inputRef, option);\r\n                  //   }}\r\n                  //   className=\"list-group-item list-group-item-action\"\r\n                  // >\r\n                  //   {option[optionDisplayMember]}\r\n                  // </button>\r\n                );\r\n              })}\r\n              {/* </ul> */}\r\n            </ListGroup>\r\n          </ListMasterWrapper>\r\n          \r\n          </PerfectScrollbar>\r\n        </ul>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}