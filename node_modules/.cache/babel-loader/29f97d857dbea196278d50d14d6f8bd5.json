{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\components\\\\flow-renderer\\\\flow-renderer.component.jsx\";\nimport React, { useCallback, useState } from 'react';\nimport ReactFlow, { addEdge, //MiniMap,\nControls, Background, useNodesState, useEdgesState } from 'react-flow-renderer'; //import { nodes as initialNodes, edges as initialEdges } from './initial-element';\n\nimport './react-flow-style.css';\n\nconst onInit = reactFlowInstance => console.log('flow loaded:', reactFlowInstance); //const getNodeId = () => `randomnode_${+new Date()}`;\n\n\nconst FlowRenderer = props => {\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.initialEdges); // const [rfInstance, setRfInstance] = useState(null);\n  // const { setViewport } = useReactFlow();\n\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]); // const onSave = useCallback(() => {\n  //   if (rfInstance) {\n  //     const flow = rfInstance.toObject();\n  //     localStorage.setItem(flowKey, JSON.stringify(flow));\n  //   }\n  // }, [rfInstance]);\n  // const onRestore = useCallback(() => {\n  //   const restoreFlow = async () => {\n  //     const flow = JSON.parse(localStorage.getItem(flowKey));\n  //     if (flow) {\n  //       const { x = 0, y = 0, zoom = 1 } = flow.viewport;\n  //       setNodes(flow.nodes || []);\n  //       setEdges(flow.edges || []);\n  //       setViewport({ x, y, zoom });\n  //     }\n  //   };\n  //   restoreFlow();\n  // }, [setNodes, setViewport]);\n  // const onAdd = useCallback(() => {\n  //     const newNode = {\n  //     id: getNodeId(),\n  //     data: { label: 'Added node' },\n  //     position: {\n  //         x: Math.random() * window.innerWidth - 100,\n  //         y: Math.random() * window.innerHeight,\n  //     },\n  //     };\n  //     setNodes((nds) => nds.concat(newNode));\n  // }, [setNodes]);\n\n  const [zoomOnScroll, setZoomOnScroll] = useState(false);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 600\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ReactFlow, {\n    nodes: nodes,\n    edges: edges //onNodesChange={onNodesChange}\n    //onEdgesChange={onEdgesChange}\n    ,\n    zoomOnScroll: zoomOnScroll,\n    onConnect: onConnect,\n    onInit: onInit,\n    fitView: true,\n    attributionPosition: \"top-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Controls, {\n    showInteractive: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Background, {\n    color: \"#aaa\",\n    gap: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  })));\n};\n\nexport default FlowRenderer; // import * as React from 'react'\n// import { FlowChartWithState, Content, Page, Sidebar, SidebarItem } from 'react-work-flow'\n// // Initializes an empty panel\n// const chartSimple = {\n//     offset: {\n//         x: 0,\n//         y: 0\n//     },\n//     nodes: {\n//     },\n//     links: {\n//     },\n//     selected: {},\n//     hovered: {}\n// }\n// const RegistrationType = () => {\n//     let workFlowValue = {}\n//     let getWorkFlowChartValue = (newWorkFlowValue) => {\n//         workFlowValue = newWorkFlowValue\n//         console.log(\"work-flow :\", workFlowValue)\n//     }\n//     return (\n//         <Page>\n//             <Content>\n//                 <FlowChartWithState initialValue={chartSimple} getWorkFlowChartValue={getWorkFlowChartValue} />\n//             </Content>\n//             <Sidebar>\n//                 <div style={{ margin: \"50px\", padding: \"10px\", background: \"rgba(0,0,0,0.05)\" }}>\n//                     Drag and drop these items onto the canvas.\n//                 </div>\n//                 <SidebarItem type=\"start\" />\n//                 <SidebarItem type=\"process-queue\" />\n//                 <SidebarItem type=\"process-point\" />\n//                 <SidebarItem type=\"process-queue\" />\n//                 <SidebarItem type=\"process-point\" />\n//                 <SidebarItem type=\"end\" />\n//             </Sidebar>\n//         </Page>\n//     )\n// }\n// export default RegistrationType;","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/components/flow-renderer/flow-renderer.component.jsx"],"names":["React","useCallback","useState","ReactFlow","addEdge","Controls","Background","useNodesState","useEdgesState","onInit","reactFlowInstance","console","log","FlowRenderer","props","nodes","setNodes","onNodesChange","initialNodes","edges","setEdges","onEdgesChange","initialEdges","onConnect","params","eds","zoomOnScroll","setZoomOnScroll","height"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,OAAOC,SAAP,IACEC,OADF,EAEE;AACAC,QAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,aANF,QAOO,qBAPP,C,CASA;;AAEA,OAAO,wBAAP;;AAEA,MAAMC,MAAM,GAAIC,iBAAD,IAAuBC,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,iBAA5B,CAAtC,C,CAEA;;;AAEA,MAAMG,YAAY,GAAIC,KAAD,IAAW;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,IAAmCV,aAAa,CAACO,KAAK,CAACI,YAAP,CAAtD;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,IAAmCb,aAAa,CAACM,KAAK,CAACQ,YAAP,CAAtD,CAFwB,CAIxB;AACA;;AAEA,QAAMC,SAAS,GAAGtB,WAAW,CAAEuB,MAAD,IAAYJ,QAAQ,CAAEK,GAAD,IAASrB,OAAO,CAACoB,MAAD,EAASC,GAAT,CAAjB,CAArB,EAAsD,CAACL,QAAD,CAAtD,CAA7B,CAPwB,CAQxB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCzB,QAAQ,CAAC,KAAD,CAAhD;AAEA,sBACI;AAAK,IAAA,KAAK,EAAE;AAAE0B,MAAAA,MAAM,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAEb,KADX;AAEI,IAAA,KAAK,EAAEI,KAFX,CAGI;AACA;AAJJ;AAKI,IAAA,YAAY,EAAEO,YALlB;AAMI,IAAA,SAAS,EAAEH,SANf;AAOI,IAAA,MAAM,EAAEd,MAPZ;AAQI,IAAA,OAAO,MARX;AASI,IAAA,mBAAmB,EAAC,WATxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA2BI,oBAAC,QAAD;AAAU,IAAA,eAAe,EAAE,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BJ,eA4BI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,MAAlB;AAAyB,IAAA,GAAG,EAAE,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5BJ,CADJ,CADJ;AAwCP,CApFD;;AAsFA,eAAeI,YAAf,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, {useCallback, useState } from 'react';\r\n\r\nimport ReactFlow, {\r\n  addEdge,\r\n  //MiniMap,\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n} from 'react-flow-renderer';\r\n\r\n//import { nodes as initialNodes, edges as initialEdges } from './initial-element';\r\n\r\nimport './react-flow-style.css';\r\n\r\nconst onInit = (reactFlowInstance) => console.log('flow loaded:', reactFlowInstance);\r\n\r\n//const getNodeId = () => `randomnode_${+new Date()}`;\r\n\r\nconst FlowRenderer = (props) => {\r\n        const [nodes, setNodes, onNodesChange] = useNodesState(props.initialNodes);\r\n        const [edges, setEdges, onEdgesChange] = useEdgesState(props.initialEdges);\r\n \r\n        // const [rfInstance, setRfInstance] = useState(null);\r\n        // const { setViewport } = useReactFlow();\r\n  \r\n        const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\r\n        // const onSave = useCallback(() => {\r\n        //   if (rfInstance) {\r\n        //     const flow = rfInstance.toObject();\r\n        //     localStorage.setItem(flowKey, JSON.stringify(flow));\r\n        //   }\r\n        // }, [rfInstance]);\r\n  \r\n        // const onRestore = useCallback(() => {\r\n        //   const restoreFlow = async () => {\r\n        //     const flow = JSON.parse(localStorage.getItem(flowKey));\r\n    \r\n        //     if (flow) {\r\n        //       const { x = 0, y = 0, zoom = 1 } = flow.viewport;\r\n        //       setNodes(flow.nodes || []);\r\n        //       setEdges(flow.edges || []);\r\n        //       setViewport({ x, y, zoom });\r\n        //     }\r\n        //   };\r\n  \r\n        //   restoreFlow();\r\n        // }, [setNodes, setViewport]);\r\n\r\n        // const onAdd = useCallback(() => {\r\n        //     const newNode = {\r\n        //     id: getNodeId(),\r\n        //     data: { label: 'Added node' },\r\n        //     position: {\r\n        //         x: Math.random() * window.innerWidth - 100,\r\n        //         y: Math.random() * window.innerHeight,\r\n        //     },\r\n        //     };\r\n        //     setNodes((nds) => nds.concat(newNode));\r\n        // }, [setNodes]);\r\n\r\n        const [zoomOnScroll, setZoomOnScroll] = useState(false);\r\n\r\n        return (\r\n            <div style={{ height: 600 }}>\r\n                <ReactFlow\r\n                    nodes={nodes}\r\n                    edges={edges}\r\n                    //onNodesChange={onNodesChange}\r\n                    //onEdgesChange={onEdgesChange}\r\n                    zoomOnScroll={zoomOnScroll}\r\n                    onConnect={onConnect}\r\n                    onInit={onInit}\r\n                    fitView\r\n                    attributionPosition=\"top-right\"\r\n                    \r\n                >\r\n                    {/* <MiniMap\r\n                        nodeStrokeColor={(n) => {\r\n                        if (n.style?.background) return n.style.background;\r\n                        if (n.type === 'input') return '#0041d0';\r\n                        if (n.type === 'output') return '#ff0072';\r\n                        if (n.type === 'default') return '#1a192b';\r\n                        return '#eee';\r\n                        }}\r\n                        nodeColor={(n) => {\r\n                        if (n.style?.background) return n.style.background;\r\n\r\n                        return '#fff';\r\n                        }}\r\n                        nodeBorderRadius={2}\r\n                    /> */}\r\n                    <Controls showInteractive={false}/>\r\n                    <Background color=\"#aaa\" gap={16} />\r\n                    \r\n                    {/* <div className=\"save__controls\">\r\n                        <button onClick={onSave}>save</button>\r\n                        <button onClick={onRestore}>restore</button>\r\n                        <button onClick={onAdd}>Add Node</button>\r\n                    </div> */}\r\n                </ReactFlow>\r\n            </div>\r\n        );\r\n};\r\n\r\nexport default FlowRenderer;\r\n\r\n// import * as React from 'react'\r\n// import { FlowChartWithState, Content, Page, Sidebar, SidebarItem } from 'react-work-flow'\r\n\r\n// // Initializes an empty panel\r\n// const chartSimple = {\r\n//     offset: {\r\n//         x: 0,\r\n//         y: 0\r\n//     },\r\n//     nodes: {\r\n//     },\r\n//     links: {\r\n//     },\r\n//     selected: {},\r\n//     hovered: {}\r\n// }\r\n\r\n// const RegistrationType = () => {\r\n//     let workFlowValue = {}\r\n\r\n//     let getWorkFlowChartValue = (newWorkFlowValue) => {\r\n//         workFlowValue = newWorkFlowValue\r\n//         console.log(\"work-flow :\", workFlowValue)\r\n//     }\r\n//     return (\r\n\r\n//         <Page>\r\n//             <Content>\r\n//                 <FlowChartWithState initialValue={chartSimple} getWorkFlowChartValue={getWorkFlowChartValue} />\r\n//             </Content>\r\n//             <Sidebar>\r\n//                 <div style={{ margin: \"50px\", padding: \"10px\", background: \"rgba(0,0,0,0.05)\" }}>\r\n//                     Drag and drop these items onto the canvas.\r\n//                 </div>\r\n//                 <SidebarItem type=\"start\" />\r\n//                 <SidebarItem type=\"process-queue\" />\r\n//                 <SidebarItem type=\"process-point\" />\r\n//                 <SidebarItem type=\"process-queue\" />\r\n//                 <SidebarItem type=\"process-point\" />\r\n//                 <SidebarItem type=\"end\" />\r\n//             </Sidebar>\r\n//         </Page>\r\n//     )\r\n// }\r\n\r\n// export default RegistrationType;"]},"metadata":{},"sourceType":"module"}