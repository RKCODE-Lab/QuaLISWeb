{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleStorageMapping.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight, faSearch, faTimes, faArrowDown, faHandPointLeft, faArrowUp, faClone, faPuzzlePiece, faCalculator, faFileImport } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { constructOptionList, getControlMap, onSaveMandatoryValidation, searchData, searchJsonData, showEsign, sortData } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel, SearchIcon } from '../../components/App.styles'; //import SortableTree from 'react-sortable-tree'; \n\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { BasicConfig, BasicFuncs, Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion, crudSampleStorageLocation } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { MediaLabel, ProductList } from '../product/product.styled'; // import ReactTooltip from 'react-tooltip';\n\nimport { uuid } from \"uuidv4\";\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\nimport { getItemPath, mapTree, removeItems } from \"@progress/kendo-react-treelist\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddTreeview from './AddTreeview';\nimport AddTreeProperties from './AddTreeProperties';\nimport { Splitter } from '@progress/kendo-react-layout';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport SplitterLayout from 'react-splitter-layout';\nimport StorageCategoryFilter from './StorageCategoryFilter';\nimport { transactionStatus } from '../../components/Enumeration';\nimport Esign from '../audittrail/Esign';\nimport { TreeViewDragAnalyzer, moveTreeViewItem } from '@progress/kendo-react-treeview';\nimport ModalShow from '../../components/ModalShow';\nimport rsapi from '../../rsapi';\nimport AddSampleStorageMapping from './AddSampleStorageMapping';\nimport Axios from 'axios';\nimport StorageMappingFilter from './StorageMappingFilter';\nimport Preloader from '../../components/preloader/preloader.component';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\nimport { process } from '@progress/kendo-data-query'; //import Spreadsheet from '../../components/Spreadsheet/Spreadsheet';\n\nimport MatrixComponent from '../../components/MatrixComponent';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder'; //   import { Upload } from '@progress/kendo-react-upload';\n//   import * as XLSX from 'xlsx';\n\nclass SampleStorageMapping extends Component {\n  constructor(props) {\n    super(props);\n    this.dragOverCnt = 0;\n    this.isDragDrop = false;\n    this.SEPARATOR = '_';\n    this.uniqueIDArr = [];\n    this.countforTree = 0;\n    this.pointedItem = undefined;\n    this.getitemPath = {};\n\n    this.openModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          selectedRecord: {},\n          loadTreeProperties: false,\n          treeData: [{\n            text: \"root\",\n            expanded: true,\n            editable: true,\n            root: true,\n            id: uuid()\n          }],\n          operation: \"create\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         openModal: false, selectedRecord: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedId = this.props.Login.selectedId;\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedId = null;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedId = null;\n        selectedRecord = {};\n      } // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { openModal, loadEsign, selectedRecord, selectedId }\n      // }\n      // this.props.updateStore(updateInfo);\n\n\n      this.setState({\n        selectedRecord,\n        openModal: false,\n        isInitialRender: true\n      });\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.loadTreeProperties === true) {\n        this.onSaveProperties(saveType, formRef);\n      } else if (this.state.openSpreadSheet) {\n        this.CRUDSampleStorageMapping({ ...this.state.editedsheetData,\n          nsamplestoragemappingcode: this.state.isMultiSampleAdd ? Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\") : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\n          nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n          sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\n          sheetUpdate: true,\n          userinfo: this.props.Login.userInfo,\n          isMultiSampleAdd: this.state.isMultiSampleAdd\n        }, 'update');\n      } else {\n        this.onSaveSampleStorageMapping(saveType, formRef);\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      this.onFilterSubmit();\n    };\n\n    this.onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let isOnlyDraft = false;\n\n      if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\n        isOnlyDraft = true;\n      }\n\n      this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\n    };\n\n    this.openStorageMapping = addId => {\n      this.addSampleStorageMapping({\n        userInfo: this.props.Login.userInfo,\n        addId\n      });\n    };\n\n    this.deletesamplestoragemapping = param => {\n      this.CRUDSampleStorageMapping({\n        'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\n        userinfo: this.props.Login.userInfo\n      }, 'delete');\n    };\n\n    this.addMultipleSample = param => {\n      this.setState({\n        //sheetData: JSON.parse(response[0].data.sheetData),\n        openModal: true,\n        isMultiSampleAdd: true,\n        openSpreadSheet: true,\n        //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n        loading: false\n      });\n    };\n\n    this.importdata = () => {\n      this.setState({\n        openModal: true,\n        importdata: true\n      });\n    };\n\n    this.addSample = (param, nflag) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragemapping/getsamplestoragemappingSheetData\", {\n        isMultiSampleAdd: nflag === 2 ? true : false,\n        nsamplestoragemappingcode: nflag === 2 ? this.state.masterData.sampleStoragemapping.map(item => item.nsamplestoragemappingcode).join(\",\") : param.nsamplestoragemappingcode.toString()\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        if (nflag === 2) {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            openModal: true,\n            isMultiSampleAdd: true,\n            openSpreadSheet: true,\n            //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n            loading: false\n          });\n        } else {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            openModal: true,\n            isMultiSampleAdd: false,\n            openSpreadSheet: true,\n            editedsheetData: param,\n            Rows: param.nrow,\n            columns: param.ncolumn,\n            loading: false\n          });\n        }\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let selectedRecordFilter = this.state.selectedRecordFilter || {};\n\n      if (fieldName === 'nstoragecategorycode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'ncontainertypecode') {\n        return this.getContainerStructure({\n          userinfo: this.props.Login.userInfo,\n          ncontainertypecode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'ncontainerstructurecode') {\n        selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\n        selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\n      } else if (fieldName === 'nsamplestoragelocationcode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\n          nsamplestoragelocationcode: comboData.value\n        }, fieldName, comboData);\n      }\n\n      if (fieldName === 'nsamplestorageversioncode') {\n        selectedRecordFilter[fieldName] = comboData;\n        this.setState({\n          selectedRecordFilter\n        });\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord,\n          selectedRecordFilter\n        });\n      }\n    };\n\n    this.onSaveSampleStorageMapping = saveType => {\n      let selectedRecord = this.state.selectedRecord;\n      let containerpathCodeArray = [];\n\n      if (this.state.operation === 'create') {\n        containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\n      }\n\n      const inputParam = selectedRecord['nneedposition'] === true ? {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ? parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\n        ncontainertypecode: selectedRecord['ncontainertypecode'].value ? selectedRecord['ncontainertypecode'].value : -1,\n        nproductcode: selectedRecord['nproductcode'] ? selectedRecord['nproductcode'].value : -1,\n        nprojecttypecode: selectedRecord['nprojecttypecode'] ? selectedRecord['nprojecttypecode'].value : -1,\n        nunitcode: selectedRecord['nunitcode'] ? selectedRecord['nunitcode'].value : -1,\n        ssamplestoragemappingname: \"-\",\n        ndirectionmastercode: selectedRecord['ndirectionmastercode'] ? selectedRecord['ndirectionmastercode'].value : -1,\n        nsamplestoragecontainerpathcode: this.state.operation === 'create' ? JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\n        containerpathsize: containerpathCodeArray.length,\n        nneedposition: 3,\n        sboxid: '',\n        ncontainerstructurecode: selectedRecord['ncontainerstructurecode'].value ? selectedRecord['ncontainerstructurecode'].value : -1,\n        nquantity: selectedRecord['nquantity'] ? parseFloat(selectedRecord['nquantity']) : 0,\n        nnoofcontainer: selectedRecord['nnoofcontainer'] ? parseInt(selectedRecord['nnoofcontainer']) : 1,\n        //nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\n        userinfo: this.props.Login.userInfo,\n        nrow: selectedRecord['nrow'],\n        ncolumn: selectedRecord['ncolumn']\n      } : {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ? parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\n        ncontainertypecode: -1,\n        nproductcode: selectedRecord['nproductcode'] ? selectedRecord['nproductcode'].value : -1,\n        nprojecttypecode: selectedRecord['nprojecttypecode'] ? selectedRecord['nprojecttypecode'].value : -1,\n        nunitcode: selectedRecord['nunitcode'] ? selectedRecord['nunitcode'].value : -1,\n        ndirectionmastercode: 1,\n        ssamplestoragemappingname: \"-\",\n        nsamplestoragecontainerpathcode: this.state.operation === 'create' ? JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\n        containerpathsize: containerpathCodeArray.length,\n        nneedposition: 4,\n        sboxid: '',\n        ncontainerstructurecode: -1,\n        nquantity: selectedRecord['nquantity'] ? parseInt(selectedRecord['nquantity']) : 0,\n        nnoofcontainer: selectedRecord['nnoofcontainer'] ? parseInt(selectedRecord['nnoofcontainer']) : 1,\n        // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\n        userinfo: this.props.Login.userInfo,\n        nrow: selectedRecord['nrow'],\n        ncolumn: selectedRecord['ncolumn']\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.CRUDSampleStorageMapping(inputParam, this.state.operation);\n      }\n    };\n\n    this.childDataChange = selectedRecord => {\n      this.setState({\n        selectedRecord: { ...selectedRecord\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.childSheetDataChange = sheetData => {\n      this.setState({\n        // selectedRecord: {\n        //     ...this.state.selectedRecord,\n        //     sheetData: {\n        //         ...this.state.selectedRecord.sheetData,\n        //         ...sheetData\n        //     }\n        // },\n        sheetData: { ...sheetData\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.getActiveSampleStorageMappingById = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragemapping/getActiveSampleStorageMappingById\", {\n        nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\n        userinfo: userinfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          } //,\n          // selectedRecord: {\n          //     ...this.state.selectedRecord\n          //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\n          // }\n          ,\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.filterColumnData = (filterValue, filterParam) => {\n      let masterData = filterParam.masterData;\n      let primaryKeyValue = 0;\n      let searchedData = undefined;\n\n      if (filterValue === \"\") {\n        if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n          primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\n        }\n      } else {\n        if (filterParam.isjsondata) {\n          searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        } else {\n          searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        }\n\n        if (searchedData.length > 0) {\n          primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\n        }\n      }\n\n      if (primaryKeyValue !== 0) {\n        this.setState({\n          loading: true\n        });\n        return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n          [filterParam.primaryKeyField]: primaryKeyValue\n        }).then(response => {\n          masterData[\"searchedData\"] = searchedData;\n          masterData = { ...masterData,\n            ...response.data\n          };\n\n          if (filterParam.sortField) {\n            sortData(masterData, filterParam.sortOrder, filterParam.sortField);\n          } else {\n            sortData(masterData);\n          }\n\n          this.setState({\n            masterData,\n            loading: false,\n            skip: 0,\n            take: 10,\n            selectedId: null\n          });\n        }).catch(error => {\n          this.setState({\n            loading: false\n          });\n\n          if (error.response.status === 500) {\n            toast.error(this.props.intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      } else {\n        masterData[filterParam.selectedObject] = undefined;\n        masterData[\"searchedData\"] = [];\n        Object.keys(masterData).forEach(item => {\n          if (item !== filterParam.inputListName && item !== filterParam.selectedObject && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n        });\n        this.setState({\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        });\n      }\n    };\n\n    this.CRUDSampleStorageMapping = (inputParam, operation, isImport) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragemapping/\" + operation + \"SampleStorageMapping\", inputParam);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          isInitialRender: true,\n          selectedRecord: {},\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          openModal: false,\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n      this.setState({\n        loading: true\n      });\n      let inputParamData = {\n        nstoragecategorycode: this.state.selectedRecordFilter && this.state.selectedRecordFilter[\"nstoragecategorycode\"] && this.state.selectedRecordFilter[\"nstoragecategorycode\"].value ? this.state.selectedRecordFilter[\"nstoragecategorycode\"].value : 0,\n        // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\n        // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragemapping/getsamplestoragemapping\", inputParamData);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let object = {\n          selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\n          // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\n\n        };\n        let filterData = this.generateBreadCrumData(object);\n        this.setState({\n          filterData,\n          masterData: { ...this.state.masterData,\n            ...response[0].data,\n            searchedData: undefined //   sampleStoragemapping: response[0].data['sampleStoragemapping'],\n\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onSampleMappingSaveClick = () => {\n      const mandatoryFields = this.state.openSpreadSheet ? [] : this.state.selectedRecord[\"nneedposition\"] === undefined || this.state.selectedRecord[\"nneedposition\"] === false ? [{\n        \"idsName\": \"IDS_SAMPLESTORAGEPATH\",\n        \"dataField\": \"nsamplestoragecontainerpathcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"nproductcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      } // },\n      // {\n      //     \"idsName\": \"IDS_AVAILABLEQUANTITY\",\n      //     \"dataField\": \"nquantity\", \"mandatoryLabel\":\n      //         \"IDS_ENTER\", \"controlType\": \"selectbox\"\n      // }\n      ] : [{\n        \"idsName\": \"IDS_SAMPLESTORAGEPATH\",\n        \"dataField\": \"nsamplestoragecontainerpathcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"nproductcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERTYPE\",\n        \"dataField\": \"ncontainertypecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n        \"dataField\": \"ncontainerstructurecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_DIRECTION\",\n        \"dataField\": \"ndirectionmastercode\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      } // },\n      // {\n      //     \"idsName\": \"IDS_AVAILABLEQUANTITY\",\n      //     \"dataField\": \"nquantity\", \"mandatoryLabel\":\n      //         \"IDS_ENTER\", \"controlType\": \"selectbox\"\n      // }\n      ];\n      onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields, this.onSaveClick);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataStateChange: event.dataState\n      });\n    };\n\n    this.approveSampleStorageMapping = event => {\n      if (this.state.masterData.sampleStorageLocation.length > 0) {\n        let inputParamData = {};\n        this.setState({\n          loading: true\n        });\n        inputParamData = {\n          nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n          userinfo: this.props.Login.userInfo\n        };\n        let urlArray = [];\n        const url1 = rsapi.post(\"samplestoragemapping/approveSampleStorageMapping\", inputParamData);\n        urlArray = [url1];\n        Axios.all(urlArray).then(response => {\n          this.setState({\n            masterData: { ...this.state.masterData,\n              ...response[0].data\n            },\n            loading: false\n          });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n\n          this.setState({\n            loading: false\n          });\n        });\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLESTORAGELOCATION\"\n        }));\n      }\n    };\n\n    this.fetchRecord = data => {\n      this.setState({\n        loading: true\n      });\n      let selectedRecord = this.state.selectedRecord;\n      let inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragemapping/addSampleStorageMapping\", inputParamData);\n      const url2 = rsapi.post(\"product/getProduct\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      const url3 = rsapi.post(\"samplestoragemapping/getEditSampleStorageMapping\", {\n        'nsamplestoragemappingcode': data.nsamplestoragemappingcode,\n        'userinfo': this.props.Login.userInfo\n      });\n      const getprojecttype = rsapi.post(\"/projecttype/getProjectType\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      const getUnit = rsapi.post(\"/unit/getUnit\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      urlArray = [url1, url2, url3, getprojecttype, getUnit];\n      Axios.all(urlArray).then(response => {\n        const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n        const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n        let containerStructure = response[0].data['containerStructure'];\n        const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n        const containerTypeList = containerTypeMap.get(\"OptionList\");\n        const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n        const directionmasterList = directionmasterMap.get(\"OptionList\");\n        const containerstructureMap = constructOptionList(response[2].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n        const containerstructureList = containerstructureMap.get(\"OptionList\");\n        const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n        const productList = productMap.get(\"OptionList\");\n        const editedObject = response[2].data.editsampleStorageMapping;\n        storageMappingMapList.unshift({\n          label: editedObject.scontainerpath,\n          value: editedObject.nsamplestoragecontainerpathcode\n        });\n        const projectTypeMap = constructOptionList(response[3].data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, true);\n        const projectTypeMapList = projectTypeMap.get(\"OptionList\");\n        const unitMap = constructOptionList(response[4].data || [], \"nunitcode\", \"sunitname\", undefined, undefined, true);\n        const unitMapList = unitMap.get(\"OptionList\");\n        selectedRecord = {\n          ndirectionmastercode: {\n            label: editedObject.sdirection,\n            value: editedObject.ndirectionmastercode\n          },\n          nsamplestoragecontainerpathcode: {\n            label: editedObject.scontainerpath,\n            value: editedObject.nsamplestoragecontainerpathcode\n          },\n          nproductcode: {\n            label: editedObject.sproductname,\n            value: editedObject.nproductcode\n          },\n          nprojecttypecode: {\n            label: editedObject.sprojecttypename,\n            value: editedObject.nprojecttypecode\n          },\n          nunitcode: {\n            label: editedObject.sunitname,\n            value: editedObject.nunitcode\n          },\n          ncontainertypecode: {\n            label: editedObject.scontainertype,\n            value: editedObject.ncontainertypecode\n          },\n          ncontainerstructurecode: {\n            label: editedObject.scontainerstructurename,\n            value: editedObject.ncontainerstructurecode\n          },\n          nneedposition: editedObject.nneedposition === 3 ? true : false,\n          directionmasterOptions: directionmasterList,\n          nquantity: editedObject.nquantity,\n          nnoofcontainer: editedObject.nnoofcontainer,\n          nrow: editedObject.nrow,\n          ncolumn: editedObject.ncolumn,\n          nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\n        };\n        this.setState({\n          openSpreadSheet: false,\n          openModal: true,\n          selectedRecord: { ...selectedRecord,\n            projectOptions: projectTypeMapList,\n            unitOptions: unitMapList,\n            storageMappingMapOptions: storageMappingMapList,\n            productOptions: productList,\n            containerTypeOptions: containerTypeList,\n            containerStructureOptions: containerstructureList,\n            isInitialRender: true\n          },\n          operation: 'update',\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handlePageChangeFilter = event => {\n      this.setState({\n        kendoSkip: event.skip,\n        kendoTake: event.take\n      });\n    };\n\n    this.onChange = (immutableTree, config) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[\"tree\"] = immutableTree;\n      selectedRecord[\"config\"] = config;\n      selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\n      this.setState({\n        tree: immutableTree,\n        config: config,\n        selectedRecord: selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.state = {\n      sheetData: {},\n      selectedRecordFilter: {},\n      treeData: [{\n        title: 'Chicken',\n        children: [{\n          title: 'Egg'\n        }]\n      }],\n      toggleAction: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      fields: {\n        \"ssamplestoragelocationname\": {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_STORAGESTRUCTURENAME\"\n          }),\n          \"type\": \"text\",\n          \"valueSources\": [\"value\", \"func\"],\n          \"mainWidgetProps\": {\n            \"valueLabel\": \"Name\",\n            \"valuePlaceholder\": this.props.intl.formatMessage({\n              id: \"IDS_STORAGESTRUCTURENAME\"\n            })\n          }\n        },\n        \"scontainerpath\": {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_SAMPLESTORAGEPATH\"\n          }),\n          \"type\": \"text\",\n          \"valueSources\": [\"value\", \"func\"],\n          \"mainWidgetProps\": {\n            \"valueLabel\": \"Name\",\n            \"valuePlaceholder\": this.props.intl.formatMessage({\n              id: \"IDS_SAMPLESTORAGEPATH\"\n            })\n          }\n        }\n      },\n      treeData: [{\n        //  text: \"root\",\n        text: this.props.intl.formatMessage({\n          id: \"IDS_ROOT\"\n        }),\n        expanded: true,\n        editable: true,\n        root: true,\n        id: uuid()\n      }],\n      panes: [{\n        size: '50%',\n        scrollable: false\n      }],\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      selectedItem: undefined,\n      loading: false\n    };\n    this.searchRef = React.createRef();\n    this.dragClue = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let {\n      filterData,\n      storageCategoryOptions,\n      selectedRecord,\n      controlMap,\n      userRoleControlRights,\n      storageLocationOptions,\n      sampleStorageVersionOptions,\n      masterData,\n      selectedRecordFilter\n    } = this.state;\n    let bool = false;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      bool = true;\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n    }\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      bool = true;\n      const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", undefined, undefined, undefined);\n      storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedStorageCategory) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nstoragecategorycode: storageCategoryOptions.filter(item => item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      bool = true;\n      const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageLocation) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestoragelocationcode: storageLocationOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\n      bool = true;\n      const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageVersion) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestorageversioncode: sampleStorageVersionOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      masterData = this.props.Login.masterData;\n      filterData = this.generateBreadCrumData(this.props.Login.masterData);\n    }\n\n    if (this.state.masterData !== previousState.masterData) {\n      bool = true;\n      filterData = this.generateBreadCrumData(this.state.masterData);\n    }\n\n    if (bool) {\n      this.setState({\n        storageCategoryOptions,\n        filterData,\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        masterData,\n        selectedRecordFilter\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  generateBreadCrumData(obj) {\n    const breadCrumbData = [];\n\n    if (this.state.masterData && this.state.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": obj.selectedStorageCategoryName && obj.selectedStorageCategoryName !== null ? obj.selectedStorageCategoryName : \"NA\"\n      } // ,\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\n      //     \"value\": obj.selectedSampleStorageLocation &&\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\n      // },\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\n      //     \"value\": obj.selectedSampleStorageVersion &&\n      //         obj.selectedSampleStorageVersion.nversionno !== null ?\n      //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\n      // }\n      );\n    }\n\n    return breadCrumbData;\n  }\n\n  getSampleStorageLocation(inputData, fieldName, comboData) {\n    let selectedRecordFilter = this.state.selectedRecordFilter || {};\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n\n    if (fieldName === 'nsamplestoragelocationcode') {\n      inputParamData = {\n        nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\n        nsamplestoragelocationcode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    } else {\n      inputParamData = {\n        nstoragecategorycode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    }\n\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragemapping/getsamplestoragemapping\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        storageLocationOptions,\n        sampleStorageVersionOptions\n      } = this.state;\n      let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n      let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n      selectedRecordFilter = { ...selectedRecordFilter,\n        nsamplestoragelocationcode: storageLocationOptions.length > 0 ? storageLocationOptions[0] : [],\n        nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ? sampleStorageVersionOptions[0] : []\n      };\n      this.setState({\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        selectedRecordFilter: { ...selectedRecordFilter,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  addSampleStorageMapping() {\n    if (this.state.masterData.searchedData !== undefined ? this.state.masterData.searchedData.length > 0 ? true : false : this.state.masterData.sampleStorageLocation.length > 0) {\n      this.setState({\n        loading: true\n      });\n      let selectedRecord = this.state.selectedRecord;\n      let inputParamData = {\n        // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n        userinfo: this.props.Login.userInfo,\n        operation: \"create\"\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragemapping/addSampleStorageMapping\", inputParamData);\n      const url2 = rsapi.post(\"product/getProduct\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      const url3 = rsapi.post(\"/projecttype/getProjectType\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      const url4 = rsapi.post(\"/unit/getUnit\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      urlArray = [url1, url2, url3, url4];\n      Axios.all(urlArray).then(response => {\n        const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n        const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n        let containerStructure = response[0].data['containerStructure'];\n        const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n        const containerTypeList = containerTypeMap.get(\"OptionList\");\n        const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n        const directionmasterList = directionmasterMap.get(\"OptionList\");\n        const containerstructureMap = constructOptionList(response[0].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n        const containerstructureList = containerstructureMap.get(\"OptionList\");\n        const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n        const productList = productMap.get(\"OptionList\");\n        const projectTypeMap = constructOptionList(response[2].data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, true);\n        const projectTypeMapList = projectTypeMap.get(\"OptionList\");\n        const unitMap = constructOptionList(response[3].data || [], \"nunitcode\", \"sunitname\", undefined, undefined, true);\n        const unitMapList = unitMap.get(\"OptionList\"); //To Load selected Data from Sample storage Location\n\n        unitMapList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nunitcode\"] ? selectedRecord[\"nunitcode\"] = {\n          \"label\": item.label,\n          \"value\": item.value,\n          \"item\": item.item\n        } : \"\");\n        projectTypeMapList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nprojecttypecode\"] ? selectedRecord[\"nprojecttypecode\"] = {\n          \"label\": item.label,\n          \"value\": item.value,\n          \"item\": item.item\n        } : \"\");\n        productList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nproductcode\"] ? selectedRecord[\"nproductcode\"] = {\n          \"label\": item.label,\n          \"value\": item.value,\n          \"item\": item.item\n        } : \"\");\n        containerTypeList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ncontainertypecode\"] ? selectedRecord[\"ncontainertypecode\"] = {\n          \"label\": item.label,\n          \"value\": item.value,\n          \"item\": item.item\n        } : \"\");\n        containerstructureList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ncontainerstructurecode\"] ? selectedRecord[\"ncontainerstructurecode\"] = {\n          \"label\": item.label,\n          \"value\": item.value,\n          \"item\": item.item\n        } : \"\");\n        directionmasterList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ndirectionmastercode\"] ? selectedRecord[\"ndirectionmastercode\"] = {\n          \"label\": item.label,\n          \"value\": item.value,\n          \"item\": item.item\n        } : \"\");\n        selectedRecord = { ...selectedRecord,\n          nneedposition: true,\n          nrow: response[0].data[\"selectedSampleStorageVersion\"].nrow,\n          ncolumn: response[0].data[\"selectedSampleStorageVersion\"].ncolumn,\n          nquantity: response[0].data[\"selectedSampleStorageVersion\"].nquantity,\n          nnoofcontainer: response[0].data[\"selectedSampleStorageVersion\"].nnoofcontainer,\n          containerTypeOptions: containerTypeList,\n          containerStructureOptions: containerstructureList,\n          directionmasterOptions: directionmasterList\n        };\n        this.setState({\n          openModal: true,\n          storageMappingMapOptions: storageMappingMapList,\n          selectedRecord: { ...selectedRecord,\n            nproductcode: {\n              label: response[0].data.samplestoragelocation.sproductname,\n              value: response[0].data.samplestoragelocation.nproductcode\n            },\n            nprojecttypecode: {\n              label: response[0].data.samplestoragelocation.sprojecttypename,\n              value: response[0].data.samplestoragelocation.nprojecttypecode\n            },\n            storageMappingMapOptions: storageMappingMapList,\n            productOptions: productList,\n            projectOptions: projectTypeMapList,\n            unitOptions: unitMapList,\n            containerTypeOptions: containerTypeList,\n            directionmasterOptions: directionmasterList,\n            // ncontainertypecode: containerTypeList[0],\n            // containerStructureOptions: containerstructureList,\n            // ncontainerstructurecode: containerstructureList[0],\n            // nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\n            // ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\n            isInitialRender: true\n          },\n          openSpreadSheet: false,\n          operation: 'create',\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_SELECTSAMPLESTORAGELOCATION\"\n      }));\n    }\n  }\n\n  getContainerStructure(inputData, fieldName, comboData) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    inputParamData = {\n      ncontainertypecode: comboData.value,\n      userinfo: inputData.userinfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragemapping/getContainerStructure\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        containerStructureOptions,\n        selectedRecord\n      } = this.state;\n      let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, undefined);\n      containerStructureOptions = containerStructureList.get(\"OptionList\");\n      selectedRecord = { ...selectedRecord,\n        nrow: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.nrow : 1,\n        ncolumn: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.ncolumn : 1,\n        ncontainerstructurecode: containerStructureOptions.length > 0 ? containerStructureOptions[0] : [],\n        containerStructureOptions: containerStructureOptions.length > 0 ? [...containerStructureOptions] : []\n      };\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getDynamicFilterExecuteData(inputParam) {\n    this.setState({\n      loading: true\n    });\n    let selectedRecord = this.state.selectedRecord || {};\n    let obj = {\n      // ...inputParam.component, \n      label: 'sampleStorageLocation',\n      valuemember: 'nsamplestoragelocationcode',\n      filterquery: selectedRecord.filterquery,\n      source: 'sampleStorageLocation',\n      userinfo: this.props.Login.userInfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"/samplestoragemapping/getdynamicfilterexecutedata\", obj);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      console.log(response);\n      let masterData = this.state.masterData;\n      masterData = { ...masterData,\n        ...response[0].data\n      };\n      this.setState({\n        masterData: { ...masterData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      this.setState({\n        loading: false\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data.rtn);\n      }\n    });\n  }\n\n  //handleAdd = (e) => {\n  //     let file = e.newState[0].getRawFile();\n  //     let selectedRecord = this.state.selectedRecord;\n  //     selectedRecord['nsamplestoragecontainerpathcode'] = []\n  //     /* Boilerplate to set up FileReader */\n  //     const reader = new FileReader();\n  //     const rABS = !!reader.readAsBinaryString;\n  //     let data = []\n  //     reader.onload = (e) => {\n  //         /* Parse data */\n  //         const bstr = e.target.result;\n  //         const wb = XLSX.read(bstr, {\n  //             type: rABS ? 'binary' : 'array',\n  //             bookVBA: true,\n  //         });\n  //         /* Get first worksheet */\n  //         const wsname = wb.SheetNames[0];\n  //         const ws = wb.Sheets[wsname];\n  //         /* Convert array of arrays */\n  //         data = XLSX.utils.sheet_to_json(ws);\n  //         console.log(data);\n  //         /* Update state */\n  //         // this.setState({\n  //         //     data,\n  //         // });\n  //         console.log('xlsx data :', this.state.storageMappingMapOptions)\n  //         data.map((x, index) => {\n  //             let clientcontainerpath = 'root > ' + x.fz_code + ' > ' + x.sf_code\n  //                 + ' > ' + x.rk_code\n  //                 + ' > ' + x.tr_code\n  //                 + ' > ' + x.bx_code\n  //             console.log('clientcontainerpath:', clientcontainerpath)\n  //             this.state.storageMappingMapOptions.map((item, index) => {\n  //                 if (item.label === clientcontainerpath) {\n  //                     let i = -1\n  //                     if (selectedRecord['nsamplestoragecontainerpathcode'].length > 0) {\n  //                         i = selectedRecord['nsamplestoragecontainerpathcode']\n  //                             .findIndex(k => k.label === clientcontainerpath)\n  //                     }\n  //                     x['nsamplestoragecontainerpathcode'] = this.state.storageMappingMapOptions[index].value\n  //                     if (i === -1) {\n  //                         selectedRecord['nsamplestoragecontainerpathcode'].push(this.state.storageMappingMapOptions[index]);\n  //                     }\n  //                 }\n  //             });\n  //         });\n  //         let containerpathCodeArray = [];\n  //         containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\n  //         const inputParam = {\n  //             nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n  //             nsamplestoragemappingcode: 0,\n  //             ncontainertypecode: 1,\n  //             nproductcode: 9,\n  //             nprojecttypecode: 2,\n  //             ndirectionmastercode: 1,\n  //             nsamplestoragecontainerpathcode: JSON.stringify(containerpathCodeArray),\n  //             containerpathsize: containerpathCodeArray.length,\n  //             nneedposition: 3,\n  //             ncontainerstructurecode: 1,\n  //             nquantity: 100,\n  //             sboxid: '-',\n  //             //nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\n  //             userinfo: this.props.Login.userInfo,\n  //             clientData: JSON.stringify(data),\n  //             isImport: true\n  //         }\n  //         this.CRUDSampleStorageMapping(inputParam, 'create', true);\n  //         console.log('selectedRecord:', selectedRecord['nsamplestoragecontainerpathcode'])\n  //     };\n  //     if (rABS) {\n  //         reader.readAsBinaryString(file);\n  //     } else {\n  //         reader.readAsArrayBuffer(file);\n  //     }\n  // };\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.openModal && nextState.isInitialRender === false && nextState.selectedRecord !== this.state.selectedRecord) {\n      return false;\n    } else if (this.state.openModal && nextState.isInitialRender === false && nextState.sheetData !== this.state.sheetData) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"AddSampleStorageMapping\") && this.state.controlMap.get(\"AddSampleStorageMapping\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditsampleStorageMapping\") && this.state.controlMap.get(\"EditsampleStorageMapping\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeletesampleStorageMapping\") && this.state.controlMap.get(\"DeletesampleStorageMapping\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApprovesampleStorageMapping\") && this.state.controlMap.get(\"ApprovesampleStorageMapping\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"sampleStorageLocation\",\n      selectedObject: \"selectedSampleStorageLocation\",\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      fetchUrl: \"samplestoragemapping/getActiveSampleStorageMappingById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"ssamplestoragelocationname\"]\n    };\n    const breadCrumbData = this.state.filterData || [];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Preloader, {\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1450,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1451,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1453,\n        columnNumber: 25\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1455,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      secondaryInitialSize: 25,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1456,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      paneHeight: this.state.parentHeight,\n      needMultiSelect: false,\n      masterList: this.state.masterData && this.state.masterData.searchedData || this.state.masterData && this.state.masterData.sampleStorageLocation || [],\n      selectedMaster: [this.state.masterData && this.state.masterData.selectedSampleStorageLocation],\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      getMasterDetail: selectedItem => this.getActiveSampleStorageMappingById(selectedItem, this.props.Login.userInfo),\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"ssamplestoragelocationname\",\n      selectedListName: \"selectedSampleStorageLocation\",\n      objectName: \"LocationMaster\",\n      listName: \"IDS_STORAGESTRUCTURE\",\n      filterColumnData: this.filterColumnData,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      needFilter: true,\n      hidePaging: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1494,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.reloadData(),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1501,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1504,\n          columnNumber: 45\n        }\n      }))),\n      filterComponent: [{\n        \"IDS_TESTFILTER\": /*#__PURE__*/React.createElement(StorageMappingFilter, {\n          storageCategoryOptions: this.state.storageCategoryOptions || [],\n          nfilterStorageCategory: this.state.nfilterStorageCategory || {},\n          storageLocationOptions: this.state.storageLocationOptions || [],\n          storageLocationValue: this.state.storageLocationValue || [],\n          sampleStorageVersionOptions: this.state.sampleStorageVersionOptions || [],\n          storageVersionValue: this.state.storageVersionValue || [],\n          onComboChange: this.onComboChange,\n          selectedRecordFilter: this.state.selectedRecordFilter,\n          selectedRecord: this.state.selectedRecord,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1511,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1460,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1530,\n        columnNumber: 37\n      }\n    }, this.state.masterData && this.state.masterData.selectedSampleStorageLocation && this.state.masterData.selectedSampleStorageLocation.ssamplestoragelocationname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1534,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1535,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1536,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"action-icons-wrap mr-2 pl-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1537,\n        columnNumber: 49\n      }\n    }, this.state.masterData && this.state.masterData.selectedSampleStorageLocation ? this.state.masterData.selectedSampleStorageLocation.nmappingtranscode === transactionStatus.DRAFT ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined  outline-secondary btn-sm mr-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1542,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DRAFT\",\n      defaultMessage: \"Draft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1543,\n        columnNumber: 61\n      }\n    })) : /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined outline-success btn-sm mr-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1546,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_APPROVED\",\n      defaultMessage: \"Approved\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1547,\n        columnNumber: 61\n      }\n    })) : \"\")), this.state.masterData && this.state.masterData.sampleStoragemapping && /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      onClick: () => this.approveSampleStorageMapping(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1570,\n        columnNumber: 59\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1579,\n        columnNumber: 45\n      }\n    })))), /*#__PURE__*/React.createElement(DataGrid, {\n      isRefreshRequired: false // fetchRecord={this.fetchRecord}\n      // editParam={{ 'primaryKeyField': 'nsamplestoragemappingcode' }}\n      // handleClickDelete={this.deletesamplestoragemapping}\n      ,\n      methodUrl: 'SampleStorageMapping',\n      isAddRequired: this.state.masterData && this.state.masterData.sampleStoragemapping ? true : false,\n      primaryKeyField: 'nsamplestoragemappingcode',\n      data: this.state.masterData && this.state.masterData.sampleStoragemapping && this.state.masterData.sampleStoragemapping,\n      dataResult: this.state.masterData && this.state.masterData.sampleStoragemapping && process(this.state.masterData.sampleStoragemapping || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        skip: 0,\n        take: 10\n      }),\n      dataState: this.state.dataStateChange ? this.state.dataStateChange : {\n        skip: 0,\n        take: 10\n      },\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: [{\n        \"idsName\": \"IDS_SAMPLESTORAGEPATH\",\n        \"dataField\": \"scontainerpath\",\n        \"width\": \"450px\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"sproductname\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_PROJECTTYPE\",\n        \"dataField\": \"sprojecttypename\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERID\",\n        \"dataField\": \"sboxid\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERTYPE\",\n        \"dataField\": \"scontainertype\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n        \"dataField\": \"scontainerstructurename\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_AVAILABLEQUANTITY\",\n        \"dataField\": \"nquantity\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_NEEDPREDEFINEDSTRUCURE\",\n        \"dataField\": \"stransdisplaystatus\",\n        \"width\": \"100px\"\n      }],\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      userInfo: this.props.Login.userInfo //     fetchRecord={this.fetchRecord}\n      //    editParam={{ 'primaryKeyField': 'nsamplestoragemappingcode' }}\n      ,\n      deleteRecord: this.deleteRecord,\n      addRecord: () => this.openStorageMapping(),\n      pageable: true,\n      scrollable: 'scrollable' // isComponent={true}\n      ,\n      gridHeight: '600px',\n      isActionRequired: this.state.masterData && this.state.masterData.selectedSampleStorageLocation && this.state.masterData.selectedSampleStorageLocation.nmappingtranscode === transactionStatus.DRAFT ? true : false,\n      isToolBarRequired: true,\n      actionIcons: this.state.masterData && this.state.masterData.selectedSampleStorageLocation && this.state.masterData.selectedSampleStorageLocation.nmappingtranscode === transactionStatus.DRAFT ? [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n        objectName: \"edit\",\n        onClick: this.fetchRecord\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n        objectName: \"delete\",\n        onClick: this.deletesamplestoragemapping\n      } // {\n      //     title: this.props.intl.formatMessage({ id: \"IDS_ADDSAMPLE\" }),\n      //     controlname: \"faPenSquare\",\n      //     hidden: false,\n      //     objectName: \"add\",\n      //     onClick: (param) => this.addSample(param, 1)\n      // }\n      ] : [],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1607,\n        columnNumber: 37\n      }\n    }), \"    \")))), this.state.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.state.openModal,\n      closeModal: this.closeModal,\n      size: this.state.openSpreadSheet ? 'xl' : \"\",\n      operation: this.state.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGEMAPPING\"\n      }),\n      onSaveClick: this.onSampleMappingSaveClick,\n      esign: this.props.Login.loadEsign // className={\"wide-popup\"}\n      ,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: // this.state.importdata ?\n      // <Upload\n      //     batch={false}\n      //     multiple={false}\n      //     defaultFiles={[]}\n      //     withCredentials={false}\n      //     autoUpload={false}\n      //     onAdd={this.handleAdd}\n      // />\n      // :\n      this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1718,\n          columnNumber: 37\n        }\n      }) : this.state.openSpreadSheet ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MatrixComponent, {\n        Rows: this.state.Rows || 1,\n        userInfo: this.props.Login.userInfo,\n        columns: this.state.columns || 1,\n        selectedRecord: this.state.selectedRecord.sheetData || {},\n        sheetData: this.state.sheetData || {},\n        isMultiSampleAdd: this.state.isMultiSampleAdd,\n        childSheetDataChange: this.childSheetDataChange,\n        editedsheetData: this.state.editedsheetData,\n        multipleSheetData: this.state.masterData && this.state.masterData.sampleStoragemapping && process(this.state.masterData.sampleStoragemapping || [], this.state.dataStateChange ? this.state.dataStateChange : {\n          skip: 0,\n          take: 10\n        }).data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1731,\n          columnNumber: 41\n        }\n      })) : /*#__PURE__*/React.createElement(AddSampleStorageMapping, {\n        operation: this.state.operation,\n        selectedRecordFilter: this.state.selectedRecordFilter,\n        onInputChange: e => this.onInputChange(e),\n        onComboChange: this.onComboChange,\n        selectedRecord: this.state.selectedRecord || {},\n        childDataChange: this.childDataChange,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1745,\n          columnNumber: 41\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1691,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService\n})(injectIntl(SampleStorageMapping));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/SampleStorageMapping.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Form","Button","FormControl","FontAwesomeIcon","PerfectScrollbar","faTrashAlt","faCopy","faPencilAlt","faSync","faPlus","faThumbsUp","faBoxOpen","faBox","faLocationArrow","faFolderMinus","faFolder","faFolderOpen","faArrowRight","faSearch","faTimes","faArrowDown","faHandPointLeft","faArrowUp","faClone","faPuzzlePiece","faCalculator","faFileImport","toast","ListMaster","constructOptionList","getControlMap","onSaveMandatoryValidation","searchData","searchJsonData","showEsign","sortData","ReadOnlyText","ContentPanel","SearchIcon","DataGrid","BasicConfig","BasicFuncs","Utils","QbUtils","SlideOutModal","callService","crudMaster","validateEsignCredential","updateStore","getSelectedSampleStorageLocation","filterColumnData","changeStorageCategoryFilter","openPropertyModal","editSampleStorageLocation","approveSampleStorageLocation","getSelectedSampleStorageVersion","fetchStorageCategory","copySampleStorageVersion","crudSampleStorageLocation","DEFAULT_RETURN","ListWrapper","MediaLabel","ProductList","uuid","TreeEditable","TreeViewEditable","getItemPath","mapTree","removeItems","ConfirmMessage","AddTreeview","AddTreeProperties","Splitter","TransactionListMaster","BreadcrumbComponent","SplitterLayout","StorageCategoryFilter","transactionStatus","Esign","TreeViewDragAnalyzer","moveTreeViewItem","ModalShow","rsapi","AddSampleStorageMapping","Axios","StorageMappingFilter","Preloader","TransactionListMasterJsonView","process","MatrixComponent","FilterQueryBuilder","SampleStorageMapping","constructor","props","dragOverCnt","isDragDrop","SEPARATOR","uniqueIDArr","countforTree","pointedItem","undefined","getitemPath","openModal","updateInfo","typeName","data","selectedRecord","loadTreeProperties","treeData","text","expanded","editable","root","id","operation","closeModal","loadEsign","Login","selectedId","state","setState","isInitialRender","onInputChange","event","target","type","name","checked","value","onSaveClick","saveType","formRef","onSaveProperties","openSpreadSheet","CRUDSampleStorageMapping","editedsheetData","nsamplestoragemappingcode","isMultiSampleAdd","Object","keys","sheetData","map","join","toString","nsamplestoragelocationcode","masterData","selectedSampleStorageLocation","JSON","stringify","sheetUpdate","userinfo","userInfo","onSaveSampleStorageMapping","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","e","skip","take","handleDetailPageChange","openFilter","showFilter","closeFilter","reloadData","onFilterSubmit","onEditSampleStorageLocation","selectedSampleStorageVersion","editId","handleSearch","searchedTreeData","searchRef","current","isOnlyDraft","sampleStorageVersion","length","openStorageMapping","addId","addSampleStorageMapping","deletesamplestoragemapping","param","addMultipleSample","loading","importdata","addSample","nflag","urlArray","url1","post","sampleStoragemapping","item","all","then","response","parse","Rows","nrow","columns","ncolumn","catch","error","status","message","warn","onComboChange","comboData","fieldName","selectedRecordFilter","getSampleStorageLocation","nstoragecategorycode","getContainerStructure","ncontainertypecode","containerpathCodeArray","inputParam","parseInt","nproductcode","nprojecttypecode","nunitcode","ssamplestoragemappingname","ndirectionmastercode","nsamplestoragecontainerpathcode","containerpathsize","nneedposition","sboxid","ncontainerstructurecode","nquantity","parseFloat","nnoofcontainer","userRoleControlRights","nformcode","ncontrolcode","screenData","childDataChange","childSheetDataChange","getActiveSampleStorageMappingById","filterValue","filterParam","primaryKeyValue","searchedData","inputListName","primaryKeyField","isjsondata","searchFieldList","fetchUrl","fecthInputObject","sortField","sortOrder","intl","formatMessage","selectedObject","forEach","unchangeList","indexOf","modalName","isImport","inputParamData","object","selectedStorageCategoryName","sstoragecategoryname","filterData","generateBreadCrumData","onSampleMappingSaveClick","mandatoryFields","dataStateChange","dataState","approveSampleStorageMapping","sampleStorageLocation","info","fetchRecord","url2","url3","getprojecttype","getUnit","storageMappingMap","storageMappingMapList","get","containerStructure","containerTypeMap","containerTypeList","directionmasterMap","directionmasterList","containerstructureMap","containerstructureList","productMap","productList","editedObject","editsampleStorageMapping","unshift","label","scontainerpath","projectTypeMap","projectTypeMapList","unitMap","unitMapList","sdirection","sproductname","sprojecttypename","sunitname","scontainertype","scontainerstructurename","directionmasterOptions","projectOptions","unitOptions","storageMappingMapOptions","productOptions","containerTypeOptions","containerStructureOptions","onInputOnChange","handlePageChangeFilter","kendoSkip","kendoTake","onChange","immutableTree","config","sqlFormat","tree","validateEsign","inputData","sreason","nreasoncode","spredefinedreason","password","title","children","toggleAction","treeDataView","toggleActionView","fields","panes","size","scrollable","controlMap","Map","detailSkip","detailTake","settings","selectedItem","createRef","dragClue","confirmMessage","getDerivedStateFromProps","masterStatus","componentDidUpdate","previousProps","previousState","storageCategoryOptions","storageLocationOptions","sampleStorageVersionOptions","bool","values","push","filterStorageCategory","filterStorageCategorylist","selectedStorageCategory","filter","sampleStorageLocationList","sampleStorageVersionList","nsamplestorageversioncode","componentDidMount","parentHeight","height","clientHeight","firstPane","obj","breadCrumbData","url4","samplestoragelocation","containerStructureList","getDynamicFilterExecuteData","valuemember","filterquery","source","console","log","rtn","shouldComponentUpdate","nextProps","nextState","render","has","deleteId","approveId","nfilterStorageCategory","storageLocationValue","storageVersionValue","ssamplestoragelocationname","nmappingtranscode","DRAFT","deleteRecord","controlname","hidden","objectName","onClick","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button, FormControl } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight, faSearch, faTimes, faArrowDown, faHandPointLeft, faArrowUp, faClone, faPuzzlePiece, faCalculator, faFileImport } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { constructOptionList, getControlMap, onSaveMandatoryValidation, searchData, searchJsonData, showEsign, sortData } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel, SearchIcon } from '../../components/App.styles';\r\n//import SortableTree from 'react-sortable-tree'; \r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport {\r\n    BasicConfig, BasicFuncs,\r\n    Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\n\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter,\r\n    openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion,\r\n    crudSampleStorageLocation\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { MediaLabel, ProductList } from '../product/product.styled';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { uuid } from \"uuidv4\";\r\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\r\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\r\nimport { getItemPath, mapTree, removeItems } from \"@progress/kendo-react-treelist\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddTreeview from './AddTreeview';\r\nimport AddTreeProperties from './AddTreeProperties';\r\nimport { Splitter } from '@progress/kendo-react-layout';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport StorageCategoryFilter from './StorageCategoryFilter';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport Esign from '../audittrail/Esign';\r\nimport { TreeViewDragAnalyzer, moveTreeViewItem } from '@progress/kendo-react-treeview';\r\nimport ModalShow from '../../components/ModalShow';\r\nimport rsapi from '../../rsapi';\r\nimport AddSampleStorageMapping from './AddSampleStorageMapping';\r\nimport Axios from 'axios';\r\nimport StorageMappingFilter from './StorageMappingFilter';\r\nimport Preloader from '../../components/preloader/preloader.component';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\n\r\nimport { process } from '@progress/kendo-data-query';\r\n//import Spreadsheet from '../../components/Spreadsheet/Spreadsheet';\r\nimport MatrixComponent from '../../components/MatrixComponent';\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\n//   import { Upload } from '@progress/kendo-react-upload';\r\n//   import * as XLSX from 'xlsx';\r\n\r\n\r\nclass SampleStorageMapping extends Component {\r\n    dragOverCnt = 0;\r\n    isDragDrop = false;\r\n    SEPARATOR = '_';\r\n    uniqueIDArr = [];\r\n    countforTree = 0;\r\n    pointedItem = undefined\r\n    getitemPath = {};\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sheetData: {},\r\n            selectedRecordFilter: {},\r\n            treeData: [{ title: 'Chicken', children: [{ title: 'Egg' }] }],\r\n            toggleAction: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            fields: {\r\n                \"ssamplestoragelocationname\": {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_STORAGESTRUCTURENAME\",\r\n                    }),\r\n                    \"type\": \"text\",\r\n                    \"valueSources\": [\"value\", \"func\"],\r\n\r\n                    \"mainWidgetProps\": {\r\n                        \"valueLabel\": \"Name\",\r\n                        \"valuePlaceholder\": this.props.intl.formatMessage({\r\n                            id: \"IDS_STORAGESTRUCTURENAME\"\r\n                        })\r\n                    }\r\n\r\n                }, \"scontainerpath\": {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_SAMPLESTORAGEPATH\",\r\n                    }),\r\n                    \"type\": \"text\",\r\n                    \"valueSources\": [\"value\", \"func\"],\r\n\r\n                    \"mainWidgetProps\": {\r\n                        \"valueLabel\": \"Name\",\r\n                        \"valuePlaceholder\": this.props.intl.formatMessage({\r\n                            id: \"IDS_SAMPLESTORAGEPATH\"\r\n                        })\r\n                    }\r\n\r\n                }\r\n            },\r\n            treeData: [\r\n                {\r\n                    //  text: \"root\",\r\n                    text: this.props.intl.formatMessage({ id: \"IDS_ROOT\" }),\r\n                    expanded: true,\r\n                    editable: true,\r\n                    root: true,\r\n                    id: uuid(),\r\n                }],\r\n            panes: [{\r\n                size: '50%',\r\n                scrollable: false\r\n            }],\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            selectedItem: undefined,\r\n            loading: false\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.dragClue = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        let { filterData, storageCategoryOptions,\r\n            selectedRecord, controlMap,\r\n            userRoleControlRights, storageLocationOptions,\r\n            sampleStorageVersionOptions, masterData, selectedRecordFilter } = this.state\r\n        let bool = false;\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            bool = true;\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            bool = true;\r\n            const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                \"sstoragecategoryname\", undefined, undefined, undefined);\r\n            storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedStorageCategory) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nstoragecategorycode: storageCategoryOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\r\n            bool = true;\r\n            const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n            storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageLocation) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\r\n            bool = true;\r\n            const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                \"nversionno\", undefined, undefined, undefined);\r\n            sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            masterData = this.props.Login.masterData;\r\n            filterData = this.generateBreadCrumData(this.props.Login.masterData);\r\n\r\n        }\r\n        if (this.state.masterData !== previousState.masterData) {\r\n            bool = true;\r\n            filterData = this.generateBreadCrumData(this.state.masterData);\r\n\r\n        }\r\n        if (bool) {\r\n            this.setState({\r\n                storageCategoryOptions, filterData,\r\n                selectedRecord, controlMap,\r\n                userRoleControlRights, storageLocationOptions,\r\n                sampleStorageVersionOptions, masterData, selectedRecordFilter\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    openModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true, selectedRecord: {}, loadTreeProperties: false,\r\n                treeData: [\r\n                    {\r\n                        text: \"root\",\r\n                        expanded: true,\r\n                        editable: true,\r\n                        root: true,\r\n                        id: uuid(),\r\n                    },\r\n                ], operation: \"create\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         openModal: false, selectedRecord: {}\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                selectedId = null;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedId = null;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({ selectedRecord, openModal: false, isInitialRender: true })\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.loadTreeProperties === true) {\r\n            this.onSaveProperties(saveType, formRef);\r\n        } else if (this.state.openSpreadSheet) {\r\n            this.CRUDSampleStorageMapping({\r\n                ...this.state.editedsheetData,\r\n                nsamplestoragemappingcode: this.state.isMultiSampleAdd ?\r\n                    Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\") : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\r\n                nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n                sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\r\n                sheetUpdate: true,\r\n                userinfo: this.props.Login.userInfo,\r\n                isMultiSampleAdd: this.state.isMultiSampleAdd\r\n            }, 'update');\r\n        } else {\r\n            this.onSaveSampleStorageMapping(saveType, formRef);\r\n        }\r\n    };\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    generateBreadCrumData(obj) {\r\n        const breadCrumbData = [];\r\n        if (this.state.masterData && this.state.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": obj.selectedStorageCategoryName &&\r\n                        obj.selectedStorageCategoryName !== null ?\r\n                        obj.selectedStorageCategoryName : \"NA\"\r\n\r\n                }\r\n                // ,\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\r\n                //     \"value\": obj.selectedSampleStorageLocation &&\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\r\n                // },\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\r\n                //     \"value\": obj.selectedSampleStorageVersion &&\r\n                //         obj.selectedSampleStorageVersion.nversionno !== null ?\r\n                //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\r\n                // }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    reloadData = () => {\r\n        this.onFilterSubmit();\r\n    }\r\n    onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n        let isOnlyDraft = false;\r\n        if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\r\n            isOnlyDraft = true;\r\n        }\r\n        this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\r\n    }\r\n    openStorageMapping = (addId) => {\r\n        this.addSampleStorageMapping({ userInfo: this.props.Login.userInfo, addId });\r\n    }\r\n    deletesamplestoragemapping = (param) => {\r\n        this.CRUDSampleStorageMapping({\r\n            'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\r\n            userinfo: this.props.Login.userInfo\r\n        }, 'delete');\r\n    }\r\n    addMultipleSample = (param) => {\r\n        this.setState({\r\n            //sheetData: JSON.parse(response[0].data.sheetData),\r\n            openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n            loading: false\r\n        })\r\n    }\r\n    importdata = () => {\r\n        this.setState({ openModal: true, importdata: true })\r\n    }\r\n    addSample = (param, nflag) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemapping/getsamplestoragemappingSheetData\",\r\n            {\r\n                isMultiSampleAdd: (nflag === 2) ? true : false,\r\n                nsamplestoragemappingcode:\r\n                    (nflag === 2) ? this.state.masterData.sampleStoragemapping.map(item => item.nsamplestoragemappingcode).join(\",\")\r\n                        : param.nsamplestoragemappingcode.toString()\r\n            });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (nflag === 2) {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        openModal: true, isMultiSampleAdd: false, openSpreadSheet: true,\r\n                        editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false\r\n                    })\r\n                }\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n\r\n        if (fieldName === 'nstoragecategorycode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: comboData.value\r\n            }, fieldName, comboData);\r\n        } else if (fieldName === 'ncontainertypecode') {\r\n            return this.getContainerStructure({\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontainertypecode: comboData.value\r\n            }, fieldName, comboData);\r\n\r\n        } else if (fieldName === 'ncontainerstructurecode') {\r\n            selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\r\n            selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\r\n        } else if (fieldName === 'nsamplestoragelocationcode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value\r\n\r\n            }, fieldName, comboData);\r\n        }\r\n        if (fieldName === 'nsamplestorageversioncode') {\r\n            selectedRecordFilter[fieldName] = comboData;\r\n            this.setState({ selectedRecordFilter });\r\n\r\n        } else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord, selectedRecordFilter });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onSaveSampleStorageMapping = (saveType) => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let containerpathCodeArray = [];\r\n        if (this.state.operation === 'create') {\r\n            containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\r\n        }\r\n        const inputParam = selectedRecord['nneedposition'] === true ?\r\n            {\r\n                nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n                nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ?\r\n                    parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\r\n                ncontainertypecode: selectedRecord['ncontainertypecode'].value ?\r\n                    selectedRecord['ncontainertypecode'].value : -1,\r\n                nproductcode: selectedRecord['nproductcode']?selectedRecord['nproductcode'].value:-1,\r\n                nprojecttypecode: selectedRecord['nprojecttypecode']?selectedRecord['nprojecttypecode'].value:-1,\r\n                nunitcode: selectedRecord['nunitcode']?selectedRecord['nunitcode'].value:-1,\r\n                ssamplestoragemappingname: \"-\",\r\n                ndirectionmastercode: selectedRecord['ndirectionmastercode']? selectedRecord['ndirectionmastercode'].value:-1,\r\n                nsamplestoragecontainerpathcode: this.state.operation === 'create' ?\r\n                    JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\r\n                containerpathsize: containerpathCodeArray.length,\r\n                nneedposition: 3,\r\n                sboxid: '',\r\n                ncontainerstructurecode: selectedRecord['ncontainerstructurecode'].value ?\r\n                    selectedRecord['ncontainerstructurecode'].value : -1,\r\n                nquantity: selectedRecord['nquantity'] ?\r\n                    parseFloat(selectedRecord['nquantity']) : 0,\r\n                nnoofcontainer: selectedRecord['nnoofcontainer'] ?\r\n                    parseInt(selectedRecord['nnoofcontainer']) : 1,\r\n                //nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\r\n                userinfo: this.props.Login.userInfo,\r\n                nrow: selectedRecord['nrow'],\r\n                ncolumn: selectedRecord['ncolumn']\r\n\r\n            } : {\r\n                nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n                nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ?\r\n                    parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\r\n                ncontainertypecode: -1,\r\n                nproductcode: selectedRecord['nproductcode']?selectedRecord['nproductcode'].value:-1,\r\n                nprojecttypecode: selectedRecord['nprojecttypecode']?selectedRecord['nprojecttypecode'].value:-1,\r\n                nunitcode: selectedRecord['nunitcode']?selectedRecord['nunitcode'].value:-1,\r\n                ndirectionmastercode: 1,\r\n                ssamplestoragemappingname: \"-\",\r\n                nsamplestoragecontainerpathcode: this.state.operation === 'create' ?\r\n                    JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\r\n                containerpathsize: containerpathCodeArray.length,\r\n                nneedposition: 4,\r\n                sboxid: '',\r\n                ncontainerstructurecode: -1,\r\n                nquantity: selectedRecord['nquantity'] ?\r\n                parseInt(selectedRecord['nquantity']) : 0,\r\n            nnoofcontainer: selectedRecord['nnoofcontainer'] ?\r\n                parseInt(selectedRecord['nnoofcontainer']) : 1,\r\n                // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\r\n                userinfo: this.props.Login.userInfo,\r\n                nrow: selectedRecord['nrow'],\r\n                ncolumn: selectedRecord['ncolumn']\r\n            }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.CRUDSampleStorageMapping(inputParam, this.state.operation);\r\n        }\r\n    }\r\n\r\n    childDataChange = (selectedRecord) => {\r\n        this.setState({\r\n            selectedRecord: {\r\n                ...selectedRecord\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    childSheetDataChange = (sheetData) => {\r\n        this.setState({\r\n            // selectedRecord: {\r\n            //     ...this.state.selectedRecord,\r\n            //     sheetData: {\r\n            //         ...this.state.selectedRecord.sheetData,\r\n            //         ...sheetData\r\n            //     }\r\n            // },\r\n            sheetData: {\r\n                ...sheetData\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    // Actions start\r\n    getActiveSampleStorageMappingById = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemapping/getActiveSampleStorageMappingById\", {\r\n            nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\r\n            userinfo: userinfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    }//,\r\n                    // selectedRecord: {\r\n                    //     ...this.state.selectedRecord\r\n                    //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\r\n                    // }\r\n                    ,\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n    filterColumnData = (filterValue, filterParam) => {\r\n        let masterData = filterParam.masterData;\r\n        let primaryKeyValue = 0;\r\n        let searchedData = undefined;\r\n        if (filterValue === \"\") {\r\n            if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n                primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n        else {\r\n            if (filterParam.isjsondata) {\r\n                searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n            }\r\n            else {\r\n                searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n\r\n            }\r\n            if (searchedData.length > 0) {\r\n                primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n\r\n        if (primaryKeyValue !== 0) {\r\n            this.setState({ loading: true });\r\n            return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n                .then(response => {\r\n                    masterData[\"searchedData\"] = searchedData;\r\n                    masterData = { ...masterData, ...response.data };\r\n\r\n                    if (filterParam.sortField) {\r\n                        sortData(masterData, filterParam.sortOrder, filterParam.sortField);\r\n                    }\r\n                    else {\r\n                        sortData(masterData);\r\n                    }\r\n                    this.setState({ masterData, loading: false, skip: 0, take: 10, selectedId: null });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ loading: false });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            masterData[filterParam.selectedObject] = undefined;\r\n            masterData[\"searchedData\"] = [];\r\n            Object.keys(masterData).forEach(item => {\r\n                if (item !== filterParam.inputListName && item !== filterParam.selectedObject\r\n                    && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1)\r\n                    masterData[item] = [];\r\n            })\r\n            this.setState({\r\n                masterData, operation: null, modalName: undefined,\r\n                loading: false\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n\r\n    CRUDSampleStorageMapping = (inputParam, operation, isImport) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemapping/\" + operation + \"SampleStorageMapping\", inputParam);\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    isInitialRender: true,\r\n                    selectedRecord: {},\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    },\r\n                    openModal: false,\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    getSampleStorageLocation(inputData, fieldName, comboData) {\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        if (fieldName === 'nsamplestoragelocationcode') {\r\n            inputParamData = {\r\n                nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        } else {\r\n            inputParamData = {\r\n                nstoragecategorycode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemapping/getsamplestoragemapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { storageLocationOptions,\r\n                    sampleStorageVersionOptions } = this.state\r\n\r\n                let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n                storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n                let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                    \"nversionno\", undefined, undefined, undefined);\r\n                sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.length > 0 ?\r\n                        storageLocationOptions[0] : [],\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ?\r\n                        sampleStorageVersionOptions[0] : [],\r\n\r\n                }\r\n                this.setState({\r\n                    storageLocationOptions, sampleStorageVersionOptions,\r\n                    selectedRecordFilter: {\r\n                        ...selectedRecordFilter,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.searchRef.current.value = \"\";\r\n        this.setState({ loading: true })\r\n        let inputParamData = {\r\n            nstoragecategorycode: this.state.selectedRecordFilter&&this.state.selectedRecordFilter[\"nstoragecategorycode\"]&&\r\n            this.state.selectedRecordFilter[\"nstoragecategorycode\"].value?\r\n            this.state.selectedRecordFilter[\"nstoragecategorycode\"].value:0,\r\n            // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\r\n            // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemapping/getsamplestoragemapping\", inputParamData);\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let object = {\r\n                    selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname,\r\n                    // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\r\n                    // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\r\n                }\r\n                let filterData = this.generateBreadCrumData(object);\r\n\r\n                this.setState({\r\n                    filterData,\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        ...response[0].data,\r\n                          searchedData: undefined \r\n                        //   sampleStoragemapping: response[0].data['sampleStoragemapping'],\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    addSampleStorageMapping() {\r\n        if(this.state.masterData.searchedData !==undefined ?\r\n            this.state.masterData.searchedData.length>0  ?\r\n            true  :false\r\n            : this.state.masterData.sampleStorageLocation.length>0   ){\r\n            this.setState({ loading: true })\r\n            let selectedRecord = this.state.selectedRecord\r\n            let inputParamData = {\r\n                // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n                nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n                // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n                userinfo: this.props.Login.userInfo,\r\n                operation: \"create\"\r\n            }\r\n    \r\n            let urlArray = [];\r\n            const url1 = rsapi.post(\"samplestoragemapping/addSampleStorageMapping\", inputParamData);\r\n    \r\n            const url2 = rsapi.post(\"product/getProduct\",\r\n                { 'userinfo': this.props.Login.userInfo });\r\n    \r\n            const url3 = rsapi.post(\"/projecttype/getProjectType\",\r\n                { 'userinfo': this.props.Login.userInfo });\r\n\r\n                const url4 = rsapi.post(\"/unit/getUnit\",\r\n                { 'userinfo': this.props.Login.userInfo });\r\n    \r\n            urlArray = [url1, url2, url3,url4];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                        \"nsamplestoragecontainerpathcode\",\r\n                        \"scontainerpath\", undefined, undefined, true);\r\n                    const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                    let containerStructure = response[0].data['containerStructure'];\r\n    \r\n                    const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                        \"ncontainertypecode\",\r\n                        \"scontainertype\", undefined, undefined, true);\r\n                    const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n    \r\n    \r\n                    const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                        \"ndirectionmastercode\",\r\n                        \"sdirection\", undefined, undefined, true);\r\n                    const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n    \r\n                    const containerstructureMap = constructOptionList(response[0].data['containerStructure']\r\n                        || [],\r\n                        \"ncontainerstructurecode\",\r\n                        \"scontainerstructurename\", undefined, undefined, true);\r\n                    const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n    \r\n                    const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                        \"nproductcode\",\r\n                        \"sproductname\", undefined, undefined, true);\r\n                    const productList = productMap.get(\"OptionList\");\r\n    \r\n    \r\n                    const projectTypeMap = constructOptionList(response[2].data || [], \"nprojecttypecode\",\r\n                        \"sprojecttypename\", undefined, undefined, true);\r\n    \r\n                    const projectTypeMapList = projectTypeMap.get(\"OptionList\");\r\n\r\n                    const unitMap = constructOptionList(response[3].data || [], \"nunitcode\",\r\n                    \"sunitname\", undefined, undefined, true);\r\n\r\n                const unitMapList = unitMap.get(\"OptionList\");\r\n    \r\n    \r\n                    //To Load selected Data from Sample storage Location\r\n                    unitMapList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nunitcode\"] ?\r\n                    selectedRecord[\"nunitcode\"] = {\r\n                        \"label\": item.label,\r\n                        \"value\": item.value,\r\n                        \"item\": item.item\r\n                    }\r\n                    : \"\"); \r\n\r\n                    projectTypeMapList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nprojecttypecode\"] ?\r\n                        selectedRecord[\"nprojecttypecode\"] = {\r\n                            \"label\": item.label,\r\n                            \"value\": item.value,\r\n                            \"item\": item.item\r\n                        }\r\n                        : \"\");\r\n                    productList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nproductcode\"] ?\r\n                        selectedRecord[\"nproductcode\"] = {\r\n                            \"label\": item.label,\r\n                            \"value\": item.value,\r\n                            \"item\": item.item\r\n                        }\r\n                        : \"\");\r\n                    containerTypeList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ncontainertypecode\"] ?\r\n                        selectedRecord[\"ncontainertypecode\"] = {\r\n                            \"label\": item.label,\r\n                            \"value\": item.value,\r\n                            \"item\": item.item\r\n                        }\r\n                        : \"\");\r\n                    containerstructureList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ncontainerstructurecode\"] ?\r\n                        selectedRecord[\"ncontainerstructurecode\"] = {\r\n                            \"label\": item.label,\r\n                            \"value\": item.value,\r\n                            \"item\": item.item\r\n                        }\r\n                        : \"\");\r\n    \r\n                    directionmasterList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ndirectionmastercode\"] ?\r\n                        selectedRecord[\"ndirectionmastercode\"] = {\r\n                            \"label\": item.label,\r\n                            \"value\": item.value,\r\n                            \"item\": item.item\r\n                        }\r\n                        : \"\");\r\n                    selectedRecord = {\r\n                        ...selectedRecord,\r\n                        nneedposition: true,\r\n                        nrow: response[0].data[\"selectedSampleStorageVersion\"].nrow,\r\n                        ncolumn: response[0].data[\"selectedSampleStorageVersion\"].ncolumn,\r\n                        nquantity: response[0].data[\"selectedSampleStorageVersion\"].nquantity,\r\n                        nnoofcontainer:response[0].data[\"selectedSampleStorageVersion\"].nnoofcontainer,\r\n                        containerTypeOptions: containerTypeList,\r\n                        containerStructureOptions: containerstructureList,\r\n                        directionmasterOptions: directionmasterList\r\n                    }\r\n                    this.setState({\r\n                        openModal: true,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            nproductcode: { label: response[0].data.samplestoragelocation.sproductname, value: response[0].data.samplestoragelocation.nproductcode },\r\n                            nprojecttypecode: { label: response[0].data.samplestoragelocation.sprojecttypename, value: response[0].data.samplestoragelocation.nprojecttypecode },\r\n                            storageMappingMapOptions: storageMappingMapList,\r\n                            productOptions: productList,\r\n                            projectOptions: projectTypeMapList,\r\n                            unitOptions:unitMapList,\r\n                            containerTypeOptions: containerTypeList,\r\n                            directionmasterOptions: directionmasterList,\r\n                            // ncontainertypecode: containerTypeList[0],\r\n                            // containerStructureOptions: containerstructureList,\r\n                            // ncontainerstructurecode: containerstructureList[0],\r\n                            // nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\r\n                            // ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\r\n                            isInitialRender: true\r\n    \r\n                        },\r\n                        openSpreadSheet: false,\r\n                        operation: 'create',\r\n                        loading: false\r\n                    });\r\n                }).catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                });\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLESTORAGELOCATION\" }));\r\n        }\r\n    }\r\n\r\n\r\n    getContainerStructure(inputData, fieldName, comboData) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            ncontainertypecode: comboData.value,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemapping/getContainerStructure\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { containerStructureOptions, selectedRecord } = this.state\r\n\r\n                let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, undefined);\r\n                containerStructureOptions = containerStructureList.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    nrow: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.nrow : 1,\r\n                    ncolumn: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.ncolumn : 1,\r\n                    ncontainerstructurecode: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0] : [],\r\n                    containerStructureOptions: containerStructureOptions.length > 0 ?\r\n                        [...containerStructureOptions] : [],\r\n                }\r\n\r\n                this.setState({\r\n\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    onSampleMappingSaveClick = () => {\r\n        const mandatoryFields = this.state.openSpreadSheet ? [] : this.state.selectedRecord[\"nneedposition\"] === undefined ||\r\n            this.state.selectedRecord[\"nneedposition\"] === false ? [\r\n            {\r\n                \"idsName\": \"IDS_SAMPLESTORAGEPATH\", \"dataField\": \"nsamplestoragecontainerpathcode\",\r\n                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PRODUCT\",\r\n                \"dataField\": \"nproductcode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            }\r\n            // },\r\n            // {\r\n            //     \"idsName\": \"IDS_AVAILABLEQUANTITY\",\r\n            //     \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n            //         \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            // }\r\n        ] : [\r\n            {\r\n                \"idsName\": \"IDS_SAMPLESTORAGEPATH\", \"dataField\": \"nsamplestoragecontainerpathcode\",\r\n                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PRODUCT\",\r\n                \"dataField\": \"nproductcode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            }\r\n            ,\r\n            {\r\n                \"idsName\": \"IDS_CONTAINERTYPE\",\r\n                \"dataField\": \"ncontainertypecode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\r\n                \"dataField\": \"ncontainerstructurecode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_DIRECTION\",\r\n                \"dataField\": \"ndirectionmastercode\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            }\r\n            // },\r\n            // {\r\n            //     \"idsName\": \"IDS_AVAILABLEQUANTITY\",\r\n            //     \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n            //         \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            // }\r\n        ]\r\n        onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields,\r\n            this.onSaveClick)\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateChange: event.dataState\r\n        });\r\n    }\r\n\r\n    approveSampleStorageMapping = (event) => {\r\n        if(this.state.masterData.sampleStorageLocation.length>0){\r\n            let inputParamData = {}\r\n            this.setState({ loading: true })\r\n            inputParamData = {\r\n                nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n            let urlArray = [];\r\n            const url1 = rsapi.post(\"samplestoragemapping/approveSampleStorageMapping\", inputParamData);\r\n    \r\n            urlArray = [url1];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    this.setState({\r\n                        masterData: {\r\n                            ...this.state.masterData,\r\n                            ...response[0].data\r\n                        },\r\n                        loading: false\r\n                    });\r\n                }).catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                });\r\n        }else{\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLESTORAGELOCATION\" })); \r\n        }\r\n       \r\n    }\r\n\r\n    getDynamicFilterExecuteData(inputParam) {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let obj = {// ...inputParam.component, \r\n            label: 'sampleStorageLocation', valuemember: 'nsamplestoragelocationcode',\r\n            filterquery: selectedRecord.filterquery, source: 'sampleStorageLocation', userinfo: this.props.Login.userInfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"/samplestoragemapping/getdynamicfilterexecutedata\", obj);\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                console.log(response)\r\n                let masterData = this.state.masterData\r\n                masterData = { ...masterData, ...response[0].data }\r\n                this.setState({\r\n                    masterData: { ...masterData },\r\n                    loading: false\r\n                })\r\n            })\r\n            .catch(error => {\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    fetchRecord = (data) => {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemapping/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        const url3 = rsapi.post(\"samplestoragemapping/getEditSampleStorageMapping\",\r\n            { 'nsamplestoragemappingcode': data.nsamplestoragemappingcode, 'userinfo': this.props.Login.userInfo });\r\n\r\n        const getprojecttype = rsapi.post(\"/projecttype/getProjectType\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n            const getUnit = rsapi.post(\"/unit/getUnit\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2, url3, getprojecttype,getUnit];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n\r\n                const containerstructureMap = constructOptionList(response[2].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                const editedObject = response[2].data.editsampleStorageMapping;\r\n\r\n                storageMappingMapList.unshift({ label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode })\r\n\r\n                const projectTypeMap = constructOptionList(response[3].data || [], \"nprojecttypecode\",\r\n                    \"sprojecttypename\", undefined, undefined, true);\r\n\r\n                const projectTypeMapList = projectTypeMap.get(\"OptionList\");\r\n\r\n                const unitMap = constructOptionList(response[4].data || [], \"nunitcode\",\r\n                \"sunitname\", undefined, undefined, true);\r\n\r\n            const unitMapList = unitMap.get(\"OptionList\");\r\n\r\n                selectedRecord = {\r\n                    ndirectionmastercode: { label: editedObject.sdirection, value: editedObject.ndirectionmastercode },\r\n                    nsamplestoragecontainerpathcode: { label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode },\r\n                    nproductcode: { label: editedObject.sproductname, value: editedObject.nproductcode },\r\n                    nprojecttypecode: { label: editedObject.sprojecttypename, value: editedObject.nprojecttypecode },\r\n                    nunitcode: { label: editedObject.sunitname, value: editedObject.nunitcode },\r\n                    ncontainertypecode: { label: editedObject.scontainertype, value: editedObject.ncontainertypecode },\r\n                    ncontainerstructurecode: { label: editedObject.scontainerstructurename, value: editedObject.ncontainerstructurecode },\r\n                    nneedposition: editedObject.nneedposition === 3 ? true : false,\r\n                    directionmasterOptions: directionmasterList,\r\n                    nquantity: editedObject.nquantity,\r\n                    nnoofcontainer: editedObject.nnoofcontainer,\r\n                    nrow: editedObject.nrow,\r\n                    ncolumn: editedObject.ncolumn,\r\n                    nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\r\n                }\r\n                this.setState({\r\n                    openSpreadSheet: false,\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        projectOptions: projectTypeMapList,unitOptions:unitMapList,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        containerStructureOptions: containerstructureList,\r\n                        isInitialRender: true\r\n                    },\r\n                    operation: 'update',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    // Actions End\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n\r\n   \r\n    //handleAdd = (e) => {\r\n    //     let file = e.newState[0].getRawFile();\r\n    //     let selectedRecord = this.state.selectedRecord;\r\n    //     selectedRecord['nsamplestoragecontainerpathcode'] = []\r\n    //     /* Boilerplate to set up FileReader */\r\n    //     const reader = new FileReader();\r\n    //     const rABS = !!reader.readAsBinaryString;\r\n    //     let data = []\r\n    //     reader.onload = (e) => {\r\n    //         /* Parse data */\r\n    //         const bstr = e.target.result;\r\n    //         const wb = XLSX.read(bstr, {\r\n    //             type: rABS ? 'binary' : 'array',\r\n    //             bookVBA: true,\r\n    //         });\r\n    //         /* Get first worksheet */\r\n    //         const wsname = wb.SheetNames[0];\r\n    //         const ws = wb.Sheets[wsname];\r\n    //         /* Convert array of arrays */\r\n    //         data = XLSX.utils.sheet_to_json(ws);\r\n    //         console.log(data);\r\n    //         /* Update state */\r\n    //         // this.setState({\r\n    //         //     data,\r\n    //         // });\r\n\r\n    //         console.log('xlsx data :', this.state.storageMappingMapOptions)\r\n\r\n\r\n    //         data.map((x, index) => {\r\n    //             let clientcontainerpath = 'root > ' + x.fz_code + ' > ' + x.sf_code\r\n    //                 + ' > ' + x.rk_code\r\n    //                 + ' > ' + x.tr_code\r\n    //                 + ' > ' + x.bx_code\r\n    //             console.log('clientcontainerpath:', clientcontainerpath)\r\n\r\n    //             this.state.storageMappingMapOptions.map((item, index) => {\r\n    //                 if (item.label === clientcontainerpath) {\r\n    //                     let i = -1\r\n    //                     if (selectedRecord['nsamplestoragecontainerpathcode'].length > 0) {\r\n    //                         i = selectedRecord['nsamplestoragecontainerpathcode']\r\n    //                             .findIndex(k => k.label === clientcontainerpath)\r\n    //                     }\r\n    //                     x['nsamplestoragecontainerpathcode'] = this.state.storageMappingMapOptions[index].value\r\n    //                     if (i === -1) {\r\n\r\n    //                         selectedRecord['nsamplestoragecontainerpathcode'].push(this.state.storageMappingMapOptions[index]);\r\n    //                     }\r\n    //                 }\r\n    //             });\r\n\r\n    //         });\r\n    //         let containerpathCodeArray = [];\r\n\r\n    //         containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\r\n    //         const inputParam = {\r\n    //             nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n    //             nsamplestoragemappingcode: 0,\r\n    //             ncontainertypecode: 1,\r\n    //             nproductcode: 9,\r\n    //             nprojecttypecode: 2,\r\n    //             ndirectionmastercode: 1,\r\n    //             nsamplestoragecontainerpathcode: JSON.stringify(containerpathCodeArray),\r\n    //             containerpathsize: containerpathCodeArray.length,\r\n    //             nneedposition: 3,\r\n    //             ncontainerstructurecode: 1,\r\n    //             nquantity: 100,\r\n    //             sboxid: '-',\r\n    //             //nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\r\n    //             userinfo: this.props.Login.userInfo,\r\n    //             clientData: JSON.stringify(data),\r\n    //             isImport: true\r\n    //         }\r\n    //         this.CRUDSampleStorageMapping(inputParam, 'create', true);\r\n    //         console.log('selectedRecord:', selectedRecord['nsamplestoragecontainerpathcode'])\r\n    //     };\r\n    //     if (rABS) {\r\n    //         reader.readAsBinaryString(file);\r\n    //     } else {\r\n    //         reader.readAsArrayBuffer(file);\r\n    //     }\r\n\r\n    // };\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.selectedRecord !== this.state.selectedRecord)) {\r\n            return false;\r\n        } else if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.sheetData !== this.state.sheetData)) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    handlePageChangeFilter = (event) => {\r\n        this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    onChange = (immutableTree, config) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[\"tree\"] = immutableTree;\r\n        selectedRecord[\"config\"] = config;\r\n        selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\r\n        this.setState({ tree: immutableTree, config: config, selectedRecord: selectedRecord });\r\n\r\n    };\r\n\r\n    render() {\r\n\r\n        const addId = this.state.controlMap.has(\"AddSampleStorageMapping\") && this.state.controlMap.get(\"AddSampleStorageMapping\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditsampleStorageMapping\") && this.state.controlMap.get(\"EditsampleStorageMapping\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeletesampleStorageMapping\") && this.state.controlMap.get(\"DeletesampleStorageMapping\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"ApprovesampleStorageMapping\") && this.state.controlMap.get(\"ApprovesampleStorageMapping\").ncontrolcode;\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\",\r\n            fetchUrl: \"samplestoragemapping/getActiveSampleStorageMappingById\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"ssamplestoragelocationname\"]\r\n        };\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <Preloader loading={this.state.loading} />\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        : \"\"}\r\n                    <Row noGutters={true}>\r\n                        <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} onSecondaryPaneSizeChange={this.paneSizeChange} secondaryInitialSize={25} primaryMinSize={40} secondaryMinSize={20}>\r\n\r\n\r\n\r\n                            <TransactionListMasterJsonView\r\n                                paneHeight={this.state.parentHeight}\r\n                                needMultiSelect={false}\r\n                                masterList={this.state.masterData && this.state.masterData.searchedData ||\r\n                                    this.state.masterData && this.state.masterData.sampleStorageLocation || []}\r\n                                selectedMaster={[this.state.masterData && this.state.masterData.selectedSampleStorageLocation]}\r\n                                primaryKeyField=\"nsamplestoragelocationcode\"\r\n                                getMasterDetail={(selectedItem) =>\r\n                                    this.getActiveSampleStorageMappingById(\r\n                                        selectedItem,\r\n                                        this.props.Login.userInfo\r\n                                    )}\r\n                                inputParam={{\r\n                                    userInfo: this.props.Login.userInfo,\r\n                                    masterData: this.props.Login.masterData\r\n                                }}\r\n                                mainField={\"ssamplestoragelocationname\"}\r\n                                selectedListName=\"selectedSampleStorageLocation\"\r\n                                objectName=\"LocationMaster\"\r\n                                listName=\"IDS_STORAGESTRUCTURE\"\r\n                                filterColumnData={this.filterColumnData}\r\n                                searchListName=\"searchedData\"\r\n                                searchRef={this.searchRef}\r\n                                filterParam={filterParam}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                needFilter={true}\r\n                                hidePaging={false}\r\n                                handlePageChange={this.handlePageChange}\r\n                                skip={this.state.skip}\r\n                                take={this.state.take}\r\n                                commonActions={\r\n                                    <ProductList className=\"d-flex product-category float-right\">\r\n                                        {/* <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                                onClick={() => this.openStorageMapping(addId)}>\r\n                                                <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                                            </Button> */}\r\n                                        <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                            onClick={() => this.reloadData()}\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                            <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                        </Button>\r\n                                    </ProductList>\r\n                                }\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TESTFILTER\":\r\n                                            <StorageMappingFilter\r\n                                                storageCategoryOptions={this.state.storageCategoryOptions || []}\r\n                                                nfilterStorageCategory={this.state.nfilterStorageCategory || {}}\r\n                                                storageLocationOptions={this.state.storageLocationOptions || []}\r\n                                                storageLocationValue={this.state.storageLocationValue || []}\r\n                                                sampleStorageVersionOptions={this.state.sampleStorageVersionOptions || []}\r\n                                                storageVersionValue={this.state.storageVersionValue || []}\r\n                                                onComboChange={this.onComboChange}\r\n                                                selectedRecordFilter={this.state.selectedRecordFilter}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n\r\n                            />\r\n\r\n                           \r\n\r\n                                <>\r\n                                    <Card.Title className=\"product-title-main\">\r\n                                        {this.state.masterData&&this.state.masterData.selectedSampleStorageLocation&&\r\n                                        this.state.masterData.selectedSampleStorageLocation.ssamplestoragelocationname }</Card.Title>\r\n\r\n                                    <Card.Subtitle>\r\n                                        <div className=\"d-flex product-category\">\r\n                                            <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                <Nav.Link className=\"action-icons-wrap mr-2 pl-0\">\r\n                                                    { \r\n                                                    this.state.masterData&&this.state.masterData.selectedSampleStorageLocation ?\r\n                                                    this.state.masterData.selectedSampleStorageLocation.nmappingtranscode === transactionStatus.DRAFT ?\r\n\r\n                                                        <span className={`btn btn-outlined  outline-secondary btn-sm mr-3`}>\r\n                                                            <FormattedMessage id={\"IDS_DRAFT\"} defaultMessage=\"Draft\" />\r\n                                                        </span>\r\n                                                        :\r\n                                                        <span className={`btn btn-outlined outline-success btn-sm mr-3`}>\r\n                                                            <FormattedMessage id={\"IDS_APPROVED\"} defaultMessage=\"Approved\" />\r\n                                                        </span> :\"\"\r\n                                                    }\r\n                                                </Nav.Link>\r\n                                            </h2>\r\n                                            {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                //hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                // data-for=\"tooltip_list_wrap\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORT\" })}\r\n                                                onClick={(e) => this.importdata(faThumbsUp)}\r\n                                            >\r\n                                                <FontAwesomeIcon icon={faFileImport} />\r\n\r\n                                            </Nav.Link>  */}\r\n                                            {/* <Button className=\"btn btn-circle outline-grey\"\r\n                                                            variant=\"link\"\r\n                                                            data-tip={this.props.intl.formatMessage({\r\n                                                                id: \"IDS_SAMPLE\"\r\n                                                            })}\r\n                                                            onClick={() => this.addSample({}, 2)}>\r\n                                                            <FontAwesomeIcon icon={faPuzzlePiece} />\r\n                                                        </Button> */}\r\n                                                        {this.state.masterData && this.state.masterData.sampleStoragemapping && \r\n                                                          <Button className=\"btn btn-circle outline-grey\"\r\n                                            variant=\"link\"\r\n                                            data-tip={this.props.intl.formatMessage({\r\n                                                id: \"IDS_APPROVE\"\r\n                                            })}\r\n                                            hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                            onClick={() => this.approveSampleStorageMapping()}\r\n\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faThumbsUp} />\r\n                                        </Button>}\r\n                                          \r\n                                            {/* <div className=\"d-flex justify-content-end mt-3\">\r\n                                                            <Button className=\"btn-user btn-primary-blue\"\r\n                                                                onClick={() => this.getDynamicFilterExecuteData()}>\r\n                                                                <FontAwesomeIcon icon={faCalculator} /> { }\r\n                                                                <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n                                                            </Button>\r\n                                                        </div> */}\r\n                                        </div>\r\n\r\n                                    </Card.Subtitle>\r\n                                    {/* <FilterQueryBuilder\r\n                                                    fields={this.state.fields}\r\n                                                    queryArray={this.state.queryArray}\r\n                                                    skip={this.state.kendoSkip}\r\n                                                    take={this.state.kendoTake}\r\n                                                    onChange={this.onChange}\r\n                                                    tree={this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree}\r\n                                                    gridColumns={this.slideList}\r\n                                                    filterData={this.props.Login.slideResult || []}\r\n                                                    handlePageChange={this.handlePageChangeFilter}\r\n                                                    static={true}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    updateStore={this.props.updateStore}\r\n                                                /> */}\r\n                                       \r\n                                    <DataGrid\r\n                                        isRefreshRequired={false}\r\n                                        // fetchRecord={this.fetchRecord}\r\n                                        // editParam={{ 'primaryKeyField': 'nsamplestoragemappingcode' }}\r\n                                        // handleClickDelete={this.deletesamplestoragemapping}\r\n                                        methodUrl={'SampleStorageMapping'}\r\n                                        isAddRequired={this.state.masterData &&  \r\n                                            this.state.masterData.sampleStoragemapping?true:false}\r\n                                        primaryKeyField={'nsamplestoragemappingcode'}\r\n                                        data={this.state.masterData && this.state.masterData.sampleStoragemapping &&\r\n                                            this.state.masterData.sampleStoragemapping}\r\n                                        dataResult={this.state.masterData &&\r\n                                            this.state.masterData.sampleStoragemapping &&\r\n                                            process(this.state.masterData.sampleStoragemapping || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 })}\r\n                                        dataState={this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }}\r\n                                        dataStateChange={this.dataStateChange}\r\n                                        extractedColumnList={[\r\n                                            { \"idsName\": \"IDS_SAMPLESTORAGEPATH\", \"dataField\": \"scontainerpath\", \"width\": \"450px\" },\r\n                                            { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"width\": \"100px\" },\r\n                                            { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"width\": \"100px\" }, \r\n                                            { \"idsName\": \"IDS_CONTAINERID\", \"dataField\": \"sboxid\", \"width\": \"100px\" },\r\n                                            { \"idsName\": \"IDS_CONTAINERTYPE\", \"dataField\": \"scontainertype\", \"width\": \"100px\" },\r\n                                            { \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\", \"dataField\": \"scontainerstructurename\", \"width\": \"200px\" },\r\n                                            { \"idsName\": \"IDS_AVAILABLEQUANTITY\", \"dataField\": \"nquantity\", \"width\": \"100px\" },\r\n                                            { \"idsName\": \"IDS_NEEDPREDEFINEDSTRUCURE\", \"dataField\": \"stransdisplaystatus\", \"width\": \"100px\" }\r\n\r\n                                        ]}\r\n                                        controlMap={this.state.controlMap}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        //     fetchRecord={this.fetchRecord}\r\n                                        //    editParam={{ 'primaryKeyField': 'nsamplestoragemappingcode' }}\r\n                                        deleteRecord={this.deleteRecord}\r\n                                        addRecord={() => this.openStorageMapping()}\r\n                                        pageable={true}\r\n                                        scrollable={'scrollable'}\r\n                                        // isComponent={true}\r\n                                        gridHeight={'600px'}\r\n                                        isActionRequired={\r\n                                            this.state.masterData&&this.state.masterData.\r\n                                            selectedSampleStorageLocation&&this.state.masterData.\r\n                                                selectedSampleStorageLocation.nmappingtranscode\r\n                                                === transactionStatus.DRAFT ? true : false}\r\n                                        isToolBarRequired={true}\r\n                                        actionIcons={this.state.masterData&&this.state.masterData.\r\n                                            selectedSampleStorageLocation&&this.state.masterData.\r\n                                            selectedSampleStorageLocation.nmappingtranscode\r\n                                            === transactionStatus.DRAFT ?\r\n                                            [\r\n                                                {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                    controlname: \"faPencilAlt\",\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\r\n                                                    objectName: \"edit\",\r\n                                                    onClick: this.fetchRecord\r\n                                                },\r\n                                                {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                    controlname: \"faTrashAlt\",\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\r\n                                                    objectName: \"delete\",\r\n                                                    onClick: this.deletesamplestoragemapping\r\n                                                },\r\n                                                // {\r\n                                                //     title: this.props.intl.formatMessage({ id: \"IDS_ADDSAMPLE\" }),\r\n                                                //     controlname: \"faPenSquare\",\r\n                                                //     hidden: false,\r\n                                                //     objectName: \"add\",\r\n                                                //     onClick: (param) => this.addSample(param, 1)\r\n                                                // }\r\n                                            ] : []}\r\n                                    />    </>\r\n\r\n\r\n                       \r\n\r\n\r\n                        </SplitterLayout>\r\n                    </Row>\r\n                </ListWrapper >\r\n\r\n                {\r\n                    this.state.openModal &&\r\n                    <SlideOutModal show={this.state.openModal}\r\n                        closeModal={this.closeModal}\r\n                        size={this.state.openSpreadSheet ? 'xl' : \"\"}\r\n                        operation={this.state.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGEMAPPING\" })}\r\n                        onSaveClick={this.onSampleMappingSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        // className={\"wide-popup\"}\r\n\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={\r\n                           // this.state.importdata ?\r\n                                // <Upload\r\n                                //     batch={false}\r\n                                //     multiple={false}\r\n                                //     defaultFiles={[]}\r\n                                //     withCredentials={false}\r\n                                //     autoUpload={false}\r\n                                //     onAdd={this.handleAdd}\r\n                                // />\r\n                               // :\r\n\r\n                                this.props.Login.loadEsign ?\r\n                                    <Esign operation={this.props.Login.operation}\r\n                                        formatMessage={this.props.intl.formatMessage}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                    />\r\n                                    :\r\n                                    this.state.openSpreadSheet ? <>\r\n                                        {/* <Spreadsheet\r\n                                    data={this.state.placedSample}\r\n                                    Rows={this.state.Rows || 1}\r\n                                    columns={this.state.columns || 1}\r\n                                /> */}\r\n                                        <MatrixComponent\r\n                                            Rows={this.state.Rows || 1}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            columns={this.state.columns || 1}\r\n                                            selectedRecord={this.state.selectedRecord.sheetData || {}}\r\n                                            sheetData={this.state.sheetData || {}}\r\n                                            isMultiSampleAdd={this.state.isMultiSampleAdd}\r\n                                            childSheetDataChange={this.childSheetDataChange}\r\n                                            editedsheetData={this.state.editedsheetData}\r\n                                            multipleSheetData={this.state.masterData &&\r\n                                                this.state.masterData.sampleStoragemapping &&\r\n                                                process(this.state.masterData.sampleStoragemapping || [],\r\n                                                    this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }).data} />\r\n                                    </> :\r\n                                        <AddSampleStorageMapping\r\n                                            operation={this.state.operation}\r\n                                            selectedRecordFilter={this.state.selectedRecordFilter}\r\n                                            onInputChange={(e) => this.onInputChange(e)}\r\n                                            onComboChange={this.onComboChange}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            childDataChange={this.childDataChange}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                        />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService\r\n})(injectIntl(SampleStorageMapping));"]},"metadata":{},"sourceType":"module"}