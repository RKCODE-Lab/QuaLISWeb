{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\contactmaster\\\\Client.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Row, Col, FormGroup, FormLabel, Nav, Card } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { MediaLabel } from '../../components/add-client.styles';\nimport { callService, crudMaster, updateStore, validateEsignCredential, getClientComboService, getClientDetail, getClientSiteForAddEdit, getClientSiteContactDetails, getClientContactForAddEdit, filterColumnData, changeClientCategoryFilter, addClientFile, viewAttachment } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { constructOptionList, getControlMap, showEsign, validateEmail, validatePhoneNumber } from '../../components/CommonScript';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport AddClient from './AddClient';\nimport { ContentPanel } from '../product/product.styled';\nimport ListMaster from '../../components/list-master/list-master.component'; // import ReactTooltip from 'react-tooltip';\n\nimport { ReadOnlyText } from '../../components/App.styles';\nimport ClientSiteAddressTab from '../../pages/contactmaster/ClientSiteAddressTab';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { transactionStatus } from '../../components/Enumeration';\nimport ClientCategoryFilter from './ClientCategoryFilter';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { Affix } from 'rsuite';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ClientFileTab from './ClientFileTabs';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Client extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.state.nfilterClientCategory.value) {\n        let inputParam = {\n          inputData: {\n            nclientcatcode: this.state.nfilterClientCategory.value,\n            userinfo: this.props.Login.userInfo // nfilterClientCategory: this.state.nfilterClientCategory\n\n          },\n          classUrl: \"client\",\n          methodUrl: \"ClientByCategory\"\n        };\n        this.props.changeClientCategoryFilter(inputParam, this.props.Login.masterData.filterClientCategory, this.state.nfilterClientCategory);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CLIENTCATEGORYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = 4;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChangeFilter = (comboData, fieldName) => {\n      let nfilterClientCategory = this.state.nfilterClientCategory || {};\n      nfilterClientCategory = comboData;\n      this.searchRef.current.value = \"\";\n      this.setState({\n        nfilterClientCategory\n      });\n    };\n\n    this.getNestedFieldData = (nestedColumnArray, data) => nestedColumnArray.reduce((xs, x) => xs && xs[x] ? xs[x] : null, data);\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n      event.dataItem.expanded = !isExpanded;\n      this.setState({ ...this.props\n      });\n    };\n\n    this.detailBand = props => {\n      const Dataitem = props.dataItem;\n      const OptionalFieldList = [{\n        datafield: \"saddress1\",\n        Column: \"Address1\"\n      }, {\n        datafield: \"saddress2\",\n        Column: \"Address2\"\n      }, {\n        datafield: \"saddress3\",\n        Column: \"Address3\"\n      }, {\n        datafield: \"sphoneno\",\n        Column: \"Phone No\"\n      }, {\n        datafield: \"smobileno\",\n        Column: \"Mobile No\"\n      }, {\n        datafield: \"sfaxno\",\n        Column: \"Fax No\"\n      }, {\n        datafield: \"stransdisplaystatus\",\n        Column: \"DisplayStatus\"\n      }];\n      return /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 17\n        }\n      }, OptionalFieldList.map(fields => {\n        return /*#__PURE__*/React.createElement(Col, {\n          md: \"6\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: fields.Column,\n          message: fields.Column,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 40\n          }\n        })), /*#__PURE__*/React.createElement(MediaLabel, {\n          className: \"readonly-text font-weight-normal\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 29\n          }\n        }, Dataitem[fields.datafield])));\n      }));\n    };\n\n    this.detailedFieldList = [{\n      dataField: \"saddress1\",\n      idsName: \"IDS_ADDRESS1\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"saddress2\",\n      idsName: \"IDS_ADDRESS2\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"saddress3\",\n      idsName: \"IDS_ADDRESS3\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"sphoneno\",\n      idsName: \"IDS_PHONENO\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"smobileno\",\n      idsName: \"IDS_MOBILENO\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"sfaxno\",\n      idsName: \"IDS_FAXNO\",\n      columnSize: \"4\"\n    }];\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? 1 : 2;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\" || event.target.name === \"sfaxno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = clientDeleteParam => {\n      // const inputParam = {\n      //     classUrl: this.props.Login.inputParam.classUrl,\n      //     methodUrl: clientDeleteParam.methodUrl,\n      //     displayName: this.props.Login.inputParam.displayName,\n      //     inputData: {\n      //         [\"client\"]: clientDeleteParam.selectedRecord,\n      //         \"userinfo\": this.props.Login.userInfo\n      //     },\n      //     operation: clientDeleteParam.operation,\n      // }\n      let inputParam = {};\n\n      if (this.props.Login.screenName === 'IDS_CLIENTFILE') {\n        inputParam = {\n          classUrl: \"client\",\n          methodUrl: clientDeleteParam.methodUrl,\n          inputData: {\n            [clientDeleteParam.methodUrl.toLowerCase()]: clientDeleteParam.selectedRecord,\n            \"userinfo\": this.props.Login.userInfo\n          },\n          operation: clientDeleteParam.operation,\n          //dataState: this.state.dataState,\n          //dataStateMaterial: this.state.dataStateMaterial\n          dataState: this.state.dataState,\n          postParam: {\n            inputListName: \"Client\",\n            selectedObject: \"selectedClient\",\n            primaryKeyField: \"nclientcode\",\n            fetchUrl: \"client/getActiveClientById\",\n            fecthInputObject: {\n              userinfo: this.props.Login.userInfo\n            }\n          }\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, clientDeleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: clientDeleteParam.screenName,\n              operation: clientDeleteParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.DeleteClient = (operation, ncontrolCode) => {\n      let inputData = [];\n      inputData[\"client\"] = this.props.Login.masterData.selectedClient;\n      inputData[\"clientsite\"] = this.props.Login.masterData.selectedClientSite;\n      inputData[\"clientcontact\"] = this.props.Login.masterData.selectedClientContact;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"clientfile\"] = this.props.Login.masterData.clientFile[0];\n      const postParam = {\n        inputListName: \"Client\",\n        selectedObject: \"selectedClient\",\n        primaryKeyField: \"nclientcode\",\n        primaryKeyValue: this.props.Login.masterData.selectedClient.nclientcode,\n        fetchUrl: \"client/getActiveClientById\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        methodUrl: \"Client\",\n        //postParam,\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\",\n        postParam\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_CLIENT\",\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n\n      if (this.props.Login.masterData && this.props.Login.masterData.SelectedClientCat) {\n        const inputParam = {\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo,\n            \"nclientcatcode\": this.props.Login.masterData.SelectedClientCat.nclientcatcode\n          },\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"ClientByCategory\",\n          displayName: this.props.intl.formatMessage({\n            id: \"IDS_CLIENT\"\n          })\n        };\n        this.props.changeClientCategoryFilter(inputParam, this.props.Login.masterData.filterClientCategory, this.state.nfilterClientCategory);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CLIENTCATEGORYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteClient(\"delete\", deleteId));\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      // const isValidateEmail = this.state.selectedRecord[\"semail\"]? validateEmail(this.state.selectedRecord[\"semail\"]): true;\n      let postParam = undefined; // if (isValidateEmail) {\n\n      let inputData = [];\n      inputData[\"clientsiteaddress\"] = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n\n      if (this.props.Login.operation === \"update\") {\n        const selectedRecord = this.state.selectedRecord; // edit\n\n        postParam = {\n          inputListName: \"Client\",\n          selectedObject: \"selectedClient\",\n          primaryKeyField: \"nclientcode\"\n        };\n        inputData[\"client\"] = {};\n        this.fieldList.map(item => {\n          return inputData[\"client\"][item] = selectedRecord[item] !== null ? selectedRecord[item] : \"\";\n        });\n        inputData[\"client\"][\"nclientcode\"] = selectedRecord[\"nclientcode\"] ? selectedRecord[\"nclientcode\"] : -1;\n        inputData[\"client\"][\"ncountrycode\"] = selectedRecord[\"ncountrycode\"] ? selectedRecord[\"ncountrycode\"].value : -1;\n        inputData[\"client\"][\"nclientcatcode\"] = selectedRecord[\"nclientcatcode\"] ? selectedRecord[\"nclientcatcode\"].value : -1;\n        dataState = this.state.dataState;\n      } else {\n        //add               \n        inputData[\"client\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        this.fieldList.map(item => {\n          return inputData[\"client\"][item] = this.state.selectedRecord[item];\n        });\n        inputData[\"client\"][\"ncountrycode\"] = this.state.selectedRecord[\"ncountrycode\"] ? this.state.selectedRecord[\"ncountrycode\"].value : -1;\n        inputData[\"client\"][\"nclientcatcode\"] = this.state.selectedRecord[\"nclientcatcode\"] ? this.state.selectedRecord[\"nclientcatcode\"].value : -1;\n        inputData[\"clientsiteaddress\"][\"sclientsitename\"] = this.state.selectedRecord[\"sclientsitename\"] ? this.state.selectedRecord[\"sclientsitename\"] : \"\";\n        inputData[\"clientsiteaddress\"][\"saddress1\"] = this.state.selectedRecord[\"saddress1\"] ? this.state.selectedRecord[\"saddress1\"] : \"\";\n        inputData[\"clientsiteaddress\"][\"saddress2\"] = this.state.selectedRecord[\"saddress2\"] ? this.state.selectedRecord[\"saddress2\"] : \"\";\n        inputData[\"clientsiteaddress\"][\"saddress3\"] = this.state.selectedRecord[\"saddress3\"] ? this.state.selectedRecord[\"saddress3\"] : \"\";\n        inputData[\"clientsiteaddress\"][\"ncountrycode\"] = this.state.selectedRecord[\"ncountrycode\"] ? this.state.selectedRecord[\"ncountrycode\"].value : -1; // inputData[\"clientsiteaddress\"][\"ntransactionstatus\"] = transactionStatus.ACTIVE;\n\n        inputData[\"clientsiteaddress\"][\"ndefaultstatus\"] = transactionStatus.YES;\n        inputData[\"clientsiteaddress\"][\"scontactname\"] = this.state.selectedRecord[\"scontactname\"] ? this.state.selectedRecord[\"scontactname\"] : \"\";\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"Client\",\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId: this.state.selectedRecord[\"nclientcode\"],\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState,\n        searchRef: this.searchRef,\n        postParam: postParam,\n        filtercombochange: this.props.Login.masterData.searchedData !== undefined ? this.state.selectedRecord.nclientcatcode.value === this.props.Login.masterData.SelectedClientCat.nclientcatcode ? false : true : false\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: \"IDS_CLIENT\"\n            }),\n            //this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      } // } else {\n      //     toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }))\n      // }\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_CLIENTSITE&CONTACT\", /*#__PURE__*/React.createElement(ClientSiteAddressTab, {\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        screenName: this.props.Login.screenName,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        crudMaster: this.props.crudMaster,\n        errorCode: this.props.Login.errorCode,\n        masterStatus: this.props.Login.masterStatus,\n        openChildModal: this.props.Login.openChildModal,\n        updateStore: this.props.updateStore,\n        selectedRecord: this.props.Login.selectedRecord,\n        getClientSiteContactDetails: this.props.getClientSiteContactDetails,\n        getClientSiteForAddEdit: this.props.getClientSiteForAddEdit,\n        getClientContactForAddEdit: this.props.getClientContactForAddEdit,\n        ncontrolCode: this.props.Login.ncontrolCode,\n        userRoleControlRights: this.state.userRoleControlRights,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenData: this.props.Login.screenData,\n        validateEsignCredential: this.props.validateEsignCredential,\n        loadEsign: this.props.Login.loadEsign,\n        controlMap: this.state.controlMap,\n        Country: this.props.Login.Country,\n        countryCode: this.props.Login.countryCode,\n        SiteCode: this.props.Login.SiteCode,\n        selectedId: this.props.Login.selectedId,\n        dataState: this.props.Login.dataState,\n        settings: this.props.Login.settings,\n        addClientFile: this.props.addClientFile,\n        viewAttachment: this.props.viewAttachment,\n        linkMaster: this.props.Login.linkMaster,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 9\n        }\n      }));\n      tabMap.set(\"IDS_FILE\", /*#__PURE__*/React.createElement(ClientFileTab, {\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam // deleteRecord={this.DeleteContact}\n        ,\n        clientFile: this.props.Login.masterData.clientFile || [],\n        getAvailableData: this.props.getAvailableData,\n        addClientFile: this.props.addClientFile,\n        viewClientFile: this.viewClientFile,\n        defaultRecord: this.defaultRecord,\n        screenName: \"IDS_CLIENTFILE\",\n        settings: this.props.Login.settings,\n        ncontrolCode: this.props.Login.ncontrolCode,\n        masterData: this.props.Login.masterData,\n        crudMaster: this.props.crudMaster,\n        deleteRecord: this.deleteRecord,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 886,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.viewClientFile = filedata => {\n      const inputParam = {\n        inputData: {\n          clientfile: filedata,\n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: \"client\",\n        operation: \"view\",\n        methodUrl: \"AttachedClientFile\",\n        screenName: \"Client File\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      addScreen: false,\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      operation: \"create\",\n      dataResult: [],\n      dataState: _dataState,\n      clientData: [],\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      selectedRecord: {},\n      countryList: []\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.mandatoryFields = [{\n      \"idsName\": \"IDS_CLIENTNAME\",\n      \"dataField\": \"sclientname\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_CLIENTID\",\n      \"dataField\": \"sclientid\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_CLIENTSITENAME\",\n      \"mandatory\": true,\n      \"dataField\": \"sclientsitename\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_CLIENTCONTACTNAME\",\n      \"mandatory\": true,\n      \"dataField\": \"scontactname\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_ADDRESS1\",\n      \"dataField\": \"saddress1\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_COUNTRY\",\n      \"dataField\": \"ncountrycode\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.mandatoryUpdateFields = [{\n      \"idsName\": \"IDS_CLIENTNAME\",\n      \"dataField\": \"sclientname\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_CLIENTID\",\n      \"dataField\": \"sclientid\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let userStatusCSS = \"\";\n    let activeIconCSS = \"fa fa-check\";\n\n    if (this.props.Login.masterData.selectedClient && this.props.Login.masterData.selectedClient.ntransactionstatus === transactionStatus.DEACTIVE) {\n      userStatusCSS = \"outline-secondary\";\n      activeIconCSS = \"\";\n    } else if (this.props.Login.masterData.selectedClient && this.props.Login.masterData.selectedClient.ntransactionstatus === transactionStatus.ACTIVE) {\n      userStatusCSS = \"outline-success\";\n    } else {\n      userStatusCSS = \"outline-Final\";\n    }\n\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_CLIENTNAME\",\n      \"dataField\": \"sclientname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_CLIENTID\",\n      \"dataField\": \"sclientid\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_COUNTRYNAME\",\n      \"dataField\": \"scountryname\",\n      \"width\": \"200px\"\n    }, // { \"idsName\": \"IDS_EMAIL\", \"dataField\": \"semail\", \"width\": \"200px\" },\n    {\n      \"idsName\": \"IDS_STATUS\",\n      \"dataField\": \"stransdisplaystatus\",\n      \"width\": \"100px\"\n    }];\n    this.fieldList = [\"sclientname\", \"sclientid\", \"saddress1\", // \"saddress2\", \"saddress3\",  \"sphoneno\", \"smobileno\", \"sfaxno\", \"semail\", \n    \"sclientsitename\", \"scontactname\", \"ntransactionstatus\", \"ncountrycode\"];\n    const addId = this.state.controlMap.has(\"AddClient\") && this.state.controlMap.get(\"AddClient\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditClient\") && this.state.controlMap.get(\"EditClient\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteClient\") && this.state.controlMap.get(\"DeleteClient\").ncontrolcode;\n    const clientAddParam = {\n      screenName: \"IDS_CLIENT\",\n      operation: \"create\",\n      primaryKeyField: \"nclientcode\",\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId,\n      nfilterClientCategory: this.state.nfilterClientCategory\n    };\n    const clientEditParam = {\n      screenName: \"IDS_CLIENT\",\n      operation: \"update\",\n      primaryKeyField: \"nclientcode\",\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId,\n      masterData: this.props.Login.masterData,\n      nfilterClientCategory: this.state.nfilterClientCategory\n    };\n    const clientDeleteParam = {\n      screenName: \"IDS_CLIENT\",\n      methodUrl: \"Client\",\n      operation: \"delete\",\n      ncontrolCode: deleteId\n    };\n    const filterParam = {\n      inputListName: \"Client\",\n      selectedObject: \"selectedClient\",\n      primaryKeyField: \"nclientcode\",\n      fetchUrl: \"client/getSelectedClientDetail\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sclientname\", \"sclientid\", \"address1\", \"saddress2\", \"saddress3\", \"sphoneno\", \"smobileno\", \"sfaxno\", \"semail\", \"stransdisplaystatus\"]\n    };\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: \"IDS_CLIENT\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.Client,\n      getMasterDetail: Client => this.props.getClientDetail(Client, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedClient,\n      primaryKeyField: \"nclientcode\",\n      mainField: \"sclientname\",\n      firstField: \"sclientid\",\n      secondField: \"stransdisplaystatus\",\n      isIDSField: \"Yes\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: false,\n      openModal: () => this.props.getClientComboService(clientAddParam),\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_CLIENTCATEGORYFILTER\": /*#__PURE__*/React.createElement(ClientCategoryFilter, {\n          filterClientCategory: this.state.filterClientCategory || [],\n          nfilterClientCategory: this.state.nfilterClientCategory || {},\n          onComboChange: this.onComboChangeFilter,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 41\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 30\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 29\n      }\n    }, this.props.Login.masterData.selectedClient && this.props.Login.masterData.Client.length > 0 && this.props.Login.masterData.selectedClient ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedClient.sclientname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${userStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: activeIconCSS,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 61\n      }\n    }), this.props.Login.masterData.selectedClient.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: e => this.props.getClientComboService(clientEditParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      href: \"\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 61\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 29\n      }\n    })))))) : \"\")))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation == \"create\" ? this.mandatoryFields || [] : this.mandatoryUpdateFields || [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 22\n        }\n      }) : /*#__PURE__*/React.createElement(AddClient, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        formatMessage: this.props.intl.formatMessage,\n        countryList: this.state.countryList || [],\n        clientCategoryList: this.props.Login.clientCategoryList || [],\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 24\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 18\n      }\n    }));\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.filterClientCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_CLIENTCATEGORY\",\n        \"value\": this.props.Login.masterData.SelectedClientCat ? this.props.Login.masterData.SelectedClientCat.sclientcatname : \"NA\"\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataState\n        });\n      }\n\n      let filterClientCategory = this.state.filterClientCategory || {};\n      let nfilterClientCategory = this.state.nfilterClientCategory || {};\n\n      if (this.props.Login.masterData.SelectedClientCat && this.props.Login.masterData.SelectedClientCat !== previousProps.Login.masterData.SelectedClientCat) {\n        nfilterClientCategory = {\n          label: this.props.Login.masterData.SelectedClientCat.sclientcatname,\n          value: this.props.Login.masterData.SelectedClientCat.nclientcatcode,\n          item: this.props.Login.masterData.SelectedClientCat\n        };\n      }\n\n      if (this.props.Login.masterData.filterClientCategory !== previousProps.Login.masterData.filterClientCategory) {\n        const clientCategoryMap = constructOptionList(this.props.Login.masterData.filterClientCategory || [], \"nclientcatcode\", \"sclientcatname\", 'nclientcatcode', 'ascending', false);\n        filterClientCategory = clientCategoryMap.get(\"OptionList\");\n\n        if (clientCategoryMap.get(\"DefaultValue\")) {\n          nfilterClientCategory = clientCategoryMap.get(\"DefaultValue\");\n        } else if (filterClientCategory && filterClientCategory.length > 0) {\n          nfilterClientCategory = filterClientCategory[0];\n        }\n      } else if (this.props.Login.masterData.nfilterClientCategory !== previousProps.Login.masterData.nfilterClientCategory) {\n        nfilterClientCategory = this.props.Login.masterData.nfilterClientCategory;\n      }\n\n      this.setState({\n        nfilterClientCategory,\n        filterClientCategory\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.countryList !== previousProps.Login.countryList) {\n      const countryList = constructOptionList(this.props.Login.countryList || [], \"ncountrycode\", \"scountryname\", undefined, undefined, undefined);\n      const countryListClient = countryList.get(\"OptionList\");\n      this.setState({\n        countryList: countryListClient\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getClientComboService,\n  getClientDetail,\n  getClientSiteForAddEdit,\n  getClientSiteContactDetails,\n  getClientContactForAddEdit,\n  filterColumnData,\n  changeClientCategoryFilter,\n  addClientFile,\n  viewAttachment\n})(injectIntl(Client));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/contactmaster/Client.jsx"],"names":["React","connect","FormattedMessage","injectIntl","Row","Col","FormGroup","FormLabel","Nav","Card","toast","process","SlideOutModal","Esign","MediaLabel","callService","crudMaster","updateStore","validateEsignCredential","getClientComboService","getClientDetail","getClientSiteForAddEdit","getClientSiteContactDetails","getClientContactForAddEdit","filterColumnData","changeClientCategoryFilter","addClientFile","viewAttachment","DEFAULT_RETURN","constructOptionList","getControlMap","showEsign","validateEmail","validatePhoneNumber","FontAwesomeIcon","faPencilAlt","faTrashAlt","AddClient","ContentPanel","ListMaster","ReadOnlyText","ClientSiteAddressTab","ConfirmMessage","transactionStatus","ClientCategoryFilter","BreadcrumbComponent","Affix","CustomTabs","ClientFileTab","mapStateToProps","state","Login","Client","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","openFilter","showFilter","updateInfo","typeName","closeFilter","onFilterSubmit","nfilterClientCategory","value","inputParam","inputData","nclientcatcode","userinfo","userInfo","classUrl","methodUrl","masterData","filterClientCategory","warn","intl","formatMessage","id","closeModal","loadEsign","openModal","selectedRecord","operation","selectedId","onComboChangeFilter","comboData","fieldName","searchRef","current","getNestedFieldData","nestedColumnArray","reduce","xs","x","expandChange","isExpanded","dataItem","expanded","undefined","aggregates","detailBand","Dataitem","OptionalFieldList","datafield","Column","map","fields","detailedFieldList","dataField","idsName","columnSize","onComboChange","onInputOnChange","target","type","name","checked","deleteRecord","clientDeleteParam","screenName","toLowerCase","postParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","userRoleControlRights","nformcode","ncontrolCode","screenData","DeleteClient","selectedClient","selectedClientSite","selectedClientContact","clientFile","primaryKeyValue","nclientcode","reloadData","SelectedClientCat","displayName","ConfirmDelete","deleteId","confirmMessage","confirm","onSaveClick","saveType","formRef","fieldList","item","nmastersitecode","YES","filtercombochange","searchedData","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","onTabChange","tabProps","tabDetail","tabMap","Map","set","errorCode","masterStatus","openChildModal","controlMap","Country","countryCode","SiteCode","settings","linkMaster","getAvailableData","viewClientFile","defaultRecord","filedata","clientfile","createRef","extractedColumnList","skip","take","parseInt","addScreen","error","clientData","countryList","mandatoryFields","mandatoryUpdateFields","getDerivedStateFromProps","render","userStatusCSS","activeIconCSS","ntransactionstatus","DEACTIVE","ACTIVE","addId","has","get","ncontrolcode","editId","clientAddParam","clientEditParam","filterParam","searchFieldList","breadCrumbData","filterData","length","sclientname","stransdisplaystatus","indexOf","e","clientCategoryList","generateBreadCrumData","push","sclientcatname","componentDidUpdate","previousProps","Object","values","clientCategoryMap","countryListClient"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Row, Col, FormGroup, FormLabel, Nav, Card } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport { MediaLabel } from '../../components/add-client.styles';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, \r\n    getClientComboService ,getClientDetail,getClientSiteForAddEdit,\r\n    getClientSiteContactDetails,getClientContactForAddEdit,\r\n    filterColumnData,changeClientCategoryFilter,addClientFile,viewAttachment } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { constructOptionList, getControlMap, showEsign, validateEmail, validatePhoneNumber ,} from '../../components/CommonScript';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport AddClient from './AddClient';\r\nimport { ContentPanel } from '../product/product.styled';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { ReadOnlyText } from '../../components/App.styles';\r\nimport ClientSiteAddressTab from '../../pages/contactmaster/ClientSiteAddressTab';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport ClientCategoryFilter from './ClientCategoryFilter';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ClientFileTab from './ClientFileTabs';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Client extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            addScreen: false, data: [], masterStatus: \"\", error: \"\", operation: \"create\",\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            clientData: [],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            selectedRecord: {}, \r\n            countryList: []\r\n        };\r\n        this.searchRef = React.createRef();\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        this.mandatoryFields = [\r\n            { \"idsName\": \"IDS_CLIENTNAME\", \"dataField\": \"sclientname\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            { \"idsName\": \"IDS_CLIENTID\", \"dataField\": \"sclientid\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            { \"idsName\": \"IDS_CLIENTSITENAME\", \"mandatory\": true, \"dataField\": \"sclientsitename\", \"width\": \"150px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            { \"idsName\": \"IDS_CLIENTCONTACTNAME\", \"mandatory\": true, \"dataField\": \"scontactname\", \"width\": \"150px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            { \"idsName\": \"IDS_ADDRESS1\", \"dataField\": \"saddress1\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_COUNTRY\", \"dataField\": \"ncountrycode\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            \r\n        ]\r\n        this.mandatoryUpdateFields = [\r\n            { \"idsName\": \"IDS_CLIENTNAME\", \"dataField\": \"sclientname\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            { \"idsName\": \"IDS_CLIENTID\", \"dataField\": \"sclientid\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n        ]\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        if (this.state.nfilterClientCategory.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    nclientcatcode: this.state.nfilterClientCategory.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    // nfilterClientCategory: this.state.nfilterClientCategory\r\n                },\r\n                classUrl: \"client\",\r\n                methodUrl: \"ClientByCategory\"\r\n            }\r\n            this.props.changeClientCategoryFilter(inputParam, this.props.Login.masterData.filterClientCategory, this.state.nfilterClientCategory);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_CLIENTCATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = 4;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n    onComboChangeFilter = (comboData, fieldName) => {\r\n                let nfilterClientCategory = this.state.nfilterClientCategory || {}\r\n                nfilterClientCategory = comboData;\r\n                this.searchRef.current.value = \"\";\r\n                this.setState({ nfilterClientCategory })\r\n    }\r\n\r\n    getNestedFieldData = (nestedColumnArray, data) =>\r\n        nestedColumnArray.reduce((xs, x) => (xs && xs[x]) ? xs[x] : null, data);\r\n\r\n    render() {\r\n        let userStatusCSS = \"\";\r\n        let activeIconCSS = \"fa fa-check\";\r\n        if (this.props.Login.masterData.selectedClient && this.props.Login.masterData.selectedClient.ntransactionstatus === transactionStatus.DEACTIVE) {\r\n            userStatusCSS = \"outline-secondary\";\r\n            activeIconCSS = \"\";\r\n        }\r\n        else if (this.props.Login.masterData.selectedClient && this.props.Login.masterData.selectedClient.ntransactionstatus === transactionStatus.ACTIVE) {\r\n            userStatusCSS = \"outline-success\";\r\n        }\r\n        else {\r\n            userStatusCSS = \"outline-Final\";\r\n        }\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_CLIENTNAME\", \"dataField\": \"sclientname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_CLIENTID\", \"dataField\": \"sclientid\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_COUNTRYNAME\", \"dataField\": \"scountryname\", \"width\": \"200px\" },\r\n            // { \"idsName\": \"IDS_EMAIL\", \"dataField\": \"semail\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_STATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"100px\"},\r\n        ]\r\n\r\n        this.fieldList = [\"sclientname\", \"sclientid\", \"saddress1\", \r\n        // \"saddress2\", \"saddress3\",  \"sphoneno\", \"smobileno\", \"sfaxno\", \"semail\", \r\n        \"sclientsitename\", \"scontactname\", \"ntransactionstatus\", \"ncountrycode\"];\r\n\r\n        const addId = this.state.controlMap.has(\"AddClient\") && this.state.controlMap.get(\"AddClient\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditClient\") && this.state.controlMap.get(\"EditClient\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteClient\") && this.state.controlMap.get(\"DeleteClient\").ncontrolcode;\r\n\r\n        const clientAddParam = {\r\n            screenName: \"IDS_CLIENT\", operation: \"create\", primaryKeyField: \"nclientcode\",\r\n            userInfo: this.props.Login.userInfo, ncontrolCode: addId,nfilterClientCategory:this.state.nfilterClientCategory\r\n        };\r\n\r\n        const clientEditParam = {\r\n            screenName: \"IDS_CLIENT\", operation: \"update\", primaryKeyField: \"nclientcode\",\r\n            userInfo: this.props.Login.userInfo, ncontrolCode: editId,masterData:this.props.Login.masterData,nfilterClientCategory:this.state.nfilterClientCategory\r\n        };\r\n\r\n        const clientDeleteParam = { screenName: \"IDS_CLIENT\", methodUrl: \"Client\", operation: \"delete\", ncontrolCode: deleteId };\r\n\r\n        const filterParam = {\r\n            inputListName: \"Client\", selectedObject: \"selectedClient\", primaryKeyField: \"nclientcode\",\r\n            fetchUrl: \"client/getSelectedClientDetail\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sclientname\", \"sclientid\", \"address1\",\"saddress2\",\"saddress3\",\"sphoneno\",\"smobileno\",\"sfaxno\",\"semail\" ,\"stransdisplaystatus\"]\r\n        };\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n        return (\r\n            <>\r\n            <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n            {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                <Row noGutters={true}>\r\n                    <Col md={4}>\r\n                        <ListMaster\r\n                            formatMessage={this.props.intl.formatMessage}\r\n                            screenName={\"IDS_CLIENT\"}\r\n                            masterData={this.props.Login.masterData}\r\n                            userInfo={this.props.Login.userInfo}\r\n                            masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.Client}\r\n                            getMasterDetail={(Client) => this.props.getClientDetail(Client, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                            selectedMaster={this.props.Login.masterData.selectedClient}\r\n                            primaryKeyField=\"nclientcode\"\r\n                            mainField=\"sclientname\"\r\n                            firstField=\"sclientid\"\r\n                            secondField=\"stransdisplaystatus\"\r\n                            isIDSField=\"Yes\"\r\n                            filterColumnData={this.props.filterColumnData}\r\n                            filterParam={filterParam}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            addId={addId}\r\n                            searchRef={this.searchRef}\r\n                            reloadData={this.reloadData}\r\n                            hidePaging={false}\r\n                            openModal={() => this.props.getClientComboService(clientAddParam)}\r\n                            openFilter={this.openFilter}\r\n                            closeFilter={this.closeFilter}\r\n                            onFilterSubmit={this.onFilterSubmit}\r\n                            showFilterIcon={true}\r\n                            showFilter={this.props.Login.showFilter}\r\n                            filterComponent={[\r\n                                {\r\n                                    \"IDS_CLIENTCATEGORYFILTER\":\r\n                                        <ClientCategoryFilter\r\n                                            filterClientCategory={this.state.filterClientCategory || []}\r\n                                            nfilterClientCategory={this.state.nfilterClientCategory || {}}\r\n                                            onComboChange={this.onComboChangeFilter}\r\n                                        />\r\n                                }\r\n                            ]}\r\n                        />\r\n                    </Col>\r\n                    <Col md='8'>\r\n                        <Row><Col md={12}>\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                {this.props.Login.masterData.selectedClient && this.props.Login.masterData.Client.length > 0 && this.props.Login.masterData.selectedClient ?\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedClient.sclientname}</Card.Title>\r\n                                            <Card.Subtitle>\r\n                                                <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                        <span className={`btn btn-outlined ${userStatusCSS} btn-sm ml-3`}>\r\n                                                            <i className={activeIconCSS}></i>\r\n                                                            {this.props.Login.masterData.selectedClient.stransdisplaystatus}\r\n                                                        </span>\r\n                                                    </h2>\r\n                                                    <div className=\"d-inline \">\r\n\r\n                                                        {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />  */}\r\n                                                         {/* <ProductList className=\"d-inline dropdown badget_menu\"> */}\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                           // data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={(e) => this.props.getClientComboService(clientEditParam)} >\r\n                                                            <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                          //  data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                            \r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body>\r\n                                            {/* <Row> */}\r\n                                                \r\n                                                {/* <Col md='4'>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id={'IDS_ADDRESS1'} message=\"Address1\" /></FormLabel>\r\n                                                        <ReadOnlyText> {this.props.Login.masterData.selectedClient.saddress1 === null || this.props.Login.masterData.selectedClient.saddress1.length === 0 ? '-' :\r\n                                                           this.props.Login.masterData.selectedClient.saddress1}</ReadOnlyText>\r\n                                                       \r\n                                                    </FormGroup>\r\n                                                </Col> */}\r\n                                                {/* <Col md='4'>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id={'IDS_ADDRESS2'} message=\"Address2\" /></FormLabel>\r\n                                                        <ReadOnlyText> {this.props.Login.masterData.selectedClient.saddress2 === null || this.props.Login.masterData.selectedClient.saddress2.length === 0 ? '-' :\r\n                                                           this.props.Login.masterData.selectedClient.saddress2}</ReadOnlyText>\r\n                                                       \r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md='4'>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id={'IDS_ADDRESS3'} message=\"Address3\" /></FormLabel>\r\n                                                        <ReadOnlyText> {this.props.Login.masterData.selectedClient.saddress3 === null || this.props.Login.masterData.selectedClient.saddress3.length === 0 ? '-' :\r\n                                                           this.props.Login.masterData.selectedClient.saddress3}</ReadOnlyText>\r\n                                                       \r\n                                                    </FormGroup>\r\n                                                </Col> */}\r\n                                                {/* <Col md='4'>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id={'IDS_PHONENO'} message=\"Phone No\" /></FormLabel>\r\n                                                        <ReadOnlyText> {this.props.Login.masterData.selectedClient.sphoneno === null || this.props.Login.masterData.selectedClient.sphoneno.length === 0 ? '-' :\r\n                                                           this.props.Login.masterData.selectedClient.sphoneno}</ReadOnlyText>\r\n                                                       \r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md='4'>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id={'IDS_MOBILENO'} message=\"Mobile No\" /></FormLabel>\r\n                                                        <ReadOnlyText> {this.props.Login.masterData.selectedClient.smobileno === null || this.props.Login.masterData.selectedClient.smobileno.length === 0 ? '-' :\r\n                                                           this.props.Login.masterData.selectedClient.smobileno}</ReadOnlyText>\r\n                                                       \r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md='4'>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id={'IDS_FAXNO'} message=\"Fax No\" /></FormLabel>\r\n                                                        <ReadOnlyText> {this.props.Login.masterData.selectedClient.sfaxno === null || this.props.Login.masterData.selectedClient.sfaxno.length === 0 ? '-' :\r\n                                                           this.props.Login.masterData.selectedClient.sfaxno}</ReadOnlyText>\r\n                                                       \r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md='4'>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id={'IDS_EMAIL'} message=\"Email\" /></FormLabel>\r\n                                                        <ReadOnlyText> {this.props.Login.masterData.selectedClient.semail === null || this.props.Login.masterData.selectedClient.semail.length === 0 ? '-' :\r\n                                                           this.props.Login.masterData.selectedClient.semail}</ReadOnlyText>\r\n                                                       \r\n                                                    </FormGroup>\r\n                                                </Col> */}\r\n                                                {/* <Col md='4'>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id={'IDS_COUNTRY'} message=\"Country\" /></FormLabel>\r\n                                                        <ReadOnlyText> {this.props.Login.masterData.selectedClient.scountryname === null || this.props.Login.masterData.selectedClient.scountryname.length === 0 ? '-' :\r\n                                                           this.props.Login.masterData.selectedClient.scountryname}</ReadOnlyText>\r\n                                                       \r\n                                                    </FormGroup>\r\n                                                </Col> */}\r\n     <Row className=\"no-gutters\">\r\n                    <Col md={12}>\r\n                        <Card className=\"at-tabs\">\r\n                            <CustomTabs tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n\r\n                                            {/* </Row> */}\r\n                                            {/* <ClientSiteAddressTab\r\n                                                    operation={this.props.Login.operation}\r\n                                                    inputParam={this.props.Login.inputParam}\r\n                                                    screenName={this.props.Login.screenName}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    masterData={this.props.Login.masterData}\r\n                                                    crudMaster={this.props.crudMaster}\r\n                                                    errorCode={this.props.Login.errorCode}\r\n                                                    masterStatus={this.props.Login.masterStatus}\r\n                                                    openChildModal={this.props.Login.openChildModal}\r\n                                                    updateStore={this.props.updateStore}\r\n                                                    selectedRecord={this.props.Login.selectedRecord}\r\n                                                    getClientSiteContactDetails={this.props.getClientSiteContactDetails}\r\n                                                    getClientSiteForAddEdit={this.props.getClientSiteForAddEdit}\r\n                                                    getClientContactForAddEdit={this.props.getClientContactForAddEdit}\r\n                                                    ncontrolCode={this.props.Login.ncontrolCode}\r\n                                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                                    esignRights={this.props.Login.userRoleControlRights}\r\n                                                    screenData={this.props.Login.screenData}\r\n                                                    validateEsignCredential={this.props.validateEsignCredential}\r\n                                                    loadEsign={this.props.Login.loadEsign}\r\n                                                    controlMap={this.state.controlMap}\r\n                                                    Country={this.props.Login.Country}\r\n                                                    countryCode={this.props.Login.countryCode}\r\n                                                    SiteCode={this.props.Login.SiteCode}\r\n                                                    selectedId={this.props.Login.selectedId}\r\n                                                    dataState={this.props.Login.dataState}\r\n                                                    settings = {this.props.Login.settings}\r\n                                                    addClientFile={this.props.addClientFile}\r\n                                                    viewAttachment={this.props.viewAttachment}\r\n                                        \r\n\r\n                                                />\r\n                                        */}\r\n                                        </Card.Body>\r\n                                    </Card> : \"\"}\r\n                            </ContentPanel>\r\n                        </Col></Row>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n            {this.props.Login.openModal &&\r\n                 <SlideOutModal show={this.props.Login.openModal}\r\n                 closeModal={this.closeModal}\r\n                 operation={this.props.Login.operation}\r\n                 inputParam={this.props.Login.inputParam}\r\n                 screenName={this.props.Login.screenName}\r\n                 onSaveClick={this.onSaveClick}\r\n                 esign={this.props.Login.loadEsign}\r\n                 validateEsign={this.validateEsign}\r\n                 masterStatus={this.props.Login.masterStatus}\r\n                 updateStore={this.props.updateStore}\r\n                 selectedRecord={this.state.selectedRecord || {}}\r\n                 mandatoryFields={this.props.Login.operation == \"create\" ? this.mandatoryFields || [] : this.mandatoryUpdateFields || []}\r\n                 addComponent={this.props.Login.loadEsign ?\r\n                     <Esign operation={this.props.Login.operation}\r\n                         formatMessage={this.props.intl.formatMessage}\r\n                         onInputOnChange={this.onInputOnChange}\r\n                         inputParam={this.props.Login.inputParam}\r\n                         selectedRecord={this.state.selectedRecord || {}}\r\n                     />\r\n                     : <AddClient\r\n                         selectedRecord={this.state.selectedRecord || {}}\r\n                         onInputOnChange={this.onInputOnChange}\r\n                         onComboChange={this.onComboChange}\r\n                         formatMessage={this.props.intl.formatMessage}\r\n                         countryList={this.state.countryList || []}\r\n                         clientCategoryList={this.props.Login.clientCategoryList || []}\r\n                         operation={this.props.Login.operation}\r\n                         inputParam={this.props.Login.inputParam}\r\n\r\n                     />}\r\n             />\r\n            }\r\n        </>\r\n    );\r\n        \r\n    }\r\n\r\n    expandChange = (event) => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined ?\r\n                event.dataItem.aggregates : event.dataItem.expanded;\r\n        event.dataItem.expanded = !isExpanded;\r\n        this.setState({ ...this.props });\r\n    }\r\n    detailBand = (props) => {\r\n\r\n        const Dataitem = props.dataItem\r\n        const OptionalFieldList = [\r\n            { datafield: \"saddress1\", Column: \"Address1\" },\r\n            { datafield: \"saddress2\", Column: \"Address2\" },\r\n            { datafield: \"saddress3\", Column: \"Address3\" },\r\n            { datafield: \"sphoneno\", Column: \"Phone No\" },\r\n            { datafield: \"smobileno\", Column: \"Mobile No\" },\r\n            { datafield: \"sfaxno\", Column: \"Fax No\" },\r\n            { datafield: \"stransdisplaystatus\", Column: \"DisplayStatus\" },\r\n\r\n        ];\r\n        return (<Row>\r\n            {OptionalFieldList.map((fields) => {\r\n                return (\r\n                    <Col md='6'>\r\n                        <FormGroup>\r\n                            <FormLabel><FormattedMessage id={fields.Column} message={fields.Column} /></FormLabel>\r\n                            <MediaLabel className=\"readonly-text font-weight-normal\">{Dataitem[fields.datafield]}</MediaLabel>\r\n                        </FormGroup>\r\n                    </Col>\r\n                )\r\n            })\r\n            }\r\n        </Row>)\r\n    }\r\n    detailedFieldList = [\r\n        { dataField: \"saddress1\", idsName: \"IDS_ADDRESS1\" , columnSize:\"4\"},\r\n        { dataField: \"saddress2\", idsName: \"IDS_ADDRESS2\" , columnSize:\"4\"},\r\n        { dataField: \"saddress3\", idsName: \"IDS_ADDRESS3\", columnSize:\"4\" },\r\n        { dataField: \"sphoneno\", idsName: \"IDS_PHONENO\" , columnSize:\"4\"},\r\n        { dataField: \"smobileno\", idsName: \"IDS_MOBILENO\" , columnSize:\"4\"},\r\n        { dataField: \"sfaxno\", idsName: \"IDS_FAXNO\" , columnSize:\"4\"},\r\n    ];\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.filterClientCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_CLIENTCATEGORY\",\r\n                    \"value\": this.props.Login.masterData.SelectedClientCat ? this.props.Login.masterData.SelectedClientCat.sclientcatname : \"NA\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                });\r\n            }\r\n            else {\r\n\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    dataState\r\n                });\r\n            }\r\n\r\n            let filterClientCategory = this.state.filterClientCategory || {};\r\n            let nfilterClientCategory = this.state.nfilterClientCategory || {};\r\n            if (\r\n              this.props.Login.masterData.SelectedClientCat &&\r\n              this.props.Login.masterData.SelectedClientCat !==\r\n              previousProps.Login.masterData.SelectedClientCat\r\n            ) {\r\n                nfilterClientCategory = {\r\n                label: this.props.Login.masterData.SelectedClientCat.sclientcatname,\r\n                value: this.props.Login.masterData.SelectedClientCat.nclientcatcode,\r\n                item: this.props.Login.masterData.SelectedClientCat,\r\n              };\r\n            }\r\n            if (this.props.Login.masterData.filterClientCategory !== previousProps.Login.masterData.filterClientCategory) {\r\n                const clientCategoryMap = constructOptionList(this.props.Login.masterData.filterClientCategory || [], \"nclientcatcode\",\r\n                    \"sclientcatname\", 'nclientcatcode', 'ascending', false);\r\n                    filterClientCategory = clientCategoryMap.get(\"OptionList\");\r\n                if (clientCategoryMap.get(\"DefaultValue\")) {\r\n                    nfilterClientCategory = clientCategoryMap.get(\"DefaultValue\");\r\n                } else if (filterClientCategory && filterClientCategory.length > 0) {\r\n                    nfilterClientCategory = filterClientCategory[0];\r\n                }\r\n            } else if (this.props.Login.masterData.nfilterClientCategory !== previousProps.Login.masterData.nfilterClientCategory) {\r\n                nfilterClientCategory = this.props.Login.masterData.nfilterClientCategory;\r\n            }\r\n                this.setState({ nfilterClientCategory, filterClientCategory });\r\n            \r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.countryList !== previousProps.Login.countryList) {\r\n\r\n            const countryList = constructOptionList(this.props.Login.countryList || [], \"ncountrycode\",\r\n                \"scountryname\", undefined, undefined, undefined);\r\n            const countryListClient = countryList.get(\"OptionList\");\r\n\r\n            this.setState({ countryList: countryListClient });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 1 : 2;\r\n            }\r\n        } else if (event.target.type === 'select-one') {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        } else {\r\n            if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\" || event.target.name === \"sfaxno\") {\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    deleteRecord = (clientDeleteParam) => {\r\n       \r\n        // const inputParam = {\r\n        //     classUrl: this.props.Login.inputParam.classUrl,\r\n        //     methodUrl: clientDeleteParam.methodUrl,\r\n        //     displayName: this.props.Login.inputParam.displayName,\r\n        //     inputData: {\r\n        //         [\"client\"]: clientDeleteParam.selectedRecord,\r\n        //         \"userinfo\": this.props.Login.userInfo\r\n        //     },\r\n        //     operation: clientDeleteParam.operation,\r\n        // }\r\n        let inputParam = {};\r\n            if (this.props.Login.screenName === 'IDS_CLIENTFILE') {\r\n                inputParam = {\r\n                    classUrl: \"client\",\r\n                    methodUrl: clientDeleteParam.methodUrl,\r\n                    inputData: {\r\n                        [clientDeleteParam.methodUrl.toLowerCase()]: clientDeleteParam.selectedRecord,\r\n                        \"userinfo\": this.props.Login.userInfo,\r\n\r\n                    },\r\n                    operation: clientDeleteParam.operation,\r\n                    //dataState: this.state.dataState,\r\n                    //dataStateMaterial: this.state.dataStateMaterial\r\n                    dataState: this.state.dataState,\r\n                    postParam: {\r\n                        inputListName: \"Client\", selectedObject: \"selectedClient\", primaryKeyField: \"nclientcode\",\r\n                        fetchUrl: \"client/getActiveClientById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                    }\r\n                }\r\n\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, clientDeleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: clientDeleteParam.screenName, operation: clientDeleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    }\r\n    DeleteClient= (operation, ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        inputData[\"client\"] = this.props.Login.masterData.selectedClient;\r\n        inputData[\"clientsite\"] = this.props.Login.masterData.selectedClientSite;\r\n        inputData[\"clientcontact\"] = this.props.Login.masterData.selectedClientContact;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"clientfile\"] = this.props.Login.masterData.clientFile[0];\r\n        const postParam = {\r\n            inputListName: \"Client\", selectedObject: \"selectedClient\",\r\n            primaryKeyField: \"nclientcode\",\r\n            primaryKeyValue: this.props.Login.masterData.selectedClient.nclientcode,\r\n            fetchUrl: \"client/getActiveClientById\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"Client\", \r\n            //postParam,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\",\r\n            postParam\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_CLIENT\", operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n  \r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        if(this.props.Login.masterData && this.props.Login.masterData.SelectedClientCat){\r\n\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo, \"nclientcatcode\": this.props.Login.masterData.SelectedClientCat.nclientcatcode },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl:\"ClientByCategory\",\r\n            displayName:this.props.intl.formatMessage({ id: \"IDS_CLIENT\" })      \r\n        };\r\n\r\n        this.props.changeClientCategoryFilter(inputParam,this.props.Login.masterData.filterClientCategory,this.state.nfilterClientCategory);\r\n    } else {\r\n        toast.warn(\r\n            this.props.intl.formatMessage({\r\n              id: \"IDS_CLIENTCATEGORYNOTAVAILABLE\",\r\n            })\r\n          );\r\n    }\r\n    }\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.DeleteClient(\"delete\",deleteId));\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        // const isValidateEmail = this.state.selectedRecord[\"semail\"]? validateEmail(this.state.selectedRecord[\"semail\"]): true;\r\n        let postParam = undefined;\r\n\r\n        // if (isValidateEmail) {\r\n            let inputData = [];\r\n            inputData[\"clientsiteaddress\"] = {};\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let dataState = undefined;\r\n            if (this.props.Login.operation === \"update\") {\r\n                const selectedRecord=this.state.selectedRecord;\r\n                // edit\r\n                postParam = {\r\n                    inputListName: \"Client\",\r\n                    selectedObject: \"selectedClient\",\r\n                    primaryKeyField: \"nclientcode\",\r\n                  };\r\n                inputData[\"client\"] = {};\r\n\r\n                this.fieldList.map(item => {\r\n                    return inputData[\"client\"][item] = selectedRecord[item] !== null ? selectedRecord[item] : \"\";\r\n               })\r\n               inputData[\"client\"][\"nclientcode\"] =selectedRecord[\"nclientcode\"] ? selectedRecord[\"nclientcode\"] : -1;\r\n               inputData[\"client\"][\"ncountrycode\"] = selectedRecord[\"ncountrycode\"] ? selectedRecord[\"ncountrycode\"].value : -1;\r\n               inputData[\"client\"][\"nclientcatcode\"] = selectedRecord[\"nclientcatcode\"] ? selectedRecord[\"nclientcatcode\"].value : -1;\r\n                dataState = this.state.dataState;\r\n            }\r\n            else {\r\n                //add               \r\n                inputData[\"client\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n\r\n                this.fieldList.map(item => {\r\n                    return inputData[\"client\"][item] = this.state.selectedRecord[item]\r\n                })\r\n                inputData[\"client\"][\"ncountrycode\"] = this.state.selectedRecord[\"ncountrycode\"] ? this.state.selectedRecord[\"ncountrycode\"].value : -1;\r\n                inputData[\"client\"][\"nclientcatcode\"] = this.state.selectedRecord[\"nclientcatcode\"] ? this.state.selectedRecord[\"nclientcatcode\"].value : -1;\r\n                inputData[\"clientsiteaddress\"][\"sclientsitename\"] = this.state.selectedRecord[\"sclientsitename\"] ? this.state.selectedRecord[\"sclientsitename\"] : \"\";\r\n                inputData[\"clientsiteaddress\"][\"saddress1\"] = this.state.selectedRecord[\"saddress1\"] ? this.state.selectedRecord[\"saddress1\"] : \"\";\r\n                inputData[\"clientsiteaddress\"][\"saddress2\"] = this.state.selectedRecord[\"saddress2\"] ? this.state.selectedRecord[\"saddress2\"] : \"\";\r\n                inputData[\"clientsiteaddress\"][\"saddress3\"] = this.state.selectedRecord[\"saddress3\"] ? this.state.selectedRecord[\"saddress3\"] : \"\";\r\n                inputData[\"clientsiteaddress\"][\"ncountrycode\"] = this.state.selectedRecord[\"ncountrycode\"] ? this.state.selectedRecord[\"ncountrycode\"].value : -1;\r\n                // inputData[\"clientsiteaddress\"][\"ntransactionstatus\"] = transactionStatus.ACTIVE;\r\n                inputData[\"clientsiteaddress\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n                inputData[\"clientsiteaddress\"][\"scontactname\"] = this.state.selectedRecord[\"scontactname\"] ? this.state.selectedRecord[\"scontactname\"] : \"\";\r\n\r\n            }\r\n     \r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: \"Client\",\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData,\r\n                selectedId: this.state.selectedRecord[\"nclientcode\"],\r\n                operation: this.props.Login.operation, saveType, formRef, dataState,\r\n                searchRef: this.searchRef,\r\n                postParam:postParam,\r\n                filtercombochange:this.props.Login.masterData.searchedData!==undefined?\r\n                    this.state.selectedRecord.nclientcatcode.value === this.props.Login.masterData.SelectedClientCat.nclientcatcode?false:true:false\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_CLIENT\"}),\r\n                        //this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: this.props.Login.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        // } else {\r\n        //     toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }))\r\n        // }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    tabDetail =     () => {\r\n        const tabMap = new Map();\r\n\r\n        tabMap.set(\"IDS_CLIENTSITE&CONTACT\",\r\n\r\n        <ClientSiteAddressTab\r\n            operation={this.props.Login.operation}\r\n            inputParam={this.props.Login.inputParam}\r\n            screenName={this.props.Login.screenName}\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            crudMaster={this.props.crudMaster}\r\n            errorCode={this.props.Login.errorCode}\r\n            masterStatus={this.props.Login.masterStatus}\r\n            openChildModal={this.props.Login.openChildModal}\r\n            updateStore={this.props.updateStore}\r\n            selectedRecord={this.props.Login.selectedRecord}\r\n            getClientSiteContactDetails={this.props.getClientSiteContactDetails}\r\n            getClientSiteForAddEdit={this.props.getClientSiteForAddEdit}\r\n            getClientContactForAddEdit={this.props.getClientContactForAddEdit}\r\n            ncontrolCode={this.props.Login.ncontrolCode}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            esignRights={this.props.Login.userRoleControlRights}\r\n            screenData={this.props.Login.screenData}\r\n            validateEsignCredential={this.props.validateEsignCredential}\r\n            loadEsign={this.props.Login.loadEsign}\r\n            controlMap={this.state.controlMap}\r\n            Country={this.props.Login.Country}\r\n            countryCode={this.props.Login.countryCode}\r\n            SiteCode={this.props.Login.SiteCode}\r\n            selectedId={this.props.Login.selectedId}\r\n            dataState={this.props.Login.dataState}\r\n            settings = {this.props.Login.settings}\r\n            addClientFile={this.props.addClientFile}\r\n            viewAttachment={this.props.viewAttachment}\r\n            linkMaster = {this.props.Login.linkMaster}\r\n            \r\n        \r\n    />)\r\n\r\n        tabMap.set(\"IDS_FILE\",\r\n            <ClientFileTab\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                inputParam={this.props.Login.inputParam}\r\n              // deleteRecord={this.DeleteContact}\r\n                clientFile={this.props.Login.masterData.clientFile || []}\r\n                getAvailableData={this.props.getAvailableData}\r\n                addClientFile={this.props.addClientFile}\r\n                viewClientFile={this.viewClientFile}\r\n                defaultRecord={this.defaultRecord}\r\n                screenName=\"IDS_CLIENTFILE\"\r\n                settings={this.props.Login.settings}\r\n                ncontrolCode={this.props.Login.ncontrolCode}\r\n                masterData={this.props.Login.masterData}\r\n                crudMaster={this.props.crudMaster}\r\n                deleteRecord={this.deleteRecord}\r\n\r\n            />\r\n             );\r\n        return tabMap;\r\n    }\r\n\r\n    viewClientFile = (filedata) => {\r\n        const inputParam = {\r\n            inputData: {\r\n                clientfile: filedata,\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            classUrl: \"client\",\r\n            operation: \"view\",\r\n            methodUrl: \"AttachedClientFile\",\r\n            screenName: \"Client File\"\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    getClientComboService,getClientDetail,getClientSiteForAddEdit,\r\n    getClientSiteContactDetails,getClientContactForAddEdit,\r\n    filterColumnData,changeClientCategoryFilter,addClientFile,  viewAttachment\r\n})(injectIntl(Client));"]},"metadata":{},"sourceType":"module"}