{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\APIService.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { getControlMap, constructOptionList, copyText, convertDateTimetoStringDBFormat } from '../../components/CommonScript';\nimport { connect } from 'react-redux';\nimport { Alert, Button, Card, Col, Form, Row } from 'react-bootstrap';\nimport { ListWrapper } from '../../components/client-group.styles'; //import FormTextarea from '../../components/form-textarea/form-textarea.component';\n\nimport { stringOperatorData, numericOperatorData, dateConditionData } from '../dashboard/SqlBuilderFilterType';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCopy, faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ReactJson from \"react-json-view\";\nimport { sendRequest, getQualisFormsFields, getQualisForms, getCustomQuery, getCustomQueryName, updateStore } from \"../../actions\";\nimport { ContentPanel } from '../../components/App.styles';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes'; //import APIConsole from \"./APIConsole\"\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass APIService extends React.Component {\n  constructor(props) {\n    super(props); //  this.console = React.createRef();\n\n    this.onInputOnChange = (event, value, variant) => {\n      if (event.target.type === \"checkbox\") {\n        let constructApiData = this.state.constructApiData;\n        const selectedRecord = this.state.selectedRecord; // selectedRecord['check'] = label\n        // constructApiData={...constructApiData,[variant.item.scolumn]:\"\"}\n\n        const value1 = selectedRecord[event.target.name];\n\n        if (value1 !== '' && value1 !== undefined) {\n          if (value1.toLowerCase().includes(value.toLowerCase())) {\n            const index = value1.toLowerCase().indexOf(value.toLowerCase());\n            delete constructApiData[variant.item.scolumn];\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value1.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedRecord[event.target.name] = value1.slice(indexcomma + 1);\n                } else {\n                  selectedRecord[event.target.name] = \"\";\n                }\n              } else {\n                if (value1.slice(index).indexOf(\",\") !== -1) {\n                  selectedRecord[event.target.name] = value1.slice(0, index) + value1.slice(index + value1.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedRecord[event.target.name] = value1.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedRecord[event.target.name] = value1 + ',' + value;\n            constructApiData = [...constructApiData, {\n              [variant.item.scolumn]: \"\"\n            }];\n          }\n        } else {\n          selectedRecord[event.target.name] = value1 + ',' + value;\n          constructApiData = [...constructApiData, {\n            [variant.item.scolumn]: \"\"\n          }];\n        }\n\n        this.setState({\n          selectedRecord,\n          constructApiData,\n          constructApiDataString: constructApiData.map(e => JSON.stringify(e).replace(/{|}/g, '')).join(',\\n')\n        });\n      } else {\n        // const selectedRecord = this.state.selectedRecord;\n        let text = event.target.value.replaceAll('\\n', '');\n        text = text.replace(/\\s+/g, '');\n        let constructApiData1 = JSON.parse(text);\n        let constructApiData = Object.keys(constructApiData1).map(x => {\n          return {\n            [x]: constructApiData1[x]\n          };\n        });\n        this.setState({\n          constructApiData,\n          constructApiDataString: constructApiData.map(e => JSON.stringify(e).replace(/{|}/g, '')).join(',\\n')\n        });\n      }\n    };\n\n    this.onComboChange = (event, colunName) => {\n      const selectedRecord = this.state.selectedRecord;\n      const oldValue = { ...selectedRecord[colunName]\n      };\n      selectedRecord[colunName] = event;\n      const map1 = new Map();\n      map1['userinfo'] = this.props.Login.userInfo;\n      map1['selectedRecord'] = selectedRecord;\n      map1['masterData'] = this.props.Login.masterData;\n      map1['constructApiData'] = this.state.constructApiData;\n\n      if (colunName === 'napiservicecode') {\n        if (selectedRecord.napiservicecode.value === 24) {\n          this.props.getCustomQuery(map1);\n        } else {\n          const Parameters = this.state.parameterValue || undefined;\n          map1['Parameters'] = Parameters;\n          this.props.getQualisForms(map1);\n        } // }\n        // this.setState({ selectedRecord })\n\n      } else if (colunName === 'nsqlquerycode') {\n        this.props.getCustomQueryName(map1);\n      } else {\n        if (oldValue && oldValue.value !== event.value) {\n          this.props.getQualisFormsFields(map1);\n        }\n      } //  this.setState({ selectedRecord })\n\n    };\n\n    this.checkFilter = filterList => {\n      let check = [];\n      filterList.map((item, index) => {\n        if (item.filterColumn) {\n          if (item.filterCondition) {\n            if (item.filterColumn.item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying' || item.filterColumn.item.columndatatype === 'character') {\n              if (item.filterCondition.value === '=' || item.filterCondition.value === 'IN' || item.filterCondition.value === 'NOT') {\n                if (item.filterValue && item.filterValue !== \"\") {\n                  check.push(true);\n                }\n              } else {\n                if (item.filterCondition) {\n                  check.push(true);\n                }\n              }\n            } else if (item.filterColumn.item.columndatatype === 'numeric' || item.filterColumn.item.columndatatype === 'integer' || item.filterColumn.item.columndatatype === 'smallint' || item.filterColumn.item.columndatatype === 'bigint') {\n              if (item.filterCondition.value === '=' || item.filterCondition.value === '!=' || item.filterCondition.value === '>' || item.filterCondition.value === '<' || item.filterCondition.value === '>=' || item.filterCondition.value === '<=') {\n                if (item.filterValue && item.filterValue !== \"\") {\n                  check.push(true);\n                }\n              } else {\n                if (item.filterCondition) {\n                  check.push(true);\n                }\n              }\n            } else if (item.filterColumn.item.columndatatype === 'date' || item.filterColumn.item.columndatatype === 'timestamp without time zone') {\n              if (item.filterCondition.value === '=' || item.filterCondition.value === 'NOT') {\n                if (item.filterValue && item.filterValue !== \"\") {\n                  check.push(true);\n                }\n              } else {\n                if (item.filterCondition) {\n                  check.push(true);\n                }\n              }\n            }\n          }\n        }\n      });\n      return check.length === filterList.length ? true : false;\n    };\n\n    this.onMoreClick = e => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (this.checkFilter(selectedRecord['filterNew'] || [])) {\n        if (this.props.Login.masterData.SelectedForm) {\n          if (selectedRecord['filterNew'] === undefined) {\n            selectedRecord['filterNew'] = [];\n          }\n\n          selectedRecord['filterNew'][selectedRecord['filterNew'].length] = {};\n          const lstQryColumn = this.removeSameRecordFromTwoDifferentArrays(this.state.lstQueryBuilder, selectedRecord['filterNew']);\n\n          if (lstQryColumn.length > 0) {\n            this.setState({\n              selectedRecord,\n              lstQryColumn\n            });\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_COLUMNSNOTAVALIABLE\"\n            }));\n          }\n        } else if (this.props.Login.masterData.Columns) {\n          if (selectedRecord['filterNew'] === undefined) {\n            selectedRecord['filterNew'] = [];\n          }\n\n          selectedRecord['filterNew'][selectedRecord['filterNew'].length] = {};\n          const lstQryColumn = this.removeSameRecordFromTwoDifferentArrays(this.state.lstQueryBuilder, selectedRecord['filterNew']);\n\n          if (lstQryColumn.length > 0) {\n            this.setState({\n              selectedRecord,\n              lstQryColumn\n            });\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_COLUMNSNOTAVALIABLE\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTHEFORM\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASEFILLTHEVALUE\"\n        }));\n      }\n    };\n\n    this.onFilterInputOnChange = (event, index) => {\n      const selectedRecord = this.state.selectedRecord || {}; //  const constructApiData = this.state.constructApiData\n\n      const filterTableNewAddedList = [...selectedRecord['filterNew']]; //ALPD-3801\n\n      const copyfiltertableaddedlist = [...selectedRecord['filterNew']];\n      const change = { ...filterTableNewAddedList[index],\n        [event.target.name]: event.target.value\n      };\n      const changeData = [...filterTableNewAddedList.splice(0, index), { ...change\n      }, ...copyfiltertableaddedlist.splice(index + 1)]; // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n      // if (index1 === -1) {\n      //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\n      // } else {\n      //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\n      // }\n\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          filterNew: changeData\n        }\n      });\n    };\n\n    this.onFilterNumericInputChange = (value, name, index) => {\n      const selectedRecord = this.state.selectedRecord || {}; //   const constructApiData = this.state.constructApiData\n\n      const filterTableNewAddedList = [...selectedRecord['filterNew']]; //ALPD-3801\n\n      const copyfilterTableNewAddedList = [...selectedRecord['filterNew']];\n      const change = { ...filterTableNewAddedList[index],\n        [name]: value\n      }; // constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterValue })\n      // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n      // if (index1 === -1) {\n      //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\n      // } else {\n      //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\n      // }\n\n      const changeData = [...filterTableNewAddedList.splice(0, index), { ...change\n      }, ...copyfilterTableNewAddedList.splice(index + 1)];\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          filterNew: changeData\n        }\n      });\n    };\n\n    this.handleDateChange = (columnLabel, value, index) => {\n      const selectedRecord = this.state.selectedRecord || {}; // const constructApiData = this.state.constructApiData\n\n      const filterTableNewAddedList = [...selectedRecord['filterNew']];\n      const change = { ...filterTableNewAddedList[index],\n        [columnLabel]: value\n      }; // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n      // if (index1 === -1) {\n      //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\n      // } else {\n      //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\n      // }\n\n      const changeData = [...filterTableNewAddedList.splice(0, index), { ...change\n      }, ...filterTableNewAddedList.splice(index + 1)];\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          filterNew: changeData\n        }\n      });\n    };\n\n    this.onfilterChange = (comboValue, columnLabel, conditionType, index) => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (conditionType === 'column') {\n        const filterTableNewAddedList = [...selectedRecord['filterNew']]; //ALPD-3801\n\n        const copyfiltertableaddedlist = [...selectedRecord['filterNew']];\n        const change = { ...filterTableNewAddedList[index],\n          [columnLabel]: comboValue,\n          filterCondition: undefined,\n          filterValueType: undefined,\n          filterValue: undefined\n        };\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change\n        }, ...copyfiltertableaddedlist.splice(index + 1)];\n        this.setState({\n          selectedRecord: { ...selectedRecord,\n            filterNew: changeData\n          }\n        });\n      } else if (conditionType === 'condition') {\n        const filterTableNewAddedList = [...selectedRecord['filterNew']]; //ALPD-3801\n\n        const copyfiltertableaddedlist = [...selectedRecord['filterNew']];\n        const change = { ...filterTableNewAddedList[index],\n          [columnLabel]: comboValue\n        };\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change,\n          filterValue: undefined\n        }, ...copyfiltertableaddedlist.splice(index + 1)]; // let constructApiData = this.state.constructApiData\n        // if (change[\"filterCondition\"].value === 'IS NULL' ||\n        //     change[\"filterCondition\"].value === 'IS NOT NULL' ||\n        //     change[\"filterCondition\"].value === 'PRESENT' ||\n        //     change[\"filterCondition\"].value === 'BLANK' ||\n        //     change[\"filterCondition\"].value !== 'NULL' ||\n        //     change[\"filterCondition\"].value !== 'NOT NULL' ||\n        //     change[\"filterCondition\"].value === 'IN') {\n        //     // constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value })\n        //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n        //     if (index1 === -1) {\n        //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value })\n        //     } else {\n        //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value }\n        //     }\n        // }\n        // else if(change[\"filterColumn\"].item.columndatatype === 'date'&& \n        // (change.filterCondition.value === '=' || change.filterCondition.value === '<' \n        // || change.filterCondition.value === '>')){\n        //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n        //     if (index1 === -1) {\n        //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\" })\n        //     } else {\n        //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\"  }\n        //     }\n        // }\n        // else if(change[\"filterColumn\"].item.columndatatype === 'date'&& \n        //  (item.filterCondition.value === 'NOT')){\n        //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n        //     if (index1 === -1) {\n        //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\" })\n        //     } else {\n        //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\"  }\n        //     }\n        // }\n\n        this.setState({\n          selectedRecord: { ...selectedRecord,\n            filterNew: changeData\n          }\n        });\n      }\n    };\n\n    this.onFilterModalDelete = childIndex => {\n      // let constructApiData1 = [{ ...this.state.constructApiData[0] }, { ...this.state.constructApiData[1] }]\n      // let constructApiData2 = [...this.state.constructApiData]\n      // constructApiData2 = constructApiData2.splice(2)\n      // constructApiData2 = constructApiData2.splice(0, childIndex)\n      // let constructApiData3 = [...this.state.constructApiData]\n      // constructApiData3 = constructApiData3.splice(2)\n      // constructApiData3 = constructApiData3.splice(childIndex + 1)\n      const selectedRecord = this.state.selectedRecord;\n      selectedRecord['filterNew'] = [...selectedRecord['filterNew'].slice(0, childIndex), ...selectedRecord['filterNew'].slice(childIndex + 1)]; // constructApiData1 = [...constructApiData1, ...constructApiData2, ...constructApiData3]\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.filterQueryFormation = selectedRecord => {\n      let str = \"\";\n      let strform = \"\";\n      selectedRecord['filterNew'] && selectedRecord['filterNew'].length > 0 && selectedRecord['filterNew'].map((item, index) => {\n        if (item.filterCondition) {\n          if (item.filterCondition.value === 'IN') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" ('\" + (item.filterValue ? item.filterValue : \"\") + \"') \";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + \" ('\" + (item.filterValue ? item.filterValue : \"\") + \"')\";\n            }\n          } else if (item.filterCondition.value === 'PRESENT') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + \" NOT \" + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" ='' \";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ='' \";\n            }\n          } else if (item.filterCondition.value === 'BLANK') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" ='' \";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ='' \";\n            }\n          } else if (item.filterCondition.value === 'NULL' || item.filterCondition.value === 'NOT NULL') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" IS \" + item.filterCondition.value + \" \";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" IS \" + item.filterCondition.value + \" \";\n            }\n          } else if (item.filterCondition.value === 'IS NULL') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" \";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + \" \";\n            }\n          } else if (item.filterCondition.value === 'IS NOT NULL') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" \";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + \" \";\n            }\n          } else if (item.filterCondition.value === 'STARTS WITH') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ILIKE \" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\";\n            }\n          } else if (item.filterCondition.value === 'ENDS WITH') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '%\" + (item.filterValue ? item.filterValue : \"\") + \"' collate \\\"default\\\"\";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ILIKE\" + \" '%\" + (item.filterValue ? item.filterValue : \"\") + \"' collate \\\"default\\\"\";\n            }\n          } else if (item.filterCondition.value === 'CONTAINS') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\";\n            }\n          } else if ((item.filterColumn.item.columndatatype === 'date' || item.filterColumn.item.columndatatype === 'timestamp without time zone') && (item.filterCondition.value === '=' || item.filterCondition.value === '<' || item.filterCondition.value === '>')) {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"' \");\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"' \");\n            }\n          } else if (item.filterColumn.item.columndatatype === 'date' && item.filterCondition.value === 'NOT' || item.filterColumn.item.columndatatype === 'timestamp without time zone' && item.filterCondition.value === 'NOT') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + \"(NOT \" + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" = \" + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"')\");\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" = \" + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"')\");\n            }\n          } else if ((item.filterColumn.item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying') && item.filterCondition.value === 'NOT') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + \"(NOT \" + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" = \" + (\"'\" + item.filterValue ? item.filterValue : \"\" + \"')\");\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" = \" + (\"'\" + item.filterValue ? item.filterValue : \"\" + \"')\");\n            }\n          } else if (item.filterColumn.item.columndatatype === 'character varying' && (item.filterCondition.value === 'LIKE' || item.filterCondition.value === 'NOT LIKE')) {\n            str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + \" \" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\";\n          } else {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + \" \" + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? item.filterValue : \"\") + \"' \");\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? item.filterValue : \"\") + \"' \");\n            }\n          }\n\n          if (index !== selectedRecord['filterNew'].length - 1) {\n            str = str + \" and \";\n          }\n        } //   })\n\n      });\n      strform = strform + \"\" + str;\n      return strform;\n    };\n\n    this.copyToClipboard = () => {\n      copyText(this.copyParameter()); // toast.info(this.props.intl.formatMessage({ id: \"IDS_COPIEDSUCCESSFULLY\" }))\n    };\n\n    this.sendRequest = () => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.masterData.SelectedApi) {\n        if (this.props.Login.masterData.SelectedApi.value > 2 && this.props.Login.masterData.SelectedApi.value < 24) {\n          const url = this.props.Login.masterData.SelectedApi.item.sapiservice;\n          let obj = this.sendObject();\n          let obj1 = {\n            \"inputData\": obj,\n            url,\n            masterData: this.props.Login.masterData,\n            \"userinfo\": this.props.Login.userInfo,\n            selectedRecord\n          };\n          this.props.sendRequest(obj1);\n        } //ALPD-3801--Alert thrown when parameter is emtpty.\n        else if (this.props.Login.masterData.SelectedApi.value === 24 && this.props.Login.masterData.SelectedSQLQuery) {\n          if (selectedRecord.nsqlquerycode != undefined) {\n            let parametersname = [];\n            let hasEmptyValue = false;\n\n            if (this.state.parameterValue !== undefined) {\n              hasEmptyValue = this.state.parameterValue.map((item, index) => {\n                let values = [];\n\n                if (this.state.selectedRecord && this.state.selectedRecord[\"ParamValue\"] && this.state.selectedRecord[\"ParamValue\"][index]) {\n                  //ALPD-3801-When Parameter is empty isEmpty is true \n                  const isEmpty = this.state.selectedRecord[\"ParamValue\"][index][item] === '';\n\n                  if (isEmpty) {\n                    parametersname.push(item);\n                  }\n\n                  return isEmpty;\n                }\n\n                parametersname.push(item);\n                return true;\n              });\n              console.log(hasEmptyValue);\n            }\n\n            if (!hasEmptyValue.includes(true)) {\n              const url = \"apiservice/getSQLQueryData\";\n              let sqlquery = selectedRecord.nsqlquerycode.item.ssqlquery.trim();\n              let obj = this.sendObject();\n              let obj1 = {\n                \"inputData\": obj,\n                url,\n                masterData: this.props.Login.masterData,\n                \"userinfo\": this.props.Login.userInfo,\n                selectedRecord,\n                sqlquery,\n                \"parameters\": this.state.selectedRecord.ParamValue && this.state.selectedRecord.ParamValue.length > 0 ? this.state.selectedRecord.ParamValue : [] || []\n              };\n              this.props.sendRequest(obj1);\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_PLEASEFILLTHEPARAM\"\n              }) + \" (\" + parametersname.map(item => item).join(\",\") + \") \");\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTTHEQUERYNAME\"\n            }));\n          }\n        } else if (this.props.Login.masterData.SelectedForm) {\n          const url = this.props.Login.masterData.SelectedApi.item.sapiservice;\n          let obj = this.sendObject();\n          let obj1 = {\n            \"inputData\": obj,\n            url,\n            masterData: this.props.Login.masterData,\n            \"userinfo\": this.props.Login.userInfo,\n            selectedRecord\n          };\n          this.props.sendRequest(obj1);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTHEFORM\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTHEAPI\"\n        }));\n      }\n    };\n\n    this.removeSameRecordFromTwoDifferentArrays = (firstArray, secondArray) => {\n      let filterArray = [];\n\n      if (Array.isArray(secondArray) && secondArray.length > 0) {\n        secondArray.map((x, index1) => {\n          firstArray.map(y => {\n            if (x.filterColumn) {\n              if (x.filterColumn.item.scolumndisplayname === y.item.scolumndisplayname) {\n                const index = firstArray.findIndex(x1 => x1.item.scolumndisplayname === y.item.scolumndisplayname);\n                let firstArray1 = [...firstArray];\n                firstArray1 = [...firstArray1.splice(0, index)];\n                let firstArray2 = [...firstArray];\n                firstArray2 = [...firstArray2.splice(index + 1)];\n                filterArray = [...firstArray1, ...firstArray2];\n                firstArray = [...filterArray];\n              } else if (x.filterColumn.item.scolumndisplayname === y.item.scolumndisplayname) {\n                const index = firstArray.findIndex(x1 => x1.item.scolumndisplayname === y.item.scolumndisplayname);\n                let firstArray1 = [...firstArray];\n                firstArray1 = [...firstArray1.splice(0, index)];\n                let firstArray2 = [...firstArray];\n                firstArray2 = [...firstArray2.splice(index + 1)];\n                filterArray = [...firstArray1, ...firstArray2];\n                firstArray = [...filterArray];\n              }\n            } else {\n              if (index1 === 0) {\n                filterArray = [...firstArray];\n              }\n            }\n          });\n        });\n      } else {\n        filterArray = [...firstArray];\n      }\n\n      return filterArray;\n    };\n\n    this.onInputOnChangeParam = (event, index) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const filterParamList = [...this.state.parameterValue];\n      let filterTableNewAddedList = [];\n\n      if (selectedRecord['ParamValue'] !== undefined) {\n        filterTableNewAddedList = [...selectedRecord['ParamValue']];\n      }\n\n      let change = {\n        [filterParamList[index]]: event.target.value\n      };\n      let changeData = [];\n\n      if (selectedRecord['ParamValue'] !== undefined) {\n        let paramerAddedList = [];\n        paramerAddedList = [...selectedRecord['ParamValue']];\n        changeData = [...filterTableNewAddedList.splice(0, index), { ...change\n        }, ...paramerAddedList.splice(index + 1)];\n      } else {\n        changeData = [{ ...change\n        }];\n      }\n\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          ParamValue: changeData\n        }\n      }); // this.setState({selectedRecord});\n    };\n\n    this.showQueryParameter = () => {\n      //   let newObject = {}\n      let returnString = \"{\"; //    let param;\n\n      if (this.state && this.state.selectedRecord && this.state.selectedRecord.napiservicecode && this.state.selectedRecord.napiservicecode.value < 3) {\n        if (this.state && this.state.constructApiData.length > 0) {\n          this.state.constructApiData.map((e, index) => {\n            if (index < 2) {\n              returnString = returnString + \" \\n \\\"\" + Object.keys(e) + \"\\\":\\\"\" + Object.values(e) + \"\\\"\";\n            }\n          });\n          let text = this.filterQueryFormation(this.state.selectedRecord);\n          returnString = returnString + \"\\n\" + \" \\\"whereCondition\\\":\\\"\" + text + \"\\\"\\n}\";\n        } else {\n          returnString = returnString + \"\\n}\";\n        }\n      } else if (this.state && this.state.selectedRecord && this.state.selectedRecord.napiservicecode && this.state.selectedRecord.napiservicecode.value == 24) {\n        if (this.state && this.state.constructApiData.length > 0) {\n          this.state.constructApiData.map((e, index) => {\n            if (index < this.state.constructApiData.length) {\n              returnString = returnString + \"\\n \\\"\" + Object.keys(e) + \"\\\":\\\"\" + Object.values(e) + \"\\\"\";\n            }\n          });\n          let text = this.filterQueryFormation(this.state.selectedRecord); //ALPD-3801--Parameters Displaying in ShowQueryParam \n\n          if (this.state.parameterValue && this.state.parameterValue.length > 0) {\n            this.state.parameterValue.map((item, index) => {\n              //  param =\"\\n\" +this.state.parameterValue[index]+\"\\\":\\\"\" +this.state.selectedRecord[this.state.parameterValue[index]]!==undefined?this.state.selectedRecord[this.state.parameterValue[index]] :\"\";\n              // returnString = returnString + \"\\n \\\"\" + this.state.parameterValue[index] +\"\\\":\\\"\" + Object.values(e) + \"\\\"\"\n              returnString = returnString + (\"\\n \\\"\" + this.state.parameterValue[index] + \"\\\":\\\"\") + (this.state.selectedRecord[\"ParamValue\"] && this.state.selectedRecord[\"ParamValue\"][index] !== undefined ? this.state.selectedRecord[\"ParamValue\"][index][item] != undefined ? this.state.selectedRecord[\"ParamValue\"][index][item] + \" \\\"\" : \" \\\"\" : \" \\\"\");\n            });\n          }\n\n          returnString = returnString + \"\\n\" + \" \\\"whereCondition\\\":\\\"\" + text + \"\\\"\\n}\";\n        } else {\n          returnString = returnString + \"\\n}\";\n        }\n      } else if (this.props.Login) {\n        returnString = returnString + \"\\\"userinfo\\\":\";\n        let userinfo = JSON.stringify(this.props.Login.userInfo);\n        returnString = returnString + userinfo + \"}\";\n      }\n\n      return returnString;\n    };\n\n    this.copyParameter = () => {\n      let newObject = {};\n\n      if (this.state && this.state.selectedRecord && this.state.selectedRecord.napiservicecode && this.state.selectedRecord.napiservicecode.value < 3) {\n        if (this.state && this.state.constructApiData.length > 0) {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_COPIEDSUCCESSFULLY\"\n          }));\n          this.state.constructApiData.map((e, index) => {\n            if (index < 2) {\n              newObject = { ...newObject,\n                ...e\n              };\n            }\n          });\n          let text = this.filterQueryFormation(this.state.selectedRecord);\n          const object = { ...newObject,\n            \"whereCondition\": text\n          };\n          return JSON.stringify(object);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_QUERYISEMPTY\"\n          }));\n        }\n      } else if (this.props.Login && this.props.Login.userInfo) {\n        let parametersname = [];\n        let hasEmptyValue = [];\n\n        if (!this.state.parameterValue !== undefined) {\n          hasEmptyValue.push(false);\n        }\n\n        if (this.state.parameterValue !== undefined) {\n          hasEmptyValue = this.state.parameterValue.map((item, index) => {\n            // let isEmpty=[];\n            if (this.state.selectedRecord && this.state.selectedRecord[\"ParamValue\"] && this.state.selectedRecord[\"ParamValue\"][index]) {\n              //values.push(this.state.selectedRecord[\"ParamValue\"][index][item]||'');\n              const isEmpty = this.state.selectedRecord[\"ParamValue\"][index][item] === ''; //const isEmpty = values.some(value => value === '');\n\n              if (isEmpty) {\n                parametersname.push(item);\n              }\n\n              return isEmpty;\n            }\n\n            parametersname.push(item);\n            return true;\n          });\n          console.log(hasEmptyValue);\n        }\n\n        if (!hasEmptyValue.includes(true)) {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_COPIEDSUCCESSFULLY\"\n          }));\n          const object = {\n            \"userinfo\": this.props.Login.userInfo\n          };\n          return JSON.stringify(object);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PLEASEFILLTHEPARAM\"\n          }) + \" (\" + parametersname.map(item => item).join(\",\") + \") \");\n        }\n      }\n    };\n\n    this.sendObject = () => {\n      let newObject = {};\n      this.state.constructApiData.map(e => {\n        newObject = { ...newObject,\n          ...e\n        };\n      });\n      let text = this.filterQueryFormation(this.state.selectedRecord);\n      const object = { ...newObject,\n        \"whereCondition\": text\n      };\n      return object;\n    };\n\n    this.state = {\n      selectedRecord: {},\n      constructApiData: [],\n      consoleData: [],\n      controlMap: {},\n      userRoleControlRights: [],\n      masterStatus: \"\",\n      error: \"\"\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    // console.log(\"ParamValue\",this.state.selectedRecord.ParamValue);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content pb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 5,\n      className: \"pr-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"napiservicecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_API\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.apiServiceList || [],\n      value: this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi,\n      isMandatory: true,\n      isClearable: false,\n      isMulti: false,\n      isSearchable: false,\n      closeMenuOnSelect: true,\n      onChange: event => this.onComboChange(event, 'napiservicecode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: e => this.sendRequest(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744,\n        columnNumber: 33\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SEND\"\n    })))), this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value < 3 || this.props.Login.masterData.SelectedApi.value > 24) ? /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nformcode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_FORMS\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.qualisList || [],\n      value: this.props.Login.masterData.SelectedForm && this.props.Login.masterData.SelectedForm,\n      isMandatory: true,\n      isClearable: false,\n      isMulti: false,\n      isSearchable: false,\n      closeMenuOnSelect: true,\n      onChange: event => this.onComboChange(event, 'nformcode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 37\n      }\n    }))) : \"\", this.props.Login.masterData && this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi.value === 24 ? /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nsqlquerycode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_QUERYNAME\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.queryList || [],\n      value: this.state.selectedRecord[\"nsqlquerycode\"] && this.state.selectedRecord[\"nsqlquerycode\"] || \"\",\n      isMandatory: true,\n      isClearable: false,\n      isMulti: false,\n      isSearchable: false,\n      closeMenuOnSelect: true,\n      onChange: event => this.onComboChange(event, 'nsqlquerycode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770,\n        columnNumber: 37\n      }\n    }))) : \"\", /*#__PURE__*/React.createElement(Card, {\n      className: \"api-filter-condition-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 29\n      }\n    }, this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value < 3 || this.props.Login.masterData.SelectedApi.value > 23) ? /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789,\n        columnNumber: 41\n      }\n    }, this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value < 3 || this.props.Login.masterData.SelectedApi.value > 23) && this.props.Login.masterData.needdisplayparam ? this.state.parameterValue && this.state.parameterValue.map((item, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_PARAMETERS\"\n      }),\n      name: \"filterValue\",\n      type: \"text\",\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_PARAMETERS\"\n      }),\n      value: this.state.parameterValue[index],\n      isMandatory: true,\n      required: true,\n      isDisabled: true,\n      maxLength: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_VALUE\"\n      }),\n      name: \"filterValue\",\n      type: \"text\",\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_VALUE\"\n      }),\n      value: this.state.selectedRecord['ParamValue'] && this.state.selectedRecord['ParamValue'][index] && this.state.selectedRecord['ParamValue'][index][item] && this.state.selectedRecord['ParamValue'][index][item] // Check how value should be set\n      ,\n      isMandatory: true,\n      onChange: event => this.onInputOnChangeParam(event, index) // onInputOnChange={(e) => this.onInputOnChangeParam(e, index)}\n      ,\n      required: true,\n      maxLength: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813,\n        columnNumber: 69\n      }\n    }))))) : \"\"), /*#__PURE__*/React.createElement(\"section\", {\n      className: 'modal-card-body',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837,\n        columnNumber: 41\n      }\n    }, this.state.selectedRecord['filterNew'] && this.state.selectedRecord['filterNew'].map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: 'field has-addons filterheight',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 839,\n          columnNumber: 56\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"control is-expanded\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 840,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"select is-fullwidth\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 841,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_FIELDS\"\n        }),\n        isSearchable: true,\n        name: \"filterColumn\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_FIELDS\"\n        }),\n        showOption: true,\n        options: this.state.lstQryColumn || [],\n        value: item[\"filterColumn\"] && item[\"filterColumn\"] || \"\",\n        onChange: value => this.onfilterChange(value, \"filterColumn\", 'column', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 842,\n          columnNumber: 61\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"control is-expanded\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 855,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"select is-fullwidth\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 856,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_CONDITION\"\n        }),\n        isSearchable: true,\n        name: \"sviewname\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_CONDITION\"\n        }),\n        showOption: true,\n        options: item[\"filterColumn\"] && item[\"filterColumn\"].item ? item[\"filterColumn\"].item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying' || item.filterColumn.item.columndatatype === 'character' ? stringOperatorData : item[\"filterColumn\"].item.columndatatype === 'numeric' || item.filterColumn.item.columndatatype === 'integer' || item.filterColumn.item.columndatatype === 'smallint' || item.filterColumn.item.columndatatype === 'bigint' ? numericOperatorData : item[\"filterColumn\"].item.columndatatype === 'date' || item[\"filterColumn\"].item.columndatatype === 'timestamp without time zone' ? dateConditionData : stringOperatorData : \"\",\n        value: item[\"filterCondition\"] !== undefined ? item[\"filterCondition\"] : \"\",\n        onChange: value => this.onfilterChange(value, \"filterCondition\", 'condition', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 857,\n          columnNumber: 61\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"control \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 879,\n          columnNumber: 53\n        }\n      }, item[\"filterCondition\"] && item[\"filterCondition\"].value && item[\"filterColumn\"] ? item[\"filterColumn\"].item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying' || item.filterColumn.item.columndatatype === 'character' ? item[\"filterCondition\"].value !== 'IS NULL' && item[\"filterCondition\"].value !== 'IS NOT NULL' && item[\"filterCondition\"].value !== 'PRESENT' && item[\"filterCondition\"].value !== 'BLANK' ? /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        name: \"filterValue\",\n        type: \"text\",\n        onChange: event => this.onFilterInputOnChange(event, index),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        value: item[\"filterValue\"] ? item[\"filterValue\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 69\n        }\n      }) : \"\" : item[\"filterColumn\"].item.columndatatype === 'numeric' || item.filterColumn.item.columndatatype === 'integer' || item.filterColumn.item.columndatatype === 'smallint' || item.filterColumn.item.columndatatype === 'bigint' ? item[\"filterCondition\"].value !== 'NULL' && item[\"filterCondition\"].value !== 'NOT NULL' ? item[\"filterCondition\"].value === 'IN' ? /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        name: \"filterValue\",\n        type: \"text\",\n        onChange: event => this.onFilterInputOnChange(event, index),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        value: item[\"filterValue\"] ? item[\"filterValue\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 77\n        }\n      }) : /*#__PURE__*/React.createElement(FormNumericInput, {\n        name: \"filterValue\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        type: \"number\",\n        value: item[\"filterValue\"],\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        strict: true //min={0}\n        //max={99999999.99}\n        ,\n        maxLength: 10,\n        onChange: value => this.onFilterNumericInputChange(value, \"filterValue\", index),\n        noStyle: true //precision={2}\n        //isMandatory={true}\n        ,\n        className: \"form-control\",\n        errors: \"Please provide a valid number.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 915,\n          columnNumber: 77\n        }\n      }) : \"\" : item[\"filterColumn\"].item.columndatatype === 'date' || item[\"filterColumn\"].item.columndatatype === 'timestamp without time zone' ? item[\"filterCondition\"].value === '=' || item[\"filterCondition\"].value === '<' || item[\"filterCondition\"].value === '>' || item[\"filterCondition\"].value === 'NOT' ? /*#__PURE__*/React.createElement(DateTimePicker, {\n        name: \"filterValue\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        className: \"form-control\",\n        placeholderText: this.props.intl.formatMessage({\n          id: \"IDS_SELECTDATE\"\n        }),\n        selected: item[\"filterValue\"] ? item[\"filterValue\"] : new Date(),\n        dateFormat: this.props.Login.userInfo[\"ssitedatetime\"],\n        timeInputLabel: this.props.intl.formatMessage({\n          id: \"IDS_TIME\"\n        }),\n        showTimeInput: true,\n        onChange: date => this.handleDateChange(\"filterValue\", date, index),\n        value: item[\"filterValue\"] ? item[\"filterValue\"] : \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 77\n        }\n      }) : \"\" : \"\" : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"control\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 959,\n          columnNumber: 53\n        }\n      }, this.state.selectedRecord['filterNew'].length > 0 && /*#__PURE__*/React.createElement(Button, {\n        className: \"button is-light is-danger\",\n        onClick: () => this.onFilterModalDelete(index),\n        type: \"button\",\n        tabindex: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 961,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 964,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faMinus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 965,\n          columnNumber: 69\n        }\n      })))));\n    }), this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value < 3 || this.props.Login.masterData.SelectedApi.value > 23) ? /*#__PURE__*/React.createElement(\"div\", {\n      className: 'buttons is-right',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 973,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: 'button is-light is-info is-small',\n      onClick: e => this.onMoreClick(e),\n      type: \"button\",\n      tabindex: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 977,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 980,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MORE\"\n    })))) : \"\")) : \"\"))), /*#__PURE__*/React.createElement(Col, {\n      md: 7,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 990,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 991,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"my-2 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 992,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 993,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994,\n        columnNumber: 37\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_QUERYPARAMS\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"api-card-body-scrollable-element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 998,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1000,\n        columnNumber: 37\n      }\n    }, this.showQueryParameter()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons is-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1001,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: e => this.copyToClipboard(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      className: \"\",\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1003,\n        columnNumber: 45\n      }\n    }), '  ', this.props.intl.formatMessage({\n      id: \"IDS_COPYQUERYPARAMS\"\n    })))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1011,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1012,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1013,\n        columnNumber: 37\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_RESPONSE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"api-card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ReactJson, {\n      src: this.props.Login.masterData.consoleData && this.props.Login.masterData.consoleData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1018,\n        columnNumber: 37\n      }\n    }))))))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      console.log(this.props.Login.masterData !== previousProps.Login.masterData);\n      let {\n        userRoleControlRights,\n        controlMap,\n        apiServiceList,\n        selectedRecord,\n        constructApiData,\n        lstQueryBuilder,\n        qualisList,\n        queryList,\n        paramList,\n        parameterValue\n      } = { ...this.state\n      };\n\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      }\n\n      if (this.props.Login && this.props.Login.masterData && this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi.value < 3) {\n        selectedRecord = {\n          \"napiservicecode\": this.props.Login.masterData.SelectedApi,\n          ...this.state.selectedRecord\n        };\n      }\n\n      if (this.props.Login.masterData.lstApiService !== previousProps.Login.masterData.lstApiService) {\n        const apiServiceMap = constructOptionList(this.props.Login.masterData.lstApiService || [], \"napiservicecode\", \"sapiservicename\", \"nsorter\", \"ascending\", false);\n        apiServiceList = apiServiceMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.lstqueryForm !== previousProps.Login.masterData.lstqueryForm) {\n        const qualisMap = constructOptionList(this.props.Login.masterData.lstqueryForm || [], \"nformcode\", \"sdisplayname\", \"nsorter\", \"ascending\", false);\n        qualisList = qualisMap.get(\"OptionList\"); // this.setState({\n        //     qualisList\n        // });\n      }\n\n      if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n        selectedRecord = { ...selectedRecord,\n          ...this.props.Login.selectedRecord\n        };\n      } // if (this.props.Login.parameterValue !== previousProps.Login.parameterValue) {\n      //     parameterValue={...parameterValue, \n      //     ...this.props.Login.parameterValue };\n      // }\n\n\n      if (this.props.Login.masterData.lstSQLQuery !== previousProps.Login.masterData.lstSQLQuery) {\n        const queryMap = constructOptionList(this.props.Login.masterData.lstSQLQuery || [], \"nsqlquerycode\", \"ssqlqueryname\", \"ssqlquery\", \"nsorter\", \"ascending\", false);\n        queryList = queryMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.Parameters !== previousProps.Login.masterData.Parameters) {\n        // const paramMap = constructOptionList(this.props.Login.masterData.Parameters || [] , this.props.Login.masterData.Parameters , \"ascending\", false);\n        // paramList = paramMap.get(\"OptionList\")\n        let listParam = [];\n\n        if (this.props.Login.masterData.Parameters != undefined) {\n          listParam = this.props.Login.masterData.Parameters;\n          parameterValue = listParam.map(item => {\n            return item;\n          });\n        } else {\n          parameterValue = this.props.Login.masterData.Parameters;\n        }\n      }\n\n      if (this.props.Login.masterData.SelectedForm !== previousProps.Login.masterData.SelectedForm) {\n        if (this.props.Login.masterData.SelectedForm && this.props.Login.masterData.SelectedForm.value) {\n          constructApiData = [{\n            \"nformcode\": this.props.Login.masterData.SelectedForm.value\n          }, {\n            \"sformname\": this.props.Login.masterData.SelectedForm.label\n          }];\n        } else {\n          constructApiData = [];\n        }\n\n        let constructData = this.props.Login.masterData.lstquerybilderColumns.map((item, index) => {\n          return {\n            label: item.scolumndisplayname,\n            value: index,\n            item: { ...item\n            }\n          };\n        });\n        lstQueryBuilder = constructData;\n        selectedRecord['filterNew'] = [];\n      }\n\n      if (this.props.Login.masterData.SelectedApi !== previousProps.Login.masterData.SelectedApi) {\n        if (this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi.value && this.props.Login.masterData.SelectedApi.value === 24) {\n          let constructQuery = this.props.Login.masterData.lstSQLQuery.map((item, index) => {\n            return {\n              label: item.ssqlqueryname,\n              value: index,\n              item: { ...item\n              }\n            };\n          });\n          lstQueryBuilder = constructQuery;\n        }\n      }\n\n      if (this.props.Login.masterData.SelectedSQLQuery !== previousProps.Login.masterData.SelectedSQLQuery) {\n        if (this.props.Login.masterData.SelectedSQLQuery && this.props.Login.masterData.SelectedSQLQuery.value && this.props.Login.masterData.SelectedApi.value === 24) {\n          constructApiData = [{\n            \"nsqlquerycode\": this.props.Login.masterData.SelectedSQLQuery.value\n          }, {\n            \"ssqlqueryname\": this.props.Login.masterData.SelectedSQLQuery.label\n          }]; // if(this.props.Login.masterData.Parameters!=undefined){\n          //     th   is.props.Login.masterData.Parameters.map(item=>{\n          //         constructApiData.push({[item]:item})  \n          //     })\n          // }\n        } else {\n          constructApiData = [];\n        }\n\n        let constructData = [];\n\n        if (this.props.Login.masterData && this.props.Login.masterData.Columns) {\n          constructData = this.props.Login.masterData.Columns.map((item, index) => {\n            return {\n              label: item.scolumndisplayname,\n              value: index,\n              item: { ...item\n              }\n            };\n          });\n        } else {\n          constructData = [];\n        }\n\n        lstQueryBuilder = constructData;\n        selectedRecord['filterNew'] = [];\n      }\n\n      if (this.props.Login && this.props.Login.newMap) {\n        selectedRecord['filterNew'] = {\n          \"whereCondition\": this.props.Login.newMap.whereCondition\n        };\n      }\n\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        apiServiceList,\n        selectedRecord,\n        constructApiData,\n        lstQueryBuilder,\n        qualisList,\n        queryList,\n        paramList,\n        parameterValue\n      });\n    } else {\n      if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n        this.setState({\n          selectedRecord: this.props.Login.selectedRecord,\n          data: this.props.Login.masterData\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  sendRequest,\n  getQualisFormsFields,\n  getQualisForms,\n  getCustomQuery,\n  getCustomQueryName,\n  updateStore\n})(injectIntl(APIService));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/configurationmaster/APIService.jsx"],"names":["React","injectIntl","FormSelectSearch","getControlMap","constructOptionList","copyText","convertDateTimetoStringDBFormat","connect","Alert","Button","Card","Col","Form","Row","ListWrapper","stringOperatorData","numericOperatorData","dateConditionData","FormInput","FormNumericInput","DateTimePicker","FontAwesomeIcon","faCopy","faMinus","faPlus","toast","ReactJson","sendRequest","getQualisFormsFields","getQualisForms","getCustomQuery","getCustomQueryName","updateStore","ContentPanel","DEFAULT_RETURN","mapStateToProps","state","Login","APIService","Component","constructor","props","onInputOnChange","event","value","variant","target","type","constructApiData","selectedRecord","value1","name","undefined","toLowerCase","includes","index","indexOf","item","scolumn","indexcomma","slice","setState","constructApiDataString","map","e","JSON","stringify","replace","join","text","replaceAll","constructApiData1","parse","Object","keys","x","onComboChange","colunName","oldValue","map1","Map","userInfo","masterData","napiservicecode","Parameters","parameterValue","checkFilter","filterList","check","filterColumn","filterCondition","columndatatype","filterValue","push","length","onMoreClick","SelectedForm","lstQryColumn","removeSameRecordFromTwoDifferentArrays","lstQueryBuilder","warn","intl","formatMessage","id","Columns","onFilterInputOnChange","filterTableNewAddedList","copyfiltertableaddedlist","change","changeData","splice","filterNew","onFilterNumericInputChange","copyfilterTableNewAddedList","handleDateChange","columnLabel","onfilterChange","comboValue","conditionType","filterValueType","onFilterModalDelete","childIndex","filterQueryFormation","str","strform","isjsoncolumn","ismultilingual","jsoncolumnname","slanguagetypecode","scolumndisplayname","Date","copyToClipboard","copyParameter","SelectedApi","url","sapiservice","obj","sendObject","obj1","SelectedSQLQuery","nsqlquerycode","parametersname","hasEmptyValue","values","isEmpty","console","log","sqlquery","ssqlquery","trim","ParamValue","firstArray","secondArray","filterArray","Array","isArray","index1","y","findIndex","x1","firstArray1","firstArray2","onInputOnChangeParam","filterParamList","paramerAddedList","showQueryParameter","returnString","userinfo","newObject","info","object","consoleData","controlMap","userRoleControlRights","masterStatus","error","getDerivedStateFromProps","render","apiServiceList","qualisList","queryList","needdisplayparam","date","componentDidUpdate","previousProps","paramList","nformcode","ncontrolcode","lstApiService","apiServiceMap","get","lstqueryForm","qualisMap","lstSQLQuery","queryMap","listParam","label","constructData","lstquerybilderColumns","constructQuery","ssqlqueryname","newMap","whereCondition","data","componentWillUnmount","updateInfo","typeName","inputParam","operation","modalName"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,SACIC,aADJ,EACmBC,mBADnB,EACwCC,QADxC,EACkDC,+BADlD,QAEO,+BAFP;AAGA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,IAAxB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyCC,GAAzC,QAAoD,iBAApD;AACA,SAASC,WAAT,QAA4B,sCAA5B,C,CACA;;AACA,SACIC,kBADJ,EACwBC,mBADxB,EAEMC,iBAFN,QAGO,mCAHP;AAKA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,OAAOC,cAAP,MAA2B,8DAA3B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,MAA1B,QAAwC,mCAAxC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,WAAT,EAAsBC,oBAAtB,EAA4CC,cAA5C,EAA4DC,cAA5D,EAA4EC,kBAA5E,EAAgGC,WAAhG,QAAmH,eAAnH;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,cAAT,QAA+B,0BAA/B,C,CACA;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAP;AACH,CAFD;;AAGA,MAAMC,UAAN,SAAyBtC,KAAK,CAACuC,SAA/B,CAAyC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;;AAFe,SA2BnBC,eA3BmB,GA2BD,CAACC,KAAD,EAAQC,KAAR,EAAeC,OAAf,KAA2B;AACzC,UAAIF,KAAK,CAACG,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClC,YAAIC,gBAAgB,GAAG,KAAKZ,KAAL,CAAWY,gBAAlC;AACA,cAAMC,cAAc,GAAG,KAAKb,KAAL,CAAWa,cAAlC,CAFkC,CAGlC;AAEA;;AAEA,cAAMC,MAAM,GAAGD,cAAc,CAACN,KAAK,CAACG,MAAN,CAAaK,IAAd,CAA7B;;AACA,YAAID,MAAM,KAAK,EAAX,IAAiBA,MAAM,KAAKE,SAAhC,EAA2C;AACvC,cAAIF,MAAM,CAACG,WAAP,GAAqBC,QAArB,CAA8BV,KAAK,CAACS,WAAN,EAA9B,CAAJ,EAAwD;AACpD,kBAAME,KAAK,GAAGL,MAAM,CAACG,WAAP,GAAqBG,OAArB,CAA6BZ,KAAK,CAACS,WAAN,EAA7B,CAAd;AACA,mBAAOL,gBAAgB,CAACH,OAAO,CAACY,IAAR,CAAaC,OAAd,CAAvB;;AACA,gBAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,kBAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,sBAAMI,UAAU,GAAGT,MAAM,CAACM,OAAP,CAAe,GAAf,CAAnB;;AACA,oBAAIG,UAAU,KAAK,CAAC,CAApB,EAAuB;AACnBV,kBAAAA,cAAc,CAACN,KAAK,CAACG,MAAN,CAAaK,IAAd,CAAd,GAAoCD,MAAM,CAACU,KAAP,CAAaD,UAAU,GAAG,CAA1B,CAApC;AACH,iBAFD,MAEO;AACHV,kBAAAA,cAAc,CAACN,KAAK,CAACG,MAAN,CAAaK,IAAd,CAAd,GAAoC,EAApC;AACH;AACJ,eAPD,MAOO;AACH,oBAAID,MAAM,CAACU,KAAP,CAAaL,KAAb,EAAoBC,OAApB,CAA4B,GAA5B,MAAqC,CAAC,CAA1C,EAA6C;AACzCP,kBAAAA,cAAc,CAACN,KAAK,CAACG,MAAN,CAAaK,IAAd,CAAd,GAAoCD,MAAM,CAACU,KAAP,CAAa,CAAb,EAAgBL,KAAhB,IAAyBL,MAAM,CAACU,KAAP,CAAaL,KAAK,GAAGL,MAAM,CAACU,KAAP,CAAaL,KAAb,EAAoBC,OAApB,CAA4B,GAA5B,CAAR,GAA2C,CAAxD,CAA7D;AACH,iBAFD,MAEO;AACHP,kBAAAA,cAAc,CAACN,KAAK,CAACG,MAAN,CAAaK,IAAd,CAAd,GAAoCD,MAAM,CAACU,KAAP,CAAa,CAAb,EAAgBL,KAAK,GAAG,CAAxB,CAApC;AACH;AACJ;AACJ;AAEJ,WApBD,MAoBO;AACHN,YAAAA,cAAc,CAACN,KAAK,CAACG,MAAN,CAAaK,IAAd,CAAd,GAAoCD,MAAM,GAAG,GAAT,GAAeN,KAAnD;AACAI,YAAAA,gBAAgB,GAAG,CAAC,GAAGA,gBAAJ,EAAsB;AAAE,eAACH,OAAO,CAACY,IAAR,CAAaC,OAAd,GAAwB;AAA1B,aAAtB,CAAnB;AACH;AACJ,SAzBD,MAyBO;AACHT,UAAAA,cAAc,CAACN,KAAK,CAACG,MAAN,CAAaK,IAAd,CAAd,GAAoCD,MAAM,GAAG,GAAT,GAAeN,KAAnD;AACAI,UAAAA,gBAAgB,GAAG,CAAC,GAAGA,gBAAJ,EAAsB;AAAE,aAACH,OAAO,CAACY,IAAR,CAAaC,OAAd,GAAwB;AAA1B,WAAtB,CAAnB;AACH;;AACD,aAAKG,QAAL,CAAc;AACVZ,UAAAA,cADU;AACMD,UAAAA,gBADN;AAEVc,UAAAA,sBAAsB,EAAEd,gBAAgB,CAACe,GAAjB,CAAqBC,CAAC,IAAIC,IAAI,CAACC,SAAL,CAAeF,CAAf,EAAkBG,OAAlB,CAA0B,MAA1B,EAAkC,EAAlC,CAA1B,EAAiEC,IAAjE,CAAsE,KAAtE;AAFd,SAAd;AAIH,OAzCD,MAyCO;AACH;AACA,YAAIC,IAAI,GAAG1B,KAAK,CAACG,MAAN,CAAaF,KAAb,CAAmB0B,UAAnB,CAA8B,IAA9B,EAAoC,EAApC,CAAX;AACAD,QAAAA,IAAI,GAAGA,IAAI,CAACF,OAAL,CAAa,MAAb,EAAqB,EAArB,CAAP;AACA,YAAII,iBAAiB,GAAGN,IAAI,CAACO,KAAL,CAAWH,IAAX,CAAxB;AACA,YAAIrB,gBAAgB,GAAGyB,MAAM,CAACC,IAAP,CAAYH,iBAAZ,EAA+BR,GAA/B,CAAmCY,CAAC,IAAI;AAC3D,iBAAO;AAAE,aAACA,CAAD,GAAKJ,iBAAiB,CAACI,CAAD;AAAxB,WAAP;AACH,SAFsB,CAAvB;AAGA,aAAKd,QAAL,CAAc;AACVb,UAAAA,gBADU;AAEVc,UAAAA,sBAAsB,EAAEd,gBAAgB,CAACe,GAAjB,CAAqBC,CAAC,IAAIC,IAAI,CAACC,SAAL,CAAeF,CAAf,EAAkBG,OAAlB,CAA0B,MAA1B,EAAkC,EAAlC,CAA1B,EAAiEC,IAAjE,CAAsE,KAAtE;AAFd,SAAd;AAIH;AAEJ,KAnFkB;;AAAA,SAqFnBQ,aArFmB,GAqFH,CAACjC,KAAD,EAAQkC,SAAR,KAAsB;AAClC,YAAM5B,cAAc,GAAG,KAAKb,KAAL,CAAWa,cAAlC;AAEA,YAAM6B,QAAQ,GAAG,EAAE,GAAG7B,cAAc,CAAC4B,SAAD;AAAnB,OAAjB;AACA5B,MAAAA,cAAc,CAAC4B,SAAD,CAAd,GAA4BlC,KAA5B;AACA,YAAMoC,IAAI,GAAG,IAAIC,GAAJ,EAAb;AACAD,MAAAA,IAAI,CAAC,UAAD,CAAJ,GAAmB,KAAKtC,KAAL,CAAWJ,KAAX,CAAiB4C,QAApC;AACAF,MAAAA,IAAI,CAAC,gBAAD,CAAJ,GAAyB9B,cAAzB;AACA8B,MAAAA,IAAI,CAAC,YAAD,CAAJ,GAAqB,KAAKtC,KAAL,CAAWJ,KAAX,CAAiB6C,UAAtC;AACAH,MAAAA,IAAI,CAAC,kBAAD,CAAJ,GAA2B,KAAK3C,KAAL,CAAWY,gBAAtC;;AAEA,UAAI6B,SAAS,KAAK,iBAAlB,EAAqC;AACjC,YAAI5B,cAAc,CAACkC,eAAf,CAA+BvC,KAA/B,KAAyC,EAA7C,EAAiD;AAC7C,eAAKH,KAAL,CAAWX,cAAX,CAA0BiD,IAA1B;AACH,SAFD,MAEO;AACH,gBAAMK,UAAU,GAAC,KAAKhD,KAAL,CAAWiD,cAAX,IAA2BjC,SAA5C;AACA2B,UAAAA,IAAI,CAAC,YAAD,CAAJ,GAAmBK,UAAnB;AACA,eAAK3C,KAAL,CAAWZ,cAAX,CAA0BkD,IAA1B;AACH,SAPgC,CAQjC;AACA;;AACH,OAVD,MAUO,IAAIF,SAAS,KAAK,eAAlB,EAAmC;AACtC,aAAKpC,KAAL,CAAWV,kBAAX,CAA8BgD,IAA9B;AACH,OAFM,MAEA;AACH,YAAID,QAAQ,IAAIA,QAAQ,CAAClC,KAAT,KAAmBD,KAAK,CAACC,KAAzC,EAAgD;AAC5C,eAAKH,KAAL,CAAWb,oBAAX,CAAgCmD,IAAhC;AACH;AACJ,OA3BiC,CA4BlC;;AACH,KAlHkB;;AAAA,SAmHnBO,WAnHmB,GAmHJC,UAAD,IAAgB;AAC1B,UAAIC,KAAK,GAAG,EAAZ;AACAD,MAAAA,UAAU,CAACxB,GAAX,CAAe,CAACN,IAAD,EAAOF,KAAP,KAAiB;AAC5B,YAAIE,IAAI,CAACgC,YAAT,EAAuB;AACnB,cAAIhC,IAAI,CAACiC,eAAT,EAA0B;AACtB,gBAAIjC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,QAA1C,IAAsDlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,mBAAhG,IAAuHlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,WAArK,EAAkL;AAC9K,kBAAIlC,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,GAA/B,IACGa,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,IADlC,IAEGa,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,KAFtC,EAE6C;AAEzC,oBAAIa,IAAI,CAACmC,WAAL,IAAoBnC,IAAI,CAACmC,WAAL,KAAqB,EAA7C,EAAiD;AAC7CJ,kBAAAA,KAAK,CAACK,IAAN,CAAW,IAAX;AACH;AAEJ,eARD,MASK;AACD,oBAAIpC,IAAI,CAACiC,eAAT,EAA0B;AACtBF,kBAAAA,KAAK,CAACK,IAAN,CAAW,IAAX;AACH;AACJ;AACJ,aAfD,MAgBK,IAAIpC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,SAA1C,IAAuDlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,SAAjG,IAA8GlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,UAAxJ,IAAsKlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,QAApN,EAA8N;AAC/N,kBAAIlC,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,GAA/B,IACGa,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,IADlC,IAEAa,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,GAF/B,IAGAa,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,GAH/B,IAIAa,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,IAJ/B,IAKAa,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,IALnC,EAME;AACE,oBAAIa,IAAI,CAACmC,WAAL,IAAoBnC,IAAI,CAACmC,WAAL,KAAqB,EAA7C,EAAiD;AAC7CJ,kBAAAA,KAAK,CAACK,IAAN,CAAW,IAAX;AACH;AAEJ,eAXD,MAYK;AACD,oBAAIpC,IAAI,CAACiC,eAAT,EAA0B;AACtBF,kBAAAA,KAAK,CAACK,IAAN,CAAW,IAAX;AACH;AACJ;AACJ,aAlBI,MAmBA,IAAIpC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,MAA1C,IAAoDlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,6BAAlG,EAAiI;AAClI,kBAAIlC,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,GAA/B,IACGa,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,KADtC,EAEE;AAEE,oBAAIa,IAAI,CAACmC,WAAL,IAAoBnC,IAAI,CAACmC,WAAL,KAAqB,EAA7C,EAAiD;AAC7CJ,kBAAAA,KAAK,CAACK,IAAN,CAAW,IAAX;AACH;AAEJ,eARD,MASK;AACD,oBAAIpC,IAAI,CAACiC,eAAT,EAA0B;AACtBF,kBAAAA,KAAK,CAACK,IAAN,CAAW,IAAX;AACH;AACJ;AACJ;AAEJ;AACJ;AAEJ,OA1DD;AA2DA,aAAOL,KAAK,CAACM,MAAN,KAAiBP,UAAU,CAACO,MAA5B,GAAqC,IAArC,GAA4C,KAAnD;AACH,KAjLkB;;AAAA,SAoLnBC,WApLmB,GAoLJ/B,CAAD,IAAO;AACjB,YAAMf,cAAc,GAAG,KAAKb,KAAL,CAAWa,cAAX,IAA6B,EAApD;;AACA,UAAI,KAAKqC,WAAL,CAAiBrC,cAAc,CAAC,WAAD,CAAd,IAA+B,EAAhD,CAAJ,EAAyD;AACrD,YAAI,KAAKR,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4Bc,YAAhC,EAA8C;AAC1C,cAAI/C,cAAc,CAAC,WAAD,CAAd,KAAgCG,SAApC,EAA+C;AAC3CH,YAAAA,cAAc,CAAC,WAAD,CAAd,GAA8B,EAA9B;AACH;;AACDA,UAAAA,cAAc,CAAC,WAAD,CAAd,CAA4BA,cAAc,CAAC,WAAD,CAAd,CAA4B6C,MAAxD,IAAkE,EAAlE;AAEA,gBAAMG,YAAY,GAAG,KAAKC,sCAAL,CAA4C,KAAK9D,KAAL,CAAW+D,eAAvD,EAAwElD,cAAc,CAAC,WAAD,CAAtF,CAArB;;AAEA,cAAIgD,YAAY,CAACH,MAAb,GAAsB,CAA1B,EAA6B;AACzB,iBAAKjC,QAAL,CAAc;AACVZ,cAAAA,cADU;AACMgD,cAAAA;AADN,aAAd;AAGH,WAJD,MAIO;AACHxE,YAAAA,KAAK,CAAC2E,IAAN,CAAW,KAAK3D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAA9B,CAAX;AACH;AACJ,SAfD,MAeO,IAAI,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BsB,OAAhC,EAAyC;AAC5C,cAAIvD,cAAc,CAAC,WAAD,CAAd,KAAgCG,SAApC,EAA+C;AAC3CH,YAAAA,cAAc,CAAC,WAAD,CAAd,GAA8B,EAA9B;AACH;;AACDA,UAAAA,cAAc,CAAC,WAAD,CAAd,CAA4BA,cAAc,CAAC,WAAD,CAAd,CAA4B6C,MAAxD,IAAkE,EAAlE;AACA,gBAAMG,YAAY,GAAG,KAAKC,sCAAL,CAA4C,KAAK9D,KAAL,CAAW+D,eAAvD,EAAwElD,cAAc,CAAC,WAAD,CAAtF,CAArB;;AAEA,cAAIgD,YAAY,CAACH,MAAb,GAAsB,CAA1B,EAA6B;AACzB,iBAAKjC,QAAL,CAAc;AACVZ,cAAAA,cADU;AACMgD,cAAAA;AADN,aAAd;AAGH,WAJD,MAIO;AACHxE,YAAAA,KAAK,CAAC2E,IAAN,CAAW,KAAK3D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAA9B,CAAX;AACH;AAEJ,SAfM,MAeA;AACH9E,UAAAA,KAAK,CAAC2E,IAAN,CAAW,KAAK3D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX;AACH;AACJ,OAlCD,MAkCO;AACH9E,QAAAA,KAAK,CAAC2E,IAAN,CAAW,KAAK3D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KA3NkB;;AAAA,SA6NnBE,qBA7NmB,GA6NK,CAAC9D,KAAD,EAAQY,KAAR,KAAkB;AACtC,YAAMN,cAAc,GAAG,KAAKb,KAAL,CAAWa,cAAX,IAA6B,EAApD,CADsC,CAEtC;;AAEA,YAAMyD,uBAAuB,GAAG,CAAC,GAAGzD,cAAc,CAAC,WAAD,CAAlB,CAAhC,CAJsC,CAK5C;;AACM,YAAM0D,wBAAwB,GAAG,CAAC,GAAG1D,cAAc,CAAC,WAAD,CAAlB,CAAjC;AAEA,YAAM2D,MAAM,GAAG,EAAE,GAAGF,uBAAuB,CAACnD,KAAD,CAA5B;AAAqC,SAACZ,KAAK,CAACG,MAAN,CAAaK,IAAd,GAAqBR,KAAK,CAACG,MAAN,CAAaF;AAAvE,OAAf;AACA,YAAMiE,UAAU,GAAG,CAAC,GAAGH,uBAAuB,CAACI,MAAxB,CAA+B,CAA/B,EAAkCvD,KAAlC,CAAJ,EAA8C,EAAE,GAAGqD;AAAL,OAA9C,EAA6D,GAAGD,wBAAwB,CAACG,MAAzB,CAAgCvD,KAAK,GAAG,CAAxC,CAAhE,CAAnB,CATsC,CAWtC;AAEA;AACA;AACA;AACA;AACA;;AAGA,WAAKM,QAAL,CAAc;AAAEZ,QAAAA,cAAc,EAAE,EAAE,GAAGA,cAAL;AAAqB8D,UAAAA,SAAS,EAAEF;AAAhC;AAAlB,OAAd;AACH,KAlPkB;;AAAA,SAoPnBG,0BApPmB,GAoPU,CAACpE,KAAD,EAAQO,IAAR,EAAcI,KAAd,KAAwB;AACjD,YAAMN,cAAc,GAAG,KAAKb,KAAL,CAAWa,cAAX,IAA6B,EAApD,CADiD,CAEjD;;AACA,YAAMyD,uBAAuB,GAAG,CAAC,GAAGzD,cAAc,CAAC,WAAD,CAAlB,CAAhC,CAHiD,CAIvD;;AACM,YAAMgE,2BAA2B,GAAG,CAAC,GAAGhE,cAAc,CAAC,WAAD,CAAlB,CAApC;AAEA,YAAM2D,MAAM,GAAG,EAAE,GAAGF,uBAAuB,CAACnD,KAAD,CAA5B;AAAqC,SAACJ,IAAD,GAAQP;AAA7C,OAAf,CAPiD,CAQjD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,YAAMiE,UAAU,GAAG,CAAC,GAAGH,uBAAuB,CAACI,MAAxB,CAA+B,CAA/B,EAAkCvD,KAAlC,CAAJ,EAA8C,EAAE,GAAGqD;AAAL,OAA9C,EAA6D,GAAGK,2BAA2B,CAACH,MAA5B,CAAmCvD,KAAK,GAAG,CAA3C,CAAhE,CAAnB;AACA,WAAKM,QAAL,CAAc;AAAEZ,QAAAA,cAAc,EAAE,EAAE,GAAGA,cAAL;AAAqB8D,UAAAA,SAAS,EAAEF;AAAhC;AAAlB,OAAd;AAEH,KAtQkB;;AAAA,SAwQnBK,gBAxQmB,GAwQA,CAACC,WAAD,EAAcvE,KAAd,EAAqBW,KAArB,KAA+B;AAC9C,YAAMN,cAAc,GAAG,KAAKb,KAAL,CAAWa,cAAX,IAA6B,EAApD,CAD8C,CAE9C;;AACA,YAAMyD,uBAAuB,GAAG,CAAC,GAAGzD,cAAc,CAAC,WAAD,CAAlB,CAAhC;AACA,YAAM2D,MAAM,GAAG,EAAE,GAAGF,uBAAuB,CAACnD,KAAD,CAA5B;AAAqC,SAAC4D,WAAD,GAAevE;AAApD,OAAf,CAJ8C,CAK9C;AACA;AACA;AACA;AACA;AACA;;AACA,YAAMiE,UAAU,GAAG,CAAC,GAAGH,uBAAuB,CAACI,MAAxB,CAA+B,CAA/B,EAAkCvD,KAAlC,CAAJ,EAA8C,EAAE,GAAGqD;AAAL,OAA9C,EAA6D,GAAGF,uBAAuB,CAACI,MAAxB,CAA+BvD,KAAK,GAAG,CAAvC,CAAhE,CAAnB;AACA,WAAKM,QAAL,CAAc;AAAEZ,QAAAA,cAAc,EAAE,EAAE,GAAGA,cAAL;AAAqB8D,UAAAA,SAAS,EAAEF;AAAhC;AAAlB,OAAd;AACH,KArRkB;;AAAA,SAuRnBO,cAvRmB,GAuRF,CAACC,UAAD,EAAaF,WAAb,EAA0BG,aAA1B,EAAyC/D,KAAzC,KAAmD;AAChE,YAAMN,cAAc,GAAG,KAAKb,KAAL,CAAWa,cAAlC;;AAEA,UAAIqE,aAAa,KAAK,QAAtB,EAAgC;AAC5B,cAAMZ,uBAAuB,GAAG,CAAC,GAAGzD,cAAc,CAAC,WAAD,CAAlB,CAAhC,CAD4B,CAErC;;AACS,cAAM0D,wBAAwB,GAAG,CAAC,GAAG1D,cAAc,CAAC,WAAD,CAAlB,CAAjC;AAEA,cAAM2D,MAAM,GAAG,EACX,GAAGF,uBAAuB,CAACnD,KAAD,CADf;AACwB,WAAC4D,WAAD,GAAeE,UADvC;AAEX3B,UAAAA,eAAe,EAAEtC,SAFN;AAEiBmE,UAAAA,eAAe,EAAEnE,SAFlC;AAE6CwC,UAAAA,WAAW,EAAExC;AAF1D,SAAf;AAIA,cAAMyD,UAAU,GAAG,CAAC,GAAGH,uBAAuB,CAACI,MAAxB,CAA+B,CAA/B,EAAkCvD,KAAlC,CAAJ,EAA8C,EAAE,GAAGqD;AAAL,SAA9C,EAA6D,GAAGD,wBAAwB,CAACG,MAAzB,CAAgCvD,KAAK,GAAG,CAAxC,CAAhE,CAAnB;AACA,aAAKM,QAAL,CAAc;AAAEZ,UAAAA,cAAc,EAAE,EAAE,GAAGA,cAAL;AAAqB8D,YAAAA,SAAS,EAAEF;AAAhC;AAAlB,SAAd;AACH,OAXD,MAYK,IAAIS,aAAa,KAAK,WAAtB,EAAmC;AACpC,cAAMZ,uBAAuB,GAAG,CAAC,GAAGzD,cAAc,CAAC,WAAD,CAAlB,CAAhC,CADoC,CAE7C;;AACS,cAAM0D,wBAAwB,GAAG,CAAC,GAAG1D,cAAc,CAAC,WAAD,CAAlB,CAAjC;AAEA,cAAM2D,MAAM,GAAG,EAAE,GAAGF,uBAAuB,CAACnD,KAAD,CAA5B;AAAqC,WAAC4D,WAAD,GAAeE;AAApD,SAAf;AACA,cAAMR,UAAU,GAAG,CAAC,GAAGH,uBAAuB,CAACI,MAAxB,CAA+B,CAA/B,EAAkCvD,KAAlC,CAAJ,EAA8C,EAAE,GAAGqD,MAAL;AAAahB,UAAAA,WAAW,EAAExC;AAA1B,SAA9C,EAAqF,GAAGuD,wBAAwB,CAACG,MAAzB,CAAgCvD,KAAK,GAAG,CAAxC,CAAxF,CAAnB,CANoC,CAOpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,aAAKM,QAAL,CAAc;AAAEZ,UAAAA,cAAc,EAAE,EAAE,GAAGA,cAAL;AAAqB8D,YAAAA,SAAS,EAAEF;AAAhC;AAAlB,SAAd;AACH;AAEJ,KA3VkB;;AAAA,SA6VnBW,mBA7VmB,GA6VIC,UAAD,IAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAMxE,cAAc,GAAG,KAAKb,KAAL,CAAWa,cAAlC;AACAA,MAAAA,cAAc,CAAC,WAAD,CAAd,GAA8B,CAAC,GAAGA,cAAc,CAAC,WAAD,CAAd,CAA4BW,KAA5B,CAAkC,CAAlC,EAAqC6D,UAArC,CAAJ,EAAsD,GAAGxE,cAAc,CAAC,WAAD,CAAd,CAA4BW,KAA5B,CAAkC6D,UAAU,GAAG,CAA/C,CAAzD,CAA9B,CATkC,CAUlC;;AACA,WAAK5D,QAAL,CAAc;AAAEZ,QAAAA;AAAF,OAAd;AACH,KAzWkB;;AAAA,SA2WnByE,oBA3WmB,GA2WKzE,cAAD,IAAoB;AACvC,UAAI0E,GAAG,GAAG,EAAV;AACA,UAAIC,OAAO,GAAG,EAAd;AACA3E,MAAAA,cAAc,CAAC,WAAD,CAAd,IAA+BA,cAAc,CAAC,WAAD,CAAd,CAA4B6C,MAA5B,GAAqC,CAApE,IAAyE7C,cAAc,CAAC,WAAD,CAAd,CAA4Bc,GAA5B,CAAgC,CAACN,IAAD,EAAOF,KAAP,KAAiB;AACtH,YAAIE,IAAI,CAACiC,eAAT,EAA0B;AACtB,cAAIjC,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,IAAnC,EAAyC;AACrC,gBAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvB,IAAkCN,SAAtC,EAAiD;AAC7CuE,cAAAA,GAAG,GAAGA,GAAG,IAAIlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBoE,YAAvB,GACTpE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBqE,cAAvB,GACIrE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,KAAxC,GAAgDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvE,GAAiF,OAAjF,GAA2F,KAAKjB,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0B+C,iBAArH,GAAyI,GAD7I,GAEMvE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,MAAxC,GAAiDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAxE,GAAkF,GAH/E,GAIP,OAAOD,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAA9B,GAAwC,IAJrC,CAAH,GAIgD,GAJhD,GAIsDD,IAAI,CAACiC,eAAL,CAAqB9C,KAJ3E,GAImF,KAJnF,IAI4Fa,IAAI,CAACmC,WAAL,GAAmBnC,IAAI,CAACmC,WAAxB,GAAsC,EAJlI,IAIwI,KAJ9I;AAKH,aAND,MAMO,IAAInC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAAvB,IAA6C7E,SAAjD,EAA4D;AAC/DuE,cAAAA,GAAG,GAAGA,GAAG,IAAI,OAAOlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAA9B,GAAmD,IAAvD,CAAH,GAAkE,GAAlE,GAAwExE,IAAI,CAACiC,eAAL,CAAqB9C,KAA7F,GAAqG,KAArG,IAA8Ga,IAAI,CAACmC,WAAL,GAAmBnC,IAAI,CAACmC,WAAxB,GAAsC,EAApJ,IAA0J,IAAhK;AACH;AACJ,WAVD,MAWK,IAAInC,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,SAAnC,EAA8C;AAC/C,gBAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvB,IAAkCN,SAAtC,EAAiD;AAC7CuE,cAAAA,GAAG,GAAGA,GAAG,GAAG,OAAN,IAAiBlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBoE,YAAvB,GACnBpE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBqE,cAAvB,GACIrE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,KAAxC,GAAgDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvE,GAAiF,OAAjF,GAA2F,KAAKjB,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0B+C,iBAArH,GAAyI,GAD7I,GAEMvE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,MAAxC,GAAiDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAxE,GAAkF,GAHrE,GAIjB,OAAOD,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAA9B,GAAwC,IAJxC,IAIgD,OAJtD;AAKH,aAND,MAMO,IAAID,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAAvB,IAA6C7E,SAAjD,EAA4D;AAC/DuE,cAAAA,GAAG,GAAGA,GAAG,IAAI,OAAOlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAA9B,GAAmD,IAAvD,CAAH,GAAkE,OAAxE;AACH;AAEJ,WAXI,MAYA,IAAIxE,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,OAAnC,EAA4C;AAC7C,gBAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvB,IAAkCN,SAAtC,EAAiD;AAE7CuE,cAAAA,GAAG,GAAGA,GAAG,IAAIlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBoE,YAAvB,GACTpE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBqE,cAAvB,GACIrE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,KAAxC,GAAgDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvE,GAAiF,OAAjF,GAA2F,KAAKjB,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0B+C,iBAArH,GAAyI,GAD7I,GAEMvE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,MAAxC,GAAiDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAxE,GAAkF,GAH/E,GAIP,OAAOD,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAA9B,GAAwC,IAJrC,CAAH,GAIgD,OAJtD;AAKH,aAPD,MAOO,IAAID,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAAvB,IAA6C7E,SAAjD,EAA4D;AAC/DuE,cAAAA,GAAG,GAAGA,GAAG,IAAI,OAAOlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAA9B,GAAmD,IAAvD,CAAH,GAAkE,OAAxE;AACH;AAEJ,WAZI,MAaA,IAAIxE,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,MAA/B,IACFa,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,UADjC,EAC6C;AAC9C,gBAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvB,IAAkCN,SAAtC,EAAiD;AAE7CuE,cAAAA,GAAG,GAAGA,GAAG,IAAIlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBoE,YAAvB,GACTpE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBqE,cAAvB,GACIrE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,KAAxC,GAAgDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvE,GAAiF,OAAjF,GAA2F,KAAKjB,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0B+C,iBAArH,GAAyI,GAD7I,GAEMvE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,MAAxC,GAAiDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAxE,GAAkF,GAH/E,GAIP,OAAOD,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAA9B,GAAwC,IAJrC,CAAH,GAIgD,MAJhD,GAIyDD,IAAI,CAACiC,eAAL,CAAqB9C,KAJ9E,GAIsF,GAJ5F;AAKH,aAPD,MAOO,IAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAAvB,IAA6C7E,SAAjD,EAA4D;AAC/DuE,cAAAA,GAAG,GAAGA,GAAG,IAAI,OAAOlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAA9B,GAAmD,IAAvD,CAAH,GAAkE,MAAlE,GAA2ExE,IAAI,CAACiC,eAAL,CAAqB9C,KAAhG,GAAwG,GAA9G;AACH;AAEJ,WAbI,MAcA,IAAIa,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,SAAnC,EAA8C;AAC/C,gBAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvB,IAAkCN,SAAtC,EAAiD;AAE7CuE,cAAAA,GAAG,GAAGA,GAAG,IAAIlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBoE,YAAvB,GACTpE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBqE,cAAvB,GACIrE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,KAAxC,GAAgDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvE,GAAiF,OAAjF,GAA2F,KAAKjB,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0B+C,iBAArH,GAAyI,GAD7I,GAEMvE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,MAAxC,GAAiDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAxE,GAAkF,GAH/E,GAIP,OAAOD,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAA9B,GAAwC,IAJrC,CAAH,GAIgD,GAJhD,GAIsDD,IAAI,CAACiC,eAAL,CAAqB9C,KAJ3E,GAImF,GAJzF;AAKH,aAPD,MAOO,IAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAAvB,IAA6C7E,SAAjD,EAA4D;AAC/DuE,cAAAA,GAAG,GAAGA,GAAG,IAAI,OAAOlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAA9B,GAAmD,IAAvD,CAAH,GAAkE,GAAlE,GAAwExE,IAAI,CAACiC,eAAL,CAAqB9C,KAA7F,GAAqG,GAA3G;AACH;AAEJ,WAZI,MAaA,IAAIa,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,aAAnC,EAAkD;AACnD,gBAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvB,IAAkCN,SAAtC,EAAiD;AAG7CuE,cAAAA,GAAG,GAAGA,GAAG,IAAIlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBoE,YAAvB,GACTpE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBqE,cAAvB,GACIrE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,KAAxC,GAAgDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvE,GAAiF,OAAjF,GAA2F,KAAKjB,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0B+C,iBAArH,GAAyI,GAD7I,GAEMvE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,MAAxC,GAAiDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAxE,GAAkF,GAH/E,GAIP,OAAOD,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAA9B,GAAwC,IAJrC,CAAH,GAIgD,GAJhD,GAIsDD,IAAI,CAACiC,eAAL,CAAqB9C,KAJ3E,GAImF,GAJzF;AAKH,aARD,MAQO,IAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAAvB,IAA6C7E,SAAjD,EAA4D;AAC/DuE,cAAAA,GAAG,GAAGA,GAAG,IAAI,OAAOlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAA9B,GAAmD,IAAvD,CAAH,GAAkE,GAAlE,GAAwExE,IAAI,CAACiC,eAAL,CAAqB9C,KAA7F,GAAqG,GAA3G;AACH;AAEJ,WAbI,MAcA,IAAIa,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,aAAnC,EAAkD;AACnD,gBAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvB,IAAkCN,SAAtC,EAAiD;AAE7CuE,cAAAA,GAAG,GAAGA,GAAG,IAAIlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBoE,YAAvB,GACTpE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBqE,cAAvB,GACIrE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,KAAxC,GAAgDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvE,GAAiF,OAAjF,GAA2F,KAAKjB,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0B+C,iBAArH,GAAyI,GAD7I,GAEMvE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,MAAxC,GAAiDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAxE,GAAkF,GAH/E,GAIP,OAAOD,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAA9B,GAAwC,IAJrC,CAAH,GAIgD,OAJhD,GAI0D,IAJ1D,IAIkED,IAAI,CAACmC,WAAL,GAAmBnC,IAAI,CAACmC,WAAxB,GAAsC,EAJxG,IAI8G,wBAJpH;AAKH,aAPD,MAOO,IAAInC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAAvB,IAA6C7E,SAAjD,EAA4D;AAC/DuE,cAAAA,GAAG,GAAGA,GAAG,IAAI,OAAOlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAA9B,GAAmD,IAAvD,CAAH,GAAkE,SAAlE,GAA8E,IAA9E,IAAsFxE,IAAI,CAACmC,WAAL,GAAmBnC,IAAI,CAACmC,WAAxB,GAAsC,EAA5H,IAAkI,wBAAxI;AACH;AACJ,WAXI,MAYA,IAAInC,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,WAAnC,EAAgD;AACjD,gBAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvB,IAAkCN,SAAtC,EAAiD;AAE7CuE,cAAAA,GAAG,GAAGA,GAAG,IAAIlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBoE,YAAvB,GACTpE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBqE,cAAvB,GACIrE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,KAAxC,GAAgDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvE,GAAiF,OAAjF,GAA2F,KAAKjB,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0B+C,iBAArH,GAAyI,GAD7I,GAEMvE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,MAAxC,GAAiDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAxE,GAAkF,GAH/E,GAIP,OAAOD,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAA9B,GAAwC,IAJrC,CAAH,GAIgD,OAJhD,GAI0D,KAJ1D,IAImED,IAAI,CAACmC,WAAL,GAAmBnC,IAAI,CAACmC,WAAxB,GAAsC,EAJzG,IAI+G,uBAJrH;AAKH,aAPD,MAOO,IAAInC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAAvB,IAA6C7E,SAAjD,EAA4D;AAC/DuE,cAAAA,GAAG,GAAGA,GAAG,IAAI,OAAOlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAA9B,GAAmD,IAAvD,CAAH,GAAkE,QAAlE,GAA6E,KAA7E,IAAsFxE,IAAI,CAACmC,WAAL,GAAmBnC,IAAI,CAACmC,WAAxB,GAAsC,EAA5H,IAAkI,uBAAxI;AACH;AACJ,WAXI,MAYA,IAAInC,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,UAAnC,EAA+C;AAChD,gBAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvB,IAAkCN,SAAtC,EAAiD;AAE7CuE,cAAAA,GAAG,GAAGA,GAAG,IAAIlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBoE,YAAvB,GACTpE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBqE,cAAvB,GACIrE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,KAAxC,GAAgDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvE,GAAiF,OAAjF,GAA2F,KAAKjB,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0B+C,iBAArH,GAAyI,GAD7I,GAEMvE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,MAAxC,GAAiDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAxE,GAAkF,GAH/E,GAIP,OAAOD,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAA9B,GAAwC,IAJrC,CAAH,GAIgD,OAJhD,GAI0D,IAJ1D,IAIkED,IAAI,CAACmC,WAAL,GAAmBnC,IAAI,CAACmC,WAAxB,GAAsC,EAJxG,IAI8G,wBAJpH;AAKH,aAPD,MAOO,IAAInC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAAvB,IAA6C7E,SAAjD,EAA4D;AAC/DuE,cAAAA,GAAG,GAAGA,GAAG,IAAI,OAAOlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAA9B,GAAmD,IAAvD,CAAH,GAAkE,QAAlE,GAA6E,IAA7E,IAAqFxE,IAAI,CAACmC,WAAL,GAAmBnC,IAAI,CAACmC,WAAxB,GAAsC,EAA3H,IAAiI,wBAAvI;AACH;AACJ,WAXI,MAYA,IAAI,CAACnC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,MAA1C,IAAoDlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,6BAA/F,MAAkIlC,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,GAA/B,IAAsCa,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,GAArE,IAA4Ea,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,GAA7O,CAAJ,EAAuP;AACxP,gBAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvB,IAAkCN,SAAtC,EAAiD;AAE7CuE,cAAAA,GAAG,GAAGA,GAAG,IAAIlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBoE,YAAvB,GACTpE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBqE,cAAvB,GACIrE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,KAAxC,GAAgDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvE,GAAiF,OAAjF,GAA2F,KAAKjB,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0B+C,iBAArH,GAAyI,GAD7I,GAEMvE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,MAAxC,GAAiDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAxE,GAAkF,GAH/E,GAIP,OAAOD,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAA9B,GAAwC,IAJrC,CAAH,GAIgD,GAJhD,GAIsDD,IAAI,CAACiC,eAAL,CAAqB9C,KAJ3E,IAIoF,OAAOa,IAAI,CAACmC,WAAL,GAAmBtF,+BAA+B,CAACmD,IAAI,CAACmC,WAAN,EAAmB,KAAKnD,KAAL,CAAWJ,KAAX,CAAiB4C,QAApC,CAAlD,GAAkG3E,+BAA+B,CAAC,IAAI4H,IAAJ,EAAD,EAAa,KAAKzF,KAAL,CAAWJ,KAAX,CAAiB4C,QAA9B,CAAxI,IAAmL,IAJvQ,CAAN;AAKH,aAPD,MAOO,IAAIxB,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAAvB,IAA6C7E,SAAjD,EAA4D;AAC/DuE,cAAAA,GAAG,GAAGA,GAAG,IAAI,OAAOlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAA9B,GAAmD,IAAvD,CAAH,GAAkE,GAAlE,GAAwExE,IAAI,CAACiC,eAAL,CAAqB9C,KAA7F,IAAsG,OAAOa,IAAI,CAACmC,WAAL,GAAmBtF,+BAA+B,CAACmD,IAAI,CAACmC,WAAN,EAAmB,KAAKnD,KAAL,CAAWJ,KAAX,CAAiB4C,QAApC,CAAlD,GAAkG3E,+BAA+B,CAAC,IAAI4H,IAAJ,EAAD,EAAa,KAAKzF,KAAL,CAAWJ,KAAX,CAAiB4C,QAA9B,CAAxI,IAAmL,IAAzR,CAAN;AACH;AACJ,WAXI,MAaA,IAAKxB,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,MAA1C,IAAqDlC,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,KAArF,IAAiGa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,6BAA1C,IAA4ElC,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,KAAhN,EAAyN;AAC1N,gBAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvB,IAAkCN,SAAtC,EAAiD;AAE7CuE,cAAAA,GAAG,GAAGA,GAAG,GAAG,OAAN,IAAiBlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBoE,YAAvB,GACnBpE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBqE,cAAvB,GACIrE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,KAAxC,GAAgDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvE,GAAiF,OAAjF,GAA2F,KAAKjB,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0B+C,iBAArH,GAAyI,GAD7I,GAEMvE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,MAAxC,GAAiDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAxE,GAAkF,GAHrE,GAIjB,OAAOD,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAA9B,GAAwC,IAJxC,IAIgD,KAJhD,IAIyD,OAAOD,IAAI,CAACmC,WAAL,GAAmBtF,+BAA+B,CAACmD,IAAI,CAACmC,WAAN,EAAmB,KAAKnD,KAAL,CAAWJ,KAAX,CAAiB4C,QAApC,CAAlD,GAAkG3E,+BAA+B,CAAC,IAAI4H,IAAJ,EAAD,EAAa,KAAKzF,KAAL,CAAWJ,KAAX,CAAiB4C,QAA9B,CAAxI,IAAmL,IAJ5O,CAAN;AAKH,aAPD,MAOO,IAAIxB,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAAvB,IAA6C7E,SAAjD,EAA4D;AAC/DuE,cAAAA,GAAG,GAAGA,GAAG,IAAI,OAAOlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAA9B,GAAmD,IAAvD,CAAH,GAAkE,KAAlE,IAA2E,OAAOxE,IAAI,CAACmC,WAAL,GAAmBtF,+BAA+B,CAACmD,IAAI,CAACmC,WAAN,EAAmB,KAAKnD,KAAL,CAAWJ,KAAX,CAAiB4C,QAApC,CAAlD,GAAkG3E,+BAA+B,CAAC,IAAI4H,IAAJ,EAAD,EAAa,KAAKzF,KAAL,CAAWJ,KAAX,CAAiB4C,QAA9B,CAAxI,IAAmL,IAA9P,CAAN;AACH;AACJ,WAXI,MAYA,IAAI,CAACxB,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,QAA1C,IAAsDlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,mBAAjG,KAA0HlC,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,KAA7J,EAAqK;AACtK,gBAAIa,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvB,IAAkCN,SAAtC,EAAiD;AAE7CuE,cAAAA,GAAG,GAAGA,GAAG,GAAG,OAAN,IAAiBlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBoE,YAAvB,GACnBpE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBqE,cAAvB,GACIrE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,KAAxC,GAAgDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvE,GAAiF,OAAjF,GAA2F,KAAKjB,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0B+C,iBAArH,GAAyI,GAD7I,GAEMvE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,MAAxC,GAAiDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAxE,GAAkF,GAHrE,GAIjB,OAAOD,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAA9B,GAAwC,IAJxC,IAIgD,KAJhD,IAIyD,MAAMD,IAAI,CAACmC,WAAX,GAAyBnC,IAAI,CAACmC,WAA9B,GAA4C,KAAK,IAJ1G,CAAN;AAKH,aAPD,MAOO,IAAInC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAAvB,IAA6C7E,SAAjD,EAA4D;AAC/DuE,cAAAA,GAAG,GAAGA,GAAG,IAAI,OAAOlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAA9B,GAAmD,IAAvD,CAAH,GAAkE,KAAlE,IAA2E,MAAMxE,IAAI,CAACmC,WAAX,GAAyBnC,IAAI,CAACmC,WAA9B,GAA4C,KAAK,IAA5H,CAAN;AACH;AACJ,WAXI,MAYA,IAAInC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,mBAA1C,KAAkElC,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,MAA/B,IAAyCa,IAAI,CAACiC,eAAL,CAAqB9C,KAArB,KAA+B,UAA1I,CAAJ,EAA2J;AAC5J+E,YAAAA,GAAG,GAAGA,GAAG,IAAI,OAAOlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAA9B,GAAmD,IAAvD,CAAH,GAAkE,GAAlE,GAAwExE,IAAI,CAACiC,eAAL,CAAqB9C,KAA7F,GAAqG,GAArG,GAA2G,IAA3G,IAAmHa,IAAI,CAACmC,WAAL,GAAmBnC,IAAI,CAACmC,WAAxB,GAAsC,EAAzJ,IAA+J,wBAArK;AACH,WAFI,MAGA;AACD,gBAAInC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvB,IAAkCN,SAAtC,EAAiD;AAE7CuE,cAAAA,GAAG,GAAGA,GAAG,GAAG,GAAN,IAAalE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBoE,YAAvB,GACfpE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBqE,cAAvB,GACIrE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,KAAxC,GAAgDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAvE,GAAiF,OAAjF,GAA2F,KAAKjB,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0B+C,iBAArH,GAAyI,GAD7I,GAEMvE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBsE,cAAvB,GAAwC,MAAxC,GAAiDtE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAAxE,GAAkF,GAHzE,GAIb,OAAOD,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBC,OAA9B,GAAwC,IAJxC,IAIgD,GAJhD,GAIsDD,IAAI,CAACiC,eAAL,CAAqB9C,KAJ3E,IAIoF,OAAOa,IAAI,CAACmC,WAAL,GAAmBnC,IAAI,CAACmC,WAAxB,GAAsC,EAA7C,IAAmD,IAJvI,CAAN;AAKH,aAPD,MAOO,IAAInC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAAvB,IAA6C7E,SAAjD,EAA4D;AAC/DuE,cAAAA,GAAG,GAAGA,GAAG,IAAI,OAAOlE,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBwE,kBAA9B,GAAmD,IAAvD,CAAH,GAAkE,GAAlE,GAAwExE,IAAI,CAACiC,eAAL,CAAqB9C,KAA7F,IAAsG,OAAOa,IAAI,CAACmC,WAAL,GAAmBnC,IAAI,CAACmC,WAAxB,GAAsC,EAA7C,IAAmD,IAAzJ,CAAN;AACH;AACJ;;AAED,cAAIrC,KAAK,KAAKN,cAAc,CAAC,WAAD,CAAd,CAA4B6C,MAA5B,GAAqC,CAAnD,EAAsD;AAClD6B,YAAAA,GAAG,GAAGA,GAAG,GAAG,OAAZ;AACH;AACJ,SA3KqH,CA4KtH;;AACH,OA7KwE,CAAzE;AA8KAC,MAAAA,OAAO,GAAGA,OAAO,GAAG,EAAV,GAAeD,GAAzB;AACA,aAAOC,OAAP;AACH,KA9hBkB;;AAAA,SAkiBnBO,eAliBmB,GAkiBD,MAAM;AACpB9H,MAAAA,QAAQ,CAAC,KAAK+H,aAAL,EAAD,CAAR,CADoB,CAEpB;AACH,KAriBkB;;AAAA,SAwiBnBzG,WAxiBmB,GAwiBL,MAAM;AAChB,YAAMsB,cAAc,GAAG,KAAKb,KAAL,CAAWa,cAAlC;;AACA,UAAI,KAAKR,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAAhC,EAA6C;AACzC,YAAI,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,GAAgD,CAAhD,IAAqD,KAAKH,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,GAAgD,EAAzG,EAA6G;AACzG,gBAAM0F,GAAG,GAAG,KAAK7F,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwC5E,IAAxC,CAA6C8E,WAAzD;AACA,cAAIC,GAAG,GAAG,KAAKC,UAAL,EAAV;AACA,cAAIC,IAAI,GAAG;AAAE,yBAAaF,GAAf;AAAoBF,YAAAA,GAApB;AAAyBpD,YAAAA,UAAU,EAAE,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB6C,UAAtD;AAAkE,wBAAY,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB4C,QAA/F;AAAyGhC,YAAAA;AAAzG,WAAX;AACA,eAAKR,KAAL,CAAWd,WAAX,CAAuB+G,IAAvB;AAEH,SAND,CAOD;AAPC,aAQK,IAAI,KAAKjG,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,KAAkD,EAAlD,IAAwD,KAAKH,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4ByD,gBAAxF,EAA0G;AAC3G,cAAI1F,cAAc,CAAC2F,aAAf,IAAgCxF,SAApC,EAA+C;AAC3C,gBAAIyF,cAAc,GAAC,EAAnB;AACA,gBAAIC,aAAa,GAAC,KAAlB;;AACA,gBAAG,KAAK1G,KAAL,CAAWiD,cAAX,KAA4BjC,SAA/B,EAAyC;AACpC0F,cAAAA,aAAa,GAAG,KAAK1G,KAAL,CAAWiD,cAAX,CAA0BtB,GAA1B,CAA8B,CAACN,IAAD,EAAOF,KAAP,KAAiB;AAC5D,oBAAIwF,MAAM,GAAG,EAAb;;AACC,oBACG,KAAK3G,KAAL,CAAWa,cAAX,IACA,KAAKb,KAAL,CAAWa,cAAX,CAA0B,YAA1B,CADA,IAEA,KAAKb,KAAL,CAAWa,cAAX,CAA0B,YAA1B,EAAwCM,KAAxC,CAHH,EAIC;AAC3B;AAC6B,wBAAMyF,OAAO,GAAC,KAAK5G,KAAL,CAAWa,cAAX,CAA0B,YAA1B,EAAwCM,KAAxC,EAA+CE,IAA/C,MAAuD,EAArE;;AAEA,sBAAGuF,OAAH,EAAW;AACPH,oBAAAA,cAAc,CAAChD,IAAf,CAAoBpC,IAApB;AACH;;AACD,yBAAOuF,OAAP;AAEH;;AACDH,gBAAAA,cAAc,CAAChD,IAAf,CAAoBpC,IAApB;AAEA,uBAAO,IAAP;AACH,eAnBgB,CAAhB;AAqBDwF,cAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ;AAEH;;AACD,gBAAG,CAACA,aAAa,CAACxF,QAAd,CAAuB,IAAvB,CAAJ,EAAiC;AACjC,oBAAMgF,GAAG,GAAG,4BAAZ;AACA,kBAAIa,QAAQ,GAAGlG,cAAc,CAAC2F,aAAf,CAA6BnF,IAA7B,CAAkC2F,SAAlC,CAA4CC,IAA5C,EAAf;AACA,kBAAIb,GAAG,GAAG,KAAKC,UAAL,EAAV;AACA,kBAAIC,IAAI,GAAG;AAAE,6BAAaF,GAAf;AAAoBF,gBAAAA,GAApB;AAAyBpD,gBAAAA,UAAU,EAAE,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB6C,UAAtD;AAAkE,4BAAY,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB4C,QAA/F;AAAyGhC,gBAAAA,cAAzG;AAAyHkG,gBAAAA,QAAzH;AAAkI,8BAAa,KAAK/G,KAAL,CAAWa,cAAX,CAA0BqG,UAA1B,IAAsC,KAAKlH,KAAL,CAAWa,cAAX,CAA0BqG,UAA1B,CAAqCxD,MAArC,GAA4C,CAAlF,GAAqF,KAAK1D,KAAL,CAAWa,cAAX,CAA0BqG,UAA/G,GAA0H,MAAI;AAA7Q,eAAX;AACA,mBAAK7G,KAAL,CAAWd,WAAX,CAAuB+G,IAAvB;AACN,aANM,MAOJ;AACAjH,cAAAA,KAAK,CAAC2E,IAAN,CAAW,KAAK3D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,IAAgE,IAAhE,GAAqEsC,cAAc,CAAC9E,GAAf,CAAmBN,IAAI,IAAEA,IAAzB,EAA+BW,IAA/B,CAAoC,GAApC,CAArE,GAA8G,IAAzH;AAEH;AAAI,WAtCD,MAsCO;AACH3C,YAAAA,KAAK,CAAC2E,IAAN,CAAW,KAAK3D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAA9B,CAAX;AACH;AACJ,SA1CI,MA4CA,IAAI,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4Bc,YAAhC,EAA8C;AAC/C,gBAAMsC,GAAG,GAAG,KAAK7F,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwC5E,IAAxC,CAA6C8E,WAAzD;AACA,cAAIC,GAAG,GAAG,KAAKC,UAAL,EAAV;AACA,cAAIC,IAAI,GAAG;AAAE,yBAAaF,GAAf;AAAoBF,YAAAA,GAApB;AAAyBpD,YAAAA,UAAU,EAAE,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB6C,UAAtD;AAAkE,wBAAY,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB4C,QAA/F;AAAyGhC,YAAAA;AAAzG,WAAX;AACA,eAAKR,KAAL,CAAWd,WAAX,CAAuB+G,IAAvB;AACH,SALI,MAMA;AACDjH,UAAAA,KAAK,CAAC2E,IAAN,CAAW,KAAK3D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX;AACH;AACJ,OA9DD,MA8DO;AACH9E,QAAAA,KAAK,CAAC2E,IAAN,CAAW,KAAK3D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KA3mBkB;;AAAA,SA8mBnBL,sCA9mBmB,GA8mBsB,CAACqD,UAAD,EAAaC,WAAb,KAA6B;AAClE,UAAIC,WAAW,GAAG,EAAlB;;AACA,UAAIC,KAAK,CAACC,OAAN,CAAcH,WAAd,KAA8BA,WAAW,CAAC1D,MAAZ,GAAqB,CAAvD,EAA0D;AACtD0D,QAAAA,WAAW,CAACzF,GAAZ,CAAgB,CAACY,CAAD,EAAIiF,MAAJ,KAAe;AAC3BL,UAAAA,UAAU,CAACxF,GAAX,CAAe8F,CAAC,IAAI;AAChB,gBAAIlF,CAAC,CAACc,YAAN,EAAoB;AAChB,kBAAId,CAAC,CAACc,YAAF,CAAehC,IAAf,CAAoBwE,kBAApB,KAA2C4B,CAAC,CAACpG,IAAF,CAAOwE,kBAAtD,EAA0E;AACtE,sBAAM1E,KAAK,GAAGgG,UAAU,CAACO,SAAX,CAAqBC,EAAE,IAAIA,EAAE,CAACtG,IAAH,CAAQwE,kBAAR,KAA+B4B,CAAC,CAACpG,IAAF,CAAOwE,kBAAjE,CAAd;AACA,oBAAI+B,WAAW,GAAG,CAAC,GAAGT,UAAJ,CAAlB;AACAS,gBAAAA,WAAW,GAAG,CAAC,GAAGA,WAAW,CAAClD,MAAZ,CAAmB,CAAnB,EAAsBvD,KAAtB,CAAJ,CAAd;AAEA,oBAAI0G,WAAW,GAAG,CAAC,GAAGV,UAAJ,CAAlB;AACAU,gBAAAA,WAAW,GAAG,CAAC,GAAGA,WAAW,CAACnD,MAAZ,CAAmBvD,KAAK,GAAG,CAA3B,CAAJ,CAAd;AACAkG,gBAAAA,WAAW,GAAG,CAAC,GAAGO,WAAJ,EAAiB,GAAGC,WAApB,CAAd;AACAV,gBAAAA,UAAU,GAAG,CAAC,GAAGE,WAAJ,CAAb;AACH,eATD,MAUK,IAAI9E,CAAC,CAACc,YAAF,CAAehC,IAAf,CAAoBwE,kBAApB,KAA2C4B,CAAC,CAACpG,IAAF,CAAOwE,kBAAtD,EAA0E;AAC3E,sBAAM1E,KAAK,GAAGgG,UAAU,CAACO,SAAX,CAAqBC,EAAE,IAAIA,EAAE,CAACtG,IAAH,CAAQwE,kBAAR,KAA+B4B,CAAC,CAACpG,IAAF,CAAOwE,kBAAjE,CAAd;AACA,oBAAI+B,WAAW,GAAG,CAAC,GAAGT,UAAJ,CAAlB;AACAS,gBAAAA,WAAW,GAAG,CAAC,GAAGA,WAAW,CAAClD,MAAZ,CAAmB,CAAnB,EAAsBvD,KAAtB,CAAJ,CAAd;AAEA,oBAAI0G,WAAW,GAAG,CAAC,GAAGV,UAAJ,CAAlB;AACAU,gBAAAA,WAAW,GAAG,CAAC,GAAGA,WAAW,CAACnD,MAAZ,CAAmBvD,KAAK,GAAG,CAA3B,CAAJ,CAAd;AACAkG,gBAAAA,WAAW,GAAG,CAAC,GAAGO,WAAJ,EAAiB,GAAGC,WAApB,CAAd;AACAV,gBAAAA,UAAU,GAAG,CAAC,GAAGE,WAAJ,CAAb;AACH;AACJ,aArBD,MAqBO;AACH,kBAAIG,MAAM,KAAK,CAAf,EAAkB;AACdH,gBAAAA,WAAW,GAAG,CAAC,GAAGF,UAAJ,CAAd;AACH;AAEJ;AACJ,WA5BD;AA6BH,SA9BD;AA+BH,OAhCD,MAgCO;AACHE,QAAAA,WAAW,GAAG,CAAC,GAAGF,UAAJ,CAAd;AACH;;AACD,aAAOE,WAAP;AAEH,KArpBkB;;AAAA,SAwpBnBS,oBAxpBmB,GAwpBI,CAACvH,KAAD,EAAQY,KAAR,KAAkB;AACrC,YAAMN,cAAc,GAAG,KAAKb,KAAL,CAAWa,cAAX,IAA6B,EAApD;AACA,YAAMkH,eAAe,GAAC,CAAC,GAAG,KAAK/H,KAAL,CAAWiD,cAAf,CAAtB;AACA,UAAIqB,uBAAuB,GAAC,EAA5B;;AACA,UAAGzD,cAAc,CAAC,YAAD,CAAd,KAA+BG,SAAlC,EAA4C;AACvCsD,QAAAA,uBAAuB,GAAG,CAAC,GAAGzD,cAAc,CAAC,YAAD,CAAlB,CAA1B;AAEJ;;AACD,UAAI2D,MAAM,GAAC;AACR,SAACuD,eAAe,CAAC5G,KAAD,CAAhB,GAAyBZ,KAAK,CAACG,MAAN,CAAaF;AAD9B,OAAX;AAGD,UAAKiE,UAAU,GAAE,EAAjB;;AACA,UAAG5D,cAAc,CAAC,YAAD,CAAd,KAA+BG,SAAlC,EAA4C;AAC3C,YAAIgH,gBAAgB,GAAC,EAArB;AACAA,QAAAA,gBAAgB,GAAC,CAAC,GAAGnH,cAAc,CAAC,YAAD,CAAlB,CAAjB;AACA4D,QAAAA,UAAU,GAAG,CAAC,GAAGH,uBAAuB,CAACI,MAAxB,CAA+B,CAA/B,EAAkCvD,KAAlC,CAAJ,EAA8C,EAAE,GAAGqD;AAAL,SAA9C,EAA6D,GAAGwD,gBAAgB,CAACtD,MAAjB,CAAyBvD,KAAK,GAAC,CAA/B,CAAhE,CAAb;AACA,OAJD,MAIK;AACJsD,QAAAA,UAAU,GAAC,CAAC,EAAC,GAAGD;AAAJ,SAAD,CAAX;AACA;;AAEA,WAAK/C,QAAL,CAAc;AAAEZ,QAAAA,cAAc,EAAE,EAAE,GAAGA,cAAL;AAAqBqG,UAAAA,UAAU,EAAEzC;AAAjC;AAAlB,OAAd,EApBqC,CAqBrC;AACH,KA9qBkB;;AAAA,SAq+BnBwD,kBAr+BmB,GAq+BE,MAAM;AACvB;AACA,UAAIC,YAAY,GAAG,GAAnB,CAFuB,CAGvB;;AACA,UAAI,KAAKlI,KAAL,IAAc,KAAKA,KAAL,CAAWa,cAAzB,IAA2C,KAAKb,KAAL,CAAWa,cAAX,CAA0BkC,eAArE,IAAwF,KAAK/C,KAAL,CAAWa,cAAX,CAA0BkC,eAA1B,CAA0CvC,KAA1C,GAAkD,CAA9I,EAAiJ;AAC7I,YAAI,KAAKR,KAAL,IAAc,KAAKA,KAAL,CAAWY,gBAAX,CAA4B8C,MAA5B,GAAqC,CAAvD,EAA0D;AACtD,eAAK1D,KAAL,CAAWY,gBAAX,CAA4Be,GAA5B,CAAgC,CAACC,CAAD,EAAIT,KAAJ,KAAc;AAC1C,gBAAIA,KAAK,GAAG,CAAZ,EAAe;AACX+G,cAAAA,YAAY,GAAGA,YAAY,GAAG,QAAf,GAA0B7F,MAAM,CAACC,IAAP,CAAYV,CAAZ,CAA1B,GAA2C,OAA3C,GAAqDS,MAAM,CAACsE,MAAP,CAAc/E,CAAd,CAArD,GAAwE,IAAvF;AACH;AAEJ,WALD;AAMA,cAAIK,IAAI,GAAG,KAAKqD,oBAAL,CAA0B,KAAKtF,KAAL,CAAWa,cAArC,CAAX;AAEAqH,UAAAA,YAAY,GAAGA,YAAY,GAAG,IAAf,GAAsB,wBAAtB,GAAiDjG,IAAjD,GAAwD,OAAvE;AACH,SAVD,MAWK;AACDiG,UAAAA,YAAY,GAAGA,YAAY,GAAG,KAA9B;AACH;AACJ,OAfD,MAeO,IAAI,KAAKlI,KAAL,IAAc,KAAKA,KAAL,CAAWa,cAAzB,IAA2C,KAAKb,KAAL,CAAWa,cAAX,CAA0BkC,eAArE,IAAwF,KAAK/C,KAAL,CAAWa,cAAX,CAA0BkC,eAA1B,CAA0CvC,KAA1C,IAAmD,EAA/I,EAAmJ;AACtJ,YAAI,KAAKR,KAAL,IAAc,KAAKA,KAAL,CAAWY,gBAAX,CAA4B8C,MAA5B,GAAqC,CAAvD,EAA0D;AACtD,eAAK1D,KAAL,CAAWY,gBAAX,CAA4Be,GAA5B,CAAgC,CAACC,CAAD,EAAIT,KAAJ,KAAc;AAC1C,gBAAIA,KAAK,GAAG,KAAKnB,KAAL,CAAWY,gBAAX,CAA4B8C,MAAxC,EAAgD;AAC5CwE,cAAAA,YAAY,GAAGA,YAAY,GAAG,OAAf,GAAyB7F,MAAM,CAACC,IAAP,CAAYV,CAAZ,CAAzB,GAA0C,OAA1C,GAAoDS,MAAM,CAACsE,MAAP,CAAc/E,CAAd,CAApD,GAAuE,IAAtF;AACH;AACJ,WAJD;AAKA,cAAIK,IAAI,GAAG,KAAKqD,oBAAL,CAA0B,KAAKtF,KAAL,CAAWa,cAArC,CAAX,CANsD,CAOjE;;AACW,cAAI,KAAKb,KAAL,CAAWiD,cAAX,IAA2B,KAAKjD,KAAL,CAAWiD,cAAX,CAA0BS,MAA1B,GAAmC,CAAlE,EAAqE;AAEjE,iBAAK1D,KAAL,CAAWiD,cAAX,CAA0BtB,GAA1B,CAA8B,CAACN,IAAD,EAAOF,KAAP,KAAiB;AAC3C;AACD;AAEC+G,cAAAA,YAAY,GAAGA,YAAY,IAAI,UAAU,KAAKlI,KAAL,CAAWiD,cAAX,CAA0B9B,KAA1B,CAAV,GAA4C,OAAhD,CAAZ,IAAuE,KAAKnB,KAAL,CAAWa,cAAX,CAA0B,YAA1B,KAAyC,KAAKb,KAAL,CAAWa,cAAX,CAA0B,YAA1B,EAAwCM,KAAxC,MAAiDH,SAA1F,GAAoG,KAAKhB,KAAL,CAAWa,cAAX,CAA0B,YAA1B,EAAwCM,KAAxC,EAAgDE,IAAhD,KAAuDL,SAAvD,GAAiE,KAAKhB,KAAL,CAAWa,cAAX,CAA0B,YAA1B,EAAwCM,KAAxC,EAAgDE,IAAhD,IAAuD,KAAxH,GAA8H,KAAlO,GAAwO,KAA/S,CAAf;AAEH,aAND;AAOH;;AACD6G,UAAAA,YAAY,GAAGA,YAAY,GAAG,IAAf,GAAsB,wBAAtB,GAAiDjG,IAAjD,GAAwD,OAAvE;AAEH,SApBD,MAoBO;AACHiG,UAAAA,YAAY,GAAGA,YAAY,GAAG,KAA9B;AACH;AACJ,OAxBM,MAwBA,IAAI,KAAK7H,KAAL,CAAWJ,KAAf,EAAsB;AACzBiI,QAAAA,YAAY,GAAGA,YAAY,GAAG,eAA9B;AACA,YAAIC,QAAQ,GAAGtG,IAAI,CAACC,SAAL,CAAe,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB4C,QAAhC,CAAf;AACAqF,QAAAA,YAAY,GAAGA,YAAY,GAAGC,QAAf,GAA0B,GAAzC;AACH;;AAED,aAAOD,YAAP;AACH,KAvhCkB;;AAAA,SAyhCnBlC,aAzhCmB,GAyhCH,MAAM;AAClB,UAAIoC,SAAS,GAAG,EAAhB;;AACA,UAAI,KAAKpI,KAAL,IAAc,KAAKA,KAAL,CAAWa,cAAzB,IAA2C,KAAKb,KAAL,CAAWa,cAAX,CAA0BkC,eAArE,IAAwF,KAAK/C,KAAL,CAAWa,cAAX,CAA0BkC,eAA1B,CAA0CvC,KAA1C,GAAkD,CAA9I,EAAiJ;AAC7I,YAAI,KAAKR,KAAL,IAAc,KAAKA,KAAL,CAAWY,gBAAX,CAA4B8C,MAA5B,GAAqC,CAAvD,EAA0D;AAEtDrE,UAAAA,KAAK,CAACgJ,IAAN,CAAW,KAAKhI,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX;AAEA,eAAKnE,KAAL,CAAWY,gBAAX,CAA4Be,GAA5B,CAAgC,CAACC,CAAD,EAAIT,KAAJ,KAAc;AAC1C,gBAAIA,KAAK,GAAG,CAAZ,EAAe;AACXiH,cAAAA,SAAS,GAAG,EACR,GAAGA,SADK;AAER,mBAAGxG;AAFK,eAAZ;AAIH;AAEJ,WARD;AASA,cAAIK,IAAI,GAAG,KAAKqD,oBAAL,CAA0B,KAAKtF,KAAL,CAAWa,cAArC,CAAX;AACA,gBAAMyH,MAAM,GAAG,EACX,GAAGF,SADQ;AAEX,8BAAkBnG;AAFP,WAAf;AAIA,iBAAOJ,IAAI,CAACC,SAAL,CAAewG,MAAf,CAAP;AAEH,SApBD,MAoBO;AACHjJ,UAAAA,KAAK,CAAC2E,IAAN,CAAW,KAAK3D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX;AACH;AACJ,OAxBD,MAwBO,IAAI,KAAK9D,KAAL,CAAWJ,KAAX,IAAoB,KAAKI,KAAL,CAAWJ,KAAX,CAAiB4C,QAAzC,EAAmD;AAEtD,YAAI4D,cAAc,GAAC,EAAnB;AACA,YAAIC,aAAa,GAAC,EAAlB;;AACA,YAAG,CAAC,KAAK1G,KAAL,CAAWiD,cAAZ,KAA6BjC,SAAhC,EAA0C;AACtC0F,UAAAA,aAAa,CAACjD,IAAd,CAAmB,KAAnB;AACH;;AACD,YAAG,KAAKzD,KAAL,CAAWiD,cAAX,KAA4BjC,SAA/B,EAAyC;AACpC0F,UAAAA,aAAa,GAAG,KAAK1G,KAAL,CAAWiD,cAAX,CAA0BtB,GAA1B,CAA8B,CAACN,IAAD,EAAOF,KAAP,KAAiB;AAE5D;AACC,gBACG,KAAKnB,KAAL,CAAWa,cAAX,IACA,KAAKb,KAAL,CAAWa,cAAX,CAA0B,YAA1B,CADA,IAEA,KAAKb,KAAL,CAAWa,cAAX,CAA0B,YAA1B,EAAwCM,KAAxC,CAHH,EAIC;AACE;AACA,oBAAMyF,OAAO,GAAC,KAAK5G,KAAL,CAAWa,cAAX,CAA0B,YAA1B,EAAwCM,KAAxC,EAA+CE,IAA/C,MAAuD,EAArE,CAFF,CAIM;;AACJ,kBAAGuF,OAAH,EAAW;AACPH,gBAAAA,cAAc,CAAChD,IAAf,CAAoBpC,IAApB;AACH;;AACD,qBAAOuF,OAAP;AAEH;;AACDH,YAAAA,cAAc,CAAChD,IAAf,CAAoBpC,IAApB;AAEA,mBAAO,IAAP;AACH,WArBgB,CAAhB;AAuBDwF,UAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ;AAEH;;AACD,YAAG,CAACA,aAAa,CAACxF,QAAd,CAAuB,IAAvB,CAAJ,EAAkC;AAC9B7B,UAAAA,KAAK,CAACgJ,IAAN,CAAW,KAAKhI,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX;AAEA,gBAAMmE,MAAM,GAAG;AACX,wBAAY,KAAKjI,KAAL,CAAWJ,KAAX,CAAiB4C;AADlB,WAAf;AAGA,iBAAOhB,IAAI,CAACC,SAAL,CAAewG,MAAf,CAAP;AACH,SAPD,MAOK;AACDjJ,UAAAA,KAAK,CAAC2E,IAAN,CAAW,KAAK3D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,IAAgE,IAAhE,GAAqEsC,cAAc,CAAC9E,GAAf,CAAmBN,IAAI,IAAEA,IAAzB,EAA+BW,IAA/B,CAAoC,GAApC,CAArE,GAA8G,IAAzH;AAEH;AAIJ;AACJ,KApmCkB;;AAAA,SAsmCnBqE,UAtmCmB,GAsmCN,MAAM;AACf,UAAI+B,SAAS,GAAG,EAAhB;AACA,WAAKpI,KAAL,CAAWY,gBAAX,CAA4Be,GAA5B,CAAgCC,CAAC,IAAI;AACjCwG,QAAAA,SAAS,GAAG,EACR,GAAGA,SADK;AAER,aAAGxG;AAFK,SAAZ;AAIH,OALD;AAMA,UAAIK,IAAI,GAAG,KAAKqD,oBAAL,CAA0B,KAAKtF,KAAL,CAAWa,cAArC,CAAX;AACA,YAAMyH,MAAM,GAAG,EACX,GAAGF,SADQ;AAEX,0BAAkBnG;AAFP,OAAf;AAKA,aAAOqG,MAAP;AACH,KArnCkB;;AAGf,SAAKtI,KAAL,GAAa;AACTa,MAAAA,cAAc,EAAE,EADP;AAETD,MAAAA,gBAAgB,EAAE,EAFT;AAGT2H,MAAAA,WAAW,EAAE,EAHJ;AAITC,MAAAA,UAAU,EAAE,EAJH;AAKTC,MAAAA,qBAAqB,EAAE,EALd;AAMTC,MAAAA,YAAY,EAAE,EANL;AAMSC,MAAAA,KAAK,EAAE;AANhB,KAAb;AAQH;;AAE8B,SAAxBC,wBAAwB,CAACvI,KAAD,EAAQL,KAAR,EAAe;AAE1C,QAAIK,KAAK,CAACJ,KAAN,CAAYyI,YAAZ,KAA6B,EAA7B,IAAmCrI,KAAK,CAACJ,KAAN,CAAYyI,YAAZ,KAA6B1I,KAAK,CAAC0I,YAA1E,EAAwF;AACpFrJ,MAAAA,KAAK,CAAC2E,IAAN,CAAW3D,KAAK,CAACJ,KAAN,CAAYyI,YAAvB;AACArI,MAAAA,KAAK,CAACJ,KAAN,CAAYyI,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAIrI,KAAK,CAACJ,KAAN,CAAY0I,KAAZ,KAAsB3I,KAAK,CAAC2I,KAAhC,EAAuC;AACnCtJ,MAAAA,KAAK,CAACsJ,KAAN,CAAYtI,KAAK,CAACJ,KAAN,CAAY0I,KAAxB;AACAtI,MAAAA,KAAK,CAACJ,KAAN,CAAY0I,KAAZ,GAAoB,EAApB;AACH;;AACD,WAAO,IAAP;AACH;;AAupBDE,EAAAA,MAAM,GAAG;AACN;AAEC,wBAAQ,uDACJ,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,0BAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,SAAS,EAAC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,IAAI,EAAE,iBADV;AAEI,MAAA,SAAS,EAAE,KAAKxI,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFf;AAGI,MAAA,WAAW,EAAE,KAAK9D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAHjB;AAII,MAAA,OAAO,EAAE,KAAKnE,KAAL,CAAW8I,cAAX,IAA6B,EAJ1C;AAKI,MAAA,KAAK,EAAE,KAAKzI,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,IAA2C,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WALlF;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,WAAW,EAAE,KAPjB;AAQI,MAAA,OAAO,EAAE,KARb;AASI,MAAA,YAAY,EAAE,KATlB;AAUI,MAAA,iBAAiB,EAAE,IAVvB;AAWI,MAAA,QAAQ,EAAG1F,KAAD,IAAW,KAAKiC,aAAL,CAAmBjC,KAAnB,EAA0B,iBAA1B,CAXzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAgBI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,2BAAlB;AAA8C,MAAA,OAAO,EAAGqB,CAAD,IAAO,KAAKrC,WAAL,EAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKc,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CADL,CADJ,CAhBJ,CADJ,EAuBK,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,IAA+B,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA3D,KAA2E,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,GAAgD,CAAhD,IAAqD,KAAKH,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,GAAgD,EAAhL,iBACG,oBAAC,GAAD;AAAK,MAAA,SAAS,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,IAAI,EAAE,WADV;AAEI,MAAA,SAAS,EAAE,KAAKH,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFf;AAGI,MAAA,WAAW,EAAE,KAAK9D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAHjB;AAII,MAAA,OAAO,EAAE,KAAKnE,KAAL,CAAW+I,UAAX,IAAyB,EAJtC;AAKI,MAAA,KAAK,EAAE,KAAK1I,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4Bc,YAA5B,IAA4C,KAAKvD,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4Bc,YALnF;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,WAAW,EAAE,KAPjB;AAQI,MAAA,OAAO,EAAE,KARb;AASI,MAAA,YAAY,EAAE,KATlB;AAUI,MAAA,iBAAiB,EAAE,IAVvB;AAWI,MAAA,QAAQ,EAAGrD,KAAD,IAAW,KAAKiC,aAAL,CAAmBjC,KAAnB,EAA0B,WAA1B,CAXzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADH,GAiBY,EAxCjB,EAyCK,KAAKF,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,IAA+B,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA3D,IAA2E,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,KAAkD,EAA7H,gBACG,oBAAC,GAAD;AAAK,MAAA,SAAS,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,IAAI,EAAE,eADV;AAEI,MAAA,SAAS,EAAE,KAAKH,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFf;AAGI,MAAA,WAAW,EAAE,KAAK9D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAHjB;AAII,MAAA,OAAO,EAAE,KAAKnE,KAAL,CAAWgJ,SAAX,IAAwB,EAJrC;AAKI,MAAA,KAAK,EAAE,KAAKhJ,KAAL,CAAWa,cAAX,CAA0B,eAA1B,KAA8C,KAAKb,KAAL,CAAWa,cAAX,CAA0B,eAA1B,CAA9C,IAA4F,EALvG;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,WAAW,EAAE,KAPjB;AAQI,MAAA,OAAO,EAAE,KARb;AASI,MAAA,YAAY,EAAE,KATlB;AAUI,MAAA,iBAAiB,EAAE,IAVvB;AAWI,MAAA,QAAQ,EAAGN,KAAD,IAAW,KAAKiC,aAAL,CAAmBjC,KAAnB,EAA0B,eAA1B,CAXzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADH,GAiBY,EA1DjB,eA2DI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,2BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKF,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,IAA+B,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA3D,KAA2E,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,GAAgD,CAAhD,IAAqD,KAAKH,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,GAAgD,EAAhL,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKH,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,IAA+B,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA3D,KACI,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,GAAgD,CAAhD,IAAqD,KAAKH,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,GAAgD,EADzG,KAEG,KAAKH,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmG,gBAF/B,GAIO,KAAKjJ,KAAL,CAAWiD,cAAX,IAA6B,KAAKjD,KAAL,CAAWiD,cAAX,CAA0BtB,GAA1B,CAA8B,CAACN,IAAD,EAAOF,KAAP,kBACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,KAAK,EAAE,KAAKd,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADX;AAEI,MAAA,IAAI,EAAC,aAFT;AAGI,MAAA,IAAI,EAAC,MAHT;AAII,MAAA,WAAW,EAAE,KAAK9D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAJjB;AAKI,MAAA,KAAK,EAAE,KAAKnE,KAAL,CAAWiD,cAAX,CAA0B9B,KAA1B,CALX;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,QAAQ,EAAE,IAPd;AAQI,MAAA,UAAU,EAAE,IARhB;AASI,MAAA,SAAS,EAAE,GATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,eAgBI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,KAAK,EAAE,KAAKd,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADX;AAEI,MAAA,IAAI,EAAC,aAFT;AAGI,MAAA,IAAI,EAAC,MAHT;AAII,MAAA,WAAW,EAAE,KAAK9D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAJjB;AAKI,MAAA,KAAK,EAAE,KAAKnE,KAAL,CAAWa,cAAX,CAA0B,YAA1B,KAAyC,KAAKb,KAAL,CAAWa,cAAX,CAA0B,YAA1B,EAAwCM,KAAxC,CAAzC,IAA2F,KAAKnB,KAAL,CAAWa,cAAX,CAA0B,YAA1B,EAAwCM,KAAxC,EAA+CE,IAA/C,CAA3F,IAAiJ,KAAKrB,KAAL,CAAWa,cAAX,CAA0B,YAA1B,EAAwCM,KAAxC,EAA+CE,IAA/C,CAL5J,CAKkN;AALlN;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,QAAQ,EAAGd,KAAD,IAAW,KAAKuH,oBAAL,CAA0BvH,KAA1B,EAAiCY,KAAjC,CAPzB,CASG;AATH;AAUI,MAAA,QAAQ,EAAE,IAVd;AAWI,MAAA,SAAS,EAAE,GAXf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAhBJ,CADJ,CADyB,CAJpC,GAyCK,EA1CV,CADJ,eAiDI;AAAS,MAAA,SAAS,EAAE,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKnB,KAAL,CAAWa,cAAX,CAA0B,WAA1B,KAA0C,KAAKb,KAAL,CAAWa,cAAX,CAA0B,WAA1B,EAAuCc,GAAvC,CAA2C,CAACN,IAAD,EAAOF,KAAP,KAAiB;AACnG,0BAAO;AAAK,QAAA,SAAS,EAAE,+BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACH;AAAK,QAAA,KAAK,EAAC,qBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,KAAK,EAAC,qBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,SAAS,EAAE,KAAKd,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFf;AAGI,QAAA,YAAY,EAAE,IAHlB;AAII,QAAA,IAAI,EAAE,cAJV;AAKI,QAAA,WAAW,EAAE,KAAK9D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CALjB;AAMI,QAAA,UAAU,EAAE,IANhB;AAOI,QAAA,OAAO,EAAE,KAAKnE,KAAL,CAAW6D,YAAX,IAA2B,EAPxC;AAQI,QAAA,KAAK,EAAExC,IAAI,CAAC,cAAD,CAAJ,IAAwBA,IAAI,CAAC,cAAD,CAA5B,IAAgD,EAR3D;AASI,QAAA,QAAQ,EAAEb,KAAK,IAAI,KAAKwE,cAAL,CAAoBxE,KAApB,EAA2B,cAA3B,EAA2C,QAA3C,EAAqDW,KAArD,CATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,CADG,eAgBH;AAAK,QAAA,KAAK,EAAC,qBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,KAAK,EAAC,qBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,SAAS,EAAE,KAAKd,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFf;AAGI,QAAA,YAAY,EAAE,IAHlB;AAII,QAAA,IAAI,EAAE,WAJV;AAKI,QAAA,WAAW,EAAE,KAAK9D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CALjB;AAMI,QAAA,UAAU,EAAE,IANhB;AAOI,QAAA,OAAO,EAAE9C,IAAI,CAAC,cAAD,CAAJ,IAAwBA,IAAI,CAAC,cAAD,CAAJ,CAAqBA,IAA7C,GACJA,IAAI,CAAC,cAAD,CAAJ,CAAqBA,IAArB,CAA0BkC,cAA1B,KAA6C,QAA7C,IAAyDlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,mBAAnG,IAA0HlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,WAArK,GACI5E,kBADJ,GAEK0C,IAAI,CAAC,cAAD,CAAJ,CAAqBA,IAArB,CAA0BkC,cAA1B,KAA6C,SAA7C,IAA0DlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,SAApG,IAAiHlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,UAA3J,IAAyKlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,QAApN,GACI3E,mBADJ,GAEOyC,IAAI,CAAC,cAAD,CAAJ,CAAqBA,IAArB,CAA0BkC,cAA1B,KAA6C,MAA7C,IAAuDlC,IAAI,CAAC,cAAD,CAAJ,CAAqBA,IAArB,CAA0BkC,cAA1B,KAA6C,6BAArG,GACE1E,iBADF,GAEIF,kBAPT,GAO8B,EAd3C;AAgBI,QAAA,KAAK,EAAE0C,IAAI,CAAC,iBAAD,CAAJ,KAA4BL,SAA5B,GAAwCK,IAAI,CAAC,iBAAD,CAA5C,GAAkE,EAhB7E;AAiBI,QAAA,QAAQ,EAAEb,KAAK,IAAI,KAAKwE,cAAL,CAAoBxE,KAApB,EAA2B,iBAA3B,EAA8C,WAA9C,EAA2DW,KAA3D,CAjBvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,CAhBG,eAwCH;AAAK,QAAA,SAAS,EAAE,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACME,IAAI,CAAC,iBAAD,CAAJ,IAA2BA,IAAI,CAAC,iBAAD,CAAJ,CAAwBb,KAAnD,IACKa,IAAI,CAAC,cAAD,CADV,GAEIA,IAAI,CAAC,cAAD,CAAJ,CAAqBA,IAArB,CAA0BkC,cAA1B,KAA6C,QAA7C,IAAyDlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,mBAAnG,IAA0HlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,WAArK,GACKlC,IAAI,CAAC,iBAAD,CAAJ,CAAwBb,KAAxB,KAAkC,SAAlC,IACGa,IAAI,CAAC,iBAAD,CAAJ,CAAwBb,KAAxB,KAAkC,aADrC,IAEGa,IAAI,CAAC,iBAAD,CAAJ,CAAwBb,KAAxB,KAAkC,SAFrC,IAGGa,IAAI,CAAC,iBAAD,CAAJ,CAAwBb,KAAxB,KAAkC,OAHtC,gBAII,oBAAC,SAAD;AACI,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CADX;AAEI,QAAA,IAAI,EAAC,aAFT;AAGI,QAAA,IAAI,EAAC,MAHT;AAII,QAAA,QAAQ,EAAG5D,KAAD,IAAW,KAAK8D,qBAAL,CAA2B9D,KAA3B,EAAkCY,KAAlC,CAJzB;AAKI,QAAA,WAAW,EAAE,KAAKd,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CALjB;AAMI,QAAA,KAAK,EAAE9C,IAAI,CAAC,aAAD,CAAJ,GAAsBA,IAAI,CAAC,aAAD,CAA1B,GAA4C,EANvD;AAOI,QAAA,WAAW,EAAE,IAPjB;AAQI,QAAA,QAAQ,EAAE,IARd;AASI,QAAA,SAAS,EAAE,GATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,GAcS,EAfb,GAiBKA,IAAI,CAAC,cAAD,CAAJ,CAAqBA,IAArB,CAA0BkC,cAA1B,KAA6C,SAA7C,IAA0DlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,SAApG,IAAiHlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,UAA3J,IAAyKlC,IAAI,CAACgC,YAAL,CAAkBhC,IAAlB,CAAuBkC,cAAvB,KAA0C,QAApN,GACKlC,IAAI,CAAC,iBAAD,CAAJ,CAAwBb,KAAxB,KAAkC,MAAlC,IACGa,IAAI,CAAC,iBAAD,CAAJ,CAAwBb,KAAxB,KAAkC,UADtC,GAEIa,IAAI,CAAC,iBAAD,CAAJ,CAAwBb,KAAxB,KAAkC,IAAlC,gBACI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CADX;AAEI,QAAA,IAAI,EAAC,aAFT;AAGI,QAAA,IAAI,EAAC,MAHT;AAII,QAAA,QAAQ,EAAG5D,KAAD,IAAW,KAAK8D,qBAAL,CAA2B9D,KAA3B,EAAkCY,KAAlC,CAJzB;AAKI,QAAA,WAAW,EAAE,KAAKd,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CALjB;AAMI,QAAA,KAAK,EAAE9C,IAAI,CAAC,aAAD,CAAJ,GAAsBA,IAAI,CAAC,aAAD,CAA1B,GAA4C,EANvD;AAOI,QAAA,WAAW,EAAE,IAPjB;AAQI,QAAA,QAAQ,EAAE,IARd;AASI,QAAA,SAAS,EAAE,GATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,gBAaI,oBAAC,gBAAD;AACI,QAAA,IAAI,EAAE,aADV;AAEI,QAAA,KAAK,EAAE,KAAKhB,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFX;AAGI,QAAA,IAAI,EAAC,QAHT;AAII,QAAA,KAAK,EAAE9C,IAAI,CAAC,aAAD,CAJf;AAKI,QAAA,WAAW,EAAE,KAAKhB,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CALjB;AAMI,QAAA,MAAM,EAAE,IANZ,CAOI;AACA;AARJ;AASI,QAAA,SAAS,EAAE,EATf;AAUI,QAAA,QAAQ,EAAG3D,KAAD,IAAW,KAAKoE,0BAAL,CAAgCpE,KAAhC,EAAuC,aAAvC,EAAsDW,KAAtD,CAVzB;AAWI,QAAA,OAAO,EAAE,IAXb,CAYI;AACA;AAbJ;AAcI,QAAA,SAAS,EAAC,cAdd;AAeI,QAAA,MAAM,EAAC,gCAfX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAfR,GAiCM,EAlCV,GAmCOE,IAAI,CAAC,cAAD,CAAJ,CAAqBA,IAArB,CAA0BkC,cAA1B,KAA6C,MAA7C,IAAuDlC,IAAI,CAAC,cAAD,CAAJ,CAAqBA,IAArB,CAA0BkC,cAA1B,KAA6C,6BAArG,GACGlC,IAAI,CAAC,iBAAD,CAAJ,CAAwBb,KAAxB,KAAkC,GAAlC,IACGa,IAAI,CAAC,iBAAD,CAAJ,CAAwBb,KAAxB,KAAkC,GADrC,IAEMa,IAAI,CAAC,iBAAD,CAAJ,CAAwBb,KAAxB,KAAkC,GAFxC,IAGMa,IAAI,CAAC,iBAAD,CAAJ,CAAwBb,KAAxB,KAAkC,KAHzC,gBAKI,oBAAC,cAAD;AACI,QAAA,IAAI,EAAE,aADV;AAEI,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFX;AAGI,QAAA,SAAS,EAAC,cAHd;AAII,QAAA,eAAe,EAAE,KAAK9D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAJrB;AAKI,QAAA,QAAQ,EAAE9C,IAAI,CAAC,aAAD,CAAJ,GAAsBA,IAAI,CAAC,aAAD,CAA1B,GAA4C,IAAIyE,IAAJ,EAL1D;AAMI,QAAA,UAAU,EAAE,KAAKzF,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0B,eAA1B,CANhB;AAOI,QAAA,cAAc,EAAE,KAAKxC,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAPpB;AAQI,QAAA,aAAa,EAAE,IARnB;AASI,QAAA,QAAQ,EAAE+E,IAAI,IAAI,KAAKpE,gBAAL,CAAsB,aAAtB,EAAqCoE,IAArC,EAA2C/H,KAA3C,CATtB;AAUI,QAAA,KAAK,EAAEE,IAAI,CAAC,aAAD,CAAJ,GAAsBA,IAAI,CAAC,aAAD,CAA1B,GAA4C,EAVvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,GAiBM,EAlBR,GAmBI,EAzEjB,GA0EK,EA3EV,CAxCG,eAwHH;AAAK,QAAA,SAAS,EAAE,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKrB,KAAL,CAAWa,cAAX,CAA0B,WAA1B,EAAuC6C,MAAvC,GAAgD,CAAhD,iBACG,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAE,2BAAnB;AACI,QAAA,OAAO,EAAE,MAAM,KAAK0B,mBAAL,CAAyBjE,KAAzB,CADnB;AAEI,QAAA,IAAI,EAAC,QAFT;AAEkB,QAAA,QAAQ,EAAC,GAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGI;AAAM,QAAA,SAAS,EAAE,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEhC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAHJ,CAFR,CAxHG,CAAP;AAoIH,KArI0C,CAD/C,EAuIK,KAAKkB,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,IAA+B,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA3D,KAA2E,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,GAAgD,CAAhD,IAAqD,KAAKH,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,GAAgD,EAAhL,iBACG;AAAK,MAAA,SAAS,EAAE,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAE,kCAAnB;AACI,MAAA,OAAO,EAAGoB,CAAD,IAAO,KAAK+B,WAAL,CAAiB/B,CAAjB,CADpB;AACyC,MAAA,IAAI,EAAC,QAD9C;AACuD,MAAA,QAAQ,EAAC,GADhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGI;AAAM,MAAA,SAAS,EAAE,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAExC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAHJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,KAAKiB,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAAP,CANJ,CADJ,CADH,GAUY,EAjJjB,CAjDJ,CADH,GAuMK,EAxMV,CADJ,CA3DJ,CADJ,eAyQI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC,oBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,SAAS,EAAC,oBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK9D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CADL,CADJ,CADJ,eAMI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,kCAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAK8D,kBAAL,EAAN,CAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,2BAAlB;AAA8C,MAAA,OAAO,EAAGrG,CAAD,IAAO,KAAKmE,eAAL,EAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,EAA3B;AAA8B,MAAA,IAAI,EAAE7G,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EACmE,IADnE,EAEK,KAAKmB,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAFL,CADJ,CAHJ,CANJ,CADJ,CADJ,eAoBI,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC,oBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,SAAS,EAAC,oBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK9D,KAAL,CAAW4D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CADL,CADJ,CADJ,eAMI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,eAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAE,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4ByF,WAA5B,IAA2C,KAAKlI,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4ByF,WAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CANJ,CADJ,CApBJ,CAzQJ,CADJ,CADI,CAAR;AAgTH;;AAoJDY,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI,KAAK/I,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,KAAgCsG,aAAa,CAACnJ,KAAd,CAAoB6C,UAAxD,EAAoE;AAChE+D,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKzG,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,KAAgCsG,aAAa,CAACnJ,KAAd,CAAoB6C,UAAhE;AACA,UAAI;AAAE2F,QAAAA,qBAAF;AAAyBD,QAAAA,UAAzB;AAAqCM,QAAAA,cAArC;AACAjI,QAAAA,cADA;AACgBD,QAAAA,gBADhB;AACkCmD,QAAAA,eADlC;AACmDgF,QAAAA,UADnD;AAC+DC,QAAAA,SAD/D;AAC0EK,QAAAA,SAD1E;AACqFpG,QAAAA;AADrF,UAEA,EAAE,GAAG,KAAKjD;AAAV,OAFJ;;AAIA,UAAI,KAAKK,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0ByG,SAA1B,KAAwCF,aAAa,CAACnJ,KAAd,CAAoB4C,QAApB,CAA6ByG,SAAzE,EAAoF;AAChF,YAAI,KAAKjJ,KAAL,CAAWJ,KAAX,CAAiBwI,qBAArB,EAA4C;AACxC,eAAKpI,KAAL,CAAWJ,KAAX,CAAiBwI,qBAAjB,CAAuC,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0ByG,SAAjE,KAA+EjH,MAAM,CAACsE,MAAP,CAAc,KAAKtG,KAAL,CAAWJ,KAAX,CAAiBwI,qBAAjB,CAAuC,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0ByG,SAAjE,CAAd,EAA2F3H,GAA3F,CAA+FN,IAAI,IAC9KoH,qBAAqB,CAAChF,IAAtB,CAA2BpC,IAAI,CAACkI,YAAhC,CAD2E,CAA/E;AAEH;;AACDf,QAAAA,UAAU,GAAGzK,aAAa,CAAC,KAAKsC,KAAL,CAAWJ,KAAX,CAAiBwI,qBAAlB,EAAyC,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,CAA0ByG,SAAnE,CAA1B;AACH;;AACD,UAAI,KAAKjJ,KAAL,CAAWJ,KAAX,IAAoB,KAAKI,KAAL,CAAWJ,KAAX,CAAiB6C,UAArC,IAAmD,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA/E,IAA8F,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,GAAgD,CAAlJ,EAAqJ;AACjJK,QAAAA,cAAc,GACV;AAAE,6BAAmB,KAAKR,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAAjD;AAA8D,aAAG,KAAKjG,KAAL,CAAWa;AAA5E,SADJ;AAEH;;AAED,UAAI,KAAKR,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4B0G,aAA5B,KAA8CJ,aAAa,CAACnJ,KAAd,CAAoB6C,UAApB,CAA+B0G,aAAjF,EAAgG;AAC5F,cAAMC,aAAa,GAAGzL,mBAAmB,CAAC,KAAKqC,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4B0G,aAA5B,IAA6C,EAA9C,EAAkD,iBAAlD,EACrC,iBADqC,EAClB,SADkB,EACP,WADO,EACM,KADN,CAAzC;AAEAV,QAAAA,cAAc,GAAGW,aAAa,CAACC,GAAd,CAAkB,YAAlB,CAAjB;AACH;;AAED,UAAI,KAAKrJ,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4B6G,YAA5B,KAA6CP,aAAa,CAACnJ,KAAd,CAAoB6C,UAApB,CAA+B6G,YAAhF,EAA8F;AAC1F,cAAMC,SAAS,GAAG5L,mBAAmB,CAAC,KAAKqC,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4B6G,YAA5B,IAA4C,EAA7C,EAAiD,WAAjD,EACjC,cADiC,EACjB,SADiB,EACN,WADM,EACO,KADP,CAArC;AAEAZ,QAAAA,UAAU,GAAGa,SAAS,CAACF,GAAV,CAAc,YAAd,CAAb,CAH0F,CAI1F;AACA;AACA;AACH;;AAED,UAAI,KAAKrJ,KAAL,CAAWJ,KAAX,CAAiBY,cAAjB,KAAoCuI,aAAa,CAACnJ,KAAd,CAAoBY,cAA5D,EAA4E;AACxEA,QAAAA,cAAc,GAAC,EAAC,GAAGA,cAAJ;AACf,aAAG,KAAKR,KAAL,CAAWJ,KAAX,CAAiBY;AADL,SAAf;AAEH,OApC+D,CAqChE;AACA;AACA;AACA;;;AACA,UAAI,KAAKR,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4B+G,WAA5B,KAA4CT,aAAa,CAACnJ,KAAd,CAAoB6C,UAApB,CAA+B+G,WAA/E,EAA4F;AACxF,cAAMC,QAAQ,GAAG9L,mBAAmB,CAAC,KAAKqC,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4B+G,WAA5B,IAA2C,EAA5C,EAAgD,eAAhD,EAChC,eADgC,EACf,WADe,EACF,SADE,EACS,WADT,EACsB,KADtB,CAApC;AAEAb,QAAAA,SAAS,GAAGc,QAAQ,CAACJ,GAAT,CAAa,YAAb,CAAZ;AAEH;;AACD,UAAI,KAAKrJ,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BE,UAA5B,KAA2CoG,aAAa,CAACnJ,KAAd,CAAoB6C,UAApB,CAA+BE,UAA9E,EAA0F;AACtF;AACA;AAEA,YAAI+G,SAAS,GAAG,EAAhB;;AACA,YAAG,KAAK1J,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BE,UAA5B,IAAwChC,SAA3C,EAAqD;AACjD+I,UAAAA,SAAS,GAAG,KAAK1J,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BE,UAAxC;AACAC,UAAAA,cAAc,GAAG8G,SAAS,CAACpI,GAAV,CAAcN,IAAI,IAAI;AACnC,mBAAOA,IAAP;AACH,WAFgB,CAAjB;AAIH,SAND,MAMK;AACD4B,UAAAA,cAAc,GAAC,KAAK5C,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BE,UAA3C;AACH;AAEJ;;AACD,UAAI,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4Bc,YAA5B,KAA6CwF,aAAa,CAACnJ,KAAd,CAAoB6C,UAApB,CAA+Bc,YAAhF,EAA8F;AAE1F,YAAI,KAAKvD,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4Bc,YAA5B,IAA4C,KAAKvD,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4Bc,YAA5B,CAAyCpD,KAAzF,EAAgG;AAC5FI,UAAAA,gBAAgB,GAAG,CACf;AAAE,yBAAa,KAAKP,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4Bc,YAA5B,CAAyCpD;AAAxD,WADe,EAEf;AAAE,yBAAa,KAAKH,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4Bc,YAA5B,CAAyCoG;AAAxD,WAFe,CAAnB;AAIH,SALD,MAMK;AACDpJ,UAAAA,gBAAgB,GAAG,EAAnB;AACH;;AAED,YAAIqJ,aAAa,GAAG,KAAK5J,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BoH,qBAA5B,CAAkDvI,GAAlD,CAAsD,CAACN,IAAD,EAAOF,KAAP,KAAiB;AACvF,iBAAO;AAAE6I,YAAAA,KAAK,EAAE3I,IAAI,CAACwE,kBAAd;AAAkCrF,YAAAA,KAAK,EAAEW,KAAzC;AAAgDE,YAAAA,IAAI,EAAE,EAAE,GAAGA;AAAL;AAAtD,WAAP;AAEH,SAHmB,CAApB;AAIA0C,QAAAA,eAAe,GAAGkG,aAAlB;AACApJ,QAAAA,cAAc,CAAC,WAAD,CAAd,GAA8B,EAA9B;AACH;;AAID,UAAI,KAAKR,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,KAA4CmD,aAAa,CAACnJ,KAAd,CAAoB6C,UAApB,CAA+BmD,WAA/E,EAA4F;AACxF,YAAI,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,IAA2C,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAnF,IAA4F,KAAKH,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,KAAkD,EAAlJ,EAAsJ;AAElJ,cAAI2J,cAAc,GAAG,KAAK9J,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4B+G,WAA5B,CAAwClI,GAAxC,CAA4C,CAACN,IAAD,EAAOF,KAAP,KAAiB;AAC9E,mBAAO;AAAE6I,cAAAA,KAAK,EAAE3I,IAAI,CAAC+I,aAAd;AAA6B5J,cAAAA,KAAK,EAAEW,KAApC;AAA2CE,cAAAA,IAAI,EAAE,EAAE,GAAGA;AAAL;AAAjD,aAAP;AACH,WAFoB,CAArB;AAGA0C,UAAAA,eAAe,GAAGoG,cAAlB;AACH;AACJ;;AACD,UAAI,KAAK9J,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4ByD,gBAA5B,KAAiD6C,aAAa,CAACnJ,KAAd,CAAoB6C,UAApB,CAA+ByD,gBAApF,EAAsG;AAElG,YAAI,KAAKlG,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4ByD,gBAA5B,IAAgD,KAAKlG,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4ByD,gBAA5B,CAA6C/F,KAA7F,IAAsG,KAAKH,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BmD,WAA5B,CAAwCzF,KAAxC,KAAkD,EAA5J,EAAgK;AAE5JI,UAAAA,gBAAgB,GAAG,CACf;AAAE,6BAAiB,KAAKP,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4ByD,gBAA5B,CAA6C/F;AAAhE,WADe,EAEf;AAAE,6BAAiB,KAAKH,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4ByD,gBAA5B,CAA6CyD;AAAhE,WAFe,CAAnB,CAF4J,CAO5J;AACA;AACA;AAEA;AACA;AACH,SAbD,MAcK;AACDpJ,UAAAA,gBAAgB,GAAG,EAAnB;AACH;;AAED,YAAIqJ,aAAa,GAAG,EAApB;;AACA,YAAI,KAAK5J,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,IAA+B,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BsB,OAA/D,EAAwE;AACpE6F,UAAAA,aAAa,GAAG,KAAK5J,KAAL,CAAWJ,KAAX,CAAiB6C,UAAjB,CAA4BsB,OAA5B,CAAoCzC,GAApC,CAAwC,CAACN,IAAD,EAAOF,KAAP,KAAiB;AACrE,mBAAO;AAAE6I,cAAAA,KAAK,EAAE3I,IAAI,CAACwE,kBAAd;AAAkCrF,cAAAA,KAAK,EAAEW,KAAzC;AAAgDE,cAAAA,IAAI,EAAE,EAAE,GAAGA;AAAL;AAAtD,aAAP;AAEH,WAHe,CAAhB;AAIH,SALD,MAKO;AACH4I,UAAAA,aAAa,GAAG,EAAhB;AACH;;AACDlG,QAAAA,eAAe,GAAGkG,aAAlB;AACApJ,QAAAA,cAAc,CAAC,WAAD,CAAd,GAA8B,EAA9B;AAEH;;AACD,UAAI,KAAKR,KAAL,CAAWJ,KAAX,IAAoB,KAAKI,KAAL,CAAWJ,KAAX,CAAiBoK,MAAzC,EAAiD;AAC7CxJ,QAAAA,cAAc,CAAC,WAAD,CAAd,GAA8B;AAAE,4BAAkB,KAAKR,KAAL,CAAWJ,KAAX,CAAiBoK,MAAjB,CAAwBC;AAA5C,SAA9B;AACH;;AAED,WAAK7I,QAAL,CAAc;AACVgH,QAAAA,qBADU;AAEVD,QAAAA,UAFU;AAEEM,QAAAA,cAFF;AAGVjI,QAAAA,cAHU;AAGMD,QAAAA,gBAHN;AAIVmD,QAAAA,eAJU;AAIOgF,QAAAA,UAJP;AAImBC,QAAAA,SAJnB;AAI8BK,QAAAA,SAJ9B;AAIyCpG,QAAAA;AAJzC,OAAd;AAMH,KAzID,MA0IK;AAED,UAAI,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBY,cAAjB,KAAoCuI,aAAa,CAACnJ,KAAd,CAAoBY,cAA5D,EAA4E;AACxE,aAAKY,QAAL,CAAc;AACVZ,UAAAA,cAAc,EAAE,KAAKR,KAAL,CAAWJ,KAAX,CAAiBY,cADvB;AAEV0J,UAAAA,IAAI,EAAE,KAAKlK,KAAL,CAAWJ,KAAX,CAAiB6C;AAFb,SAAd;AAIH;AACJ;AAEJ;;AACD0H,EAAAA,oBAAoB,GAAG;AACnB,UAAMC,UAAU,GAAG;AACfC,MAAAA,QAAQ,EAAE5K,cADK;AAEfyK,MAAAA,IAAI,EAAE;AACFzH,QAAAA,UAAU,EAAE,EADV;AACc6H,QAAAA,UAAU,EAAE3J,SAD1B;AACqC4J,QAAAA,SAAS,EAAE,IADhD;AACsDC,QAAAA,SAAS,EAAE7J;AADjE;AAFS,KAAnB;AAMA,SAAKX,KAAL,CAAWT,WAAX,CAAuB6K,UAAvB;AACH;;AAtxCoC;;AAwxCzC,eAAetM,OAAO,CAAC4B,eAAD,EAAkB;AACpCR,EAAAA,WADoC;AAEpCC,EAAAA,oBAFoC;AAEdC,EAAAA,cAFc;AAEEC,EAAAA,cAFF;AAEkBC,EAAAA,kBAFlB;AAEsCC,EAAAA;AAFtC,CAAlB,CAAP,CAGZ/B,UAAU,CAACqC,UAAD,CAHE,CAAf","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport {\r\n    getControlMap, constructOptionList, copyText, convertDateTimetoStringDBFormat\r\n} from '../../components/CommonScript';\r\nimport { connect } from 'react-redux';\r\nimport { Alert, Button, Card, Col, Form, Row } from 'react-bootstrap';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\n//import FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport {\r\n    stringOperatorData, numericOperatorData\r\n    , dateConditionData\r\n} from '../dashboard/SqlBuilderFilterType'\r\n\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopy, faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ReactJson from \"react-json-view\";\r\nimport { sendRequest, getQualisFormsFields, getQualisForms, getCustomQuery, getCustomQueryName, updateStore } from \"../../actions\";\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\n//import APIConsole from \"./APIConsole\"\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { Login: state.Login };\r\n};\r\nclass APIService extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        //  this.console = React.createRef();\r\n        this.state = {\r\n            selectedRecord: {},\r\n            constructApiData: [],\r\n            consoleData: [],\r\n            controlMap: {},\r\n            userRoleControlRights: [],\r\n            masterStatus: \"\", error: \"\"\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onInputOnChange = (event, value, variant) => {\r\n        if (event.target.type === \"checkbox\") {\r\n            let constructApiData = this.state.constructApiData\r\n            const selectedRecord = this.state.selectedRecord;\r\n            // selectedRecord['check'] = label\r\n\r\n            // constructApiData={...constructApiData,[variant.item.scolumn]:\"\"}\r\n\r\n            const value1 = selectedRecord[event.target.name];\r\n            if (value1 !== '' && value1 !== undefined) {\r\n                if (value1.toLowerCase().includes(value.toLowerCase())) {\r\n                    const index = value1.toLowerCase().indexOf(value.toLowerCase());\r\n                    delete constructApiData[variant.item.scolumn]\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value1.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedRecord[event.target.name] = value1.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value1.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedRecord[event.target.name] = value1.slice(0, index) + value1.slice(index + value1.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = value1.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = value1 + ',' + value;\r\n                    constructApiData = [...constructApiData, { [variant.item.scolumn]: \"\" }]\r\n                }\r\n            } else {\r\n                selectedRecord[event.target.name] = value1 + ',' + value;\r\n                constructApiData = [...constructApiData, { [variant.item.scolumn]: \"\" }]\r\n            }\r\n            this.setState({\r\n                selectedRecord, constructApiData,\r\n                constructApiDataString: constructApiData.map(e => JSON.stringify(e).replace(/{|}/g, '')).join(',\\n')\r\n            })\r\n        } else {\r\n            // const selectedRecord = this.state.selectedRecord;\r\n            let text = event.target.value.replaceAll('\\n', '')\r\n            text = text.replace(/\\s+/g, '');\r\n            let constructApiData1 = JSON.parse(text)\r\n            let constructApiData = Object.keys(constructApiData1).map(x => {\r\n                return { [x]: constructApiData1[x] }\r\n            })\r\n            this.setState({\r\n                constructApiData,\r\n                constructApiDataString: constructApiData.map(e => JSON.stringify(e).replace(/{|}/g, '')).join(',\\n'),\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    onComboChange = (event, colunName) => {\r\n        const selectedRecord = this.state.selectedRecord\r\n       \r\n        const oldValue = { ...selectedRecord[colunName] }\r\n        selectedRecord[colunName] = event\r\n        const map1 = new Map();\r\n        map1['userinfo'] = this.props.Login.userInfo;\r\n        map1['selectedRecord'] = selectedRecord\r\n        map1['masterData'] = this.props.Login.masterData\r\n        map1['constructApiData'] = this.state.constructApiData\r\n      \r\n        if (colunName === 'napiservicecode') {\r\n            if (selectedRecord.napiservicecode.value === 24) {\r\n                this.props.getCustomQuery(map1)\r\n            } else {\r\n                const Parameters=this.state.parameterValue||undefined;\r\n                map1['Parameters']=Parameters;\r\n                this.props.getQualisForms(map1)\r\n            }\r\n            // }\r\n            // this.setState({ selectedRecord })\r\n        } else if (colunName === 'nsqlquerycode') {\r\n            this.props.getCustomQueryName(map1)\r\n        } else {\r\n            if (oldValue && oldValue.value !== event.value) {\r\n                this.props.getQualisFormsFields(map1)\r\n            }\r\n        }\r\n        //  this.setState({ selectedRecord })\r\n    }\r\n    checkFilter = (filterList) => {\r\n        let check = [];\r\n        filterList.map((item, index) => {\r\n            if (item.filterColumn) {\r\n                if (item.filterCondition) {\r\n                    if (item.filterColumn.item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying' || item.filterColumn.item.columndatatype === 'character') {\r\n                        if (item.filterCondition.value === '='\r\n                            || item.filterCondition.value === 'IN'\r\n                            || item.filterCondition.value === 'NOT') {\r\n\r\n                            if (item.filterValue && item.filterValue !== \"\") {\r\n                                check.push(true)\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            if (item.filterCondition) {\r\n                                check.push(true)\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (item.filterColumn.item.columndatatype === 'numeric' || item.filterColumn.item.columndatatype === 'integer' || item.filterColumn.item.columndatatype === 'smallint' || item.filterColumn.item.columndatatype === 'bigint') {\r\n                        if (item.filterCondition.value === '='\r\n                            || item.filterCondition.value === '!=' ||\r\n                            item.filterCondition.value === '>' ||\r\n                            item.filterCondition.value === '<' ||\r\n                            item.filterCondition.value === '>=' ||\r\n                            item.filterCondition.value === '<='\r\n                        ) {\r\n                            if (item.filterValue && item.filterValue !== \"\") {\r\n                                check.push(true)\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            if (item.filterCondition) {\r\n                                check.push(true)\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (item.filterColumn.item.columndatatype === 'date' || item.filterColumn.item.columndatatype === 'timestamp without time zone') {\r\n                        if (item.filterCondition.value === '='\r\n                            || item.filterCondition.value === 'NOT'\r\n                        ) {\r\n\r\n                            if (item.filterValue && item.filterValue !== \"\") {\r\n                                check.push(true)\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            if (item.filterCondition) {\r\n                                check.push(true)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n        })\r\n        return check.length === filterList.length ? true : false;\r\n    }\r\n\r\n\r\n    onMoreClick = (e) => {\r\n        const selectedRecord = this.state.selectedRecord || {}\r\n        if (this.checkFilter(selectedRecord['filterNew'] || [])) {\r\n            if (this.props.Login.masterData.SelectedForm) {\r\n                if (selectedRecord['filterNew'] === undefined) {\r\n                    selectedRecord['filterNew'] = []\r\n                }\r\n                selectedRecord['filterNew'][selectedRecord['filterNew'].length] = {}\r\n\r\n                const lstQryColumn = this.removeSameRecordFromTwoDifferentArrays(this.state.lstQueryBuilder, selectedRecord['filterNew'])\r\n\r\n                if (lstQryColumn.length > 0) {\r\n                    this.setState({\r\n                        selectedRecord, lstQryColumn\r\n                    })\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_COLUMNSNOTAVALIABLE\" }))\r\n                }\r\n            } else if (this.props.Login.masterData.Columns) {\r\n                if (selectedRecord['filterNew'] === undefined) {\r\n                    selectedRecord['filterNew'] = []\r\n                }\r\n                selectedRecord['filterNew'][selectedRecord['filterNew'].length] = {}\r\n                const lstQryColumn = this.removeSameRecordFromTwoDifferentArrays(this.state.lstQueryBuilder, selectedRecord['filterNew'])\r\n\r\n                if (lstQryColumn.length > 0) {\r\n                    this.setState({\r\n                        selectedRecord, lstQryColumn\r\n                    })\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_COLUMNSNOTAVALIABLE\" }))\r\n                }\r\n\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTHEFORM\" }))\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASEFILLTHEVALUE\" }))\r\n        }\r\n    }\r\n\r\n    onFilterInputOnChange = (event, index) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        //  const constructApiData = this.state.constructApiData\r\n\r\n        const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n\t\t//ALPD-3801\r\n        const copyfiltertableaddedlist = [...selectedRecord['filterNew']]\r\n\r\n        const change = { ...filterTableNewAddedList[index], [event.target.name]: event.target.value }\r\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change }, ...copyfiltertableaddedlist.splice(index + 1)]\r\n\r\n        // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n\r\n        // if (index1 === -1) {\r\n        //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\r\n        // } else {\r\n        //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\r\n        // }\r\n\r\n\r\n        this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } });\r\n    }\r\n\r\n    onFilterNumericInputChange = (value, name, index) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        //   const constructApiData = this.state.constructApiData\r\n        const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n\t\t//ALPD-3801\r\n        const copyfilterTableNewAddedList = [...selectedRecord['filterNew']]\r\n\r\n        const change = { ...filterTableNewAddedList[index], [name]: value }\r\n        // constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterValue })\r\n        // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n        // if (index1 === -1) {\r\n        //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\r\n        // } else {\r\n        //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\r\n        // }\r\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change }, ...copyfilterTableNewAddedList.splice(index + 1)]\r\n        this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } });\r\n\r\n    }\r\n\r\n    handleDateChange = (columnLabel, value, index) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        // const constructApiData = this.state.constructApiData\r\n        const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n        const change = { ...filterTableNewAddedList[index], [columnLabel]: value }\r\n        // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n        // if (index1 === -1) {\r\n        //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\r\n        // } else {\r\n        //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\r\n        // }\r\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change }, ...filterTableNewAddedList.splice(index + 1)]\r\n        this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } });\r\n    }\r\n\r\n    onfilterChange = (comboValue, columnLabel, conditionType, index) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n\r\n        if (conditionType === 'column') {\r\n            const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n\t\t\t//ALPD-3801\r\n            const copyfiltertableaddedlist = [...selectedRecord['filterNew']]\r\n\r\n            const change = {\r\n                ...filterTableNewAddedList[index], [columnLabel]: comboValue,\r\n                filterCondition: undefined, filterValueType: undefined, filterValue: undefined\r\n            }\r\n            const changeData = [...filterTableNewAddedList.splice(0, index), { ...change }, ...copyfiltertableaddedlist.splice(index + 1)]\r\n            this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } })\r\n        }\r\n        else if (conditionType === 'condition') {\r\n            const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n\t\t\t//ALPD-3801\r\n            const copyfiltertableaddedlist = [...selectedRecord['filterNew']]\r\n\r\n            const change = { ...filterTableNewAddedList[index], [columnLabel]: comboValue }\r\n            const changeData = [...filterTableNewAddedList.splice(0, index), { ...change, filterValue: undefined }, ...copyfiltertableaddedlist.splice(index + 1)]\r\n            // let constructApiData = this.state.constructApiData\r\n            // if (change[\"filterCondition\"].value === 'IS NULL' ||\r\n            //     change[\"filterCondition\"].value === 'IS NOT NULL' ||\r\n            //     change[\"filterCondition\"].value === 'PRESENT' ||\r\n            //     change[\"filterCondition\"].value === 'BLANK' ||\r\n            //     change[\"filterCondition\"].value !== 'NULL' ||\r\n            //     change[\"filterCondition\"].value !== 'NOT NULL' ||\r\n            //     change[\"filterCondition\"].value === 'IN') {\r\n            //     // constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value })\r\n\r\n            //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n            //     if (index1 === -1) {\r\n            //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value })\r\n            //     } else {\r\n            //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value }\r\n            //     }\r\n\r\n            // }\r\n            // else if(change[\"filterColumn\"].item.columndatatype === 'date'&& \r\n            // (change.filterCondition.value === '=' || change.filterCondition.value === '<' \r\n            // || change.filterCondition.value === '>')){\r\n\r\n            //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n            //     if (index1 === -1) {\r\n            //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\" })\r\n            //     } else {\r\n            //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\"  }\r\n            //     }\r\n\r\n            // }\r\n            // else if(change[\"filterColumn\"].item.columndatatype === 'date'&& \r\n            //  (item.filterCondition.value === 'NOT')){\r\n\r\n\r\n            //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n            //     if (index1 === -1) {\r\n            //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\" })\r\n            //     } else {\r\n            //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\"  }\r\n            //     }\r\n            // }\r\n\r\n\r\n            this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } })\r\n        }\r\n\r\n    }\r\n\r\n    onFilterModalDelete = (childIndex) => {\r\n        // let constructApiData1 = [{ ...this.state.constructApiData[0] }, { ...this.state.constructApiData[1] }]\r\n        // let constructApiData2 = [...this.state.constructApiData]\r\n        // constructApiData2 = constructApiData2.splice(2)\r\n        // constructApiData2 = constructApiData2.splice(0, childIndex)\r\n        // let constructApiData3 = [...this.state.constructApiData]\r\n        // constructApiData3 = constructApiData3.splice(2)\r\n        // constructApiData3 = constructApiData3.splice(childIndex + 1)\r\n        const selectedRecord = this.state.selectedRecord;\r\n        selectedRecord['filterNew'] = [...selectedRecord['filterNew'].slice(0, childIndex), ...selectedRecord['filterNew'].slice(childIndex + 1)]\r\n        // constructApiData1 = [...constructApiData1, ...constructApiData2, ...constructApiData3]\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    filterQueryFormation = (selectedRecord) => {\r\n        let str = \"\";\r\n        let strform = \"\";\r\n        selectedRecord['filterNew'] && selectedRecord['filterNew'].length > 0 && selectedRecord['filterNew'].map((item, index) => {\r\n            if (item.filterCondition) {\r\n                if (item.filterCondition.value === 'IN') {\r\n                    if (item.filterColumn.item.scolumn != undefined) {\r\n                        str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                            item.filterColumn.item.ismultilingual ?\r\n                                item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                                : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                            : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" ('\" + (item.filterValue ? item.filterValue : \"\") + \"') \"\r\n                    } else if (item.filterColumn.item.scolumndisplayname != undefined) {\r\n                        str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + \" ('\" + (item.filterValue ? item.filterValue : \"\") + \"')\"\r\n                    }\r\n                }\r\n                else if (item.filterCondition.value === 'PRESENT') {\r\n                    if (item.filterColumn.item.scolumn != undefined) {\r\n                        str = str + \" NOT \" + (item.filterColumn.item.isjsoncolumn ?\r\n                            item.filterColumn.item.ismultilingual ?\r\n                                item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                                : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                            : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" ='' \"\r\n                    } else if (item.filterColumn.item.scolumndisplayname != undefined) {\r\n                        str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ='' \"\r\n                    }\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'BLANK') {\r\n                    if (item.filterColumn.item.scolumn != undefined) {\r\n\r\n                        str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                            item.filterColumn.item.ismultilingual ?\r\n                                item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                                : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                            : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" ='' \"\r\n                    } else if (item.filterColumn.item.scolumndisplayname != undefined) {\r\n                        str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ='' \"\r\n                    }\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'NULL'\r\n                    || item.filterCondition.value === 'NOT NULL') {\r\n                    if (item.filterColumn.item.scolumn != undefined) {\r\n\r\n                        str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                            item.filterColumn.item.ismultilingual ?\r\n                                item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                                : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                            : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" IS \" + item.filterCondition.value + \" \"\r\n                    } else if (item.filterColumn.item.scolumndisplayname != undefined) {\r\n                        str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" IS \" + item.filterCondition.value + \" \"\r\n                    }\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'IS NULL') {\r\n                    if (item.filterColumn.item.scolumn != undefined) {\r\n\r\n                        str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                            item.filterColumn.item.ismultilingual ?\r\n                                item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                                : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                            : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" \"\r\n                    } else if (item.filterColumn.item.scolumndisplayname != undefined) {\r\n                        str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + \" \"\r\n                    }\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'IS NOT NULL') {\r\n                    if (item.filterColumn.item.scolumn != undefined) {\r\n\r\n\r\n                        str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                            item.filterColumn.item.ismultilingual ?\r\n                                item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                                : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                            : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" \"\r\n                    } else if (item.filterColumn.item.scolumndisplayname != undefined) {\r\n                        str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + \" \"\r\n                    }\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'STARTS WITH') {\r\n                    if (item.filterColumn.item.scolumn != undefined) {\r\n\r\n                        str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                            item.filterColumn.item.ismultilingual ?\r\n                                item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                                : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                            : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\"\r\n                    } else if (item.filterColumn.item.scolumndisplayname != undefined) {\r\n                        str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ILIKE \" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\"\r\n                    }\r\n                }\r\n                else if (item.filterCondition.value === 'ENDS WITH') {\r\n                    if (item.filterColumn.item.scolumn != undefined) {\r\n\r\n                        str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                            item.filterColumn.item.ismultilingual ?\r\n                                item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                                : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                            : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '%\" + (item.filterValue ? item.filterValue : \"\") + \"' collate \\\"default\\\"\"\r\n                    } else if (item.filterColumn.item.scolumndisplayname != undefined) {\r\n                        str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ILIKE\" + \" '%\" + (item.filterValue ? item.filterValue : \"\") + \"' collate \\\"default\\\"\"\r\n                    }\r\n                }\r\n                else if (item.filterCondition.value === 'CONTAINS') {\r\n                    if (item.filterColumn.item.scolumn != undefined) {\r\n\r\n                        str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                            item.filterColumn.item.ismultilingual ?\r\n                                item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                                : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                            : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\"\r\n                    } else if (item.filterColumn.item.scolumndisplayname != undefined) {\r\n                        str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\"\r\n                    }\r\n                }\r\n                else if ((item.filterColumn.item.columndatatype === 'date' || item.filterColumn.item.columndatatype === 'timestamp without time zone') && (item.filterCondition.value === '=' || item.filterCondition.value === '<' || item.filterCondition.value === '>')) {\r\n                    if (item.filterColumn.item.scolumn != undefined) {\r\n\r\n                        str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                            item.filterColumn.item.ismultilingual ?\r\n                                item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                                : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                            : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"' \")\r\n                    } else if (item.filterColumn.item.scolumndisplayname != undefined) {\r\n                        str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"' \")\r\n                    }\r\n                }\r\n\r\n                else if ((item.filterColumn.item.columndatatype === 'date' && (item.filterCondition.value === 'NOT')) || (item.filterColumn.item.columndatatype === 'timestamp without time zone' && (item.filterCondition.value === 'NOT'))) {\r\n                    if (item.filterColumn.item.scolumn != undefined) {\r\n\r\n                        str = str + \"(NOT \" + (item.filterColumn.item.isjsoncolumn ?\r\n                            item.filterColumn.item.ismultilingual ?\r\n                                item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                                : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                            : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" = \" + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"')\")\r\n                    } else if (item.filterColumn.item.scolumndisplayname != undefined) {\r\n                        str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" = \" + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"')\")\r\n                    }\r\n                }\r\n                else if ((item.filterColumn.item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying') && (item.filterCondition.value === 'NOT')) {\r\n                    if (item.filterColumn.item.scolumn != undefined) {\r\n\r\n                        str = str + \"(NOT \" + (item.filterColumn.item.isjsoncolumn ?\r\n                            item.filterColumn.item.ismultilingual ?\r\n                                item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                                : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                            : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" = \" + (\"'\" + item.filterValue ? item.filterValue : \"\" + \"')\")\r\n                    } else if (item.filterColumn.item.scolumndisplayname != undefined) {\r\n                        str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" = \" + (\"'\" + item.filterValue ? item.filterValue : \"\" + \"')\")\r\n                    }\r\n                }\r\n                else if (item.filterColumn.item.columndatatype === 'character varying' && (item.filterCondition.value === 'LIKE' || item.filterCondition.value === 'NOT LIKE')) {\r\n                    str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + \" \" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\"\r\n                }\r\n                else {\r\n                    if (item.filterColumn.item.scolumn != undefined) {\r\n\r\n                        str = str + \" \" + (item.filterColumn.item.isjsoncolumn ?\r\n                            item.filterColumn.item.ismultilingual ?\r\n                                item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                                : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                            : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? item.filterValue : \"\") + \"' \")\r\n                    } else if (item.filterColumn.item.scolumndisplayname != undefined) {\r\n                        str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? item.filterValue : \"\") + \"' \")\r\n                    }\r\n                }\r\n\r\n                if (index !== selectedRecord['filterNew'].length - 1) {\r\n                    str = str + \" and \";\r\n                }\r\n            }\r\n            //   })\r\n        })\r\n        strform = strform + \"\" + str\r\n        return strform;\r\n    }\r\n\r\n\r\n\r\n    copyToClipboard = () => {\r\n        copyText(this.copyParameter())\r\n        // toast.info(this.props.intl.formatMessage({ id: \"IDS_COPIEDSUCCESSFULLY\" }))\r\n    }\r\n\r\n\r\n    sendRequest = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        if (this.props.Login.masterData.SelectedApi) {\r\n            if (this.props.Login.masterData.SelectedApi.value > 2 && this.props.Login.masterData.SelectedApi.value < 24) {\r\n                const url = this.props.Login.masterData.SelectedApi.item.sapiservice\r\n                let obj = this.sendObject()\r\n                let obj1 = { \"inputData\": obj, url, masterData: this.props.Login.masterData, \"userinfo\": this.props.Login.userInfo, selectedRecord }\r\n                this.props.sendRequest(obj1)\r\n\r\n            }\r\n           //ALPD-3801--Alert thrown when parameter is emtpty.\r\n            else if (this.props.Login.masterData.SelectedApi.value === 24 && this.props.Login.masterData.SelectedSQLQuery) {\r\n                if (selectedRecord.nsqlquerycode != undefined) {\r\n                    let parametersname=[];\r\n                    let hasEmptyValue=false;\r\n                    if(this.state.parameterValue!==undefined){\r\n                         hasEmptyValue = this.state.parameterValue.map((item, index) => {\r\n                            let values = [];\r\n                             if (\r\n                                this.state.selectedRecord &&\r\n                                this.state.selectedRecord[\"ParamValue\"] &&\r\n                                this.state.selectedRecord[\"ParamValue\"][index]\r\n                            ) {\r\n\t\t\t//ALPD-3801-When Parameter is empty isEmpty is true \r\n                                const isEmpty=this.state.selectedRecord[\"ParamValue\"][index][item]==='';\r\n\r\n                                if(isEmpty){\r\n                                    parametersname.push(item);\r\n                                }\r\n                                return isEmpty;\r\n                                \r\n                            }\r\n                            parametersname.push(item);\r\n\r\n                            return true;\r\n                        });\r\n                        \r\n                        console.log(hasEmptyValue);\r\n                        \r\n                    }\r\n                    if(!hasEmptyValue.includes(true)){\r\n                    const url = \"apiservice/getSQLQueryData\"\r\n                    let sqlquery = selectedRecord.nsqlquerycode.item.ssqlquery.trim()\r\n                    let obj = this.sendObject()\r\n                    let obj1 = { \"inputData\": obj, url, masterData: this.props.Login.masterData, \"userinfo\": this.props.Login.userInfo, selectedRecord, sqlquery,\"parameters\":this.state.selectedRecord.ParamValue&&this.state.selectedRecord.ParamValue.length>0? this.state.selectedRecord.ParamValue:[]||[]}\r\n                    this.props.sendRequest(obj1)\r\n             }\r\n            else{\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASEFILLTHEPARAM\" })+\" (\"+parametersname.map(item=>item).join(\",\")+\") \")\r\n\r\n            }   } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTHEQUERYNAME\" }))\r\n                }\r\n            } \r\n            \r\n            else if (this.props.Login.masterData.SelectedForm) {\r\n                const url = this.props.Login.masterData.SelectedApi.item.sapiservice\r\n                let obj = this.sendObject()\r\n                let obj1 = { \"inputData\": obj, url, masterData: this.props.Login.masterData, \"userinfo\": this.props.Login.userInfo, selectedRecord }\r\n                this.props.sendRequest(obj1)\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTHEFORM\" }))\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTHEAPI\" }))\r\n        }\r\n    }\r\n\r\n\r\n    removeSameRecordFromTwoDifferentArrays = (firstArray, secondArray) => {\r\n        let filterArray = []\r\n        if (Array.isArray(secondArray) && secondArray.length > 0) {\r\n            secondArray.map((x, index1) => {\r\n                firstArray.map(y => {\r\n                    if (x.filterColumn) {\r\n                        if (x.filterColumn.item.scolumndisplayname === y.item.scolumndisplayname) {\r\n                            const index = firstArray.findIndex(x1 => x1.item.scolumndisplayname === y.item.scolumndisplayname)\r\n                            let firstArray1 = [...firstArray];\r\n                            firstArray1 = [...firstArray1.splice(0, index)];\r\n\r\n                            let firstArray2 = [...firstArray];\r\n                            firstArray2 = [...firstArray2.splice(index + 1)];\r\n                            filterArray = [...firstArray1, ...firstArray2]\r\n                            firstArray = [...filterArray]\r\n                        }\r\n                        else if (x.filterColumn.item.scolumndisplayname === y.item.scolumndisplayname) {\r\n                            const index = firstArray.findIndex(x1 => x1.item.scolumndisplayname === y.item.scolumndisplayname)\r\n                            let firstArray1 = [...firstArray];\r\n                            firstArray1 = [...firstArray1.splice(0, index)];\r\n\r\n                            let firstArray2 = [...firstArray];\r\n                            firstArray2 = [...firstArray2.splice(index + 1)];\r\n                            filterArray = [...firstArray1, ...firstArray2]\r\n                            firstArray = [...filterArray]\r\n                        }\r\n                    } else {\r\n                        if (index1 === 0) {\r\n                            filterArray = [...firstArray]\r\n                        }\r\n\r\n                    }\r\n                })\r\n            })\r\n        } else {\r\n            filterArray = [...firstArray];\r\n        }\r\n        return filterArray;\r\n\r\n    }\r\n\r\n           //ALPD-3801--Parameter OnInputOnChange\r\n    onInputOnChangeParam = (event, index) => {\r\n        const selectedRecord = this.state.selectedRecord || {}\r\n        const filterParamList=[...this.state.parameterValue]\r\n        let filterTableNewAddedList=[];\r\n        if(selectedRecord['ParamValue']!==undefined){\r\n             filterTableNewAddedList = [...selectedRecord['ParamValue']]\r\n\r\n        }\r\n        let change={\r\n           [filterParamList[index]]:event.target.value\r\n       }\r\n       let  changeData= []\r\n       if(selectedRecord['ParamValue']!==undefined){\r\n        let paramerAddedList=[];\r\n        paramerAddedList=[...selectedRecord['ParamValue']]\r\n        changeData = [...filterTableNewAddedList.splice(0, index), { ...change }, ...paramerAddedList.splice( index+1)]\r\n       }else{\r\n        changeData=[{...change}]\r\n       }\r\n        \r\n        this.setState({ selectedRecord: { ...selectedRecord, ParamValue: changeData } })\r\n        // this.setState({selectedRecord});\r\n    }\r\n\r\n    render() {\r\n       // console.log(\"ParamValue\",this.state.selectedRecord.ParamValue);\r\n\r\n        return (<>\r\n            <ListWrapper className=\"client-list-content pb-0\">\r\n                <Row noGutters>\r\n                    <Col md={5} className=\"pr-3\">\r\n                        <Row>\r\n                            <Col md={9}>\r\n                                <FormSelectSearch\r\n                                    name={\"napiservicecode\"}\r\n                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_API\" })}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    options={this.state.apiServiceList || []}\r\n                                    value={this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi}\r\n                                    isMandatory={true}\r\n                                    isClearable={false}\r\n                                    isMulti={false}\r\n                                    isSearchable={false}\r\n                                    closeMenuOnSelect={true}\r\n                                    onChange={(event) => this.onComboChange(event, 'napiservicecode')}\r\n                                />\r\n                            </Col>\r\n                            <Col md={1}>\r\n                                <Button className='btn-user btn-primary-blue' onClick={(e) => this.sendRequest()}>\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_SEND\" })}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        {this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value < 3 || this.props.Login.masterData.SelectedApi.value > 24) ?\r\n                            <Row noGutters>\r\n                                <Col md={9}>\r\n                                    <FormSelectSearch\r\n                                        name={\"nformcode\"}\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_FORMS\" })}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        options={this.state.qualisList || []}\r\n                                        value={this.props.Login.masterData.SelectedForm && this.props.Login.masterData.SelectedForm}\r\n                                        isMandatory={true}\r\n                                        isClearable={false}\r\n                                        isMulti={false}\r\n                                        isSearchable={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange={(event) => this.onComboChange(event, 'nformcode')}\r\n                                    />\r\n                                </Col>\r\n                            </Row> : \"\"}\r\n                        {this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value === 24) ?\r\n                            <Row noGutters>\r\n                                <Col md={9}>\r\n                                    <FormSelectSearch\r\n                                        name={\"nsqlquerycode\"}\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_QUERYNAME\" })}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        options={this.state.queryList || []}\r\n                                        value={this.state.selectedRecord[\"nsqlquerycode\"] && this.state.selectedRecord[\"nsqlquerycode\"] || \"\"}\r\n                                        isMandatory={true}\r\n                                        isClearable={false}\r\n                                        isMulti={false}\r\n                                        isSearchable={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange={(event) => this.onComboChange(event, 'nsqlquerycode')}\r\n                                    />\r\n                                </Col>\r\n                            </Row> : \"\"}\r\n                        <Card className='api-filter-condition-card'>\r\n                            <Card.Body>\r\n                                {this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value < 3 || this.props.Login.masterData.SelectedApi.value > 23) ?\r\n                                    <form>\r\n                                        <section>\r\n                                            {this.props.Login.masterData && this.props.Login.masterData.SelectedApi &&\r\n                                                (this.props.Login.masterData.SelectedApi.value < 3 || this.props.Login.masterData.SelectedApi.value > 23) &&\r\n                                                this.props.Login.masterData.needdisplayparam ?\r\n                                                (\r\n                                                    this.state.parameterValue && this.state.parameterValue.map((item, index) => (\r\n                                                        <div>\r\n                                                            <Row>\r\n\r\n                                                                <Col md={6}>\r\n                                                                    <FormInput\r\n                                                                        label={this.props.intl.formatMessage({ id: \"IDS_PARAMETERS\" })}\r\n                                                                        name=\"filterValue\"\r\n                                                                        type=\"text\"\r\n                                                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_PARAMETERS\" })}\r\n                                                                        value={this.state.parameterValue[index]}\r\n                                                                        isMandatory={true}\r\n                                                                        required={true}\r\n                                                                        isDisabled={true}\r\n                                                                        maxLength={100}\r\n                                                                    />\r\n                                                                </Col>\r\n\r\n                                                                <Col md={6}>\r\n                                                                    <FormInput\r\n                                                                        label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                        name=\"filterValue\"\r\n                                                                        type=\"text\"\r\n                                                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                        value={this.state.selectedRecord['ParamValue']&&this.state.selectedRecord['ParamValue'][index] && this.state.selectedRecord['ParamValue'][index][item]&&this.state.selectedRecord['ParamValue'][index][item]} // Check how value should be set\r\n                                                                        isMandatory={true}\r\n                                                                        onChange={(event) => this.onInputOnChangeParam(event, index)}\r\n\r\n                                                                       // onInputOnChange={(e) => this.onInputOnChangeParam(e, index)}\r\n                                                                        required={true}\r\n                                                                        maxLength={100}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </div>\r\n                                                    ))\r\n                                                )\r\n                                                : \"\"\r\n                                            }\r\n\r\n\r\n                                        </section>\r\n\r\n                                        <section className={'modal-card-body'}>\r\n                                            {this.state.selectedRecord['filterNew'] && this.state.selectedRecord['filterNew'].map((item, index) => {\r\n                                                return <div className={'field has-addons filterheight'}>\r\n                                                    <div class=\"control is-expanded\">\r\n                                                        <div class=\"select is-fullwidth\">\r\n                                                            <FormSelectSearch\r\n                                                                formGroupClassName=\"remove-floating-label-margin\"\r\n                                                                formLabel={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                                isSearchable={true}\r\n                                                                name={\"filterColumn\"}\r\n                                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                                showOption={true}\r\n                                                                options={this.state.lstQryColumn || []}\r\n                                                                value={item[\"filterColumn\"] && item[\"filterColumn\"] || \"\"}\r\n                                                                onChange={value => this.onfilterChange(value, \"filterColumn\", 'column', index)}\r\n                                                            ></FormSelectSearch>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div class=\"control is-expanded\">\r\n                                                        <div class=\"select is-fullwidth\">\r\n                                                            <FormSelectSearch\r\n                                                                formGroupClassName=\"remove-floating-label-margin\"\r\n                                                                formLabel={this.props.intl.formatMessage({ id: \"IDS_CONDITION\" })}\r\n                                                                isSearchable={true}\r\n                                                                name={\"sviewname\"}\r\n                                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_CONDITION\" })}\r\n                                                                showOption={true}\r\n                                                                options={item[\"filterColumn\"] && item[\"filterColumn\"].item ?\r\n                                                                    (item[\"filterColumn\"].item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying' || item.filterColumn.item.columndatatype === 'character') ?\r\n                                                                        stringOperatorData :\r\n                                                                        (item[\"filterColumn\"].item.columndatatype === 'numeric' || item.filterColumn.item.columndatatype === 'integer' || item.filterColumn.item.columndatatype === 'smallint' || item.filterColumn.item.columndatatype === 'bigint') ?\r\n                                                                            numericOperatorData\r\n                                                                            : (item[\"filterColumn\"].item.columndatatype === 'date' || item[\"filterColumn\"].item.columndatatype === 'timestamp without time zone') ?\r\n                                                                                dateConditionData\r\n                                                                                : stringOperatorData : \"\"}\r\n\r\n                                                                value={item[\"filterCondition\"] !== undefined ? item[\"filterCondition\"] : \"\"}\r\n                                                                onChange={value => this.onfilterChange(value, \"filterCondition\", 'condition', index)}\r\n                                                            ></FormSelectSearch>\r\n                                                        </div>\r\n                                                    </div>\r\n\r\n                                                    <div className={\"control \"}>\r\n                                                        {(item[\"filterCondition\"] && item[\"filterCondition\"].value\r\n                                                            && item[\"filterColumn\"]) ?\r\n                                                            (item[\"filterColumn\"].item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying' || item.filterColumn.item.columndatatype === 'character') ?\r\n                                                                (item[\"filterCondition\"].value !== 'IS NULL' &&\r\n                                                                    item[\"filterCondition\"].value !== 'IS NOT NULL' &&\r\n                                                                    item[\"filterCondition\"].value !== 'PRESENT' &&\r\n                                                                    item[\"filterCondition\"].value !== 'BLANK') ?\r\n                                                                    <FormInput\r\n                                                                        label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                        name=\"filterValue\"\r\n                                                                        type=\"text\"\r\n                                                                        onChange={(event) => this.onFilterInputOnChange(event, index)}\r\n                                                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                        value={item[\"filterValue\"] ? item[\"filterValue\"] : \"\"}\r\n                                                                        isMandatory={true}\r\n                                                                        required={true}\r\n                                                                        maxLength={100}\r\n                                                                    /> : \"\"\r\n                                                                :\r\n                                                                (item[\"filterColumn\"].item.columndatatype === 'numeric' || item.filterColumn.item.columndatatype === 'integer' || item.filterColumn.item.columndatatype === 'smallint' || item.filterColumn.item.columndatatype === 'bigint') ?\r\n                                                                    (item[\"filterCondition\"].value !== 'NULL' &&\r\n                                                                        item[\"filterCondition\"].value !== 'NOT NULL') ?\r\n                                                                        item[\"filterCondition\"].value === 'IN' ?\r\n                                                                            <FormInput\r\n                                                                                label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                                name=\"filterValue\"\r\n                                                                                type=\"text\"\r\n                                                                                onChange={(event) => this.onFilterInputOnChange(event, index)}\r\n                                                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                                value={item[\"filterValue\"] ? item[\"filterValue\"] : \"\"}\r\n                                                                                isMandatory={true}\r\n                                                                                required={true}\r\n                                                                                maxLength={100}\r\n                                                                            />\r\n                                                                            :\r\n                                                                            <FormNumericInput\r\n                                                                                name={\"filterValue\"}\r\n                                                                                label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                                type=\"number\"\r\n                                                                                value={item[\"filterValue\"]}\r\n                                                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                                strict={true}\r\n                                                                                //min={0}\r\n                                                                                //max={99999999.99}\r\n                                                                                maxLength={10}\r\n                                                                                onChange={(value) => this.onFilterNumericInputChange(value, \"filterValue\", index)}\r\n                                                                                noStyle={true}\r\n                                                                                //precision={2}\r\n                                                                                //isMandatory={true}\r\n                                                                                className=\"form-control\"\r\n                                                                                errors=\"Please provide a valid number.\"\r\n                                                                            />\r\n\r\n                                                                        : \"\"\r\n                                                                    : (item[\"filterColumn\"].item.columndatatype === 'date' || item[\"filterColumn\"].item.columndatatype === 'timestamp without time zone') ?\r\n                                                                        (item[\"filterCondition\"].value === '=' ||\r\n                                                                            item[\"filterCondition\"].value === '<'\r\n                                                                            || item[\"filterCondition\"].value === '>'\r\n                                                                            || item[\"filterCondition\"].value === 'NOT'\r\n                                                                        ) ?\r\n                                                                            <DateTimePicker\r\n                                                                                name={\"filterValue\"}\r\n                                                                                label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                                className='form-control'\r\n                                                                                placeholderText={this.props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                                                                                selected={item[\"filterValue\"] ? item[\"filterValue\"] : new Date()}\r\n                                                                                dateFormat={this.props.Login.userInfo[\"ssitedatetime\"]}\r\n                                                                                timeInputLabel={this.props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                                                                                showTimeInput={true}\r\n                                                                                onChange={date => this.handleDateChange(\"filterValue\", date, index)}\r\n                                                                                value={item[\"filterValue\"] ? item[\"filterValue\"] : \"\"}\r\n                                                                            />\r\n                                                                            : \"\"\r\n                                                                        : \"\"\r\n                                                            : \"\"\r\n\r\n\r\n                                                        }\r\n                                                    </div>\r\n                                                    <div className={\"control\"}>\r\n                                                        {this.state.selectedRecord['filterNew'].length > 0 &&\r\n                                                            <Button className={\"button is-light is-danger\"}\r\n                                                                onClick={() => this.onFilterModalDelete(index)}\r\n                                                                type=\"button\" tabindex=\"0\">\r\n                                                                <span className={\"icon\"}>\r\n                                                                    <FontAwesomeIcon icon={faMinus} />\r\n                                                                </span>\r\n                                                            </Button>\r\n                                                        }\r\n                                                    </div>\r\n                                                </div>\r\n                                            })}\r\n                                            {this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value < 3 || this.props.Login.masterData.SelectedApi.value > 23) ?\r\n                                                <div className={'buttons is-right'}>\r\n                                                    <Button className={'button is-light is-info is-small'}\r\n                                                        onClick={(e) => this.onMoreClick(e)} type=\"button\" tabindex=\"0\">\r\n\r\n                                                        <span className={\"icon\"}>\r\n                                                            <FontAwesomeIcon icon={faPlus} />\r\n                                                        </span>\r\n                                                        <span>{this.props.intl.formatMessage({ id: \"IDS_MORE\" })}</span>\r\n                                                    </Button>\r\n                                                </div> : \"\"}\r\n\r\n                                        </section>\r\n                                    </form >\r\n                                    : \"\"}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md={7}>\r\n                        <ContentPanel className=\"panel-main-content\" >\r\n                            <Card className='my-2 ' >\r\n                                <Card.Header className=\"product-title-main\">\r\n                                    <Card.Title>\r\n                                        {this.props.intl.formatMessage({ id: \"IDS_QUERYPARAMS\" })}\r\n                                    </Card.Title>\r\n                                </Card.Header>\r\n                                <Card.Body className='api-card-body-scrollable-element'>\r\n                                    {/* <pre style={{ \"height\": \"200px\", \"overflow\": \"scroll\" }}>{\"{\\n\"}{this.state.constructApiData.map(e => JSON.stringify(e, null, 2).replace(/{|}/g, ''))}{\"\\n}\"}</pre> */}\r\n                                    <pre>{this.showQueryParameter()}</pre>\r\n                                    <div className='buttons is-right'>\r\n                                        <Button className='btn-user btn-primary-blue' onClick={(e) => this.copyToClipboard()}>\r\n                                            <FontAwesomeIcon className='' icon={faCopy}></FontAwesomeIcon>{'  '}\r\n                                            {this.props.intl.formatMessage({ id: \"IDS_COPYQUERYPARAMS\" })}\r\n                                        </Button>\r\n                                    </div>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </ContentPanel>\r\n                        <ContentPanel className=\"panel-main-content\" >\r\n                            <Card >\r\n                                <Card.Header className=\"product-title-main\">\r\n                                    <Card.Title>\r\n                                        {this.props.intl.formatMessage({ id: \"IDS_RESPONSE\" })}\r\n                                    </Card.Title>\r\n                                </Card.Header>\r\n                                <Card.Body className='api-card-body'>\r\n                                    <ReactJson src={this.props.Login.masterData.consoleData && this.props.Login.masterData.consoleData} />\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </ContentPanel>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </ListWrapper>\r\n        </>)\r\n    }\r\n\r\n    showQueryParameter = () => {\r\n        //   let newObject = {}\r\n        let returnString = \"{\";\r\n        //    let param;\r\n        if (this.state && this.state.selectedRecord && this.state.selectedRecord.napiservicecode && this.state.selectedRecord.napiservicecode.value < 3) {\r\n            if (this.state && this.state.constructApiData.length > 0) {\r\n                this.state.constructApiData.map((e, index) => {\r\n                    if (index < 2) {\r\n                        returnString = returnString + \" \\n \\\"\" + Object.keys(e) + \"\\\":\\\"\" + Object.values(e) + \"\\\"\"\r\n                    }\r\n\r\n                })\r\n                let text = this.filterQueryFormation(this.state.selectedRecord)\r\n\r\n                returnString = returnString + \"\\n\" + \" \\\"whereCondition\\\":\\\"\" + text + \"\\\"\\n}\"\r\n            }\r\n            else {\r\n                returnString = returnString + \"\\n}\"\r\n            }\r\n        } else if (this.state && this.state.selectedRecord && this.state.selectedRecord.napiservicecode && this.state.selectedRecord.napiservicecode.value == 24) {\r\n            if (this.state && this.state.constructApiData.length > 0) {\r\n                this.state.constructApiData.map((e, index) => {\r\n                    if (index < this.state.constructApiData.length) {\r\n                        returnString = returnString + \"\\n \\\"\" + Object.keys(e) + \"\\\":\\\"\" + Object.values(e) + \"\\\"\"\r\n                    }\r\n                })\r\n                let text = this.filterQueryFormation(this.state.selectedRecord)\r\n\t    //ALPD-3801--Parameters Displaying in ShowQueryParam \r\n                if (this.state.parameterValue&&this.state.parameterValue.length > 0) {\r\n\r\n                    this.state.parameterValue.map((item, index) => {\r\n                        //  param =\"\\n\" +this.state.parameterValue[index]+\"\\\":\\\"\" +this.state.selectedRecord[this.state.parameterValue[index]]!==undefined?this.state.selectedRecord[this.state.parameterValue[index]] :\"\";\r\n                       // returnString = returnString + \"\\n \\\"\" + this.state.parameterValue[index] +\"\\\":\\\"\" + Object.values(e) + \"\\\"\"\r\n\r\n                        returnString = returnString + (\"\\n \\\"\" + this.state.parameterValue[index] +\"\\\":\\\"\") +(this.state.selectedRecord[\"ParamValue\"]&&this.state.selectedRecord[\"ParamValue\"][index]!==undefined?this.state.selectedRecord[\"ParamValue\"][index] [item]!=undefined?this.state.selectedRecord[\"ParamValue\"][index] [item]+ \" \\\"\":\" \\\"\":\" \\\"\")\r\n\r\n                    })\r\n                }\r\n                returnString = returnString + \"\\n\" + \" \\\"whereCondition\\\":\\\"\" + text + \"\\\"\\n}\"\r\n\r\n            } else {\r\n                returnString = returnString + \"\\n}\"\r\n            }\r\n        } else if (this.props.Login) {\r\n            returnString = returnString + \"\\\"userinfo\\\":\"\r\n            let userinfo = JSON.stringify(this.props.Login.userInfo);\r\n            returnString = returnString + userinfo + \"}\"\r\n        }\r\n\r\n        return returnString;\r\n    }\r\n\r\n    copyParameter = () => {\r\n        let newObject = {}\r\n        if (this.state && this.state.selectedRecord && this.state.selectedRecord.napiservicecode && this.state.selectedRecord.napiservicecode.value < 3) {\r\n            if (this.state && this.state.constructApiData.length > 0) {\r\n\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_COPIEDSUCCESSFULLY\" }))\r\n\r\n                this.state.constructApiData.map((e, index) => {\r\n                    if (index < 2) {\r\n                        newObject = {\r\n                            ...newObject,\r\n                            ...e\r\n                        }\r\n                    }\r\n\r\n                })\r\n                let text = this.filterQueryFormation(this.state.selectedRecord)\r\n                const object = {\r\n                    ...newObject,\r\n                    \"whereCondition\": text\r\n                }\r\n                return JSON.stringify(object);\r\n\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_QUERYISEMPTY\" }))\r\n            }\r\n        } else if (this.props.Login && this.props.Login.userInfo) {\r\n\r\n            let parametersname=[];\r\n            let hasEmptyValue=[];\r\n            if(!this.state.parameterValue!==undefined){\r\n                hasEmptyValue.push(false);\r\n            }\r\n            if(this.state.parameterValue!==undefined){\r\n                 hasEmptyValue = this.state.parameterValue.map((item, index) => {\r\n               \r\n                    // let isEmpty=[];\r\n                     if (\r\n                        this.state.selectedRecord &&\r\n                        this.state.selectedRecord[\"ParamValue\"] &&\r\n                        this.state.selectedRecord[\"ParamValue\"][index]\r\n                    ) {\r\n                        //values.push(this.state.selectedRecord[\"ParamValue\"][index][item]||'');\r\n                        const isEmpty=this.state.selectedRecord[\"ParamValue\"][index][item]==='';\r\n                       \r\n                            //const isEmpty = values.some(value => value === '');\r\n                        if(isEmpty){\r\n                            parametersname.push(item);\r\n                        }\r\n                        return isEmpty;\r\n                        \r\n                    }\r\n                    parametersname.push(item);\r\n\r\n                    return true;\r\n                });\r\n                \r\n                console.log(hasEmptyValue);\r\n                \r\n            }\r\n            if(!hasEmptyValue.includes(true) ){\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_COPIEDSUCCESSFULLY\" }))\r\n\r\n                const object = {\r\n                    \"userinfo\": this.props.Login.userInfo\r\n                }\r\n                return JSON.stringify(object);\r\n            }else{\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASEFILLTHEPARAM\" })+\" (\"+parametersname.map(item=>item).join(\",\")+\") \")\r\n\r\n            }\r\n\r\n           \r\n\r\n        }\r\n    }\r\n\r\n    sendObject = () => {\r\n        let newObject = {}\r\n        this.state.constructApiData.map(e => {\r\n            newObject = {\r\n                ...newObject,\r\n                ...e\r\n            }\r\n        })\r\n        let text = this.filterQueryFormation(this.state.selectedRecord)\r\n        const object = {\r\n            ...newObject,\r\n            \"whereCondition\": text\r\n        }\r\n\r\n        return object;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            console.log(this.props.Login.masterData !== previousProps.Login.masterData)\r\n            let { userRoleControlRights, controlMap, apiServiceList,\r\n                selectedRecord, constructApiData, lstQueryBuilder, qualisList, queryList, paramList, parameterValue\r\n            } = { ...this.state }\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            }\r\n            if (this.props.Login && this.props.Login.masterData && this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi.value < 3) {\r\n                selectedRecord =\r\n                    { \"napiservicecode\": this.props.Login.masterData.SelectedApi, ...this.state.selectedRecord }\r\n            }\r\n\r\n            if (this.props.Login.masterData.lstApiService !== previousProps.Login.masterData.lstApiService) {\r\n                const apiServiceMap = constructOptionList(this.props.Login.masterData.lstApiService || [], \"napiservicecode\",\r\n                    \"sapiservicename\", \"nsorter\", \"ascending\", false);\r\n                apiServiceList = apiServiceMap.get(\"OptionList\")\r\n            }\r\n\r\n            if (this.props.Login.masterData.lstqueryForm !== previousProps.Login.masterData.lstqueryForm) {\r\n                const qualisMap = constructOptionList(this.props.Login.masterData.lstqueryForm || [], \"nformcode\",\r\n                    \"sdisplayname\", \"nsorter\", \"ascending\", false);\r\n                qualisList = qualisMap.get(\"OptionList\")\r\n                // this.setState({\r\n                //     qualisList\r\n                // });\r\n            }\r\n\r\n            if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n                selectedRecord={...selectedRecord, \r\n                ...this.props.Login.selectedRecord };\r\n            }\r\n            // if (this.props.Login.parameterValue !== previousProps.Login.parameterValue) {\r\n            //     parameterValue={...parameterValue, \r\n            //     ...this.props.Login.parameterValue };\r\n            // }\r\n            if (this.props.Login.masterData.lstSQLQuery !== previousProps.Login.masterData.lstSQLQuery) {\r\n                const queryMap = constructOptionList(this.props.Login.masterData.lstSQLQuery || [], \"nsqlquerycode\",\r\n                    \"ssqlqueryname\", \"ssqlquery\", \"nsorter\", \"ascending\", false);\r\n                queryList = queryMap.get(\"OptionList\")\r\n\r\n            }\r\n            if (this.props.Login.masterData.Parameters !== previousProps.Login.masterData.Parameters) {\r\n                // const paramMap = constructOptionList(this.props.Login.masterData.Parameters || [] , this.props.Login.masterData.Parameters , \"ascending\", false);\r\n                // paramList = paramMap.get(\"OptionList\")\r\n\r\n                let listParam = [];\r\n                if(this.props.Login.masterData.Parameters!=undefined){\r\n                    listParam = this.props.Login.masterData.Parameters;\r\n                    parameterValue = listParam.map(item => {\r\n                        return item;\r\n                    }\r\n                    );\r\n                }else{\r\n                    parameterValue=this.props.Login.masterData.Parameters;  \r\n                }\r\n               \r\n            }\r\n            if (this.props.Login.masterData.SelectedForm !== previousProps.Login.masterData.SelectedForm) {\r\n\r\n                if (this.props.Login.masterData.SelectedForm && this.props.Login.masterData.SelectedForm.value) {\r\n                    constructApiData = [\r\n                        { \"nformcode\": this.props.Login.masterData.SelectedForm.value },\r\n                        { \"sformname\": this.props.Login.masterData.SelectedForm.label }\r\n                    ]\r\n                }\r\n                else {\r\n                    constructApiData = []\r\n                }\r\n\r\n                let constructData = this.props.Login.masterData.lstquerybilderColumns.map((item, index) => {\r\n                    return { label: item.scolumndisplayname, value: index, item: { ...item } }\r\n\r\n                })\r\n                lstQueryBuilder = constructData;\r\n                selectedRecord['filterNew'] = []\r\n            }\r\n\r\n\r\n\r\n            if (this.props.Login.masterData.SelectedApi !== previousProps.Login.masterData.SelectedApi) {\r\n                if (this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi.value && this.props.Login.masterData.SelectedApi.value === 24) {\r\n\r\n                    let constructQuery = this.props.Login.masterData.lstSQLQuery.map((item, index) => {\r\n                        return { label: item.ssqlqueryname, value: index, item: { ...item } }\r\n                    })\r\n                    lstQueryBuilder = constructQuery;\r\n                }\r\n            }\r\n            if (this.props.Login.masterData.SelectedSQLQuery !== previousProps.Login.masterData.SelectedSQLQuery) {\r\n\r\n                if (this.props.Login.masterData.SelectedSQLQuery && this.props.Login.masterData.SelectedSQLQuery.value && this.props.Login.masterData.SelectedApi.value === 24) {\r\n\r\n                    constructApiData = [\r\n                        { \"nsqlquerycode\": this.props.Login.masterData.SelectedSQLQuery.value },\r\n                        { \"ssqlqueryname\": this.props.Login.masterData.SelectedSQLQuery.label },\r\n\r\n                    ]\r\n                    // if(this.props.Login.masterData.Parameters!=undefined){\r\n                    //     th   is.props.Login.masterData.Parameters.map(item=>{\r\n                    //         constructApiData.push({[item]:item})  \r\n\r\n                    //     })\r\n                    // }\r\n                }\r\n                else {\r\n                    constructApiData = []\r\n                }\r\n\r\n                let constructData = [];\r\n                if (this.props.Login.masterData && this.props.Login.masterData.Columns) {\r\n                    constructData = this.props.Login.masterData.Columns.map((item, index) => {\r\n                        return { label: item.scolumndisplayname, value: index, item: { ...item } }\r\n\r\n                    })\r\n                } else {\r\n                    constructData = [];\r\n                }\r\n                lstQueryBuilder = constructData;\r\n                selectedRecord['filterNew'] = []\r\n\r\n            }\r\n            if (this.props.Login && this.props.Login.newMap) {\r\n                selectedRecord['filterNew'] = { \"whereCondition\": this.props.Login.newMap.whereCondition }\r\n            }\r\n           \r\n            this.setState({\r\n                userRoleControlRights,\r\n                controlMap, apiServiceList,\r\n                selectedRecord, constructApiData,\r\n                lstQueryBuilder, qualisList, queryList, paramList, parameterValue\r\n            });\r\n        }\r\n        else {\r\n\r\n            if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n                this.setState({\r\n                    selectedRecord: this.props.Login.selectedRecord,\r\n                    data: this.props.Login.masterData\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    sendRequest,\r\n    getQualisFormsFields, getQualisForms, getCustomQuery, getCustomQueryName, updateStore\r\n})(injectIntl(APIService));"]},"metadata":{},"sourceType":"module"}