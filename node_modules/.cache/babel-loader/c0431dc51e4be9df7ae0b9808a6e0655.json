{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\components\\\\type2component\\\\Type2Component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport Esign from '../../pages/audittrail/Esign';\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\nimport { getFieldSpecification } from './Type2FieldSpecificationList';\nimport AddType2Component from './AddType2Component';\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecord } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, extractFieldHeader } from '../CommonScript';\nimport { ListWrapper } from '../client-group.styles';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Type2Component extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.openModal = ncontrolCode => {\n      let selectedRecord = {\n        \"ndefaultstatus\": 4\n      };\n\n      if (this.props.Login.userInfo.nformcode === 12) {\n        selectedRecord = {\n          \"nsafetymarkermand\": 4\n        };\n      } else if (this.props.Login.userInfo.nformcode === 13) {\n        selectedRecord = {\n          \"nproducttypemand\": 4\n        };\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord,\n          operation: \"create\",\n          ncontrolCode,\n          selectedId: null,\n          openModal: true,\n          screenName: this.props.Login.inputParam.displayName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit            \n      // const mandatoryFields=[]\n      // let validationPassed = true;\n      // this.extractedColumnList.forEach(item=>item.mandatory === true ? \n      //     this.state.selectedRecord[item.dataField].trim().length === 0 ? validationPassed=false :\"\":\"\"\n      // );\n      // if (validationPassed){\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord;\n        this.extractedColumnList.map(item => {\n          let fieldName = item.dataField;\n\n          if (item.controlType === \"checkbox\") {\n            fieldName = item.controlName;\n          }\n\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\n        });\n        selectedId = this.props.Login.selectedId;\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        this.extractedColumnList.map(item => {\n          let fieldName = item.dataField;\n\n          if (item.controlType === \"checkbox\") {\n            fieldName = item.controlName;\n          }\n\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\n        });\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      } // }else{\n      //     console.log(\"validation status:\", validationPassed);\n      // }\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n    let fieldList = {};\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n\n    if (this.props.Login.inputParam !== undefined) {\n      fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\n      this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\n      primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n    }\n\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    const mandatoryFields = [];\n    this.extractedColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchRecord,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      addRecord: () => this.openModal(addId),\n      pageable: true,\n      scrollable: 'scrollable' // isComponent={true}\n      ,\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal // className = \"k-animation-container\"\n      ,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields // addComponentParam={{}}                   \n      // addComponent={this.addComponent}\n      ,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddType2Component, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        extractedColumnList: this.extractedColumnList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  fetchRecord\n})(injectIntl(Type2Component));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/components/type2component/Type2Component.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","Esign","SlideOutModal","getFieldSpecification","AddType2Component","callService","crudMaster","updateStore","validateEsignCredential","fetchRecord","DEFAULT_RETURN","showEsign","getControlMap","extractFieldHeader","ListWrapper","mapStateToProps","state","Login","Type2Component","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","openModal","ncontrolCode","selectedRecord","userInfo","nformcode","updateInfo","typeName","operation","selectedId","screenName","inputParam","displayName","closeModal","loadEsign","onInputOnChange","target","type","name","checked","value","deleteRecord","deleteParam","classUrl","methodUrl","inputData","toLowerCase","esignNeeded","userRoleControlRights","screenData","masterData","intl","formatMessage","id","reloadData","onSaveClick","saveType","formRef","undefined","extractedColumnList","map","item","fieldName","dataField","controlType","controlName","nmastersitecode","validateEsign","sreason","password","createRef","fieldList","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","addId","has","concat","get","ncontrolcode","Object","values","keys","length","editId","editParam","mandatoryFields","forEach","mandatory","push","componentDidUpdate","previousProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {  injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\r\nimport { getFieldSpecification } from './Type2FieldSpecificationList';\r\nimport AddType2Component from './AddType2Component';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecord } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, extractFieldHeader } from '../CommonScript';\r\nimport { ListWrapper} from '../client-group.styles';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Type2Component extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n        };\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    openModal = (ncontrolCode) => {\r\n        let selectedRecord = { \"ndefaultstatus\": 4 };\r\n        if (this.props.Login.userInfo.nformcode === 12) {\r\n            selectedRecord = { \"nsafetymarkermand\": 4 }\r\n        }\r\n        else if (this.props.Login.userInfo.nformcode === 13) {\r\n            selectedRecord = { \"nproducttypemand\": 4 }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord, operation: \"create\", ncontrolCode,selectedId:null,\r\n                openModal: true, screenName: this.props.Login.inputParam.displayName\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId:null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        let fieldList = {};\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\r\n            this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n            primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\r\n\r\n        }\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n               && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n    \r\n        const editParam = {screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"update\",  primaryKeyField, \r\n            inputParam:this.props.Login.inputParam,   userInfo:this.props.Login.userInfo,  ncontrolCode:editId};\r\n\r\n        const deleteParam ={operation:\"delete\"};\r\n\r\n        const mandatoryFields=[];\r\n        this.extractedColumnList.forEach(item=>item.mandatory === true ? \r\n            mandatoryFields.push(item) :\"\"\r\n        );        \r\n\r\n        return(<>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {/* <PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                                <HeaderName className=\"header-primary-md\">\r\n                                    {this.props.Login.inputParam  && this.props.Login.inputParam.displayName ?\r\n                                        <FormattedMessage id={this.props.Login.inputParam.displayName} defaultMessage=\"\"/> : \"\"}\r\n                                </HeaderName>\r\n                                <Button className=\"btn btn-user btn-primary-blue\"\r\n                                    hidden={this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                    onClick={() => this.openModal(addId)} role=\"button\">\r\n                                    <FontAwesomeIcon icon={faPlus} /> {}\r\n                                    <FormattedMessage id={\"IDS_ADD\"} defaultMessage='Add' />\r\n                                </Button>\r\n                            </PrimaryHeader> */}\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchRecord}\r\n                                    editParam={editParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={deleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    addRecord = {() => this.openModal(addId)}\r\n                                    pageable={true}\r\n                                    scrollable={'scrollable'}\r\n                                    // isComponent={true}\r\n                                    gridHeight = {'600px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal ? \r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        // className = \"k-animation-container\"\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        // addComponentParam={{}}                   \r\n                        // addComponent={this.addComponent}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddType2Component\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                extractedColumnList={this.extractedColumnList}\r\n                            />}\r\n                    />\r\n                :\"\"}\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let {dataState}=this.state;\r\n                if(this.props.Login.dataState===undefined){\r\n                    dataState={skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    // addComponent=(addComponentParam)=>{\r\n    //     if(this.props.Login.loadEsign){\r\n    //         return <Esign operation={this.props.Login.operation}\r\n    //             onInputOnChange={this.onInputOnChange}\r\n    //             inputParam={this.props.Login.inputParam}\r\n    //             selectedRecord={this.state.selectedRecord || {}}\r\n    //         />\r\n    //     }\r\n    //     else{\r\n    //         return <AddType2Component\r\n    //                 selectedRecord={this.state.selectedRecord || {}}\r\n    //                 onInputOnChange={this.onInputOnChange}\r\n    //                 extractedColumnList={this.extractedColumnList}\r\n    //                 failedControls={addComponentParam.failedControls ||[]}\r\n    //             />\r\n    //     }\r\n    // }\r\n\r\n    // = (selectedRecord, operation, ncontrolCode) => {\r\n    deleteRecord = (deleteParam) =>{\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation:deleteParam.operation,\r\n            dataState:this.state.dataState\r\n        }\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,deleteParam.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation:deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add / edit            \r\n        // const mandatoryFields=[]\r\n        // let validationPassed = true;\r\n        // this.extractedColumnList.forEach(item=>item.mandatory === true ? \r\n        //     this.state.selectedRecord[item.dataField].trim().length === 0 ? validationPassed=false :\"\":\"\"\r\n        // );\r\n       \r\n        // if (validationPassed){\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let dataState =undefined;\r\n            let selectedId = null;\r\n            if (this.props.Login.operation === \"update\") {\r\n                // edit\r\n                dataState=this.state.dataState\r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord;\r\n                this.extractedColumnList.map(item => {\r\n                    let fieldName = item.dataField;\r\n                    if (item.controlType === \"checkbox\") {\r\n                        fieldName = item.controlName\r\n                    }\r\n                    return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\r\n                })\r\n                selectedId = this.props.Login.selectedId; \r\n            }\r\n            else {\r\n                //add               \r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n                this.extractedColumnList.map(item => {\r\n                    let fieldName = item.dataField;\r\n                    if (item.controlType === \"checkbox\") {\r\n                        fieldName = item.controlName\r\n                    }\r\n                    return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\r\n                })\r\n            }\r\n\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: this.props.Login.inputParam.methodUrl,\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData, selectedId,\r\n                operation: this.props.Login.operation, saveType, formRef,dataState\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: this.props.Login.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        // }else{\r\n        //     console.log(\"validation status:\", validationPassed);\r\n        // }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    fetchRecord\r\n})(injectIntl(Type2Component));"]},"metadata":{},"sourceType":"module"}