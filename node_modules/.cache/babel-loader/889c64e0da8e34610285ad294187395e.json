{"ast":null,"code":"'use strict';\n\nvar _ = require('underscore');\n\nmodule.exports = function (dialect) {\n  dialect.operators.fetching.add('$json', {\n    fn: function (value, end) {\n      if (end) value = {\n        value: value\n      };\n      return dialect.buildBlock('term', {\n        term: value,\n        type: 'value'\n      });\n    }\n  });\n  dialect.operators.fetching.add('$array', {\n    fn: function (value) {\n      if (!_.isArray(value)) {\n        value = [value];\n      }\n\n      return dialect.buildBlock('term', {\n        term: value,\n        type: 'value'\n      });\n    }\n  });\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/node_modules/json-sql/lib/dialects/postgresql/operators/fetching.js"],"names":["_","require","module","exports","dialect","operators","fetching","add","fn","value","end","buildBlock","term","type","isArray"],"mappings":"AAAA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AAClCA,EAAAA,OAAO,CAACC,SAAR,CAAkBC,QAAlB,CAA2BC,GAA3B,CAA+B,OAA/B,EAAwC;AACvCC,IAAAA,EAAE,EAAE,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AACxB,UAAIA,GAAJ,EAASD,KAAK,GAAG;AAACA,QAAAA,KAAK,EAAEA;AAAR,OAAR;AACT,aAAOL,OAAO,CAACO,UAAR,CAAmB,MAAnB,EAA2B;AAACC,QAAAA,IAAI,EAAEH,KAAP;AAAcI,QAAAA,IAAI,EAAE;AAApB,OAA3B,CAAP;AACA;AAJsC,GAAxC;AAOAT,EAAAA,OAAO,CAACC,SAAR,CAAkBC,QAAlB,CAA2BC,GAA3B,CAA+B,QAA/B,EAAyC;AACxCC,IAAAA,EAAE,EAAE,UAASC,KAAT,EAAgB;AACnB,UAAI,CAACT,CAAC,CAACc,OAAF,CAAUL,KAAV,CAAL,EAAuB;AACtBA,QAAAA,KAAK,GAAG,CAACA,KAAD,CAAR;AACA;;AACD,aAAOL,OAAO,CAACO,UAAR,CAAmB,MAAnB,EAA2B;AAACC,QAAAA,IAAI,EAAEH,KAAP;AAAcI,QAAAA,IAAI,EAAE;AAApB,OAA3B,CAAP;AACA;AANuC,GAAzC;AAQA,CAhBD","sourcesContent":["'use strict';\n\nvar _ = require('underscore');\n\nmodule.exports = function(dialect) {\n\tdialect.operators.fetching.add('$json', {\n\t\tfn: function(value, end) {\n\t\t\tif (end) value = {value: value};\n\t\t\treturn dialect.buildBlock('term', {term: value, type: 'value'});\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$array', {\n\t\tfn: function(value) {\n\t\t\tif (!_.isArray(value)) {\n\t\t\t\tvalue = [value];\n\t\t\t}\n\t\t\treturn dialect.buildBlock('term', {term: value, type: 'value'});\n\t\t}\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}