{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntryMean.js\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component'; // import MultiColumnComboSearch from '../../../components/multi-column-combo-search/multi-column-combo-search';\n//import FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\n\nimport DataGridWithSelection from '../../components/data-grid/DataGridWithSelection';\n\nconst ResultEntryMean = props => {\n  console.log(\"props mean:\", props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(DataGridWithSelection, {\n    data: props.meanTestParameterList,\n    selectAll: props.addSelectAll,\n    title: props.intl.formatMessage({\n      id: \"IDS_PARAMETER\"\n    }),\n    headerSelectionChange: props.headerSelectionChange,\n    selectionChange: props.selectionChange,\n    extractedColumnList: [{\n      idsName: \"IDS_TEST\",\n      dataField: \"stestsynonym\",\n      width: \"350px\"\n    }, {\n      idsName: \"IDS_REPEATRETEST\",\n      dataField: \"sretestrepeatcount\",\n      width: \"150px\"\n    }, {\n      idsName: \"IDS_PARAMETER\",\n      dataField: \"sparametersynonym\",\n      width: \"350px\"\n    }, {\n      idsName: \"IDS_RESULT\",\n      dataField: \"sresult\",\n      width: \"100px\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormTextarea, {\n    name: \"parametervalue\" //label={ props.intl.formatMessage({ id:\"IDS_NIBSCCOMMENTS\"})}                    \n    //placeholder={ props.intl.formatMessage({ id:\"IDS_NIBSCCOMMENTS\"})}\n    ,\n    value: props.selectedTestParam || \"\",\n    rows: \"2\",\n    readOnly: true //isMandatory={false}\n    ,\n    required: false,\n    maxLength: 255,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"testmean\",\n    type: \"text\",\n    label: props.intl.formatMessage({\n      id: \"IDS_TESTMEAN\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_TESTMEAN\"\n    }),\n    value: props.testMean || \"\",\n    isMandatory: false,\n    required: false,\n    maxLength: 10,\n    isDisabled: true,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  }))));\n};\n\nexport default injectIntl(ResultEntryMean);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryMean.js"],"names":["React","injectIntl","Row","Col","FormInput","FormTextarea","DataGridWithSelection","ResultEntryMean","props","console","log","meanTestParameterList","addSelectAll","intl","formatMessage","id","headerSelectionChange","selectionChange","idsName","dataField","width","selectedTestParam","event","onInputOnChange","testMean"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\n// import MultiColumnComboSearch from '../../../components/multi-column-combo-search/multi-column-combo-search';\r\n//import FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\r\nimport DataGridWithSelection from '../../components/data-grid/DataGridWithSelection';\r\n\r\nconst ResultEntryMean = (props) =>{ \r\n    console.log(\"props mean:\", props);  \r\n       return (<>\r\n           <Row>\r\n               <Col md={12}>\r\n\r\n                        {/* {Object.keys(props.selectedMeanTestParam).length > 0 &&\r\n                            <MultiColumnComboSearch data={props.meanTestParameterList}\r\n                                visibility='show-all'\r\n                                labelledBy=\"IDS_MANUFACTURERNAME\"\r\n                                fieldToShow={[\"stestname\", \"sparametername\", \"sresult\"]}\r\n                                selectedId={props.selectedRecord[\"nproductmanufcode\"]}\r\n                                value={props.selectedRecord ? [props.selectedRecord] : []}\r\n                                isMandatory={true}\r\n                                showInputkey=\"smanufname\"\r\n                                idslabelfield={[\"IDS_TEST\", \"IDS_PARAMETER\", \"IDS_RESULT\"]}\r\n                                getValue={(value) => props.onMultiColumnValue(value, [\"nproductmanufcode\", \"nmanufcode\", \"nmanufsitecode\", \"smanufname\", \"smanufsitename\"], true, [\"seprotocolname\"], [\"neprotocolcode\"])}\r\n                                singleSelection={true}\r\n                            />\r\n                        } */}\r\n\r\n                    {/* <FormMultiSelect\r\n                            name={\"testparam\"}\r\n                            label={\"IDS_PARAMETER\"}\r\n                            options={props.meanTestParameterList || []}\r\n                           // optionId={\"value\"}\r\n                            //optionValue={\"label\"}\r\n                            constructedOption={true}                            \r\n                            value={props.selectedMeanTestParam ? props.selectedMeanTestParam[\"testparam\"] : \"\"}\r\n                            isMandatory={true}\r\n                            isClearable={true}\r\n                            disableSearch={false}\r\n                            disabled={false}\r\n                            closeMenuOnSelect={false}\r\n                            alphabeticalSort={true}\r\n                            onChange={(event) => props.onComboChange(event, \"testparam\")}  />    */}\r\n                        <DataGridWithSelection                               \r\n                                data={props.meanTestParameterList }\r\n                                selectAll={props.addSelectAll}\r\n                                title={props.intl.formatMessage({id:\"IDS_PARAMETER\"})}\r\n                                headerSelectionChange={props.headerSelectionChange}\r\n                                selectionChange={props.selectionChange}\r\n                                extractedColumnList={[  {idsName:\"IDS_TEST\", dataField:\"stestsynonym\", width:\"350px\"},\r\n                                                        {idsName:\"IDS_REPEATRETEST\", dataField:\"sretestrepeatcount\" , width:\"150px\"},\r\n                                                        {idsName:\"IDS_PARAMETER\", dataField:\"sparametersynonym\" , width:\"350px\"},\r\n                                                        {idsName:\"IDS_RESULT\", dataField:\"sresult\" , width:\"100px\"}]}                             \r\n                        /> \r\n\r\n                    <FormTextarea\r\n                                   name={\"parametervalue\"}\r\n                                   //label={ props.intl.formatMessage({ id:\"IDS_NIBSCCOMMENTS\"})}                    \r\n                                   //placeholder={ props.intl.formatMessage({ id:\"IDS_NIBSCCOMMENTS\"})}\r\n                                   value ={ props.selectedTestParam  || \"\"}\r\n                                   rows=\"2\"\r\n                                   readOnly ={true}\r\n                                   //isMandatory={false}\r\n                                   required={false}\r\n                                   maxLength={255}\r\n                                   onChange={(event)=> props.onInputOnChange(event)}\r\n                                   />\r\n\r\n                        <FormInput\r\n                                name={\"testmean\"}\r\n                                type=\"text\"\r\n                                label={ props.intl.formatMessage({ id:\"IDS_TESTMEAN\"})}                        \r\n                                placeholder={ props.intl.formatMessage({ id:\"IDS_TESTMEAN\"})}\r\n                                value ={ props.testMean || \"\"}\r\n                                isMandatory={false}\r\n                                required={false}\r\n                                maxLength={10}\r\n                                isDisabled={true}\r\n                                onChange={(event)=> props.onInputOnChange(event)}\r\n                            />\r\n            </Col>              \r\n        </Row>   \r\n       \r\n      </>\r\n       )\r\n   }\r\n   export default injectIntl(ResultEntryMean);\r\n"]},"metadata":{},"sourceType":"module"}