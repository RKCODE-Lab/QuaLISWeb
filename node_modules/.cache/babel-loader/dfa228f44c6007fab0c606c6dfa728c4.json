{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\sign-in\\\\sign-in.component.jsx\";\n\n/* eslint-disable no-undef */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButtom from '../custom-button/custom-button.component';\nimport { changeLanguage, getLoginDetails, getUserSiteAndRole, updateStore, createPassword, changepassword, getUsersiteRole, checkPassword } from '../../actions';\nimport CreatePassword from '../../pages/Login/CreatePassWord';\nimport { clickOnLoginButton } from '../../actions';\nimport { toast } from 'react-toastify';\nimport FormSelectSearch from '../form-select-search/form-select-search.component';\nimport { validateLoginId } from '../CommonScript';\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport ChangePassword from '../../pages/Login/ChangePassWord';\nimport { changePasswordValidation, fnPassMessage, fnValidatePassword } from '../../pages/Login/LoginCommonFunction';\nimport { LOGINTYPE, transactionStatus } from '../Enumeration';\nimport { Form } from 'react-bootstrap';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openCPModal: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onCreatePassWord = () => {\n      const selectedRecord = this.state.selectedRecord;\n      const createPwdRecord = this.state.createPwdRecord;\n      const snewpassword = createPwdRecord.snewpassword.trim();\n      const sconfirmpassword = createPwdRecord.sconfirmpassword.trim();\n\n      if (selectedRecord.sloginid === snewpassword) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PASSWORDSHOULDNOTSAMEASLOGINID\"\n        }));\n      } else if (sconfirmpassword !== snewpassword) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PASSWORDNOTMATCHED\"\n        }));\n      } else {\n        // Added by Ragul.C for Double alert shows for Invaliduser\n        selectedRecord[\"nusermultirolecode\"] = this.props.Login.nusermultirolecode;\n        selectedRecord[\"nusersitecode\"] = this.props.Login.nusersitecode;\n        selectedRecord[\"nusercode\"] = this.props.Login.nusercode;\n        selectedRecord[\"nlogintypecode\"] = this.props.Login.nlogintypecode;\n        selectedRecord[\"nlanguagecode\"] = this.props.Login.nlanguagecode;\n        this.setState({\n          selectedRecord\n        }); // \n\n        const returnString = fnValidatePassword(this.props.Login.passwordPolicy, snewpassword);\n\n        if (returnString === 0) {\n          const inputParam = {\n            spassword: snewpassword,\n            nusersitecode: selectedRecord.nusersitecode.value,\n            nusermultirolecode: selectedRecord.nusermultirolecode.value\n          };\n          this.props.createPassword(inputParam);\n        } else {\n          toast.info(returnString);\n        }\n      }\n    };\n\n    this.onChangePassword = () => {\n      const selectedRecord = this.state.selectedRecord;\n      const createPwdRecord = this.state.createPwdRecord;\n      const returnMsg = changePasswordValidation(createPwdRecord, this.props.Login.passwordPolicy, this.state.selectedRecord.sloginid);\n\n      if (returnMsg === 0) {\n        const inputParam = {\n          spassword: createPwdRecord.snewpassword.trim(),\n          sOldPassword: createPwdRecord.soldpassword.trim(),\n          nusersitecode: selectedRecord.nusersitecode.value,\n          isPasswordExpiry: true,\n          userInfo: { ...this.props.Login.userInfo,\n            slanguagefilename: selectedRecord.nlanguagecode.item.sfilename,\n            sloginid: selectedRecord.sloginid,\n            suserrolename: selectedRecord.nusermultirolecode.label\n          },\n          slanguagetypecode: selectedRecord.nlanguagecode.item.slanguagetypecode\n        };\n        this.props.changepassword(inputParam);\n      } else {\n        toast.info(returnMsg);\n      }\n    };\n\n    this.onSelectChange = (ComboVal, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = ComboVal;\n\n      if (fieldName === \"nlogintypecode\" && ComboVal.value === LOGINTYPE.INTERNAL && selectedRecord.sloginid && selectedRecord.sloginid !== \"\" && selectedRecord.nusermultirolecode && selectedRecord.nusermultirolecode !== \"\" && selectedRecord.nusersitecode && selectedRecord.nusersitecode !== \"\") {\n        const inputParam = {\n          sloginid: this.state.selectedRecord.sloginid,\n          Language: selectedRecord.nlanguagecode.item,\n          nusermultisitecode: selectedRecord.nusersitecode.value,\n          nusermultirolecode: selectedRecord.nusermultirolecode.value,\n          nuserrolecode: selectedRecord.nusermultirolecode.item.nuserrolecode,\n          nlogintypecode: ComboVal.value\n        };\n        this.props.checkPassword(inputParam, selectedRecord);\n      } else {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onChangeLanguage = (ComboVal, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = ComboVal;\n      this.props.changeLanguage(ComboVal.item.slanguagetypecode, selectedRecord, this.props.Login.loginTypes);\n    };\n\n    this.onLoginEvent = event => {\n      if (event.keyCode === 13) {\n        const inputValue = event.target.value;\n        this.setState({\n          show: this.props.Login.open\n        });\n\n        if (inputValue !== \"\") {\n          this.onLoginSubmit(inputValue);\n        }\n      }\n    };\n\n    this.AutoLogin = event => {\n      if (event.keyCode === 118) {\n        let nlogintypecode = 1;\n        const inputParam = {\n          nusermultisitecode: parseInt(-1),\n          nusermultirolecode: parseInt(-1),\n          slanguagetypecode: \"en-US\",\n          spassword: \"123\",\n          nusercode: -1,\n          nlogintypecode: 1,\n          nuserrolecode: -1,\n          url: nlogintypecode === 1 ? \"/login/internallogin\" : \"/login/adslogin\",\n          navigation: \"home\"\n        };\n        this.setState({\n          nusermultisitecode: parseInt(-1),\n          nusermultirolecode: parseInt(-1),\n          slanguagetypecode: 1,\n          spassword: \"123\",\n          nusercode: -1,\n          nlogintypecode: 1,\n          nuserrolecode: -1\n        });\n        this.props.clickOnLoginButton(inputParam, this.props.Login.languageList);\n      }\n    };\n\n    this.state = {\n      PasswordPolicy: {},\n      selectedRecord: {}\n    };\n    this.loginRef = React.createRef();\n  }\n\n  render() {\n    const {\n      loginTypeList,\n      languageList,\n      loginUserSite,\n      count = 0,\n      loginUserRole\n    } = this.props.Login;\n    return /*#__PURE__*/React.createElement(Form, {\n      ref: this.loginRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      name: \"sloginid\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_LOGINID\"\n      }),\n      type: \"text\" // placeholder={this.props.intl.formatMessage({ id: \"IDS_LOGINID\" })}\n      ,\n      required: true,\n      isMandatory: \"*\",\n      onChange: event => this.onLoginInputChange(event),\n      onBlur: event => this.onFocusOutEvent(event),\n      onKeyUp: this.AutoLogin,\n      value: this.state.selectedRecord.sloginid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"spassword\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_PASSWORD\"\n      }),\n      type: \"password\",\n      required: true,\n      isMandatory: \"*\" // placeholder={this.props.intl.formatMessage({ id: \"IDS_PASSWORD\" })}\n      ,\n      onChange: event => this.selectInputOnChange(event),\n      onKeyUp: this.onLoginEvent,\n      value: this.state.selectedRecord.spassword,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nusersitecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_SITE\"\n      }),\n      isSearchable: false,\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: loginUserSite || [],\n      optionId: \"nusersitecode\",\n      optionValue: \"ssitename\",\n      value: this.state.selectedRecord.nusersitecode ? this.state.selectedRecord.nusersitecode : \"\",\n      onChange: value => this.onUsersiteChange(value, \"nusersitecode\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nusermultirolecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_USERROLE\"\n      }),\n      isSearchable: false,\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: loginUserRole || [],\n      optionId: \"nusermultirolecode\",\n      optionValue: \"suserrolename\",\n      value: this.state.selectedRecord.nusermultirolecode ? this.state.selectedRecord.nusermultirolecode : \"\",\n      onChange: value => this.onSelectChange(value, \"nusermultirolecode\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nlanguagecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_LANGUAGE\"\n      }),\n      isSearchable: false,\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: languageList || [],\n      optionId: \"nlanguagecode\",\n      optionValue: \"slanguagename\",\n      value: this.state.selectedRecord.nlanguagecode ? this.state.selectedRecord.nlanguagecode : \"\",\n      onChange: value => this.onChangeLanguage(value, \"nlanguagecode\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CustomButtom, {\n      name: \"loginbutton\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_LOGIN\"\n      }),\n      color: \"primary\",\n      className: \"btn-user btn-primary-blue\",\n      handleClick: () => this.onLoginSubmit(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }), this.props.Login.openCPModal && this.props.Login.userInfo.nlogintypecode === LOGINTYPE.INTERNAL && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openCPModal,\n      closeModal: this.closeModal,\n      loginoperation: true,\n      inputParam: {},\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.props.Login.PassFlag === 6 ? this.onCreatePassWord : this.onChangePassword,\n      selectedRecord: this.state.createPwdRecord || {},\n      mandatoryFields: this.mandatoryFieldFunction(this.props.Login.PassFlag),\n      addComponent: this.props.Login.PassFlag === 6 ? /*#__PURE__*/React.createElement(CreatePassword, {\n        sloginid: this.state.selectedRecord.sloginid,\n        createPwdRecord: this.state.createPwdRecord,\n        msg: fnPassMessage(this.props.Login.passwordPolicy),\n        onInputChange: event => this.onInputChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 29\n        }\n      }) : this.props.Login.PassFlag === transactionStatus.EXPIRED ? /*#__PURE__*/React.createElement(ChangePassword, {\n        sloginid: this.state.selectedRecord.sloginid,\n        createPwdRecord: this.state.createPwdRecord,\n        msg: fnPassMessage(this.props.Login.passwordPolicy),\n        onInputChange: event => this.onInputChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 33\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  onUsersiteChange(ComboVal, fieldName) {\n    const selectedRecord = this.state.selectedRecord || {};\n    selectedRecord[fieldName] = ComboVal;\n    const inputParam = {\n      selectedRecord\n    };\n    this.props.getUsersiteRole(inputParam);\n  }\n\n  componentDidMount() {\n    this.loginRef.current[0].focus();\n    this.props.getLoginDetails();\n  }\n\n  mandatoryFieldFunction(passFlag) {\n    let mandatoryField = [];\n\n    if (passFlag === 6) {\n      mandatoryField = [{\n        \"idsName\": \"IDS_NEWPASSWORD\",\n        \"dataField\": \"snewpassword\",\n        \"mandatory\": false\n      }, {\n        \"idsName\": \"IDS_CONFIRMPASSWORD\",\n        \"dataField\": \"sconfirmpassword\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n    } else {\n      mandatoryField = [{\n        \"idsName\": \"IDS_OLDPASSWORD\",\n        \"dataField\": \"soldpassword\",\n        \"mandatory\": false\n      }, {\n        \"idsName\": \"IDS_NEWPASSWORD\",\n        \"dataField\": \"snewpassword\",\n        \"mandatory\": false\n      }, {\n        \"idsName\": \"IDS_CONFIRMPASSWORD\",\n        \"dataField\": \"sconfirmpassword\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n    }\n\n    return mandatoryField;\n  }\n\n  onLoginInputChange(event) {\n    const selectedRecord = this.state.selectedRecord || {};\n    const loginid = validateLoginId(event.target.value);\n\n    if (loginid) {\n      selectedRecord[event.target.name] = event.target.value;\n    } else {\n      selectedRecord[event.target.name] = this.state.selectedRecord[event.target.name];\n    }\n\n    this.setState({\n      selectedRecord\n    });\n  }\n\n  selectInputOnChange(event) {\n    const selectedRecord = this.state.selectedRecord || {};\n    selectedRecord[event.target.name] = event.target.value;\n    this.setState({\n      selectedRecord\n    });\n  }\n\n  onInputChange(event) {\n    const createPwdRecord = this.state.createPwdRecord || {};\n    createPwdRecord[event.target.name] = event.target.value;\n    this.setState({\n      createPwdRecord\n    });\n  }\n\n  onFocusOutEvent(event) {\n    // event.stopPropagation();\n    //  Added by Ragul.C for Double alert shows for Invaliduser\n    if (event.target.name === \"sloginid\") {\n      event.stopPropagation();\n    }\n\n    const sloginid = event.target.value;\n\n    if (sloginid !== \"\") {\n      const selectedRecord = this.state.selectedRecord || {};\n      const inputParam = {\n        sloginid,\n        Language: selectedRecord.nlanguagecode.item,\n        logintype: this.props.Login.loginTypeList\n      };\n      this.props.getUserSiteAndRole(inputParam, selectedRecord);\n    }\n  }\n\n  onLoginSubmit() {\n    const selectedRecord = this.state.selectedRecord;\n    const mandatoryField = [{\n      \"idsName\": \"IDS_LOGINID\",\n      \"dataField\": \"sloginid\",\n      \"mandatory\": false\n    }, //Don't Remove the Commented line commented for NIBSC\n    // { \"idsName\": \"IDS_SITE\", \"dataField\": \"nusersitecode\", \"mandatory\": true },\n    {\n      \"idsName\": \"IDS_ROLE\",\n      \"dataField\": \"nusermultirolecode\",\n      \"mandatory\": true\n    }, {\n      \"idsName\": \"IDS_LOGINTYPE\",\n      \"dataField\": \"nlogintypecode\",\n      \"mandatory\": true\n    }, //Don't Remove the Commented line commented for NIBSC\n    //{ \"idsName\": \"IDS_LANGUAGE\", \"dataField\": \"nlanguagecode\", \"mandatory\": true },\n    {\n      \"idsName\": \"IDS_PASSWORD\",\n      \"dataField\": \"spassword\",\n      \"mandatory\": true\n    }];\n    const failedControls = [];\n    mandatoryField.map(item => {\n      if (selectedRecord[item.dataField] === undefined) {\n        failedControls.push(this.props.intl.formatMessage({\n          id: item.idsName\n        }));\n      } else if (typeof selectedRecord[item.dataField] === \"object\") {\n        //to validate FormSelectSearch component\n        if (selectedRecord[item.dataField].length === 0) {\n          failedControls.push(this.props.intl.formatMessage({\n            id: item.idsName\n          }));\n        }\n      } else if (typeof selectedRecord[item.dataField] === \"string\") {\n        //to handle string field -- added trim function\n        if (selectedRecord[item.dataField].trim().length === 0) {\n          failedControls.push(this.props.intl.formatMessage({\n            id: item.idsName\n          }));\n        }\n      }\n\n      return null;\n    });\n\n    if (failedControls.length === 0) {\n      let nlogintypecode = selectedRecord.nlogintypecode.value;\n\n      if (selectedRecord.nusercode === -1) {\n        nlogintypecode = LOGINTYPE.INTERNAL;\n      }\n\n      const inputParam = {\n        nusermultisitecode: selectedRecord.nusersitecode.value,\n        nusermultirolecode: selectedRecord.nusermultirolecode.value,\n        slanguagetypecode: selectedRecord.nlanguagecode.item.slanguagetypecode,\n        slanguagefilename: selectedRecord.nlanguagecode.item.sfilename,\n        spassword: selectedRecord.spassword,\n        // nusercode: selectedRecord.nusercode,\n        nusercode: selectedRecord.nusercode ? selectedRecord.nusercode : this.props.Login.nusercode,\n        nuserrolecode: selectedRecord.nusermultirolecode.item.nuserrolecode,\n        sloginid: selectedRecord.sloginid,\n        //nlogintypecode: nlogintypecode,\n        nlogintypecode: 1,\n        //url: nlogintypecode === 1 ? \"/login/internallogin\" : \"/login/adsLogin\",\n        url: \"/login/internallogin\",\n        navigation: \"home\"\n      };\n      this.props.clickOnLoginButton(inputParam, this.props.Login.languageList);\n    } else {\n      toast.info(`${this.props.intl.formatMessage({\n        id: \"IDS_ENTER\"\n      })} ${failedControls[0]}`);\n    }\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.navigation === \"home\") {\n      this.props.history.push('/');\n    }\n\n    let selectedRecord = this.state.selectedRecord || {};\n    let createPwdRecord = this.state.createPwdRecord || {};\n    let isStateChanged = false;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      isStateChanged = true;\n    }\n\n    if (this.props.Login.createPwdRecord !== previousProps.Login.createPwdRecord) {\n      createPwdRecord = this.props.Login.createPwdRecord;\n      isStateChanged = true;\n    } //     Added by Ragul.C for Double alert shows for Invaliduser\n\n\n    if (this.props.Login !== previousProps.Login) {\n      selectedRecord[\"nusermultirolecode\"] = this.props.Login.nusermultirolecode;\n      selectedRecord[\"nusersitecode\"] = this.props.Login.nusersitecode;\n      selectedRecord[\"nusercode\"] = this.props.Login.nusercode;\n      selectedRecord[\"nlogintypecode\"] = this.props.Login.nlogintypecode; // selectedRecord[\"nlanguagecode\"]=this.props.Login.nlanguagecode;\n\n      isStateChanged = true;\n    }\n\n    if (isStateChanged) {\n      this.setState({\n        selectedRecord,\n        createPwdRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  clickOnLoginButton,\n  changeLanguage,\n  getLoginDetails,\n  getUserSiteAndRole,\n  updateStore,\n  createPassword,\n  changepassword,\n  getUsersiteRole,\n  checkPassword\n})(injectIntl(SignIn));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/sign-in/sign-in.component.jsx"],"names":["React","connect","injectIntl","FormInput","CustomButtom","changeLanguage","getLoginDetails","getUserSiteAndRole","updateStore","createPassword","changepassword","getUsersiteRole","checkPassword","CreatePassword","clickOnLoginButton","toast","FormSelectSearch","validateLoginId","SlideOutModal","DEFAULT_RETURN","ChangePassword","changePasswordValidation","fnPassMessage","fnValidatePassword","LOGINTYPE","transactionStatus","Form","mapStateToProps","state","Login","SignIn","Component","constructor","props","closeModal","updateInfo","typeName","data","openCPModal","onCreatePassWord","selectedRecord","createPwdRecord","snewpassword","trim","sconfirmpassword","sloginid","warn","intl","formatMessage","id","nusermultirolecode","nusersitecode","nusercode","nlogintypecode","nlanguagecode","setState","returnString","passwordPolicy","inputParam","spassword","value","info","onChangePassword","returnMsg","sOldPassword","soldpassword","isPasswordExpiry","userInfo","slanguagefilename","item","sfilename","suserrolename","label","slanguagetypecode","onSelectChange","ComboVal","fieldName","INTERNAL","Language","nusermultisitecode","nuserrolecode","onChangeLanguage","loginTypes","onLoginEvent","event","keyCode","inputValue","target","show","open","onLoginSubmit","AutoLogin","parseInt","url","navigation","languageList","PasswordPolicy","loginRef","createRef","render","loginTypeList","loginUserSite","count","loginUserRole","onLoginInputChange","onFocusOutEvent","selectInputOnChange","onUsersiteChange","screenName","PassFlag","mandatoryFieldFunction","onInputChange","EXPIRED","componentDidMount","current","focus","passFlag","mandatoryField","loginid","name","stopPropagation","logintype","failedControls","map","dataField","undefined","push","idsName","length","componentDidUpdate","previousProps","history","isStateChanged"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormInput from '../form-input/form-input.component';\r\nimport CustomButtom from '../custom-button/custom-button.component';\r\nimport { changeLanguage, getLoginDetails, getUserSiteAndRole, updateStore, createPassword, changepassword, getUsersiteRole, checkPassword } from '../../actions';\r\nimport CreatePassword from '../../pages/Login/CreatePassWord';\r\nimport { clickOnLoginButton } from '../../actions'\r\nimport { toast } from 'react-toastify';\r\nimport FormSelectSearch from '../form-select-search/form-select-search.component';\r\nimport { validateLoginId } from '../CommonScript';\r\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport ChangePassword from '../../pages/Login/ChangePassWord';\r\nimport { changePasswordValidation, fnPassMessage, fnValidatePassword } from '../../pages/Login/LoginCommonFunction';\r\nimport { LOGINTYPE, transactionStatus } from '../Enumeration'\r\nimport { Form } from 'react-bootstrap';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nclass SignIn extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            PasswordPolicy: {},\r\n            selectedRecord: {},\r\n           \r\n        }\r\n        this.loginRef = React.createRef();\r\n    }\r\n\r\n    render() {\r\n        const { loginTypeList, languageList, loginUserSite, count=0,\r\n             loginUserRole } = this.props.Login;\r\n             \r\n        return (\r\n            <Form ref={this.loginRef}>\r\n                <FormInput\r\n                    name=\"sloginid\"\r\n                    label={this.props.intl.formatMessage({ id: \"IDS_LOGINID\" })}\r\n                    type=\"text\"\r\n                    // placeholder={this.props.intl.formatMessage({ id: \"IDS_LOGINID\" })}\r\n                    required={true}\r\n                    isMandatory={\"*\"}\r\n                    onChange={(event) => this.onLoginInputChange(event)}\r\n                    onBlur={(event) => this.onFocusOutEvent(event)}\r\n                     onKeyUp={this.AutoLogin} \r\n                    value={this.state.selectedRecord.sloginid}\r\n                />\r\n                <FormInput\r\n                    name=\"spassword\"\r\n                    label={this.props.intl.formatMessage({ id: \"IDS_PASSWORD\" })}\r\n                    type=\"password\"\r\n                    required={true}\r\n                    isMandatory={\"*\"}\r\n                    // placeholder={this.props.intl.formatMessage({ id: \"IDS_PASSWORD\" })}\r\n                    onChange={(event) => this.selectInputOnChange(event)}\r\n                    onKeyUp={this.onLoginEvent}\r\n                    value={this.state.selectedRecord.spassword}\r\n                />\r\n                {/* Don't Remove the Commented line commented for NIBSC */}\r\n                <FormSelectSearch\r\n                    name={\"nusersitecode\"}\r\n                    formLabel={this.props.intl.formatMessage({ id: \"IDS_SITE\" })}\r\n                    isSearchable={false}\r\n                    isDisabled={false}\r\n                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    options={loginUserSite || []}\r\n                    optionId='nusersitecode'\r\n                    optionValue='ssitename'\r\n                    value={this.state.selectedRecord.nusersitecode ? this.state.selectedRecord.nusersitecode : \"\"}\r\n                    onChange={value => this.onUsersiteChange(value, \"nusersitecode\")}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormSelectSearch\r\n                    name={\"nusermultirolecode\"}\r\n                    formLabel={this.props.intl.formatMessage({ id: \"IDS_USERROLE\" })}\r\n                    isSearchable={false}\r\n                    isDisabled={false}\r\n                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    options={loginUserRole || []}\r\n                    optionId='nusermultirolecode'\r\n                    optionValue='suserrolename'\r\n                    value={this.state.selectedRecord.nusermultirolecode ? this.state.selectedRecord.nusermultirolecode : \"\"}\r\n                    onChange={value => this.onSelectChange(value, \"nusermultirolecode\")}\r\n                >\r\n                </FormSelectSearch>\r\n                {/* <FormSelectSearch\r\n                    name={\"nlogintypecode\"}\r\n                    formLabel={this.props.intl.formatMessage({ id: \"IDS_LOGINTYPE\" })}\r\n                    isSearchable={false}\r\n                    isDisabled={false}\r\n                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    options={loginTypeList || []}\r\n                    optionId='nlogintypecode'\r\n                    optionValue='sdisplayname'\r\n                    value={this.state.selectedRecord.nlogintypecode ? this.state.selectedRecord.nlogintypecode : \"\"}\r\n                    onChange={value => this.onSelectChange(value, \"nlogintypecode\")}\r\n                >\r\n                </FormSelectSearch> */}\r\n                {/* Don't Remove the Commented line commented for NIBSC */}\r\n                <FormSelectSearch\r\n                    name={\"nlanguagecode\"}\r\n                    formLabel={this.props.intl.formatMessage({ id: \"IDS_LANGUAGE\" })}\r\n                    isSearchable={false}\r\n                    isDisabled={false}\r\n                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    options={languageList || []}\r\n                    optionId='nlanguagecode'\r\n                    optionValue='slanguagename'\r\n                    value={this.state.selectedRecord.nlanguagecode ? this.state.selectedRecord.nlanguagecode : \"\"}\r\n                    onChange={value => this.onChangeLanguage(value, \"nlanguagecode\")}\r\n                >\r\n                </FormSelectSearch>\r\n                <CustomButtom name=\"loginbutton\" label={this.props.intl.formatMessage({id:\"IDS_LOGIN\"})} color=\"primary\" className=\"btn-user btn-primary-blue\"\r\n                    handleClick={() => this.onLoginSubmit()}></CustomButtom>\r\n                { this.props.Login.openCPModal &&\r\n                    this.props.Login.userInfo.nlogintypecode === LOGINTYPE.INTERNAL &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openCPModal}\r\n                        closeModal={this.closeModal}\r\n                        loginoperation={true}\r\n                        inputParam={{}}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.props.Login.PassFlag === 6 ? this.onCreatePassWord : this.onChangePassword}\r\n                        selectedRecord={this.state.createPwdRecord || {}}\r\n                        mandatoryFields={this.mandatoryFieldFunction(this.props.Login.PassFlag)}\r\n                        addComponent={this.props.Login.PassFlag === 6 ?\r\n                            <CreatePassword\r\n                                sloginid={this.state.selectedRecord.sloginid}\r\n                                createPwdRecord={this.state.createPwdRecord}\r\n                                msg={fnPassMessage(this.props.Login.passwordPolicy)}\r\n                                onInputChange={(event) => this.onInputChange(event)}\r\n                            /> : this.props.Login.PassFlag === transactionStatus.EXPIRED ?\r\n                                <ChangePassword\r\n                                    sloginid={this.state.selectedRecord.sloginid}\r\n                                    createPwdRecord={this.state.createPwdRecord}\r\n                                    msg={fnPassMessage(this.props.Login.passwordPolicy)}\r\n                                    onInputChange={(event) => this.onInputChange(event)}\r\n                                /> : \"\"\r\n                        }\r\n                    />}\r\n            </Form>\r\n        );\r\n    }\r\n\r\n\r\n    onUsersiteChange(ComboVal, fieldName) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = ComboVal;\r\n        const inputParam = {\r\n            selectedRecord\r\n        };\r\n        this.props.getUsersiteRole(inputParam);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loginRef.current[0].focus();\r\n        this.props.getLoginDetails();\r\n    }\r\n\r\n    mandatoryFieldFunction(passFlag) {\r\n        let mandatoryField = [];\r\n        if (passFlag === 6) {\r\n            mandatoryField = [\r\n                { \"idsName\": \"IDS_NEWPASSWORD\", \"dataField\": \"snewpassword\", \"mandatory\": false },\r\n                { \"idsName\": \"IDS_CONFIRMPASSWORD\", \"dataField\": \"sconfirmpassword\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n            ]\r\n        } else {\r\n            mandatoryField = [\r\n                { \"idsName\": \"IDS_OLDPASSWORD\", \"dataField\": \"soldpassword\", \"mandatory\": false},\r\n                { \"idsName\": \"IDS_NEWPASSWORD\", \"dataField\": \"snewpassword\", \"mandatory\": false },\r\n                { \"idsName\": \"IDS_CONFIRMPASSWORD\", \"dataField\": \"sconfirmpassword\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n            ]\r\n        }\r\n        return mandatoryField;\r\n    }\r\n\r\n    closeModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openCPModal: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onCreatePassWord = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const createPwdRecord = this.state.createPwdRecord;\r\n        const snewpassword = createPwdRecord.snewpassword.trim();\r\n        const sconfirmpassword = createPwdRecord.sconfirmpassword.trim();\r\n        if (selectedRecord.sloginid === snewpassword) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PASSWORDSHOULDNOTSAMEASLOGINID\" }));\r\n        } else if (sconfirmpassword !== snewpassword) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PASSWORDNOTMATCHED\" }));\r\n        } else {\r\n\r\n// Added by Ragul.C for Double alert shows for Invaliduser\r\n            selectedRecord[\"nusermultirolecode\"]=this.props.Login.nusermultirolecode;\r\n            selectedRecord[\"nusersitecode\"]=this.props.Login.nusersitecode;\r\n            selectedRecord[\"nusercode\"]=this.props.Login.nusercode;\r\n            selectedRecord[\"nlogintypecode\"]=this.props.Login.nlogintypecode;\r\n            selectedRecord[\"nlanguagecode\"]=this.props.Login.nlanguagecode;\r\n            this.setState({ selectedRecord });\r\n// \r\n            const returnString = fnValidatePassword(this.props.Login.passwordPolicy, snewpassword)\r\n            if (returnString === 0) {\r\n                const inputParam = {\r\n                    spassword: snewpassword,\r\n                    nusersitecode: selectedRecord.nusersitecode.value,\r\n                    nusermultirolecode: selectedRecord.nusermultirolecode.value\r\n                };\r\n                this.props.createPassword(inputParam);\r\n            } else {\r\n                toast.info(returnString);\r\n            }\r\n        }\r\n    }\r\n\r\n    onChangePassword = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const createPwdRecord = this.state.createPwdRecord;\r\n        const returnMsg = changePasswordValidation(createPwdRecord, this.props.Login.passwordPolicy, this.state.selectedRecord.sloginid);\r\n        if (returnMsg === 0) {\r\n            const inputParam = {\r\n                spassword: createPwdRecord.snewpassword.trim(),\r\n                sOldPassword: createPwdRecord.soldpassword.trim(),\r\n                nusersitecode: selectedRecord.nusersitecode.value,\r\n                isPasswordExpiry: true,\r\n                userInfo: { ...this.props.Login.userInfo, slanguagefilename: selectedRecord.nlanguagecode.item.sfilename,\r\n                            sloginid:selectedRecord.sloginid, suserrolename:selectedRecord.nusermultirolecode.label },\r\n                slanguagetypecode: selectedRecord.nlanguagecode.item.slanguagetypecode\r\n            };\r\n\r\n            this.props.changepassword(inputParam);\r\n        } else {\r\n            toast.info(returnMsg);\r\n        }\r\n    }\r\n\r\n    onLoginInputChange(event) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const loginid = validateLoginId(event.target.value);\r\n        if (loginid) {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        } else {\r\n            selectedRecord[event.target.name] = this.state.selectedRecord[event.target.name];\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    selectInputOnChange(event) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[event.target.name] = event.target.value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputChange(event) {\r\n        const createPwdRecord = this.state.createPwdRecord || {};\r\n        createPwdRecord[event.target.name] = event.target.value;\r\n        this.setState({ createPwdRecord });\r\n    }\r\n\r\n    onSelectChange = (ComboVal, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = ComboVal;\r\n        if (fieldName === \"nlogintypecode\" && ComboVal.value === LOGINTYPE.INTERNAL\r\n            && selectedRecord.sloginid && selectedRecord.sloginid !== \"\" \r\n            && selectedRecord.nusermultirolecode && selectedRecord.nusermultirolecode !== \"\"\r\n            && selectedRecord.nusersitecode && selectedRecord.nusersitecode !== \"\") {\r\n            const inputParam = {\r\n                sloginid: this.state.selectedRecord.sloginid,\r\n                Language: selectedRecord.nlanguagecode.item,\r\n                nusermultisitecode: selectedRecord.nusersitecode.value,\r\n                nusermultirolecode: selectedRecord.nusermultirolecode.value,\r\n                nuserrolecode: selectedRecord.nusermultirolecode.item.nuserrolecode,\r\n                nlogintypecode: ComboVal.value\r\n            };\r\n            this.props.checkPassword(inputParam, selectedRecord);\r\n        } else {\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onChangeLanguage = (ComboVal, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = ComboVal;\r\n        this.props.changeLanguage(ComboVal.item.slanguagetypecode, selectedRecord,this.props.Login.loginTypes);\r\n    }\r\n\r\n\r\n    onFocusOutEvent(event) {\r\n\r\n        // event.stopPropagation();\r\n      //  Added by Ragul.C for Double alert shows for Invaliduser\r\n        if(event.target.name === \"sloginid\"){ \r\n            \r\n            event.stopPropagation();\r\n        }\r\n        const sloginid = event.target.value;\r\n        if (sloginid !== \"\") {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            const inputParam = {\r\n                sloginid, Language: selectedRecord.nlanguagecode.item,\r\n                 logintype: this.props.Login.loginTypeList\r\n            };\r\n            \r\n            this.props.getUserSiteAndRole(inputParam, selectedRecord);\r\n        }       \r\n    }\r\n\r\n    onLoginEvent = (event) => {\r\n        if (event.keyCode === 13) {\r\n            const inputValue = event.target.value;\r\n            this.setState({\r\n                show: this.props.Login.open\r\n            })\r\n            if (inputValue !== \"\") {\r\n                this.onLoginSubmit(inputValue);\r\n            }\r\n        }\r\n    }\r\n    AutoLogin = (event) => {\r\n        if (event.keyCode === 118) {\r\n            let nlogintypecode = 1;\r\n            const inputParam = {\r\n                nusermultisitecode: parseInt(-1),\r\n                nusermultirolecode: parseInt(-1),\r\n                slanguagetypecode: \"en-US\",\r\n                spassword: \"123\",\r\n                nusercode: -1,\r\n                nlogintypecode: 1,\r\n                nuserrolecode: -1,\r\n                url: nlogintypecode === 1 ? \"/login/internallogin\" : \"/login/adslogin\",\r\n                navigation: \"home\"\r\n            }\r\n            this.setState({\r\n                nusermultisitecode: parseInt(-1),\r\n                nusermultirolecode: parseInt(-1),\r\n                slanguagetypecode: 1,\r\n                spassword: \"123\",\r\n                nusercode: -1,\r\n                nlogintypecode: 1,\r\n                nuserrolecode: -1\r\n            })\r\n            this.props.clickOnLoginButton(inputParam,this.props.Login.languageList);\r\n        }\r\n    }\r\n    onLoginSubmit() {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const mandatoryField = [\r\n            { \"idsName\": \"IDS_LOGINID\", \"dataField\": \"sloginid\", \"mandatory\": false },\r\n            //Don't Remove the Commented line commented for NIBSC\r\n            // { \"idsName\": \"IDS_SITE\", \"dataField\": \"nusersitecode\", \"mandatory\": true },\r\n            { \"idsName\": \"IDS_ROLE\", \"dataField\": \"nusermultirolecode\", \"mandatory\": true },\r\n            { \"idsName\": \"IDS_LOGINTYPE\", \"dataField\": \"nlogintypecode\", \"mandatory\": true },\r\n            //Don't Remove the Commented line commented for NIBSC\r\n            //{ \"idsName\": \"IDS_LANGUAGE\", \"dataField\": \"nlanguagecode\", \"mandatory\": true },\r\n            { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"spassword\", \"mandatory\": true }\r\n        ];\r\n        const failedControls = [];\r\n        mandatoryField.map(item => {\r\n            if (selectedRecord[item.dataField] === undefined) {\r\n                failedControls.push(this.props.intl.formatMessage({ id: item.idsName }));\r\n            } else if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                //to validate FormSelectSearch component\r\n                if (selectedRecord[item.dataField].length === 0) {\r\n                    failedControls.push(this.props.intl.formatMessage({ id: item.idsName }));\r\n                }\r\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                //to handle string field -- added trim function\r\n                if (selectedRecord[item.dataField].trim().length === 0) {\r\n                    failedControls.push(this.props.intl.formatMessage({ id: item.idsName }));\r\n                }\r\n            }\r\n            return null;\r\n        });\r\n        if (failedControls.length === 0) {\r\n            let nlogintypecode = selectedRecord.nlogintypecode.value;\r\n            if (selectedRecord.nusercode === -1) {\r\n                nlogintypecode = LOGINTYPE.INTERNAL;\r\n            }\r\n            const inputParam = {\r\n                nusermultisitecode: selectedRecord.nusersitecode.value,\r\n                nusermultirolecode: selectedRecord.nusermultirolecode.value,\r\n                slanguagetypecode: selectedRecord.nlanguagecode.item.slanguagetypecode,\r\n                slanguagefilename: selectedRecord.nlanguagecode.item.sfilename,\r\n                spassword: selectedRecord.spassword,\r\n                // nusercode: selectedRecord.nusercode,\r\n                nusercode: selectedRecord.nusercode ? selectedRecord.nusercode : this.props.Login.nusercode,\r\n                nuserrolecode: selectedRecord.nusermultirolecode.item.nuserrolecode,\r\n                sloginid: selectedRecord.sloginid,\r\n                //nlogintypecode: nlogintypecode,\r\n                nlogintypecode: 1,\r\n                //url: nlogintypecode === 1 ? \"/login/internallogin\" : \"/login/adsLogin\",\r\n                url: \"/login/internallogin\" ,\r\n                navigation: \"home\",\r\n            }\r\n            this.props.clickOnLoginButton(inputParam,this.props.Login.languageList);\r\n        } else {\r\n            toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${failedControls[0]}`);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.navigation === \"home\") {\r\n            this.props.history.push('/');\r\n        }\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let createPwdRecord = this.state.createPwdRecord || {};\r\n        let isStateChanged = false;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            isStateChanged = true;\r\n        }\r\n\r\n        if (this.props.Login.createPwdRecord !== previousProps.Login.createPwdRecord) {\r\n            createPwdRecord = this.props.Login.createPwdRecord;\r\n            isStateChanged = true;\r\n        }\r\n\r\n   //     Added by Ragul.C for Double alert shows for Invaliduser\r\n   \r\n        if (this.props.Login !== previousProps.Login) {\r\n            selectedRecord[\"nusermultirolecode\"]=this.props.Login.nusermultirolecode;\r\n            selectedRecord[\"nusersitecode\"]=this.props.Login.nusersitecode;\r\n            selectedRecord[\"nusercode\"]=this.props.Login.nusercode;\r\n            selectedRecord[\"nlogintypecode\"]=this.props.Login.nlogintypecode;\r\n            // selectedRecord[\"nlanguagecode\"]=this.props.Login.nlanguagecode;\r\n            isStateChanged = true;\r\n        }\r\n\r\n\r\n        if (isStateChanged) {\r\n            this.setState({ selectedRecord, createPwdRecord });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    clickOnLoginButton, changeLanguage,\r\n    getLoginDetails, getUserSiteAndRole, updateStore, createPassword, changepassword, getUsersiteRole, checkPassword\r\n})(injectIntl(SignIn));\r\n"]},"metadata":{},"sourceType":"module"}