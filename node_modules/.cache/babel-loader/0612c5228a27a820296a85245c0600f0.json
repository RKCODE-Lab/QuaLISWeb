{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { constructOptionList } from '../components/CommonScript';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App'; //export function fetchRecordSafetyMarker (screenName, primaryKeyName, primaryKeyValue, operation, inputParam, userInfo, ncontrolCode, masterData){\n\nexport function fetchRecordSafetyMarker(fetchRecordParam) {\n  return function (dispatch) {\n    const testCategory = rsapi.post(\"testcategory/getTestCategory\", {\n      \"userinfo\": fetchRecordParam.userInfo\n    });\n    let urlArray = [];\n    let nTestCategoryCode = 0;\n    let selectedId = null;\n\n    if (fetchRecordParam.operation === \"update\") {\n      fetchRecordParam.data.map(item => {\n        if (item.nsafetymarkercode === parseInt(fetchRecordParam.primaryKeyValue)) {\n          return nTestCategoryCode = item.ntestcategorycode;\n        }\n\n        return nTestCategoryCode;\n      });\n      const safetyMarker = rsapi.post(fetchRecordParam.inputParam.classUrl + \"/getActiveSafetyMarkerById\", {\n        [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue,\n        \"userinfo\": fetchRecordParam.userInfo\n      });\n      const testMasterData = rsapi.post(\"testmaster/getTestMasterBasedOnTestCategory\", {\n        \"userinfo\": fetchRecordParam.userInfo,\n        \"ntestcategorycode\": parseInt(nTestCategoryCode)\n      });\n      urlArray = [testCategory, testMasterData, safetyMarker];\n      selectedId = fetchRecordParam.primaryKeyValue;\n    } else {\n      urlArray = [testCategory];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(Axios.spread((...response) => {\n      let selectedRecord = {};\n      let ntestcategorycode = [];\n      let ntestcode = []; // const testmasterMap = [];\n\n      let testmasterList = [];\n      const testCategoryMap = constructOptionList(response[0].data || [], \"ntestcategorycode\", \"stestcategoryname\", undefined, undefined, true);\n      const testCategoryList = testCategoryMap.get(\"OptionList\");\n\n      if (fetchRecordParam.operation === \"update\") {\n        selectedRecord = response[2].data;\n        selectedRecord[\"ntestcategorycode\"] = {\n          label: response[2].data[\"stestcategoryname\"],\n          value: response[2].data[\"ntestcategorycode\"]\n        };\n        selectedRecord[\"ntestcode\"] = {\n          label: response[2].data[\"stestname\"],\n          value: response[2].data[\"ntestcode\"]\n        };\n        const testmasterMap = constructOptionList(response[1].data || [], \"ntestcode\", \"stestname\", undefined, undefined, true);\n        testmasterList = testmasterMap.get(\"OptionList\"); // ntestcategorycode.push({\n        //     label: response[2].data[\"stestcategoryname\"],\n        //     value: response[2].data[\"ntestcategorycode\"]\n        // });\n        // ntestcode.push({\n        //     label: response[2].data[\"stestname\"],\n        //     value: response[2].data[\"ntestcode\"]\n        // });\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          testCategory: testCategoryList,\n          testMaster: fetchRecordParam.operation === \"update\" ? testmasterList : [],\n          ntestcategorycode: ntestcategorycode,\n          ntestcode: ntestcode,\n          selectedRecord: fetchRecordParam.operation === \"update\" ? selectedRecord : undefined,\n          operation: fetchRecordParam.operation,\n          screenName: \"IDS_EDQMSAFETYMARKER\",\n          openModal: true,\n          ncontrolCode: fetchRecordParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    })).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getTestMasterDataService(nTestCategoryCode, selectedRecord, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"testmaster/getTestMasterBasedOnTestCategory\", {\n      \"userinfo\": userInfo,\n      \"ntestcategorycode\": parseInt(nTestCategoryCode)\n    }).then(response => {\n      let ntestcode = [];\n      const testmasterMap = constructOptionList(response.data || [], \"ntestcode\", \"stestname\", undefined, undefined, true);\n      const testmasterList = testmasterMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          testMaster: testmasterList,\n          ntestcode: ntestcode,\n          selectedRecord,\n          loading: false\n        }\n      });\n      console.log(\"Checking Here : \", response.data);\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      console.log('error: ', error);\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/actions/EDQMSafetyMarkerAction.js"],"names":["rsapi","DEFAULT_RETURN","Axios","toast","constructOptionList","initRequest","intl","fetchRecordSafetyMarker","fetchRecordParam","dispatch","testCategory","post","userInfo","urlArray","nTestCategoryCode","selectedId","operation","data","map","item","nsafetymarkercode","parseInt","primaryKeyValue","ntestcategorycode","safetyMarker","inputParam","classUrl","primaryKeyField","testMasterData","all","then","spread","response","selectedRecord","ntestcode","testmasterList","testCategoryMap","undefined","testCategoryList","get","label","value","testmasterMap","type","payload","testMaster","screenName","openModal","ncontrolCode","loading","catch","error","status","formatMessage","id","message","warn","getTestMasterDataService","console","log"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport {constructOptionList} from '../components/CommonScript';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\n\r\n\r\n//export function fetchRecordSafetyMarker (screenName, primaryKeyName, primaryKeyValue, operation, inputParam, userInfo, ncontrolCode, masterData){\r\nexport function fetchRecordSafetyMarker(fetchRecordParam) {\r\n    return function (dispatch) {\r\n\r\n        const testCategory = rsapi.post(\"testcategory/getTestCategory\", { \"userinfo\": fetchRecordParam.userInfo });\r\n\r\n        let urlArray = [];\r\n        let nTestCategoryCode = 0;\r\n        let selectedId = null;\r\n        if (fetchRecordParam.operation === \"update\") {\r\n\r\n            fetchRecordParam.data.map(item => {\r\n                if (item.nsafetymarkercode === parseInt(fetchRecordParam.primaryKeyValue)) {\r\n                    return nTestCategoryCode = item.ntestcategorycode;\r\n                }\r\n                return nTestCategoryCode;\r\n            })\r\n            const safetyMarker = rsapi.post(fetchRecordParam.inputParam.classUrl + \"/getActiveSafetyMarkerById\", { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo });\r\n            const testMasterData = rsapi.post(\"testmaster/getTestMasterBasedOnTestCategory\", { \"userinfo\": fetchRecordParam.userInfo, \"ntestcategorycode\": parseInt(nTestCategoryCode) });\r\n\r\n            urlArray = [testCategory, testMasterData, safetyMarker];\r\n            selectedId = fetchRecordParam.primaryKeyValue;\r\n        }\r\n        else {\r\n            urlArray = [testCategory];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {\r\n\r\n                let selectedRecord = {};\r\n                let ntestcategorycode = [];\r\n                let ntestcode = [];\r\n                // const testmasterMap = [];\r\n                let testmasterList = [];\r\n\r\n                const testCategoryMap = constructOptionList(response[0].data || [], \"ntestcategorycode\",\r\n                    \"stestcategoryname\", undefined, undefined, true);\r\n\r\n                const testCategoryList = testCategoryMap.get(\"OptionList\");\r\n\r\n                if (fetchRecordParam.operation === \"update\") {\r\n\r\n                    selectedRecord = response[2].data;\r\n                    selectedRecord[\"ntestcategorycode\"] = {\r\n                        label: response[2].data[\"stestcategoryname\"],\r\n                        value: response[2].data[\"ntestcategorycode\"]\r\n                    };\r\n                    selectedRecord[\"ntestcode\"] = {\r\n                        label: response[2].data[\"stestname\"],\r\n                        value: response[2].data[\"ntestcode\"]\r\n                    };\r\n\r\n                    const testmasterMap = constructOptionList(response[1].data || [], \"ntestcode\",\r\n                        \"stestname\", undefined, undefined, true);\r\n\r\n                    testmasterList = testmasterMap.get(\"OptionList\");\r\n                    // ntestcategorycode.push({\r\n                    //     label: response[2].data[\"stestcategoryname\"],\r\n                    //     value: response[2].data[\"ntestcategorycode\"]\r\n                    // });\r\n\r\n                    // ntestcode.push({\r\n                    //     label: response[2].data[\"stestname\"],\r\n                    //     value: response[2].data[\"ntestcode\"]\r\n                    // });\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        testCategory: testCategoryList, testMaster: fetchRecordParam.operation === \"update\" ? testmasterList : [],\r\n                        ntestcategorycode: ntestcategorycode, ntestcode: ntestcode,\r\n                        selectedRecord: fetchRecordParam.operation === \"update\" ? selectedRecord : undefined, operation: fetchRecordParam.operation,\r\n                        screenName: \"IDS_EDQMSAFETYMARKER\",\r\n                        openModal: true, ncontrolCode: fetchRecordParam.ncontrolCode,\r\n                        loading: false, selectedId\r\n                    }\r\n                });\r\n            }))\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestMasterDataService(nTestCategoryCode, selectedRecord, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/getTestMasterBasedOnTestCategory\", { \"userinfo\": userInfo, \"ntestcategorycode\": parseInt(nTestCategoryCode) })\r\n            .then(response => {\r\n\r\n                let ntestcode = [];\r\n\r\n               const testmasterMap = constructOptionList(response.data || [], \"ntestcode\",\r\n                \"stestname\", undefined, undefined, true);\r\n\r\n                const testmasterList = testmasterMap.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        testMaster: testmasterList, ntestcode: ntestcode, selectedRecord, loading: false\r\n                    }\r\n                });\r\n                console.log(\"Checking Here : \", response.data);\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                console.log('error: ', error);\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}