{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{toast}from'react-toastify';import{initRequest}from'./LoginAction';import{constructOptionList,replaceUpdatedObject,sortData,fillRecordBasedOnCheckBoxSelection,getSameRecordFromTwoArrays,getRecordBasedOnPrimaryKeyName,filterRecordBasedOnPrimaryKeyName,reArrangeArrays,rearrangeDateFormat}from'../components/CommonScript';import{postCRUDOrganiseTransSearch}from'./ServiceAction';import Axios from'axios';import{checkBoxOperation,transactionStatus}from'../components/Enumeration';import{intl}from'../components/App';export function getRegTypeJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getRegistrationTypeBySampleType\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultSampleTypeValue:inputData.defaultSampleTypeValue,realDesignTemplateMappingValue:inputData.realDesignTemplateMappingValue,realDynamicDesignMappingList:inputData.realDynamicDesignMappingList}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getRegSubTypeJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultRegTypeValue:inputData.defaultRegTypeValue,realDesignTemplateMappingValue:inputData.realDesignTemplateMappingValue,realDynamicDesignMappingList:inputData.realDynamicDesignMappingList}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getAppConfigVersionJobAllocation(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\",inputParam.inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputParam.masterData),responseData),{},{defaultRegSubTypeValue:inputParam.masterData.defaultRegSubTypeValue,RegSubTypeValue:inputParam.masterData.realRegSubTypeValue,realDesignTemplateMappingValue:inputParam.inputData.realDesignTemplateMappingValue,realDynamicDesignMappingList:inputParam.inputData.realDynamicDesignMappingList}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getSectionJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getTestComboBySection\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultUserSectionValue:inputData.masterData.defaultUserSectionValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getFilterStatusJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getTestComboBySection\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultFilterStatusValue:inputData.masterData.defaultFilterStatusValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getFilterStatusSectionJobAllocation(inputData){return function(dispatch){var testStatusService=rsapi.post(\"joballocation/getFilterStatusByApproveVersion\",inputData);var sectionService=rsapi.post(\"joballocation/getSectionByApproveVersion\",inputData);var urlArray=[];urlArray=[testStatusService,sectionService];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultApprovalVersionValue:inputData.masterData.defaultApprovalVersionValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getDesignTemplateJobAllocation(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getDesignTemplateByApprovalConfigVersion\",inputParam).then(function(response){if(response.data[\"Success\"]){toast.warn(response.data.Success);}var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputParam.masterData),responseData),{},{defaultApprovalVersionValue:inputParam.masterData.defaultApprovalVersionValue,ApprovalVersionValue:inputParam.masterData.realApprovalVersionValue,realDesignTemplateMappingValue:inputParam.realDesignTemplateMappingValue,realDynamicDesignMappingList:inputParam.realDynamicDesignMappingList}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getTestStatusJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getFilterStatusByApproveVersion\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{RegSubTypeValue:inputData.RegSubTypeValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getJobAllcationFilterSubmit(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getJobAllocationDetails\",inputParam.inputData).then(function(response){var responseData=_objectSpread({},response.data);var masterData=_objectSpread(_objectSpread({},inputParam.masterData),responseData);if(inputParam.searchSampleRef!==undefined&&inputParam.searchSampleRef.current!==null){inputParam.searchSampleRef.current.value=\"\";masterData['searchedSample']=undefined;}if(inputParam.searchSubSampleRef!==undefined&&inputParam.searchSubSampleRef.current!==null){inputParam.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputParam.searchTestRef!==undefined&&inputParam.searchTestRef.current!==null){inputParam.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false,showTest:inputParam.inputData.showTest,activeTestTab:inputParam.inputData.activeTestTab,showFilter:false,sampleskip:0,sampletake:inputParam.sampletake,subsampleskip:0,subsampletake:inputParam.subsampletake,testskip:0,testtake:inputParam.testtake,documentDataState:_objectSpread(_objectSpread({},inputParam.documentDataState),{},{sort:undefined,filter:undefined}),testCommentDataState:_objectSpread(_objectSpread({},inputParam.testCommentDataState),{},{sort:undefined,filter:undefined})}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function ReceiveinLabStatusWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/CreateReceiveinLab\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_SAMPLE\"],inputParam.inputData.masterData.JA_SAMPLE,\"nregistrationsectioncode\");replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"],inputParam.inputData.masterData.JA_SUBSAMPLE,\"ntransactionsamplecode\");replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_SAMPLE\"];delete response.data[\"JA_SUBSAMPLE\"];delete response.data[\"JA_TEST\"];var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedSample:replaceUpdatedObject(response.data[\"JASelectedSample\"],inputParam.inputData.masterData.JASelectedSample,\"nregistrationsectioncode\"),JASelectedSubSample:replaceUpdatedObject(response.data[\"JASelectedSubSample\"],inputParam.inputData.masterData.JASelectedSubSample,\"ntransactionsamplecode\"),JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\")});var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){//toast.error(error.message); \ndispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getAllottedTestWise(inputParam,type){return function(dispatch){var urlArray=[];var AllotDetails=rsapi.post(\"joballocation/getAllotDetails\",_objectSpread(_objectSpread({},inputParam.inputData),{},{calenderViewAfterAllot:type}));if(inputParam.inputData.nselecttype===1){var RescheduleEditById=rsapi.post(\"joballocation/getRescheduleEdit\",_objectSpread({\"npreregno\":inputParam.inputData.npreregno,\"ntransactionsamplecode\":inputParam.inputData.ntransactionsamplecode,\"transactiontestcode\":inputParam.inputData.transactiontestcode},inputParam.inputData));urlArray=[AllotDetails,RescheduleEditById];}else{if(type===2){var calenderProperties=rsapi.post(\"joballocation/calenderProperties\",inputParam.inputData);urlArray=[AllotDetails,calenderProperties];}else{urlArray=[AllotDetails];}}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord={};var TechniqueMap=constructOptionList(response[0].data.Technique||[],\"ntechniquecode\",\"stechniquename\",undefined,undefined,false);var Technique=TechniqueMap.get(\"OptionList\");var UsersPeriodMap=constructOptionList(response[0].data.Period||[],\"nuserperiodcode\",\"speriodname\",undefined,undefined,false);var UsersPeriod=UsersPeriodMap.get(\"OptionList\");var InstrumentCategoryMap=constructOptionList(response[0].data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,false);var InstrumentCategory=InstrumentCategoryMap.get(\"OptionList\");var InstrumentNameMap=constructOptionList(response[0].data.InstrumentName||[],\"ninstrumentnamecode\",\"sinstrumentname\",undefined,undefined,false);var InstrumentName=InstrumentNameMap.get(\"OptionList\");var InstrumentIdMap=constructOptionList(response[0].data.InstrumentId||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,false);var InstrumentId=InstrumentIdMap.get(\"OptionList\");var InstrumentPeriodMap=constructOptionList(response[0].data.Period||[],\"ninstrumentperiodcode\",\"speriodname\",undefined,undefined,false);var InstrumentPeriod=InstrumentPeriodMap.get(\"OptionList\");var SectionPeriodMap=constructOptionList(response[0].data.RescheduleSection||[],\"nsectioncode\",\"ssectionname\",undefined,undefined,false);var RescheduleSection=SectionPeriodMap.get(\"OptionList\");var currentTime=rearrangeDateFormat(inputParam.inputData.userinfo,response[0].data.CurrentTime.body);var UsersMap=[];var Users=[];if(inputParam.inputData.nselecttype==1&&response[0]&&response[0].data&&response[0].data.Users===undefined){UsersMap=constructOptionList(response[1].data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);Users=UsersMap.get(\"OptionList\");}else{UsersMap=constructOptionList(response[0].data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);Users=UsersMap.get(\"OptionList\");}if(inputParam.inputData.nselecttype===1){var editData=response[1].data.JobAllocation;selectedRecord[\"ninstrumentcatcode\"]={\"value\":editData[\"ninstrumentcategorycode\"],\"label\":editData[\"sinstrumentcatname\"]};editData[\"ninstrumentcategorycode\"]!==-1?selectedRecord[\"ninstrumentnamecode\"]={\"value\":editData[\"ninstrumentnamecode\"],\"label\":editData[\"sinstrumentname\"]}:selectedRecord[\"ninstrumentnamecode\"]=\"\";editData[\"ninstrumentcategorycode\"]!==-1?selectedRecord[\"ninstrumentcode\"]={\"value\":editData[\"ninstrumentcode\"],\"label\":editData[\"sinstrumentid\"]}:selectedRecord[\"ninstrumentcode\"]=\"\";editData[\"ninstrumentcategorycode\"]!==-1?selectedRecord[\"ninstrumentperiodcode\"]={\"value\":editData[\"ninstrumentperiodcode\"],\"label\":editData[\"sinstrumentperiodname\"]}:selectedRecord[\"ninstrumentperiodcode\"]=\"\";editData[\"ninstrumentcategorycode\"]!==-1?selectedRecord[\"dinstblockfromdatetime\"]=rearrangeDateFormat(inputParam.inputData.userinfo,editData.instrumentstartdate):selectedRecord[\"dinstblockfromdatetime\"]=\"\";editData[\"ninstrumentcategorycode\"]!==-1?selectedRecord[\"sinstrumentholdduration\"]=editData.sinstrumentholdduration:selectedRecord[\"sinstrumentholdduration\"]=\"\";selectedRecord[\"scomments\"]=editData.comments;selectedRecord[\"suserholdduration\"]=editData.suserholdduration;selectedRecord[\"duserblockfromdatetime\"]=rearrangeDateFormat(inputParam.inputData.userinfo,editData.userstartdate);editData[\"ntechniquecode\"]!==-1?selectedRecord[\"ntechniquecode\"]={\"value\":editData[\"ntechniquecode\"],\"label\":editData[\"stechniquename\"]}:selectedRecord[\"ntechniquecode\"]=\"\";selectedRecord[\"nusercode\"]={\"value\":editData[\"nusercode\"],\"label\":editData[\"susername\"]};selectedRecord[\"nuserperiodcode\"]={\"value\":editData[\"nuserperiodcode\"],\"label\":editData[\"suserperiodname\"]};selectedRecord[\"nsectioncode\"]={\"value\":editData[\"nsectioncode\"],\"label\":editData[\"ssectionname\"]};selectedRecord=_objectSpread({},selectedRecord);}else if(type!==2){selectedRecord[\"scomments\"]=\"\";selectedRecord[\"suserholdduration\"]=\"\";selectedRecord[\"sinstrumentholdduration\"]=\"\";selectedRecord[\"duserblockfromdatetime\"]=new Date();}var calenderProperties=[];var calenderColor=[];if(type===2){calenderProperties=response[1].data.calenderSettings;calenderColor=response[1].data.calenderColor;}dispatch({type:DEFAULT_RETURN,payload:{Technique:Technique,Users:Users,UsersPeriod:UsersPeriod,InstrumentCategory:InstrumentCategory,InstrumentName:InstrumentName,InstrumentId:InstrumentId,InstrumentPeriod:InstrumentPeriod,currentTime:currentTime,selectedRecord:selectedRecord,openModal:true,isOpen:true,operation:inputParam.inputData.operation,screenName:inputParam.inputData.screenName,ncontrolCode:inputParam.inputData.ncontrolcode,loading:false,calenderProperties:calenderProperties,calenderColor:calenderColor,RescheduleSection:RescheduleSection}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getAllotAnotherUserTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getAllotAnotherUserDetails\",inputParam.inputData).then(function(response){var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);var UsersPeriodMap=constructOptionList(response.data.Period||[],\"nuserperiodcode\",\"speriodname\",undefined,undefined,false);var Users=UsersMap.get(\"OptionList\");var UsersPeriod=UsersPeriodMap.get(\"OptionList\");var currentTime=rearrangeDateFormat(inputParam.inputData.userinfo,response.data.CurrentTime.body);var Technique=response.data.Technique&&response.data.Technique[0].stechniquename;var TechniqueCode=response.data.Technique&&response.data.Technique[0].ntechniquecode;var selectedRecord={};selectedRecord[\"scomments\"]=\"\";selectedRecord[\"suserholdduration\"]=\"\";selectedRecord[\"sinstrumentholdduration\"]=\"\";selectedRecord[\"duserblockfromdatetime\"]=new Date();dispatch({type:DEFAULT_RETURN,payload:{Technique:Technique,TechniqueCode:TechniqueCode,Users:Users,UsersPeriod:UsersPeriod,currentTime:currentTime,selectedRecord:selectedRecord,isOpen:true,operation:inputParam.inputData.operation,screenName:inputParam.inputData.screenName,openModal:true,ncontrolCode:inputParam.inputData.ncontrolcode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getInstrumentName(ninstrumentcatcode,ncalibrationreq,userInfo,selectedRecord){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getInstrumentNameBasedCategory\",{\"ninstrumentcatcode\":ninstrumentcatcode,\"ncalibrationreq\":ncalibrationreq,\"userinfo\":userInfo}).then(function(response){var InstrumentName=[];var InstrumentNameMap=constructOptionList(response.data.InstrumentName||[],\"ninstrumentnamecode\",\"sinstrumentname\",undefined,undefined,false);InstrumentName=InstrumentNameMap.get(\"OptionList\");selectedRecord[\"ninstrumentnamecode\"]=\"\";if(ninstrumentcatcode!==transactionStatus.NA){selectedRecord[\"dinstblockfromdatetime\"]=new Date();}else{selectedRecord[\"dinstblockfromdatetime\"]=\"\";}dispatch({type:DEFAULT_RETURN,payload:{InstrumentName:InstrumentName,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getInstrumentId(ninstrumentcatcode,ninstrumentnamecode,ncalibrationreq,userInfo,selectedRecord){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getInstrumentIdBasedCategory\",{\"ninstrumentcatcode\":ninstrumentcatcode,\"ninstrumentnamecode\":ninstrumentnamecode,\"ncalibrationreq\":ncalibrationreq,\"userinfo\":userInfo}).then(function(response){var InstrumentId=[];var InstrumentIdMap=constructOptionList(response.data.InstrumentId||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,false);InstrumentId=InstrumentIdMap.get(\"OptionList\");selectedRecord[\"ninstrumentcode\"]=\"\";// if (ninstrumentcatcode !== transactionStatus.NA) {\n//     selectedRecord[\"dinstblockfromdatetime\"] = new Date();\n// } else {\n//     selectedRecord[\"dinstblockfromdatetime\"] = \"\";\n// }\ndispatch({type:DEFAULT_RETURN,payload:{InstrumentId:InstrumentId,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getUsers(ntechniquecode,JASelectedTest,userInfo,selectedRecord,masterData){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getUsersBasedTechnique\",{\"ntechniquecode\":ntechniquecode,//  \"ssectioncode\": JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample => sample.nsectioncode).join(\",\") : \"\",\n\"ssectioncode\":selectedRecord[\"nsectioncode\"]?selectedRecord[\"nsectioncode\"].value.toString():JASelectedTest.JASelectedSample?JASelectedTest.JASelectedSample.map(function(sample){return sample.nsectioncode;}).join(\",\"):\"\",\"nregtypecode\":JASelectedTest.realRegTypeValue.nregtypecode,\"nregsubtypecode\":JASelectedTest.realRegSubTypeValue.nregsubtypecode,\"userinfo\":userInfo}).then(function(response){var Users=[];var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);Users=UsersMap.get(\"OptionList\");selectedRecord[\"nusercode\"]=\"\";dispatch({type:DEFAULT_RETURN,payload:{// masterData:{...masterData},\nUsers:Users,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function ViewAnalystCalendar(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/viewAnalystCalendar\",inputParam.inputData).then(function(response){var masterData=_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data);var Users=[];var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);Users=UsersMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{Users:Users,screenName:inputParam.inputData.screenName,loading:false,openModal:true,masterData:masterData}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function CancelTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/cancelTest\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_TEST\"];fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData,response.data,[\"TestView\"],3,\"ntransactiontestcode\",[]);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\"),TestView:inputParam.inputData.masterData.TestView});var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function AllotJobAction(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/AllotJobCreate\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_TEST\"];var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\"),TestView:replaceUpdatedObject(response.data[\"TestView\"],inputParam.inputData.masterData.TestView,\"ntransactiontestcode\")});var respObject=_objectSpread(_objectSpread({},inputParam.inputData),{},{masterData:masterData,loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function AllotAnotherUserAction(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/AllotAnotherUserCreate\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_TEST\"];fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData,response.data,[\"TestView\"],3,\"ntransactiontestcode\",[]);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\"),TestView:inputParam.inputData.masterData.TestView});var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function RescheduleJobAction(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/RescheduleCreate\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");if(parseInt(inputParam.inputData.nsectioncode)===parseInt(inputParam.inputData.nfiltersectioncode)){delete response.data[\"JA_TEST\"];}fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData,response.data,[\"TestView\"],3,\"ntransactiontestcode\",[]);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{TestView:inputParam.inputData.masterData.TestView});var UserSection=[];var UserSectionMap=constructOptionList(response.data.UserSection||[],\"nsectioncode\",\"ssectionname\",undefined,undefined,false);UserSection=UserSectionMap.get(\"OptionList\");if(parseInt(inputParam.inputData.nsectioncode)===parseInt(inputParam.inputData.nfiltersectioncode)){masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\")});}var respObject=_objectSpread(_objectSpread({UserSection:UserSection},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:masterData});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function getJobAllocationSubSampleDetail(inputData,isServiceRequired){return function(dispatch){//console.log(\"response :\");\nvar arr=[];// const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\n// (item,index) => \n// item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\n// );\ninputData.JASelectedSample&&inputData.JASelectedSample.map(function(item){if(!arr.includes(item.nsectioncode)){arr.push(item.nsectioncode);}});var inputParamData={nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.JASelectedSample&&inputData.JASelectedSample.map(function(sample){return sample.npreregno;}).join(\",\"),nregistrationsectioncode:inputData.nregistrationsectioncode,// ssectioncode : inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\nnsectioncode:arr.map(function(item){return item;}).join(\",\"),ntransactionstatus:String(inputData.ntransactionstatus),ntransactiontestcode:\"0\",userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,napprovalversioncode:inputData.napprovalversioncode,fromdate:inputData.fromdate,todate:inputData.todate,activeTestTab:inputData.activeTestTab,activeSampleTab:inputData.activeSampleTab,activeSubSampleTab:inputData.activeSubSampleTab,nneedsubsample:inputData.masterData.realRegSubTypeValue.nneedsubsample,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,nneedtemplatebasedflow:inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,checkBoxOperation:inputData.checkBoxOperation};var activeName=\"\";var dataStateName=\"\";dispatch(initRequest(true));if(isServiceRequired){rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\",_objectSpread(_objectSpread({},inputParamData),{},{checkBoxOperation:inputData.checkBoxOperation})).then(function(response){if(response.data['JA_TEST'].length===0){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.warn(intl.formatMessage({id:\"IDS_TESTISNOTAVAILABLE\"}));}else{var responseData=_objectSpread({},response.data);responseData=sortData(responseData,'descending','ntransactionsamplecode');// sortData(response.data);\nvar oldSelectedTest=inputData.masterData.JASelectedTest;var oldSelectedSubSample=inputData.masterData.JASelectedSubSample;fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"nregistrationsectioncode\",inputData.removeElementFromArray);// inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;  \n// inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;\n// inputData.masterData.JA_TEST = response.data.JA_TEST;  \n// inputData.masterData.JASelectedTest=response.data.JASelectedTest;\n// inputData.masterData.RegistrationAttachment =response.data.RegistrationAttachment;\n// inputData.masterData.RegistrationSampleAttachment =response.data.RegistrationSampleAttachment;\n// inputData.masterData.RegistrationComment =response.data.RegistrationComment;\n// inputData.masterData.RegistrationSampleComment =response.data.RegistrationSampleComment;\nvar masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSample:inputData.JASelectedSample});if(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}var _inputData=inputData,testskip=_inputData.testskip,testtake=_inputData.testtake,subsampleskip=_inputData.subsampleskip,subsampletake=_inputData.subsampletake,sampleskip=_inputData.sampleskip,sampletake=_inputData.sampletake;// let bool = false;\n// Commented bool value because no need to check bool condition to update skipInfo value.\nvar skipInfo={};// if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\ntestskip=0;//     bool = true\n// }\nsubsampleskip=0;// bool = true\n// if (bool) {\nskipInfo={testskip:testskip,testtake:testtake,subsampleskip:subsampleskip,subsampletake:subsampletake,sampleskip:sampleskip,sampletake:sampletake};// }\nvar RegistrationTestAttachment=[];var RegistrationTestComment=[];var TestView=[];var RegistrationComment=[];var RegistrationSampleAttachment=[];//if (inputData.checkBoxOperation === 1) {\nif(inputData.checkBoxOperation===checkBoxOperation.MULTISELECT){var wholeSubSampleList=masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample=oldSelectedSubSample.filter(function(item){return wholeSubSampleList.includes(item.ntransactionsamplecode);});//ALPD-3398\n// oldSelectedSubSample.forEach((subsample, index) => {\n//     if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n//         oldSelectedSubSample.splice(index, 1)\n//     }\n// })\nif(oldSelectedSubSample.length>0){masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedSubSample:oldSelectedSubSample});}var wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest=oldSelectedTest.filter(function(item){return wholeTestList.includes(item.ntransactiontestcode);});//ALPD-3398\n// oldSelectedTest.map((test, index) => {\n//     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//         oldSelectedTest.splice(index, 1)\n//     }\n//     return null;\n// })\nvar keepOld=false;var ntransactiontestcode;var npreregno;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.JASelectedTest[0].ntransactiontestcode;npreregno=masterData.JASelectedSample[0].npreregno;}switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;default:RegistrationComment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"npreregno\");activeName=\"RegistrationTestAttachment\";dataStateName=\" testAttachmentDataState\";break;}// } else if (inputData.checkBoxOperation === 5) {\n}else if(inputData.checkBoxOperation===checkBoxOperation.QUICKSELECTSTATUS){var list=[];var dbData=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTVIEW\":dbData=response.data.TestView||[];list=[].concat(_toConsumableArray(inputData.masterData.TestView),_toConsumableArray(dbData));TestView=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_SAMPLECOMMENTS\":dbData=response.data.RegistrationComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationComment),_toConsumableArray(dbData));RegistrationComment=getRecordBasedOnPrimaryKeyName(list,inputData.JASelectedSample.length>0?inputData.JASelectedSample[0].npreregno:\"\",\"npreregno\");break;default:dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}//else if (inputData.checkBoxOperation === 7) {\nelse if(inputData.checkBoxOperation===checkBoxOperation.QUICKSELECTALL){var _list=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":_list=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":_list=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":_list=response.data.TestView?sortData(response.data.TestView,'descending','ntransactiontestcode'):[];TestView=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;case\"IDS_SAMPLECOMMENTS\":RegistrationComment=response.data.RegistrationComment?_toConsumableArray(response.data.RegistrationComment):[];activeName=\"RegistrationComment\";dataStateName=\"sampleCommentsDataState\";break;default:_list=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}}else{var _list2=[];if(!inputData.masterData.realRegSubTypeValue.nneedsubsample){var _wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest=oldSelectedTest.filter(function(item){return _wholeTestList.includes(item.ntransactiontestcode);});//ALPD-3398\n// oldSelectedTest.map((test, index) => {\n//     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//         oldSelectedTest.splice(index, 1)\n//     }\n//     return null;\n// })\nvar _keepOld=false;var _ntransactiontestcode;if(oldSelectedTest.length>0){_keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{_ntransactiontestcode=masterData.JASelectedTest[0].ntransactiontestcode;}}switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":_list2=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":_list2=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":_list2=response.data.TestView?sortData(response.data.TestView,'descending','ntransactiontestcode'):[];TestView=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;case\"IDS_SAMPLECOMMENTS\":_list2=response.data.RegistrationComment?sortData(response.data.RegistrationComment,'descending','nregcommentcode'):[];RegistrationComment=getRecordBasedOnPrimaryKeyName(_list2,inputData.JASelectedSample.length>0?inputData.JASelectedSample[0].npreregno:\"\",\"npreregno\");activeName=\"RegistrationComment\";dataStateName=\"sampleChangeDataState\";break;case\"IDS_SUBSAMPLEATTACHMENTS\":_list2=response.data.RegistrationSampleAttachment?sortData(response.data.RegistrationSampleAttachment,'descending','nsampleattachmentcode'):[];RegistrationSampleAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JASelectedSubSample.length>0?inputData.masterData.JASelectedSubSample[0].ntransactionsamplecode:\"\",\"ntransactionsamplecode\");activeName=\"RegistrationSampleAttachment\";dataStateName=\"subsampleAttachmentDataState\";break;default:_list2=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView,RegistrationComment:RegistrationComment,RegistrationSampleAttachment:RegistrationSampleAttachment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({masterData:masterData,secondarySelection:inputData[\"secondarySelection\"],loading:false},skipInfo),{},{activeTabIndex:inputData.activeTabIndex})});}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var oldSelectedTest=inputData.masterData.JASelectedTest;var oldSelectedSubSample=inputData.masterData.JASelectedSubSample;var _inputData2=inputData,subsampletake=_inputData2.subsampletake,subsampleskip=_inputData2.subsampleskip;var skipInfo={};var TestSelected=[];var subSampleSelected=[];if(inputData[\"statusNone\"]){TestSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].nregistrationsectioncode,\"nregistrationsectioncode\");subSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample,inputData.removeElementFromArray[0].nregistrationsectioncode,\"nregistrationsectioncode\");}else{TestSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].nregistrationsectioncode,\"nregistrationsectioncode\");subSampleSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample,inputData.removeElementFromArray[0].nregistrationsectioncode,\"nregistrationsectioncode\");}var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.JASelectedSample,inputData.childTabsKey,inputData.checkBoxOperation,\"nregistrationsectioncode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode.toString():\"\";var JASelectedSample=inputData.JASelectedSample;var JASelectedTest=inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[];var JASelectedSubSample=inputData.masterData.JA_SUBSAMPLE;if(inputData.masterData.realRegSubTypeValue.nneedsubsample){var filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.JA_SUBSAMPLE,\"ntransactionsamplecode\");JASelectedSubSample=filterSelectedSubSample.length>0?filterSelectedSubSample:[inputData.masterData.JA_SUBSAMPLE[0]];if(inputData.masterData.JA_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;skipInfo={subsampletake:subsampletake,subsampleskip:subsampleskip};}}var ntransactionsamplecode=JASelectedSubSample.map(function(subsample){return subsample.ntransactionsamplecode;}).join(',');var npreregno=inputData.JASelectedSample&&inputData.JASelectedSample.map(function(sample){return sample.npreregno;}).join(',');var nsectioncode=inputData.JASelectedSample&&inputData.JASelectedSample.map(function(sample){return sample.nsectioncode;}).join(',');var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedSample:JASelectedSample,JASelectedSubSample:JASelectedSubSample,JASelectedTest:JASelectedTest});inputData=_objectSpread(_objectSpread({},inputData),{},{ntransactiontestcode:ntransactiontestcode,npreregno:npreregno,nsectioncode:nsectioncode,ntransactionsamplecode:ntransactionsamplecode,JASelectedSample:JASelectedSample,JASelectedTest:JASelectedTest,JASelectedSubSample:JASelectedSubSample,//  checkBoxOperation: 3,\ncheckBoxOperation:checkBoxOperation.SINGLESELECT,activeTestTab:inputData.activeTestTab,masterData:masterData});if(JASelectedTest.length>0){inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"RegistrationTestAttachment\",\"RegistrationTestComment\",\"TestView\"]});dispatch(getTestChildTabDetailJobAllocation(inputData,true));}else{inputData=_objectSpread(_objectSpread({},inputData),{},{masterData:masterData,childTabsKey:[\"JA_TEST\"]});dispatch(getJobAllocationTestDetail(inputData,true));}}else{var _masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:TestSelected?TestSelected:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSample:inputData.JASelectedSample,JASelectedSubSample:subSampleSelected?subSampleSelected:inputData.masterData.JA_SUBSAMPLE.length>0?[inputData.masterData.JA_SUBSAMPLE[0]]:[]});var subsamplecheck=true;if(inputData.masterData.realRegSubTypeValue.nneedsubsample){var SubSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");if(SubSampleSelected.length>0){var _filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.JA_SUBSAMPLE,\"ntransactionsamplecode\");if(_filterSelectedSubSample.length===0){var wholeSubSample=_masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample=oldSelectedSubSample.filter(function(item){return wholeSubSample.includes(item.ntransactionsamplecode);});//ALPD-3398\n// oldSelectedSubSample.forEach((test, index) => {\n//     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n//         oldSelectedSubSample.splice(index, 1)\n//     }\n//     return null;\n// })\nif(oldSelectedSubSample.length===0&&wholeSubSample.length>0&&_masterData.selectedTest.length===0){var selectedSubSample1=[inputData.masterData.JA_SUBSAMPLE[0]];_masterData=_objectSpread(_objectSpread({},_masterData),{},{JASelectedSubSample:selectedSubSample1,selectedTest:[]});inputData=_objectSpread(_objectSpread({},inputData),_masterData);inputData[\"npreregno\"]=selectedSubSample1.map(function(x){return x.npreregno;}).join(\",\");inputData[\"ntransactionsamplecode\"]=selectedSubSample1.map(function(x){return x.ntransactionsamplecode;}).join(\",\");//inputData[\"checkBoxOperation\"] = 3\ninputData[\" checkBoxOperation\"]=checkBoxOperation.SINGLESELECT;inputData[\"childTabsKey\"]=[\"JA_TEST\"];subsamplecheck=false;dispatch(getJobAllocationTestDetail(inputData,true));}}else{oldSelectedSubSample=_filterSelectedSubSample;}}else{var _wholeSubSample=_masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample=oldSelectedSubSample.filter(function(item){return _wholeSubSample.includes(item.ntransactionsamplecode);});//ALPD-3398\n// oldSelectedSubSample.forEach((test, index) => {\n//     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n//         oldSelectedSubSample.splice(index, 1)\n//     }\n//     return null;\n// })\n}if(subsamplecheck){_masterData=_objectSpread(_objectSpread({},_masterData),{},{JASelectedSubSample:oldSelectedSubSample});}if(inputData.masterData.JA_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;_skipInfo={subsampleskip:subsampleskip,subsampletake:subsampletake};}}var wholeTestList=_masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest=oldSelectedTest.filter(function(item){return wholeTestList.includes(item.ntransactiontestcode);});//ALPD-3398         \n// oldSelectedTest.map((test, index) => {\n//     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//         oldSelectedTest.splice(index, 1)\n//     }\n//     return null;\n// })\nvar keepOld=false;var _ntransactiontestcode2;if(oldSelectedTest.length>0){keepOld=true;_masterData=_objectSpread(_objectSpread({},_masterData),{},{JASelectedTest:oldSelectedTest});}else{_ntransactiontestcode2=inputData.masterData.JA_TEST[0].ntransactiontestcode;}var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView||[],_ntransactiontestcode2,\"ntransactiontestcode\");var _inputData3=inputData,testskip=_inputData3.testskip,testtake=_inputData3.testtake;var bool=false;var _skipInfo={};if(inputData.masterData.JA_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){_skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},_masterData),{},{JASelectedSample:inputData.JASelectedSample,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestTab:inputData.activeTestTab},_skipInfo)});}}};}export function getJobAllocationTestDetail(inputData,isServiceRequired){return function(dispatch){//console.log(\"response :\");\nvar arr=[];var arr1=[];// const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\n// (item,index) => \n// item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\n// );\n//   const myArray = inputData.nsectioncode.split(\",\");\n//   myArray.map((item) => {\n//         if(!arr.includes(item)) {\n//             arr.push(item)\n//           }\n//         }\n//     )\nvar JASelectedSubSample=inputData.JASelectedSubSample;JASelectedSubSample&&JASelectedSubSample.map(function(item){if(!arr.includes(item.nsectioncode)){arr.push(item.nsectioncode);}});var activeName=\"\";var dataStateName=\"\";var inputParamData={nflag:3,ntype:3,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,nsectioncode:arr.map(function(nsectioncode){return nsectioncode;}).join(\",\"),ntransactiontestcode:\"0\",ntransactionstatus:inputData.ntransactionstatus.toString(),ntransactionsamplecode:inputData.ntransactionsamplecode,userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,activeTestTab:inputData.activeTestTab,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,checkBoxOperation:inputData.checkBoxOperation,nneedsubsample:inputData.nneedsubsample};var subSample=inputData.nneedsubsample;if(isServiceRequired){dispatch(initRequest(true));rsapi.post(\"joballocation/getJobAllocationTestDetails\",inputParamData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData,'descending','ntransactionsamplecode');var oldSelectedTest=inputData.masterData.JASelectedTest;var oldSelectedSubSample=inputData.masterData.JASelectedSubSample||[];fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactionsamplecode\",inputData.removeElementFromArray);//inputData.masterData.JA_TEST = response.data.JA_TEST;\nvar masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSample:inputData.masterData.JASelectedSample,JASelectedSubSample:inputData.JASelectedSubSample||inputData.masterData.JASelectedSubSample});if(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTests']=undefined;}var _inputData4=inputData,testskip=_inputData4.testskip,testtake=_inputData4.testtake;// let bool = false;\n// Commented bool value because no need to check bool condition to update skipInfo value.\nvar skipInfo={};// if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\ntestskip=0;// bool = true\n// }\n// if (bool) {\nskipInfo={testskip:testskip,testtake:testtake};// }\nvar RegistrationTestAttachment=[];var RegistrationTestComment=[];var TestView=[];var RegistrationSampleComment=[];var RegistrationSampleAttachment=[];//if (inputData.checkBoxOperation === 1) {\nif(inputData.checkBoxOperation===checkBoxOperation.MULTISELECT){var wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest=oldSelectedTest.filter(function(item){return wholeTestList.includes(item.ntransactiontestcode);});//ALPD-3398\n// oldSelectedTest.map((test, index) => {\n//     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//         oldSelectedTest.splice(index, 1)\n//     }\n//     return null;\n// })\nvar keepOld=false;var ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.JASelectedTest[0].ntransactiontestcode;}switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;default:RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}//} else if (inputData.checkBoxOperation === 5) {\n}else if(inputData.checkBoxOperation===checkBoxOperation.QUICKSELECTSTATUS){var list=[];var dbData=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTVIEW\":dbData=response.data.TestView||[];list=[].concat(_toConsumableArray(inputData.masterData.TestView),_toConsumableArray(dbData));TestView=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}// } else if (inputData.checkBoxOperation === 7) {\n}else if(inputData.checkBoxOperation===checkBoxOperation.QUICKSELECTALL){var _list3=[];var _dbData=[];var testList=reArrangeArrays(inputData.masterData.JA_SUBSAMPLE,responseData.JA_TEST,\"ntransactionsamplecode\");masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:[testList[0]],JA_TEST:testList});switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":_dbData=response.data.RegistrationTestAttachment||[];_list3=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(_dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTVIEW\":_dbData=response.data.TestView||[];_list3=[].concat(_toConsumableArray(inputData.masterData.TestView),_toConsumableArray(_dbData));TestView=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:_dbData=response.data.RegistrationTestAttachment||[];_list3=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(_dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else{var _list4=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":_list4=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentState\";break;case\"IDS_TESTCOMMENTS\":_list4=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":_list4=response.data.TestView?sortData(response.data.TestView,'descending','ntransactiontestcode'):[];TestView=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;case\"IDS_SUBSAMPLEATTACHMENTS\":_list4=response.data.RegistrationSampleComment?sortData(response.data.RegistrationSampleComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_SUBSAMPLE.length>0?inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode:\"\",\"ntransactionsamplecode\");activeName=\"RegistrationSampleComment\";dataStateName=\"testCommentDataState\";break;default:_list4=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentState\";break;}}if(subSample){var wholeSubsampleList=masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample=oldSelectedSubSample.filter(function(item){return wholeSubsampleList.includes(item.ntransactionsamplecode);});//ALPD-3398\n// oldSelectedSubSample.map((test, index) => {\n//     if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n//         oldSelectedSubSample.splice(index, 1)\n//     }\n//     return null;\n// })\nvar _keepOld2=false;var ntransactionsamplecode;if(oldSelectedSubSample.length>0){_keepOld2=true;}else{ntransactionsamplecode=masterData.selectedSubSample[0].ntransactionsamplecode;}switch(inputData.activeSubSampleTab){case\"IDS_SUBSAMPLECOMMENTS\":RegistrationSampleComment=_keepOld2?inputData.masterData.RegistrationSampleComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment,ntransactionsamplecode,\"ntransactionsamplecode\");activeName=\"RegistrationSampleComment\";dataStateName=\"subSampleCommentDataState\";break;default:RegistrationSampleAttachment=_keepOld2?inputData.masterData.RegistrationSampleAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment,ntransactionsamplecode,\"ntransactionsamplecode\");activeName=\"RegistrationSampleAttachment\";dataStateName=\"subSampleAttachmentDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView,RegistrationSampleComment:RegistrationSampleComment,RegistrationSampleAttachment:RegistrationSampleAttachment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestTab:inputData.activeTestTab,// activeTestTab: inputData.activeTestTab,\nscreenName:inputData.activeTestTab,subsampleskip:undefined,subsampletake:undefined},skipInfo)});}).catch(function(error){//console.log(\"error:\", error);\ndispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var oldSelectedTest=inputData.masterData.JASelectedTest;var TestSelected=inputData[\"statusNone\"]?getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\"):filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\");var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.JASelectedSubSample,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactionsamplecode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode.toString():\"\";var _JASelectedSubSample=inputData.RESelectedSubSample;var JASelectedTest=inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[];inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"TestView\",\"RegistrationTestAttachment\",\"RegistrationTestComment\"],ntransactiontestcode:ntransactiontestcode,JASelectedSample:inputData.masterData.JASelectedSample,JASelectedTest:JASelectedTest,JASelectedSubSample:_JASelectedSubSample,//  checkBoxOperation: 3,\ncheckBoxOperation:checkBoxOperation.SINGLESELECT,activeTestTab:inputData.activeTestTab});dispatch(getTestChildTabDetailJobAllocation(inputData,true));}else{var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSubSample:inputData.JASelectedSubSample});var wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest=oldSelectedTest.filter(function(item){return wholeTestList.includes(item.ntransactiontestcode);});//ALPD-3398\n// oldSelectedTest.map((test, index) => {\n//     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//         oldSelectedTest.splice(index, 1)\n//     }\n//     return null;\n// })\nvar keepOld=false;var _ntransactiontestcode3;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{_ntransactiontestcode3=masterData.JA_TEST[0].ntransactiontestcode;}var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode3,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode3,\"ntransactiontestcode\");var TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView||[],_ntransactiontestcode3,\"ntransactiontestcode\");var _inputData5=inputData,testskip=_inputData5.testskip,testtake=_inputData5.testtake;var bool=false;var skipInfo={};if(inputData.masterData.JA_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},masterData),{},{JASelectedSubSample:inputData.JASelectedSubSample,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestTab:inputData.activeTestTab},skipInfo)});}}};}export function getTestChildTabDetailJobAllocation(inputData,isServiceRequired){return function(dispatch){var arr=[];inputData.JASelectedTest&&inputData.JASelectedTest.map(function(item){if(!arr.includes(item.nsectioncode)){arr.push(item.nsectioncode);}});var inputParamData={ntransactiontestcode:inputData.JASelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"),npreregno:inputData.npreregno,nsectioncode:arr.map(function(nsectioncode){return nsectioncode;}).join(\",\"),//ssectioncode :inputData.JASelectedTest.map(sample => sample.nsectioncode).join(\",\"),\nntransactionsamplecode:inputData.JASelectedTest.map(function(test){return test.ntransactionsamplecode;}).join(\",\"),ndesigntemplatemappingcode:inputData.masterData.realDesignTemplateMappingValue&&inputData.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode,userinfo:inputData.userinfo};var activeName=\"\";var dataStateName=\"\";var url=\"\";switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":url=\"attachment/getTestAttachment\";activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":url=\"comments/getTestComment\";activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":url=\"attachment/getSampleAttachment\";activeName=\"RegistrationSampleAttachment\";dataStateName=\"sampleAttachmentDataState\";break;case\"IDS_TESTVIEW\":url=\"joballocation/getTestView\";activeName=\"TestView\";dataStateName=\"testViewDataState\";break;default:url=\"attachment/getTestAttachment\";activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}dispatch(initRequest(true));if(isServiceRequired){rsapi.post(url,inputParamData).then(function(response){var _objectSpread7;var responseData=_objectSpread(_objectSpread({},response.data),{},{JASelectedSample:inputData.JASelectedSample||inputData.masterData.JASelectedSample,JASelectedTest:inputData.JASelectedTest,activeTabIndex:inputData.activeTabIndex,activeTabId:inputData.activeTabId});var skipInfo={};fillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{JASelectedTest:inputData.JASelectedTest});if(inputData[dataStateName]&&masterData[activeName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread((_objectSpread7={masterData:masterData,activeTabIndex:inputData.activeTabIndex,activeTabId:inputData.activeTabId,activeTestTab:inputData.activeTestTab,loading:false},_defineProperty(_objectSpread7,\"activeTestTab\",inputData.activeTestTab),_defineProperty(_objectSpread7,\"screenName\",inputData.activeTestTab),_defineProperty(_objectSpread7,\"testskip\",undefined),_defineProperty(_objectSpread7,\"testtake\",undefined),_objectSpread7),skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.JASelectedTest,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactiontestcode\",inputData.removeElementFromArray);var skipInfo={};var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.JASelectedTest});if(masterData[activeName].length<=inputData.skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestTab:inputData.activeTestTab,screenName:inputData.screenName},skipInfo)});}};}export function validateEsignforJobAllocation(inputParam){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"login/validateEsignCredential\",inputParam.inputData).then(function(response){if(response.data===\"Success\"){var methodUrl=inputParam.screenData.inputParam.methodUrl;inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"]=inputParam.inputData.userinfo;if(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]&&inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]){delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];}dispatch(dispatchMethods(inputParam[\"screenData\"]));}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}function dispatchMethods(screenData){return function(dispatch){var action=screenData.inputParam.action;switch(action){case\"receiveinlab\":dispatch(ReceiveinLabStatusWise(screenData.inputParam,screenData.masterData));break;case\"allotjob\":dispatch(AllotJobAction(screenData.inputParam,screenData.masterData));break;case\"allotanotheruser\":dispatch(AllotAnotherUserAction(screenData.inputParam,screenData.masterData));break;case\"reschedule\":dispatch(RescheduleJobAction(screenData.inputParam,screenData.masterData));break;case\"canceltest\":dispatch(CancelTestWise(screenData.inputParam,screenData.masterData));break;case\"updateSection\":dispatch(updateSectionJobAllocation(screenData.inputParam));break;default:break;}};}export function updatedObjectWithNewElement1(oldList,newList){oldList=[].concat(_toConsumableArray(newList),_toConsumableArray(oldList));return oldList;}export function getAnalystCalenderBasedOnUser(nusercode,masterData,userInfo,selectedRecord){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getAnalystCalendarBasedOnUser\",{\"nusercode\":nusercode,\"userinfo\":userInfo}).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),{},{analystCalenderData:response.data.UserData}),loading:false,selectedRecord:selectedRecord}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getInstrumentNameForSchedule(ninstrumentcatcode,userInfo,edit,ninstrumentnamecode){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getInstrumentNameBasedCategoryForSchedule\",{\"ninstrumentcatcode\":ninstrumentcatcode,\"userinfo\":userInfo}).then(function(response){var InstrumentName=[];var InstrumentMap=constructOptionList(response.data.InstrumentName||[],\"ninstrumentnamecode\",\"sinstrumentname\",undefined,undefined,false);InstrumentName=InstrumentMap.get(\"OptionList\");if(edit&&ninstrumentnamecode){var obj={InstrumentName:InstrumentName,selectedInstrumentCatCode:ninstrumentcatcode};dispatch(getInstrumentForSchedule(ninstrumentcatcode,ninstrumentnamecode,userInfo,edit,obj));}else{dispatch({type:DEFAULT_RETURN,payload:{selectedInstrumentCatCode:ninstrumentcatcode,InstrumentName:InstrumentName,Instrument:[],loading:false}});}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getInstrumentForSchedule(ninstrumentcatcode,ninstrumentnamecode,userInfo,edit,obj){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getInstrumentBasedCategoryForSchedule\",{\"ninstrumentcatcode\":ninstrumentcatcode,\"ninstrumentnamecode\":ninstrumentnamecode,\"userinfo\":userInfo}).then(function(response){var Instrument=[];var InstrumentMap=constructOptionList(response.data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,false);Instrument=InstrumentMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:_objectSpread({Instrument:Instrument,loading:false},obj)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function AllotJobActionCalendar(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/AllotJobCreateCalendar\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_TEST\"];var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\"),TestView:replaceUpdatedObject(response.data[\"TestView\"],inputParam.inputData.masterData.TestView,\"ntransactiontestcode\")});var respObject=_objectSpread(_objectSpread({},inputParam.inputData),{},{masterData:masterData,loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function clearInstrumentLoginData(){return function(dispatch){//  dispatch(initRequest(true));\ndispatch({type:DEFAULT_RETURN,payload:{//Instrument\nInstrument:[],selectedInstrumentCatCode:undefined,InstrumentName:[]//  loading: false,\n}});};}//ALPD-3781\nexport function getSectionTest(inputParam){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getSectionChange\",inputParam.inputData).then(function(response){var Section=[];var SectionMap=constructOptionList(response.data.Section||[],\"nsectioncode\",\"ssectionname\",undefined,undefined,false);Section=SectionMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{Section:Section,loading:false,loadEsign:false,openModal:true,operation:inputParam.inputData.operation,screenName:inputParam.inputData.screenName,ncontrolcode:inputParam.inputData.ncontrolcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}//ALPD-3781\nexport function updateSectionJobAllocation(inputParam){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/updateSectionJobAllocation\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){var UserSection=[];var UserSectionMap=constructOptionList(response.data.UserSection||[],\"nsectioncode\",\"ssectionname\",undefined,undefined,false);UserSection=UserSectionMap.get(\"OptionList\");var masterData=_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data);var selectedRecord=_objectSpread(_objectSpread({},inputParam.selectedRecord),{},{\"nsectioncode\":\"\"});var respObject=_objectSpread(_objectSpread({},inputParam.inputData),{},{masterData:masterData,UserSection:UserSection,loading:false,loadEsign:false,openModal:false,showSample:undefined,selectedRecord:selectedRecord});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}//ALPD-3781\nexport function getUsersSection(inputParam){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getUsersBySection\",{\"userinfo\":inputParam.userInfo,\"nsectioncode\":inputParam.nsectioncode,\"nregtypecode\":inputParam.nregtypecode,\"nregsubtypecode\":inputParam.nregsubtypecode}).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){var Users=[];var SectionUsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);Users=SectionUsersMap.get(\"OptionList\");var selectedRecord=_objectSpread(_objectSpread({},inputParam.selectedRecord),{},{\"nusercode\":\"\",\"ntechniquecode\":\"\"});var masterData=_objectSpread(_objectSpread({},inputParam.masterData),response.data);var respObject={selectedRecord:selectedRecord,masterData:masterData,Users:Users,loading:false,loadEsign:false,showSample:undefined};dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/JobAllocationAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","replaceUpdatedObject","sortData","fillRecordBasedOnCheckBoxSelection","getSameRecordFromTwoArrays","getRecordBasedOnPrimaryKeyName","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","rearrangeDateFormat","postCRUDOrganiseTransSearch","Axios","checkBoxOperation","transactionStatus","intl","getRegTypeJobAllocation","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","defaultSampleTypeValue","realDesignTemplateMappingValue","realDynamicDesignMappingList","loading","catch","error","status","message","warn","getRegSubTypeJobAllocation","defaultRegTypeValue","getAppConfigVersionJobAllocation","inputParam","defaultRegSubTypeValue","RegSubTypeValue","realRegSubTypeValue","getSectionJobAllocation","defaultUserSectionValue","getFilterStatusJobAllocation","defaultFilterStatusValue","getFilterStatusSectionJobAllocation","testStatusService","sectionService","urlArray","all","defaultApprovalVersionValue","getDesignTemplateJobAllocation","Success","ApprovalVersionValue","realApprovalVersionValue","getTestStatusJobAllocation","getJobAllcationFilterSubmit","searchSampleRef","undefined","current","value","searchSubSampleRef","searchTestRef","showTest","activeTestTab","showFilter","sampleskip","sampletake","subsampleskip","subsampletake","testskip","testtake","documentDataState","sort","filter","testCommentDataState","ReceiveinLabStatusWise","rtn","JA_SAMPLE","JA_SUBSAMPLE","JA_TEST","JASelectedSample","JASelectedSubSample","JASelectedTest","respObject","loadEsign","openModal","showSample","postParamList","getAllottedTestWise","AllotDetails","calenderViewAfterAllot","nselecttype","RescheduleEditById","npreregno","ntransactionsamplecode","transactiontestcode","calenderProperties","selectedRecord","TechniqueMap","Technique","get","UsersPeriodMap","Period","UsersPeriod","InstrumentCategoryMap","InstrumentCategory","InstrumentNameMap","InstrumentName","InstrumentIdMap","InstrumentId","InstrumentPeriodMap","InstrumentPeriod","SectionPeriodMap","RescheduleSection","currentTime","userinfo","CurrentTime","body","UsersMap","Users","editData","JobAllocation","instrumentstartdate","sinstrumentholdduration","comments","suserholdduration","userstartdate","Date","calenderColor","calenderSettings","isOpen","operation","screenName","ncontrolCode","ncontrolcode","getAllotAnotherUserTestWise","stechniquename","TechniqueCode","ntechniquecode","getInstrumentName","ninstrumentcatcode","ncalibrationreq","userInfo","NA","getInstrumentId","ninstrumentnamecode","getUsers","toString","map","sample","nsectioncode","join","realRegTypeValue","nregtypecode","nregsubtypecode","ViewAnalystCalendar","CancelTestWise","TestView","info","AllotJobAction","AllotAnotherUserAction","RescheduleJobAction","parseInt","nfiltersectioncode","UserSection","UserSectionMap","getJobAllocationSubSampleDetail","isServiceRequired","arr","item","includes","push","inputParamData","nsampletypecode","nregistrationsectioncode","ntransactionstatus","String","ntransactiontestcode","ntestcode","napprovalversioncode","fromdate","todate","activeSampleTab","activeSubSampleTab","nneedsubsample","ndesigntemplatemappingcode","nneedtemplatebasedflow","activeName","dataStateName","length","formatMessage","id","oldSelectedTest","oldSelectedSubSample","childTabsKey","removeElementFromArray","skipInfo","RegistrationTestAttachment","RegistrationTestComment","RegistrationComment","RegistrationSampleAttachment","MULTISELECT","wholeSubSampleList","b","wholeTestList","keepOld","QUICKSELECTSTATUS","list","dbData","QUICKSELECTALL","skip","secondarySelection","activeTabIndex","TestSelected","subSampleSelected","isGrandChildGetRequired","filterSelectedSubSample","subsample","SINGLESELECT","getTestChildTabDetailJobAllocation","getJobAllocationTestDetail","subsamplecheck","SubSampleSelected","wholeSubSample","selectedTest","selectedSubSample1","x","bool","arr1","nflag","ntype","subSample","RegistrationSampleComment","testList","wholeSubsampleList","selectedSubSample","RESelectedSubSample","test","url","activeTabId","validateEsignforJobAllocation","methodUrl","screenData","toLowerCase","dispatchMethods","action","updateSectionJobAllocation","updatedObjectWithNewElement1","oldList","newList","getAnalystCalenderBasedOnUser","nusercode","analystCalenderData","UserData","getInstrumentNameForSchedule","edit","InstrumentMap","obj","selectedInstrumentCatCode","getInstrumentForSchedule","Instrument","AllotJobActionCalendar","clearInstrumentLoginData","getSectionTest","Section","SectionMap","getUsersSection","SectionUsersMap"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport {\r\n    constructOptionList, replaceUpdatedObject, sortData, fillRecordBasedOnCheckBoxSelection, getSameRecordFromTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, rearrangeDateFormat\r\n} from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport Axios from 'axios';\r\nimport { checkBoxOperation, transactionStatus } from '../components/Enumeration';\r\nimport {\r\n    intl\r\n} from '../components/App'\r\nexport function getRegTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationTypeBySampleType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultSampleTypeValue: inputData.defaultSampleTypeValue,\r\n                            realDesignTemplateMappingValue: inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList: inputData.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultRegTypeValue: inputData.defaultRegTypeValue,\r\n                            realDesignTemplateMappingValue: inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList: inputData.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAppConfigVersionJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\r\n                            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue,\r\n                            realDesignTemplateMappingValue: inputParam.inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList: inputParam.inputData.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        const testStatusService = rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData);\r\n        const sectionService = rsapi.post(\"joballocation/getSectionByApproveVersion\", inputData);\r\n        let urlArray = [];\r\n        urlArray = [testStatusService, sectionService];\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDesignTemplateJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getDesignTemplateByApprovalConfigVersion\", inputParam)\r\n            .then(response => {\r\n\r\n                if (response.data[\"Success\"]) {\r\n                    toast.warn(response.data.Success);\r\n                }\r\n\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputParam.masterData.defaultApprovalVersionValue,\r\n                            ApprovalVersionValue: inputParam.masterData.realApprovalVersionValue,\r\n                            realDesignTemplateMappingValue: inputParam.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList: inputParam.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getJobAllcationFilterSubmit(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getJobAllocationDetails\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                \r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showTest: inputParam.inputData.showTest,\r\n                        activeTestTab: inputParam.inputData.activeTestTab,\r\n                        showFilter: false,\r\n                        sampleskip: 0,\r\n                        sampletake: inputParam.sampletake,\r\n                        subsampleskip: 0,\r\n                        subsampletake: inputParam.subsampletake,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function ReceiveinLabStatusWise(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/CreateReceiveinLab\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    replaceUpdatedObject(response.data[\"JA_SAMPLE\"], inputParam.inputData.masterData.JA_SAMPLE, \"nregistrationsectioncode\");\r\n                    replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"], inputParam.inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n\r\n                    delete response.data[\"JA_SAMPLE\"];\r\n                    delete response.data[\"JA_SUBSAMPLE\"];\r\n                    delete response.data[\"JA_TEST\"];\r\n                    let masterData = {\r\n                        ...inputParam.inputData.masterData,\r\n                        ...response.data,\r\n                        JASelectedSample: replaceUpdatedObject(response.data[\"JASelectedSample\"], inputParam.inputData.masterData.JASelectedSample, \"nregistrationsectioncode\"),\r\n                        JASelectedSubSample: replaceUpdatedObject(response.data[\"JASelectedSubSample\"], inputParam.inputData.masterData.JASelectedSubSample, \"ntransactionsamplecode\"),\r\n                        JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                //toast.error(error.message); \r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAllottedTestWise(inputParam, type) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n\r\n        const AllotDetails = rsapi.post(\"joballocation/getAllotDetails\", {...inputParam.inputData,calenderViewAfterAllot:type});\r\n\r\n\r\n\r\n        if (inputParam.inputData.nselecttype === 1) {\r\n            const RescheduleEditById = rsapi.post(\"joballocation/getRescheduleEdit\",\r\n                {\r\n                    \"npreregno\": inputParam.inputData.npreregno, \"ntransactionsamplecode\": inputParam.inputData.ntransactionsamplecode,\r\n                    \"transactiontestcode\": inputParam.inputData.transactiontestcode, ...inputParam.inputData\r\n                });\r\n\r\n            urlArray = [AllotDetails, RescheduleEditById];\r\n\r\n        } else {\r\n            if (type === 2) {\r\n                const calenderProperties = rsapi.post(\"joballocation/calenderProperties\", inputParam.inputData);\r\n                urlArray = [AllotDetails, calenderProperties];\r\n            } else {\r\n                urlArray = [AllotDetails];\r\n            }\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n\r\n                const TechniqueMap = constructOptionList(response[0].data.Technique || [], \"ntechniquecode\", \"stechniquename\", undefined, undefined, false);\r\n                const Technique = TechniqueMap.get(\"OptionList\");\r\n\r\n        \r\n\r\n                const UsersPeriodMap = constructOptionList(response[0].data.Period || [], \"nuserperiodcode\", \"speriodname\", undefined, undefined, false);\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n\r\n                const InstrumentCategoryMap = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, false);\r\n                const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\r\n\r\n                const InstrumentNameMap = constructOptionList(response[0].data.InstrumentName || [], \"ninstrumentnamecode\", \"sinstrumentname\", undefined, undefined, false);\r\n                const InstrumentName = InstrumentNameMap.get(\"OptionList\");\r\n\r\n                const InstrumentIdMap = constructOptionList(response[0].data.InstrumentId || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\r\n                const InstrumentId = InstrumentIdMap.get(\"OptionList\");\r\n\r\n                const InstrumentPeriodMap = constructOptionList(response[0].data.Period || [], \"ninstrumentperiodcode\", \"speriodname\", undefined, undefined, false);\r\n                const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\r\n              \r\n                const SectionPeriodMap = constructOptionList(response[0].data.RescheduleSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\r\n                const RescheduleSection = SectionPeriodMap.get(\"OptionList\");\r\n\r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response[0].data.CurrentTime.body);\r\n                let UsersMap =[];\r\n                let Users =[];\r\n                \r\n               \r\n               \r\n                \r\n\r\n                 if(inputParam.inputData.nselecttype==1&&response[0]&&response[0].data&&response[0].data.Users===undefined){\r\n                    UsersMap=constructOptionList(response[1].data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\r\n                    Users = UsersMap.get(\"OptionList\");\r\n                }else{\r\n                    UsersMap=constructOptionList(response[0].data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\r\n                    Users = UsersMap.get(\"OptionList\");\r\n                }\r\n\r\n                if (inputParam.inputData.nselecttype === 1) {\r\n                    const editData = response[1].data.JobAllocation;\r\n\r\n                    selectedRecord[\"ninstrumentcatcode\"] = {\r\n                        \"value\": editData[\"ninstrumentcategorycode\"],\r\n                        \"label\": editData[\"sinstrumentcatname\"]\r\n                    };\r\n\r\n                    editData[\"ninstrumentcategorycode\"] !== -1 ?\r\n                        selectedRecord[\"ninstrumentnamecode\"] = {\r\n                            \"value\": editData[\"ninstrumentnamecode\"],\r\n                            \"label\": editData[\"sinstrumentname\"]\r\n                        } : selectedRecord[\"ninstrumentnamecode\"] = \"\";\r\n\r\n\r\n                    editData[\"ninstrumentcategorycode\"] !== -1 ?\r\n                        selectedRecord[\"ninstrumentcode\"] = {\r\n                            \"value\": editData[\"ninstrumentcode\"],\r\n                            \"label\": editData[\"sinstrumentid\"]\r\n                        } : selectedRecord[\"ninstrumentcode\"] = \"\";\r\n\r\n                    editData[\"ninstrumentcategorycode\"] !== -1 ?\r\n                        selectedRecord[\"ninstrumentperiodcode\"] = {\r\n                            \"value\": editData[\"ninstrumentperiodcode\"],\r\n                            \"label\": editData[\"sinstrumentperiodname\"]\r\n                        } : selectedRecord[\"ninstrumentperiodcode\"] = \"\";\r\n\r\n                    editData[\"ninstrumentcategorycode\"] !== -1 ?\r\n                        selectedRecord[\"dinstblockfromdatetime\"] = rearrangeDateFormat(inputParam.inputData.userinfo, editData.instrumentstartdate) :\r\n                        selectedRecord[\"dinstblockfromdatetime\"] = \"\";\r\n\r\n                    editData[\"ninstrumentcategorycode\"] !== -1 ?\r\n                        selectedRecord[\"sinstrumentholdduration\"] = editData.sinstrumentholdduration : selectedRecord[\"sinstrumentholdduration\"] = \"\";\r\n\r\n                    selectedRecord[\"scomments\"] = editData.comments;\r\n                    selectedRecord[\"suserholdduration\"] = editData.suserholdduration;\r\n                    selectedRecord[\"duserblockfromdatetime\"] = rearrangeDateFormat(inputParam.inputData.userinfo, editData.userstartdate);\r\n\r\n                    editData[\"ntechniquecode\"] !== -1 ?\r\n                        selectedRecord[\"ntechniquecode\"] = {\r\n                            \"value\": editData[\"ntechniquecode\"],\r\n                            \"label\": editData[\"stechniquename\"]\r\n                        } : selectedRecord[\"ntechniquecode\"] = \"\";\r\n\r\n                    selectedRecord[\"nusercode\"] = {\r\n                        \"value\": editData[\"nusercode\"],\r\n                        \"label\": editData[\"susername\"]\r\n                    };\r\n                    selectedRecord[\"nuserperiodcode\"] = {\r\n                        \"value\": editData[\"nuserperiodcode\"],\r\n                        \"label\": editData[\"suserperiodname\"]\r\n                    };\r\n                    selectedRecord[\"nsectioncode\"] = {\r\n                        \"value\": editData[\"nsectioncode\"],\r\n                        \"label\": editData[\"ssectionname\"]\r\n                    };\r\n\r\n                    selectedRecord = { ...selectedRecord }\r\n                } else if (type !== 2) {\r\n                    selectedRecord[\"scomments\"] = \"\";\r\n                    selectedRecord[\"suserholdduration\"] = \"\";\r\n                    selectedRecord[\"sinstrumentholdduration\"] = \"\";\r\n                    selectedRecord[\"duserblockfromdatetime\"] = new Date();\r\n                }\r\n\r\n                let calenderProperties = []\r\n                let calenderColor = []\r\n                if (type === 2) {\r\n                    calenderProperties = response[1].data.calenderSettings\r\n                    calenderColor = response[1].data.calenderColor\r\n                }\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        Technique,\r\n                        Users,\r\n                        UsersPeriod,\r\n                        InstrumentCategory,\r\n                        InstrumentName,\r\n                        InstrumentId,\r\n                        InstrumentPeriod,\r\n                        currentTime,\r\n                        selectedRecord,\r\n                        openModal: true,\r\n                        isOpen: true,\r\n                        operation: inputParam.inputData.operation,\r\n                        screenName: inputParam.inputData.screenName,\r\n                        ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                        loading: false,\r\n                        calenderProperties,\r\n                        calenderColor,                       \r\n                         RescheduleSection\r\n\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAllotAnotherUserTestWise(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getAllotAnotherUserDetails\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                    \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                    \"speriodname\", undefined, undefined, false);\r\n\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n\r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n                const Technique = response.data.Technique && response.data.Technique[0].stechniquename;\r\n                const TechniqueCode = response.data.Technique && response.data.Technique[0].ntechniquecode;\r\n                let selectedRecord = {};\r\n                selectedRecord[\"scomments\"] = \"\";\r\n                selectedRecord[\"suserholdduration\"] = \"\";\r\n                selectedRecord[\"sinstrumentholdduration\"] = \"\";\r\n                selectedRecord[\"duserblockfromdatetime\"] = new Date();\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Technique,\r\n                        TechniqueCode,\r\n                        Users,\r\n                        UsersPeriod,\r\n                        currentTime,\r\n                        selectedRecord,\r\n                        isOpen: true,\r\n                        operation: inputParam.inputData.operation,\r\n                        screenName: inputParam.inputData.screenName,\r\n                        openModal: true,\r\n                        ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getInstrumentName(ninstrumentcatcode, ncalibrationreq, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentNameBasedCategory\", {\r\n            \"ninstrumentcatcode\": ninstrumentcatcode, \"ncalibrationreq\": ncalibrationreq, \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let InstrumentName = [];\r\n\r\n                const InstrumentNameMap = constructOptionList(response.data.InstrumentName || [], \"ninstrumentnamecode\", \"sinstrumentname\", undefined, undefined, false);\r\n                InstrumentName = InstrumentNameMap.get(\"OptionList\");\r\n\r\n                selectedRecord[\"ninstrumentnamecode\"] =\"\";\r\n                if (ninstrumentcatcode !== transactionStatus.NA) {\r\n                    selectedRecord[\"dinstblockfromdatetime\"] = new Date();\r\n                } else {\r\n                    selectedRecord[\"dinstblockfromdatetime\"] = \"\";\r\n                }\r\n\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        InstrumentName,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getInstrumentId(ninstrumentcatcode, ninstrumentnamecode, ncalibrationreq, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentIdBasedCategory\", {\r\n            \"ninstrumentcatcode\": ninstrumentcatcode, \"ninstrumentnamecode\": ninstrumentnamecode, \"ncalibrationreq\": ncalibrationreq, \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let InstrumentId = [];\r\n                const InstrumentIdMap = constructOptionList(response.data.InstrumentId || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\r\n                InstrumentId = InstrumentIdMap.get(\"OptionList\");\r\n\r\n                selectedRecord[\"ninstrumentcode\"] =\"\";\r\n                // if (ninstrumentcatcode !== transactionStatus.NA) {\r\n                //     selectedRecord[\"dinstblockfromdatetime\"] = new Date();\r\n                // } else {\r\n                //     selectedRecord[\"dinstblockfromdatetime\"] = \"\";\r\n                // }\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        InstrumentId,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getUsers(ntechniquecode, JASelectedTest, userInfo, selectedRecord, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getUsersBasedTechnique\", {\r\n            \"ntechniquecode\": ntechniquecode,\r\n          //  \"ssectioncode\": JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample => sample.nsectioncode).join(\",\") : \"\",\r\n          \"ssectioncode\":selectedRecord[\"nsectioncode\"]?selectedRecord[\"nsectioncode\"].value.toString():JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample => sample.nsectioncode).join(\",\") : \"\",\r\n          \"nregtypecode\": JASelectedTest.realRegTypeValue.nregtypecode,\r\n            \"nregsubtypecode\": JASelectedTest.realRegSubTypeValue.nregsubtypecode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let Users = [];\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n                selectedRecord[\"nusercode\"] = \"\";\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        // masterData:{...masterData},\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function ViewAnalystCalendar(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/viewAnalystCalendar\", (inputParam.inputData))\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.inputData.masterData,\r\n                    ...response.data,\r\n                }\r\n                let Users = [];\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        Users,\r\n                        screenName: inputParam.inputData.screenName,\r\n                        loading: false,\r\n                        openModal: true,\r\n                        masterData,\r\n\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function CancelTestWise(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/cancelTest\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                    delete response.data[\"JA_TEST\"];\r\n                    fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                    let masterData = {\r\n                        ...inputParam.inputData.masterData,\r\n                       \r\n                        ...response.data,\r\n                        JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        TestView: inputParam.inputData.masterData.TestView\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function AllotJobAction(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/AllotJobCreate\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                    delete response.data[\"JA_TEST\"];\r\n                    let masterData = {\r\n                        ...inputParam.inputData.masterData,\r\n                        ...response.data,\r\n                        JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        TestView: replaceUpdatedObject(response.data[\"TestView\"], inputParam.inputData.masterData.TestView, \"ntransactiontestcode\")\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParam.inputData,\r\n                        masterData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function AllotAnotherUserAction(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/AllotAnotherUserCreate\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                    delete response.data[\"JA_TEST\"];\r\n                    fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                    let masterData = {\r\n                        ...inputParam.inputData.masterData,\r\n                        ...response.data,\r\n                        JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        TestView: inputParam.inputData.masterData.TestView\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function RescheduleJobAction(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/RescheduleCreate\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        if(parseInt(inputParam.inputData.nsectioncode)===parseInt(inputParam.inputData.nfiltersectioncode)){\r\n \t\t\t\t\t\tdelete response.data[\"JA_TEST\"];\r\n\t\t\t\t\t\t}\r\n                    fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                    let masterData = {\r\n                        ...inputParam.inputData.masterData,\r\n                        ...response.data,\r\n                        \r\n                        TestView: inputParam.inputData.masterData.TestView\r\n                    }\r\n                    let UserSection = [];\r\n                    const UserSectionMap = constructOptionList(response.data.UserSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\r\n                    UserSection = UserSectionMap.get(\"OptionList\");\r\n\r\n                    if(parseInt(inputParam.inputData.nsectioncode)===parseInt(inputParam.inputData.nfiltersectioncode)){\r\n                        masterData={...masterData,JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\")}\r\n                    }\r\n                    let respObject = {\r\n                        UserSection,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                     respObject={...respObject,    masterData}\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getJobAllocationSubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        //console.log(\"response :\");\r\n        let arr = [];\r\n        // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\r\n        // (item,index) => \r\n        // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\r\n        // );\r\n\r\n        inputData.JASelectedSample && inputData.JASelectedSample.map((item) => {\r\n            if (!arr.includes(item.nsectioncode)) {\r\n                arr.push(item.nsectioncode)\r\n            }\r\n        }\r\n        )\r\n\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            nregistrationsectioncode: inputData.nregistrationsectioncode,\r\n            // ssectioncode : inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\r\n            nsectioncode: arr.map(item => item).join(\",\"),\r\n            ntransactionstatus: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: \"0\",\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            activeSubSampleTab: inputData.activeSubSampleTab,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,\r\n            checkBoxOperation: inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation })\r\n                .then(response => {\r\n                    if(response.data['JA_TEST'].length===0){\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        toast.warn(intl.formatMessage({\r\n                            id: \"IDS_TESTISNOTAVAILABLE\"\r\n                        }));\r\n                    }\r\n                    else{\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'ntransactionsamplecode')\r\n                    // sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest;\r\n                    let oldSelectedSubSample = inputData.masterData.JASelectedSubSample;\r\n\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray);\r\n\r\n                    // inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;  \r\n                    // inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;\r\n                    // inputData.masterData.JA_TEST = response.data.JA_TEST;  \r\n                    // inputData.masterData.JASelectedTest=response.data.JASelectedTest;\r\n                    // inputData.masterData.RegistrationAttachment =response.data.RegistrationAttachment;\r\n                    // inputData.masterData.RegistrationSampleAttachment =response.data.RegistrationSampleAttachment;\r\n                    // inputData.masterData.RegistrationComment =response.data.RegistrationComment;\r\n                    // inputData.masterData.RegistrationSampleComment =response.data.RegistrationSampleComment;\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.JASelectedSample\r\n                    }\r\n\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake,\r\n                        subsampleskip, subsampletake,\r\n                        sampleskip, sampletake\r\n                    } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    //     bool = true\r\n                    // }\r\n                    subsampleskip = 0;\r\n                    // bool = true\r\n                    // if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake,\r\n                        subsampleskip, subsampletake,\r\n                        sampleskip, sampletake\r\n                    }\r\n                    // }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let TestView = [];\r\n                    let RegistrationComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    //if (inputData.checkBoxOperation === 1) {\r\n                    if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\r\n\r\n\r\n                        let wholeSubSampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                            wholeSubSampleList.includes(item.ntransactionsamplecode)\r\n                        );\r\n                        //ALPD-3398\r\n                        // oldSelectedSubSample.forEach((subsample, index) => {\r\n                        //     if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                        //         oldSelectedSubSample.splice(index, 1)\r\n                        //     }\r\n\r\n                        // })\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedSubSample: oldSelectedSubSample\r\n                            }\r\n                        }\r\n\r\n\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest = oldSelectedTest.filter(item =>\r\n                            wholeTestList.includes(item.ntransactiontestcode)\r\n                        );\r\n                        //ALPD-3398\r\n                        // oldSelectedTest.map((test, index) => {\r\n                        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        //         oldSelectedTest.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        let npreregno;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\r\n                            npreregno = masterData.JASelectedSample[0].npreregno;\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName = \"testViewDataState\"\r\n                                break;\r\n\r\n                            default:\r\n                                RegistrationComment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"npreregno\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \" testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n                        // } else if (inputData.checkBoxOperation === 5) {\r\n                    } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                dbData = response.data.RegistrationComment || []\r\n                                list = [...inputData.masterData.RegistrationComment, ...dbData];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    }\r\n                    //else if (inputData.checkBoxOperation === 7) {\r\n                    else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\r\n                        let list = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName = \"testViewDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n\r\n                                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleCommentsDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentDataState\"\r\n                                break;\r\n\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        let list = []\r\n                        if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                            let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest = oldSelectedTest.filter(item =>\r\n                                wholeTestList.includes(item.ntransactiontestcode)\r\n                            );\r\n                            //ALPD-3398\r\n                            // oldSelectedTest.map((test, index) => {\r\n                            //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                            //         oldSelectedTest.splice(index, 1)\r\n                            //     }\r\n                            //     return null;\r\n                            // })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                            }\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName = \"testViewDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleChangeDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleAttachment ? sortData(response.data.RegistrationSampleAttachment, 'descending', 'nsampleattachmentcode') : [];\r\n                                RegistrationSampleAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JASelectedSubSample.length > 0 ? inputData.masterData.JASelectedSubSample[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subsampleAttachmentDataState\"\r\n                                break;\r\n\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        TestView,\r\n                        RegistrationComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            secondarySelection: inputData[\"secondarySelection\"],\r\n                            loading: false,\r\n                            // sampleskip: undefined,\r\n                            // sampletake: undefined,\r\n                            ...skipInfo,\r\n                            activeTabIndex: inputData.activeTabIndex\r\n                        }\r\n                    })\r\n                }\r\n                })\r\n               \r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.JASelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n            }\r\n\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSample = inputData.JASelectedSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                let JASelectedSubSample = inputData.masterData.JA_SUBSAMPLE\r\n\r\n\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    JASelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = JASelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                let npreregno = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(',');\r\n                let nsectioncode = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(',');\r\n                let masterData = { ...inputData.masterData, JASelectedSample, JASelectedSubSample, JASelectedTest }\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    npreregno,\r\n                    nsectioncode,\r\n                    ntransactionsamplecode,\r\n                    JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    //  checkBoxOperation: 3,\r\n                    checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n                    activeTestTab: inputData.activeTestTab, masterData\r\n                }\r\n\r\n                if (JASelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"TestView\"]\r\n                    }\r\n                    dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData, masterData,\r\n                        childTabsKey: [\"JA_TEST\"]\r\n                    }\r\n                    dispatch(getJobAllocationTestDetail(inputData, true));\r\n                }\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: TestSelected ? TestSelected : inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSample: inputData.JASelectedSample,\r\n                    JASelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.JA_SUBSAMPLE.length > 0 ? [inputData.masterData.JA_SUBSAMPLE[0]] : []\r\n\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                                wholeSubSample.includes(item.ntransactionsamplecode)\r\n                            );\r\n                            //ALPD-3398\r\n                            // oldSelectedSubSample.forEach((test, index) => {\r\n                            //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                            //         oldSelectedSubSample.splice(index, 1)\r\n                            //     }\r\n                            //     return null;\r\n                            // })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                //inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\" checkBoxOperation\"] = checkBoxOperation.SINGLESELECT\r\n                                inputData[\"childTabsKey\"] = [\"JA_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getJobAllocationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                            wholeSubSample.includes(item.ntransactionsamplecode)\r\n                        );\r\n                        //ALPD-3398\r\n                        // oldSelectedSubSample.forEach((test, index) => {\r\n                        //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                        //         oldSelectedSubSample.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n\r\n                oldSelectedTest = oldSelectedTest.filter(item =>\r\n                    wholeTestList.includes(item.ntransactiontestcode)\r\n                );\r\n                //ALPD-3398         \r\n                // oldSelectedTest.map((test, index) => {\r\n                //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                //         oldSelectedTest.splice(index, 1)\r\n                //     }\r\n                //     return null;\r\n                // })\r\n\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.JA_TEST[0].ntransactiontestcode\r\n                }\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSample: inputData.JASelectedSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            TestView,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getJobAllocationTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n\r\n        //console.log(\"response :\");\r\n        let arr = [];\r\n        let arr1 = [];\r\n        // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\r\n        // (item,index) => \r\n        // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\r\n        // );\r\n        //   const myArray = inputData.nsectioncode.split(\",\");\r\n        //   myArray.map((item) => {\r\n        //         if(!arr.includes(item)) {\r\n        //             arr.push(item)\r\n        //           }\r\n        //         }\r\n        //     )\r\n\r\n        let JASelectedSubSample = inputData.JASelectedSubSample;\r\n        JASelectedSubSample && JASelectedSubSample.map((item) => {\r\n            if (!arr.includes(item.nsectioncode)) {\r\n                arr.push(item.nsectioncode)\r\n            }\r\n        }\r\n        )\r\n\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            nsectioncode: arr.map(nsectioncode => nsectioncode).join(\",\"),\r\n            ntransactiontestcode: \"0\",\r\n            ntransactionstatus: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getJobAllocationTestDetails\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'ntransactionsamplecode')\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest\r\n                    let oldSelectedSubSample = inputData.masterData.JASelectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n                    //inputData.masterData.JA_TEST = response.data.JA_TEST;\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.masterData.JASelectedSample,\r\n                        JASelectedSubSample: inputData.JASelectedSubSample || inputData.masterData.JASelectedSubSample,\r\n                    }\r\n\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    // bool = true\r\n                    // }\r\n                    // if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                    // }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let TestView = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    //if (inputData.checkBoxOperation === 1) {\r\n                    if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest = oldSelectedTest.filter(item =>\r\n                            wholeTestList.includes(item.ntransactiontestcode)\r\n                        );\r\n                        //ALPD-3398\r\n                        // oldSelectedTest.map((test, index) => {\r\n                        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        //         oldSelectedTest.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName = \"testViewDataState\"\r\n                                break;\r\n\r\n                            default:\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n                        //} else if (inputData.checkBoxOperation === 5) {\r\n                    } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                        // } else if (inputData.checkBoxOperation === 7) {\r\n                    } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        let testList = reArrangeArrays(inputData.masterData.JA_SUBSAMPLE, responseData.JA_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedTest: [testList[0]],\r\n                            JA_TEST: testList,\r\n                        }\r\n\r\n                        switch (inputData.activeTestTab) {\r\n\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName = \"testViewDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_SUBSAMPLE.length > 0 ? inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                            wholeSubsampleList.includes(item.ntransactionsamplecode)\r\n                        );\r\n                        //ALPD-3398\r\n                        // oldSelectedSubSample.map((test, index) => {\r\n                        //     if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                        //         oldSelectedSubSample.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n\r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        TestView,\r\n                        RegistrationSampleComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            // activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.activeTestTab,\r\n                            subsampleskip: undefined,\r\n                            subsampletake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    //console.log(\"error:\", error);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let TestSelected =\r\n                inputData[\"statusNone\"] ?\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") :\r\n                    filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSubSample = inputData.RESelectedSubSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestView\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\r\n                    ntransactiontestcode,\r\n                    JASelectedSample: inputData.masterData.JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    //  checkBoxOperation: 3,\r\n                    checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n                    activeTestTab: inputData.activeTestTab\r\n                }\r\n                dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSubSample: inputData.JASelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest = oldSelectedTest.filter(item =>\r\n                    wholeTestList.includes(item.ntransactiontestcode)\r\n                );\r\n                //ALPD-3398\r\n                // oldSelectedTest.map((test, index) => {\r\n                //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                //         oldSelectedTest.splice(index, 1)\r\n                //     }\r\n                //     return null;\r\n                // })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.JA_TEST[0].ntransactiontestcode\r\n                }\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSubSample: inputData.JASelectedSubSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            TestView,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        // activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailJobAllocation(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let arr = [];\r\n        inputData.JASelectedTest && inputData.JASelectedTest.map((item) => {\r\n            if (!arr.includes(item.nsectioncode)) {\r\n                arr.push(item.nsectioncode)\r\n            }\r\n        }\r\n        )\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.JASelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            nsectioncode: arr.map(nsectioncode => nsectioncode).join(\",\"),\r\n            //ssectioncode :inputData.JASelectedTest.map(sample => sample.nsectioncode).join(\",\"),\r\n            ntransactionsamplecode: inputData.JASelectedTest.map(test => test.ntransactionsamplecode).join(\",\"),\r\n            ndesigntemplatemappingcode: inputData.masterData.realDesignTemplateMappingValue && inputData.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let url = \"\";\r\n\r\n        switch (inputData.activeTestTab) {\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName = \"testAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"RegistrationSampleAttachment\"\r\n                dataStateName = \"sampleAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTVIEW\":\r\n                url = \"joballocation/getTestView\"\r\n                activeName = \"TestView\"\r\n                dataStateName = \"testViewDataState\"\r\n                break;\r\n            default:\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName = \"testAttachmentDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        JASelectedSample: inputData.JASelectedSample || inputData.masterData.JASelectedSample,\r\n                        JASelectedTest: inputData.JASelectedTest,\r\n                        activeTabIndex: inputData.activeTabIndex,\r\n                        activeTabId: inputData.activeTabId\r\n                    }\r\n                    let skipInfo = {};\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        JASelectedTest: inputData.JASelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            activeTabId: inputData.activeTabId,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            loading: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.activeTestTab,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                JASelectedTest: inputData.JASelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData.skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestTab: inputData.activeTestTab,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function validateEsignforJobAllocation(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = inputParam.screenData.inputParam.methodUrl;\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let action = screenData.inputParam.action\r\n        switch (action) {\r\n            case \"receiveinlab\":\r\n                dispatch(ReceiveinLabStatusWise(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"allotjob\":\r\n                dispatch(AllotJobAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"allotanotheruser\":\r\n                dispatch(AllotAnotherUserAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"reschedule\":\r\n                dispatch(RescheduleJobAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"canceltest\":\r\n                dispatch(CancelTestWise(screenData.inputParam, screenData.masterData));\r\n                break;\r\n                case \"updateSection\":\r\n                    dispatch(updateSectionJobAllocation(screenData.inputParam));\r\n                    break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function updatedObjectWithNewElement1(oldList, newList) {\r\n    oldList = [...newList, ...oldList];\r\n    return oldList;\r\n}\r\n\r\n\r\n\r\nexport function getAnalystCalenderBasedOnUser(nusercode, masterData, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getAnalystCalendarBasedOnUser\", {\r\n            \"nusercode\": nusercode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: { ...masterData, analystCalenderData: response.data.UserData },\r\n                        loading: false,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getInstrumentNameForSchedule(ninstrumentcatcode, userInfo, edit,ninstrumentnamecode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentNameBasedCategoryForSchedule\", {\r\n            \"ninstrumentcatcode\": ninstrumentcatcode, \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let InstrumentName = [];\r\n                const InstrumentMap = constructOptionList(response.data.InstrumentName || [], \"ninstrumentnamecode\", \"sinstrumentname\", undefined, undefined, false);\r\n                InstrumentName = InstrumentMap.get(\"OptionList\");\r\n                if (edit&&ninstrumentnamecode) {\r\n\r\n                    let obj={InstrumentName, selectedInstrumentCatCode: ninstrumentcatcode}\r\n\r\n                    dispatch(getInstrumentForSchedule(ninstrumentcatcode,ninstrumentnamecode,userInfo,edit,obj))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedInstrumentCatCode: ninstrumentcatcode,\r\n                            InstrumentName,\r\n                            Instrument: [],\r\n                            loading: false\r\n                        }\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getInstrumentForSchedule(ninstrumentcatcode, ninstrumentnamecode, userInfo,edit,obj) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentBasedCategoryForSchedule\", {\r\n            \"ninstrumentcatcode\": ninstrumentcatcode, \"ninstrumentnamecode\": ninstrumentnamecode, \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let Instrument = [];\r\n                const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\r\n                Instrument = InstrumentMap.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Instrument,\r\n                        loading: false,\r\n                        ...obj\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function AllotJobActionCalendar(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/AllotJobCreateCalendar\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                    delete response.data[\"JA_TEST\"];\r\n                    let masterData = {\r\n                        ...inputParam.inputData.masterData,\r\n                        ...response.data,\r\n                        JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        TestView: replaceUpdatedObject(response.data[\"TestView\"], inputParam.inputData.masterData.TestView, \"ntransactiontestcode\")\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParam.inputData,\r\n                        masterData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function clearInstrumentLoginData() {\r\n    return function (dispatch) {\r\n      //  dispatch(initRequest(true));\r\n \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        //Instrument\r\n                        Instrument:[],\r\n                        selectedInstrumentCatCode:undefined,\r\n                        InstrumentName:[],\r\n                      //  loading: false,\r\n                    }\r\n                });\r\n\r\n           \r\n    }\r\n}\r\n//ALPD-3781\r\nexport function getSectionTest(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getSectionChange\", inputParam.inputData\r\n        )\r\n            .then(response => {\r\n                let Section = [];\r\n\r\n                const SectionMap = constructOptionList(response.data.Section || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\r\n                Section = SectionMap.get(\"OptionList\");\r\n           \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Section,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: true,operation:inputParam.inputData.operation,\r\n                        screenName:inputParam.inputData.screenName,\r\n                        ncontrolcode:inputParam.inputData.ncontrolcode\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n//ALPD-3781\r\nexport function updateSectionJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/updateSectionJobAllocation\", inputParam.inputData\r\n        )\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    let UserSection = [];\r\n                    const UserSectionMap = constructOptionList(response.data.UserSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\r\n                    UserSection = UserSectionMap.get(\"OptionList\");\r\n                    let masterData = {\r\n                        ...inputParam.inputData.masterData,\r\n                        ...response.data\r\n                        \r\n                    }\r\n                    let selectedRecord={...inputParam.selectedRecord,\"nsectioncode\":\"\"}\r\n\r\n                    let respObject = {\r\n                        ...inputParam.inputData,\r\n                        masterData,\r\n                        UserSection,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined,\r\n                        selectedRecord\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n//ALPD-3781\r\nexport function getUsersSection(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getUsersBySection\", {\"userinfo\":inputParam.userInfo,\"nsectioncode\":inputParam.nsectioncode,\"nregtypecode\":inputParam.nregtypecode,\"nregsubtypecode\":inputParam.nregsubtypecode}\r\n        )\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    let Users = [];\r\n                    const SectionUsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\r\n                    Users =SectionUsersMap.get(\"OptionList\");\r\n                    let selectedRecord={...inputParam.selectedRecord,\"nusercode\":\"\",\"ntechniquecode\":\"\"}\r\n                    let masterData = {\r\n                        ...inputParam.masterData,\r\n                        ...response.data\r\n                        \r\n                    }\r\n                    let respObject = {\r\n                        selectedRecord,\r\n                        masterData,\r\n                        Users,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                     \r\n                        showSample: undefined\r\n                    }\r\n                   \r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}