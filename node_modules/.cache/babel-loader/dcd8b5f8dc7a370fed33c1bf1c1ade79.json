{"ast":null,"code":"import { DEFAULT_RETURN, UPDATE_LANGUAGE, REQUEST_INIT } from './LoginTypes';\nimport rsapi from \"../rsapi\";\nimport { intl, createIntlReinitilize } from '../components/App';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { constructjsonOptionList, constructOptionList, formatInputDate, rearrangeDateFormat } from '../components/CommonScript';\nimport { getHomeDashBoard } from './DashBoardTypeAction';\nimport { getListStaticDashBoard } from './StaticDashBoardAction';\nimport { getListAlert } from './AlertViewAction';\nimport { getRandomColor } from '../components/header/headerutils';\nimport { loadMessages } from '@progress/kendo-react-intl';\nimport messages_ru from '../assets/translations/ru.json';\nimport messages_tg from '../assets/translations/tg.json';\nimport messages_en from '../assets/translations/en.json';\nimport messages_de from '../assets/translations/de.json';\nimport { transactionStatus } from '../components/Enumeration';\nimport { callService } from './ServiceAction';\nconst messages = {\n  'en-US': messages_en,\n  'ko-KR': messages_de,\n  'ru-RU': messages_ru,\n  'tg-TG': messages_tg\n};\nexport const initRequest = loading => {\n  return {\n    type: REQUEST_INIT,\n    payload: loading\n  };\n};\nexport const navPage = data => dispatch => {\n  dispatch({\n    type: DEFAULT_RETURN,\n    payload: {\n      navigation: data,\n      nusermultirolecode: undefined,\n      nusersitecode: undefined,\n      selectedRecord: undefined\n    }\n  });\n};\nexport const changeLanguage = (language, selectedRecord, loginType) => dispatch => {\n  const loginTypeMap = constructjsonOptionList(loginType || [], \"nlogintypecode\", \"sdisplayname\", false, false, true, undefined, 'jsondata', true, language);\n  createIntlReinitilize(language); //ALPD-715 Fix\n\n  dispatch({\n    type: UPDATE_LANGUAGE,\n    payload: {\n      language,\n      selectedRecord,\n      loginTypeList: loginTypeMap.get(\"OptionList\"),\n      selectedRecord: { ...selectedRecord,\n        nlogintypecode: loginTypeMap.get(\"DefaultValue\") ? loginTypeMap.get(\"DefaultValue\") : \"\"\n      }\n    }\n  });\n};\nexport const clickOnLoginButton = (inputData, languageList) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(inputData.url, inputData).then(response => {\n      const returnStr = response.data[\"rtn\"];\n\n      if (returnStr.toUpperCase() === \"SUCCESS\") {\n        const responseData = response.data;\n        const PassFlag = responseData.PassFlag;\n        languageList && languageList.map(x => {\n          loadMessages(messages[inputData.slanguagetypecode], inputData.slanguagetypecode);\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openCPModal: response.data.PassFlag === transactionStatus.UNLOCK || PassFlag === transactionStatus.EXPIRED ? true : false,\n            passwordPolicy: response.data.PasswordPolicy,\n            screenName: PassFlag === transactionStatus.UNLOCK ? \"IDS_CREATEPASSWORD\" : PassFlag === transactionStatus.EXPIRED ? \"IDS_CHANGEPASSWORD\" : \"\",\n            PassFlag,\n            userInfo: response.data.UserInfo // userInfo: {\n            //     nlogintypecode: inputData.nlogintypecode\n            // }\n\n          }\n        });\n\n        if (responseData.PassFlag !== transactionStatus.UNLOCK && responseData.PassFlag !== transactionStatus.EXPIRED) {\n          const inputParam = {\n            userInfo: responseData.UserInfo,\n            menuDesign: responseData.MenuDesign,\n            HomeDesign: responseData.HomeDesign,\n            navigation: responseData.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].shomename,\n            defaultMenuHome: responseData.HomeDesign.filter(x => x.ndefaultstatus === 3)[0],\n            userRoleControlRights: responseData.UserRoleControlRights,\n            userFormControlProperties: responseData.UserFormControlproperties,\n            transactionValidation: responseData.TransactionValidation,\n            displayName: responseData.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].sdisplayname,\n            userMultiRole: responseData.UserMultiRole,\n            settings: responseData.Settings,\n            integrationSettings: responseData.IntegrationSettings,\n            elnUserInfo: responseData.ELNUserInfo,\n            elnSite: responseData.ELNSite,\n            genericLabel: responseData.GenericLabel,\n            genericLabelIDS: responseData.GenericLabelIDS,\n            sdmselnsettings: responseData.SDMSELNSettings,\n            hideQualisForms: responseData.HideQualisForms,\n            deputyUser: response.data.DeputyUser,\n            deputyUserRole: response.data.DeputyUserRole,\n            isDeputyLogin: false,\n            loading: false,\n            userImagePath: responseData.UserImagePath,\n            //profileColor: \"#002699\",\n            profileColor: responseData.UserImagePath === \"\" ? getRandomColor([240, 360], [90, 100], [0, 95], [1, 1]) : \"#ff0000\",\n            idleneed: true\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: inputParam\n          });\n\n          if (inputParam.navigation === 'dashboard') {\n            dispatch(getListStaticDashBoard(responseData.UserInfo));\n          } else if (inputParam.navigation === 'apiservice') {\n            const inputParam1 = {\n              inputData: {\n                currentdate: formatInputDate(new Date(), true),\n                \"userinfo\": inputParam.userInfo\n              },\n              serviceNeed: true,\n              classUrl: inputParam.navigation,\n              methodUrl: responseData.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].smethodurl\n            };\n            dispatch(callService(inputParam1));\n          }\n\n          dispatch(getListAlert(responseData.UserInfo, true));\n\n          if (responseData.PasswordAlertDay) {\n            toast.info(intl.formatMessage({\n              id: \"IDS_PASSWORDEXPIRY\"\n            }) + \" \" + responseData.PasswordAlertDay + \" \" + intl.formatMessage({\n              id: \"IDS_DAYS\"\n            }));\n          }\n        }\n      } else {\n        toast.warn(intl.formatMessage({\n          id: returnStr\n        }));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else if (error.response === undefined) {\n        toast.warn(\"Service not available\");\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const submitChangeRole = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getuserscreenrightsmenu\", inputParam).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          userInfo: response.data.UserInfo,\n          menuDesign: response.data.MenuDesign,\n          navigation: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].shomename,\n          defaultMenuHome: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0],\n          userRoleControlRights: response.data.UserRoleControlRights,\n          userMultiRole: response.data.UserMultiRole,\n          deputyUser: response.data.DeputyUser,\n          deputyUserRole: response.data.DeputyUserRole,\n          loading: false,\n          masterData: [],\n          displayName: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].sdisplayname,\n          // navigation: \"home\",\n          inputParam: {},\n          openRoleBox: false\n        }\n      });\n\n      if (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].shomename === 'dashboard') {\n        dispatch(getListStaticDashBoard(response.data.UserInfo, 1));\n      } else if (inputParam.navigation === 'apiservice') {\n        const inputParam1 = {\n          inputData: {\n            currentdate: formatInputDate(new Date(), true),\n            \"userinfo\": response.data.UserInfo\n          },\n          serviceNeed: true,\n          classUrl: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].shomename,\n          methodUrl: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].smethodurl\n        };\n        dispatch(callService(inputParam1));\n      } // dispatch(getHomeDashBoard(response.data.UserInfo, 0, false));\n\n\n      dispatch(getListAlert(response.data.UserInfo));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const updateStore = updateInfo => dispatch => {\n  if (updateInfo.data.loadEsign === true) {\n    const currentTimeUrl = rsapi.post(\"/timezone/getLocalTimeByZone\", {\n      \"userinfo\": updateInfo.data.screenData.inputParam.inputData.userinfo\n    });\n    const reasonUrl = rsapi.post(\"/reason/getReason\", {\n      \"userinfo\": updateInfo.data.screenData.inputParam.inputData.userinfo\n    });\n    dispatch(initRequest(true));\n    Axios.all([currentTimeUrl, reasonUrl]).then(response => {\n      const reasonMap = constructOptionList(response[1].data || [], \"nreasoncode\", \"sreason\", undefined, undefined, false);\n      const reasonList = reasonMap.get(\"OptionList\");\n      dispatch({\n        type: updateInfo.typeName,\n        payload: {\n          serverTime: rearrangeDateFormat(updateInfo.data.screenData.inputParam.inputData.userinfo, response[0].data),\n          esignReasonList: reasonList,\n          ...updateInfo.data,\n          masterStatus: \"\",\n          errorCode: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  } else {\n    dispatch({\n      type: updateInfo.typeName,\n      payload: { ...updateInfo.data,\n        masterStatus: \"\",\n        errorCode: undefined\n      }\n    });\n  }\n};\nexport const getChangeUserRole = userInfo => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getchangerole\", {\n      \"userinfo\": userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getLoginDetails = () => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getloginInfo\", {}).then(response => {\n      // let loginType = [];\n      // response.data.LoginType.map(type => {\n      //     loginType\n      // })\n      const languageMap = constructOptionList(response.data.Language || [], \"slanguagetypecode\", \"slanguagename\", false, false, true);\n      let defaultLanguage = languageMap.get(\"DefaultValue\") ? languageMap.get(\"DefaultValue\") : undefined;\n      let languageCode = defaultLanguage ? defaultLanguage.value : \"en-US\";\n      const loginTypeMap = constructjsonOptionList(response.data.LoginType || [], \"nlogintypecode\", \"sdisplayname\", false, false, true, undefined, 'jsondata', true, languageCode);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loginTypes: response.data.LoginType,\n          loginTypeList: loginTypeMap.get(\"OptionList\"),\n          languageList: languageMap.get(\"OptionList\"),\n          nlanguagecode: defaultLanguage || \"\",\n          selectedRecord: {\n            nlogintypecode: loginTypeMap.get(\"DefaultValue\") ? loginTypeMap.get(\"DefaultValue\") : \"\",\n            nlanguagecode: defaultLanguage || \"\"\n          },\n          language: defaultLanguage.value,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else if (error.response === undefined) {\n        toast.warn(\"Service not available\");\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getUserSiteAndRole = (inputParam, selectedRecord) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getloginvalidation\", { ...inputParam\n    }).then(response => {\n      if (inputParam.Language !== undefined && inputParam.logintype !== undefined) {\n        const roleMap = constructOptionList(response.data.UserMultiRole || [], \"nusermultirolecode\", \"suserrolename\", false, false, true, \"ndefaultrole\");\n        const siteMap = constructOptionList(response.data.Site || [], \"nusersitecode\", \"ssitename\", false, false, true, \"ndefaultsite\");\n        let loggeInLoginTypeCode = response.data.Users.nlogintypecode;\n        let logintypecode = inputParam.logintype.filter(x => x.value === loggeInLoginTypeCode);\n\n        if (inputParam.logintype.length > 0 && logintypecode.length === 0) {\n          logintypecode = inputParam.logintype;\n          loggeInLoginTypeCode = logintypecode[0].value;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loginUserRole: roleMap.get(\"OptionList\"),\n            loginUserSite: siteMap.get(\"OptionList\"),\n            nusermultirolecode: roleMap.get(\"DefaultValue\") ? roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\",\n            nusersitecode: siteMap.get(\"DefaultValue\") ? siteMap.get(\"DefaultValue\") : siteMap.get(\"OptionList\") ? siteMap.get(\"OptionList\")[0] : \"\",\n            nusercode: response.data.Users.nusercode,\n            nlogintypecode: logintypecode ? logintypecode[0] : \"\",\n            selectedRecord: { ...selectedRecord,\n              nusermultirolecode: roleMap.get(\"DefaultValue\") ? roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\",\n              nusersitecode: siteMap.get(\"DefaultValue\") ? siteMap.get(\"DefaultValue\") : siteMap.get(\"OptionList\") ? siteMap.get(\"OptionList\")[0] : \"\",\n              nusercode: response.data.Users.nusercode,\n              nlogintypecode: logintypecode ? logintypecode[0] : \"\"\n            },\n            openCPModal: response.data.PassFlag === 6 ? true : false,\n            passwordPolicy: response.data.PasswordPolicy,\n            screenName: \"IDS_CREATEPASSWORD\",\n            loading: false,\n            PassFlag: response.data.PassFlag,\n            createPwdRecord: {},\n            userInfo: {\n              nlogintypecode: loggeInLoginTypeCode\n            }\n          }\n        });\n      } else {\n        toast.warn(inputParam.Language === undefined ? \"Language not available\" : \"Login type not available\");\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loginUserRole: [],\n          loginUserSite: [],\n          selectedRecord: { ...selectedRecord,\n            nusermultirolecode: \"\",\n            nusersitecode: \"\"\n          }\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else if (error.response === undefined) {\n        toast.warn(\"Service not available\");\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const createPassword = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/createnewpassword\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openCPModal: false,\n          loading: false,\n          createPwdRecord: {}\n        }\n      });\n      toast.success(intl.formatMessage({\n        id: \"IDS_PASSWORDCREATEDSUCCESSFULLY\"\n      }));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const changepassword = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/changepassword\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openCPModal: false,\n          loading: false,\n          createPwdRecord: {},\n          navigation: \"login\"\n        }\n      });\n      toast.success(intl.formatMessage({\n        id: \"IDS_PASSWORDCHANGEDSUCCESSFULLY\"\n      }));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport function validateEsignforDigitalSignature(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"performaction\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        dispatch(saveDigitalSign(inputParam[\"screenData\"][\"inputParam\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const saveDigitalSign = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    const formData = inputParam.formData;\n    formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\n    rsapi.post(\"/digitalsignature/updateDigitalSignature\", formData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openCPModal: false,\n          loading: false,\n          loadEsign: false\n        }\n      });\n      toast.success(intl.formatMessage({\n        id: \"IDS_DIGITALSIGNATURESAVEDSUCCESSFULLY\"\n      }));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getPassWordPolicy = nuserrolecode => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getPassWordPolicy\", {\n      nuserrolecode\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openCPModal: true,\n          loading: false,\n          createPwdRecord: {},\n          screenName: \"IDS_CHANGEPASSWORD\",\n          passwordPolicy: response.data.PasswordPolicy\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getDigitalSign = (nusercode, userInfo) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/digitalsignature/getDigitalSignature\", {\n      nusercode: nusercode,\n      userInfo: userInfo\n    }).then(response => {\n      let responseData = response.data;\n      let selectedDigiSign = responseData !== \"\" ? responseData : {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openCPModal: true,\n          loading: false,\n          screenName: \"IDS_DIGITALSIGNATURE\",\n          operation: \"update\",\n          selectedDigiSign,\n          isInitialRender: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const changeOwner = inputData => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/changeOwner\", { ...inputData\n    }).then(response => {\n      const responseData = response.data;\n      const inputParam = {\n        userInfo: responseData.UserInfo,\n        menuDesign: responseData.MenuDesign,\n        userRoleControlRights: responseData.UserRoleControlRights,\n        userFormControlProperties: responseData.UserFormControlproperties,\n        transactionValidation: responseData.TransactionValidation,\n        displayName: \"\",\n        userMultiRole: responseData.UserMultiRole,\n        isDeputyLogin: true,\n        // settings: responseData.Settings,\n        // deputyUser: response.data.DeputyUser,\n        // deputyUserRole: response.data.DeputyUserRole,\n        loading: false,\n        masterData: [],\n        navigation: \"home\",\n        inputParam: {},\n        openRoleBox: false,\n        userImagePath: responseData.UserImagePath,\n        profileColor: responseData.UserImagePath === \"\" ? getRandomColor([240, 360], [90, 100], [0, 95], [1, 1]) : \"#ff0000\",\n        idleneed: true\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: inputParam\n      });\n      dispatch(getListStaticDashBoard(response.data.UserInfo, 1));\n      dispatch(getHomeDashBoard(response.data.UserInfo, 0, false));\n      dispatch(getListAlert(response.data.UserInfo));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const logOutAuditAction = (inputData, languageList) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post('login/insertAuditAction', { ...inputData,\n      nFlag: 2\n    }).then(response => {\n      languageList && languageList.map(x => {\n        loadMessages({}, x.slanguagetypecode);\n      });\n      dispatch(navPage(\"login\"));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const elnLoginAction = (inputParam, serverUrl, uiUrl) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(serverUrl, { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (response !== null && response.data.objResponse !== null) {\n        if (response.data.objResponse.status) {\n          if (uiUrl) {\n            let user = response;\n            let elnURL = uiUrl + \"#\" + user.data.username + \"$\" + user.data.password;\n            window.open(elnURL, '_blank');\n          } else {\n            toast.info(intl.FormattedMessage({\n              id: \"IDS_ELNUIURLNOTAVAILABLE\"\n            }));\n          }\n        } else {\n          toast.info(response.data.objResponse.information);\n        } // if(!$(\"#appsdetails\").is(\":hidden\")){\n        //     $('#appsdetails').addClass(\"dp-none\");\n        // }\n\n      }\n\n      ;\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const sdmsLoginAction = (inputParam, serverUrl, sdmsUIUrl) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(serverUrl, { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (response !== null && response.data.status) {\n        if (response.data.status) {\n          const sdmsURL = sdmsUIUrl + \"?un=\" + response.data.username + \"&pd=\" + response.data.password + \"&sc=\" + inputParam.sSiteCode;\n          window.open(sdmsURL, '_blank');\n        } else {\n          toast.info(response.Message);\n        }\n      } else {\n        toast.info(intl.FormattedMessage({\n          id: \"IDS_CHECKSYNCSERVICE\"\n        }));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const getUsersiteRole = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post('login/changeSite', {\n      \"usersSite\": inputParam.selectedRecord.nusersitecode.item\n    }).then(response => {\n      const roleMap = constructOptionList(response.data.UserMultiRole || [], \"nusermultirolecode\", \"suserrolename\", false, false, true, \"ndefaultrole\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loginUserRole: roleMap.get(\"OptionList\"),\n          selectedRecord: { ...inputParam.selectedRecord,\n            nusermultirolecode: roleMap.get(\"DefaultValue\") ? roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\"\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const checkPassword = (inputParam, selectedRecord) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getlogintypevalidation\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: { ...selectedRecord,\n            nusercode: response.data.Users.nusercode\n          },\n          userInfo: {\n            nlogintypecode: inputParam.nlogintypecode\n          },\n          openCPModal: response.data.PassFlag === 6 ? true : false,\n          passwordPolicy: response.data.PasswordPolicy,\n          screenName: \"IDS_CREATEPASSWORD\",\n          loading: false,\n          PassFlag: response.data.PassFlag,\n          createPwdRecord: {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport function getDashBoardForHome(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/staticdashboard/getListStaticDashBoard\", {\n      'userinfo': inputParam.data.userInfo\n    }).then(response => {\n      let respObject = {\n        masterDataStatic: response.data,\n        loading: false,\n        userInfo: inputParam.data.userInfo\n      };\n\n      if (response.data !== null && Object.keys(response.data).length > 0) {\n        respObject = { ...inputParam.data,\n          ...respObject,\n          currentPageNo: -1\n        };\n      }\n\n      dispatch(getHomeDashBoard(inputParam.data.userInfo, 0, false, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/LoginAction.js"],"names":["DEFAULT_RETURN","UPDATE_LANGUAGE","REQUEST_INIT","rsapi","intl","createIntlReinitilize","Axios","toast","constructjsonOptionList","constructOptionList","formatInputDate","rearrangeDateFormat","getHomeDashBoard","getListStaticDashBoard","getListAlert","getRandomColor","loadMessages","messages_ru","messages_tg","messages_en","messages_de","transactionStatus","callService","messages","initRequest","loading","type","payload","navPage","data","dispatch","navigation","nusermultirolecode","undefined","nusersitecode","selectedRecord","changeLanguage","language","loginType","loginTypeMap","loginTypeList","get","nlogintypecode","clickOnLoginButton","inputData","languageList","post","url","then","response","returnStr","toUpperCase","responseData","PassFlag","map","x","slanguagetypecode","openCPModal","UNLOCK","EXPIRED","passwordPolicy","PasswordPolicy","screenName","userInfo","UserInfo","inputParam","menuDesign","MenuDesign","HomeDesign","filter","ndefaultstatus","shomename","defaultMenuHome","userRoleControlRights","UserRoleControlRights","userFormControlProperties","UserFormControlproperties","transactionValidation","TransactionValidation","displayName","sdisplayname","userMultiRole","UserMultiRole","settings","Settings","integrationSettings","IntegrationSettings","elnUserInfo","ELNUserInfo","elnSite","ELNSite","genericLabel","GenericLabel","genericLabelIDS","GenericLabelIDS","sdmselnsettings","SDMSELNSettings","hideQualisForms","HideQualisForms","deputyUser","DeputyUser","deputyUserRole","DeputyUserRole","isDeputyLogin","userImagePath","UserImagePath","profileColor","idleneed","inputParam1","currentdate","Date","serviceNeed","classUrl","methodUrl","smethodurl","PasswordAlertDay","info","formatMessage","id","warn","catch","error","status","message","submitChangeRole","masterData","openRoleBox","updateStore","updateInfo","loadEsign","currentTimeUrl","screenData","userinfo","reasonUrl","all","reasonMap","reasonList","typeName","serverTime","esignReasonList","masterStatus","errorCode","getChangeUserRole","getLoginDetails","languageMap","Language","defaultLanguage","languageCode","value","LoginType","loginTypes","nlanguagecode","getUserSiteAndRole","logintype","roleMap","siteMap","Site","loggeInLoginTypeCode","Users","logintypecode","length","loginUserRole","loginUserSite","nusercode","createPwdRecord","createPassword","success","changepassword","validateEsignforDigitalSignature","toLowerCase","saveDigitalSign","formData","append","JSON","stringify","getPassWordPolicy","nuserrolecode","getDigitalSign","selectedDigiSign","operation","isInitialRender","changeOwner","logOutAuditAction","nFlag","elnLoginAction","serverUrl","uiUrl","objResponse","user","elnURL","username","password","window","open","FormattedMessage","information","sdmsLoginAction","sdmsUIUrl","sdmsURL","sSiteCode","Message","getUsersiteRole","item","checkPassword","getDashBoardForHome","respObject","masterDataStatic","Object","keys","currentPageNo"],"mappings":"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","sourcesContent":["import { DEFAULT_RETURN, UPDATE_LANGUAGE, REQUEST_INIT } from './LoginTypes';\r\nimport rsapi from \"../rsapi\";\r\nimport { intl, createIntlReinitilize } from '../components/App';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { constructjsonOptionList, constructOptionList, formatInputDate, rearrangeDateFormat } from '../components/CommonScript';\r\nimport { getHomeDashBoard } from './DashBoardTypeAction';\r\nimport { getListStaticDashBoard } from './StaticDashBoardAction';\r\nimport { getListAlert } from './AlertViewAction'\r\nimport { getRandomColor } from '../components/header/headerutils';\r\nimport { loadMessages } from '@progress/kendo-react-intl';\r\nimport messages_ru from '../assets/translations/ru.json';\r\nimport messages_tg from '../assets/translations/tg.json';\r\nimport messages_en from '../assets/translations/en.json';\r\nimport messages_de from '../assets/translations/de.json';\r\nimport { transactionStatus } from '../components/Enumeration';\r\nimport { callService } from './ServiceAction';\r\n\r\nconst messages = {\r\n    'en-US': messages_en,\r\n    'ko-KR': messages_de,\r\n    'ru-RU': messages_ru,\r\n    'tg-TG': messages_tg\r\n}\r\n\r\n\r\nexport const initRequest = (loading) => {\r\n    return {\r\n        type: REQUEST_INIT,\r\n        payload: loading\r\n    }\r\n}\r\n\r\nexport const navPage = (data) => dispatch => {\r\n    dispatch({\r\n        type: DEFAULT_RETURN,\r\n        payload: {\r\n            navigation: data,\r\n            nusermultirolecode: undefined,\r\n            nusersitecode: undefined,\r\n            selectedRecord: undefined\r\n        }\r\n    });\r\n}\r\n\r\nexport const changeLanguage = (language, selectedRecord, loginType) => (dispatch) => {\r\n    const loginTypeMap = constructjsonOptionList(loginType || [], \"nlogintypecode\",\r\n        \"sdisplayname\", false, false, true, undefined, 'jsondata', true, language);\r\n    createIntlReinitilize(language);  //ALPD-715 Fix\r\n    dispatch({\r\n        type: UPDATE_LANGUAGE,\r\n        payload: {\r\n            language,\r\n            selectedRecord,\r\n            loginTypeList: loginTypeMap.get(\"OptionList\"),\r\n            selectedRecord: {\r\n                ...selectedRecord,\r\n                nlogintypecode: loginTypeMap.get(\"DefaultValue\") ? loginTypeMap.get(\"DefaultValue\") : \"\"\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport const clickOnLoginButton = (inputData, languageList) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputData.url, inputData)\r\n            .then(response => {\r\n                const returnStr = response.data[\"rtn\"];\r\n                if (returnStr.toUpperCase() === \"SUCCESS\") {\r\n                    const responseData = response.data;\r\n                    const PassFlag = responseData.PassFlag;\r\n\r\n                    languageList &&\r\n                        languageList.map(x => {\r\n                            loadMessages(messages[inputData.slanguagetypecode], inputData.slanguagetypecode);\r\n                        })\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openCPModal: response.data.PassFlag === transactionStatus.UNLOCK || PassFlag === transactionStatus.EXPIRED ? true : false,\r\n                            passwordPolicy: response.data.PasswordPolicy,\r\n                            screenName: PassFlag === transactionStatus.UNLOCK ? \"IDS_CREATEPASSWORD\" : PassFlag === transactionStatus.EXPIRED ? \"IDS_CHANGEPASSWORD\" : \"\",\r\n                            PassFlag,\r\n                            userInfo: response.data.UserInfo,\r\n                            // userInfo: {\r\n                            //     nlogintypecode: inputData.nlogintypecode\r\n                            // }\r\n                        }\r\n                    });\r\n                    if (responseData.PassFlag !== transactionStatus.UNLOCK && responseData.PassFlag !== transactionStatus.EXPIRED) {\r\n                        const inputParam = {\r\n                            userInfo: responseData.UserInfo,\r\n                            menuDesign: responseData.MenuDesign,\r\n                            HomeDesign: responseData.HomeDesign,\r\n                            navigation: (responseData.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].shomename,\r\n                            defaultMenuHome: (responseData.HomeDesign.filter(x => x.ndefaultstatus === 3))[0],\r\n                            userRoleControlRights: responseData.UserRoleControlRights,\r\n                            userFormControlProperties: responseData.UserFormControlproperties,\r\n                            transactionValidation: responseData.TransactionValidation,\r\n                            displayName: (responseData.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].sdisplayname,\r\n                            userMultiRole: responseData.UserMultiRole,\r\n                            settings: responseData.Settings,\r\n                            integrationSettings: responseData.IntegrationSettings,\r\n                            elnUserInfo: responseData.ELNUserInfo,\r\n                            elnSite: responseData.ELNSite,\r\n                            genericLabel: responseData.GenericLabel,\r\n                            genericLabelIDS: responseData.GenericLabelIDS,\r\n                            sdmselnsettings: responseData.SDMSELNSettings,\r\n                            hideQualisForms: responseData.HideQualisForms,\r\n                            deputyUser: response.data.DeputyUser,\r\n                            deputyUserRole: response.data.DeputyUserRole,\r\n                            isDeputyLogin: false,\r\n                            loading: false,\r\n                            userImagePath: responseData.UserImagePath,\r\n                            //profileColor: \"#002699\",\r\n                            profileColor: responseData.UserImagePath === \"\" ? getRandomColor([240, 360], [90, 100], [0, 95], [1, 1]) : \"#ff0000\",\r\n                            idleneed: true\r\n                        }\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: inputParam\r\n                        });\r\n\r\n                        if (inputParam.navigation === 'dashboard') {\r\n                            dispatch(getListStaticDashBoard(responseData.UserInfo));\r\n                        } else if (inputParam.navigation === 'apiservice') {\r\n                            const inputParam1 = {\r\n                                inputData: { currentdate: formatInputDate(new Date(), true), \"userinfo\": inputParam.userInfo },\r\n                                serviceNeed: true, classUrl: inputParam.navigation, methodUrl: (responseData.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].smethodurl\r\n                            };\r\n                            dispatch(callService(inputParam1));\r\n                        }\r\n\r\n                        dispatch(getListAlert(responseData.UserInfo, true));\r\n                        if (responseData.PasswordAlertDay) {\r\n                            toast.info(intl.formatMessage({\r\n                                id: \"IDS_PASSWORDEXPIRY\"\r\n                            }) + \" \" + responseData.PasswordAlertDay + \" \" + intl.formatMessage({\r\n                                id: \"IDS_DAYS\"\r\n                            }))\r\n                        }\r\n                    }\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: returnStr\r\n                    }));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response && error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else if (error.response === undefined) {\r\n                    toast.warn(\"Service not available\");\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const submitChangeRole = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getuserscreenrightsmenu\", inputParam)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        userInfo: response.data.UserInfo,\r\n                        menuDesign: response.data.MenuDesign,\r\n                        navigation: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].shomename,\r\n                        defaultMenuHome: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0],\r\n                        userRoleControlRights: response.data.UserRoleControlRights,\r\n                        userMultiRole: response.data.UserMultiRole,\r\n                        deputyUser: response.data.DeputyUser,\r\n                        deputyUserRole: response.data.DeputyUserRole,\r\n                        loading: false,\r\n                        masterData: [],\r\n                        displayName: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].sdisplayname,\r\n                        // navigation: \"home\",\r\n                        inputParam: {},\r\n                        openRoleBox: false\r\n                    }\r\n                });\r\n                if ((response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].shomename === 'dashboard') {\r\n                    dispatch(getListStaticDashBoard(response.data.UserInfo, 1));\r\n                } else if (inputParam.navigation === 'apiservice') {\r\n                    const inputParam1 = {\r\n                        inputData: { currentdate: formatInputDate(new Date(), true), \"userinfo\": response.data.UserInfo },\r\n                        serviceNeed: true, classUrl: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].shomename, methodUrl: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].smethodurl\r\n                    };\r\n                    dispatch(callService(inputParam1));\r\n                }\r\n\r\n                // dispatch(getHomeDashBoard(response.data.UserInfo, 0, false));\r\n                dispatch(getListAlert(response.data.UserInfo));\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const updateStore = (updateInfo) => dispatch => {\r\n    if (updateInfo.data.loadEsign === true) {\r\n\r\n        const currentTimeUrl = rsapi.post(\"/timezone/getLocalTimeByZone\", {\r\n            \"userinfo\": updateInfo.data.screenData.inputParam.inputData.userinfo\r\n        });\r\n        const reasonUrl = rsapi.post(\"/reason/getReason\", {\r\n            \"userinfo\": updateInfo.data.screenData.inputParam.inputData.userinfo\r\n        });\r\n        dispatch(initRequest(true));\r\n        Axios.all([currentTimeUrl, reasonUrl])\r\n            .then(response => {\r\n\r\n                const reasonMap = constructOptionList(response[1].data || [], \"nreasoncode\",\r\n                    \"sreason\", undefined, undefined, false);\r\n                const reasonList = reasonMap.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: updateInfo.typeName,\r\n                    payload: {\r\n                        serverTime: rearrangeDateFormat(updateInfo.data.screenData.inputParam.inputData.userinfo, response[0].data),\r\n                        esignReasonList: reasonList,\r\n                        ...updateInfo.data,\r\n                        masterStatus: \"\",\r\n                        errorCode: undefined,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    } else {\r\n        dispatch({\r\n            type: updateInfo.typeName,\r\n            payload: {\r\n                ...updateInfo.data,\r\n                masterStatus: \"\",\r\n                errorCode: undefined\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const getChangeUserRole = (userInfo) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getchangerole\", {\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...response.data,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getLoginDetails = () => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getloginInfo\", {})\r\n            .then(response => {\r\n                // let loginType = [];\r\n                // response.data.LoginType.map(type => {\r\n                //     loginType\r\n                // })\r\n                const languageMap = constructOptionList(response.data.Language || [], \"slanguagetypecode\", \"slanguagename\", false, false, true);\r\n                let defaultLanguage = languageMap.get(\"DefaultValue\") ? languageMap.get(\"DefaultValue\") : undefined;\r\n                let languageCode = defaultLanguage ? defaultLanguage.value : \"en-US\";\r\n                const loginTypeMap = constructjsonOptionList(response.data.LoginType || [], \"nlogintypecode\", \"sdisplayname\", false, false, true, undefined, 'jsondata', true, languageCode);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loginTypes: response.data.LoginType,\r\n                        loginTypeList: loginTypeMap.get(\"OptionList\"),\r\n                        languageList: languageMap.get(\"OptionList\"),\r\n                        nlanguagecode: defaultLanguage || \"\",\r\n                        selectedRecord: {\r\n                            nlogintypecode: loginTypeMap.get(\"DefaultValue\") ? loginTypeMap.get(\"DefaultValue\") : \"\",\r\n                            nlanguagecode: defaultLanguage || \"\"\r\n                        },\r\n                        language: defaultLanguage.value,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response && error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else if (error.response === undefined) {\r\n                    toast.warn(\"Service not available\");\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getUserSiteAndRole = (inputParam, selectedRecord) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getloginvalidation\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                if (inputParam.Language !== undefined && inputParam.logintype !== undefined) {\r\n                    const roleMap = constructOptionList(response.data.UserMultiRole || [], \"nusermultirolecode\", \"suserrolename\", false, false, true, \"ndefaultrole\");\r\n                    const siteMap = constructOptionList(response.data.Site || [], \"nusersitecode\", \"ssitename\", false, false, true, \"ndefaultsite\");\r\n                    let loggeInLoginTypeCode = response.data.Users.nlogintypecode;\r\n                    let logintypecode = inputParam.logintype.filter(x => x.value === loggeInLoginTypeCode);\r\n                    if (inputParam.logintype.length > 0 && logintypecode.length === 0) {\r\n                        logintypecode = inputParam.logintype;\r\n                        loggeInLoginTypeCode = logintypecode[0].value;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loginUserRole: roleMap.get(\"OptionList\"),\r\n                            loginUserSite: siteMap.get(\"OptionList\"),\r\n                            nusermultirolecode: roleMap.get(\"DefaultValue\") ?\r\n                                roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\",\r\n\r\n                            nusersitecode: siteMap.get(\"DefaultValue\") ?\r\n                                siteMap.get(\"DefaultValue\") : siteMap.get(\"OptionList\") ? siteMap.get(\"OptionList\")[0] : \"\",\r\n\r\n                            nusercode: response.data.Users.nusercode,\r\n                            nlogintypecode: logintypecode ? logintypecode[0] : \"\",\r\n\r\n                            selectedRecord: {\r\n                                ...selectedRecord,\r\n                                nusermultirolecode: roleMap.get(\"DefaultValue\") ?\r\n                                    roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\",\r\n                                nusersitecode: siteMap.get(\"DefaultValue\") ?\r\n                                    siteMap.get(\"DefaultValue\") : siteMap.get(\"OptionList\") ? siteMap.get(\"OptionList\")[0] : \"\",\r\n                                nusercode: response.data.Users.nusercode,\r\n                                nlogintypecode: logintypecode ? logintypecode[0] : \"\"\r\n                            },\r\n\r\n                            openCPModal: response.data.PassFlag === 6 ? true : false,\r\n                            passwordPolicy: response.data.PasswordPolicy,\r\n                            screenName: \"IDS_CREATEPASSWORD\",\r\n                            loading: false,\r\n                            PassFlag: response.data.PassFlag,\r\n                            createPwdRecord: {},\r\n                            userInfo: {\r\n                                nlogintypecode: loggeInLoginTypeCode\r\n                            }\r\n                        }\r\n\r\n\r\n                    });\r\n                } else {\r\n                    toast.warn(inputParam.Language === undefined ? \"Language not available\" : \"Login type not available\");\r\n                }\r\n            }\r\n            )\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loginUserRole: [],\r\n                        loginUserSite: [],\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            nusermultirolecode: \"\",\r\n                            nusersitecode: \"\"\r\n                        }\r\n                    }\r\n                });\r\n                if (error.response && error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else if (error.response === undefined) {\r\n                    toast.warn(\"Service not available\");\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n\r\n\r\n            });\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const createPassword = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/createnewpassword\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openCPModal: false,\r\n                        loading: false,\r\n                        createPwdRecord: {}\r\n                    }\r\n                });\r\n                toast.success(intl.formatMessage({\r\n                    id: \"IDS_PASSWORDCREATEDSUCCESSFULLY\"\r\n                }));\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const changepassword = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/changepassword\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openCPModal: false,\r\n                        loading: false,\r\n                        createPwdRecord: {},\r\n                        navigation: \"login\"\r\n                    }\r\n                });\r\n                toast.success(intl.formatMessage({\r\n                    id: \"IDS_PASSWORDCHANGEDSUCCESSFULLY\"\r\n                }));\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function validateEsignforDigitalSignature(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = \"performaction\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];                        \r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    }\r\n                    dispatch(saveDigitalSign(inputParam[\"screenData\"][\"inputParam\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport const saveDigitalSign = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const formData = inputParam.formData;\r\n        formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));  \r\n        rsapi.post(\"/digitalsignature/updateDigitalSignature\", formData )\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openCPModal: false,\r\n                        loading: false,\r\n                        loadEsign: false\r\n                    }\r\n                });\r\n                toast.success(intl.formatMessage({\r\n                    id: \"IDS_DIGITALSIGNATURESAVEDSUCCESSFULLY\"\r\n                }));\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getPassWordPolicy = (nuserrolecode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getPassWordPolicy\", {\r\n            nuserrolecode\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openCPModal: true,\r\n                        loading: false,\r\n                        createPwdRecord: {},\r\n                        screenName: \"IDS_CHANGEPASSWORD\",\r\n                        passwordPolicy: response.data.PasswordPolicy\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getDigitalSign = (nusercode, userInfo) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/digitalsignature/getDigitalSignature\", {\r\n            nusercode: nusercode, userInfo: userInfo\r\n        })\r\n            .then(response => {\r\n                let responseData = response.data;\r\n                let selectedDigiSign = responseData !== \"\" ? responseData : {}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openCPModal: true,\r\n                        loading: false,\r\n                        screenName: \"IDS_DIGITALSIGNATURE\",\r\n                        operation: \"update\",\r\n                        selectedDigiSign,\r\n                        isInitialRender: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const changeOwner = (inputData) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/changeOwner\", {\r\n            ...inputData\r\n        })\r\n            .then(response => {\r\n                const responseData = response.data;\r\n                const inputParam = {\r\n                    userInfo: responseData.UserInfo,\r\n                    menuDesign: responseData.MenuDesign,\r\n                    userRoleControlRights: responseData.UserRoleControlRights,\r\n                    userFormControlProperties: responseData.UserFormControlproperties,\r\n                    transactionValidation: responseData.TransactionValidation,\r\n                    displayName: \"\",\r\n                    userMultiRole: responseData.UserMultiRole,\r\n                    isDeputyLogin: true,\r\n                    // settings: responseData.Settings,\r\n                    // deputyUser: response.data.DeputyUser,\r\n                    // deputyUserRole: response.data.DeputyUserRole,\r\n                    loading: false,\r\n                    masterData: [],\r\n                    navigation: \"home\",\r\n                    inputParam: {},\r\n                    openRoleBox: false,\r\n                    userImagePath: responseData.UserImagePath,\r\n                    profileColor: responseData.UserImagePath === \"\" ? getRandomColor([240, 360], [90, 100], [0, 95], [1, 1]) : \"#ff0000\",\r\n                    idleneed: true\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: inputParam\r\n                });\r\n                dispatch(getListStaticDashBoard(response.data.UserInfo, 1));\r\n                dispatch(getHomeDashBoard(response.data.UserInfo, 0, false));\r\n                dispatch(getListAlert(response.data.UserInfo));\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const logOutAuditAction = (inputData, languageList) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('login/insertAuditAction', {\r\n            ...inputData,\r\n            nFlag: 2\r\n        })\r\n            .then(response => {\r\n                languageList &&\r\n                    languageList.map(x => {\r\n                        loadMessages({}, x.slanguagetypecode);\r\n                    })\r\n                dispatch(navPage(\"login\"))\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const elnLoginAction = (inputParam, serverUrl, uiUrl) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(serverUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (response !== null && response.data.objResponse !== null) {\r\n                    if (response.data.objResponse.status) {\r\n                        if (uiUrl) {\r\n                            let user = response;\r\n                            let elnURL = uiUrl + \"#\" + user.data.username + \"$\" + user.data.password;\r\n                            window.open(elnURL, '_blank');\r\n                        } else {\r\n                            toast.info(intl.FormattedMessage({\r\n                                id: \"IDS_ELNUIURLNOTAVAILABLE\"\r\n                            }))\r\n                        }\r\n                    } else {\r\n                        toast.info(response.data.objResponse.information);\r\n                    }\r\n                    // if(!$(\"#appsdetails\").is(\":hidden\")){\r\n                    //     $('#appsdetails').addClass(\"dp-none\");\r\n                    // }\r\n                };\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const sdmsLoginAction = (inputParam, serverUrl, sdmsUIUrl) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(serverUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (response !== null && response.data.status) {\r\n                    if (response.data.status) {\r\n                        const sdmsURL = sdmsUIUrl + \"?un=\" + response.data.username + \"&pd=\" + response.data.password + \"&sc=\" + inputParam.sSiteCode;\r\n                        window.open(sdmsURL, '_blank');\r\n                    } else {\r\n                        toast.info(response.Message);\r\n                    }\r\n                } else {\r\n                    toast.info(intl.FormattedMessage({\r\n                        id: \"IDS_CHECKSYNCSERVICE\"\r\n                    }));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport const getUsersiteRole = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('login/changeSite', {\r\n            \"usersSite\": inputParam.selectedRecord.nusersitecode.item\r\n        })\r\n            .then(response => {\r\n                const roleMap = constructOptionList(response.data.UserMultiRole || [], \"nusermultirolecode\", \"suserrolename\", false, false, true, \"ndefaultrole\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loginUserRole: roleMap.get(\"OptionList\"),\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            nusermultirolecode: roleMap.get(\"DefaultValue\") ?\r\n                                roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\"\r\n\r\n\r\n                        },\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const checkPassword = (inputParam, selectedRecord) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getlogintypevalidation\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            nusercode: response.data.Users.nusercode\r\n                        },\r\n                        userInfo: {\r\n                            nlogintypecode: inputParam.nlogintypecode\r\n                        },\r\n                        openCPModal: response.data.PassFlag === 6 ? true : false,\r\n                        passwordPolicy: response.data.PasswordPolicy,\r\n                        screenName: \"IDS_CREATEPASSWORD\",\r\n                        loading: false,\r\n                        PassFlag: response.data.PassFlag,\r\n                        createPwdRecord: {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getDashBoardForHome(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/staticdashboard/getListStaticDashBoard\", { 'userinfo': inputParam.data.userInfo })\r\n\r\n            .then(response => {\r\n\r\n                let respObject = { masterDataStatic: response.data, loading: false, userInfo: inputParam.data.userInfo };\r\n                if (response.data !== null && Object.keys(response.data).length > 0) {\r\n                    respObject = { ...inputParam.data, ...respObject, currentPageNo: -1 };\r\n                }\r\n                dispatch(getHomeDashBoard(inputParam.data.userInfo, 0, false, respObject));\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}