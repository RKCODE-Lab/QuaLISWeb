{"ast":null,"code":"import { intl } from '../../components/App';\nimport { convertDateTimetoString, formatInputDate } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\nexport function fnCheckBatchComponentMandatory(Components) {\n  // Components.map(component => {\n  for (var i = 0; i < Components.length; i++) {\n    if (Components[i].smanuflotno.length <= 0) {\n      // alert('IDS_ENTERMANUFLOTNOFOR ' + Components[i].scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERMANUFLOTNOFOR\"\n      }) + Components[i].scomponentname;\n    } else if (Components[i].nnoofcontainer && Components[i].nnoofcontainer.length <= 0) {\n      // alert('IDS_ENTERNOOFCONTFOR' + Components[i].scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERNOOFCONTFOR\"\n      }) + Components[i].scomponentname; // return ('IDS_ENTERNOOFCONTFOR' + Components[i].scomponentname);\n    } else if (Components[i].dreceiveddate === null) {\n      // alert('IDS_ENTERMANUFLOTNOFOR' + Components[i].scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERMANUFLOTNOFOR\"\n      }) + Components[i].scomponentname; // return ('IDS_ENTERMANUFLOTNOFOR' + Components[i].scomponentname);\n    }\n  }\n\n  return true;\n}\nexport function fnCheckBatchProtocolComponentMandatory(Components) {\n  //Components.map(component => {\n  for (var i = 0; i < Components.length; i++) {\n    if (Components[i].smanuflotno.length <= 0) {\n      // alert('IDS_ENTERMANUFLOTNOFOR ' + {} + component.scomponentname);\n      //return (intl.formatMessage({ id: 'IDS_ENTERMANUFLOTNOFOR ' }) + {} + Components[i].scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERMANUFLOTNOFOR\"\n      }) + Components[i].scomponentname;\n    } else if (Components[i].dreceiveddate === null) {\n      // alert('IDS_ENTERMANUFLOTNOFOR' + component.scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERMANUFLOTNOFOR\"\n      }) + Components[i].scomponentname;\n    } //return null;\n    //});\n\n  }\n\n  return true;\n}\nexport function checkDuplicateComponentandManufLot(Components) {\n  let copiedArrays = [...Components];\n  let DuplicateComponent = [];\n  let bReturnFlag = true;\n  Components.map(component => {\n    copiedArrays.forEach(componentArray => {\n      component.slno !== componentArray.slno && component.smanuflotno === componentArray.smanuflotno && component.scomponentname === componentArray.scomponentname && DuplicateComponent.push(component);\n    });\n    return null;\n  });\n\n  if (DuplicateComponent.length > 0) {\n    let smanuflotno = DuplicateComponent[0].smanuflotno;\n    let scomponentname = DuplicateComponent[0].scomponentname; // Alert.show(resourceManager.getString('LocalizedStrings', 'IDS_DUPLICATEMANFNO') + \" \" + smanuflotno + \" for \" + scomponentname, resourceManager.getString('LocalizedStrings', 'IDS_WARNING'));\n\n    bReturnFlag = intl.formatMessage({\n      id: 'IDS_DUPLICATEMANFNO'\n    }) + \" \" + smanuflotno + \" \" + intl.formatMessage({\n      id: 'IDS_FOR'\n    }) + \" \" + scomponentname;\n  }\n\n  return bReturnFlag;\n}\nexport function TestListManipulation(Components, Test) {\n  let ArrayList = [];\n  Components.map(component => {\n    return ArrayList = Test && Test[component.slno] ? [...ArrayList, ...Test[component.slno]] : ArrayList;\n  });\n  return ArrayList ? ArrayList : [];\n}\nexport function getRegistrationGeneral(selectedRecord) {\n  let sampleRegistrationGeneral = {};\n  sampleRegistrationGeneral[\"nrmsno\"] = selectedRecord.nrmsno ? selectedRecord.nrmsno.value : -1;\n  sampleRegistrationGeneral[\"nmanufcode\"] = selectedRecord.nmanufcode ? selectedRecord.nmanufcode : -1;\n  sampleRegistrationGeneral[\"nmanufsitecode\"] = selectedRecord.nmanufsitecode ? selectedRecord.nmanufsitecode : -1;\n  sampleRegistrationGeneral[\"nclientcode\"] = selectedRecord.nclientcode ? selectedRecord.nclientcode.value : -1;\n  sampleRegistrationGeneral[\"nclientsitecode\"] = selectedRecord.nclientsitecode ? selectedRecord.nclientsitecode.value : -1;\n  sampleRegistrationGeneral[\"nproductmanufcode\"] = selectedRecord.nproductmanufcode ? selectedRecord.nproductmanufcode : -1;\n  sampleRegistrationGeneral[\"nproductmahcode\"] = selectedRecord.nproductmahcode ? selectedRecord.nproductmahcode : -1;\n  sampleRegistrationGeneral[\"neprotocolcode\"] = selectedRecord.neprotocolcode ? selectedRecord.neprotocolcode.value : -1;\n  sampleRegistrationGeneral[\"nplasmafilecode\"] = selectedRecord.nplasmafilecode ? selectedRecord.nplasmafilecode : -1;\n  return sampleRegistrationGeneral;\n}\nexport function getRegistration(masterData, selectedRecord, selectedSpec, templateList, userInfo, defaulttimezone) {\n  let sampleRegistration = {};\n  let dateList = [];\n  sampleRegistration[\"nsampletypecode\"] = masterData.RealSampleTypeValue.nsampletypecode;\n  sampleRegistration[\"nregtypecode\"] = masterData.RealRegTypeValue.nregtypecode;\n  sampleRegistration[\"nregsubtypecode\"] = masterData.RealRegSubTypeValue.nregsubtypecode;\n  sampleRegistration[\"nproductcatcode\"] = selectedRecord['Product Category'] ? selectedRecord['Product Category'].value : -1;\n  sampleRegistration[\"nproductcode\"] = selectedRecord['Product'] ? selectedRecord['Product'].value : -1;\n  sampleRegistration[\"ntemplatemanipulationcode\"] = selectedSpec.ntemplatemanipulationcode;\n  sampleRegistration[\"nallottedspeccode\"] = selectedSpec.nallottedspeccode.value;\n  sampleRegistration[\"jsondata\"] = {};\n  templateList && templateList.map(row => {\n    row.children.map(column => {\n      column.children.map(component => {\n        if (component.hasOwnProperty(\"children\")) {\n          component.children.map(componentrow => {\n            if (componentrow.inputtype === \"combo\") {\n              sampleRegistration[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? {\n                value: selectedRecord[componentrow.label].value,\n                label: selectedRecord[componentrow.label].label\n              } : -1;\n            } else if (componentrow.inputtype === \"date\") {\n              if (componentrow.mandatory) {\n                sampleRegistration[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo);\n              } else {\n                sampleRegistration[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? convertDateTimetoString(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? convertDateTimetoString(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : \"\";\n              }\n\n              if (componentrow.timezone) {\n                sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ? {\n                  value: selectedRecord[`tz${componentrow.label}`].value,\n                  label: selectedRecord[`tz${componentrow.label}`].label\n                } : defaulttimezone ? defaulttimezone : -1;\n              }\n\n              dateList.push(componentrow.label);\n            } else {\n              sampleRegistration[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\";\n            }\n          });\n        } else {\n          if (component.inputtype === \"combo\") {\n            sampleRegistration[\"jsondata\"][component.label] = selectedRecord[component.label] ? {\n              value: selectedRecord[component.label].value,\n              label: selectedRecord[component.label].label\n            } : -1;\n          } else if (component.inputtype === \"date\") {\n            if (component.mandatory) {\n              sampleRegistration[\"jsondata\"][component.label] = convertDateTimetoString(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo);\n            } else {\n              sampleRegistration[\"jsondata\"][component.label] = component.loadcurrentdate ? convertDateTimetoString(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? convertDateTimetoString(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : \"\";\n            }\n\n            if (component.timezone) {\n              sampleRegistration[\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ? {\n                value: selectedRecord[`tz${component.label}`].value,\n                label: selectedRecord[`tz${component.label}`].label\n              } : defaulttimezone ? defaulttimezone : -1;\n            }\n\n            dateList.push(component.label);\n          } else {\n            sampleRegistration[\"jsondata\"][component.label] = selectedRecord[component.label] ? selectedRecord[component.label] : \"\";\n          }\n        }\n      });\n    });\n  });\n  const param = {\n    sampleRegistration,\n    dateList\n  };\n  return param;\n} // export function getComponentListfromUnwantedAttr(Components) {\n//     Components.map(component => {\n//         // if (component.ncomponentcode !== null && typeof component.ncomponentcode === \"object\") {\n//         //     component.ncomponentcode = component.ncomponentcode.value;\n//         // }\n//         // component['jsondata']['ssubsamplename'] = component['ssubsamplename'] ? component['ssubsamplename'] : \"\"\n//         // component['jsondata']['ssampleqty'] = component['ssampleqty'] ? component['ssampleqty'] : \"\"\n//         // component['jsondata']['nunitcode'] = { value: component.nunitcode, label: component.sunitname };\n//         // component['jsondata']['scomments'] = component['scomments'] ? component['scomments'] : \"\"\n//         return component;\n//     });\n//     return Components;\n// }\n\nexport function checkSourceForAllPreregno(Components, Source) {\n  Components.map(component => {\n    //   return Source[component.slno] === undefined &&  false;\n    if (Source[component.slno] === undefined) {\n      return false;\n    }\n\n    return component;\n  });\n  return true;\n}\nexport function checkTestPresent(Test, Samples) {\n  const filterArray = Samples.filter(function (x) {\n    return !Test.some(function (y) {\n      return x[\"npreregno\"] === y[\"npreregno\"] && y[\"ntransactionstatus\"] !== transactionStatus.REJECT && y[\"ntransactionstatus\"] !== transactionStatus.CANCELLED;\n    });\n  });\n  return filterArray.length > 0 ? false : true;\n} // //added by perumalraj on 23/12/2020\n// //compare two arrays of object and filter the record which are not present in the second array and vice versa\n// export function filterStatusBasedOnTwoArrays(firstArray, secondArray, PrimaryKey) {\n//     const filterArray = firstArray.filter(function (x) {\n//         return secondArray.some(function (y) {\n//             return x[PrimaryKey] === y[PrimaryKey]\n//         })\n//     });\n//     return filterArray;\n// }\n\nexport function getRegistrationRoutine(selectedRecord) {\n  let sampleRegistrationRoutine = {};\n  sampleRegistrationRoutine[\"nclientcode\"] = selectedRecord.nclientcode ? selectedRecord.nclientcode.value : -1;\n  sampleRegistrationRoutine[\"nmanufcode\"] = selectedRecord.nmanufcode ? selectedRecord.nmanufcode.value : -1;\n  sampleRegistrationRoutine[\"nsuppliercode\"] = selectedRecord.nsuppliercode ? selectedRecord.nsuppliercode.value : -1;\n  sampleRegistrationRoutine[\"ssamplecondition\"] = selectedRecord.ssamplecondition ? selectedRecord.ssamplecondition : '';\n  sampleRegistrationRoutine[\"nstorageconditioncode\"] = selectedRecord.nstorageconditioncode ? selectedRecord.nstorageconditioncode.value : -1;\n  sampleRegistrationRoutine[\"dreceiveddate\"] = selectedRecord[\"dreceiveddate\"] ? formatInputDate(selectedRecord[\"dreceiveddate\"], false) : 'null';\n  sampleRegistrationRoutine[\"sreceiveddate\"] = selectedRecord[\"dreceiveddate\"] ? formatInputDate(selectedRecord[\"dreceiveddate\"], false) : 'null';\n  sampleRegistrationRoutine[\"ntzdreceivedate\"] = selectedRecord.ntzdreceivedate ? selectedRecord.ntzdreceivedate.value : -1;\n  sampleRegistrationRoutine[\"stzdreceivedate\"] = selectedRecord.stzdreceivedate ? selectedRecord.stzdreceivedate.label : -1;\n  sampleRegistrationRoutine[\"ncontainertypecode\"] = selectedRecord.ncontainertypecode ? selectedRecord.ncontainertypecode.value : -1;\n  sampleRegistrationRoutine[\"sourfile\"] = selectedRecord.sourfile ? selectedRecord.sourfile : '';\n  sampleRegistrationRoutine[\"sbatchno\"] = selectedRecord.sbatchno ? selectedRecord.sbatchno : '';\n  sampleRegistrationRoutine[\"slotno\"] = selectedRecord.slotno ? selectedRecord.slotno : '';\n  sampleRegistrationRoutine[\"ndisposition\"] = selectedRecord.ndisposition ? selectedRecord.ndisposition.value : -1;\n  sampleRegistrationRoutine[\"stotalqty\"] = selectedRecord.stotalqty ? selectedRecord.stotalqty : '0';\n  sampleRegistrationRoutine[\"ntotalunitcode\"] = selectedRecord.ntotalunitcode ? selectedRecord.ntotalunitcode.value : -1;\n  sampleRegistrationRoutine[\"npriority\"] = selectedRecord.npriority ? selectedRecord.npriority.value : -1;\n  sampleRegistrationRoutine[\"sdeadline\"] = selectedRecord.sdeadline ? selectedRecord.sdeadline : '0';\n  sampleRegistrationRoutine[\"nperiodconfigcode\"] = selectedRecord.nperiodconfigcode ? selectedRecord.nperiodconfigcode.value : -1;\n  sampleRegistrationRoutine[\"sremarks\"] = selectedRecord.sremarks ? selectedRecord.sremarks : null;\n  sampleRegistrationRoutine[\"sreportremarks\"] = selectedRecord.sreportremarks ? selectedRecord.sreportremarks : null;\n  sampleRegistrationRoutine[\"sdeviationcomments\"] = selectedRecord.sdeviationcomments ? selectedRecord.sdeviationcomments : null;\n  return sampleRegistrationRoutine;\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/RegistrationValidation.jsx"],"names":["intl","convertDateTimetoString","formatInputDate","transactionStatus","fnCheckBatchComponentMandatory","Components","i","length","smanuflotno","formatMessage","id","scomponentname","nnoofcontainer","dreceiveddate","fnCheckBatchProtocolComponentMandatory","checkDuplicateComponentandManufLot","copiedArrays","DuplicateComponent","bReturnFlag","map","component","forEach","componentArray","slno","push","TestListManipulation","Test","ArrayList","getRegistrationGeneral","selectedRecord","sampleRegistrationGeneral","nrmsno","value","nmanufcode","nmanufsitecode","nclientcode","nclientsitecode","nproductmanufcode","nproductmahcode","neprotocolcode","nplasmafilecode","getRegistration","masterData","selectedSpec","templateList","userInfo","defaulttimezone","sampleRegistration","dateList","RealSampleTypeValue","nsampletypecode","RealRegTypeValue","nregtypecode","RealRegSubTypeValue","nregsubtypecode","ntemplatemanipulationcode","nallottedspeccode","row","children","column","hasOwnProperty","componentrow","inputtype","label","mandatory","Date","loadcurrentdate","timezone","param","checkSourceForAllPreregno","Source","undefined","checkTestPresent","Samples","filterArray","filter","x","some","y","REJECT","CANCELLED","getRegistrationRoutine","sampleRegistrationRoutine","nsuppliercode","ssamplecondition","nstorageconditioncode","ntzdreceivedate","stzdreceivedate","ncontainertypecode","sourfile","sbatchno","slotno","ndisposition","stotalqty","ntotalunitcode","npriority","sdeadline","nperiodconfigcode","sremarks","sreportremarks","sdeviationcomments"],"mappings":"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","sourcesContent":["\r\nimport { intl } from '../../components/App';\r\nimport { convertDateTimetoString, formatInputDate } from '../../components/CommonScript';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nexport function fnCheckBatchComponentMandatory(Components) {\r\n    // Components.map(component => {\r\n    for (var i = 0; i < Components.length; i++) {\r\n        if ((\r\n            Components[i].smanuflotno).length <= 0) {\r\n            // alert('IDS_ENTERMANUFLOTNOFOR ' + Components[i].scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERMANUFLOTNOFOR\" }) + Components[i].scomponentname);\r\n\r\n        } else if (Components[i].nnoofcontainer && (Components[i].nnoofcontainer).length <= 0) {\r\n            // alert('IDS_ENTERNOOFCONTFOR' + Components[i].scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERNOOFCONTFOR\" }) + Components[i].scomponentname);\r\n            // return ('IDS_ENTERNOOFCONTFOR' + Components[i].scomponentname);\r\n        } else if (Components[i].dreceiveddate === null) {\r\n            // alert('IDS_ENTERMANUFLOTNOFOR' + Components[i].scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERMANUFLOTNOFOR\" }) + Components[i].scomponentname);\r\n            // return ('IDS_ENTERMANUFLOTNOFOR' + Components[i].scomponentname);\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexport function fnCheckBatchProtocolComponentMandatory(Components) {\r\n    //Components.map(component => {\r\n    for (var i = 0; i < Components.length; i++) {\r\n        if ((Components[i].smanuflotno).length <= 0) {\r\n            // alert('IDS_ENTERMANUFLOTNOFOR ' + {} + component.scomponentname);\r\n            //return (intl.formatMessage({ id: 'IDS_ENTERMANUFLOTNOFOR ' }) + {} + Components[i].scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERMANUFLOTNOFOR\" }) + Components[i].scomponentname);\r\n        } else if (Components[i].dreceiveddate === null) {\r\n            // alert('IDS_ENTERMANUFLOTNOFOR' + component.scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERMANUFLOTNOFOR\" }) + Components[i].scomponentname);\r\n        }\r\n        //return null;\r\n        //});\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function checkDuplicateComponentandManufLot(Components) {\r\n    let copiedArrays = [...Components];\r\n    let DuplicateComponent = [];\r\n    let bReturnFlag = true;\r\n    Components.map(component => {\r\n        copiedArrays.forEach(componentArray => {\r\n            (component.slno !== componentArray.slno && component.smanuflotno === componentArray.smanuflotno &&\r\n                component.scomponentname === componentArray.scomponentname) && DuplicateComponent.push(component);\r\n        })\r\n        return null;\r\n    });\r\n    if (DuplicateComponent.length > 0) {\r\n        let smanuflotno = DuplicateComponent[0].smanuflotno;\r\n        let scomponentname = DuplicateComponent[0].scomponentname;\r\n        // Alert.show(resourceManager.getString('LocalizedStrings', 'IDS_DUPLICATEMANFNO') + \" \" + smanuflotno + \" for \" + scomponentname, resourceManager.getString('LocalizedStrings', 'IDS_WARNING'));\r\n        bReturnFlag = intl.formatMessage({ id: 'IDS_DUPLICATEMANFNO' }) + \" \" + smanuflotno + \" \" + intl.formatMessage({ id: 'IDS_FOR' }) + \" \" + scomponentname;\r\n    }\r\n    return bReturnFlag;\r\n}\r\nexport function TestListManipulation(Components, Test) {\r\n    let ArrayList = [];\r\n    Components.map(component => {\r\n        return ArrayList = Test && Test[component.slno] ? [...ArrayList, ...Test[component.slno]] : ArrayList;\r\n    });\r\n    return ArrayList ? ArrayList : [];\r\n   \r\n\r\n}\r\nexport function getRegistrationGeneral(selectedRecord) {\r\n\r\n    let sampleRegistrationGeneral = {};\r\n    sampleRegistrationGeneral[\"nrmsno\"] = selectedRecord.nrmsno ? selectedRecord.nrmsno.value : -1;\r\n    sampleRegistrationGeneral[\"nmanufcode\"] = selectedRecord.nmanufcode ? selectedRecord.nmanufcode : -1;\r\n    sampleRegistrationGeneral[\"nmanufsitecode\"] = selectedRecord.nmanufsitecode ? selectedRecord.nmanufsitecode : -1;\r\n    sampleRegistrationGeneral[\"nclientcode\"] = selectedRecord.nclientcode ? selectedRecord.nclientcode.value : -1;\r\n    sampleRegistrationGeneral[\"nclientsitecode\"] = selectedRecord.nclientsitecode ? selectedRecord.nclientsitecode.value : -1;\r\n    sampleRegistrationGeneral[\"nproductmanufcode\"] = selectedRecord.nproductmanufcode ? selectedRecord.nproductmanufcode : -1;\r\n    sampleRegistrationGeneral[\"nproductmahcode\"] = selectedRecord.nproductmahcode ? selectedRecord.nproductmahcode : -1;\r\n    sampleRegistrationGeneral[\"neprotocolcode\"] = selectedRecord.neprotocolcode ? selectedRecord.neprotocolcode.value : -1;\r\n    sampleRegistrationGeneral[\"nplasmafilecode\"] = selectedRecord.nplasmafilecode ? selectedRecord.nplasmafilecode : -1;\r\n    return sampleRegistrationGeneral;\r\n}\r\n\r\nexport function getRegistration(masterData, selectedRecord, selectedSpec, \r\n    templateList, userInfo, defaulttimezone) {\r\n    let sampleRegistration = {};\r\n    let dateList=[]\r\n    sampleRegistration[\"nsampletypecode\"] = masterData.RealSampleTypeValue.nsampletypecode;\r\n    sampleRegistration[\"nregtypecode\"] = masterData.RealRegTypeValue.nregtypecode;\r\n    sampleRegistration[\"nregsubtypecode\"] = masterData.RealRegSubTypeValue.nregsubtypecode;\r\n    sampleRegistration[\"nproductcatcode\"] = selectedRecord['Product Category'] ? selectedRecord['Product Category'].value : -1;\r\n    sampleRegistration[\"nproductcode\"] = selectedRecord['Product'] ? selectedRecord['Product'].value : -1;\r\n    sampleRegistration[\"ntemplatemanipulationcode\"] = selectedSpec.ntemplatemanipulationcode;\r\n    sampleRegistration[\"nallottedspeccode\"] = selectedSpec.nallottedspeccode.value;\r\n    sampleRegistration[\"jsondata\"] = {}\r\n    templateList && templateList.map(row => {\r\n        row.children.map(column => {\r\n            column.children.map(component => {\r\n                if (component.hasOwnProperty(\"children\")) {\r\n                    component.children.map(componentrow => {\r\n                        if (componentrow.inputtype === \"combo\") {\r\n                            sampleRegistration[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                { value: selectedRecord[componentrow.label].value, label: selectedRecord[componentrow.label].label } : -1\r\n                        }\r\n                        else if (componentrow.inputtype === \"date\") {\r\n                            if (componentrow.mandatory) {\r\n                                sampleRegistration[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label] ?\r\n                                    selectedRecord[componentrow.label] : new Date(), userInfo);\r\n                            } else {\r\n                                sampleRegistration[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                    convertDateTimetoString(selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : new Date(), userInfo) :\r\n                                    selectedRecord[componentrow.label] ? convertDateTimetoString(selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : new Date(), userInfo) : \"\";\r\n                            }\r\n                            if (componentrow.timezone) {\r\n                                sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                                    { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                                    defaulttimezone ? defaulttimezone : -1\r\n                            }\r\n                            dateList.push(componentrow.label)\r\n                        }\r\n\r\n                        else {\r\n                            sampleRegistration[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                selectedRecord[componentrow.label] : \"\"\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    if (component.inputtype === \"combo\") {\r\n                        sampleRegistration[\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                            { value: selectedRecord[component.label].value, label: selectedRecord[component.label].label } : -1\r\n                    }\r\n                    else if (component.inputtype === \"date\") {\r\n                        if (component.mandatory) {\r\n                            sampleRegistration[\"jsondata\"][component.label] = convertDateTimetoString(selectedRecord[component.label] ?\r\n                                selectedRecord[component.label] : new Date(), userInfo);\r\n                        } else {\r\n                            sampleRegistration[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                convertDateTimetoString(selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                selectedRecord[component.label] ? convertDateTimetoString(selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                        }\r\n                        if (component.timezone) {\r\n                            sampleRegistration[\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ?\r\n                                { value: selectedRecord[`tz${component.label}`].value, label: selectedRecord[`tz${component.label}`].label } :\r\n                                defaulttimezone ? defaulttimezone : -1\r\n                        }\r\n                        dateList.push(component.label)\r\n                    }\r\n                    else {\r\n                        sampleRegistration[\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                            selectedRecord[component.label] : \"\"\r\n                    }\r\n                }\r\n\r\n            }\r\n            )\r\n        })\r\n    })\r\n    const param={sampleRegistration,dateList}\r\n    return param;\r\n}\r\n// export function getComponentListfromUnwantedAttr(Components) {\r\n//     Components.map(component => {\r\n//         // if (component.ncomponentcode !== null && typeof component.ncomponentcode === \"object\") {\r\n//         //     component.ncomponentcode = component.ncomponentcode.value;\r\n//         // }\r\n\r\n//         // component['jsondata']['ssubsamplename'] = component['ssubsamplename'] ? component['ssubsamplename'] : \"\"\r\n//         // component['jsondata']['ssampleqty'] = component['ssampleqty'] ? component['ssampleqty'] : \"\"\r\n//         // component['jsondata']['nunitcode'] = { value: component.nunitcode, label: component.sunitname };\r\n//         // component['jsondata']['scomments'] = component['scomments'] ? component['scomments'] : \"\"\r\n\r\n    \r\n//         return component;\r\n//     });\r\n//     return Components;\r\n// }\r\n\r\nexport function checkSourceForAllPreregno(Components, Source) {\r\n    Components.map(component => {\r\n        //   return Source[component.slno] === undefined &&  false;\r\n        if (Source[component.slno] === undefined) {\r\n            return false;\r\n        }\r\n        return component;\r\n    });\r\n    return true;\r\n}\r\nexport function checkTestPresent(Test, Samples) {\r\n\r\n    const filterArray = Samples.filter(function (x) {\r\n        return !Test.some(function (y) {\r\n            return x[\"npreregno\"] === y[\"npreregno\"] && (y[\"ntransactionstatus\"] !== transactionStatus.REJECT && y[\"ntransactionstatus\"] !== transactionStatus.CANCELLED)\r\n        });\r\n    });\r\n    return filterArray.length > 0 ? false : true\r\n}\r\n\r\n// //added by perumalraj on 23/12/2020\r\n// //compare two arrays of object and filter the record which are not present in the second array and vice versa\r\n// export function filterStatusBasedOnTwoArrays(firstArray, secondArray, PrimaryKey) {\r\n\r\n//     const filterArray = firstArray.filter(function (x) {\r\n//         return secondArray.some(function (y) {\r\n//             return x[PrimaryKey] === y[PrimaryKey]\r\n//         })\r\n//     });\r\n//     return filterArray;\r\n// }\r\n\r\nexport function getRegistrationRoutine(selectedRecord) {\r\n\r\n    let sampleRegistrationRoutine = {};\r\n    sampleRegistrationRoutine[\"nclientcode\"] = selectedRecord.nclientcode ? selectedRecord.nclientcode.value : -1;\r\n    sampleRegistrationRoutine[\"nmanufcode\"] = selectedRecord.nmanufcode ? selectedRecord.nmanufcode.value : -1;\r\n    sampleRegistrationRoutine[\"nsuppliercode\"] = selectedRecord.nsuppliercode ? selectedRecord.nsuppliercode.value : -1;\r\n    sampleRegistrationRoutine[\"ssamplecondition\"] = selectedRecord.ssamplecondition ? selectedRecord.ssamplecondition : '';\r\n    sampleRegistrationRoutine[\"nstorageconditioncode\"] = selectedRecord.nstorageconditioncode ? selectedRecord.nstorageconditioncode.value : -1;\r\n    sampleRegistrationRoutine[\"dreceiveddate\"] = selectedRecord[\"dreceiveddate\"] ? formatInputDate(selectedRecord[\"dreceiveddate\"], false) : 'null';\r\n    sampleRegistrationRoutine[\"sreceiveddate\"] = selectedRecord[\"dreceiveddate\"] ? formatInputDate(selectedRecord[\"dreceiveddate\"], false) : 'null';\r\n    sampleRegistrationRoutine[\"ntzdreceivedate\"] = selectedRecord.ntzdreceivedate ? selectedRecord.ntzdreceivedate.value : -1;\r\n    sampleRegistrationRoutine[\"stzdreceivedate\"] = selectedRecord.stzdreceivedate ? selectedRecord.stzdreceivedate.label : -1;\r\n    sampleRegistrationRoutine[\"ncontainertypecode\"] = selectedRecord.ncontainertypecode ? selectedRecord.ncontainertypecode.value : -1;\r\n    sampleRegistrationRoutine[\"sourfile\"] = selectedRecord.sourfile ? selectedRecord.sourfile : '';\r\n    sampleRegistrationRoutine[\"sbatchno\"] = selectedRecord.sbatchno ? selectedRecord.sbatchno : '';\r\n    sampleRegistrationRoutine[\"slotno\"] = selectedRecord.slotno ? selectedRecord.slotno : '';\r\n    sampleRegistrationRoutine[\"ndisposition\"] = selectedRecord.ndisposition ? selectedRecord.ndisposition.value : -1;\r\n    sampleRegistrationRoutine[\"stotalqty\"] = selectedRecord.stotalqty ? selectedRecord.stotalqty : '0';\r\n    sampleRegistrationRoutine[\"ntotalunitcode\"] = selectedRecord.ntotalunitcode ? selectedRecord.ntotalunitcode.value : -1;\r\n    sampleRegistrationRoutine[\"npriority\"] = selectedRecord.npriority ? selectedRecord.npriority.value : -1;\r\n    sampleRegistrationRoutine[\"sdeadline\"] = selectedRecord.sdeadline ? selectedRecord.sdeadline : '0';\r\n    sampleRegistrationRoutine[\"nperiodconfigcode\"] = selectedRecord.nperiodconfigcode ? selectedRecord.nperiodconfigcode.value : -1;\r\n    sampleRegistrationRoutine[\"sremarks\"] = selectedRecord.sremarks ? selectedRecord.sremarks : null;\r\n    sampleRegistrationRoutine[\"sreportremarks\"] = selectedRecord.sreportremarks ? selectedRecord.sreportremarks : null;\r\n    sampleRegistrationRoutine[\"sdeviationcomments\"] = selectedRecord.sdeviationcomments ? selectedRecord.sdeviationcomments : null;\r\n\r\n    return sampleRegistrationRoutine;\r\n}"]},"metadata":{},"sourceType":"module"}