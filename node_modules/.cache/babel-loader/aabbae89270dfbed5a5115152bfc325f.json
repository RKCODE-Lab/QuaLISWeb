{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboardtypes\\\\charts\\\\PieChart.jsx\";\nimport React from 'react';\nimport { Chart, ChartLegend, ChartSeries, ChartSeriesItem, ChartTooltip, ChartSeriesLabels } from '@progress/kendo-react-charts';\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\nimport { faFilePdf } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Breadcrumb, Col, Nav, Row } from 'react-bootstrap';\nimport { ProductList } from '../../../pages/product/product.styled';\nimport { ReactComponent as ChartRefresh } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/image/chart-refresh.svg\";\nimport { injectIntl } from 'react-intl';\nimport { convertDatetoStringByTimeZone, rearrangeDateFormat } from '../../../components/CommonScript';\nimport ScrollContainer from 'react-indiana-drag-scroll';\nimport { designComponents } from '../../../components/Enumeration';\nimport { toast } from 'react-toastify';\nimport { Attachments } from '../../../components/dropzone/dropzone.styles'; // const mapStateToProps = state => {\n//     return ({ Login: state.Login })\n// }\n\nclass PieChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.exportPDF = () => {\n      this.pdfExportComponent ? this.pdfExportComponent.save() : toast.info(this.props.intl.formatMessage({\n        id: \"IDS_NODATATOEXPORT\"\n      }));\n    };\n\n    this.getValueByComponent = (param, value) => {\n      let componentCode = param.ndesigncomponentcode;\n\n      switch (componentCode) {\n        case 4:\n          return value ? convertDatetoStringByTimeZone(this.props.userInfo, value) : \"-\";\n\n        default:\n          return value;\n      }\n    };\n\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {}\n    };\n  }\n\n  breadcrumDesign(viewDashBoardDesignConfigList) {\n    let breadCrumValue = \"\";\n    let arryalist = [];\n    let selectedRecord = this.props.selectedRecord || {};\n    viewDashBoardDesignConfigList.forEach(item => {\n      if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n        let date = rearrangeDateFormat(this.props.userInfo, item.dataList[0]);\n        breadCrumValue = selectedRecord ? selectedRecord[item.sfieldname] ? convertDatetoStringByTimeZone(this.props.userInfo, selectedRecord[item.sfieldname]) : convertDatetoStringByTimeZone(this.props.userInfo, date) : convertDatetoStringByTimeZone(this.props.userInfo, date);\n      } else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n        let listvalue = [];\n\n        if (selectedRecord && selectedRecord[item.sfieldname]) {\n          listvalue.push({\n            [item.sdisplaymember]: selectedRecord[item.sfieldname].label\n          });\n        } else {\n          listvalue = item.dataList.filter(lst => {\n            return lst[item.sfieldname] === parseInt(item.sdefaultvalue);\n          });\n        }\n\n        breadCrumValue = listvalue && listvalue.length > 0 ? listvalue[0][item.sdisplaymember] : \"-\";\n      } else if (item.ndesigncomponentcode === designComponents.USERINFO) {\n        let listvalue = []; //commenting now for restricting breadcrumbs\n        // if(selectedRecord && selectedRecord[item.sfieldname]) {\n        //     listvalue.push({ [item.sfieldname]: selectedRecord[item.sfieldname] })\n        // }else{\n        //     listvalue.push({ [item.sfieldname]: this.props.userInfo && this.props.userInfo[item.sfieldname] })\n        // }\n        //breadCrumValue = listvalue && listvalue.length > 0 ? listvalue[0][item.sfieldname] : \"-\";\n\n        breadCrumValue = listvalue && listvalue.length == 0 ? \"\" : \"-\";\n      } else {\n        breadCrumValue = selectedRecord ? selectedRecord[item.sfieldname] ? selectedRecord[item.sfieldname] : item.sdefaultvalue : item.sdefaultvalue;\n      }\n\n      if (item.ndesigncomponentcode !== designComponents.USERINFO) {\n        arryalist.push({\n          \"label\": item.sdisplayname,\n          \"value\": breadCrumValue\n        });\n      }\n    }); // console.log(\"data:\", arryalist);\n\n    return /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, arryalist.length > 0 ? /*#__PURE__*/React.createElement(ScrollContainer, {\n      className: \"breadcrumbs-scroll-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Breadcrumb, {\n      className: \"filter-breadcrumbs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 29\n      }\n    }, arryalist.map((item, index) => /*#__PURE__*/React.createElement(Breadcrumb.Item, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 41\n      }\n    }, item[\"label\"], \" \", \" \", \" \"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 41\n      }\n    }, item[\"value\"]))))) : \"\"));\n  }\n\n  render() {\n    // console.log(\"pt:\", this.props);\n    const labelContent = props => {\n      return `${props.category} : ${props.value}`;\n    };\n\n    const renderTooltip = context => {\n      const {\n        category,\n        value\n      } = context.point || context;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }\n      }, category, \": \", value);\n    }; // let breadCrumValue = \"\";\n    // let arryalist = []\n    // this.props.viewDashBoardDesignConfigList && this.props.viewDashBoardDesignConfigList.forEach(item => {\n    //     if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n    //         breadCrumValue = this.covertDatetoString(new Date(item.dataList[0]));\n    //     }\n    //     else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n    //         let listvalue = item.dataList.filter(lst => {\n    //             return lst[item.sfieldname] === parseInt(item.sdefaultvalue);\n    //         });\n    //         breadCrumValue = listvalue && listvalue.length > 0? listvalue[0][item.sdisplaymember]: \"\";\n    //     }\n    //     else {\n    //         breadCrumValue = item.sdefaultvalue;\n    //     }\n    //     arryalist.push({ \"label\": item.sdisplayname, \"value\": breadCrumValue });\n    // })\n\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      className: \"p-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"text-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 25\n      }\n    }, this.props.isStaticDashBoard ? this.props.staticTitle : this.props.dashBoardType.selectedDashBoardTypes && this.props.dashBoardType.selectedDashBoardTypes.sdashboardtypename)), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-inline dropdown badget_menu d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      //className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" \n      href: \"#\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.props.hiddenParam // title={\"ChartRefresh\"}\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REFRESHCHART\"\n      }),\n      onClick: e => this.props.checkParametersAvailable(this.props.dashBoardType.selectedDashBoardTypes, this.props.userInfo, this.props.masterData, this.props.dashBoardTypeNo, this.props.templateCode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ChartRefresh, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      style: {\n        marginLeft: '0.35rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DOWNLOADPDF\"\n      }),\n      href: \"#\",\n      hidden: this.props.hiddenExport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFilePdf,\n      className: \"ActionIconColor\",\n      onClick: () => this.exportPDF(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 33\n      }\n    }))))), this.props.dashBoardType.viewDashBoardDesignConfigList && this.breadcrumDesign(this.props.dashBoardType.viewDashBoardDesignConfigList), this.props.series && this.props.series.length > 0 ? /*#__PURE__*/React.createElement(PDFExport, {\n      ref: component => this.pdfExportComponent = component,\n      paperSize: \"auto\",\n      margin: 40,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 25\n      }\n    }, this.props.chartTypeName === \"pie\" ? /*#__PURE__*/React.createElement(Chart, {\n      style: this.props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ChartTooltip, {\n      render: renderTooltip,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(ChartLegend, {\n      position: \"bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(ChartSeries, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(ChartSeriesItem, {\n      autoFit: \"autofit\",\n      type: \"pie\",\n      data: this.props.series,\n      field: this.props.valueField,\n      categoryField: this.props.categoryField,\n      labels: {\n        visible: true,\n        content: labelContent\n      },\n      overlay: {\n        gradient: \"roundedBevel\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 41\n      }\n    }))) : /*#__PURE__*/React.createElement(Chart, {\n      style: this.props.style,\n      onSeriesClick: item => this.props.chartItemClick(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ChartTooltip, {\n      render: renderTooltip,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(ChartLegend, {\n      position: \"bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(ChartSeries, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(ChartSeriesItem, {\n      autoFit: \"autofit\",\n      type: \"donut\",\n      data: this.props.series,\n      field: this.props.valueField,\n      categoryField: this.props.categoryField,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ChartSeriesLabels, {\n      position: \"outsideEnd\",\n      background: \"none\",\n      content: labelContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 45\n      }\n    }))))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Attachments, {\n      className: \"norecordchart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 29\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_NORECORDSAVAILABLE\"\n    }))));\n  } // covertDatetoString = (value) => {\n  //     const userInfo = this.props.userInfo;\n  //     const dateValue = new Date(value);\n  //     const prevMonth = validateTwoDigitDate(String(dateValue.getMonth() + 1));\n  //     const prevDay = validateTwoDigitDate(String(dateValue.getDate()));\n  //     const dateArray = [];\n  //     const splitChar = userInfo.ssitedatetime && userInfo.ssitedatetime.indexOf(\"/\") !== -1 ? \"/\" : \"-\";\n  //     const firstField = userInfo.ssitedatetime && userInfo.ssitedatetime.split(splitChar)[0];\n  //     const secondField = userInfo.ssitedatetime && userInfo.ssitedatetime.split(splitChar)[1];\n  //         if (firstField === \"dd\"){\n  //             dateArray.push(prevDay);\n  //             dateArray.push(splitChar);\n  //             if (secondField === \"MM\"){\n  //                 dateArray.push(prevMonth);\n  //                 dateArray.push(splitChar);\n  //                 dateArray.push(dateValue.getFullYear());\n  //             }\n  //             else{\n  //                 dateArray.push(dateValue.getFullYear());\n  //                 dateArray.push(splitChar);\n  //                 dateArray.push(prevMonth);\n  //             }\n  //         }\n  //         else  if (firstField === \"MM\"){\n  //             dateArray.push(prevMonth);               \n  //             dateArray.push(splitChar);\n  //             if (secondField === \"dd\"){\n  //                 dateArray.push(prevDay);\n  //                 dateArray.push(splitChar);\n  //                 dateArray.push(dateValue.getFullYear());\n  //             }\n  //             else{\n  //                 dateArray.push(dateValue.getFullYear());\n  //                 dateArray.push(splitChar);\n  //                 dateArray.push(prevDay);                \n  //             }\n  //         }\n  //         else{\n  //             dateArray.push(dateValue.getFullYear());\n  //             dateArray.push(splitChar);\n  //             if (secondField === \"dd\"){\n  //                 dateArray.push(prevDay);\n  //                 dateArray.push(splitChar);\n  //                 dateArray.push(prevMonth);       \n  //             }\n  //             else{\n  //                 dateArray.push(prevMonth);       \n  //                 dateArray.push(splitChar);\n  //                 dateArray.push(prevDay);                \n  //             }\n  //         }\n  //      return dateArray;\n  //     // const fromDateOnly = dateValue.getFullYear() + '-' + prevMonth + '-' + prevDay\n  //     // return fromDateOnly;\n  // }\n\n\n}\n\nexport default injectIntl(PieChart);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/dashboardtypes/charts/PieChart.jsx"],"names":["React","Chart","ChartLegend","ChartSeries","ChartSeriesItem","ChartTooltip","ChartSeriesLabels","PDFExport","faFilePdf","FontAwesomeIcon","Breadcrumb","Col","Nav","Row","ProductList","injectIntl","convertDatetoStringByTimeZone","rearrangeDateFormat","ScrollContainer","designComponents","toast","Attachments","PieChart","Component","constructor","props","exportPDF","pdfExportComponent","save","info","intl","formatMessage","id","getValueByComponent","param","value","componentCode","ndesigncomponentcode","userInfo","state","data","masterStatus","error","selectedRecord","breadcrumDesign","viewDashBoardDesignConfigList","breadCrumValue","arryalist","forEach","item","DATEPICKER","date","dataList","sfieldname","COMBOBOX","listvalue","push","sdisplaymember","label","filter","lst","parseInt","sdefaultvalue","length","USERINFO","sdisplayname","map","index","render","labelContent","category","renderTooltip","context","point","isStaticDashBoard","staticTitle","dashBoardType","selectedDashBoardTypes","sdashboardtypename","hiddenParam","e","checkParametersAvailable","masterData","dashBoardTypeNo","templateCode","marginLeft","hiddenExport","series","component","chartTypeName","style","valueField","categoryField","visible","content","gradient","chartItemClick"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Chart, ChartLegend, ChartSeries, ChartSeriesItem, ChartTooltip, ChartSeriesLabels } from '@progress/kendo-react-charts';\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\nimport { faFilePdf } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Breadcrumb, Col, Nav, Row } from 'react-bootstrap';\r\nimport { ProductList } from '../../../pages/product/product.styled';\r\nimport { ReactComponent as ChartRefresh } from '../../../assets/image/chart-refresh.svg';\r\nimport { injectIntl } from 'react-intl';\r\nimport { convertDatetoStringByTimeZone, rearrangeDateFormat } from '../../../components/CommonScript';\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\nimport { designComponents } from '../../../components/Enumeration';\r\nimport { toast } from 'react-toastify';\r\nimport { Attachments } from '../../../components/dropzone/dropzone.styles';\r\n\r\n// const mapStateToProps = state => {\r\n//     return ({ Login: state.Login })\r\n// }\r\n\r\nclass PieChart extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {}\r\n        }\r\n    }\r\n\r\n    exportPDF = () => {\r\n        this.pdfExportComponent ? this.pdfExportComponent.save()\r\n            : toast.info(this.props.intl.formatMessage({ id: \"IDS_NODATATOEXPORT\" }));\r\n    }\r\n\r\n    breadcrumDesign(viewDashBoardDesignConfigList) {\r\n        let breadCrumValue = \"\";\r\n        let arryalist = [];\r\n        let selectedRecord = this.props.selectedRecord || {}\r\n        \r\n        viewDashBoardDesignConfigList.forEach(item => {\r\n\r\n            if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n                let date = rearrangeDateFormat(this.props.userInfo,item.dataList[0])\r\n                breadCrumValue = selectedRecord ? selectedRecord[item.sfieldname] ? convertDatetoStringByTimeZone(this.props.userInfo, selectedRecord[item.sfieldname]) :\r\n                    convertDatetoStringByTimeZone(this.props.userInfo, date) : convertDatetoStringByTimeZone(this.props.userInfo, date);\r\n            }\r\n            else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                let listvalue = [];\r\n                if (selectedRecord && selectedRecord[item.sfieldname]) {\r\n                    listvalue.push({ [item.sdisplaymember]: selectedRecord[item.sfieldname].label })\r\n                } else {\r\n                    listvalue = item.dataList.filter(lst => {\r\n                        return lst[item.sfieldname] === parseInt(item.sdefaultvalue);\r\n                    });\r\n                }\r\n\r\n                breadCrumValue = listvalue && listvalue.length > 0 ? listvalue[0][item.sdisplaymember] : \"-\";\r\n            }\r\n            else if (item.ndesigncomponentcode === designComponents.USERINFO) {\r\n                let listvalue = [];\r\n                //commenting now for restricting breadcrumbs\r\n                // if(selectedRecord && selectedRecord[item.sfieldname]) {\r\n                //     listvalue.push({ [item.sfieldname]: selectedRecord[item.sfieldname] })\r\n                // }else{\r\n                //     listvalue.push({ [item.sfieldname]: this.props.userInfo && this.props.userInfo[item.sfieldname] })\r\n                // }\r\n                //breadCrumValue = listvalue && listvalue.length > 0 ? listvalue[0][item.sfieldname] : \"-\";\r\n               breadCrumValue = listvalue && listvalue.length == 0 ? \"\" : \"-\";\r\n            }\r\n            else {\r\n                breadCrumValue = selectedRecord ? selectedRecord[item.sfieldname] ? selectedRecord[item.sfieldname] : item.sdefaultvalue : item.sdefaultvalue;\r\n            }\r\n            if(item.ndesigncomponentcode !== designComponents.USERINFO){\r\n                arryalist.push({ \"label\": item.sdisplayname, \"value\": breadCrumValue });\r\n            }\r\n            \r\n        });\r\n        // console.log(\"data:\", arryalist);\r\n\r\n        return (\r\n\r\n            < Row >\r\n                <Col md={12} className=\"p-0\">\r\n                    {arryalist.length > 0 ?\r\n                        < ScrollContainer className=\"breadcrumbs-scroll-container\">\r\n                            <Breadcrumb className=\"filter-breadcrumbs\">\r\n                                {arryalist.map((item, index) =>\r\n                                    <Breadcrumb.Item key={index}>\r\n                                        <span>{item[\"label\"]}{\" \"} {\" \"}</span>\r\n                                        <span>{item[\"value\"]}</span>\r\n                                    </Breadcrumb.Item>\r\n                                )}\r\n                            </Breadcrumb>\r\n                        </ScrollContainer> : \"\"}\r\n                </Col >\r\n            </Row >\r\n        )\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        // console.log(\"pt:\", this.props);\r\n        const labelContent = (props) => {\r\n            return `${props.category} : ${props.value}`;\r\n        }\r\n        const renderTooltip = (context) => {\r\n            const { category, value } = context.point || context;\r\n            return (<div>{category}: {value}</div>);\r\n        };\r\n        // let breadCrumValue = \"\";\r\n        // let arryalist = []\r\n        // this.props.viewDashBoardDesignConfigList && this.props.viewDashBoardDesignConfigList.forEach(item => {\r\n\r\n        //     if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n        //         breadCrumValue = this.covertDatetoString(new Date(item.dataList[0]));\r\n        //     }\r\n        //     else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n        //         let listvalue = item.dataList.filter(lst => {\r\n        //             return lst[item.sfieldname] === parseInt(item.sdefaultvalue);\r\n        //         });\r\n        //         breadCrumValue = listvalue && listvalue.length > 0? listvalue[0][item.sdisplaymember]: \"\";\r\n        //     }\r\n        //     else {\r\n        //         breadCrumValue = item.sdefaultvalue;\r\n        //     }\r\n        //     arryalist.push({ \"label\": item.sdisplayname, \"value\": breadCrumValue });\r\n        // })\r\n\r\n\r\n        return (\r\n            <>\r\n                {//this.props.filterParam && \r\n                    // this.props.masterData.viewDashBoardDesignConfigList && this.props.selectedRecord &&\r\n                    //     <Row>\r\n                    //         <Col md={12} className=\"p-0\">\r\n                    //             <ScrollContainer className=\"breadcrumbs-scroll-container\">\r\n                    //                 <Breadcrumb className=\"filter-breadcrumbs\">\r\n                    //                     {//this.props.filterParam\r\n                    //                     this.props.viewDashBoardDesignConfigList.map((param, index) =>\r\n                    //                         <Breadcrumb.Item key={index}>\r\n                    //                             <span>{param.sdisplayname}{\" \"}:{\" \"}</span>\r\n                    //                             <span>{this.getValueByComponent(param, this.props.selectedRecord[param.sfieldname])}</span>\r\n                    //                         </Breadcrumb.Item>\r\n                    //                     )}\r\n                    //                 </Breadcrumb>\r\n                    //             </ScrollContainer>\r\n                    //         </Col>\r\n                    //     </Row>\r\n                }\r\n\r\n\r\n                {/* {this.props.dashBoardType.viewDashBoardDesignConfigList &&\r\n                    this.breadcrumDesign(this.props.dashBoardType.viewDashBoardDesignConfigList)\r\n                }  */}\r\n\r\n                <Row className=\"p-2\">\r\n                    <Col md={8} >\r\n                        {/* <h4 hidden={this.props.hiddenExport} className=\"text-left\"> */}\r\n                        <h4 className=\"text-left\">\r\n                            {this.props.isStaticDashBoard ? this.props.staticTitle : this.props.dashBoardType.selectedDashBoardTypes\r\n                                && this.props.dashBoardType.selectedDashBoardTypes.sdashboardtypename}\r\n                        </h4>\r\n                    </Col>\r\n                    <Col md={4} >\r\n                        <ProductList className=\"d-inline dropdown badget_menu d-flex justify-content-end\">\r\n                            <Nav.Link\r\n                                //className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" \r\n                                href=\"#\"\r\n                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                hidden={this.props.hiddenParam}\r\n                                // title={\"ChartRefresh\"}\r\n                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESHCHART\" })}\r\n                                onClick={(e) => this.props.checkParametersAvailable(this.props.dashBoardType.selectedDashBoardTypes, this.props.userInfo, this.props.masterData,\r\n                                    this.props.dashBoardTypeNo, this.props.templateCode)} >\r\n                                <ChartRefresh className=\"custom_icons\" width=\"20\" height=\"20\" style={{ marginLeft: '0.35rem' }} />\r\n\r\n                            </Nav.Link>\r\n                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADPDF\" })}\r\n                                href=\"#\" hidden={this.props.hiddenExport}\r\n                            >\r\n                                <FontAwesomeIcon icon={faFilePdf} className=\"ActionIconColor\"\r\n                                    onClick={() => this.exportPDF()} />\r\n                            </Nav.Link>\r\n                        </ProductList>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {this.props.dashBoardType.viewDashBoardDesignConfigList &&\r\n                    this.breadcrumDesign(this.props.dashBoardType.viewDashBoardDesignConfigList)\r\n                }\r\n                {\r\n                    this.props.series && this.props.series.length > 0 ?\r\n                        <PDFExport\r\n                            ref={component => (this.pdfExportComponent = component)}\r\n                            paperSize=\"auto\"\r\n                            margin={40}\r\n                        >\r\n                            {this.props.chartTypeName === \"pie\" ?\r\n\r\n                                <Chart style={this.props.style} >\r\n                                    <ChartTooltip render={renderTooltip} />\r\n                                    <ChartLegend position=\"bottom\" />\r\n                                    <ChartSeries>\r\n                                        <ChartSeriesItem autoFit=\"autofit\"\r\n                                            type=\"pie\"\r\n                                            data={this.props.series}\r\n                                            field={this.props.valueField}\r\n                                            categoryField={this.props.categoryField}\r\n                                            labels={{ visible: true, content: labelContent }}\r\n                                            overlay={{ gradient: \"roundedBevel\" }}\r\n                                        />\r\n                                    </ChartSeries>\r\n                                </Chart>\r\n\r\n                                :\r\n\r\n                                <Chart style={this.props.style} onSeriesClick={(item) => this.props.chartItemClick(item)}>\r\n                                    <ChartTooltip render={renderTooltip} />\r\n                                    <ChartLegend position=\"bottom\" />\r\n                                    <ChartSeries>\r\n                                        <ChartSeriesItem autoFit=\"autofit\" type=\"donut\" data={this.props.series} field={this.props.valueField} categoryField={this.props.categoryField} >\r\n                                            <ChartSeriesLabels position=\"outsideEnd\" background=\"none\" content={labelContent} />\r\n                                        </ChartSeriesItem>\r\n                                    </ChartSeries>\r\n                                </Chart>\r\n\r\n\r\n                            }\r\n                        </PDFExport>\r\n                        :\r\n                        <>\r\n                            <Attachments className = \"norecordchart\">\r\n                                {this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" })}\r\n                            </Attachments>\r\n                        </>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    getValueByComponent = (param, value) => {\r\n        let componentCode = param.ndesigncomponentcode;\r\n        switch (componentCode) {\r\n            case 4: return value ? convertDatetoStringByTimeZone(this.props.userInfo, value) : \"-\"\r\n            default: return value\r\n        }\r\n    }\r\n\r\n    // covertDatetoString = (value) => {\r\n    //     const userInfo = this.props.userInfo;\r\n    //     const dateValue = new Date(value);\r\n    //     const prevMonth = validateTwoDigitDate(String(dateValue.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(dateValue.getDate()));\r\n    //     const dateArray = [];\r\n\r\n    //     const splitChar = userInfo.ssitedatetime && userInfo.ssitedatetime.indexOf(\"/\") !== -1 ? \"/\" : \"-\";\r\n    //     const firstField = userInfo.ssitedatetime && userInfo.ssitedatetime.split(splitChar)[0];\r\n    //     const secondField = userInfo.ssitedatetime && userInfo.ssitedatetime.split(splitChar)[1];\r\n\r\n    //         if (firstField === \"dd\"){\r\n    //             dateArray.push(prevDay);\r\n    //             dateArray.push(splitChar);\r\n    //             if (secondField === \"MM\"){\r\n    //                 dateArray.push(prevMonth);\r\n    //                 dateArray.push(splitChar);\r\n    //                 dateArray.push(dateValue.getFullYear());\r\n    //             }\r\n    //             else{\r\n    //                 dateArray.push(dateValue.getFullYear());\r\n    //                 dateArray.push(splitChar);\r\n    //                 dateArray.push(prevMonth);\r\n    //             }\r\n    //         }\r\n    //         else  if (firstField === \"MM\"){\r\n    //             dateArray.push(prevMonth);               \r\n    //             dateArray.push(splitChar);\r\n    //             if (secondField === \"dd\"){\r\n    //                 dateArray.push(prevDay);\r\n    //                 dateArray.push(splitChar);\r\n    //                 dateArray.push(dateValue.getFullYear());\r\n    //             }\r\n    //             else{\r\n    //                 dateArray.push(dateValue.getFullYear());\r\n    //                 dateArray.push(splitChar);\r\n    //                 dateArray.push(prevDay);                \r\n    //             }\r\n    //         }\r\n    //         else{\r\n    //             dateArray.push(dateValue.getFullYear());\r\n    //             dateArray.push(splitChar);\r\n    //             if (secondField === \"dd\"){\r\n    //                 dateArray.push(prevDay);\r\n    //                 dateArray.push(splitChar);\r\n    //                 dateArray.push(prevMonth);       \r\n    //             }\r\n    //             else{\r\n    //                 dateArray.push(prevMonth);       \r\n    //                 dateArray.push(splitChar);\r\n    //                 dateArray.push(prevDay);                \r\n    //             }\r\n    //         }\r\n    //      return dateArray;\r\n    //     // const fromDateOnly = dateValue.getFullYear() + '-' + prevMonth + '-' + prevDay\r\n    //     // return fromDateOnly;\r\n    // }\r\n}\r\nexport default injectIntl(PieChart);"]},"metadata":{},"sourceType":"module"}