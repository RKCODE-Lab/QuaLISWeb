{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\DynamicPreRegDesign.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { updateStore, getReactInputFields, selectRegistrationTemplate, filterColumnData, getRegistrationTemplate, getEditRegTemplate, crudMaster, getPreviewTemplate, getChildValues, getDynamicFilter, getDynamicFilterExecuteData, rearrangeDateFormatforKendoDataTool, validateEsignCredential, validatePreview, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte, getChildComboMaster, getChildValuesForAddMaster } from '../../actions/index';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { Row, Col, FormGroup, FormLabel, Card, Nav } from 'react-bootstrap';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { ContentPanel, MediaLabel, ReadOnlyText } from '../../components/App.styles';\nimport { ageCalculate, childComboClear, constructOptionList, convertDateTimetoStringDBFormat, deleteAttachmentDropZone, extractFieldHeader, formatDate, formatInputDate, getControlMap, getSameRecordFromTwoArrays, onDropAttachFileList, showEsign, validateEmail } from '../../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport PreRegDesignPopUp from './PreRegDesignPopUp';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { Affix } from 'rsuite';\nimport PortalModal from '../../PortalModal';\nimport { faCopy, faEye, faPencilAlt, faThumbsUp, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport DynamicSlideout from './DynamicSlideout.jsx';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { designProperties, transactionStatus, SampleType, designComponents } from '../../components/Enumeration';\nimport FormInput from '../../components/form-input/form-input.component';\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { Utils as QbUtils } from \"react-awesome-query-builder\";\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\nimport AddMasterRecords from './AddMasterRecords';\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DynamicPreRegDesign extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.custombuttonclick = (event, component) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const inputparam = {\n        component,\n        userinfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord\n      };\n      this.props.getDynamicFilter(inputparam);\n    };\n\n    this.onChangeAwesomeQueryBuilder = (immutableTree, config) => {\n      //  let selectedRecord = this.state.selectedRecord || {};\n      const filterquery = QbUtils.sqlFormat(immutableTree, config);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          awesomeTree: immutableTree,\n          awesomeConfig: config,\n          filterquery\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\n    };\n\n    this.handlePageChange = event => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoSkip: event.skip,\n          kendoTake: event.take\n        }\n      };\n      this.props.updateStore(updateInfo); //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\n    };\n\n    this.handleFilterChange = event => {\n      // event.preventDefault();\n      //event.stopPropagation();\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoFilter: event.filter // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: event.filter });\n    };\n\n    this.handleExecuteClick = event => {\n      //const selectedRecord = this.state.selectedRecord\n      const filterquery = this.props.Login.filterquery;\n\n      if (filterquery !== \"\" && filterquery !== undefined && !filterquery.includes('Invalid date')) {\n        const inputparam = {\n          component: this.props.Login.seletedFilterComponent,\n          userinfo: this.props.Login.userInfo,\n          filterquery: filterquery // selectedRecord:this.state.selectedRecord\n\n        };\n        this.props.getDynamicFilterExecuteData(inputparam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLINFILTER\"\n        }));\n      }\n    };\n\n    this.handleKendoRowClick = event => {\n      let item1 = event.dataItem;\n      const component = this.props.Login.seletedFilterComponent;\n      const newdata = {\n        label: item1[component['displaymember']],\n        value: item1[component['valuemember']],\n        item: {\n          jsondata: { ...item1,\n            jsondata: { ...item1\n            }\n          }\n        }\n      };\n      this.onComboChange(newdata, component, component['label']);\n    };\n\n    this.onComboChangeMaster = (comboData, fieldName, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (comboData !== null) {\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          selectedMaster[masterIndex][item.tableDataField] = comboData.value;\n        } else if (item.foreignDataField) {\n          selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedMaster[masterIndex][fieldName] = comboData;\n\n      if (item.childIndex !== undefined) {\n        this.props.getChildComboMaster(selectedMaster, fieldName, item, this.props.Login.selectedControl, this.props.Login.masterfieldList, this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex);\n      } else {\n        this.setState({\n          selectedMaster\n        });\n      }\n    };\n\n    this.handleDateChangeMaster = (dateName, dateValue, item) => {\n      //   const { selectedMaster } = this.state;\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      const age = ageCalculate(dateValue);\n      selectedMaster[masterIndex][\"sage\"] = age;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputOnChangeMaster = (value, name, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onInputOnChangeMaster = event => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\n            selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\n            selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\n            selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\n            selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\n            selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\n            selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\n            selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\n          } else {\n            selectedMaster[masterIndex].sflatnotemp = \"\";\n            selectedMaster[masterIndex].shousenotemp = \"\";\n            selectedMaster[masterIndex].spostalcodetemp = \"\";\n            selectedMaster[masterIndex].sstreettemp = \"\";\n            selectedMaster[masterIndex].scitynametemp = \"\";\n            selectedMaster[masterIndex].sdistrictnametemp = \"\";\n            selectedMaster[masterIndex].sregionnametemp = \"\";\n          }\n        }\n      } else {\n        selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onSaveMasterRecord = (saveType, formRef) => {\n      //add / edit            \n      //add / edit            \n      const masterIndex = this.props.Login.masterIndex;\n      let inputData = [];\n      const selectedControl = this.props.Login.selectedControl;\n      const masterDesign = this.props.Login.masterDesign;\n      inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n        nformcode: selectedControl[masterIndex].table.item.nformcode\n      };\n      inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase();\n\n      if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n        const selectedMaster = this.state.selectedMaster;\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n          nformcode: selectedControl[masterIndex].table.item.nformcode\n        };\n        inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\n        inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\n        inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique; //add                          \n\n        inputData[\"dynamicmaster\"] = {\n          nformcode: selectedControl[masterIndex].table.item.nformcode,\n          ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        const dateList = [];\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        masterDesign[masterIndex] && masterDesign[masterIndex].slideoutdesign.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ? {\n                      value: selectedMaster[masterIndex][componentrow.label].value,\n                      label: selectedMaster[masterIndex][componentrow.label].label,\n                      pkey: selectedMaster[masterIndex][componentrow.label].item.pkey,\n                      nquerybuildertablecode: selectedMaster[masterIndex][componentrow.label].item.nquerybuildertablecode,\n                      source: selectedMaster[masterIndex][componentrow.label].item.source\n                    } : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\";\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false);\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    } else {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) : selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false) : \"\";\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    }\n\n                    if (componentrow.timezone) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ? {\n                        value: selectedMaster[masterIndex][`tz${componentrow.label}`].value,\n                        label: selectedMaster[masterIndex][`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label] : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                  }\n\n                  return inputData[\"dynamicmaster\"];\n                });\n              } else {\n                if (component.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? {\n                    value: selectedMaster[masterIndex][component.label].value,\n                    label: selectedMaster[masterIndex][component.label].label,\n                    pkey: selectedMaster[masterIndex][component.label].item.pkey,\n                    nquerybuildertablecode: selectedMaster[masterIndex][component.label].item.nquerybuildertablecode,\n                    source: selectedMaster[masterIndex][component.label].item.source\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                    // selectedRecord[component.label] : new Date(), userInfo);\n\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                    //    selectedRecord[component.label] : new Date(), userInfo) :\n                    formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) : selectedMaster[masterIndex][component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                    //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                    formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                  }\n\n                  if (component.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ? {\n                      value: selectedMaster[masterIndex][`tz${component.label}`].value,\n                      label: selectedMaster[masterIndex][`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? selectedMaster[masterIndex][component.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n                }\n              }\n\n              return inputData[\"dynamicmaster\"];\n            });\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n        inputData[\"masterdatelist\"] = dateList;\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === 137) {\n        inputData[\"noneedfilter\"] = 1;\n\n        if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n          inputData[\"noneedfilter\"] = 2;\n        }\n\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } else {\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } // }\n\n\n      const inputParam = {\n        withoutCombocomponent: this.state.withoutCombocomponent,\n        comboComponents: this.state.comboComponents,\n        selectedRecord: this.state.selectedRecord,\n        selectedRecordName: 'selectedRecord',\n        loadSubSample: false,\n        selectedControl: this.props.Login.selectedControl,\n        comboData: this.props.Login.comboData,\n        comboName: 'comboData',\n        classUrl: selectedControl[masterIndex].table.item.classUrl,\n        methodUrl: selectedControl[masterIndex].table.item.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        // selectedControl[masterIndex].table.item.sdisplayname,\n        inputData: inputData,\n        operation: \"create\",\n        saveType,\n        formRef,\n        masterIndex,\n        selectedMaster: this.state.selectedMaster,\n        mastercomboComponents: this.props.Login.mastercomboComponents,\n        masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\n        masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\n        masterextractedColumnList: this.props.Login.masterextractedColumnList,\n        masterdataList: this.props.Login.masterdataList,\n        masterDesign: this.props.Login.masterDesign,\n        masterfieldList: this.props.Login.masterfieldList,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.addMasterRecord(inputParam, this.props.Login.masterData); // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\n      //             openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n      //             operation: this.props.Login.operation\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n      //  this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      //  }\n    };\n\n    this.mandatoryValidation = () => {\n      const mandatoryFields = [];\n      const selectedRecord = this.state.selectedRecord;\n      this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n              if (componentrow.mandatory === true) {\n                if (componentrow.recordbasedshowhide) {\n                  if (this.state.selectedRecord[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                }\n              } else {\n                if (componentrow.inputtype === \"email\") {\n                  selectedRecord[componentrow.label] && selectedRecord[componentrow.label] !== \"\" && mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    \"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"textbox\"\n                  });\n                }\n              }\n\n              return null;\n            }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectedRecord[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"alertPreFix\": this.props.intl.formatMessage({\n                id: \"IDS_VALID\"\n              }),\n              \"validateFunction\": validateEmail,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }) : mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n              \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n            }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"alertPreFix\": this.props.intl.formatMessage({\n                id: \"IDS_VALID\"\n              }),\n              \"validateFunction\": validateEmail,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }) : mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n              \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n            }) : selectedRecord[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"alertPreFix\": this.props.intl.formatMessage({\n                id: \"IDS_VALID\"\n              }),\n              \"validateFunction\": validateEmail,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }) : \"\" : \"\";\n          });\n        });\n      });\n      return mandatoryFields;\n    };\n\n    this.addMasterRecord = control => {\n      let masterIndex = this.props.Login.masterIndex;\n\n      if (masterIndex !== undefined) {\n        masterIndex = masterIndex + 1;\n      } else {\n        masterIndex = 0;\n      }\n\n      let selectedControl = this.props.Login.selectedControl || [];\n      let selectedMaster = this.state.selectedMaster || [];\n      selectedMaster[masterIndex] = {};\n      selectedControl[masterIndex] = control;\n      let fieldList = this.props.Login.masterfieldList || [];\n      fieldList[masterIndex] = [];\n      let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n      masterComboColumnFiled[masterIndex] = [];\n      let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n      extractedColumnList[masterIndex] = [];\n      let masterdataList = this.props.Login.masterdataList || [];\n      let masterDesign = this.props.Login.masterDesign || [];\n      let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n      let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n      masterdataList[masterIndex] = [];\n      masterDesign[masterIndex] = [];\n      masterwithoutCombocomponent[masterIndex] = [];\n      mastercomboComponents[masterIndex] = [];\n\n      if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n        if (control.table.item.component === 'Type2Component') {\n          fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n        } else {\n          fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n        }\n\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            selectedMaster //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (control.table.item.component === 'Type3Component') {\n        fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterprimaryKeyField: primaryKeyField,\n          masterComboColumnFiled: masterComboColumnFiled,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          selectedMaster,\n          screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n        };\n        this.props.getAddMasterCombo(inputParam);\n      } else if (control.table.item.component === 'Dynamic') {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterComboColumnFiled,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterComboColumnFiled,\n          selectedMaster\n        };\n        this.props.getDynamicMasterTempalte(inputParam);\n      } // this.props.getMasterRecord(control);\n\n    };\n\n    this.onExecuteClick = () => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const userInfo = this.props.Login.userInfo;\n      const sampleRegistration = {};\n      sampleRegistration[\"jsondata\"] = {};\n      const dateList = [];\n      const defaulttimezone = this.props.Login.defaultTimeZone;\n      console.log(\"selected in execute:\", selectedRecord);\n      this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              return component.children.map(componentrow => {\n                if (componentrow.inputtype === \"date\") {\n                  if (componentrow.mandatory) {\n                    sampleRegistration[\"jsondata\"][componentrow.label] = typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\";\n                  } else {\n                    sampleRegistration[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\" : selectedRecord[componentrow.label] ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\" : \"\";\n                  }\n\n                  if (componentrow.timezone) {\n                    sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ? {\n                      value: selectedRecord[`tz${componentrow.label}`].value,\n                      label: selectedRecord[`tz${componentrow.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                  }\n\n                  dateList.push(componentrow.label);\n                }\n              });\n              return sampleRegistration;\n            } else {\n              if (component.inputtype === \"date\") {\n                if (component.mandatory) {\n                  sampleRegistration[\"jsondata\"][component.label] = typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\";\n                } else {\n                  sampleRegistration[\"jsondata\"][component.label] = component.loadcurrentdate ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\" : selectedRecord[component.label] ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\" : \"\";\n                }\n\n                if (component.timezone) {\n                  sampleRegistration[\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ? {\n                    value: selectedRecord[`tz${component.label}`].value,\n                    label: selectedRecord[`tz${component.label}`].label\n                  } : defaulttimezone ? defaulttimezone : -1;\n                }\n\n                dateList.push(component.label);\n              }\n\n              return sampleRegistration;\n            }\n          });\n        });\n      });\n      const {\n        dateconstraints,\n        combinationunique\n      } = this.getJsondata(this.props.Login.masterData.selectedTemplate.jsondata);\n      const inputParam = {\n        Registration: sampleRegistration,\n        DateList: dateList,\n        dateconstraints: dateconstraints,\n        userinfo: userInfo,\n        combinationunique: combinationunique\n      };\n      this.props.validatePreview(inputParam);\n    };\n\n    this.getJsondata = templatedata => {\n      let dateconstraints = [];\n      let combinationunique = [];\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              // componentRow.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\n              componentRow.unique && combinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n\n              if (componentRow.inputtype === 'date') {\n                // sampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\n                dateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\n              }\n\n              return null;\n            });\n          } else {\n            component.unique && combinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n\n            if (component.inputtype === 'date') {\n              dateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\n            }\n\n            return null;\n          }\n        });\n      }));\n      let jsondata = {\n        combinationunique,\n        dateconstraints\n      };\n      return jsondata;\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.filterComboChange = comboData => {\n      this.setState({\n        selectedSampleType: comboData\n      });\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.reloadData();\n    };\n\n    this.removeIndex = (data, removeIndex) => {\n      const data1 = [...data.splice(0, removeIndex), ...data.splice(removeIndex + 1)];\n      return data1;\n    };\n\n    this.closeModal = () => {\n      let updateInfo = {};\n\n      if (this.props.Login.addMaster) {\n        let masterIndex = this.props.Login.masterIndex;\n\n        if (masterIndex !== 0) {\n          const screenName = this.props.Login.selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode];\n          const selectedMaster = this.removeIndex(this.props.Login.selectedMaster, masterIndex);\n          const selectedControl = this.removeIndex(this.props.Login.selectedControl, masterIndex);\n          const masterextractedColumnList = this.props.Login.masterextractedColumnList && this.removeIndex(this.props.Login.masterextractedColumnList, masterIndex);\n          const masterfieldList = this.props.Login.masterfieldList && this.removeIndex(this.props.Login.masterfieldList, masterIndex);\n          const masterdataList = this.props.Login.masterdataList && this.removeIndex(this.props.Login.masterdataList, masterIndex);\n          const mastercomboComponents = this.props.Login.mastercomboComponents && this.removeIndex(this.props.Login.mastercomboComponents, masterIndex);\n          const masterComboColumnFiled = this.props.Login.masterComboColumnFiled && this.removeIndex(this.props.Login.masterComboColumnFiled, masterIndex);\n          const masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent && this.removeIndex(this.props.Login.masterwithoutCombocomponent, masterIndex);\n          const masterDesign = this.props.Login.masterDesign && this.removeIndex(this.props.Login.masterDesign, masterIndex);\n          masterIndex = masterIndex - 1;\n          updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster,\n              selectedControl,\n              masterextractedColumnList,\n              masterfieldList,\n              masterdataList,\n              mastercomboComponents,\n              masterwithoutCombocomponent,\n              masterComboColumnFiled,\n              masterDesign,\n              masterIndex,\n              screenName\n            }\n          };\n        } else {\n          // selectedMaster = []\n          // selectedControl = []\n          // masterextractedColumnList = []\n          // masterfieldList = []\n          // addMaster = true\n          // masterdataList = []\n          // mastercomboComponents = []\n          // masterwithoutCombocomponent = []\n          // masterComboColumnFiled = []\n          // masterDesign = []\n          // masterIndex = undefined\n          // screenName=this.props.Login.inputParam.displayName\n          updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster: [],\n              selectedControl: [],\n              masterextractedColumnList: [],\n              masterfieldList: [],\n              addMaster: false,\n              masterdataList: [],\n              mastercomboComponents: [],\n              masterwithoutCombocomponent: [],\n              masterComboColumnFiled: [],\n              masterDesign: [],\n              masterIndex: undefined\n            }\n          };\n        }\n      } else if (!this.props.Login.loadCustomSearchFilter) {\n        let loadEsign = this.props.Login.loadEsign;\n        let openModal = this.props.Login.openModal;\n        let openPortal = this.props.Login.openPortal;\n        let selectedRecord = this.props.Login.selectedRecord;\n        let showFilter = this.props.Login.showFilter; // let design = this.props.Login.design;\n        //let selectedFieldRecord =  this.props.Login.selectedFieldRecord;\n\n        if (this.props.Login.loadEsign) {\n          if (this.props.Login.operation === \"delete\") {\n            loadEsign = false;\n            openModal = false;\n            openPortal = false;\n            selectedRecord = {};\n            updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                openModal,\n                openPortal,\n                loadEsign,\n                selectedRecord,\n                selectedId: null,\n                showFilter,\n                design: [],\n                selectedFieldRecord: {},\n                showConfirmAlert: false\n              } // data: {openModal, loadEsign, selectedRecord}\n\n            };\n          } else if (this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\") {\n            loadEsign = false;\n            openModal = false;\n            selectedRecord['esignpassword'] = \"\";\n            selectedRecord['esigncomments'] = \"\";\n            selectedRecord['esignreason'] = \"\"; // openPortal = true;\n\n            updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                openModal,\n                openPortal,\n                loadEsign,\n                selectedRecord,\n                selectedId: null,\n                showFilter,\n                showConfirmAlert: false\n              } // data: {openModal, loadEsign, selectedRecord}\n\n            };\n          } else {\n            loadEsign = false;\n            selectedRecord['esignpassword'] = \"\";\n            selectedRecord['esigncomments'] = \"\";\n            selectedRecord['esignreason'] = \"\";\n            updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                openModal,\n                openPortal,\n                loadEsign,\n                selectedRecord,\n                selectedId: null,\n                showFilter,\n                design: [],\n                selectedFieldRecord: {},\n                showConfirmAlert: false\n              } // data: {openModal, loadEsign, selectedRecord}\n\n            };\n          }\n        } else {\n          openModal = false;\n          openPortal = false;\n          selectedRecord = {};\n          showFilter = false;\n          updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              openModal,\n              openPortal,\n              loadEsign,\n              selectedRecord,\n              selectedId: null,\n              showFilter,\n              design: [],\n              selectedFieldRecord: {},\n              showConfirmAlert: false\n            } // data: {openModal, loadEsign, selectedRecord}\n\n          };\n        }\n      } else {\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadCustomSearchFilter: false,\n            kendoSkip: 0,\n            kendoTake: 5,\n            kendoFilter: {\n              logic: \"and\",\n              filters: []\n            },\n            awesomeTree: undefined,\n            awesomeConfig: undefined\n          } // data: {openModal, loadEsign, selectedRecord}\n\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openModal = ncontrolcode => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          operation: \"copy\",\n          ncontrolcode,\n          selectedId: null,\n          openModal: true,\n          screenName: this.props.Login.inputParam.displayName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let dataState = undefined;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let selectedId = null;\n      inputData['registrationtemplate'] = {\n        nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\n        sregtemplatename: this.state.selectedRecord['sregtemplatename'],\n        nsampletypecode: this.props.Login.masterData.selectedTemplate.nsampletypecode\n      };\n      const inputParam = {\n        methodUrl: \"RegistrationTemplate\",\n        classUrl: 'dynamicpreregdesign',\n        searchRef: this.searchRef,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        selectedId,\n        dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName,\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteApproveTemplate(\"delete\", deleteId));\n    };\n\n    this.deleteApproveTemplate = (operation, ncontrolCode) => {\n      const masterData = this.props.Login.masterData;\n      const postParam = {\n        inputListName: \"RegistrationTemplate\",\n        selectedObject: \"selectedTemplate\",\n        primaryKeyField: \"nreactregtemplatecode\",\n        fetchUrl: \"dynamicpreregdesign/getRegistrationTemplateById\",\n        primaryKeyValue: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: this.state.breadCrumbData[0] ? this.state.breadCrumbData[0].item.value : -1\n        },\n        masterData: this.props.Login.masterData\n      };\n      const data = [];\n      const Layout = this.props.Login.masterData.selectedTemplate.jsondata;\n      Layout.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (this.state.breadCrumbData[0].item.value === -1) componentrow['label'] = componentrow.label + \"_child\";\n                data.push(componentrow.label);\n              });\n            } else {\n              if (this.state.breadCrumbData[0].item.value === -1) {\n                component['label'] = component.label + \"_child\";\n                data.push(component.label);\n              } else {\n                data.push(component.label);\n              }\n            }\n          });\n        });\n      });\n      const inputParam = {\n        methodUrl: \"RegistrationTemplate\",\n        classUrl: 'dynamicpreregdesign',\n        postParam,\n        searchRef: this.searchRef,\n        inputData: {\n          registrationtemplate: {\n            sregtemplatename: this.props.Login.masterData.selectedTemplate.sregtemplatename,\n            nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\n            jsonString: JSON.stringify(Layout)\n          },\n          userinfo: this.props.Login.userInfo,\n          dynamicFields: data,\n          nsampletypecode: this.state.breadCrumbData[0].item.value\n        },\n        operation\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation: \"delete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n\n      if (this.state.selectedSampleType) {\n        this.props.getRegistrationTemplate(this.state.selectedSampleType, this.props.Login.masterData, this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVALIABLE\"\n        }));\n      }\n    };\n\n    this.getPreviewTemplate = (masterData, userInfo, editId) => {\n      let data = [];\n      const withoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.selectedTemplate.jsondata;\n      Layout.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n              if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\" || componentrow.inputtype === \"frontendsearchfilter\") {\n                data.push(componentrow);\n              } else {\n                withoutCombocomponent.push(componentrow);\n              }\n            }) : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\" || component.inputtype === \"frontendsearchfilter\" ? data.push(component) : withoutCombocomponent.push(component);\n          });\n        });\n      }); //const  customButtonComponent= withoutCombocomponent.filter(x=>(x.inputtype==='backendsearchfilter'||x.inputtype==='frontendsearchfilter'))\n\n      const comboComponents = data;\n      let childColumnList = {};\n      data.map(columnList => {\n        const val = this.comboChild(data, columnList, childColumnList, true);\n        data = val.data;\n        childColumnList = val.childColumnList;\n      });\n      console.log(\"md:\", masterData);\n      this.props.getPreviewTemplate(masterData, userInfo, editId, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent, false, true, new Map(), true);\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice, customButtonComponent) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            // if (!columnList.inputtype === 'backendsearchfilter' &&\n            //     !columnList.inputtype === 'frontendsearchfilter'\n            // ) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = this.comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            } // } else {\n            //         columnList.child.map(childData => {\n            //             const index = data.findIndex(x => x.label === childData.label)\n            //             if (index !== -1) {\n            //                 childList.push(data[index])\n            //                 if (slice) {\n            //                     data = [...data.slice(0, index), ...data.slice(index + 1)]\n            //                 }\n            //             }\n            //         })\n            //         childColumnList[columnList.label] = childList;\n            // }\n\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedRecord = this.state.selectedRecord || {}; //if (comboData) {\n\n      comboData[\"item\"] = { ...comboData[\"item\"],\n        \"pkey\": control.valuemember,\n        \"nquerybuildertablecode\": control.nquerybuildertablecode,\n        \"source\": control.source\n      };\n      selectedRecord[comboName] = comboData;\n      console.log(\"selected:\", selectedRecord, comboData, control, customName);\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.state.comboComponents, control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.state.comboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.state.withoutCombocomponent, control.child, \"label\");\n\n        if (comboData) {\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.state.withoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          let comboData = this.props.Login.comboData;\n          const withoutCombocomponent = this.state.withoutCombocomponent || [];\n          const inputParam = {\n            control,\n            comboComponents: this.state.comboComponents,\n            withoutCombocomponent,\n            selectedRecord,\n            comboData\n          };\n          const childParam = childComboClear(inputParam);\n          selectedRecord = childParam.selectedRecord;\n          comboData = childParam.comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord,\n              comboData,\n              loadCustomSearchFilter: false\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            loadCustomSearchFilter: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChange = (event, radiotext) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'toggle') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedRecord[event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedRecord[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedRecord[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedRecord[event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedRecord[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedRecord[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedRecord[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = radiotext;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      }); // this.saveComponentProperties()\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlur = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord,\n        withoutCombocomponent\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n\n      if (this.props.Login.masterData.selectedTemplate.nsampletypecode === SampleType.CLINICALTYPE) {\n        const age = ageCalculate(dateValue);\n        const Age = withoutCombocomponent.filter(x => x.name === 'Age');\n        selectedRecord[Age[0].label] = age;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChangeMasterDyanmic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {}; //if (comboData) {\n\n      comboData[\"item\"] = { ...comboData[\"item\"],\n        \"pkey\": control.valuemember,\n        \"nquerybuildertablecode\": control.nquerybuildertablecode,\n        \"source\": control.source\n      };\n      selectedMaster[masterIndex][comboName] = comboData; // console.log(\"selected:\", selectedMaster, comboData, control, customName);\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\");\n\n        if (comboData) {\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValuesForAddMaster(inputParem, this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList, childComboList, childColumnList, this.props.Login.masterwithoutCombocomponent, [...childComboList, ...parentList], masterIndex);\n        } else {\n          let comboData = this.props.Login.masterdataList;\n          const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n          const inputParam = {\n            control,\n            comboComponents: this.props.Login.mastercomboComponents[masterIndex],\n            withoutCombocomponent: withoutCombocomponent[masterIndex],\n            selectedMaster: selectedMaster[masterIndex],\n            comboData: comboData[masterIndex]\n          };\n          const childParam = childComboClear(inputParam);\n          selectedMaster[masterIndex] = childParam.selectedRecord;\n          comboData[masterIndex] = childParam.comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster,\n              mastedataList: comboData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChangeMasterDynamic = (event, radiotext) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'toggle') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedMaster[masterIndex][event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedMaster[masterIndex][event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedMaster[masterIndex][event.target.name] = radiotext;\n      } else {\n        selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.handleDateChangeMasterDynamic = (dateValue, dateName) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputChangeMasterDynamic = (value, name) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericBlurMasterDynamic = (value, control) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (selectedMaster[masterIndex][control.label]) {\n        if (control.max) {\n          if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onDrop = (value, type, oldVlaue) => {\n      const design = this.state.design;\n      let columns = design[0].children;\n      let designData = this.props.Login.ReactInputFields;\n      value = JSON.parse(value.fields);\n      value = { ...value,\n        type: \"component\"\n      };\n      let designDataIndex = designData.findIndex(item => item.label === value.label);\n      let firstIndex = columns[0] ? columns[0].children.findIndex(item => item.label === value.label) : -1;\n      let secondIndex = columns[1] ? columns[1].children.findIndex(item => item.label === value.label) : -1;\n      if (designDataIndex >= 0) designData.splice(designDataIndex, 1);\n\n      if (firstIndex >= 0) {\n        if (type !== 1) {\n          columns[0].children.splice(firstIndex, 1); // columns[0].splice(to, 0, columns[0].splice(from, 1)[0]);\n        } else {\n          if (oldVlaue) {\n            oldVlaue = JSON.parse(oldVlaue);\n            let from = columns[0].children.findIndex(item => item.label === value.label);\n            let to = columns[0].children.findIndex(item => item.label === oldVlaue.label);\n            columns[0].children.splice(to, 0, columns[0].children.splice(from, 1)[0]);\n          }\n        }\n      } else if (type === 1) {\n        if (columns[0]) {\n          columns[0].children.push(value);\n        } else {\n          columns[0] = {\n            id: \"1\",\n            type: \"column\",\n            children: []\n          };\n          columns[0].children.push(value);\n        }\n      }\n\n      if (secondIndex >= 0) {\n        if (type !== 2) {\n          columns[1].splice(secondIndex, 1);\n        } else {\n          if (oldVlaue) {\n            oldVlaue = JSON.parse(oldVlaue);\n            let from = columns[1].children.findIndex(item => item.label === value.label);\n            let to = columns[1].children.findIndex(item => item.label === oldVlaue.label);\n            columns[1].children.splice(to, 0, columns[1].children.splice(from, 1)[0]);\n          }\n        }\n      } else if (type === 2) {\n        if (columns[1]) {\n          columns[1].children.push(value);\n        } else {\n          columns[1] = {\n            id: \"2\",\n            type: \"column\",\n            children: []\n          };\n          columns[1].children.push(value);\n        }\n      } // design.push(columns)\n\n\n      this.setState({\n        designData,\n        design\n      });\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.state = {\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      addTemplateId: -1,\n      editId: -1,\n      deleteId: -1,\n      approveID: -1,\n      previewId: -1,\n      copyID: -1,\n      selectedRecord: {},\n      sampleTypeOptions: [],\n      selectedSampleType: {},\n      breadCrumbData: [],\n      design: [],\n      comboComponents: [],\n      withoutCombocomponent: [],\n      selectedMaster: []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.intl.formatMessage({\n        id: props.Login.masterStatus\n      }));\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const Layout = this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate.jsondata;\n    const filterParam = {\n      inputListName: \"RegistrationTemplate\",\n      selectedObject: \"selectedTemplate\",\n      primaryKeyField: \"nreactregtemplatecode\",\n      fetchUrl: \"dynamicpreregdesign/getDynamicPreRegDesign\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.state.breadCrumbData[0] ? this.state.breadCrumbData[0].item.value : -1\n      },\n      masterData: this.props.Login.masterData,\n      unchangeList: [\"realSampleType\", \"SampleTypes\"],\n      searchFieldList: [\"sregtemplatename\", \"stransdisplaystatus\"]\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }\n    }, this.state.breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.state.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      filterColumnData: this.props.filterColumnData,\n      screenName: \"Dynamic Pre-Reg Design\",\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.RegistrationTemplate || [],\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      getMasterDetail: template => this.props.selectRegistrationTemplate(template, this.props.Login.masterData, this.props.Login.userInfo),\n      selectedMaster: this.props.Login.masterData.selectedTemplate,\n      primaryKeyField: \"nreactregtemplatecode\",\n      mainField: \"sregtemplatename\",\n      firstField: \"stransdisplaystatus\" // secondField=\"stransdisplaystatus\"\n      ,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: this.state.addTemplateId,\n      filterParam: filterParam,\n      hidePaging: true,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: () => this.props.getReactInputFields(this.props.Login.userInfo, 'create', {}, this.state.addTemplateId),\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_SAMPLETYPEFILTER\": /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n          name: \"nsampletypecode\",\n          formLabel: this.props.intl.formatMessage({\n            id: \"IDS_SAMPLETYPE\"\n          }),\n          isSearchable: false,\n          placeholder: \"Please Select...\",\n          options: this.state.sampleTypeOptions,\n          value: this.state.selectedSampleType ? this.state.selectedSampleType : \"\",\n          onChange: value => this.filterComboChange(value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 53\n          }\n        })))\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 25\n      }\n    }, this.props.Login.masterData.selectedTemplate ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedTemplate.sregtemplatename), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn-outlined ${this.props.Login.masterData.selectedTemplate.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-secondary\"} btn-sm mr-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.selectedTemplate.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editInstrument\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_PREVIEW\"\n      }) // data-for=\"tooltip_list_wrap\"\n      // hidden={this.state.userRoleControlRights.indexOf(this.state.previewId) === -1}\n      ,\n      className: \"btn btn-circle outline-grey mr-2\",\n      onClick: e => this.getPreviewTemplate(this.props.Login.masterData, this.props.Login.userInfo, this.state.previewId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editInstrument\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(this.state.editId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      onClick: e => this.props.getEditRegTemplate(this.props.Login.masterData, this.props.Login.userInfo, this.state.editId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"delete\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(this.state.deleteId) === -1,\n      onClick: () => this.ConfirmDelete(this.state.approveID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"approve\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(this.state.approveID) === -1,\n      onClick: () => this.deleteApproveTemplate('approve', this.state.approveID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"copy\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      // hidden={this.state.userRoleControlRights.indexOf(this.state.copyID) === -1}\n      ,\n      className: \"btn btn-circle outline-grey mr-2\",\n      onClick: e => this.openModal(this.state.copyID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 61\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 41\n      }\n    }, Layout ? Layout.map(item => /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 57\n      }\n    }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n      md: 12 / item.children.length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 69\n      }\n    }, column.children.map(component => {\n      return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 89\n        }\n      }, component.children.map(componentrow => //<Col md={12 / componentrow.length}>\n      componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(Col, {\n        md: componentrow && componentrow.length || 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 97\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 101\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 105\n        }\n      }, componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 105\n        }\n      }, \"-\"))))) : component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 89\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 93\n        }\n      }, component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 93\n        }\n      }, \" \", \"-\"));\n    }))) : \"\")) : \"\"))) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      size: this.props.Login.operation === 'copy' || \"approve\" ? 'lg' : \"xl\",\n      onSaveClick: this.props.Login.addMaster ? this.onSaveMasterRecord : this.props.Login.operation === 'copy' ? this.onSaveClick : this.props.Login.operation === \"preview\" ? this.onExecuteClick : this.closeModal,\n      hideSave: this.props.Login.addMaster ? false : this.props.Login.operation === 'copy' ? false : true,\n      loginoperation: this.props.Login.operation === 'copy' ? false : true,\n      operation: this.props.Login.operation,\n      showValidate: this.props.Login.addMaster ? false : this.props.Login.loadCustomSearchFilter ? false : this.props.Login.operation === \"preview\" ? true : false,\n      screenName: this.props.Login.operation === 'copy' ? \"IDS_TEMPLATE\" : \"IDS_PREVIEW\",\n      closeModal: this.closeModal,\n      show: this.props.Login.openModal,\n      onExecuteClick: this.onExecuteClick,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.props.Login.addMaster ? this.state.selectedMaster[this.props.Login.masterIndex] : this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.addMaster ? this.props.Login.masterextractedColumnList[this.props.Login.masterIndex].filter(x => x.mandatory === true) : this.props.Login.operation === 'copy' ? [{\n        \"idsName\": \"IDS_TEMPLATENAME\",\n        \"dataField\": \"sregtemplatename\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }] : this.props.Login.operation === \"preview\" ? this.mandatoryValidation() : [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: event => this.onInputOnChange(event),\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'copy' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        name: \"sregtemplatename\",\n        type: \"text\",\n        onChange: event => this.setState({\n          selectedRecord: { ...this.state.selectedRecord,\n            sregtemplatename: event.target.value\n          }\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        value: this.state.selectedRecord.sregtemplatename ? this.state.selectedRecord.sregtemplatename : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: \"30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 41\n        }\n      }))) : this.props.Login.loadCustomSearchFilter ? this.props.Login.seletedFilterComponent && this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ? /*#__PURE__*/React.createElement(KendoDatatoolFilter, {\n        filter: this.props.Login.kendoFilter,\n        handleFilterChange: this.handleFilterChange,\n        filterData: this.props.Login.lstPatient || [],\n        skip: this.props.Login.kendoSkip,\n        take: this.props.Login.kendoTake,\n        handlePageChange: this.handlePageChange,\n        fields: this.props.Login.fields || [],\n        gridColumns: this.props.Login.gridColumns || [],\n        onRowClick: this.handleKendoRowClick,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 41\n        }\n      }) : /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n        fields: this.props.Login.fields || {},\n        onChange: this.onChangeAwesomeQueryBuilder,\n        tree: this.props.Login.awesomeTree //   config={this.props.Login.awesomeConfig}\n        ,\n        skip: this.props.Login.kendoSkip,\n        take: this.props.Login.kendoTake,\n        handlePageChange: this.handlePageChange,\n        gridColumns: this.props.Login.gridColumns || [],\n        filterData: this.props.Login.lstPatient,\n        onRowClick: this.handleKendoRowClick,\n        handleExecuteClick: this.handleExecuteClick,\n        userInfo: this.props.Login.userInfo // static={true}\n        // controlMap={this.state.controlMap}\n        // dataState={this.state.dataState}\n        // dataStateChange={this.dataStateChange}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 46\n        }\n      }) : this.props.Login.addMaster ? /*#__PURE__*/React.createElement(AddMasterRecords, {\n        selectedControl: this.props.Login.selectedControl[this.props.Login.masterIndex],\n        fieldList: this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex],\n        extractedColumnList: this.props.Login.masterextractedColumnList[this.props.Login.masterIndex] // primaryKeyField={this.props.Login.masterprimaryKeyField}\n        ,\n        selectedRecord: this.state.selectedMaster[this.props.Login.masterIndex] || {},\n        onInputOnChange: this.onInputOnChangeMaster,\n        onComboChange: this.onComboChangeMaster,\n        handleDateChange: this.handleDateChangeMaster,\n        dataList: this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex],\n        onNumericInputOnChange: this.onNumericInputOnChangeMaster,\n        masterDesign: this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex],\n        mastertimeZoneList: this.props.Login.mastertimeZoneList,\n        masterdefaultTimeZone: this.props.Login.masterdefaultTimeZone,\n        onComboChangeMasterDyanmic: this.onComboChangeMasterDyanmic,\n        handleDateChangeMasterDynamic: this.handleDateChangeMasterDynamic,\n        onInputOnChangeMasterDynamic: this.onInputOnChangeMasterDynamic,\n        onNumericInputChangeMasterDynamic: this.onNumericInputChangeMasterDynamic,\n        onNumericBlurMasterDynamic: this.onNumericBlurMasterDynamic,\n        userInfo: this.props.Login.userInfo,\n        Login: this.props.Login,\n        addMasterRecord: this.addMasterRecord,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        masterIndex: this.props.Login.masterIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 41\n        }\n      }) : /*#__PURE__*/React.createElement(DynamicSlideout, {\n        selectedRecord: this.props.Login.selectedRecord,\n        templateData: this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate.jsondata //handleChange={this.handleChange}\n        ,\n        handleDateChange: this.handleDateChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        comboData: this.props.Login.comboData,\n        onComboChange: this.onComboChange,\n        onDropFile: this.onDropFile,\n        deleteAttachment: this.deleteAttachment,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        Login: this.props.Login,\n        addMasterRecord: this.addMasterRecord,\n        custombuttonclick: this.custombuttonclick,\n        onNumericBlur: this.onNumericBlur,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 41\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 21\n      }\n    }) : \"\", this.props.Login.openPortal ? /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(PreRegDesignPopUp, {\n      closeModal: this.closeModal,\n      nsampletypecode: this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item.value : -1,\n      sampleType: this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item : undefined,\n      ncategorybasedflowrequired: this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item.item.ncategorybasedflowrequired : 4,\n      searchRef: this.searchRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 25\n      }\n    })) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      userRoleControlRights,\n      controlMap,\n      addTemplateId,\n      sampleTypeOptions,\n      breadCrumbData,\n      selectedSampleType,\n      editId,\n      deleteId,\n      approveID,\n      copyID,\n      selectedRecord,\n      comboComponents,\n      previewId,\n      withoutCombocomponent,\n      kendoSkip,\n      kendoTake,\n      awesomeConfig,\n      awesomeTree,\n      kendoFilter,\n      selectedMaster\n    } = this.state;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      updateState = true;\n      addTemplateId = controlMap.has(\"AddTemplate\") && controlMap.get(\"AddTemplate\").ncontrolcode;\n      editId = controlMap.has(\"EditTemplate\") && controlMap.get(\"EditTemplate\").ncontrolcode;\n      deleteId = controlMap.has(\"DeleteTemplate\") && controlMap.get(\"DeleteTemplate\").ncontrolcode;\n      approveID = controlMap.has(\"ApproveTemplate\") && controlMap.get(\"ApproveTemplate\").ncontrolcode;\n      copyID = controlMap.has(\"CopyTemplate\") && controlMap.get(\"CopyTemplate\").ncontrolcode;\n      previewId = controlMap.has(\"PreviewTemplate\") && controlMap.get(\"PreviewTemplate\").ncontrolcode;\n    }\n\n    if (this.props.Login.masterData.SampleTypes !== previousProps.Login.masterData.SampleTypes) {\n      sampleTypeOptions = constructOptionList(this.props.Login.masterData.SampleTypes || [], 'nsampletypecode', 'ssampletypename', 'nsorter', \"ascending\").get(\"OptionList\");\n      selectedSampleType = sampleTypeOptions.length > 0 ? sampleTypeOptions[0] : {};\n      breadCrumbData = sampleTypeOptions.length > 0 ? [{\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": sampleTypeOptions[0].label,\n        \"item\": sampleTypeOptions[0]\n      }] : [];\n      updateState = true;\n    }\n\n    if (this.props.Login.realSampleType !== previousProps.Login.realSampleType) {\n      updateState = true;\n      breadCrumbData = this.props.Login.realSampleType || this.state.breadCrumbData;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.selectedMaster !== previousProps.Login.selectedMaster) {\n      updateState = true;\n      selectedMaster = this.props.Login.selectedMaster;\n    }\n\n    if (this.props.Login.comboComponents !== previousProps.Login.comboComponents) {\n      updateState = true;\n      comboComponents = this.props.Login.comboComponents;\n    }\n\n    if (this.props.Login.withoutCombocomponent !== previousProps.Login.withoutCombocomponent) {\n      updateState = true;\n      withoutCombocomponent = this.props.Login.withoutCombocomponent;\n    } // if (this.props.Login.kendoTake !== previousProps.Login.kendoTake) {\n    //     updateState = true;\n    //     kendoTake = this.props.Login.kendoTake\n    // }\n\n\n    if (updateState) {\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        addTemplateId,\n        sampleTypeOptions,\n        breadCrumbData,\n        selectedSampleType,\n        editId,\n        deleteId,\n        approveID,\n        copyID,\n        selectedRecord,\n        comboComponents,\n        previewId,\n        withoutCombocomponent,\n        selectedMaster\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  crudMaster,\n  getReactInputFields,\n  selectRegistrationTemplate,\n  filterColumnData,\n  getRegistrationTemplate,\n  getEditRegTemplate,\n  getPreviewTemplate,\n  getChildValues,\n  getDynamicFilter,\n  getDynamicFilterExecuteData,\n  validateEsignCredential,\n  validatePreview,\n  addMasterRecord,\n  getAddMasterCombo,\n  getDynamicMasterTempalte,\n  getChildComboMaster,\n  getChildValuesForAddMaster\n})(injectIntl(DynamicPreRegDesign));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dynamicpreregdesign/DynamicPreRegDesign.jsx"],"names":["React","connect","injectIntl","updateStore","getReactInputFields","selectRegistrationTemplate","filterColumnData","getRegistrationTemplate","getEditRegTemplate","crudMaster","getPreviewTemplate","getChildValues","getDynamicFilter","getDynamicFilterExecuteData","rearrangeDateFormatforKendoDataTool","validateEsignCredential","validatePreview","addMasterRecord","getAddMasterCombo","getDynamicMasterTempalte","getChildComboMaster","getChildValuesForAddMaster","DEFAULT_RETURN","Row","Col","FormGroup","FormLabel","Card","Nav","ListMaster","ContentPanel","MediaLabel","ReadOnlyText","ageCalculate","childComboClear","constructOptionList","convertDateTimetoStringDBFormat","deleteAttachmentDropZone","extractFieldHeader","formatDate","formatInputDate","getControlMap","getSameRecordFromTwoArrays","onDropAttachFileList","showEsign","validateEmail","toast","PreRegDesignPopUp","FormSelectSearch","BreadcrumbComponent","Affix","PortalModal","faCopy","faEye","faPencilAlt","faThumbsUp","faTrashAlt","FontAwesomeIcon","ConfirmMessage","DynamicSlideout","SlideOutModal","Esign","designProperties","transactionStatus","SampleType","designComponents","FormInput","KendoDatatoolFilter","FilterQueryBuilder","Utils","QbUtils","getFieldSpecification","AddMasterRecords","getFieldSpecification1","getFieldSpecification3","mapStateToProps","state","Login","DynamicPreRegDesign","Component","constructor","props","custombuttonclick","event","component","preventDefault","stopPropagation","inputparam","userinfo","userInfo","selectedRecord","onChangeAwesomeQueryBuilder","immutableTree","config","filterquery","sqlFormat","updateInfo","typeName","data","awesomeTree","awesomeConfig","handlePageChange","kendoSkip","skip","kendoTake","take","handleFilterChange","kendoFilter","filter","handleExecuteClick","undefined","includes","seletedFilterComponent","warn","intl","formatMessage","id","handleKendoRowClick","item1","dataItem","newdata","label","value","item","jsondata","onComboChange","onComboChangeMaster","comboData","fieldName","selectedMaster","masterIndex","selectedControl","table","nformcode","tableDataField","foreignDataField","childIndex","masterfieldList","masterdataList","setState","handleDateChangeMaster","dateName","dateValue","age","onNumericInputOnChangeMaster","name","onInputOnChangeMaster","target","type","checked","nneedcurrentaddress","sflatnotemp","sflatno","shousenotemp","shouseno","spostalcodetemp","spostalcode","sstreettemp","sstreet","scitynametemp","scityname","sdistrictnametemp","sdistrictname","sregionnametemp","sregionname","onSaveMasterRecord","saveType","formRef","inputData","masterDesign","methodUrl","toLowerCase","nmastersitecode","screendesign","masterdateconstraints","masterdatefields","mastercombinationunique","ndesigntemplatemappingcode","jsonuidata","dateList","defaulttimezone","slideoutdesign","map","row","children","column","hasOwnProperty","componentrow","inputtype","pkey","nquerybuildertablecode","source","mandatory","loadcurrentdate","Date","timezone","push","JSON","stringify","masterextractedColumnList","dataField","isJsonField","jsonObjectName","controlType","dateField","controlName","NO","inputParam","withoutCombocomponent","comboComponents","selectedRecordName","loadSubSample","comboName","classUrl","displayName","operation","mastercomboComponents","masterwithoutCombocomponent","masterComboColumnFiled","masterData","mandatoryValidation","mandatoryFields","selectedTemplate","recordbasedshowhide","parentLabel","recordbasedhide","control","fieldList","extractedColumnList","get","Object","values","primaryKeyField","keys","length","addMaster","masterprimaryKeyField","ndesigncomponentcode","COMBOBOX","screenName","displayname","slanguagetypecode","onExecuteClick","sampleRegistration","defaultTimeZone","console","log","dateconstraints","combinationunique","getJsondata","Registration","DateList","templatedata","componentRow","unique","LABEL","VALUE","dateConstraintArraySQL","openFilter","showFilter","filterComboChange","selectedSampleType","closeFilter","onFilterSubmit","reloadData","removeIndex","data1","splice","closeModal","loadCustomSearchFilter","loadEsign","openModal","openPortal","selectedId","design","selectedFieldRecord","showConfirmAlert","logic","filters","ncontrolcode","onSaveClick","dataState","nreactregtemplatecode","sregtemplatename","nsampletypecode","searchRef","esignNeeded","userRoleControlRights","screenData","ConfirmDelete","deleteId","confirmMessage","confirm","deleteApproveTemplate","ncontrolCode","postParam","inputListName","selectedObject","fetchUrl","primaryKeyValue","fecthInputObject","breadCrumbData","Layout","registrationtemplate","jsonString","dynamicFields","current","editId","childColumnList","columnList","val","comboChild","Map","slice","customButtonComponent","retunObj","childList","child","childData","index","findIndex","x","y","customName","valuemember","childComboList","parentList","inputParem","primarykeyField","childParam","onInputOnChange","radiotext","YES","test","indexOf","indexcomma","validateEsign","sreason","nreasoncode","spredefinedreason","password","onNumericInputChange","onNumericBlur","max","parseFloat","precision","parseInt","min","handleDateChange","CLINICALTYPE","Age","onComboChangeMasterDyanmic","mastedataList","onInputOnChangeMasterDynamic","handleDateChangeMasterDynamic","onNumericInputChangeMasterDynamic","onNumericBlurMasterDynamic","onDrop","oldVlaue","columns","designData","ReactInputFields","parse","fields","designDataIndex","firstIndex","secondIndex","from","to","onDropFile","attachedFiles","maxSize","actionType","deleteAttachment","file","createRef","controlMap","addTemplateId","approveID","previewId","copyID","sampleTypeOptions","getDerivedStateFromProps","masterStatus","error","render","filterParam","unchangeList","searchFieldList","searchedData","RegistrationTemplate","template","ntransactionstatus","APPROVED","stransdisplaystatus","e","lstPatient","gridColumns","mastertimeZoneList","masterdefaultTimeZone","timeZoneList","ncategorybasedflowrequired","componentDidUpdate","previousProps","updateState","has","SampleTypes","realSampleType","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport {\r\n    updateStore, getReactInputFields, selectRegistrationTemplate, filterColumnData,\r\n    getRegistrationTemplate, getEditRegTemplate, crudMaster,\r\n    getPreviewTemplate, getChildValues, getDynamicFilter, getDynamicFilterExecuteData,\r\n    rearrangeDateFormatforKendoDataTool, validateEsignCredential,\r\n    validatePreview, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster, getChildValuesForAddMaster\r\n} from '../../actions/index'\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { Row, Col, FormGroup, FormLabel, Card, Nav } from 'react-bootstrap';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { ContentPanel, MediaLabel, ReadOnlyText } from '../../components/App.styles';\r\nimport {\r\n    ageCalculate,\r\n    childComboClear,\r\n    constructOptionList, convertDateTimetoStringDBFormat, deleteAttachmentDropZone,\r\n    extractFieldHeader,\r\n    formatDate,\r\n    formatInputDate,\r\n    getControlMap, getSameRecordFromTwoArrays, onDropAttachFileList,\r\n    showEsign, validateEmail\r\n} from '../../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport PreRegDesignPopUp from './PreRegDesignPopUp';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\nimport PortalModal from '../../PortalModal';\r\nimport { faCopy, faEye, faPencilAlt, faThumbsUp, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport DynamicSlideout from './DynamicSlideout.jsx'\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport { designProperties, transactionStatus, SampleType, designComponents } from '../../components/Enumeration';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter';\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport {\r\n    Utils as QbUtils,\r\n} from \"react-awesome-query-builder\";\r\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\r\nimport AddMasterRecords from './AddMasterRecords'\r\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass DynamicPreRegDesign extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.state = {\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            addTemplateId: -1,\r\n            editId: -1, deleteId: -1, approveID: -1, previewId: -1, copyID: -1,\r\n            selectedRecord: {},\r\n            sampleTypeOptions: [],\r\n            selectedSampleType: {},\r\n            breadCrumbData: [],\r\n            design: [],\r\n            comboComponents: [],\r\n            withoutCombocomponent: [],\r\n            selectedMaster: []\r\n        };\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.intl.formatMessage({ id: props.Login.masterStatus }));\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    custombuttonclick = (event, component) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const inputparam = {\r\n            component, userinfo: this.props.Login.userInfo,\r\n            selectedRecord: this.state.selectedRecord\r\n        }\r\n        this.props.getDynamicFilter(inputparam)\r\n    }\r\n\r\n    onChangeAwesomeQueryBuilder = (immutableTree, config) => {\r\n        //  let selectedRecord = this.state.selectedRecord || {};\r\n        const filterquery = QbUtils.sqlFormat(immutableTree, config);\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                awesomeTree: immutableTree, awesomeConfig: config, filterquery\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\r\n\r\n    };\r\n\r\n    handlePageChange = (event) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoSkip: event.skip, kendoTake: event.take\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    handleFilterChange = (event) => {\r\n        // event.preventDefault();\r\n        //event.stopPropagation();\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoFilter: event.filter\r\n                // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        // this.setState({ kendoFilter: event.filter });\r\n    };\r\n    // removeInvalidDate = (filterquery) => {\r\n\r\n    //     if (filterquery.inclues(\"Invalid Date\")) {\r\n\r\n    //         let startIndex = filterquery.indexOf(\"Invalid Date\");\r\n    //         let endIndex = startIndex + 12;\r\n    //         const str = filterquery.subString(0, startIndex)\r\n    //         if (startIndex > 3) {\r\n    //             if (str.subString(startIndex - 4, startIndex) === 'AND') {\r\n\r\n    //             } else if (str.subString(startIndex - 3, startIndex) === 'OR') {\r\n\r\n    //             }\r\n    //             else if (str.subString(startIndex - 4, startIndex) === 'NOT') {\r\n\r\n    //             }\r\n\r\n    //         }\r\n\r\n\r\n    //     }\r\n\r\n    // }\r\n\r\n\r\n    handleExecuteClick = (event) => {\r\n        //const selectedRecord = this.state.selectedRecord\r\n        const filterquery = this.props.Login.filterquery\r\n        if (filterquery !== \"\" && filterquery !== undefined && !filterquery.includes('Invalid date')) {\r\n\r\n            const inputparam = {\r\n                component: this.props.Login.seletedFilterComponent,\r\n                userinfo: this.props.Login.userInfo,\r\n                filterquery: filterquery,\r\n                // selectedRecord:this.state.selectedRecord\r\n\r\n            }\r\n            this.props.getDynamicFilterExecuteData(inputparam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    // handleKendoRowClick = (event) => {\r\n    //     let selecteddata = event.dataItem;\r\n    //     const component = this.props.Login.seletedFilterComponent\r\n    //     if (component.hasOwnProperty(\"child\")) {\r\n    //         const selectedRecord = this.state.selectedRecord;\r\n    //         component.child.map(y => {\r\n    //             // component.filterfields.filter(x=>x.)\r\n    //             const withoutCombocomponent = this.state.withoutCombocomponent;\r\n    //             const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n    //             if (readonlyfields !== -1) {\r\n\r\n    //                 if (withoutCombocomponent[readonlyfields]['inputtype'] === \"date\") {\r\n    //                     selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                         rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]]) : \"\"\r\n    //                     selectedRecord[y.label + 'value'] = selectedRecord[y.label]\r\n\r\n    //                     if (withoutCombocomponent[readonlyfields].child) {\r\n    //                         const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n    //                         withoutCombocomponent[readonlyfields].child.map(k => {\r\n    //                             if (k.label === Age[0].label) {\r\n    //                                 const age = ageCalculate(selectedRecord[y.label]);\r\n\r\n    //                                 selectedRecord[Age[0].label] = age\r\n    //                             }\r\n    //                         })\r\n\r\n\r\n    //                     }\r\n\r\n\r\n\r\n    //                 } else {\r\n    //                     if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] ?\r\n    //                                 selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                     } else {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                     }\r\n    //                 }\r\n\r\n\r\n    //             } else {\r\n    //                 const comboComponents = this.state.comboComponents;\r\n    //                 const readonlyfields = comboComponents.findIndex(k => k.label === y.label);\r\n    //                 if (readonlyfields !== -1) {\r\n    //                     if (this.props.Login.comboData[y.label]) {\r\n    //                         const val = this.props.Login.comboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                         if (val.length > 0)\r\n    //                             selectedRecord[y.label] = val[0]\r\n    //                         //selectedRecord[y.label]=this.props.Login.comboData[y.label].filter(item=>item.value===selecteddata[y.foriegntablePK])\r\n    //                     }\r\n\r\n    //                 }\r\n\r\n    //             }\r\n\r\n    //         })\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: {\r\n    //                 selectedRecord,\r\n    //                 loadCustomSearchFilter: false,\r\n    //                 // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n    //             }\r\n    //         }\r\n    //         this.props.updateStore(updateInfo)\r\n    //         // }\r\n    //     }\r\n    // };\r\n\r\n\r\n\r\n    handleKendoRowClick = (event) => {\r\n        let item1 = event.dataItem;\r\n        const component = this.props.Login.seletedFilterComponent\r\n\r\n        const newdata =  { label:item1[component['displaymember']],\r\n        value:item1[component['valuemember']], item: { jsondata: { ...item1, jsondata: { ...item1 } } } }\r\n        \r\n    \r\n        this.onComboChange(newdata, component, component['label']) \r\n    };\r\n\r\n    render() {\r\n        const Layout = this.props.Login.masterData.selectedTemplate &&\r\n            this.props.Login.masterData.selectedTemplate.jsondata\r\n\r\n        const filterParam = {\r\n            inputListName: \"RegistrationTemplate\",\r\n            selectedObject: \"selectedTemplate\",\r\n            primaryKeyField: \"nreactregtemplatecode\",\r\n            fetchUrl: \"dynamicpreregdesign/getDynamicPreRegDesign\",\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo, nsampletypecode: this.state.breadCrumbData[0] ?\r\n                    this.state.breadCrumbData[0].item.value : -1\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            unchangeList: [\"realSampleType\", \"SampleTypes\"],\r\n            searchFieldList: [\"sregtemplatename\", \"stransdisplaystatus\"]\r\n        };\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {this.state.breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={this.state.breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                screenName={\"Dynamic Pre-Reg Design\"}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.RegistrationTemplate || []}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                getMasterDetail={(template) => this.props.selectRegistrationTemplate(template, this.props.Login.masterData, this.props.Login.userInfo)}\r\n                                selectedMaster={this.props.Login.masterData.selectedTemplate}\r\n                                primaryKeyField=\"nreactregtemplatecode\"\r\n                                mainField=\"sregtemplatename\"\r\n                                firstField=\"stransdisplaystatus\"\r\n                                // secondField=\"stransdisplaystatus\"\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={this.state.addTemplateId}\r\n                                filterParam={filterParam}\r\n                                hidePaging={true}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                openModal={() => this.props.getReactInputFields(this.props.Login.userInfo, 'create', {}, this.state.addTemplateId)}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_SAMPLETYPEFILTER\":\r\n                                            <Row>\r\n                                                <Col md={12}>\r\n                                                    <FormSelectSearch\r\n                                                        name={\"nsampletypecode\"}\r\n                                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPE\" })}\r\n                                                        isSearchable={false}\r\n                                                        placeholder=\"Please Select...\"\r\n                                                        options={this.state.sampleTypeOptions}\r\n                                                        value={this.state.selectedSampleType ? this.state.selectedSampleType : \"\"}\r\n                                                        onChange={value => this.filterComboChange(value)}\r\n                                                    >\r\n                                                    </FormSelectSearch>\r\n                                                </Col>\r\n                                            </Row>\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md='8'>\r\n                            {this.props.Login.masterData.selectedTemplate ?\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            <Card.Title className=\"product-title-main\">\r\n                                                {this.props.Login.masterData.selectedTemplate.sregtemplatename}\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle>\r\n                                                <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                        <MediaLabel className={`btn-outlined ${this.props.Login.masterData.selectedTemplate.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\"\r\n                                                            : \"outline-secondary\"} btn-sm mr-3`}>\r\n                                                            {this.props.Login.masterData.selectedTemplate.stransdisplaystatus}\r\n                                                        </MediaLabel>\r\n                                                    </h2>\r\n                                                    <div className=\"d-inline\">\r\n                                                        <Nav.Link name=\"editInstrument\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_PREVIEW\" })}\r\n                                                            // data-for=\"tooltip_list_wrap\"\r\n                                                            // hidden={this.state.userRoleControlRights.indexOf(this.state.previewId) === -1}\r\n                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                            onClick={(e) => this.getPreviewTemplate(this.props.Login.masterData,\r\n                                                                this.props.Login.userInfo, this.state.previewId\r\n                                                            )}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faEye} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link name=\"editInstrument\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                            // data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.editId) === -1}\r\n                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                            onClick={(e) => this.props.getEditRegTemplate(this.props.Login.masterData, this.props.Login.userInfo, this.state.editId)}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link name=\"delete\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            //   data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.deleteId) === -1}\r\n                                                            onClick={() => this.ConfirmDelete(this.state.approveID)}>\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link name=\"approve\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                            // data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.approveID) === -1}\r\n                                                            onClick={() => this.deleteApproveTemplate('approve', this.state.approveID)}>\r\n                                                            <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link name=\"copy\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                            //  data-for=\"tooltip_list_wrap\"\r\n                                                            // hidden={this.state.userRoleControlRights.indexOf(this.state.copyID) === -1}\r\n                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                            onClick={(e) => this.openModal(this.state.copyID)}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faCopy} />\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body>\r\n                                            {\r\n                                                Layout ?\r\n                                                    Layout.map((item) =>\r\n                                                        <Row>\r\n                                                            {item.children.length > 0 ?\r\n                                                                item.children.map((column) =>\r\n                                                                    <Col md={12 / item.children.length}>\r\n                                                                        {\r\n                                                                            column.children.map((component) => {\r\n                                                                                return (\r\n                                                                                    component.hasOwnProperty(\"children\") ?\r\n                                                                                        <Row>\r\n                                                                                            {component.children.map(componentrow =>\r\n                                                                                                //<Col md={12 / componentrow.length}>\r\n                                                                                                componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" &&\r\n                                                                                                <Col md={componentrow && componentrow.length || 4}>\r\n                                                                                                    <FormGroup>\r\n                                                                                                        <FormLabel>{componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label}</FormLabel>\r\n                                                                                                        <ReadOnlyText>{\"-\"}</ReadOnlyText>\r\n                                                                                                    </FormGroup>\r\n                                                                                                </Col>\r\n                                                                                            )\r\n                                                                                            }\r\n                                                                                        </Row>\r\n                                                                                        :\r\n                                                                                        component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" &&\r\n                                                                                        <FormGroup>\r\n                                                                                            <FormLabel>{component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label}</FormLabel>\r\n                                                                                            <ReadOnlyText> {\"-\"}</ReadOnlyText>\r\n                                                                                        </FormGroup>\r\n                                                                                )\r\n                                                                            })\r\n                                                                        }\r\n\r\n                                                                    </Col>\r\n                                                                )\r\n                                                                : \"\"}\r\n                                                        </Row>\r\n                                                    )\r\n                                                    :\r\n                                                    \"\"\r\n                                            }\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </ContentPanel>\r\n                                : \"\"}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n\r\n\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        size={this.props.Login.operation === 'copy' || \"approve\" ? 'lg' : \"xl\"}\r\n                        onSaveClick={this.props.Login.addMaster ? this.onSaveMasterRecord :\r\n                            this.props.Login.operation === 'copy' ? this.onSaveClick :\r\n                                this.props.Login.operation === \"preview\" ?\r\n                                    this.onExecuteClick : this.closeModal}\r\n                        hideSave={\r\n                            this.props.Login.addMaster ? false : this.props.Login.operation === 'copy' ? false : true}\r\n                        loginoperation={this.props.Login.operation === 'copy' ? false : true}\r\n                        operation={this.props.Login.operation}\r\n                        showValidate={\r\n                            this.props.Login.addMaster ? false : this.props.Login.loadCustomSearchFilter ? false :\r\n                                this.props.Login.operation === \"preview\" ? true : false}\r\n                        screenName={this.props.Login.operation === 'copy' ? \"IDS_TEMPLATE\" : \"IDS_PREVIEW\"}\r\n                        closeModal={this.closeModal}\r\n                        show={this.props.Login.openModal}\r\n                        onExecuteClick={this.onExecuteClick}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.props.Login.addMaster ?\r\n                            this.state.selectedMaster[this.props.Login.masterIndex] : this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.addMaster ?\r\n                            this.props.Login.masterextractedColumnList[this.props.Login.masterIndex].filter(x => x.mandatory === true)\r\n                            : this.props.Login.operation === 'copy' ?\r\n                                [{ \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"sregtemplatename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }] : this.props.Login.operation === \"preview\" ? this.mandatoryValidation() : []}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={(event) => this.onInputOnChange(event)}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.operation === 'copy' ?\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormInput\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                            name={\"sregtemplatename\"}\r\n                                            type=\"text\"\r\n                                            onChange={(event) => this.setState({ selectedRecord: { ...this.state.selectedRecord, sregtemplatename: event.target.value } })}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                            value={this.state.selectedRecord.sregtemplatename ? this.state.selectedRecord.sregtemplatename : \"\"}\r\n                                            isMandatory={true}\r\n                                            required={true}\r\n                                            maxLength={\"30\"}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                : this.props.Login.loadCustomSearchFilter ?\r\n                                    this.props.Login.seletedFilterComponent &&\r\n                                        this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ?\r\n                                        <KendoDatatoolFilter\r\n                                            filter={this.props.Login.kendoFilter}\r\n                                            handleFilterChange={this.handleFilterChange}\r\n                                            filterData={this.props.Login.lstPatient || []}\r\n                                            skip={this.props.Login.kendoSkip}\r\n                                            take={this.props.Login.kendoTake}\r\n                                            handlePageChange={this.handlePageChange}\r\n                                            fields={this.props.Login.fields || []}\r\n                                            gridColumns={this.props.Login.gridColumns || []}\r\n                                            onRowClick={this.handleKendoRowClick}\r\n                                            userInfo={this.props.Login.userInfo}\r\n\r\n                                        /> : <FilterQueryBuilder\r\n                                            fields={this.props.Login.fields || {}}\r\n                                            onChange={this.onChangeAwesomeQueryBuilder}\r\n                                            tree={this.props.Login.awesomeTree}\r\n                                            //   config={this.props.Login.awesomeConfig}\r\n                                            skip={this.props.Login.kendoSkip}\r\n                                            take={this.props.Login.kendoTake}\r\n                                            handlePageChange={this.handlePageChange}\r\n                                            gridColumns={this.props.Login.gridColumns || []}\r\n                                            filterData={this.props.Login.lstPatient}\r\n                                            onRowClick={this.handleKendoRowClick}\r\n                                            handleExecuteClick={this.handleExecuteClick}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                        // static={true}\r\n                                        // controlMap={this.state.controlMap}\r\n                                        // dataState={this.state.dataState}\r\n                                        // dataStateChange={this.dataStateChange}\r\n                                        />\r\n                                    : this.props.Login.addMaster ?\r\n                                        <AddMasterRecords\r\n                                            selectedControl={this.props.Login.selectedControl[this.props.Login.masterIndex]}\r\n                                            fieldList={this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex]}\r\n                                            extractedColumnList={this.props.Login.masterextractedColumnList[this.props.Login.masterIndex]}\r\n                                            // primaryKeyField={this.props.Login.masterprimaryKeyField}\r\n                                            selectedRecord={this.state.selectedMaster[this.props.Login.masterIndex] || {}}\r\n                                            onInputOnChange={this.onInputOnChangeMaster}\r\n                                            onComboChange={this.onComboChangeMaster}\r\n                                            handleDateChange={this.handleDateChangeMaster}\r\n                                            dataList={this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex]}\r\n                                            onNumericInputOnChange={this.onNumericInputOnChangeMaster}\r\n                                            masterDesign={this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex]}\r\n                                            mastertimeZoneList={this.props.Login.mastertimeZoneList}\r\n                                            masterdefaultTimeZone={this.props.Login.masterdefaultTimeZone}\r\n                                            onComboChangeMasterDyanmic={this.onComboChangeMasterDyanmic}\r\n                                            handleDateChangeMasterDynamic={this.handleDateChangeMasterDynamic}\r\n                                            onInputOnChangeMasterDynamic={this.onInputOnChangeMasterDynamic}\r\n                                            onNumericInputChangeMasterDynamic={this.onNumericInputChangeMasterDynamic}\r\n                                            onNumericBlurMasterDynamic={this.onNumericBlurMasterDynamic}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            Login={this.props.Login}\r\n                                            addMasterRecord={this.addMasterRecord}\r\n                                            userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                            masterIndex={this.props.Login.masterIndex}\r\n                                        />\r\n                                        :\r\n                                        <DynamicSlideout\r\n                                            selectedRecord={this.props.Login.selectedRecord}\r\n                                            templateData={this.props.Login.masterData.selectedTemplate &&\r\n                                                this.props.Login.masterData.selectedTemplate.jsondata}\r\n                                            //handleChange={this.handleChange}\r\n                                            handleDateChange={this.handleDateChange}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onNumericInputChange={this.onNumericInputChange}\r\n                                            comboData={this.props.Login.comboData}\r\n                                            onComboChange={this.onComboChange}\r\n                                            onDropFile={this.onDropFile}\r\n                                            deleteAttachment={this.deleteAttachment}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            timeZoneList={this.props.Login.timeZoneList}\r\n                                            defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                            Login={this.props.Login}\r\n                                            addMasterRecord={this.addMasterRecord}\r\n                                            custombuttonclick={this.custombuttonclick}\r\n                                            onNumericBlur={this.onNumericBlur}\r\n                                            userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                        />\r\n                        } />\r\n                    : \"\"}\r\n\r\n                {this.props.Login.openPortal ?\r\n                    <PortalModal>\r\n                        <PreRegDesignPopUp\r\n                            closeModal={this.closeModal}\r\n                            nsampletypecode={this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item.value : -1}\r\n                            sampleType={this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item : undefined}\r\n                            ncategorybasedflowrequired={this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item.item.ncategorybasedflowrequired : 4}\r\n                            searchRef={this.searchRef}\r\n                        />\r\n                    </PortalModal> : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    onComboChangeMaster = (comboData, fieldName, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        if (comboData !== null) {\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                selectedMaster[masterIndex][item.tableDataField] = comboData.value;\r\n            }\r\n            else if (item.foreignDataField) {\r\n                selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\r\n            }\r\n        }\r\n        selectedMaster[masterIndex][fieldName] = comboData;\r\n        if (item.childIndex !== undefined) {\r\n            this.props.getChildComboMaster(selectedMaster, fieldName, item,\r\n                this.props.Login.selectedControl,\r\n                this.props.Login.masterfieldList,\r\n                this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex)\r\n        } else {\r\n            this.setState({ selectedMaster });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChangeMaster = (dateName, dateValue, item) => {\r\n        //   const { selectedMaster } = this.state;\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n        const age = ageCalculate(dateValue);\r\n        selectedMaster[masterIndex][\"sage\"] = age;\r\n        this.setState({ selectedMaster });\r\n\r\n    }\r\n\r\n    onNumericInputOnChangeMaster = (value, name, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n\r\n    onInputOnChangeMaster = (event) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\r\n                    selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\r\n                    selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\r\n                    selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\r\n                    selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\r\n                    selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\r\n                    selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\r\n                    selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex].sflatnotemp = \"\";\r\n                    selectedMaster[masterIndex].shousenotemp = \"\";\r\n                    selectedMaster[masterIndex].spostalcodetemp = \"\";\r\n                    selectedMaster[masterIndex].sstreettemp = \"\";\r\n                    selectedMaster[masterIndex].scitynametemp = \"\";\r\n                    selectedMaster[masterIndex].sdistrictnametemp = \"\";\r\n                    selectedMaster[masterIndex].sregionnametemp = \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onSaveMasterRecord = (saveType, formRef) => {\r\n        //add / edit            \r\n\r\n        //add / edit            \r\n        const masterIndex = this.props.Login.masterIndex;\r\n        let inputData = [];\r\n        const selectedControl = this.props.Login.selectedControl\r\n        const masterDesign = this.props.Login.masterDesign\r\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n        inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n        const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase()\r\n\r\n\r\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n            const selectedMaster = this.state.selectedMaster;\r\n            inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n            inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\r\n            inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\r\n            inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique;\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = {\r\n                nformcode: selectedControl[masterIndex].table.item.nformcode,\r\n                ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n            const dateList = [];\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n\r\n            masterDesign[masterIndex] &&\r\n                masterDesign[masterIndex].slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ?\r\n                                            {\r\n                                                value: selectedMaster[masterIndex][componentrow.label].value,\r\n                                                label: selectedMaster[masterIndex][componentrow.label].label,\r\n                                                pkey: selectedMaster[masterIndex][componentrow.label].item.pkey,\r\n                                                nquerybuildertablecode: selectedMaster[masterIndex][componentrow.label].item.nquerybuildertablecode,\r\n                                                source: selectedMaster[masterIndex][componentrow.label].item.source\r\n                                            } : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\"\r\n\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                            //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        else {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) :\r\n                                                selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n                                                    : \"\";\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                            //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ?\r\n                                                { value: selectedMaster[masterIndex][`tz${componentrow.label}`].value, label: selectedMaster[masterIndex][`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ?\r\n                                            selectedMaster[masterIndex][componentrow.label] : \"\"\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                    }\r\n                                    return inputData[\"dynamicmaster\"];\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        {\r\n                                            value: selectedMaster[masterIndex][component.label].value,\r\n                                            label: selectedMaster[masterIndex][component.label].label,\r\n                                            pkey: selectedMaster[masterIndex][component.label].item.pkey,\r\n                                            nquerybuildertablecode: selectedMaster[masterIndex][component.label].item.nquerybuildertablecode,\r\n                                            source: selectedMaster[masterIndex][component.label].item.source\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                    //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false);\r\n                                        // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                        // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                    } else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                            //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                            formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) :\r\n                                            selectedMaster[masterIndex][component.label] ?\r\n                                                // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                                //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                                formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ?\r\n                                            { value: selectedMaster[masterIndex][`tz${component.label}`].value, label: selectedMaster[masterIndex][`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        selectedMaster[masterIndex][component.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                }\r\n                            }\r\n                            return inputData[\"dynamicmaster\"];\r\n                        }\r\n                        )\r\n                        return inputData[\"dynamicmaster\"];\r\n                    })\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n\r\n\r\n            inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n            inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n            inputData[\"masterdatelist\"] = dateList;\r\n\r\n\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === 137) {\r\n            inputData[\"noneedfilter\"] = 1\r\n            if(selectedControl[masterIndex].inputtype==='backendsearchfilter'||selectedControl[masterIndex].inputtype==='frontendsearchfilter'){\r\n                inputData[\"noneedfilter\"] = 2\r\n            }\r\n            \r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        // }\r\n\r\n        const inputParam = {\r\n            withoutCombocomponent: this.state.withoutCombocomponent,\r\n            comboComponents: this.state.comboComponents,\r\n            selectedRecord: this.state.selectedRecord,\r\n            selectedRecordName: 'selectedRecord',\r\n            loadSubSample: false,\r\n            selectedControl: this.props.Login.selectedControl,\r\n            comboData: this.props.Login.comboData,\r\n            comboName: 'comboData',\r\n            classUrl: selectedControl[masterIndex].table.item.classUrl,\r\n            methodUrl: selectedControl[masterIndex].table.item.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,// selectedControl[masterIndex].table.item.sdisplayname,\r\n            inputData: inputData,\r\n            operation: \"create\", saveType, formRef,\r\n            masterIndex,\r\n            selectedMaster: this.state.selectedMaster,\r\n            mastercomboComponents: this.props.Login.mastercomboComponents,\r\n            masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\r\n            masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\r\n            masterextractedColumnList: this.props.Login.masterextractedColumnList,\r\n            masterdataList: this.props.Login.masterdataList,\r\n            masterDesign: this.props.Login.masterDesign,\r\n            masterfieldList: this.props.Login.masterfieldList,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n\r\n        this.props.addMasterRecord(inputParam, this.props.Login.masterData)\r\n\r\n\r\n        // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n        //             openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n        //             operation: this.props.Login.operation\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n        //  this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        //  }\r\n\r\n    }\r\n\r\n    mandatoryValidation = () => {\r\n        const mandatoryFields = []\r\n        const selectedRecord = this.state.selectedRecord;\r\n        this.props.Login.masterData.selectedTemplate &&\r\n            this.props.Login.masterData.selectedTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.mandatory === true) {\r\n                                    if (componentrow.recordbasedshowhide) {\r\n                                        if (this.state.selectedRecord[componentrow.parentLabel]\r\n                                            === componentrow.recordbasedhide) {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                        } else {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    if (componentrow.inputtype === \"email\") {\r\n\r\n                                        selectedRecord[componentrow.label] &&\r\n                                            selectedRecord[componentrow.label] !== \"\" &&\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                    }\r\n                                }\r\n                                return null;\r\n                            })\r\n                            : component.mandatory === true ?\r\n                                component.recordbasedshowhide ?\r\n                                    this.state.selectedRecord[component.parentLabel]\r\n                                        === component.recordbasedhide ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            }) : \"\" :\r\n                                    component.inputtype === \"email\" ?\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                        :\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                : selectedRecord[component.label] ?\r\n                                    component.inputtype === \"email\" ?\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        }) : \"\" : \"\"\r\n                    })\r\n                })\r\n            })\r\n\r\n        return mandatoryFields;\r\n    }\r\n\r\n    addMasterRecord = (control) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        if (masterIndex !== undefined) {\r\n            masterIndex = masterIndex + 1;\r\n        } else {\r\n            masterIndex = 0\r\n        }\r\n        let selectedControl = this.props.Login.selectedControl || []\r\n        let selectedMaster = this.state.selectedMaster || []\r\n        selectedMaster[masterIndex] = {}\r\n        selectedControl[masterIndex] = control\r\n\r\n        let fieldList = this.props.Login.masterfieldList || []\r\n        fieldList[masterIndex] = []\r\n\r\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n        masterComboColumnFiled[masterIndex] = []\r\n\r\n        let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n        extractedColumnList[masterIndex] = []\r\n\r\n        let masterdataList = this.props.Login.masterdataList || []\r\n        let masterDesign = this.props.Login.masterDesign || []\r\n        let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n        let mastercomboComponents = this.props.Login.mastercomboComponents || []\r\n\r\n        masterdataList[masterIndex] = []\r\n        masterDesign[masterIndex] = []\r\n        masterwithoutCombocomponent[masterIndex] = []\r\n        mastercomboComponents[masterIndex] = []\r\n\r\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n            if (control.table.item.component === 'Type2Component') {\r\n                fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n            } else {\r\n                fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n            }\r\n\r\n\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    selectedMaster,\r\n                    //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo)\r\n        }\r\n        else if (control.table.item.component === 'Type3Component') {\r\n            fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n            masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterprimaryKeyField: primaryKeyField,\r\n                masterComboColumnFiled: masterComboColumnFiled,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                selectedMaster,\r\n                screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n            }\r\n\r\n            this.props.getAddMasterCombo(inputParam);\r\n\r\n        }\r\n        else if (control.table.item.component === 'Dynamic') {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterComboColumnFiled,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterComboColumnFiled,\r\n                selectedMaster\r\n            }\r\n            this.props.getDynamicMasterTempalte(inputParam);\r\n        }\r\n\r\n        // this.props.getMasterRecord(control);\r\n    }\r\n\r\n\r\n    onExecuteClick = () => {\r\n        const selectedRecord = this.state.selectedRecord || {}\r\n        const userInfo = this.props.Login.userInfo\r\n        const sampleRegistration = {}\r\n        sampleRegistration[\"jsondata\"] = {}\r\n        const dateList = []\r\n        const defaulttimezone = this.props.Login.defaultTimeZone\r\n\r\n        console.log(\"selected in execute:\", selectedRecord);\r\n\r\n        this.props.Login.masterData.selectedTemplate &&\r\n            this.props.Login.masterData.selectedTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            return component.children.map(componentrow => {\r\n\r\n                                if (componentrow.inputtype === \"date\") {\r\n                                    if (componentrow.mandatory) {\r\n                                        sampleRegistration[\"jsondata\"][componentrow.label] = typeof selectedRecord[componentrow.label] === \"object\" ?\r\n                                            convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : \"\";\r\n                                    } else {\r\n                                        sampleRegistration[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                            typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : \"\" :\r\n                                            selectedRecord[componentrow.label] ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : \"\" : \"\";\r\n\r\n                                    }\r\n                                    if (componentrow.timezone) {\r\n                                        sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                                            { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                    dateList.push(componentrow.label)\r\n                                }\r\n\r\n                            })\r\n                            return sampleRegistration;\r\n                        }\r\n                        else {\r\n\r\n                            if (component.inputtype === \"date\") {\r\n                                if (component.mandatory) {\r\n                                    sampleRegistration[\"jsondata\"][component.label] = typeof selectedRecord[component.label] === \"object\" ?\r\n                                        convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : new Date(), userInfo) :\r\n                                        selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : \"\";\r\n                                } else {\r\n                                    sampleRegistration[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                        typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : \"\" :\r\n                                        selectedRecord[component.label] ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : \"\" : \"\";\r\n                                }\r\n                                if (component.timezone) {\r\n                                    sampleRegistration[\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ?\r\n                                        { value: selectedRecord[`tz${component.label}`].value, label: selectedRecord[`tz${component.label}`].label } :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n                                }\r\n                                dateList.push(component.label)\r\n                            }\r\n                            return sampleRegistration;\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n\r\n        const { dateconstraints, combinationunique } = this.getJsondata(this.props.Login.masterData.selectedTemplate.jsondata)\r\n\r\n        const inputParam = {\r\n            Registration: sampleRegistration,\r\n            DateList: dateList,\r\n            dateconstraints: dateconstraints,\r\n            userinfo: userInfo,\r\n            combinationunique: combinationunique,\r\n        }\r\n\r\n        this.props.validatePreview(inputParam);\r\n\r\n    }\r\n\r\n\r\n    getJsondata = (templatedata) => {\r\n\r\n        let dateconstraints = [];\r\n        let combinationunique = []\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                            // componentRow.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && combinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n                            if (componentRow.inputtype === 'date') {\r\n                                // sampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                dateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\r\n                            }\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        component.unique && combinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        if (component.inputtype === 'date') {\r\n                            dateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\r\n                        }\r\n                        return null;\r\n                    }\r\n                })\r\n            }\r\n            )\r\n        )\r\n        let jsondata = {\r\n            combinationunique,\r\n            dateconstraints,\r\n        }\r\n        return jsondata;\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n        let { userRoleControlRights, controlMap, addTemplateId,\r\n            sampleTypeOptions, breadCrumbData, selectedSampleType,\r\n            editId, deleteId, approveID, copyID, selectedRecord, comboComponents,\r\n            previewId, withoutCombocomponent, kendoSkip, kendoTake,\r\n            awesomeConfig, awesomeTree, kendoFilter, selectedMaster\r\n        } = this.state;\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            updateState = true;\r\n            addTemplateId = controlMap.has(\"AddTemplate\") && controlMap.get(\"AddTemplate\").ncontrolcode;\r\n            editId = controlMap.has(\"EditTemplate\") && controlMap.get(\"EditTemplate\").ncontrolcode;\r\n            deleteId = controlMap.has(\"DeleteTemplate\") && controlMap.get(\"DeleteTemplate\").ncontrolcode;\r\n            approveID = controlMap.has(\"ApproveTemplate\") && controlMap.get(\"ApproveTemplate\").ncontrolcode;\r\n            copyID = controlMap.has(\"CopyTemplate\") && controlMap.get(\"CopyTemplate\").ncontrolcode;\r\n            previewId = controlMap.has(\"PreviewTemplate\") && controlMap.get(\"PreviewTemplate\").ncontrolcode;\r\n        }\r\n        if (this.props.Login.masterData.SampleTypes !== previousProps.Login.masterData.SampleTypes) {\r\n            sampleTypeOptions = constructOptionList(this.props.Login.masterData.SampleTypes || [], 'nsampletypecode', 'ssampletypename', 'nsorter', \"ascending\").get(\"OptionList\")\r\n            selectedSampleType = sampleTypeOptions.length > 0 ? sampleTypeOptions[0] : {};\r\n            breadCrumbData = sampleTypeOptions.length > 0 ? [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": sampleTypeOptions[0].label,\r\n                    \"item\": sampleTypeOptions[0]\r\n                }\r\n            ] : [];\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.realSampleType !== previousProps.Login.realSampleType) {\r\n            updateState = true;\r\n            breadCrumbData = this.props.Login.realSampleType || this.state.breadCrumbData;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n        if (this.props.Login.selectedMaster !== previousProps.Login.selectedMaster) {\r\n            updateState = true;\r\n            selectedMaster = this.props.Login.selectedMaster\r\n        }\r\n\r\n        if (this.props.Login.comboComponents !== previousProps.Login.comboComponents) {\r\n            updateState = true;\r\n            comboComponents = this.props.Login.comboComponents\r\n        }\r\n        if (this.props.Login.withoutCombocomponent !== previousProps.Login.withoutCombocomponent) {\r\n            updateState = true;\r\n            withoutCombocomponent = this.props.Login.withoutCombocomponent\r\n        }\r\n\r\n        // if (this.props.Login.kendoTake !== previousProps.Login.kendoTake) {\r\n        //     updateState = true;\r\n        //     kendoTake = this.props.Login.kendoTake\r\n        // }\r\n\r\n\r\n        if (updateState) {\r\n            this.setState({\r\n                userRoleControlRights, controlMap, addTemplateId, sampleTypeOptions,\r\n                breadCrumbData, selectedSampleType,\r\n                editId, deleteId, approveID, copyID, selectedRecord,\r\n                comboComponents, previewId, withoutCombocomponent, selectedMaster\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    filterComboChange = (comboData) => {\r\n        this.setState({ selectedSampleType: comboData })\r\n    }\r\n\r\n    closeFilter = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.reloadData()\r\n    }\r\n\r\n\r\n    removeIndex = (data, removeIndex) => {\r\n        const data1 = [...data.splice(0, removeIndex), ...data.splice(removeIndex + 1)]\r\n        return data1\r\n    }\r\n\r\n    closeModal = () => {\r\n        let updateInfo = {}\r\n        if (this.props.Login.addMaster) {\r\n\r\n            let masterIndex = this.props.Login.masterIndex;\r\n            if (masterIndex !== 0) {\r\n                const screenName = this.props.Login.selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                const selectedMaster = this.removeIndex(this.props.Login.selectedMaster, masterIndex)\r\n                const selectedControl = this.removeIndex(this.props.Login.selectedControl, masterIndex)\r\n                const masterextractedColumnList = this.props.Login.masterextractedColumnList && this.removeIndex(this.props.Login.masterextractedColumnList, masterIndex)\r\n                const masterfieldList = this.props.Login.masterfieldList && this.removeIndex(this.props.Login.masterfieldList, masterIndex)\r\n                const masterdataList = this.props.Login.masterdataList && this.removeIndex(this.props.Login.masterdataList, masterIndex)\r\n                const mastercomboComponents = this.props.Login.mastercomboComponents && this.removeIndex(this.props.Login.mastercomboComponents, masterIndex)\r\n                const masterComboColumnFiled = this.props.Login.masterComboColumnFiled && this.removeIndex(this.props.Login.masterComboColumnFiled, masterIndex)\r\n                const masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent && this.removeIndex(this.props.Login.masterwithoutCombocomponent, masterIndex)\r\n                const masterDesign = this.props.Login.masterDesign && this.removeIndex(this.props.Login.masterDesign, masterIndex)\r\n                masterIndex = masterIndex - 1;\r\n\r\n\r\n                updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectedMaster,\r\n                        selectedControl,\r\n                        masterextractedColumnList,\r\n                        masterfieldList,\r\n                        masterdataList,\r\n                        mastercomboComponents,\r\n                        masterwithoutCombocomponent,\r\n                        masterComboColumnFiled,\r\n                        masterDesign,\r\n                        masterIndex,\r\n                        screenName\r\n                    }\r\n\r\n                }\r\n\r\n            } else {\r\n                // selectedMaster = []\r\n                // selectedControl = []\r\n                // masterextractedColumnList = []\r\n                // masterfieldList = []\r\n                // addMaster = true\r\n                // masterdataList = []\r\n                // mastercomboComponents = []\r\n                // masterwithoutCombocomponent = []\r\n                // masterComboColumnFiled = []\r\n                // masterDesign = []\r\n                // masterIndex = undefined\r\n                // screenName=this.props.Login.inputParam.displayName\r\n\r\n                updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectedMaster: [],\r\n                        selectedControl: [],\r\n                        masterextractedColumnList: [],\r\n                        masterfieldList: [],\r\n                        addMaster: false,\r\n                        masterdataList: [],\r\n                        mastercomboComponents: [],\r\n                        masterwithoutCombocomponent: [],\r\n                        masterComboColumnFiled: [],\r\n                        masterDesign: [],\r\n                        masterIndex: undefined\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n        else if (!this.props.Login.loadCustomSearchFilter) {\r\n            let loadEsign = this.props.Login.loadEsign;\r\n            let openModal = this.props.Login.openModal;\r\n            let openPortal = this.props.Login.openPortal;\r\n            let selectedRecord = this.props.Login.selectedRecord;\r\n            let showFilter = this.props.Login.showFilter;\r\n            // let design = this.props.Login.design;\r\n            //let selectedFieldRecord =  this.props.Login.selectedFieldRecord;\r\n\r\n            if (this.props.Login.loadEsign) {\r\n                if (this.props.Login.operation === \"delete\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                    openPortal = false;\r\n                    selectedRecord = {};\r\n                    updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            openModal, openPortal, loadEsign,\r\n                            selectedRecord, selectedId: null, showFilter,\r\n                            design: [], selectedFieldRecord: {}, showConfirmAlert: false\r\n                        }\r\n                        // data: {openModal, loadEsign, selectedRecord}\r\n                    }\r\n                }\r\n                else if (this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                    selectedRecord['esignpassword'] = \"\";\r\n                    selectedRecord['esigncomments'] = \"\";\r\n                    selectedRecord['esignreason'] = \"\";\r\n                    // openPortal = true;\r\n                    updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            openModal, openPortal, loadEsign,\r\n                            selectedRecord, selectedId: null,\r\n                            showFilter, showConfirmAlert: false\r\n                        }\r\n                        // data: {openModal, loadEsign, selectedRecord}\r\n                    }\r\n                }\r\n                else {\r\n                    loadEsign = false;\r\n                    selectedRecord['esignpassword'] = \"\";\r\n                    selectedRecord['esigncomments'] = \"\";\r\n                    selectedRecord['esignreason'] = \"\";\r\n                    updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            openModal, openPortal, loadEsign,\r\n                            selectedRecord, selectedId: null, showFilter,\r\n                            design: [], selectedFieldRecord: {}, showConfirmAlert: false\r\n                        }\r\n                        // data: {openModal, loadEsign, selectedRecord}\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                openModal = false;\r\n                openPortal = false;\r\n                selectedRecord = {};\r\n                showFilter = false\r\n                updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        openModal, openPortal, loadEsign,\r\n                        selectedRecord, selectedId: null, showFilter,\r\n                        design: [], selectedFieldRecord: {}, showConfirmAlert: false\r\n                    }\r\n                    // data: {openModal, loadEsign, selectedRecord}\r\n                }\r\n            }\r\n\r\n        } else {\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadCustomSearchFilter: false, kendoSkip: 0,\r\n                    kendoTake: 5,\r\n                    kendoFilter: {\r\n                        logic: \"and\",\r\n                        filters: []\r\n                    },\r\n                    awesomeTree: undefined,\r\n                    awesomeConfig: undefined\r\n                }\r\n                // data: {openModal, loadEsign, selectedRecord}\r\n            }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    openModal = (ncontrolcode) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {}, operation: \"copy\", ncontrolcode, selectedId: null,\r\n                openModal: true, screenName: this.props.Login.inputParam.displayName\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let dataState = undefined;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let selectedId = null;\r\n        inputData['registrationtemplate'] =\r\n        {\r\n            nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\r\n            sregtemplatename: this.state.selectedRecord['sregtemplatename'],\r\n            nsampletypecode: this.props.Login.masterData.selectedTemplate.nsampletypecode\r\n        }\r\n\r\n        const inputParam = {\r\n            methodUrl: \"RegistrationTemplate\",\r\n            classUrl: 'dynamicpreregdesign',\r\n            searchRef: this.searchRef,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData, operation: this.props.Login.operation,\r\n            saveType, formRef, selectedId, dataState\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.inputParam.displayName,\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteApproveTemplate(\"delete\", deleteId));\r\n    }\r\n\r\n    deleteApproveTemplate = (operation, ncontrolCode) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const postParam = {\r\n            inputListName: \"RegistrationTemplate\",\r\n            selectedObject: \"selectedTemplate\",\r\n            primaryKeyField: \"nreactregtemplatecode\",\r\n            fetchUrl: \"dynamicpreregdesign/getRegistrationTemplateById\",\r\n            primaryKeyValue: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo, nsampletypecode: this.state.breadCrumbData[0] ?\r\n                    this.state.breadCrumbData[0].item.value : -1\r\n            },\r\n            masterData: this.props.Login.masterData\r\n        }\r\n        const data = []\r\n        const Layout = this.props.Login.masterData.selectedTemplate.jsondata\r\n        Layout.map(row => {\r\n            row.children.map(column => {\r\n                column.children.map(component => {\r\n                    if (component.hasOwnProperty(\"children\")) {\r\n                        component.children.map(componentrow => {\r\n                            if (this.state.breadCrumbData[0].item.value === -1)\r\n                                componentrow['label'] = componentrow.label + \"_child\"\r\n\r\n                            data.push(componentrow.label)\r\n\r\n                        })\r\n                    } else {\r\n                        if (this.state.breadCrumbData[0].item.value === -1) {\r\n                            component['label'] = component.label + \"_child\"\r\n                            data.push(component.label)\r\n                        } else {\r\n                            data.push(component.label)\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n        })\r\n\r\n\r\n        const inputParam = {\r\n            methodUrl: \"RegistrationTemplate\",\r\n            classUrl: 'dynamicpreregdesign',\r\n            postParam,\r\n            searchRef: this.searchRef,\r\n            inputData: {\r\n                registrationtemplate: {\r\n                    sregtemplatename: this.props.Login.masterData.selectedTemplate.sregtemplatename,\r\n                    nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\r\n                    jsonString: JSON.stringify(Layout),\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n                dynamicFields: data,\r\n                nsampletypecode: this.state.breadCrumbData[0].item.value\r\n\r\n            },\r\n            operation\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    openModal: true,\r\n                    operation: \"delete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        if (this.state.selectedSampleType) {\r\n            this.props.getRegistrationTemplate(this.state.selectedSampleType, this.props.Login.masterData, this.props.Login.userInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVALIABLE\" }));\r\n        }\r\n    }\r\n\r\n    getPreviewTemplate = (masterData, userInfo, editId) => {\r\n        let data = [];\r\n        const withoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.selectedTemplate.jsondata\r\n        Layout.map(row => {\r\n            row.children.map(column => {\r\n                column.children.map(component => {\r\n                    return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                        if (componentrow.inputtype === \"combo\"\r\n                            || componentrow.inputtype === \"backendsearchfilter\"\r\n                            || componentrow.inputtype === \"frontendsearchfilter\") {\r\n                            data.push(componentrow)\r\n                        } else {\r\n                            withoutCombocomponent.push(componentrow)\r\n                        }\r\n                    })\r\n                        : component.inputtype === \"combo\"\r\n                            || component.inputtype === \"backendsearchfilter\"\r\n                            || component.inputtype === \"frontendsearchfilter\" ? data.push(component) : withoutCombocomponent.push(component)\r\n                })\r\n            })\r\n        })\r\n\r\n        //const  customButtonComponent= withoutCombocomponent.filter(x=>(x.inputtype==='backendsearchfilter'||x.inputtype==='frontendsearchfilter'))\r\n        const comboComponents = data\r\n        let childColumnList = {};\r\n        data.map(columnList => {\r\n            const val = this.comboChild(data, columnList, childColumnList, true);\r\n            data = val.data;\r\n            childColumnList = val.childColumnList\r\n        })\r\n        console.log(\"md:\", masterData);\r\n        this.props.getPreviewTemplate(masterData, userInfo, editId, data, this.state.selectedRecord,\r\n            childColumnList, comboComponents, withoutCombocomponent, false, true, new Map(), true)\r\n\r\n    }\r\n\r\n    comboChild = (data, columnList, childColumnList, slice, customButtonComponent) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n\r\n                    // if (!columnList.inputtype === 'backendsearchfilter' &&\r\n                    //     !columnList.inputtype === 'frontendsearchfilter'\r\n                    // ) {\r\n                        let childList = []\r\n                        columnList.child.map(childData => {\r\n                            const index = data.findIndex(x => x.label === childData.label)\r\n                            if (index !== -1) {\r\n                                childList.push(data[index])\r\n                                if (slice) {\r\n                                    data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                                }\r\n                            }\r\n                        })\r\n\r\n                        childColumnList[columnList.label] = childList;\r\n                        if (childList.length > 0) {\r\n                            childList.map(y => {\r\n                                if (y.hasOwnProperty(\"child\")) {\r\n                                    const val = this.comboChild(data, y, childColumnList, slice)\r\n                                    retunObj[\"data\"] = val.data;\r\n                                    retunObj[\"childColumnList\"] = val.childColumnList;\r\n                                } else {\r\n                                    retunObj[\"data\"] = data;\r\n                                    retunObj[\"childColumnList\"] = childColumnList;\r\n                                }\r\n                            })\r\n                        } else {\r\n                            retunObj[\"data\"] = data;\r\n                            retunObj[\"childColumnList\"] = childColumnList;\r\n                        }\r\n                    // } else {\r\n                     \r\n                    //         columnList.child.map(childData => {\r\n                    //             const index = data.findIndex(x => x.label === childData.label)\r\n                    //             if (index !== -1) {\r\n                    //                 childList.push(data[index])\r\n                    //                 if (slice) {\r\n                    //                     data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                    //                 }\r\n                    //             }\r\n                    //         })\r\n                       \r\n                    //         childColumnList[columnList.label] = childList;\r\n                    // }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        //if (comboData) {\r\n        comboData[\"item\"] = {\r\n            ...comboData[\"item\"], \"pkey\": control.valuemember,\r\n            \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n            \"source\": control.source\r\n        };\r\n        selectedRecord[comboName] = comboData;\r\n\r\n        console.log(\"selected:\", selectedRecord, comboData, control, customName);\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.state.comboComponents, control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.state.comboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.state.withoutCombocomponent, control.child, \"label\")\r\n\r\n            if (comboData) {\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                    childComboList, childColumnList, this.state.withoutCombocomponent, [...childComboList, ...parentList])\r\n            } else {\r\n                let comboData = this.props.Login.comboData\r\n                const withoutCombocomponent = this.state.withoutCombocomponent || []\r\n                const inputParam = { control, comboComponents: this.state.comboComponents, withoutCombocomponent, selectedRecord, comboData }\r\n                const childParam = childComboClear(inputParam)\r\n                selectedRecord = childParam.selectedRecord\r\n                comboData = childParam.comboData\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord, comboData, loadCustomSearchFilter: false, }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, loadCustomSearchFilter: false, }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onInputOnChange = (event, radiotext) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'toggle') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedRecord[event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedRecord[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedRecord[event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = radiotext\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n        // this.saveComponentProperties()\r\n    }\r\n\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlur = (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord, withoutCombocomponent } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        if (this.props.Login.masterData.selectedTemplate.nsampletypecode === SampleType.CLINICALTYPE) {\r\n            const age = ageCalculate(dateValue);\r\n            const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n            selectedRecord[Age[0].label] = age\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n\r\n    onComboChangeMasterDyanmic = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        //if (comboData) {\r\n        comboData[\"item\"] = {\r\n            ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n            \"source\": control.source\r\n        };\r\n        selectedMaster[masterIndex][comboName] = comboData;\r\n\r\n        // console.log(\"selected:\", selectedMaster, comboData, control, customName);\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\")\r\n\r\n            if (comboData) {\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValuesForAddMaster(inputParem,\r\n                    this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList,\r\n                    childComboList, childColumnList,\r\n                    this.props.Login.masterwithoutCombocomponent,\r\n                    [...childComboList, ...parentList], masterIndex)\r\n            } else {\r\n                let comboData = this.props.Login.masterdataList\r\n                const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n                const inputParam = { control, comboComponents: this.props.Login.mastercomboComponents[masterIndex], withoutCombocomponent: withoutCombocomponent[masterIndex], selectedMaster: selectedMaster[masterIndex], comboData: comboData[masterIndex] }\r\n                const childParam = childComboClear(inputParam)\r\n                selectedMaster[masterIndex] = childParam.selectedRecord\r\n                comboData[masterIndex] = childParam.comboData\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedMaster, mastedataList: comboData }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedMaster }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChangeMasterDynamic = (event, radiotext) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'toggle') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedMaster[masterIndex][event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedMaster[masterIndex][event.target.name] = radiotext\r\n        } else {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n    handleDateChangeMasterDynamic = (dateValue, dateName) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericInputChangeMasterDynamic = (value, name) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericBlurMasterDynamic = (value, control) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (selectedMaster[masterIndex][control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onDrop = (value, type, oldVlaue) => {\r\n        const design = this.state.design;\r\n        let columns = design[0].children;\r\n        let designData = this.props.Login.ReactInputFields;\r\n        value = JSON.parse(value.fields);\r\n        value = { ...value, type: \"component\" }\r\n        let designDataIndex = designData.findIndex(item => item.label === value.label);\r\n        let firstIndex = columns[0] ? columns[0].children.findIndex(item => item.label === value.label) : -1;\r\n        let secondIndex = columns[1] ? columns[1].children.findIndex(item => item.label === value.label) : -1;\r\n\r\n        if (designDataIndex >= 0)\r\n            designData.splice(designDataIndex, 1);\r\n        if (firstIndex >= 0) {\r\n            if (type !== 1) {\r\n                columns[0].children.splice(firstIndex, 1);\r\n                // columns[0].splice(to, 0, columns[0].splice(from, 1)[0]);\r\n            } else {\r\n                if (oldVlaue) {\r\n                    oldVlaue = JSON.parse(oldVlaue);\r\n                    let from = columns[0].children.findIndex(item => item.label === value.label);\r\n                    let to = columns[0].children.findIndex(item => item.label === oldVlaue.label);\r\n                    columns[0].children.splice(to, 0, columns[0].children.splice(from, 1)[0]);\r\n                }\r\n            }\r\n\r\n        } else if (type === 1) {\r\n            if (columns[0]) {\r\n                columns[0].children.push(value);\r\n            } else {\r\n                columns[0] = {\r\n                    id: \"1\",\r\n                    type: \"column\",\r\n                    children: []\r\n                }\r\n\r\n                columns[0].children.push(value);\r\n            }\r\n        }\r\n        if (secondIndex >= 0) {\r\n            if (type !== 2) {\r\n                columns[1].splice(secondIndex, 1);\r\n            } else {\r\n                if (oldVlaue) {\r\n                    oldVlaue = JSON.parse(oldVlaue);\r\n                    let from = columns[1].children.findIndex(item => item.label === value.label);\r\n                    let to = columns[1].children.findIndex(item => item.label === oldVlaue.label);\r\n                    columns[1].children.splice(to, 0, columns[1].children.splice(from, 1)[0]);\r\n                }\r\n            }\r\n        } else if (type === 2) {\r\n            if (columns[1]) {\r\n                columns[1].children.push(value);\r\n            } else {\r\n                columns[1] = {\r\n                    id: \"2\",\r\n                    type: \"column\",\r\n                    children: []\r\n                }\r\n                columns[1].children.push(value);\r\n            }\r\n        }\r\n\r\n        // design.push(columns)\r\n        this.setState({ designData, design })\r\n    }\r\n\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    updateStore, crudMaster,\r\n    getReactInputFields, selectRegistrationTemplate, filterColumnData,\r\n    getRegistrationTemplate, getEditRegTemplate,\r\n    getPreviewTemplate, getChildValues,\r\n    getDynamicFilter, getDynamicFilterExecuteData,\r\n    validateEsignCredential, validatePreview, addMasterRecord,\r\n    getAddMasterCombo, getDynamicMasterTempalte, getChildComboMaster, getChildValuesForAddMaster\r\n})(injectIntl(DynamicPreRegDesign))"]},"metadata":{},"sourceType":"module"}