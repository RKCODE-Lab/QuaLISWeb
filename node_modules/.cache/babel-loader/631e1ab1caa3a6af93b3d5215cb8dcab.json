{"ast":null,"code":"import _defineProperty from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{toast}from'react-toastify';import{initRequest}from'./LoginAction';import{intl}from'../components/App';import Axios from'axios';import{numericGrade}from'../pages/ResultEntryBySample/ResultEntryValidation';import{constructOptionList,fillRecordBasedOnCheckBoxSelection,filterRecordBasedOnTwoArrays,getRecordBasedOnPrimaryKeyName,getSameRecordFromTwoArrays,replaceUpdatedObject,sortData,updatedObjectWithNewElement,rearrangeDateFormat}from'../components/CommonScript';import{transactionStatus}from'../components/Enumeration';export function getsubSampleREDetail(inputData,isServiceRequired){return function(dispatch){var inputParamData={ntype:2,nflag:inputData.nflag||2,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntranscode:String(inputData.ntransactionstatus),ntransactiontestcode:0,userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,napprovalversioncode:inputData.napprovalversioncode,fromdate:inputData.fromdate,todate:inputData.todate,activeTestKey:inputData.activeTestKey,activeSampleKey:inputData.activeSampleKey,nneedsubsample:inputData.masterData.nneedsubsample};var activeName=\"\";var dataStateName=\"\";// let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n//     documentDataState, testCommentDataState } = inputData\ndispatch(initRequest(true));if(isServiceRequired){rsapi.post(\"resultentrybysample/getResultEntryDetails\",_objectSpread(_objectSpread({},inputParamData),{},{checkBoxOperation:inputData.checkBoxOperation})).then(function(response){// if (response.data.DynamicGetSamples) {\n//     sortData(response.data.DynamicGetSamples, \"\", \"\");\n// }\n// if (response.data.DynamicGetTests) {\n//     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\n// }\n//sortData(response.data);\nvar oldSelectedTest=inputData.masterData.RESelectedTest;fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var RESelectedSubSample=inputData.checkBoxOperation==3?response.data.RESelectedSubSample:inputData.masterData.RESelectedSubSample;RESelectedSubSample=inputData.masterData.nneedsubsample?RESelectedSubSample:inputData.masterData.RE_SUBSAMPLE;var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{// ...response.data,\nRESelectedTest:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSample:inputData.RESelectedSample,RESelectedSubSample:RESelectedSubSample});// if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n//     inputData.searchSampleRef.current.value = \"\";\n//     masterData['searchedSample'] = undefined\n// }\nif(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTests']=undefined;}var _inputData=inputData,testskip=_inputData.testskip,testtake=_inputData.testtake;var bool=false;var skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}var TestParameters=[];var ResultUsedInstrument=[];var ResultUsedTasks=[];var RegistrationTestAttachment=[];var ResultChangeHistory=[];var RegistrationTestComment=[];if(inputData.checkBoxOperation===1){//added by sudharshanan for test select issue while sample click\nvar wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.RESelectedTest[0].ntransactiontestcode;}switch(inputData.activeTestKey){case\"IDS_RESULTS\":TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_TASK\":ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}else if(inputData.checkBoxOperation===5){var list=[];var dbData=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(response.data.TestParameters));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_INSTRUMENT\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedInstrument),_toConsumableArray(response.data.ResultUsedInstrument));ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TASK\":dbData=response.data.ResultUsedTasks||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedTasks),_toConsumableArray(dbData));list.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_RESULTCHANGEHISTORY\":dbData=response.data.ResultChangeHistory||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultChangeHistory),_toConsumableArray(dbData));ResultChangeHistory=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(dbData));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else{var _list=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":_list=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":_list=response.data.ResultUsedInstrument?sortData(response.data.ResultUsedInstrument,'descending','nresultusedinstrumentcode'):[];ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_TASK\":_list=response.data.ResultUsedTasks?sortData(response.data.ResultUsedTasks,'descending','nresultusedtaskcode'):[];_list.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":_list=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":_list=response.data.ResultChangeHistory?sortData(response.data.ResultChangeHistory,'descending','nresultchangehistorycode'):[];ResultChangeHistory=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":_list=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:_list=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{// wholeApprovalParameter,\nTestParameters:TestParameters,// wholeResultUsedInstrument,\nResultUsedInstrument:ResultUsedInstrument,// wholeResultUsedTasks,\nResultUsedTasks:ResultUsedTasks,// wholeRegistrationTestAttachment,\nRegistrationTestAttachment:RegistrationTestAttachment,// wholeResultChangeHistory,\nResultChangeHistory:ResultChangeHistory,// wholeRegistrationTestComments,\nRegistrationTestComment:RegistrationTestComment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,skip:undefined,take:undefined},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var oldSelectedTest=inputData.masterData.RESelectedTest;var TestSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest,inputData.removeElementFromArray[0].npreregno,\"npreregno\");var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=true;}else{isGrandChildGetRequired=false;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.RESelectedSample,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode.toString():\"\";var RESelectedSample=inputData.RESelectedSample;var RESelectedTest=inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[];var RESelectedSubSample=inputData.masterData.RE_SUBSAMPLE;inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"TestParameters\",\"ResultUsedInstrument\",\"ResultUsedTasks\",\"RegistrationTestAttachment\",\"ResultChangeHistory\",\"RegistrationTestComment\",\"ResultChangeHistory\"],ntransactiontestcode:ntransactiontestcode,RESelectedSample:RESelectedSample,RESelectedTest:RESelectedTest,RESelectedSubSample:RESelectedSubSample,checkBoxOperation:3,activeTestKey:inputData.activeTestKey});dispatch(getTestChildTabREDetail(inputData,true));}else{//added by sudharshanan for test select issue while sample click\nvar masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{RESelectedTest:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSample:inputData.RESelectedSample,RESelectedSubSample:inputData.masterData.RE_SUBSAMPLE});var wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var _ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{_ntransactiontestcode=masterData.RE_TEST[0].ntransactiontestcode;}var TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,_ntransactiontestcode,\"ntransactiontestcode\");var ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument||[],_ntransactiontestcode,\"ntransactiontestcode\");var ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks||[],_ntransactiontestcode,\"ntransactiontestcode\");var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode,\"ntransactiontestcode\");var ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory||[],_ntransactiontestcode,\"ntransactiontestcode\");var _inputData2=inputData,testskip=_inputData2.testskip,testtake=_inputData2.testtake;var bool=false;var skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSample:inputData.RESelectedSample,// selectedPreregno: inputData.npreregno,\n// RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n//     searchedTest[0]\n// ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n//     RE_TEST[0]\n// ] : [],\n// RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\nTestParameters:TestParameters,ResultUsedInstrument:ResultUsedInstrument,ResultUsedTasks:ResultUsedTasks,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,ResultChangeHistory:ResultChangeHistory,RESelectedSubSample:inputData.masterData.RE_SUBSAMPLE}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestKey:inputData.activeTestKey},skipInfo)});}}};}export function getTestREDetail(inputData,isServiceRequired){return function(dispatch){var activeName=\"\";var dataStateName=\"\";var inputParamData={nflag:3,ntype:3,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntransactiontestcode:0,ntranscode:inputData.ntransactionstatus.toString(),ntransactionsamplecode:inputData.ntransactionsamplecode,userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,activeTestKey:inputData.activeTestKey};// dispatch(initRequest(true));\n// rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\nif(isServiceRequired){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\",inputParamData).then(function(response){// let responseData = {\n//     ...response.data,\n//     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\n//     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\n//     // RESelectedTest: inputData.masterData.RESelectedTest\n// }\nvar oldSelectedTest=inputData.masterData.RESelectedTest;fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{// ...response.data,\nRESelectedTest:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSample:inputData.masterData.RESelectedSample,RESelectedSubSample:inputData.RESelectedSubSample||inputData.masterData.RESelectedSubSample});if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTests']=undefined;}var _inputData3=inputData,testskip=_inputData3.testskip,testtake=_inputData3.testtake;var bool=false;var skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}var TestParameters=[];var ResultUsedInstrument=[];var ResultUsedTasks=[];var RegistrationTestAttachment=[];var ResultChangeHistory=[];var RegistrationTestComment=[];if(inputData.checkBoxOperation===1){//added by sudharshanan for test select issue while sample click\nvar wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.RESelectedTest[0].ntransactiontestcode;}switch(inputData.activeTestKey){case\"IDS_RESULTS\":TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_TASK\":ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}else if(inputData.checkBoxOperation===5){var list=[];var dbData=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(response.data.TestParameters));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_INSTRUMENT\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedInstrument),_toConsumableArray(response.data.ResultUsedInstrument));ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TASK\":dbData=response.data.ResultUsedTasks||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedTasks),_toConsumableArray(dbData));list.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_RESULTCHANGEHISTORY\":dbData=response.data.ResultChangeHistory||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultChangeHistory),_toConsumableArray(dbData));ResultChangeHistory=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(dbData));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else{var _list2=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":_list2=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":_list2=response.data.ResultUsedInstrument?sortData(response.data.ResultUsedInstrument,'descending','nresultusedinstrumentcode'):[];ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_TASK\":_list2=response.data.ResultUsedTasks?sortData(response.data.ResultUsedTasks,'descending','nresultusedtaskcode'):[];_list2.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":_list2=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":_list2=response.data.ResultChangeHistory?sortData(response.data.ResultChangeHistory,'descending','nresultchangehistorycode'):[];ResultChangeHistory=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":_list2=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:_list2=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{// wholeApprovalParameter,\nTestParameters:TestParameters,// wholeResultUsedInstrument,\nResultUsedInstrument:ResultUsedInstrument,// wholeResultUsedTasks,\nResultUsedTasks:ResultUsedTasks,// wholeRegistrationTestAttachment,\nRegistrationTestAttachment:RegistrationTestAttachment,// wholeResultChangeHistory,\nResultChangeHistory:ResultChangeHistory,// wholeRegistrationTestComments,\nRegistrationTestComment:RegistrationTestComment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestKey:inputData.activeTestKey,screenName:inputData.screenName},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{//fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\nvar oldSelectedTest=inputData.masterData.RESelectedTest;var TestSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\");var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=true;}else{isGrandChildGetRequired=false;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.RESelectedSubSample,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactionsamplecode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode.toString():\"\";var RESelectedSubSample=inputData.RESelectedSubSample;var RESelectedTest=inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[];// let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\ninputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"TestParameters\",\"ResultUsedInstrument\",\"ResultUsedTasks\",\"RegistrationTestAttachment\",\"ResultChangeHistory\",\"RegistrationTestComment\",\"ResultChangeHistory\"],ntransactiontestcode:ntransactiontestcode,RESelectedSample:inputData.masterData.RESelectedSample,RESelectedTest:RESelectedTest,RESelectedSubSample:RESelectedSubSample,checkBoxOperation:3,activeTestKey:inputData.activeTestKey});dispatch(getTestChildTabREDetail(inputData,true));}else{//added by sudharshanan for test select issue while sample click\nvar masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{RESelectedTest:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSubSample:inputData.RESelectedSubSample});var wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var _ntransactiontestcode2;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{_ntransactiontestcode2=masterData.RE_TEST[0].ntransactiontestcode;}var TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,_ntransactiontestcode2,\"ntransactiontestcode\");var ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument||[],_ntransactiontestcode2,\"ntransactiontestcode\");var ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks||[],_ntransactiontestcode2,\"ntransactiontestcode\");var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory||[],_ntransactiontestcode2,\"ntransactiontestcode\");var _inputData4=inputData,testskip=_inputData4.testskip,testtake=_inputData4.testtake;var bool=false;var skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSubSample:inputData.RESelectedSubSample,// selectedPreregno: inputData.npreregno,\n// RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n//     searchedTest[0]\n// ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n//     RE_TEST[0]\n// ] : [],\n// RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\nTestParameters:TestParameters,ResultUsedInstrument:ResultUsedInstrument,ResultUsedTasks:ResultUsedTasks,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,ResultChangeHistory:ResultChangeHistory}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestKey:inputData.activeTestKey},skipInfo)});}}};}export function getSampleChildTabREDetail(inputData){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.ntransactiontestcode,npreregno:inputData.npreregno,userinfo:inputData.userinfo};var url=\"\";switch(inputData.activeSampleKey){case\"IDS_DOCUMENTS\":url=\"attachment/getSampleAttachment\";break;case\"IDS_SAMPLEATTACHMENTS\":url=\"attachment/getSampleAttachment\";break;case\"IDS_APPROVALHISTORY\":url=\"resultentrybysample/getSampleApprovalHistory\";break;default:url=\"attachment/getSampleAttachment\";break;}dispatch(initRequest(true));rsapi.post(url,inputParamData).then(function(response){var responseData=_objectSpread({},response.data);//responseData = sortData(responseData)\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{RESelectedSample:inputData.RESelectedSample}),loading:false,activeSampleKey:inputData.activeSampleKey,screenName:inputData.screenName}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getTestChildTabREDetail(inputData,isServiceRequired){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"),npreregno:inputData.npreregno,userinfo:inputData.userinfo};var activeName=\"\";var dataStateName=\"\";// let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n//     documentDataState, testCommentDataState } = inputData\nvar url=\"resultentrybysample/getTestbasedParameter\";switch(inputData.activeTestKey){case\"IDS_RESULTS\":url=\"resultentrybysample/getTestbasedParameter\";activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":url=\"resultentrybysample/getResultUsedInstrument\";activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":url=\"resultentrybysample/getResultUsedMaterial\";activeName=\"\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":url=\"resultentrybysample/getResultUsedTask\";activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":url=\"attachment/getTestAttachment\";activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":url=\"comments/getTestComment\";activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_DOCUMENTS\":url=\"attachment/getSampleAttachment\";activeName=\"\";dataStateName=\"documentDataState\";break;case\"IDS_RESULTCHANGEHISTORY\":url=\"resultentrybysample/getResultChangeHistory\";activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":url=\"attachment/getSampleAttachment\";activeName=\"\";dataStateName=\"resultDataState\";break;default:url=\"resultentrybysample/getTestbasedParameter\";activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}dispatch(initRequest(true));if(isServiceRequired){rsapi.post(url,inputParamData).then(function(response){var responseData=_objectSpread(_objectSpread({},response.data),{},{RESelectedSample:inputData.RESelectedSample||inputData.masterData.RESelectedSample,RESelectedTest:inputData.RESelectedTest});var skipInfo={};//responseData = sortData(responseData)\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),sortData(responseData)),{},{RESelectedTest:inputData.RESelectedTest});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,activeTestKey:inputData.activeTestKey,screenName:inputData.activeTestKey,testskip:undefined,testtake:undefined},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{//fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.RESelectedTest,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactiontestcode\",inputData.removeElementFromArray);var skipInfo={};var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{RESelectedTest:inputData.RESelectedTest});if(masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestKey:inputData.activeTestKey,screenName:inputData.screenName},skipInfo)});}};}export function getRERegistrationType(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getRegistrationType\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getRERegistrationSubType(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getRegistrationsubType\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultRegistrationType:inputData.defaultRegistrationType}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREApprovalConfigVersion(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getApprovalConfigVersion\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultRegistrationSubType:inputData.defaultRegistrationSubType// fromDate: inputData.fromdate,\n//  toDate: inputData.todate\n}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREFilterStatus(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getFilterStatus\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultjobstatus:inputData.defaultjobstatus// fromDate: inputData.fromdate,\n// toDate: inputData.todate\n}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREJobStatus(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getJobStatus\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultApprovalConfigVersion:inputData.defaultApprovalConfigVersion// fromDate: inputData.fromdate,\n// toDate: inputData.todate\n}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getResultEntryDetails(inputParamData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultEntryDetails\",_objectSpread(_objectSpread({},inputParamData.inputData),{},{nneedsubsample:inputParamData.masterData.nneedsubsample})).then(function(response){var masterData=_objectSpread({},inputParamData.masterData);if(inputParamData.refs.searchSampleRef!==undefined&&inputParamData.refs.searchSampleRef.current!==null){inputParamData.refs.searchSampleRef.current.value=\"\";masterData['searchedSample']=undefined;}if(inputParamData.refs.searchSubSampleRef!==undefined&&inputParamData.refs.searchSubSampleRef.current!==null){inputParamData.refs.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputParamData.refs.searchTestRef!==undefined&&inputParamData.refs.searchTestRef.current!==null){inputParamData.refs.searchTestRef.current.value=\"\";// masterData['searchedTests'] = undefined\nmasterData['searchedTest']=undefined;}dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},{realFromDate:response.data[\"fromDate\"],realToDate:response.data[\"toDate\"]}),loading:false,showTest:inputParamData.inputData.showTest,showSample:inputParamData.inputData.showSample,activeTestKey:inputParamData.inputData.activeTestKey,skip:0,take:inputParamData.inputData.take,testskip:0,testtake:inputParamData.inputData.testtake,resultDataState:_objectSpread(_objectSpread({},inputParamData.resultDataState),{},{sort:undefined,filter:undefined}),instrumentDataState:_objectSpread(_objectSpread({},inputParamData.instrumentDataState),{},{sort:undefined,filter:undefined}),materialDataState:_objectSpread(_objectSpread({},inputParamData.materialDataState),{},{sort:undefined,filter:undefined}),taskDataState:_objectSpread(_objectSpread({},inputParamData.taskDataState),{},{sort:undefined,filter:undefined}),documentDataState:_objectSpread(_objectSpread({},inputParamData.documentDataState),{},{sort:undefined,filter:undefined}),resultChangeDataState:_objectSpread(_objectSpread({},inputParamData.resultChangeDataState),{},{sort:undefined,filter:undefined}),testCommentDataState:_objectSpread(_objectSpread({},inputParamData.testCommentDataState),{},{sort:undefined,filter:undefined}),historyDataState:_objectSpread(_objectSpread({},inputParamData.historyDataState),{},{sort:undefined,filter:undefined}),samplePrintHistoryDataState:_objectSpread(_objectSpread({},inputParamData.samplePrintHistoryDataState),{},{sort:undefined,filter:undefined}),sampleHistoryDataState:_objectSpread(_objectSpread({},inputParamData.sampleHistoryDataState),{},{sort:undefined,filter:undefined})}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function resultGetModule(inputData,userInfo,ncontrolcode,testskip,testtake){return function(dispatch){var TestList=_toConsumableArray(inputData.RE_TEST);TestList=TestList.splice(testskip,testskip+testtake);var acceptTestList=getSameRecordFromTwoArrays(TestList,inputData.RESelectedTest,\"ntransactiontestcode\");if(acceptTestList&&acceptTestList.length>0){if(Object.values(inputData).length>0&&inputData.RESelectedTest.length>0){var inputParamData={ntransactiontestcode:acceptTestList?acceptTestList.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",userinfo:userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultEntryResults\",inputParamData).then(function(response){var selectedResultGrade=[];var paremterResultcode=[];var parameterResults=response.data.ResultParameter;parameterResults.map(function(param,index){selectedResultGrade[index]={ngradecode:param.ngradecode};paremterResultcode[index]=param.ntransactionresultcode;response.data.PredefinedValues&&response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]&&response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(function(predefinedvalue){if(predefinedvalue.ndefaultstatus===transactionStatus.YES){response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]=constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]||[],'spredefinedname','spredefinedname',undefined,undefined,undefined).get(\"OptionList\");if(response.data.ResultParameter[index].sresult===null){response.data.ResultParameter[index].sresult=predefinedvalue.spredefinedname;response.data.ResultParameter[index].sfinal=predefinedvalue.spredefinedname;response.data.ResultParameter[index].editable=true;response.data.ResultParameter[index].ngradecode=predefinedvalue.ngradecode;}}return null;});return null;});dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData),response.data),{},{paremterResultcode:paremterResultcode//,\n//selectedResultGrade ,\n}),selectedRecord:{selectedResultGrade:selectedResultGrade,ResultParameter:response.data.ResultParameter},loading:false,screenName:\"IDS_RESULTENTRY\",openModal:true,operation:\"update\",activeTestKey:\"IDS_RESULTS\",ncontrolcode:ncontrolcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});//}\n}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOENTERRESULT\"}));}}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOENTERRESULT\"}));}};}export function completeTest(inputParam,acceptList,userInfo,completeResultId){if(acceptList!==undefined&&acceptList.length>0){return function(dispatch){var inputData=inputParam.testChildGetREParam;var inputParamData={ntype:3,nflag:3,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntranscode:String(inputData.ntransactionstatus),napprovalversioncode:inputData.napprovalversioncode,napprovalconfigcode:inputData.napprovalconfigcode,ntransactionsamplecode:inputData.ntransactionsamplecode,userinfo:userInfo,fromdate:inputData.fromdate,todate:inputData.todate,ntestcode:inputData.ntestcode,transactiontestcode:acceptList?acceptList.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ntransactiontestcode:0,activeTestKey:inputData.activeTestKey,ncontrolcode:inputParam.inputData.ncontrolcode,nneedsubsample:inputData.masterData.nneedsubsample};var activeName=\"\";var dataStateName=\"\";// let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n//     documentDataState, testCommentDataState } = inputData\n// let url = \"resultentrybysample/getTestbasedParameter\"\nswitch(inputData.activeTestKey){case\"IDS_RESULTS\":activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":activeName=\"\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_DOCUMENTS\":activeName=\"\";dataStateName=\"documentDataState\";break;case\"IDS_RESULTCHANGEHISTORY\":activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":activeName=\"\";dataStateName=\"resultDataState\";break;default:activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}dispatch(initRequest(true));rsapi.post(\"resultentrybysample/completeTest\",inputParamData).then(function(response){var RE_SAMPLE=[];var RE_SUBSAMPLE=[];var RE_TEST=[];var responseData=response.data;if(responseData[\"RE_TEST\"].length>0){RE_TEST=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"],responseData[\"RE_TEST\"],\"npreregno\");}else{RE_TEST=inputData.masterData[\"RE_TEST\"];}RE_SUBSAMPLE=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"],RE_TEST,\"ntransactionsamplecode\");if(RE_SUBSAMPLE.length>0){RE_SAMPLE=inputData.masterData[\"RE_SAMPLE\"];}else{RE_SAMPLE=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"],RE_TEST,\"npreregno\");}var RESelectedSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"],RE_TEST,\"npreregno\");var RESelectedSubSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"],RE_TEST,\"ntransactionsamplecode\");var RESelectedTest1=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"],acceptList,\"ntransactiontestcode\");var RESelectedTest2=updatedObjectWithNewElement(RESelectedTest1,responseData.RESelectedTest);var searchedSample=undefined;if(inputData.masterData[\"searchedSample\"]){searchedSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"],RE_TEST,\"npreregno\");}var masterData=_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{RE_SAMPLE:RE_SAMPLE,RE_SUBSAMPLE:RE_SUBSAMPLE,RESelectedSubSample:RESelectedSubSample,searchedSample:searchedSample,RESelectedSample:RESelectedSample,RESelectedTest:RESelectedTest2,RE_TEST:responseData[\"RE_TEST\"]});var skipInfo={};if(masterData.RE_SAMPLE&&masterData.RE_SAMPLE.length<=inputParam.skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{skip:0,take:inputParam.take});}if(masterData.RE_TEST&&masterData.RE_TEST.length<=inputParam.testskip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{testskip:0,testtake:inputParam.testtake});}if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}var respObject=_objectSpread(_objectSpread({},inputParamData.inputData),{},{openModal:false,loadEsign:false,showConfirmAlert:false,selectedRecord:undefined,loading:false,screenName:inputData.activeTestKey},skipInfo);if(searchedSample&&RESelectedSample.length===0&&searchedSample.length>0){var _objectSpread10;var paramList=inputParam.postParamList[0];var inputParameter=_objectSpread(_objectSpread({},paramList.fecthInputObject.fecthInputObject),{},(_objectSpread10={fetchUrl:paramList.fetchUrl},_defineProperty(_objectSpread10,paramList.primaryKeyField,String(searchedSample[0][paramList.primaryKeyField])),_defineProperty(_objectSpread10,\"ntype\",2),_defineProperty(_objectSpread10,\"nflag\",2),_objectSpread10));respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSample:[searchedSample[0]]})});dispatch(fetchSelectedData(inputParameter,respObject));}else if(!searchedSample&&RESelectedSample.length===0&&RE_SAMPLE.length>0){var _objectSpread11;var _paramList=inputParam.postParamList[0];var _inputParameter=_objectSpread(_objectSpread({},_paramList.fecthInputObject.fecthInputObject),{},(_objectSpread11={fetchUrl:_paramList.fetchUrl},_defineProperty(_objectSpread11,_paramList.primaryKeyField,String(RE_SAMPLE[0][_paramList.primaryKeyField])),_defineProperty(_objectSpread11,\"ntype\",2),_defineProperty(_objectSpread11,\"nflag\",2),_objectSpread11));respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSample:[RE_SAMPLE[0]]})});dispatch(fetchSelectedData(_inputParameter,respObject));}else{respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:masterData});dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({},respObject),{},{loading:false})});}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}else{toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOCOMPLETE\"}));}}//Compare two array and return the first array which is available in second array\nexport function compareTwoArray(firstArray,secondArray,PrimaryKey){var filterArray=firstArray.filter(function(x){return secondArray.some(function(y){return x[PrimaryKey]===y[PrimaryKey];});});return filterArray;}function fetchSelectedData(inputParam,respObject){return function(dispatch){rsapi.post(inputParam.fetchUrl,_objectSpread({},inputParam)).then(function(response){var masterData=_objectSpread(_objectSpread(_objectSpread({},respObject.masterData),response.data),{},{RESelectedSample:response.data.RESelectedSample||respObject.masterData.RESelectedSample||[]});//sortData(masterData);\ndispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({},respObject),{},{masterData:masterData,loading:false})});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function testMethodSourceEdit(inputData){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.test.ntransactiontestcode,ntestgrouptestcode:inputData.test.ntestgrouptestcode,ntestcode:inputData.test.ntestcode,ncontrolcode:inputData.editSourceMethodId,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getTestMethodSource\",inputParamData).then(function(response){var TagSource=constructOptionList(response.data.SourceData||[],\"nsourcecode\",\"ssourcename\",undefined,undefined,undefined);var TagListSource=TagSource.get(\"OptionList\");var TagMethod=constructOptionList(response.data.MethodData||[],\"nmethodcode\",\"smethodname\",undefined,undefined,undefined);var TagListMethod=TagMethod.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{SourceData:TagListSource,MethodData:TagListMethod,RESelectedSubSample:inputData.masterData.RESelectedSubSample}),selectedRecord:{ntransactiontestcode:inputData.test.ntransactiontestcode,stestsynonym:inputData.test.stestsynonym,nsourcecode:response.data.SourceDataValue,nmethodcode:response.data.MethodDataValue},loading:false,screenName:\"IDS_TESTMETHODSOURCE\",openModal:true,operation:\"update\",ncontrolcode:inputData.editSourceMethodId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function updateParameterComments(inputData,masterData){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.ntransactiontestcode,ntransactionresultcode:inputData.ntransactionresultcode,sresultcomment:inputData.sresultcomment,transactiontestcode:inputData.transactiontestcode,userinfo:inputData.userinfo,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,ncontrolcode:inputData.ncontrolcode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/updateParameterComments\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),response.data),loading:false,loadEsign:false,screenName:\"IDS_RESULT\",openModal:false,operation:\"update\",ncontrolcode:inputData.ncontrolcode//ncontrolcode:inputData.editSourceMethodId\n}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function addREInstrument(inputData){return function(dispatch){var urlArray=[];var resultusedinstrument=rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\",{userinfo:inputData.userInfo});var timeZoneService=rsapi.post(\"timezone/getTimeZone\");var UTCtimeZoneService=rsapi.post(\"timezone/getLocalTimeByZone\",{userinfo:inputData.userInfo});urlArray=[resultusedinstrument,timeZoneService,UTCtimeZoneService];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var TagInstrument=constructOptionList(response[0].data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,undefined);var TagListInstrument=TagInstrument.get(\"OptionList\");var TagInsturmentcategory=constructOptionList(response[0].data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,undefined);var TagListInstrumentCategory=TagInsturmentcategory.get(\"OptionList\");var TagTimeZone=constructOptionList(response[1].data||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,undefined);var TagListTimeZone=TagTimeZone.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{Instrument:TagListInstrument,InstrumentCategory:TagListInstrumentCategory}),selectedId:null,selectedRecord:{stestsynonym:inputData.test.stestsynonym,transactiontestcode:inputData.RESelectedTest?inputData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\").toString():\"\",ntransactiontestcode:inputData.test.ntransactiontestcode,ninstrumentcatcode:TagInsturmentcategory.get(\"DefaultValue\")?TagInsturmentcategory.get(\"DefaultValue\"):[],ninstrumentcode:TagInstrument.get(\"DefaultValue\")?TagInstrument.get(\"DefaultValue\"):[],npreregno:inputData.test.npreregno,//dtodate: new Date(response[2].data),//new Date(),\ndtodate:rearrangeDateFormat(inputData.userInfo,response[2].data),//new Date(),\n//dfromdate: new Date(response[2].data),//new Date(),\ndfromdate:rearrangeDateFormat(inputData.userInfo,response[2].data),//new Date(),\nntzfromdate:{\"value\":inputData.userInfo.ntimezonecode,\"label\":inputData.userInfo.stimezoneid},ntztodate:{\"value\":inputData.userInfo.ntimezonecode,\"label\":inputData.userInfo.stimezoneid}},timeZoneList:TagListTimeZone||[],loading:false,screenName:\"IDS_INSTRUMENT\",openModal:true,operation:\"create\",//activeTestKey: \"IDS_INSTRUMENT\",\nncontrolcode:inputData.addResultUsedInstrumentId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function deleteInstrumentRecord(inputData){return function(dispatch){var inputParamData={nresultusedinstrumentcode:inputData.selectedRecord.nresultusedinstrumentcode,userinfo:inputData.userInfo,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\").toString():\"\",nregtypecode:inputData.masterData.defaultRegistrationType.nregtypecode,nregsubtypecode:inputData.masterData.defaultRegistrationSubType.nregsubtypecode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),loading:false,operation:\"delete\",openModal:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function fetchInstrumentRecord(inputData){return function(dispatch){var urlArray=[];//const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\nvar timeZoneService=rsapi.post(\"resultentrybysample/getResultUsedInstrument\",{nresultusedinstrumentcode:inputData.editRow.nresultusedinstrumentcode,userinfo:inputData.userInfo});var getResultUsedInstrument=rsapi.post(\"timezone/getTimeZone\");urlArray=[timeZoneService,getResultUsedInstrument];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var TagInstrument=constructOptionList(response[0].data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,undefined);var TagListInstrument=TagInstrument.get(\"OptionList\");var TagInsturmentcategory=constructOptionList(response[0].data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,undefined);var TagListInstrumentCategory=TagInsturmentcategory.get(\"OptionList\");var TagTimeZone=constructOptionList(response[1].data||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,undefined);var TagListTimeZone=TagTimeZone.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{Instrument:TagListInstrument,InstrumentCategory:TagListInstrumentCategory},response[1].data),selectedId:inputData.editRow.nresultusedinstrumentcode,selectedRecord:{stestsynonym:inputData.editRow.stestsynonym,npreregno:response[0].data.EditResultUsedInstrument[0].npreregno,ntransactiontestcode:inputData.editRow.ntransactiontestcode,nresultusedinstrumentcode:inputData.editRow.nresultusedinstrumentcode,ninstrumentcatcode:{\"value\":response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\"label\":response[0].data.EditResultUsedInstrument[0].sinstrumentcatname},ninstrumentcode:{\"value\":response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\"label\":response[0].data.EditResultUsedInstrument[0].sinstrumentid},ntzfromdate:{\"value\":response[0].data.EditResultUsedInstrument[0].ntzfromdate,\"label\":response[0].data.EditResultUsedInstrument[0].stzfromdate},ntztodate:{\"value\":response[0].data.EditResultUsedInstrument[0].ntztodate,\"label\":response[0].data.EditResultUsedInstrument[0].stztodate},//dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\n//dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\ndfromdate:rearrangeDateFormat(inputData.userInfo,response[0].data.EditResultUsedInstrument[0].sfromdate),dtodate:rearrangeDateFormat(inputData.userInfo,response[0].data.EditResultUsedInstrument[0].stodate)},timeZoneList:TagListTimeZone||[],ncontrolcode:inputData.ncontrolCode,loading:false,screenName:\"IDS_INSTRUMENT\",openModal:true,operation:\"update\"}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function deleteTaskRecord(inputData,userInfo){return function(dispatch){var inputParamData={nresultusedtaskcode:inputData.selectedRecord.nresultusedtaskcode,userinfo:inputData.userInfo,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\").toString():\"\",nregtypecode:inputData.masterData.defaultRegistrationType.nregtypecode,nregsubtypecode:inputData.masterData.defaultRegistrationSubType.nregsubtypecode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/deleteResultUsedTasks\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),loading:false,operation:\"delete\",openModal:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function fetchTaskRecord(inputData){return function(dispatch){var inputParamData={nresultusedtaskcode:inputData.editRow.nresultusedtaskcode,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultUsedTask\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),selectedId:response.data.EditResultUsedTasks[0].nresultusedtaskcode,selectedRecord:{npreregno:response.data.EditResultUsedTasks[0].npreregno,stestsynonym:inputData.editRow.stestsynonym,sanalysistime:response.data.EditResultUsedTasks[0].sanalysistime,smisctime:response.data.EditResultUsedTasks[0].smisctime,spreanalysistime:response.data.EditResultUsedTasks[0].spreanalysistime,spreparationtime:response.data.EditResultUsedTasks[0].spreparationtime,scomments:response.data.EditResultUsedTasks[0].scomments,nresultusedtaskcode:response.data.EditResultUsedTasks[0].nresultusedtaskcode},loading:false,screenName:\"IDS_TASK\",openModal:true,operation:\"update\",ncontrolcode:inputData.ncontrolcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function parameterRecord(inputData){return function(dispatch){var inputParamData={ntransactionresultcode:inputData.selectedRecord.ntransactionresultcode,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ncontrolcode:inputData.controlcode,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getParameterComments\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread({},inputData.masterData),selectedId:response.data.ParameterComments.ntransactionresultcode,selectedRecord:{sresultcomment:response.data.ParameterComments.sresultcomment,stestsynonym:inputData.selectedRecord.stestsynonym,sparametersynonym:inputData.selectedRecord.sparametersynonym,transactiontestcode:response.data.ParameterComments.ntransactiontestcode,ntransactionresultcode:response.data.ParameterComments.ntransactionresultcode,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ncontrolcode:inputData.controlcode},loading:false,screenName:\"IDS_PARAMETERCOMMENTS\",openModal:true,operation:\"updateParameterComments\",ncontrolcode:inputData.controlcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function checkListRecord(inputData){return function(dispatch){var inputParamData={ntransactionresultcode:inputData.selectedRecord.ntransactionresultcode,napprovalparametercode:inputData.selectedRecord.napprovalparametercode,nchecklistversioncode:inputData.selectedRecord.nchecklistversioncode,ntransactiontestcode:inputData.selectedRecord.ntransactiontestcode.toString(),ncontrolcode:inputData.ncontrolcode,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getChecklistdesign\",inputParamData).then(function(response){var selectedRecord={};var lsteditedQB=[];selectedRecord={npreregno:inputData.selectedRecord.npreregno,stestsynonym:inputData.selectedRecord.stestsynonym,sparametersynonym:inputData.selectedRecord.sparametersynonym,ntransactiontestcode:inputData.selectedRecord.ntransactiontestcode,ntransactionresultcode:inputData.selectedRecord.ntransactionresultcode,transactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\"};response.data.ChecklistData.map(function(checklist){selectedRecord[checklist.nchecklistversionqbcode]={nchecklistqbcode:checklist.nchecklistqbcode,nchecklistversioncode:checklist.nchecklistversioncode,nchecklistversionqbcode:checklist.nchecklistversionqbcode,sdefaultvalue:checklist.sdefaultvalue};lsteditedQB.push(checklist.nchecklistversionqbcode);return null;});selectedRecord[\"editedQB\"]=lsteditedQB;dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),selectedId:response.data.selectedId,selectedRecord:selectedRecord,loading:false,screenName:\"IDS_CHECKLISTRESULT\",openTemplateModal:true,needSaveButton:inputData.needSaveButton,operation:\"create\",ncontrolCode:inputData.ncontrolcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function onSaveCheckList(selectedRecord,userInfo,nregtypecode,nregsubtypecode){return function(dispatch){var listResultCheckList=[];if(selectedRecord&&selectedRecord.editedQB){selectedRecord.editedQB.map(function(qbcode){return listResultCheckList.push(selectedRecord[qbcode]);});var inputParamData={ntransactionresultcode:selectedRecord.ntransactionresultcode,ntransactiontestcode:selectedRecord.ntransactiontestcode.toString(),transactiontestcode:selectedRecord.transactiontestcode,npreregno:selectedRecord.npreregno,ResultCheckList:listResultCheckList,userinfo:userInfo,nregtypecode:nregtypecode,nregsubtypecode:nregsubtypecode,ncontrolcode:-1};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/createResultEntryChecklist\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:{},templateData:undefined,openTemplateModal:false,openModal:false,loading:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{dispatch({type:DEFAULT_RETURN,payload:{openTemplateModal:false,selectedRecord:{},loading:false,loadEsign:false}});}};}export function defaultTest(inputData,RESelectedTest,RESelectedSample,nregtypecode,nregsubtypecode){if(RESelectedTest!==undefined&&RESelectedTest.length>0){return function(dispatch){var inputParamData={userinfo:inputData.userinfo,ntransactiontestcode:RESelectedTest?RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ntestgrouptestcode:RESelectedTest?RESelectedTest.map(function(test){return test.ntestgrouptestcode;}).join(\",\"):\"\",npreregno:RESelectedTest?RESelectedTest.map(function(preregno){return preregno.npreregno;}).join(\",\"):\"\",//RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\nnregtypecode:nregtypecode,nregsubtypecode:nregsubtypecode,ncontrolcode:inputData.ncontrolcode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/updateDefaultValue\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{TestParameters:replaceUpdatedObject(response.data.TestParameters,inputData.masterData.TestParameters,'ntransactionresultcode'),RESelectedSubSample:inputData.masterData.RESelectedSubSample}),loading:false,activeTestKey:\"IDS_RESULTS\",openModal:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false,openModal:false,loadEsign:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}else{toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOCOMPLETE\"}));}}export function getFormula(parameterData,userInfo,masterData,index,selectedRecord){return function(dispatch){var inputParamData={ntransactiontestcode:parameterData.ntransactiontestcode,nformulacode:parameterData.ntestgrouptestformulacode,userinfo:userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getFormulaInputs\",inputParamData).then(function(response){var validateFormulaMandyFields=response.data.DynamicFormulaFields.map(function(item,index){return{\"idsName\":\"IDS_FILLALLFIELDS\",\"dataField\":index,\"mandatory\":true};});dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),response.data),selectedRecord:_objectSpread(_objectSpread({},selectedRecord),{},{parameterData:parameterData,sformulacalculationdetail:response.data.query,formulainput:response.data.Formula,resultindex:index,selectedForumulaInput:[]}),validateFormulaMandyFields:validateFormulaMandyFields,loading:false,screenName:\"IDS_RESULTFORMULA\",showFormula:true,operation:\"validate\",showValidate:true}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function calculateFormula(inputDataValue){return function(dispatch){var inputData={ntransactiontestcode:inputDataValue.selectedRecord.parameterData.ntransactiontestcode,ntransactionresultcode:inputDataValue.selectedRecord.parameterData.ntransactionresultcode,npreregno:inputDataValue.selectedRecord.parameterData.npreregno,sformulacalculationcode:inputDataValue.selectedRecord.sformulacalculationdetail,nformulacode:inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,userinfo:inputDataValue.userInfo,dynamicformulafields:inputDataValue.lstDynamicFields};dispatch(initRequest(true));rsapi.post(\"testmaster/calculateFormula\",inputData).then(function(response){// inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\n// {\n//     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\n//     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\n//     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\n//     sresult: response.data.Result,\n//     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\n//     value: inputDataValue.selectedRecord.parameterData.ngradecode,\n//     parameter: inputDataValue.selectedRecord.parameterData\n// }\ninputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"]=response.data.Result;inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"]=response.data.Result;inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable']=true;inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"]=3;inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex]={ngradecode:numericGrade(inputDataValue.selectedRecord.parameterData,parseInt(response.data.Result))};dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread({},inputDataValue.masterData),selectedRecord:{selectedResultGrade:inputDataValue.selectedResultGrade,ResultParameter:inputDataValue.ResultParameter},loading:false,screenName:\"IDS_RESULTENTRY\",showFormula:false,operation:\"update\",showValidate:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{//toast.warn(error.response.data);\ntoast.warn(error.response.data[\"Result\"]);}});};}export function getREFilterTestData(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getTestBasedOnCombo\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultFilterStatus:inputData.defaultFilterStatus}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function updateTestMethodSource(inputData,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/updateTestMethodSource\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),{},{RE_TEST:replaceUpdatedObject(response.data.RE_TEST,masterData.RE_TEST,'ntransactiontestcode')}),loading:false,openModal:false,loadEsign:false// activeTestKey: \"IDS_RESULTS\"\n}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function resultImportFile(inputData,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getImportResultEntry\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread({},masterData),loading:false,openModal:false// activeTestKey: \"IDS_RESULTS\"\n}});if(response.data.returnStatus&&response.data.returnStatus!==\"\"){toast.info(response.data.returnStatus);}else{toast.warn(response.data.returnStatus);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function validateEsignCredentialComplete(inputParam){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"login/validateEsignCredential\",inputParam.inputData).then(function(response){if(response.data===\"Success\"){var methodUrl=\"performaction\";inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"]=inputParam.inputData.userinfo;if(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]&&inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]){delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];}if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"complete\"){dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"],inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"],inputParam.inputData.userinfo));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"default\"){dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"],inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"],inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"],inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"],inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"deleteInstrument\"){dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"createMethod\"){dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"],inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"deleteTask\"){dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"updateParameterComments\"){dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"],inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));}else if(inputParam[\"screenData\"][\"operation\"]===\"updatechecklist\"){var _inputParam$screenDat=inputParam[\"screenData\"],selectedRecord=_inputParam$screenDat.selectedRecord,userInfo=_inputParam$screenDat.userInfo,nregtypecode=_inputParam$screenDat.nregtypecode,nregsubtypecode=_inputParam$screenDat.nregsubtypecode;delete selectedRecord.esignpassword;delete selectedRecord.esigncomments;delete selectedRecord.agree;delete inputParam.inputData.password;userInfo=inputParam.inputData.userinfo;dispatch(onSaveCheckList(selectedRecord,userInfo,nregtypecode,nregsubtypecode));}}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getMeanCalculationTestParameter(meanParam){return function(dispatch){dispatch(initRequest(true));var inputData={npreregno:meanParam.selectedRecord.npreregno,ntransactionresultcode:meanParam.selectedRecord.ntransactionresultcode,userinfo:meanParam.userInfo};return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\",inputData).then(function(response){var list=response.data||[];// const optionList = [];\n// list.map(item=>{\n//     console.log(\"item:\", item);\n//         optionList.push({item:item, \n//                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \n//                         value:item.ntransactionresultcode})\n//     })\n// const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\ndispatch({type:DEFAULT_RETURN,payload:{loading:false,openModal:true,meanTestParameterList:list,screenName:\"IDS_MEANPARAMETER\",ncontrolcode:meanParam.ncontrolCode,selectedTestParameterMean:meanParam.selectedRecord}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/ResultEntryAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","intl","Axios","numericGrade","constructOptionList","fillRecordBasedOnCheckBoxSelection","filterRecordBasedOnTwoArrays","getRecordBasedOnPrimaryKeyName","getSameRecordFromTwoArrays","replaceUpdatedObject","sortData","updatedObjectWithNewElement","rearrangeDateFormat","transactionStatus","getsubSampleREDetail","inputData","isServiceRequired","dispatch","inputParamData","ntype","nflag","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntranscode","String","ntransactionstatus","ntransactiontestcode","userinfo","ntestcode","napprovalversioncode","fromdate","todate","activeTestKey","activeSampleKey","nneedsubsample","masterData","activeName","dataStateName","post","checkBoxOperation","then","response","oldSelectedTest","RESelectedTest","data","childTabsKey","removeElementFromArray","RESelectedSubSample","RE_SUBSAMPLE","RE_TEST","length","RESelectedSample","searchSubSampleRef","undefined","current","value","searchTestRef","testskip","testtake","bool","skipInfo","TestParameters","ResultUsedInstrument","ResultUsedTasks","RegistrationTestAttachment","ResultChangeHistory","RegistrationTestComment","wholeTestList","map","b","test","index","includes","splice","keepOld","list","dbData","reduce","unique","item","skip","sort","filter","type","payload","loading","take","catch","error","status","message","warn","TestSelected","isGrandChildGetRequired","toString","getTestChildTabREDetail","showFilter","activeSampleTab","getTestREDetail","ntransactionsamplecode","screenName","getSampleChildTabREDetail","url","responseData","join","getRERegistrationType","getRERegistrationSubType","defaultRegistrationType","getREApprovalConfigVersion","defaultRegistrationSubType","getREFilterStatus","defaultjobstatus","getREJobStatus","defaultApprovalConfigVersion","getResultEntryDetails","refs","searchSampleRef","realFromDate","realToDate","showTest","showSample","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","samplePrintHistoryDataState","sampleHistoryDataState","resultGetModule","userInfo","ncontrolcode","TestList","acceptTestList","Object","values","selectedResultGrade","paremterResultcode","parameterResults","ResultParameter","param","ngradecode","ntransactionresultcode","PredefinedValues","predefinedvalue","ndefaultstatus","YES","get","sresult","spredefinedname","sfinal","editable","selectedRecord","openModal","operation","formatMessage","id","completeTest","inputParam","acceptList","completeResultId","testChildGetREParam","napprovalconfigcode","transactiontestcode","RE_SAMPLE","RESelectedTest1","RESelectedTest2","searchedSample","respObject","loadEsign","showConfirmAlert","paramList","postParamList","inputParameter","fecthInputObject","fetchUrl","primaryKeyField","fetchSelectedData","compareTwoArray","firstArray","secondArray","PrimaryKey","filterArray","x","some","y","testMethodSourceEdit","ntestgrouptestcode","editSourceMethodId","TagSource","SourceData","TagListSource","TagMethod","MethodData","TagListMethod","stestsynonym","nsourcecode","SourceDataValue","nmethodcode","MethodDataValue","updateParameterComments","sresultcomment","addREInstrument","urlArray","resultusedinstrument","timeZoneService","UTCtimeZoneService","all","TagInstrument","Instrument","TagListInstrument","TagInsturmentcategory","InstrumentCategory","TagListInstrumentCategory","TagTimeZone","TagListTimeZone","selectedId","ninstrumentcatcode","ninstrumentcode","dtodate","dfromdate","ntzfromdate","ntimezonecode","stimezoneid","ntztodate","timeZoneList","addResultUsedInstrumentId","deleteInstrumentRecord","nresultusedinstrumentcode","fetchInstrumentRecord","editRow","getResultUsedInstrument","EditResultUsedInstrument","sinstrumentcatname","sinstrumentid","stzfromdate","stztodate","sfromdate","stodate","ncontrolCode","deleteTaskRecord","nresultusedtaskcode","fetchTaskRecord","EditResultUsedTasks","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","parameterRecord","controlcode","ParameterComments","sparametersynonym","checkListRecord","napprovalparametercode","nchecklistversioncode","lsteditedQB","ChecklistData","checklist","nchecklistversionqbcode","nchecklistqbcode","sdefaultvalue","push","openTemplateModal","needSaveButton","onSaveCheckList","listResultCheckList","editedQB","qbcode","ResultCheckList","templateData","defaultTest","preregno","getFormula","parameterData","nformulacode","ntestgrouptestformulacode","validateFormulaMandyFields","DynamicFormulaFields","sformulacalculationdetail","query","formulainput","Formula","resultindex","selectedForumulaInput","showFormula","showValidate","calculateFormula","inputDataValue","sformulacalculationcode","dynamicformulafields","lstDynamicFields","Result","parseInt","getREFilterTestData","defaultFilterStatus","updateTestMethodSource","resultImportFile","returnStatus","info","validateEsignCredentialComplete","methodUrl","toLowerCase","esignpassword","esigncomments","agree","password","getMeanCalculationTestParameter","meanParam","meanTestParameterList","selectedTestParameterMean"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport Axios from 'axios';\r\nimport {\r\n    numericGrade\r\n} from '../pages/ResultEntryBySample/ResultEntryValidation';\r\nimport {\r\n    constructOptionList,\r\n    fillRecordBasedOnCheckBoxSelection,\r\n    filterRecordBasedOnTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,\r\n    getSameRecordFromTwoArrays,\r\n    replaceUpdatedObject,\r\n    sortData,\r\n    updatedObjectWithNewElement, rearrangeDateFormat\r\n} from '../components/CommonScript';\r\nimport {\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\n\r\nexport function getsubSampleREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: inputData.nflag || 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntranscode: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: 0,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestKey: inputData.activeTestKey,\r\n            activeSampleKey: inputData.activeSampleKey,\r\n            nneedsubsample: inputData.masterData.nneedsubsample\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation})\r\n                .then(response => {\r\n                    // if (response.data.DynamicGetSamples) {\r\n                    //     sortData(response.data.DynamicGetSamples, \"\", \"\");\r\n                    // }\r\n                    // if (response.data.DynamicGetTests) {\r\n                    //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\r\n                    // }\r\n                    //sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let RESelectedSubSample = inputData.checkBoxOperation == 3 ? response.data.RESelectedSubSample : inputData.masterData.RESelectedSubSample\r\n                    RESelectedSubSample = inputData.masterData.nneedsubsample ? RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE;\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.RESelectedSample,\r\n                        RESelectedSubSample\r\n                    }\r\n                    // if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    //     inputData.searchSampleRef.current.value = \"\";\r\n                    //     masterData['searchedSample'] = undefined\r\n                    // }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSample = inputData.RESelectedSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                        \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                    ],\r\n                    ntransactiontestcode,\r\n                    RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey\r\n                }\r\n                dispatch(getTestChildTabREDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSample: inputData.RESelectedSample,\r\n                    RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSample: inputData.RESelectedSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                            RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: 0,\r\n            ntranscode: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestKey: inputData.activeTestKey\r\n        }\r\n        // dispatch(initRequest(true));\r\n        // rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n                .then(response => {\r\n                    // let responseData = {\r\n                    //     ...response.data,\r\n                    //     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                    //     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    //     // RESelectedTest: inputData.masterData.RESelectedTest\r\n                    // }\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.masterData.RESelectedSample,\r\n                        RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.screenName,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSubSample = inputData.RESelectedSubSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                // let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                        \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                    ],\r\n                    ntransactiontestcode,\r\n                    RESelectedSample: inputData.masterData.RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey\r\n                }\r\n                dispatch(getTestChildTabREDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSubSample: inputData.RESelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSubSample: inputData.RESelectedSubSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getSampleChildTabREDetail(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let url = \"\"\r\n        switch (inputData.activeSampleKey) {\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n            default:\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(url, inputParamData)\r\n            .then(response => {\r\n                let responseData = {\r\n                    ...response.data\r\n                }\r\n                //responseData = sortData(responseData)\r\n                fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            RESelectedSample: inputData.RESelectedSample\r\n                        },\r\n                        loading: false,\r\n                        activeSampleKey: inputData.activeSampleKey,\r\n                        screenName: inputData.screenName\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getTestChildTabREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (inputData.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                activeName = \"ResultUsedInstrument\"\r\n                dataStateName = \"instrumentDataState\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\";\r\n                activeName = \"\"\r\n                dataStateName = \"materialDataState\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                activeName = \"ResultUsedTasks\"\r\n                dataStateName = \"taskDataState\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"documentDataState\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                activeName = \"ResultChangeHistory\"\r\n                dataStateName = \"resultChangeDataState\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    let skipInfo = {};\r\n                    //responseData = sortData(responseData)\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...sortData(responseData),\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                RESelectedTest: inputData.RESelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestKey: inputData.activeTestKey,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function getRERegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRERegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationsubType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationType: inputData.defaultRegistrationType\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREApprovalConfigVersion(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getApprovalConfigVersion\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationSubType: inputData.defaultRegistrationSubType,\r\n                            // fromDate: inputData.fromdate,\r\n                            //  toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultjobstatus: inputData.defaultjobstatus,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getREJobStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getJobStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultApprovalConfigVersion: inputData.defaultApprovalConfigVersion,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getResultEntryDetails(inputParamData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData.inputData, nneedsubsample: inputParamData.masterData.nneedsubsample })\r\n            .then(response => {\r\n                let masterData = { ...inputParamData.masterData }\r\n                if (inputParamData.refs.searchSampleRef !== undefined && inputParamData.refs.searchSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchSubSampleRef !== undefined && inputParamData.refs.searchSubSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchTestRef !== undefined && inputParamData.refs.searchTestRef.current !== null) {\r\n                    inputParamData.refs.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            realFromDate: response.data[\"fromDate\"],\r\n                            realToDate: response.data[\"toDate\"]\r\n                        },\r\n                        loading: false,\r\n                        showTest: inputParamData.inputData.showTest,\r\n                        showSample: inputParamData.inputData.showSample,\r\n                        activeTestKey: inputParamData.inputData.activeTestKey,\r\n                        skip: 0,\r\n                        take: inputParamData.inputData.take,\r\n                        testskip: 0,\r\n                        testtake: inputParamData.inputData.testtake,\r\n                        resultDataState: { ...inputParamData.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParamData.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParamData.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParamData.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParamData.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParamData.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParamData.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParamData.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParamData.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParamData.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultGetModule(inputData, userInfo, ncontrolcode, testskip, testtake) {\r\n    return function (dispatch) {\r\n        let TestList = [...inputData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, inputData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            if (Object.values(inputData).length > 0 && inputData.RESelectedTest.length > 0) {\r\n                let inputParamData = {\r\n                    ntransactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                    userinfo: userInfo\r\n                }\r\n                dispatch(initRequest(true));\r\n                rsapi.post(\"resultentrybysample/getResultEntryResults\", inputParamData)\r\n                    .then(response => {\r\n                        let selectedResultGrade = [];\r\n                        let paremterResultcode = [];\r\n                        const parameterResults = response.data.ResultParameter\r\n                        parameterResults.map((param, index) => {\r\n                            selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                            paremterResultcode[index] = param.ntransactionresultcode;\r\n\r\n                            (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                                    if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\r\n                                        response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\r\n                                            constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                                undefined, undefined).get(\"OptionList\");\r\n                                        if (response.data.ResultParameter[index].sresult === null) {\r\n                                            response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].editable = true;\r\n                                            response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                });\r\n                            return null;\r\n                        });\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                masterData: {\r\n                                    ...inputData,\r\n                                    ...response.data,\r\n                                    paremterResultcode//,\r\n                                    //selectedResultGrade ,\r\n\r\n                                },\r\n                                selectedRecord: {\r\n                                    selectedResultGrade: selectedResultGrade,\r\n                                    ResultParameter: response.data.ResultParameter\r\n                                },\r\n                                loading: false,\r\n                                screenName: \"IDS_RESULTENTRY\",\r\n                                openModal: true,\r\n                                operation: \"update\",\r\n                                activeTestKey: \"IDS_RESULTS\",\r\n                                ncontrolcode: ncontrolcode\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n                //}\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n                }));\r\n            }\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    loading: false\r\n                }\r\n            })\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function completeTest(inputParam, acceptList, userInfo, completeResultId) {\r\n    if (acceptList !== undefined && acceptList.length > 0) {\r\n        return function (dispatch) {\r\n            let inputData = inputParam.testChildGetREParam\r\n            let inputParamData = {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode,\r\n                nregsubtypecode: inputData.nregsubtypecode,\r\n                npreregno: inputData.npreregno,\r\n                ntranscode: String(inputData.ntransactionstatus),\r\n                napprovalversioncode: inputData.napprovalversioncode,\r\n                napprovalconfigcode: inputData.napprovalconfigcode,\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: userInfo,\r\n                fromdate: inputData.fromdate,\r\n                todate: inputData.todate,\r\n                ntestcode: inputData.ntestcode,\r\n                transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntransactiontestcode: 0,\r\n                activeTestKey: inputData.activeTestKey,\r\n                ncontrolcode: inputParam.inputData.ncontrolcode,\r\n                nneedsubsample: inputData.masterData.nneedsubsample\r\n            }\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n            //     documentDataState, testCommentDataState } = inputData\r\n            // let url = \"resultentrybysample/getTestbasedParameter\"\r\n            switch (inputData.activeTestKey) {\r\n                case \"IDS_RESULTS\":\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"materialDataState\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"documentDataState\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    activeName = \"ResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/completeTest\", inputParamData)\r\n                .then(response => {\r\n                    let RE_SAMPLE = [];\r\n                    let RE_SUBSAMPLE = [];\r\n                    let RE_TEST = [];\r\n                    let responseData = response.data\r\n                    if (responseData[\"RE_TEST\"].length > 0) {\r\n                        RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\r\n                    } else {\r\n                        RE_TEST = inputData.masterData[\"RE_TEST\"];\r\n                    }\r\n\r\n                    RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    if (RE_SUBSAMPLE.length > 0) {\r\n                        RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\r\n                    } else {\r\n                        RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\r\n                    }\r\n                    const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\r\n                    const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\r\n                    let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\r\n\r\n                    let searchedSample = undefined;\r\n                    if (inputData.masterData[\"searchedSample\"]) {\r\n                        searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RE_SAMPLE,\r\n                        RE_SUBSAMPLE,\r\n                        RESelectedSubSample,\r\n                        searchedSample,\r\n                        RESelectedSample,\r\n                        RESelectedTest: RESelectedTest2,\r\n                        RE_TEST: responseData[\"RE_TEST\"]\r\n                    }\r\n                    let skipInfo = {};\r\n                    if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            skip: 0,\r\n                            take: inputParam.take\r\n                        }\r\n                    }\r\n                    if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            testskip: 0,\r\n                            testtake: inputParam.testtake\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParamData.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        selectedRecord: undefined,\r\n                        loading: false,\r\n                        screenName: inputData.activeTestKey,\r\n                        ...skipInfo\r\n                    }\r\n                    if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [searchedSample[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData(inputParameter, respObject));\r\n                    } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [RE_SAMPLE[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData(inputParameter, respObject));\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ...respObject,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\n//Compare two array and return the first array which is available in second array\r\nexport function compareTwoArray(firstArray, secondArray, PrimaryKey) {\r\n    const filterArray = firstArray.filter(function (x) {\r\n        return secondArray.some(function (y) {\r\n            return x[PrimaryKey] === y[PrimaryKey]\r\n        })\r\n    });\r\n    return filterArray;\r\n}\r\n\r\nfunction fetchSelectedData(inputParam, respObject) {\r\n    return (dispatch) => {\r\n        rsapi.post(inputParam.fetchUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                const masterData = {\r\n                    ...respObject.masterData,\r\n                    ...response.data,\r\n                    RESelectedSample: response.data.RESelectedSample || respObject.masterData.RESelectedSample || []\r\n                };\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...respObject,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function testMethodSourceEdit(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n            ntestgrouptestcode: inputData.test.ntestgrouptestcode,\r\n            ntestcode: inputData.test.ntestcode,\r\n            ncontrolcode: inputData.editSourceMethodId,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestMethodSource\", inputParamData)\r\n            .then(response => {\r\n\r\n                const TagSource = constructOptionList(response.data.SourceData || [], \"nsourcecode\",\r\n                    \"ssourcename\", undefined, undefined, undefined);\r\n                const TagListSource = TagSource.get(\"OptionList\");\r\n\r\n                const TagMethod = constructOptionList(response.data.MethodData || [], \"nmethodcode\",\r\n                    \"smethodname\", undefined, undefined, undefined);\r\n                const TagListMethod = TagMethod.get(\"OptionList\");\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            SourceData: TagListSource,\r\n                            MethodData: TagListMethod,\r\n                            RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                        },\r\n                        selectedRecord: {\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            nsourcecode: response.data.SourceDataValue,\r\n                            nmethodcode: response.data.MethodDataValue\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TESTMETHODSOURCE\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateParameterComments(inputData, masterData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            ntransactionresultcode: inputData.ntransactionresultcode,\r\n            sresultcomment: inputData.sresultcomment,\r\n            transactiontestcode: inputData.transactiontestcode,\r\n            userinfo: inputData.userinfo,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            ncontrolcode: inputData.ncontrolcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        screenName: \"IDS_RESULT\",\r\n                        openModal: false,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode\r\n                        //ncontrolcode:inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function addREInstrument(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const resultusedinstrument = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", {\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputData.userInfo });\r\n        urlArray = [resultusedinstrument, timeZoneService, UTCtimeZoneService];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n\r\n\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory\r\n\r\n                        },\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            ninstrumentcatcode: TagInsturmentcategory.get(\"DefaultValue\") ? TagInsturmentcategory.get(\"DefaultValue\") : [],\r\n                            ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n                            npreregno: inputData.test.npreregno,\r\n                            //dtodate: new Date(response[2].data),//new Date(),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            //dfromdate: new Date(response[2].data),//new Date(),\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            ntzfromdate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            }\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function fetchInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        //const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\r\n        const timeZoneService = rsapi.post(\"resultentrybysample/getResultUsedInstrument\", {\r\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const getResultUsedInstrument = rsapi.post(\"timezone/getTimeZone\");\r\n        urlArray = [timeZoneService, getResultUsedInstrument];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory,\r\n                            // ...response[0].data,\r\n                            ...response[1].data,\r\n                            //...response[2].data\r\n                        },\r\n                        selectedId: inputData.editRow.nresultusedinstrumentcode,\r\n                        selectedRecord: {\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            npreregno: response[0].data.EditResultUsedInstrument[0].npreregno,\r\n                            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\r\n                            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n                            ninstrumentcatcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentcatname\r\n                            },\r\n                            ninstrumentcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentid\r\n                            },\r\n                            ntzfromdate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntzfromdate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stzfromdate\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntztodate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stztodate\r\n                            },\r\n                            //dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            //dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].stodate)\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        ncontrolcode: inputData.ncontrolCode,\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteTaskRecord(inputData, userInfo) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.selectedRecord.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedTasks\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function fetchTaskRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.editRow.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedTask\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.EditResultUsedTasks[0].nresultusedtaskcode,\r\n                        selectedRecord: {\r\n                            npreregno: response.data.EditResultUsedTasks[0].npreregno,\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            sanalysistime: response.data.EditResultUsedTasks[0].sanalysistime,\r\n                            smisctime: response.data.EditResultUsedTasks[0].smisctime,\r\n                            spreanalysistime: response.data.EditResultUsedTasks[0].spreanalysistime,\r\n                            spreparationtime: response.data.EditResultUsedTasks[0].spreparationtime,\r\n                            scomments: response.data.EditResultUsedTasks[0].scomments,\r\n                            nresultusedtaskcode: response.data.EditResultUsedTasks[0].nresultusedtaskcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TASK\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function parameterRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n            ncontrolcode: inputData.controlcode,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                        },\r\n                        selectedId: response.data.ParameterComments.ntransactionresultcode,\r\n                        selectedRecord: {\r\n                            sresultcomment: response.data.ParameterComments.sresultcomment,\r\n                            stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                            sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                            transactiontestcode: response.data.ParameterComments.ntransactiontestcode,\r\n                            ntransactionresultcode: response.data.ParameterComments.ntransactionresultcode,\r\n                            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                            ncontrolcode: inputData.controlcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_PARAMETERCOMMENTS\",\r\n                        openModal: true,\r\n                        operation: \"updateParameterComments\",\r\n                        ncontrolcode: inputData.controlcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function checkListRecord(inputData) {\r\n\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            napprovalparametercode: inputData.selectedRecord.napprovalparametercode,\r\n            nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\r\n            ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode.toString(),\r\n            ncontrolcode: inputData.ncontrolcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getChecklistdesign\", inputParamData)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let lsteditedQB = [];\r\n                selectedRecord = {\r\n                    npreregno: inputData.selectedRecord.npreregno,\r\n                    stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                    sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                    ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n                    transactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                }\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord[checklist.nchecklistversionqbcode] = {\r\n                        nchecklistqbcode: checklist.nchecklistqbcode,\r\n                        nchecklistversioncode: checklist.nchecklistversioncode,\r\n                        nchecklistversionqbcode: checklist.nchecklistversionqbcode,\r\n                        sdefaultvalue: checklist.sdefaultvalue\r\n                    }\r\n                    lsteditedQB.push(checklist.nchecklistversionqbcode);\r\n                    return null;\r\n                });\r\n                selectedRecord[\"editedQB\"] = lsteditedQB;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.selectedId,\r\n                        selectedRecord: selectedRecord,\r\n                        loading: false,\r\n                        screenName: \"IDS_CHECKLISTRESULT\",\r\n                        openTemplateModal: true,\r\n                        needSaveButton: inputData.needSaveButton,\r\n                        operation: \"create\",\r\n                        ncontrolCode: inputData.ncontrolcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let listResultCheckList = [];\r\n        if (selectedRecord && selectedRecord.editedQB) {\r\n            selectedRecord.editedQB.map(qbcode =>\r\n                listResultCheckList.push(selectedRecord[qbcode]))\r\n\r\n            let inputParamData = {\r\n                ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                transactiontestcode: selectedRecord.transactiontestcode,\r\n                npreregno: selectedRecord.npreregno,\r\n                ResultCheckList: listResultCheckList,\r\n                userinfo: userInfo,\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ncontrolcode: -1\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/createResultEntryChecklist\", inputParamData)\r\n\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedRecord: {},\r\n                            templateData: undefined,\r\n                            openTemplateModal: false,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    openTemplateModal: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadEsign: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function defaultTest(inputData, RESelectedTest, RESelectedSample, nregtypecode, nregsubtypecode) {\r\n    if (RESelectedTest !== undefined && RESelectedTest.length > 0) {\r\n        return function (dispatch) {\r\n            let inputParamData = {\r\n                userinfo: inputData.userinfo,\r\n                ntransactiontestcode: RESelectedTest ? RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntestgrouptestcode: RESelectedTest ? RESelectedTest.map(test => test.ntestgrouptestcode).join(\",\") : \"\",\r\n                npreregno: RESelectedTest ? RESelectedTest.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                //RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ncontrolcode: inputData.ncontrolcode\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/updateDefaultValue\", inputParamData)\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...response.data,\r\n                                TestParameters: replaceUpdatedObject(response.data.TestParameters, inputData.masterData.TestParameters, 'ntransactionresultcode'),\r\n                                RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                            },\r\n                            loading: false,\r\n                            activeTestKey: \"IDS_RESULTS\",\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\nexport function getFormula(parameterData, userInfo, masterData, index, selectedRecord) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: parameterData.ntransactiontestcode,\r\n            nformulacode: parameterData.ntestgrouptestformulacode,\r\n            userinfo: userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFormulaInputs\", inputParamData)\r\n            .then(response => {\r\n\r\n                const validateFormulaMandyFields = response.data.DynamicFormulaFields.map((item, index) => {\r\n                    return {\r\n                        \"idsName\": \"IDS_FILLALLFIELDS\",\r\n                        \"dataField\": index,\r\n                        \"mandatory\": true\r\n                    }\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            parameterData: parameterData,\r\n                            sformulacalculationdetail: response.data.query,\r\n                            formulainput: response.data.Formula,\r\n                            resultindex: index,\r\n                            selectedForumulaInput: []\r\n                        },\r\n                        validateFormulaMandyFields,\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTFORMULA\",\r\n                        showFormula: true,\r\n                        operation: \"validate\",\r\n                        showValidate: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function calculateFormula(inputDataValue) {\r\n    return function (dispatch) {\r\n        const inputData = {\r\n            ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n            ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n            npreregno: inputDataValue.selectedRecord.parameterData.npreregno,\r\n            sformulacalculationcode: inputDataValue.selectedRecord.sformulacalculationdetail,\r\n            nformulacode: inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,\r\n            userinfo: inputDataValue.userInfo,\r\n            dynamicformulafields: inputDataValue.lstDynamicFields,\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/calculateFormula\", inputData)\r\n            .then(response => {\r\n\r\n                // inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\r\n                // {\r\n                //     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n                //     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n                //     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\r\n                //     sresult: response.data.Result,\r\n                //     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\r\n                //     value: inputDataValue.selectedRecord.parameterData.ngradecode,\r\n                //     parameter: inputDataValue.selectedRecord.parameterData\r\n                // }\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable'] = true;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"] = 3;\r\n                inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex] = {\r\n                    ngradecode: numericGrade(inputDataValue.selectedRecord.parameterData, parseInt(response.data.Result))\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputDataValue.masterData,\r\n                            //selectedResultData: inputDataValue.selectedResultData,\r\n                            //selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            //ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        selectedRecord: {\r\n                            selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTENTRY\",\r\n                        showFormula: false,\r\n                        operation: \"update\",\r\n                        showValidate: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    //toast.warn(error.response.data);\r\n                    toast.warn(error.response.data[\"Result\"]);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterTestData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultFilterStatus: inputData.defaultFilterStatus,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateTestMethodSource(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateTestMethodSource\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RE_TEST: replaceUpdatedObject(response.data.RE_TEST, masterData.RE_TEST, 'ntransactiontestcode')\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        loadEsign: false\r\n\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultImportFile(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getImportResultEntry\", inputData)\r\n            .then(response => {\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n\r\n                if (response.data.returnStatus && response.data.returnStatus !== \"\") {\r\n                    toast.info(response.data.returnStatus);\r\n                }\r\n                else {\r\n                    toast.warn(response.data.returnStatus);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function validateEsignCredentialComplete(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    const methodUrl = \"performaction\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"complete\") {\r\n                        dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"default\") {\r\n                        dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteInstrument\") {\r\n                        dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"createMethod\") {\r\n                        dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteTask\") {\r\n                        dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"updateParameterComments\") {\r\n                        dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"operation\"] === \"updatechecklist\") {\r\n                        let { selectedRecord, userInfo, nregtypecode, nregsubtypecode } = inputParam[\"screenData\"];\r\n                        delete selectedRecord.esignpassword;\r\n                        delete selectedRecord.esigncomments;\r\n                        delete selectedRecord.agree;\r\n                        delete inputParam.inputData.password;\r\n                        userInfo = inputParam.inputData.userinfo;\r\n                        dispatch(onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function getMeanCalculationTestParameter(meanParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: meanParam.selectedRecord.npreregno,\r\n            ntransactionresultcode: meanParam.selectedRecord.ntransactionresultcode,\r\n            userinfo: meanParam.userInfo\r\n        }\r\n        return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n            .then(response => {\r\n\r\n                const list = response.data || [];\r\n                // const optionList = [];\r\n                // list.map(item=>{\r\n                //     console.log(\"item:\", item);\r\n                //         optionList.push({item:item, \r\n                //                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \r\n                //                         value:item.ntransactionresultcode})\r\n                //     })\r\n                // const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal: true,\r\n                        meanTestParameterList: list,\r\n                        screenName: \"IDS_MEANPARAMETER\",\r\n                        ncontrolcode: meanParam.ncontrolCode,\r\n                        selectedTestParameterMean: meanParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}