{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { getComboLabelValue, constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nexport function getPackageService(packageParam) {\n  return function (dispatch) {\n    const packageService = rsapi.post(\"testpackage/getTestPackage\", {\n      userinfo: packageParam.userInfo\n    });\n    let urlArray = [];\n    let selectedId = null;\n\n    if (packageParam.operation === \"create\") {\n      urlArray = [packageService];\n    } else {\n      const url = packageParam.inputParam.classUrl + \"/getActive\" + packageParam.inputParam.methodUrl + \"ById\"; //\"method/getActiveMethodById\"      \n\n      const packageById = rsapi.post(url, {\n        [packageParam.primaryKeyField]: packageParam.primaryKeyValue,\n        \"userinfo\": packageParam.userInfo\n      });\n      urlArray = [packageService, packageById];\n      selectedId = packageParam.primaryKeyValue;\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      const packageMap = constructOptionList(response[0].data || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n      const packageList = packageMap.get(\"OptionList\");\n\n      if (packageParam.operation === \"update\") {\n        selectedRecord = response[1].data;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          packageList,\n          //:response[0].data || [],                               \n          operation: packageParam.operation,\n          screenName: packageParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: packageParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/actions/PackageAction.js"],"names":["rsapi","DEFAULT_RETURN","getComboLabelValue","constructOptionList","toast","Axios","initRequest","getPackageService","packageParam","dispatch","packageService","post","userinfo","userInfo","urlArray","selectedId","operation","url","inputParam","classUrl","methodUrl","packageById","primaryKeyField","primaryKeyValue","all","then","response","selectedRecord","packageMap","data","undefined","packageList","get","type","payload","screenName","openModal","ncontrolCode","loading","catch","error","status","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {getComboLabelValue, constructOptionList} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\n\r\n\r\nexport function getPackageService (packageParam) {            \r\n    return function (dispatch) {   \r\n     const packageService = rsapi.post(\"testpackage/getTestPackage\", \r\n                                     {userinfo:packageParam.userInfo});\r\n    let urlArray = [];\r\n    let selectedId = null;\r\n    if (packageParam.operation === \"create\"){\r\n        urlArray = [packageService];\r\n    }\r\n    else{           \r\n        const url = packageParam.inputParam.classUrl+ \"/getActive\" + packageParam.inputParam.methodUrl + \"ById\";   //\"method/getActiveMethodById\"      \r\n        const packageById =  rsapi.post(url, { [packageParam.primaryKeyField] :packageParam.primaryKeyValue, \"userinfo\": packageParam.userInfo} );\r\n        urlArray = [packageService, packageById];\r\n        selectedId = packageParam.primaryKeyValue;\r\n    }\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response=>{                  \r\n            \r\n            let selectedRecord =  {};\r\n\r\n            const packageMap = constructOptionList(response[0].data || [], \"ntestpackagecode\",\r\n                                \"stestpackagename\", undefined, undefined, true);\r\n            const packageList = packageMap.get(\"OptionList\");\r\n            \r\n            if (packageParam.operation === \"update\"){\r\n                selectedRecord = response[1].data;\r\n               \r\n            }\r\n           \r\n            dispatch({type: DEFAULT_RETURN, payload:{packageList,//:response[0].data || [],                               \r\n                        operation:packageParam.operation, screenName:packageParam.screenName, selectedRecord, \r\n                        openModal : true,\r\n                        ncontrolCode:packageParam.ncontrolCode,\r\n                        loading:false,selectedId\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}