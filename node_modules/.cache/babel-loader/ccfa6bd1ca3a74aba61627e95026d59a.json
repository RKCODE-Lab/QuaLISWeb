{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleStorageRetrieval.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col, InputGroup } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { constructOptionList, convertDateValuetoString, getControlMap, onSaveMandatoryValidation, rearrangeDateFormat, searchData, searchJsonData, showEsign, sortData, Lims_JSON_stringify } from '../../components/CommonScript'; //import SortableTree from 'react-sortable-tree'; \n\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService, crudMaster, validateEsignCredential, updateStore } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles'; // import ReactTooltip from 'react-tooltip';\n\nimport { uuid } from \"uuidv4\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { transactionStatus } from '../../components/Enumeration';\nimport Esign from '../audittrail/Esign';\nimport rsapi from '../../rsapi';\nimport AddSampleStorageMapping from './AddSampleStorageMapping';\nimport Axios from 'axios';\nimport Preloader from '../../components/preloader/preloader.component';\nimport { process } from '@progress/kendo-data-query'; //import Spreadsheet from '../../components/Spreadsheet/Spreadsheet';\n\nimport MatrixComponent from '../../components/MatrixComponent';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport AdvFilter from '../../components/AdvFilter';\nimport DateTimePicker from \"../../components/date-time-picker/date-time-picker.component\";\nimport RetrieveOrDiposeSample from '../storagemanagement/RetrieveOrDiposeSample';\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport BulkRetrieveOrDiposeSample from '../storagemanagement/BulkRetrieveOrDiposeSample'; // import * as XLSX from 'xlsx';\n// import { Upload } from '@progress/kendo-react-upload';\n\nclass SampleStorageRetrieval extends Component {\n  constructor(props) {\n    super(props);\n    this.dragOverCnt = 0;\n    this.isDragDrop = false;\n    this.SEPARATOR = '_';\n    this.uniqueIDArr = [];\n    this.countforTree = 0;\n    this.pointedItem = undefined;\n    this.getitemPath = {};\n\n    this.openModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          selectedRecord: {},\n          loadTreeProperties: false,\n          treeData: [{\n            text: \"root\",\n            expanded: true,\n            editable: true,\n            root: true,\n            id: uuid()\n          }],\n          operation: \"create\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         openModal: false, selectedRecord: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n      //ALPD-4749\n      //Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\n      let loadEsign = this.state.loadEsign;\n      let openModal = this.state.openModal; //let selectedId = this.props.Login.selectedId;\n\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      if (this.state.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {}; //selectedId = null;\n        } else {\n          //this.state.isRetrieveOrDispose=true;\n          openModal = true;\n          loadEsign = false; //isRetrieveOrDispose=false;\n\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\"; //ALPD-4749\n          //Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\n\n          this.setState({\n            selectedRecord,\n            openModal,\n            loadEsign,\n            selectedId: null\n          }); // const updateInfo = {\n          //     typeName: DEFAULT_RETURN,\n          //     data: { openModal, loadEsign, selectedRecord, selectedId: null ,importRetrieveOrDispose:false}\n          // }\n          // this.props.updateStore(updateInfo);\n        }\n      } else {\n        openModal = false; ///selectedId = null;\n        //selectedRecord = {};\n        //this.state.isRetrieveOrDispose= false;\n\n        this.getprojectbarcodeconfig(true);\n        this.setState({\n          selectedRecord,\n          openModal: false,\n          isInitialRender: true,\n          isFilterPopup: false,\n          isRetrieveOrDispose: false,\n          importRetrieveOrDispose: false\n        });\n      } // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { openModal, loadEsign, selectedRecord, selectedId }\n      // }\n      // this.props.updateStore(updateInfo);\n      // this.getsamplestoragetransaction({}, this.props.Login.userInfo);\n      // if (!this.state.isFilterPopup) {\n      //     this.getDynamicFilterExecuteData()\n      // }\n\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.loadTreeProperties === true) {\n        this.onSaveProperties(saveType, formRef);\n      } else if (this.state.openSpreadSheet) {\n        this.CRUDSampleStorageTransaction({ ...this.state.editedsheetData,\n          nsamplestoragemappingcode: this.state.isMultiSampleAdd ? Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\") : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\n          nsamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\n          sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\n          sheetUpdate: true,\n          userinfo: this.props.Login.userInfo,\n          isMultiSampleAdd: this.state.isMultiSampleAdd\n        }, 'create');\n      } else {\n        this.onSaveSampleStorageTransaction(saveType, formRef);\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      // let showFilter = !this.props.Login.showFilter\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { showFilter }\n      // }\n      // this.props.updateStore(updateInfo);\n      let boolean = !this.state.showFilter;\n      this.setState({\n        showFilter: boolean\n      });\n    };\n\n    this.closeFilter = () => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { showFilter: false }\n      // }\n      // this.props.updateStore(updateInfo);\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.reloadData = () => {\n      this.onFilterSubmit();\n    };\n\n    this.onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let isOnlyDraft = false;\n\n      if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\n        isOnlyDraft = true;\n      }\n\n      this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\n    };\n\n    this.openStorageMapping = addId => {\n      this.addSampleStorageMapping({\n        userInfo: this.props.Login.userInfo,\n        addId\n      });\n    };\n\n    this.deletesamplestoragemapping = param => {\n      this.CRUDSampleStorageTransaction({\n        'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\n        'userinfo': this.props.Login.userInfo\n      }, 'delete');\n    };\n\n    this.addMultipleSample = param => {\n      this.setState({\n        //sheetData: JSON.parse(response[0].data.sheetData),\n        openModal: true,\n        isMultiSampleAdd: true,\n        openSpreadSheet: true,\n        //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n        loading: false\n      });\n    };\n\n    this.opensearch = () => {\n      this.setState({\n        openModal: true,\n        isFilterPopup: true,\n        selectedRecord: { ...this.state.submittedselectedRecord\n        } || { ...this.state.selectedRecord\n        }\n      });\n    };\n\n    this.openbulkretrieve = () => {\n      this.setState({\n        isbulkretrieve: true,\n        openModal: true,\n        loading: false\n      });\n    };\n\n    this.handleExportClick = () => {\n      let exportFiled = [{\n        \"idsName\": \"IDS_SAMPLEID\",\n        \"dataField\": \"spositionvalue\",\n        \"width\": \"200px\",\n        \"staticField\": true\n      }];\n      this.setState({\n        exportFiled,\n        export: true\n      });\n    };\n\n    this.bulkRetrieveDispose = () => {\n      this.setState({\n        importRetrieveOrDispose: true,\n        openModal: true,\n        loading: false,\n        isRetrieveOrDispose: false,\n        selectedRecord: {}\n      }); //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             openModal: true, importRetrieveOrDispose: true,\n      //                   isRetrieveOrDispose: true,\n      //     }\n      // }\n      //     this.props.updateStore(updateInfo);\n    };\n\n    this.openRetrieveDispose = () => {\n      this.setState({\n        loading: true,\n        importRetrieveOrDispose: false\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"unit/getUnit\", {\n        userinfo: this.props.Login.userInfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        const unitMap = constructOptionList(response[0].data || [], \"nunitcode\", \"sunitname\", false, false, true);\n        const unit = unitMap.get(\"OptionList\");\n        this.setState({\n          unitMapList: unit,\n          openModal: true,\n          isRetrieveOrDispose: true,\n          importRetrieveOrDispose: false,\n          dynamicfields: [],\n          selectedBarcodeValue: {},\n          selectedRecord: {},\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.addSample = (param, nflag) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragemappingSheetData\", {\n        isMultiSampleAdd: nflag === 2 ? true : false,\n        nsamplestoragemappingcode: nflag === 2 ? this.state.masterData.samplestorageretrieval.map(item => item.nsamplestoragemappingcode).join(\",\") : param.nsamplestoragemappingcode.toString()\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        if (nflag === 2) {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            openModal: true,\n            isMultiSampleAdd: true,\n            openSpreadSheet: true,\n            //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n            loading: false\n          });\n        } else {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            openModal: true,\n            isMultiSampleAdd: false,\n            openSpreadSheet: true,\n            editedsheetData: param,\n            Rows: param.nrow,\n            columns: param.ncolumn,\n            loading: false\n          });\n        }\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const selectedProjectType = this.state.selectedProjectType || {};\n      let selectedRecordFilter = this.state.selectedRecordFilter || {};\n\n      if (fieldName === 'nstoragecategorycode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'ncontainertypecode') {\n        return this.getContainerStructure({\n          userinfo: this.props.Login.userInfo,\n          ncontainertypecode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'nprojecttypecode') {\n        ///return this.getprojectbarcodeconfig(comboData);\n        selectedProjectType[fieldName] = comboData;\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === 'ncontainerstructurecode') {\n        selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\n        selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\n      } else if (fieldName === 'nsamplestoragelocationcode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\n          nsamplestoragelocationcode: comboData.value\n        }, fieldName, comboData);\n      }\n\n      if (fieldName === 'nsamplestorageversioncode') {\n        selectedRecordFilter[fieldName] = comboData;\n        this.setState({\n          selectedRecordFilter\n        });\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord,\n          selectedRecordFilter\n        });\n      }\n    };\n\n    this.onSaveSampleStorageTransaction = saveType => {\n      let selectedRecord = this.state.selectedRecord;\n      let containerpathCodeArray = [];\n\n      if (this.state.operation === 'create') {\n        containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\n      }\n\n      const inputParam = {\n        nsamplestoragetransactioncode: selectedRecord['nsamplestoragetransactioncode'] ? parseInt(selectedRecord['nsamplestoragetransactioncode']) : 0,\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ? parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\n        ncontainertypecode: -1,\n        nproductcode: selectedRecord['nproductcode'].value,\n        ndirectionmastercode: -1,\n        ssamplestoragemappingname: \"-\",\n        nsamplestoragecontainerpathcode: this.state.operation === 'create' ? JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\n        containerpathsize: containerpathCodeArray.length,\n        nneedposition: 4,\n        ncontainerstructurecode: -1,\n        nquantity: selectedRecord['nquantity'] ? parseInt(selectedRecord['nquantity']) : 1,\n        userinfo: this.props.Login.userInfo\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.CRUDSampleStorageTransaction(inputParam, this.state.operation);\n      }\n    };\n\n    this.getsamplestoragetransaction = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragetransaction\", {\n        userinfo: this.props.Login.userInfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.childDataChange = selectedRecord => {\n      this.setState({\n        selectedRecord: { ...selectedRecord\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.childSheetDataChange = sheetData => {\n      this.setState({\n        // selectedRecord: {\n        //     ...this.state.selectedRecord,\n        //     sheetData: {\n        //         ...this.state.selectedRecord.sheetData,\n        //         ...sheetData\n        //     }\n        // },\n        sheetData: { ...sheetData\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.getActiveSampleStorageMappingById = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestorageretrieval/getActiveSampleStorageMappingById\", {\n        nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\n        userinfo: userinfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          } //,\n          // selectedRecord: {\n          //     ...this.state.selectedRecord\n          //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\n          // }\n          ,\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.filterColumnData = (filterValue, filterParam) => {\n      let masterData = filterParam.masterData;\n      let primaryKeyValue = 0;\n      let searchedData = undefined;\n\n      if (filterValue === \"\") {\n        if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n          primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\n        }\n      } else {\n        if (filterParam.isjsondata) {\n          searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        } else {\n          searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        }\n\n        if (searchedData.length > 0) {\n          primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\n        }\n      }\n\n      if (primaryKeyValue !== 0) {\n        this.setState({\n          loading: true\n        });\n        return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n          [filterParam.primaryKeyField]: primaryKeyValue\n        }).then(response => {\n          masterData[\"searchedData\"] = searchedData;\n          masterData = { ...masterData,\n            ...response.data\n          };\n\n          if (filterParam.sortField) {\n            sortData(masterData, filterParam.sortOrder, filterParam.sortField);\n          } else {\n            sortData(masterData);\n          }\n\n          this.setState({\n            masterData,\n            loading: false,\n            skip: 0,\n            take: 10,\n            selectedId: null\n          });\n        }).catch(error => {\n          this.setState({\n            loading: false\n          });\n\n          if (error.response.status === 500) {\n            toast.error(this.props.intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      } else {\n        masterData[filterParam.selectedObject] = undefined;\n        masterData[\"searchedData\"] = [];\n        Object.keys(masterData).forEach(item => {\n          if (item !== filterParam.inputListName && item !== filterParam.selectedObject && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n        });\n        this.setState({\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        });\n      }\n    };\n\n    this.onNumericInputChange = (value, field) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let constantvalue = value.target.value;\n\n      if (!isNaN(constantvalue)) {\n        selectedRecord[field] = constantvalue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.validateRetrievOrDispose = () => {\n      if (this.state.selectedRecord.saliquotsampleid && this.state.selectedRecord.saliquotsampleid === \"\" || this.state.selectedRecord.saliquotsampleid === undefined) {\n        toast.info(`${this.props.intl.formatMessage({\n          id: \"IDS_ENTER\"\n        })} ${\"IDS_NEWSAMPLEID\"}`);\n      } else if (this.state.selectedRecord.nquantity && this.state.selectedRecord.nquantity === \"\" || this.state.selectedRecord.saliquotsampleid === undefined) {\n        return toast.info(`${this.props.intl.formatMessage({\n          id: \"IDS_ENTER\"\n        })} ${\"IDS_QUANTITY\"}`);\n      } else if (this.state.selectedRecord.nunitcode && Object.keys(this.state.selectedRecord.nunitcode).length <= 0 || this.state.selectedRecord.nunitcode === undefined) {\n        return toast.info(`${this.props.intl.formatMessage({\n          id: \"IDS_SELECT\"\n        })} ${\"IDS_UNIT\"}`);\n      }\n    };\n\n    this.CRUDSampleStorageTransaction = (inputParam, operation) => {\n      let inputData = [];\n      let obj = convertDateValuetoString(this.state.masterData.fromDate, this.state.masterData.toDate, this.props.Login.userInfo);\n      let selectedRecord = this.state.selectedRecord;\n      let isFileupload = inputParam.importRetrieveOrDispose ? true : false;\n      const formData = new FormData();\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"scomments\"] = inputParam.scomments;\n      inputData[\"spositionvalue\"] = inputParam.spositionvalue;\n      inputData[\"nquantity\"] = parseInt(inputParam.nquantity);\n      inputData[\"sunitname\"] = inputParam.sunitname;\n      inputData[\"saliquotsampleid\"] = inputParam.saliquotsampleid;\n      inputData[\"isRetrieve\"] = inputParam.isRetrieve;\n      inputData[\"nneedaliquot\"] = inputParam.nneedaliquot;\n      inputData[\"nprojecttypecode\"] = this.state.breadCrumbdata.breadcrumbprojecttype.value || -1;\n\n      if (inputParam.importRetrieveOrDispose) {\n        formData.append(\"ImportFile\", selectedRecord['sfilename'][0]);\n        formData.append(\"retrieveDisposeSampleType\", inputParam.isRetrieve ? transactionStatus.Retrieved : transactionStatus.Disposed);\n        formData.append(\"fieldName\", Lims_JSON_stringify(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLEID\"\n        })));\n        formData.append(\"fromDate\", obj.fromDate);\n        formData.append(\"toDate\", obj.toDate);\n        formData.append(\"nprojecttypecode\", this.state.breadCrumbdata.breadcrumbprojecttype.value || -1);\n      }\n\n      inputParam = {\n        formData: formData,\n        isFileupload,\n        methodUrl: inputParam.importRetrieveOrDispose ? \"bulkeretrievedispose\" : \"samplestorageretrieval\",\n        operation: \"create\",\n        dynamicfields: [],\n        classUrl: \"samplestorageretrieval\",\n        isInitialRender: true,\n        selectedRecord: inputParam.importRetrieveOrDispose ? { ...this.state.selectedRecord\n        } : {},\n        //selectedRecord: {},\n        ...inputParam,\n        inputData\n      };\n      var saveType = this.statesaveType;\n      const masterData = this.state.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputParam.ncontrolcode)) {\n        //ALPD-4749\n        //Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\n        this.setState({\n          loading: true,\n          dynamicfields: []\n        });\n        let urlArray = [];\n        const currentTimeUrl = rsapi.post(\"/timezone/getLocalTimeByZone\", {\n          \"userinfo\": this.props.Login.userInfo\n        });\n        const reasonUrl = rsapi.post(\"/reason/getReason\", {\n          \"userinfo\": this.props.Login.userInfo\n        });\n        urlArray = [reasonUrl, currentTimeUrl];\n        Axios.all(urlArray).then(response => {\n          const reasonMap = constructOptionList(response[0].data || [], \"nreasoncode\", \"sreason\", undefined, undefined, false);\n          const reasonList = reasonMap.get(\"OptionList\");\n          this.setState({\n            esign: reasonList,\n            serverTime: rearrangeDateFormat(this.props.Login.userInfo, response[1].data),\n            loadEsign: true,\n            openModal: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            importRetrieveOrDispose: inputParam.importRetrieveOrDispose,\n            loading: false\n          });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n\n          this.setState({\n            loading: false\n          });\n        }); // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         loadEsign: true, dynamicfields: [], screenData: { inputParam, masterData }, saveType,importRetrieveOrDispose:inputParam.importRetrieveOrDispose\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n      } else {\n        this.crudMasterSampleStorageRetrieval(inputParam, this.state.masterData, inputParam.importRetrieveOrDispose ? \"openModal\" : \"\");\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      this.getprojectbarcodeconfigForSubmit(true); // this.setState({ loading: true })\n      // let inputParamData = {\n      //     nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n      //     // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\n      //     // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n      //     userinfo: this.props.Login.userInfo,\n      // }\n      // let urlArray = [];\n      // const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragemapping\", inputParamData);\n      // urlArray = [url1];\n      // Axios.all(urlArray)\n      //     .then(response => {\n      //         let object = {\n      //             selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname,\n      //             // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\n      //             // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\n      //         }\n      //         let filterData = this.generateBreadCrumData(object);\n      //         this.setState({\n      //             filterData,\n      //             masterData: {\n      //                 ...this.state.masterData,\n      //                 ...response[0].data,\n      //                 //   samplestorageretrieval: response[0].data['samplestorageretrieval'],\n      //             },\n      //             loading: false\n      //         });\n      //     }).catch(error => {\n      //         if (error.response.status === 500) {\n      //             toast.error(error.message);\n      //         } else {\n      //             toast.warn(error.response.data);\n      //         }\n      //         this.setState({\n      //             loading: false\n      //         });\n      //     });\n    };\n\n    this.bulkeretrieval = (inputParam, operation) => {\n      let inputData = [];\n      let obj = convertDateValuetoString(this.state.masterData.fromDate, this.state.masterData.toDate, this.props.Login.userInfo);\n      inputData = {\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        nprojecttypecode: this.state.breadCrumbdata.breadcrumbprojecttype.value,\n        spositionvaluesize: this.state.newData.length,\n        spositionvalue: this.state.newData.map(item => item['Sample Id']).join('\\',\\''),\n        isbulkretrieve: true\n      };\n      inputParam = {\n        methodUrl: \"bulkeretrieve\",\n        operation: \"create\",\n        classUrl: \"samplestorageretrieval\",\n        isInitialRender: true,\n        //  selectedRecord: {...this.state.selectedRecord},\n        selectedRecord: {},\n        ...inputParam,\n        inputData\n      };\n      var saveType = this.statesaveType;\n      const masterData = this.state.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputParam.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.state.masterData, \"openModal\");\n      }\n    };\n\n    this.onSampleMappingSaveClick = param => {\n      if (!param.isRetrieve) {\n        if (this.state.selectedRecord[\"nneedaliquot\"] && this.state.selectedRecord[\"nneedaliquot\"] === true) {\n          return toast.info(this.props.intl.formatMessage({\n            id: \"IDS_DISABLEINPUTFORALIQUOTSAMPLE\"\n          }));\n        }\n      }\n\n      const mandatoryFields = param.importRetrieveOrDispose ? [{\n        \"idsName\": \"IDS_FILE\",\n        \"dataField\": \"sfilename\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_CHOOSE\",\n        \"controlType\": \"file\"\n      }] : this.state.selectedRecord[\"nneedaliquot\"] && this.state.selectedRecord[\"nneedaliquot\"] === true ? [{\n        \"idsName\": \"IDS_SAMPLEID\",\n        \"dataField\": \"spositionvalue\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_NEWSAMPLEID\",\n        \"dataField\": \"saliquotsampleid\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_QUANTITY\",\n        \"dataField\": \"nquantity\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_UNITNAME\",\n        \"dataField\": \"nunitcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }] : [{\n        \"idsName\": \"IDS_SAMPLEID\",\n        \"dataField\": \"spositionvalue\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }];\n      onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields, () => this.CRUDSampleStorageTransaction(param));\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataStateChange: event.dataState\n      });\n    };\n\n    this.dataStateGridChange = event => {\n      this.setState({\n        dataStateGridChange: event.dataState\n      });\n    };\n\n    this.approveSampleStorageMapping = event => {\n      let inputParamData = {};\n      this.setState({\n        loading: true\n      });\n      inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestorageretrieval/approveSampleStorageMapping\", inputParamData);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.fetchRecord = data => {\n      this.setState({\n        loading: true\n      });\n      let selectedRecord = this.state.selectedRecord;\n      let inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestorageretrieval/addSampleStorageMapping\", inputParamData);\n      const url2 = rsapi.post(\"product/getProduct\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      const url3 = rsapi.post(\"samplestorageretrieval/getEditSampleStorageMapping\", {\n        'nsamplestoragemappingcode': data.nsamplestoragemappingcode,\n        'userinfo': this.props.Login.userInfo\n      });\n      urlArray = [url1, url2, url3];\n      Axios.all(urlArray).then(response => {\n        const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n        const storageMappingMapList = storageMappingMap.get(\"OptionList\"); // let containerStructure = response[0].data['containerStructure'];\n\n        const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n        const containerTypeList = containerTypeMap.get(\"OptionList\");\n        const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n        const directionmasterList = directionmasterMap.get(\"OptionList\");\n        const containerstructureMap = constructOptionList(response[2].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n        const containerstructureList = containerstructureMap.get(\"OptionList\");\n        const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n        const productList = productMap.get(\"OptionList\");\n        const editedObject = response[2].data.editsampleStorageMapping;\n        storageMappingMapList.unshift({\n          label: editedObject.scontainerpath,\n          value: editedObject.nsamplestoragecontainerpathcode\n        });\n        selectedRecord = {\n          ndirectionmastercode: {\n            label: editedObject.sdirection,\n            value: editedObject.ndirectionmastercode\n          },\n          nsamplestoragecontainerpathcode: {\n            label: editedObject.scontainerpath,\n            value: editedObject.nsamplestoragecontainerpathcode\n          },\n          nproductcode: {\n            label: editedObject.sproductname,\n            value: editedObject.nproductcode\n          },\n          ncontainertypecode: {\n            label: editedObject.scontainertype,\n            value: editedObject.ncontainertypecode\n          },\n          ncontainerstructurecode: {\n            label: editedObject.scontainerstructurename,\n            value: editedObject.ncontainerstructurecode\n          },\n          nneedposition: editedObject.nneedposition === 3 ? true : false,\n          directionmasterOptions: directionmasterList,\n          nquantity: editedObject.nquantity,\n          nrow: editedObject.nrow,\n          ncolumn: editedObject.ncolumn,\n          nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\n        };\n        this.setState({\n          openSpreadSheet: false,\n          openModal: true,\n          selectedRecord: { ...selectedRecord,\n            storageMappingMapOptions: storageMappingMapList,\n            productOptions: productList,\n            containerTypeOptions: containerTypeList,\n            containerStructureOptions: containerstructureList,\n            isInitialRender: true\n          },\n          operation: 'update',\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.retrievalType = () => {\n      let retrievalType = this.state.retrievalType;\n\n      if (retrievalType === 1) {\n        retrievalType = 2;\n      } else {\n        retrievalType = 1;\n      }\n\n      this.setState({\n        retrievalType: retrievalType\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handlePageChangeFilter = event => {\n      this.setState({\n        kendoSkip: event.skip,\n        kendoTake: event.take\n      });\n    };\n\n    this.onChange = (immutableTree, config) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[\"tree\"] = immutableTree;\n      selectedRecord[\"config\"] = config;\n      selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\n      this.setState({\n        tree: immutableTree,\n        config: config,\n        selectedRecord: selectedRecord\n      });\n    };\n\n    this.processWithGroups = (data, dataState) => {\n      const aggregates = [{\n        field: \"navailablespace\",\n        aggregate: \"sum\"\n      }];\n      const groups = dataState.group;\n\n      if (groups) {\n        groups.map(group => group.aggregates = aggregates);\n      }\n\n      dataState.group = groups;\n      const newDataState = process(data, dataState); // setGroupIds({\n      //     data: newDataState.data,\n      //     group: dataState.group,\n      // });\n\n      return newDataState;\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue) => {\n      let masterData = this.state.masterData;\n      masterData[dateName] = dateValue;\n      this.setState({\n        masterData\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.state.screenData //this.props.Login.screenData\n\n      }; //this.props.validateEsignCredential(inputParam, this.props.Login.importRetrieveOrDispose?\"openModal\":\"\");\n\n      this.validateEsignCredential(inputParam, this.state.importRetrieveOrDispose ? \"openModal\" : \"\");\n    };\n\n    this.validateEsignCredential = (inputParam, modalName, action) => {\n      this.setState({\n        loading: true\n      });\n\n      if (inputParam && inputParam.inputData && inputParam.inputData.userinfo) {\n        inputParam.inputData[\"userinfo\"] = { ...inputParam.inputData.userinfo,\n          sformname: Lims_JSON_stringify(inputParam.inputData.userinfo.sformname),\n          smodulename: Lims_JSON_stringify(inputParam.inputData.userinfo.smodulename)\n        };\n      }\n\n      return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n        if (response.data === \"Success\") {\n          const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n\n            if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\n              delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n              delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n              delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n            } // ALPD-2437 added for Type3 Component. Use selected record to clear esign values\n\n\n            if (inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"]) {\n              delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignreason\"];\n              delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignpassword\"];\n              delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esigncomments\"];\n              delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"agree\"];\n            }\n          }\n\n          return this.crudMasterSampleStorageRetrieval(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"], modalName, undefined, action);\n        }\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.crudMasterSampleStorageRetrieval = (inputParam, masterData, modalName, defaultInput, action) => {\n      this.setState({\n        loading: true,\n        dynamicfields: []\n      });\n      let requestUrl = '';\n      let urlArray = [];\n\n      if (inputParam.isFileupload) {\n        const formData = inputParam.formData;\n        formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\n        requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, formData);\n      } else {\n        requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n        });\n      }\n\n      urlArray = [requestUrl];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          isInitialRender: true,\n          selectedRecord: {},\n          masterData: { ...masterData,\n            ...response[0].data\n          },\n          [modalName]: false,\n          loading: false,\n          loadEsign: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loadEsign: false,\n          loading: false\n        });\n      });\n    };\n\n    this.state = {\n      retrievalType: 1,\n      // extractedColumnList: [   \n      //     { \"idsName\": \"IDS_STORAGESTRUCTURE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\" },\n      //     { \"idsName\": \"IDS_SAMPLESTORAGEPATH\", \"dataField\": \"scontainerpath\", \"width\": \"450px\" },\n      //     { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"100px\" },\n      //     { \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\", \"width\": \"100px\" },\n      //     //{ \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"width\": \"100px\" },\n      //     //{ \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"width\": \"100px\" },\n      //     { \"idsName\": \"IDS_PARTICIPANTS\", \"dataField\": \"sparticipantid\", \"width\": \"100px\" },\n      //     //{ \"idsName\": \"IDS_VISITNUMBER\", \"dataField\": \"svisitnumber\", \"width\": \"100px\" },\n      //     { \"dataField\": \"svisitnumbershortcode\", \"idsName\": \"IDS_VISITNUMBERCODE\", \"width\": \"100px\" }, \n      //     { \"dataField\": \"sprojectshortcode\", \"idsName\": \"IDS_PROJECTTYPECODE\" , \"width\": \"100px\"} ,\n      //     { \"dataField\": \"sproductshortcode\", \"idsName\": \"IDS_PRODUCTCODE\", \"width\": \"100px\" } ,\n      //     { \"dataField\": \"ssampledonorshortcode\", \"idsName\": \"IDS_SAMPLEDONORCODE\", \"width\": \"100px\" }  ,\n      //     { \"dataField\": \"scollectiontubetypeshortcode\", \"idsName\": \"IDS_COLLECTIONTUBETYPECODE\", \"width\": \"100px\" }\n      // ],\n      sheetData: {},\n      selectedRecordFilter: {},\n      // treeData: [{ title: 'Chicken', children: [{ title: 'Egg' }] }],\n      toggleAction: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      treeData: [{\n        //  text: \"root\",\n        text: this.props.intl.formatMessage({\n          id: \"IDS_ROOT\"\n        }),\n        expanded: true,\n        editable: true,\n        root: true,\n        id: uuid()\n      }],\n      panes: [{\n        size: '50%',\n        scrollable: false\n      }],\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      selectedItem: undefined,\n      loading: false,\n      esignreason: this.props.esignreason,\n      dataStateGridChange: {\n        take: 10,\n        skip: 0\n      },\n      dataStateChange: {\n        take: 10,\n        skip: 0 // group: [\n        //     {\n        //         field: \"ssamplestoragelocationname\",\n        //     },\n        // ],\n\n      }\n    };\n    let fields = {}; // if (this.state.extractedColumnList) {\n    //     // let newArr=[...[  { \"dataField\": \"svisitnumbershortcode\", \"idsName\": \"IDS_VISITNUMBERCODE\", \"width\": \"100px\" }, \n    //     // { \"dataField\": \"sprojectshortcode\", \"idsName\": \"IDS_PROJECTTYPECODE\" , \"width\": \"100px\"} ,\n    //     // { \"dataField\": \"sproductshortcode\", \"idsName\": \"IDS_PRODUCTCODE\", \"width\": \"100px\" } ,\n    //     // { \"dataField\": \"ssampledonorshortcode\", \"idsName\": \"IDS_SAMPLEDONORCODE\", \"width\": \"100px\" }  ,\n    //     // { \"dataField\": \"scollectiontubetypeshortcode\", \"idsName\": \"IDS_COLLECTIONTUBETYPECODE\", \"width\": \"100px\" }]\n    //     // ,...this.state.extractedColumnList]\n    //     this.state.extractedColumnList.map(field => {\n    //         if (field.dataField !== 'ssamplestoragelocationname' && field.dataField !== 'sproductname'\n    //             && field.dataField !== 'sprojecttypename' && field.dataField !== 'svisitnumber') {\n    //             fields = {\n    //                 ...fields,\n    //                 [field.dataField]: {\n    //                     \"label\":\n    //                         this.props.intl.formatMessage({\n    //                             id: field.idsName,\n    //                         })\n    //                     ,\n    //                     \"type\": field.dataField === 'navailablespace' ? \"number\" : \"text\",\n    //                     \"valueSources\": [\"value\", \"func\"],\n    //                     \"mainWidgetProps\": {\n    //                         \"valueLabel\": \"Name\",\n    //                         \"valuePlaceholder\": this.props.intl.formatMessage({\n    //                             id: field.idsName\n    //                         })\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     });\n    // }\n\n    this.state = { ...this.state,\n      'fields': fields\n    };\n    this.searchRef = React.createRef();\n    this.dragClue = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let {\n      filterData,\n      storageCategoryOptions,\n      selectedRecord,\n      controlMap,\n      userRoleControlRights,\n      storageLocationOptions,\n      sampleStorageVersionOptions,\n      masterData,\n      selectedRecordFilter,\n      fields,\n      selectedProjectType,\n      selectedProjectTypeList,\n      breadCrumbdata,\n      openModal,\n      isInitialRender,\n      dynamicfields //,importRetrieveOrDispose,isRetrieveOrDispose \n\n    } = this.state;\n    let bool = false; ///////////////////////////////\n    //  if(this.props.Login.importRetrieveOrDispose){\n\n    if (this.props.Login.openModal !== previousProps.Login.openModal) {\n      bool = true;\n      openModal = this.props.Login.openModal;\n    } //}\n\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord || {};\n      bool = true;\n      isInitialRender = true;\n      dynamicfields = []; // selectedRecord['spositionvalue'] = \"\";\n      // selectedRecord['scomments'] = \"\"; \n\n      selectedRecord['nprojecttypecode'] = previousProps.Login.selectedRecord.nprojecttypecode;\n    }\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.map(item => queryBuilderFreezer.push({\n        \"value\": item.nsamplestoragelocationcode,\n        \"title\": item.ssamplestoragelocationname\n      }));\n      fields = { ...fields,\n        'nsamplestoragelocationcode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_STORAGESTRUCTURENAME\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    } // if (this.props.Login.masterData.sampleType !== previousProps.Login.masterData.sampleType) {\n    //     let queryBuilderFreezer = [];\n    //     bool = true;\n    //     this.props.Login.masterData.sampleType && this.props.Login.masterData.sampleType.map(\n    //         (item) => queryBuilderFreezer.push({ \"value\": item.nproductcode, \"title\": item.sproductname })\n    //     )\n    //     fields = {\n    //         ...fields,\n    //         'nproductcode': {\n    //             \"label\": this.props.intl.formatMessage({\n    //                 id: \"IDS_PRODUCT\",\n    //             }),\n    //             \"type\": \"select\",\n    //             \"valueSources\": [\"value\"],\n    //             \"fieldSettings\": {\n    //                 \"listValues\": queryBuilderFreezer\n    //             }\n    //         }\n    //     }\n    // }\n    // if (this.props.Login.masterData.ProjectType !== previousProps.Login.masterData.ProjectType) {\n    //     let queryBuilderFreezer = [];\n    //     bool = true;\n    //     this.props.Login.masterData.ProjectType && this.props.Login.masterData.ProjectType.map(\n    //         (item) => queryBuilderFreezer.push({ \"value\": item.nprojecttypecode, \"title\": item.sprojecttypename })\n    //     )\n    //     fields = {\n    //         ...fields,\n    //         'nprojecttypecode': {\n    //             \"label\": this.props.intl.formatMessage({\n    //                 id: \"IDS_PROJECTTYPE\",\n    //             }),\n    //             \"type\": \"select\",\n    //             \"valueSources\": [\"value\"],\n    //             \"fieldSettings\": {\n    //                 \"listValues\": queryBuilderFreezer\n    //             }\n    //         }\n    //     }\n    // } if (this.props.Login.masterData.VisitNumber !== previousProps.Login.masterData.VisitNumber) {\n    //     let queryBuilderFreezer = [];\n    //     bool = true;\n    //     this.props.Login.masterData.VisitNumber && this.props.Login.masterData.VisitNumber.map(\n    //         (item) => queryBuilderFreezer.push({ \"value\": item.nvisitnumbercode, \"title\": item.svisitnumber })\n    //     )\n    //     fields = {\n    //         ...fields,\n    //         'nvisitnumbercode': {\n    //             \"label\": this.props.intl.formatMessage({\n    //                 id: \"IDS_VISITNUMBER\",\n    //             }),\n    //             \"type\": \"select\",\n    //             \"valueSources\": [\"value\"],\n    //             \"fieldSettings\": {\n    //                 \"listValues\": queryBuilderFreezer\n    //             }\n    //         }\n    //     }\n    // }\n    ///////////////////////////////\n\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      bool = true;\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n    }\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      bool = true;\n      const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", undefined, undefined, undefined);\n      storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedStorageCategory) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nstoragecategorycode: storageCategoryOptions.filter(item => item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      bool = true;\n      const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageLocation) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestoragelocationcode: storageLocationOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\n      bool = true;\n      const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageVersion) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestorageversioncode: sampleStorageVersionOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      masterData = this.props.Login.masterData;\n\n      if (selectedRecord[\"nprojecttypecode\"] === undefined) {\n        selectedRecord[\"nprojecttypecode\"] = {\n          label: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.sprojecttypename ? this.props.Login.masterData.selectedProjectType.sprojecttypename : 'NA',\n          value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.nprojecttypecode ? this.props.Login.masterData.selectedProjectType.nprojecttypecode : -1\n        }; // selectedRecord[\"nprojecttypecode\"] = {\n        //     label: this.state.selectedProjectType.nprojecttypecode.item.sprojecttypename &&\n        //     this.state.selectedProjectType.nprojecttypecode.item.sprojecttypename ?\n        //    this.state.selectedProjectType.nprojecttypecode.item.sprojecttypename: 'NA'\n        //     , value: this.state.selectedProjectType && this.state.selectedProjectType.nprojecttypecode.item.nprojecttypecode\n        // }; \n\n        selectedProjectType = {\n          nprojecttypecode: {\n            label: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.sprojecttypename ? this.props.Login.masterData.selectedProjectType.sprojecttypename : 'NA',\n            value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.nprojecttypecode ? this.props.Login.masterData.selectedProjectType.nprojecttypecode : -1\n          }\n        };\n        breadCrumbdata = { ...convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo),\n          breadcrumbprojecttype: {\n            label: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.sprojecttypename ? this.props.Login.masterData.selectedProjectType.sprojecttypename : 'NA',\n            value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.nprojecttypecode ? this.props.Login.masterData.selectedProjectType.nprojecttypecode : -1\n          }\n        };\n      }\n\n      if (this.props.Login.masterData.projectbarcodeconfig !== previousProps.Login.masterData.projectbarcodeconfig) {\n        selectedProjectTypeList = this.props.Login.masterData.selectedProjectTypeList;\n        const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.projectbarcodeconfig || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n        masterData['projectbarcodeconfig'] = filterStorageCategorylist.get(\"OptionList\");\n      }\n\n      filterData = this.generateBreadCrumData(this.props.Login.masterData);\n    }\n\n    if (this.state.export) {\n      this._excelExportHeader.save();\n\n      this.setState({\n        export: false\n      });\n    } //     if(this.props.Login.importRetrieveOrDispose!== previousProps.Login.importRetrieveOrDispose){\n    //         //bool = true;\n    //            // importRetrieveOrDispose=this.props.Login.importRetrieveOrDispose\n    //             //openModal = this.props.Login.importRetrieveOrDispose?this.props.Login.openModal:true;\n    //     }\n    //     if(this.props.Login.isRetrieveOrDispose!== previousProps.Login.isRetrieveOrDispose){\n    //         // bool = true;\n    //      // isRetrieveOrDispose=this.props.Login.importRetrieveOrDispose?this.props.Login.isRetrieveOrDispose :true;\n    //  }\n\n    /*    if (this.state.masterData !== previousState.masterData) {\r\n            bool = true;\r\n                  selectedRecord[\"nprojecttypecode\"] = {\r\n                label: this.state.masterData.selectedProjectType &&\r\n                    this.state.masterData.selectedProjectType.sprojecttypename ?\r\n                    this.state.masterData.selectedProjectType.sprojecttypename : 'NA'\r\n                , value: this.state.masterData.selectedProjectType && this.state.masterData.selectedProjectType.nprojecttypecode\r\n            };\r\n            selectedProjectType = {\r\n                nprojecttypecode: {\r\n                    label: this.state.masterData.selectedProjectType &&\r\n                    this.state.masterData.selectedProjectType.sprojecttypename ?\r\n                    this.state.masterData.selectedProjectType.sprojecttypename : 'NA'\r\n                    , value: this.state.masterData.selectedProjectType && this.state.masterData.selectedProjectType.nprojecttypecode\r\n                }\r\n            };\r\n         \r\n                  //this.state.masterData.projectbarcodeconfig=previousState.masterData.projectbarcodeconfig;\r\n                  filterData = this.generateBreadCrumData(this.state.masterData);\r\n              }*/\n\n\n    if (bool) {\n      this.setState({\n        storageCategoryOptions,\n        filterData,\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        masterData,\n        selectedRecordFilter,\n        fields,\n        selectedProjectType,\n        selectedProjectTypeList,\n        breadCrumbdata,\n        isInitialRender,\n        openModal,\n        dynamicfields //,importRetrieveOrDispose,isRetrieveOrDispose\n\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  generateBreadCrumData(obj) {\n    const breadCrumbData = [];\n\n    if (this.state.masterData && this.state.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": obj.selectedStorageCategoryName && obj.selectedStorageCategoryName !== null ? obj.selectedStorageCategoryName : \"NA\"\n      } // ,\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\n      //     \"value\": obj.selectedSampleStorageLocation &&\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\n      // },\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\n      //     \"value\": obj.selectedSampleStorageVersion &&\n      //         obj.selectedSampleStorageVersion.nversionno !== null ?\n      //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\n      // }\n      );\n    }\n\n    return breadCrumbData;\n  }\n\n  getSampleStorageLocation(inputData, fieldName, comboData) {\n    let selectedRecordFilter = this.state.selectedRecordFilter || {};\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n\n    if (fieldName === 'nsamplestoragelocationcode') {\n      inputParamData = {\n        nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\n        nsamplestoragelocationcode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    } else {\n      inputParamData = {\n        nstoragecategorycode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    }\n\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragemapping\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        storageLocationOptions,\n        sampleStorageVersionOptions\n      } = this.state;\n      let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n      let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n      selectedRecordFilter = { ...selectedRecordFilter,\n        nsamplestoragelocationcode: storageLocationOptions.length > 0 ? storageLocationOptions[0] : [],\n        nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ? sampleStorageVersionOptions[0] : []\n      };\n      this.setState({\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        selectedRecordFilter: { ...selectedRecordFilter,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  addSampleStorageMapping() {\n    this.setState({\n      loading: true\n    });\n    let selectedRecord = this.state.selectedRecord;\n    let inputParamData = {\n      // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n      nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n      // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n      userinfo: this.props.Login.userInfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestorageretrieval/addSampleStorageMapping\", inputParamData);\n    const url2 = rsapi.post(\"product/getProduct\", {\n      'userinfo': this.props.Login.userInfo\n    }); // const url3 = rsapi.post(\"containertype/getContainerType\",\n    //     { 'userinfo': this.props.Login.userInfo });\n\n    urlArray = [url1, url2];\n    Axios.all(urlArray).then(response => {\n      const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n      const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n      let containerStructure = response[0].data['containerStructure'];\n      const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n      const containerTypeList = containerTypeMap.get(\"OptionList\");\n      const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n      const directionmasterList = directionmasterMap.get(\"OptionList\");\n      const containerstructureMap = constructOptionList(response[0].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true); //const containerstructureList = containerstructureMap.get(\"OptionList\");\n\n      const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n      const productList = productMap.get(\"OptionList\");\n      this.setState({\n        openModal: true,\n        selectedRecord: { ...selectedRecord,\n          storageMappingMapOptions: storageMappingMapList,\n          productOptions: productList,\n          containerTypeOptions: containerTypeList,\n          directionmasterOptions: directionmasterList,\n          // ncontainertypecode: containerTypeList[0],\n          // containerStructureOptions: containerstructureList,\n          // ncontainerstructurecode: containerstructureList[0],\n          nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\n          ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\n          isInitialRender: true\n        },\n        openSpreadSheet: false,\n        operation: 'create',\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getprojectbarcodeconfigForSubmit(nflag) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    let obj = convertDateValuetoString(this.state.masterData.fromDate, this.state.masterData.toDate, this.props.Login.userInfo);\n    inputParamData = {\n      nprojecttypecode: this.state.selectedProjectType.nprojecttypecode.value,\n      isFilterSubmit: nflag,\n      // fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\n      // toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\n      fromDate: obj.fromDate,\n      toDate: obj.toDate,\n      userinfo: this.props.Login.userInfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestorageretrieval/getProjectbarcodeconfig\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      //let masterData = this.state.masterData.samplestorageretrieval;\n      this.setState(nflag === false ? {\n        selectedProjectTypeList: sortData(response[0].data.selectedProjectTypeList),\n        // selectedRecord: {\n        //     nprojecttypecode: { label: comboData.label, value: comboData.value }\n        // },\n        loading: false\n      } : {\n        selectedProjectTypeList: sortData(response[0].data.selectedProjectTypeList),\n        breadCrumbdata: {\n          breadcrumbprojecttype: {\n            label: this.state.selectedProjectType.nprojecttypecode.label,\n            value: this.state.selectedProjectType.nprojecttypecode.value\n          },\n          ...convertDateValuetoString(this.state.masterData.fromDate, this.state.masterData.toDate, this.props.Login.userInfo)\n        },\n        masterData: { ...this.state.masterData,\n          fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\n          toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\n          samplestorageretrieval: response[0].data.samplestorageretrieval\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getprojectbarcodeconfig(nflag) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    let obj = convertDateValuetoString(this.state.masterData.fromDate, this.state.masterData.toDate, this.props.Login.userInfo);\n    inputParamData = {\n      nprojecttypecode: this.state.breadCrumbdata.breadcrumbprojecttype.value,\n      isFilterSubmit: nflag,\n      // fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\n      // toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\n      fromDate: obj.fromDate,\n      toDate: obj.toDate,\n      userinfo: this.props.Login.userInfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestorageretrieval/getProjectbarcodeconfig\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      //let masterData = this.state.masterData.samplestorageretrieval\n      this.setState(nflag === false ? {\n        selectedProjectTypeList: sortData(response[0].data.selectedProjectTypeList),\n        // selectedRecord: {\n        //     nprojecttypecode: { label: comboData.label, value: comboData.value }\n        // },\n        loading: false\n      } : {\n        selectedProjectTypeList: sortData(response[0].data.selectedProjectTypeList),\n\n        /*breadCrumbdata: {\r\n            breadcrumbprojecttype: {\r\n                label: this.state.selectedProjectType.nprojecttypecode.label,\r\n                value: this.state.selectedProjectType.nprojecttypecode.value\r\n            },\r\n            ...convertDateValuetoString(this.state.masterData.fromDate,\r\n                this.state.masterData.toDate, this.props.Login.userInfo)\r\n        },*/\n        masterData: { ...this.state.masterData,\n          fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\n          toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\n          samplestorageretrieval: response[0].data.samplestorageretrieval\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getContainerStructure(inputData, fieldName, comboData) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    inputParamData = {\n      ncontainertypecode: comboData.value,\n      userinfo: inputData.userinfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestorageretrieval/getContainerStructure\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        containerStructureOptions,\n        selectedRecord\n      } = this.state;\n      let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, undefined);\n      containerStructureOptions = containerStructureList.get(\"OptionList\");\n      selectedRecord = { ...selectedRecord,\n        nrow: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.nrow : 1,\n        ncolumn: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.ncolumn : 1,\n        ncontainerstructurecode: containerStructureOptions.length > 0 ? containerStructureOptions[0] : [],\n        containerStructureOptions: containerStructureOptions.length > 0 ? [...containerStructureOptions] : []\n      };\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getSelectedBarcodeData(e, inputParam) {\n    if (e.keyCode === 13) {\n      this.setState({\n        loading: true\n      }); //let selectedRecord = this.state.selectedRecord || {};\n\n      let urlArray = [];\n      const url1 = rsapi.post(\"/samplestorageretrieval/getSelectedBarcodeData\", {\n        // nprojecttypecode: this.state.selectedBarcodeValue.nprojecttypecode,\n        spositionvalue: inputParam.spositionvalue,\n        userinfo: this.props.Login.userInfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let dynamicfields = [];\n        dynamicfields = [{\n          \"idsName\": \"IDS_SAMPLEID\",\n          \"dataField\": \"spositionvalue\",\n          \"width\": \"200px\",\n          \"staticField\": true\n        }, {\n          \"idsName\": \"IDS_POSITION\",\n          \"dataField\": \"sposition\",\n          \"width\": \"200px\",\n          \"staticField\": true\n        }, {\n          \"idsName\": \"IDS_QUANTITY\",\n          \"dataField\": \"nquantity\",\n          \"width\": \"200px\",\n          \"staticField\": true\n        }, {\n          \"idsName\": \"IDS_UNIT\",\n          \"dataField\": \"sunitname\",\n          \"width\": \"200px\",\n          \"staticField\": true\n        }];\n        const temparray2 = response[0].data['selectedProjectTypeList'] && response[0].data['selectedProjectTypeList'].map(option => {\n          return {\n            \"idsName\": option.sfieldname,\n            \"dataField\": option.sfieldname,\n            \"width\": \"200px\"\n          };\n        });\n        dynamicfields = [...dynamicfields, ...temparray2];\n        this.setState({\n          dynamicfields,\n          selectedBarcodeValue: { ...response[0].data['selectedBarcodeValue']\n          },\n          loading: false\n        });\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          this.setState({\n            dynamicfields: [],\n            selectedBarcodeValue: {}\n          });\n          toast.info(error.response.data);\n        }\n      });\n    }\n  }\n\n  getDynamicFilterExecuteData(nflag) {\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (nflag === 2 ? true : selectedRecord.filterquery && selectedRecord.filterquery !== \"\") {\n      this.setState({\n        loading: true\n      });\n      let obj = {\n        // ...inputParam.component, \n        label: 'samplestorageretrieval',\n        valuemember: 'nsamplestorageretrievalcode',\n        filterquery: nflag === 2 ? this.state.submittedselectedRecord.filterquery : selectedRecord.filterquery,\n        fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\n        toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\n        nprojecttypecode: this.state.breadCrumbdata.breadcrumbprojecttype.value,\n        source: 'view_sampleretrieval_' + this.state.breadCrumbdata.breadcrumbprojecttype.value,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"/samplestorageretrieval/getdynamicfilterexecutedata\", obj);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let masterData = this.state.masterData;\n        masterData = { ...masterData,\n          ...response[0].data\n        };\n        this.setState({\n          masterData: { ...masterData\n          },\n          loading: false,\n          openModal: false,\n          isFilterPopup: false,\n          submittedselectedRecord: nflag === 2 ? { ...this.state.submittedselectedRecord\n          } : { ...selectedRecord\n          },\n          selectedRecord: {},\n          displayQuery: this.state.tree ? QbUtils.queryString(this.state.tree, this.state.config, true) : \"\"\n        });\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.info(error.response.data.rtn);\n        }\n      });\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_SELECTAFILTER\"\n      }));\n    }\n  } // getDynamicFilterExecuteData(nflag) {\n  //     this.setState({ loading: true })\n  //     let selectedRecord = this.state.selectedRecord || {};\n  //     let obj = {// ...inputParam.component, \n  //         label: 'samplestorageretrieval', valuemember: 'nsamplestoragetransactioncode',\n  //         filterquery:   \n  //         selectedRecord.filterquery, source: 'view_sampleretrieval', userinfo: this.props.Login.userInfo\n  //     }\n  //     let urlArray = [];\n  //     const url1 = rsapi.post(\"/samplestorageretrieval/getdynamicfilterexecutedata\", obj);\n  //     urlArray = [url1];\n  //     Axios.all(urlArray)\n  //         .then(response => {\n  //             console.log(response)\n  //             let masterData = this.state.masterData\n  //             masterData = { ...masterData, ...response[0].data }\n  //             this.setState({\n  //                 masterData: { ...masterData },\n  //                 loading: false,\n  //                 openModal: false,\n  //                 submittedselectedRecord: nflag === 2 ?\n  //                     { ...this.state.submittedselectedRecord }\n  //                     :\n  //                     { ...selectedRecord }\n  //                 ,\n  //                 isFilterPopup: false,\n  //                 selectedRecord: {}\n  //             })\n  //         })\n  //         .catch(error => {\n  //             this.setState({\n  //                 loading: false\n  //             });\n  //             if (error.response.status === 500) {\n  //                 toast.error(error.message);\n  //             }\n  //             else {\n  //                 toast.info(error.response.data.rtn);\n  //             }\n  //         })\n  // }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.openModal && nextState.isInitialRender === false && nextState.selectedRecord !== this.state.selectedRecord) {\n      return false;\n    } else if (this.state.openModal && nextState.isInitialRender === false && nextState.sheetData !== this.state.sheetData) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray1 = [{\n      \"idsName\": \"IDS_SAMPLEID\",\n      \"dataField\": \"spositionvalue\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_STORAGESTRUCTURE\",\n      \"dataField\": \"ssamplestoragelocationname\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_PATHWITHPOSITION\",\n      \"dataField\": \"scontainerpathwithposition\",\n      \"width\": \"500px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_CONTAINERID\",\n      \"dataField\": \"sboxid\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, //  { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"200px\", \"staticField\": true },\n    {\n      \"idsName\": \"IDS_QUANTITY\",\n      \"dataField\": \"nquantity\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_UNIT\",\n      \"dataField\": \"sunitname\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_TRANSACTIONSTATUS\",\n      \"dataField\": \"stransdisplaystatus\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_TRANSACTIONDATE\",\n      \"dataField\": \"dtransactiondate\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_USERROLE\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }];\n    const temparray2 = data && data.map(option => {\n      return {\n        \"idsName\": option.sfieldname,\n        \"dataField\": option.sfieldname,\n        \"width\": \"200px\"\n      };\n    });\n    const newArray = [...temparray1, ...temparray2];\n    return newArray;\n  }\n\n  // handleAdd = e => {\n  //     let file = e.newState[0].getRawFile();\n  //     /* Boilerplate to set up FileReader */\n  //     const reader = new FileReader();\n  //     const rABS = !!reader.readAsBinaryString;\n  //     reader.onload = e => {\n  //       /* Parse data */\n  //       const bstr = e.target.result;\n  //       const wb = XLSX.read(bstr, {\n  //         type: rABS ? \"binary\" : \"array\",\n  //         bookVBA: true\n  //       });\n  //       /* Get first worksheet */\n  //       const wsname = wb.SheetNames[0];\n  //       const ws = wb.Sheets[wsname];\n  //       /* Convert array of arrays */\n  //       const newData = XLSX.utils.sheet_to_json(ws); \n  //       /* Update state */\n  //       this.setState({\n  //         newData\n  //       })\n  //     };\n  //     if (rABS) {\n  //       reader.readAsBinaryString(file);\n  //     } else {\n  //       reader.readAsArrayBuffer(file);\n  //     }\n  //   };\n  render() {\n    // const addId = this.state.controlMap.has(\"Add samplestorageretrieval\") && this.state.controlMap.get(\"Add samplestorageretrieval\").ncontrolcode;\n    // const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\n    // const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\n    // const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\n    // const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\n    // const retrievedispose = this.state.controlMap.has(\"Retrieve/Dispose\") && this.state.controlMap.get(\"Retrieve/Dispose\").ncontrolcode;\n    // const retrieve = this.state.controlMap.has(\"Retrieve\") && this.state.controlMap.get(\"Retrieve\").ncontrolcode;\n    // const dispose = this.state.controlMap.has(\"Dispose\") && this.state.controlMap.get(\"Dispose\").ncontrolcode;\n    let fromDate = this.state.masterData && this.state.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate) : new Date();\n    let toDate = this.state.masterData && this.state.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate) : new Date(); //  let obj = convertDateValuetoString(this.props.Login.masterData.realfromDate, this.props.Login.masterData.realtoDate, this.props.Login.userInfo);\n\n    const extractedColumnList = this.state.selectedProjectTypeList ? this.gridfillingColumn(this.state.selectedProjectTypeList) : [];\n    let fields = {};\n\n    if (extractedColumnList.length > 0) {\n      extractedColumnList.map(field => {\n        field.hasOwnProperty(\"staticField\") ? fields = { ...fields,\n          [field.dataField]: {\n            \"label\": this.props.intl.formatMessage({\n              id: field.idsName\n            }),\n            \"type\": \"text\",\n            \"valueSources\": [\"value\", \"func\"],\n            \"mainWidgetProps\": {\n              \"valueLabel\": \"Name\",\n              \"valuePlaceholder\": this.props.intl.formatMessage({\n                id: field.idsName\n              })\n            }\n          }\n        } : fields = { ...fields,\n          ['\"' + field.dataField + '\"']: {\n            \"label\": field.dataField,\n            \"type\": \"text\",\n            \"valueSources\": [\"value\", \"func\"],\n            \"mainWidgetProps\": {\n              \"valueLabel\": \"Name\",\n              \"valuePlaceholder\": field.dataField\n            }\n          }\n        };\n      });\n    } // const filterParam = {\n    //     inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\",\n    //     fetchUrl: \"samplestorageretrieval/getActiveSampleStorageMappingById\",\n    //     fecthInputObject: { userinfo: this.props.Login.userInfo },\n    //     masterData: this.props.Login.masterData,\n    //     searchFieldList: [\"ssamplestoragelocationname\"]\n    // };\n\n\n    const breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": this.state.breadCrumbdata && this.state.breadCrumbdata.breadCrumbFrom ? this.state.breadCrumbdata.breadCrumbFrom : 'IDS_NA'\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": this.state.breadCrumbdata && this.state.breadCrumbdata.breadCrumbto ? this.state.breadCrumbdata.breadCrumbto : 'IDS_NA'\n    }, {\n      \"label\": \"IDS_PROJECTTYPE\",\n      \"value\": this.state.breadCrumbdata && this.state.breadCrumbdata.breadcrumbprojecttype ? this.state.breadCrumbdata.breadcrumbprojecttype.label : 'IDS_NA'\n    }]; //const confirmMessage = new ConfirmMessage();\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Preloader, {\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2089,\n        columnNumber: 17\n      }\n    }),\n    /*#__PURE__*/\n    //this.state.retrievalType === 1 ?\n    React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2093,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2094,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2097,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2098,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Append, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2099,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(AdvFilter, {\n      filterComponent: [{\n        \"IDS_SAMPLESTORAGERETRIEVEFILTER\": /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2103,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2104,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 6,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2105,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(DateTimePicker, {\n          name: \"fromdate\",\n          label: this.props.intl.formatMessage({\n            id: \"IDS_FROM\"\n          }),\n          className: \"form-control\",\n          placeholderText: this.props.intl.formatMessage({\n            id: \"IDS_FROM\"\n          }),\n          selected: fromDate,\n          value: fromDate,\n          dateFormat: this.props.Login.userInfo.ssitedate,\n          isClearable: false,\n          onChange: date => this.handleFilterDateChange(\"fromDate\", date),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2106,\n            columnNumber: 73\n          }\n        })), /*#__PURE__*/React.createElement(Col, {\n          md: 6,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2119,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(DateTimePicker, {\n          name: \"todate\",\n          label: this.props.intl.formatMessage({\n            id: \"IDS_TO\"\n          }),\n          className: \"form-control\",\n          placeholderText: this.props.intl.formatMessage({\n            id: \"IDS_TO\"\n          }),\n          selected: toDate,\n          value: toDate,\n          dateFormat: this.props.Login.userInfo.ssitedate,\n          isClearable: false,\n          onChange: date => this.handleFilterDateChange(\"toDate\", date),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2120,\n            columnNumber: 73\n          }\n        }))), /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2134,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2135,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n          name: \"nprojecttypecode\",\n          as: \"select\",\n          onChange: event => this.onComboChange(event, 'nprojecttypecode'),\n          formLabel: this.props.intl.formatMessage({\n            id: \"IDS_PROJECTTYPE\"\n          }),\n          isMandatory: this.state.selectedRecord[\"nneedposition\"],\n          value: this.state.selectedProjectType && this.state.selectedProjectType[\"nprojecttypecode\"] ? this.state.selectedProjectType[\"nprojecttypecode\"] || [] : [],\n          options: this.state.masterData && (this.state.masterData.projectbarcodeconfig || []),\n          optionId: \"value\",\n          optionValue: \"label\",\n          isMulti: false,\n          isDisabled: false,\n          isSearchable: false,\n          isClearable: false,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2136,\n            columnNumber: 73\n          }\n        })))))\n      }],\n      dataFor: \"tooltip_list_wrap\",\n      onFilterSubmit: this.onFilterSubmit,\n      showFilter: this.state.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      showModalBg: e => this.setState({\n        showModalBg: e\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2100,\n        columnNumber: 49\n      }\n    })))), this.state.selectedProjectTypeList && /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2169,\n        columnNumber: 41\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2169,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid // isDownloadPDFRequired={this.state.masterData && this.state.masterData.samplestorageretrieval &&\n    //     this.processWithGroups(this.state.masterData.samplestorageretrieval || [],\n    //         this.state.dataStateChange ? this.state.dataStateChange : {\n    //             take: 10,\n    //             skip: 0\n    //         }).data.length > 0 ?\n    //     true : false}\n    // isDownloadExcelRequired={this.state.masterData && this.state.masterData.samplestorageretrieval &&\n    //     this.processWithGroups(this.state.masterData.samplestorageretrieval || [],\n    //         this.state.dataStateChange ? this.state.dataStateChange : {\n    //             take: 10,\n    //             skip: 0\n    //         }).data.length > 0 ?\n    //     true : false}\n    , {\n      isCustomButton: true,\n      customButtonlist: [//     {\n      //     label: 'IDS_SEARCH',\n      //     id: {},\n      //     onClick: () => this.opensearch(),\n      //     controlname: 'faSearch'\n      // },\n      // {\n      //     label: 'IDS_BULKRETRIEVE',\n      //     id: {},\n      //     // hidden : this.state.userRoleControlRights.indexOf(retrievedispose) === -1,\n      //     onClick: () => this.openbulkretrieve(),\n      //     controlname: 'faRecycle'\n      // },\n      {\n        label: 'IDS_RETRIEVEDISPOSE',\n        id: {},\n        // hidden : this.state.userRoleControlRights.indexOf(retrievedispose) === -1,\n        onClick: () => this.openRetrieveDispose(),\n        controlname: 'faRecycle'\n      }, {\n        label: 'IDS_EXPORTTEMPLATE',\n        id: {},\n        // hidden : this.state.userRoleControlRights.indexOf(retrievedispose) === -1,\n        onClick: () => this.handleExportClick(),\n        controlname: 'faFileExcel'\n      }, {\n        label: 'IDS_BULKRETRIEVEDISPOSE',\n        id: {},\n        // hidden : this.state.userRoleControlRights.indexOf(retrievedispose) === -1,\n        onClick: () => this.bulkRetrieveDispose(),\n        controlname: 'faFileImport'\n      } // {\n      //     label: 'IDS_RETRIEVE',\n      //     hidden : this.state.userRoleControlRights.indexOf(retrieve) === -1,\n      //     onClick: () => this.openRetrieve(),\n      //     controlname: 'faRecycle'\n      // }\n      // {\n      //     label: 'IDS_DISPOSE',\n      //     id: {},\n      //     hidden : this.state.userRoleControlRights.indexOf(dispose) === -1,\n      //     onClick: () => this.openDispose(),\n      //     controlname: 'faRecycle'\n      // }\n      ],\n      isRefreshRequired: false // onGroupChange={this.handleGroupChange}\n      ,\n      primaryKeyField: 'nsamplestoragetransactioncode' //data={this.state.masterData &&\n      //  this.state.masterData.samplestorageretrieval}\n      ,\n      data: this.state.masterData && this.state.masterData.samplestorageretrieval ? this.state.masterData.samplestorageretrieval.map(item => {\n        let parsedData = {};\n        parsedData = JSON.parse(item.jsondata.value) || {};\n        return { ...item,\n          ...parsedData\n        };\n      }) : [],\n      dataResult: this.state.masterData && this.state.masterData.samplestorageretrieval ? process(this.state.masterData.samplestorageretrieval.map(item => {\n        let parsedData = {};\n        parsedData = JSON.parse(item.jsondata.value) || {};\n        return { ...item,\n          ...parsedData\n        };\n      }) || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        skip: 0,\n        take: 10\n      }) : [] // this.processWithGroups(this.state.masterData.samplestorageretrieval || [],\n      //     this.state.dataStateChange ? this.state.dataStateChange : {\n      //         take: 10,\n      //         skip: 0\n      //     })\n      ,\n      dataState: this.state.dataStateChange ? this.state.dataStateChange : {\n        skip: 0,\n        take: 10\n      },\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      userInfo: this.props.Login.userInfo,\n      deleteRecord: this.deleteRecord,\n      addRecord: () => this.openStorageMapping(),\n      pageable: true,\n      scrollable: 'scrollable' // isComponent={true}\n      ,\n      gridHeight: '600px' // isActionRequired={true}\n      ,\n      isToolBarRequired: true // actionIcons={\n      //     [{\n      //         title: this.props.intl.formatMessage({ id: \"IDS_ADDSAMPLE\" }),\n      //         controlname: \"faPenSquare\",\n      //         hidden: false,\n      //         objectName: \"add\",\n      //         onClick: (param) => this.addSample(param, 1)\n      //     }]}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2170,\n        columnNumber: 45\n      }\n    }))), this.state.export ? /*#__PURE__*/React.createElement(LocalizationProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2290,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ExcelExport, {\n      data: [],\n      collapsible: true,\n      fileName: this.props.Login.displayName && this.props.Login.displayName,\n      ref: exporter => {\n        this._excelExportHeader = exporter;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2291,\n        columnNumber: 45\n      }\n    }, [...this.state.exportFiled].map(item => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.dataField,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2299,\n        columnNumber: 53\n      }\n    })))) : \"\"))), this.state.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.state.openModal,\n      closeModal: this.closeModal,\n      hideSave: this.state.isbulkretrieve ? false : true,\n      showSubmit: false,\n      needClose: this.state.loadEsign ? false : true,\n      size: this.state.isbulkretrieve || this.state.openSpreadSheet || this.state.isFilterPopup ? 'xl' : \"\",\n      operation: \"\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.state.importRetrieveOrDispose ? \"IDS_BULKRETRIEVE\" : this.props.Login.loadEsign === true ? this.props.intl.formatMessage({\n        id: \"IDS_ESIGN\"\n      }) : this.state.isRetrieveOrDispose ? this.props.intl.formatMessage({\n        id: \"IDS_RETRIEVEDISPOSE\"\n      }) : this.state.isFilterPopup ? \"\" : this.state.isMultiSampleAdd ? this.props.intl.formatMessage({\n        id: \"IDS_STORAGESTRUCTURE\"\n      }) : this.state.editedsheetData && this.state.editedsheetData.scontainerpath,\n      onSaveClick: this.state.isFilterPopup ? this.getDynamicFilterExecuteData.bind(this) : this.onSampleMappingSaveClick,\n      esign: this.state.loadEsign // className={\"wide-popup\"}\n      ,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: // this.state.isbulkretrieve ?\n      //     <>\n      //         <Upload\n      //            batch={false}\n      //                multiple={false}\n      //                defaultFiles={[]}\n      //                withCredentials={false}\n      //                autoUpload={false}\n      //                onAdd={this.handleAdd}\n      //         />\n      //         <hr />\n      //         <Grid   \n      //   pageable={{ buttonCount: 4, pageSizes: this.props.Login.settings &&\n      //      this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting)),\n      //       previousNext: false}} \n      //         onDataStateChange={this.dataStateGridChange}\n      //         data={ process(this.state.newData || [],\n      //                         this.state.dataStateGridChange ? \n      //                         this.state.dataStateGridChange :\n      //                          { skip: 0, take: 10 })} \n      //         key={this.state.newData} \n      //      />\n      //     </>\n      //     :\n      // ALPD-5120 : Added by rukshana this.state.serverTime for Sample Retrieval and Disposal screen : E-signature's date and time not displayed in popup \n      this.state.loadEsign ?\n      /*#__PURE__*/\n      //this.props.Login.loadEsign ?\n      React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        esignReasonList: this.state.esign || [],\n        serverTime: this.state.serverTime || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2407,\n          columnNumber: 33\n        }\n      }) : this.state.isRetrieveOrDispose ? /*#__PURE__*/React.createElement(RetrieveOrDiposeSample, {\n        dynamicfields: this.state.dynamicfields,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedRecord: this.state.selectedRecord || {},\n        controlMap: this.state.controlMap,\n        childDataChange: this.childDataChange,\n        CRUDSampleStorageTransaction: this.onSampleMappingSaveClick,\n        intl: this.props.intl,\n        userInfo: this.props.Login.userInfo,\n        unitMapList: this.state.unitMapList,\n        loadEsign: this.props.Login.loadEsign,\n        isRetrieveOrDispose: this.state.isRetrieveOrDispose,\n        breadcrumbprojecttype: this.state.breadCrumbdata.breadcrumbprojecttype,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2416,\n          columnNumber: 37\n        }\n      }) : this.state.importRetrieveOrDispose ? /*#__PURE__*/React.createElement(BulkRetrieveOrDiposeSample, {\n        dynamicfields: this.state.dynamicfields,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedRecord: this.state.selectedRecord || {},\n        controlMap: this.state.controlMap,\n        childDataChange: this.childDataChange,\n        CRUDSampleStorageTransaction: this.onSampleMappingSaveClick,\n        intl: this.props.intl,\n        userInfo: this.props.Login.userInfo,\n        unitMapList: this.state.unitMapList,\n        importRetrieveOrDispose: this.state.importRetrieveOrDispose,\n        loadEsign: this.props.Login.loadEsign //isRetrieveOrDispose={this.state.isRetrieveOrDispose}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2431,\n          columnNumber: 37\n        }\n      }) : this.state.isFilterPopup ? /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n        fields: fields,\n        isSampleStorage: true,\n        queryArray: this.state.queryArray,\n        skip: this.state.kendoSkip,\n        take: this.state.kendoTake,\n        onChange: this.onChange,\n        tree: this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree,\n        gridColumns: this.slideList,\n        filterData: this.props.Login.slideResult || [],\n        handlePageChange: this.handlePageChangeFilter,\n        static: true,\n        userInfo: this.props.Login.userInfo,\n        updateStore: this.props.updateStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2446,\n          columnNumber: 41\n        }\n      }) : //Command by Neeraj\n      //ALPD-4749\n      //Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\n      // this.state.loadEsign ?//this.props.Login.loadEsign ?\n      //     <Esign operation={this.props.Login.operation}\n      //         formatMessage={this.props.intl.formatMessage}\n      //         onInputOnChange={this.onInputOnChange}\n      //         inputParam={this.props.Login.inputParam}\n      //         selectedRecord={this.state.selectedRecord || {}}\n      //     />\n      //     :\n      this.state.openSpreadSheet ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MatrixComponent, {\n        Rows: this.state.Rows || 1,\n        userInfo: this.props.Login.userInfo,\n        columns: this.state.columns || 1,\n        selectedRecord: this.state.selectedRecord.sheetData || {},\n        sheetData: this.state.sheetData || {},\n        isMultiSampleAdd: this.state.isMultiSampleAdd,\n        childSheetDataChange: this.childSheetDataChange,\n        editedsheetData: this.state.editedsheetData,\n        multipleSheetData: this.state.masterData && this.state.masterData.samplestorageretrieval && process(this.state.masterData.samplestorageretrieval || [], this.state.dataStateChange ? this.state.dataStateChange : {\n          skip: 0,\n          take: 10\n        }).data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2475,\n          columnNumber: 49\n        }\n      })) : /*#__PURE__*/React.createElement(AddSampleStorageMapping, {\n        operation: this.state.operation,\n        selectedRecordFilter: this.state.selectedRecordFilter,\n        onInputChange: e => this.onInputChange(e),\n        onComboChange: this.onComboChange,\n        selectedRecord: this.state.selectedRecord || {},\n        childDataChange: this.childDataChange,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2490,\n          columnNumber: 49\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2360,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(SampleStorageRetrieval));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/basemaster/SampleStorageRetrieval.jsx"],"names":["React","Component","connect","injectIntl","Row","Col","InputGroup","toast","constructOptionList","convertDateValuetoString","getControlMap","onSaveMandatoryValidation","rearrangeDateFormat","searchData","searchJsonData","showEsign","sortData","Lims_JSON_stringify","FormSelectSearch","DataGrid","Utils","QbUtils","SlideOutModal","callService","crudMaster","validateEsignCredential","updateStore","DEFAULT_RETURN","ListWrapper","uuid","ConfirmMessage","BreadcrumbComponent","transactionStatus","Esign","rsapi","AddSampleStorageMapping","Axios","Preloader","process","MatrixComponent","FilterQueryBuilder","AdvFilter","DateTimePicker","RetrieveOrDiposeSample","ExcelExport","ExcelExportColumn","LocalizationProvider","BulkRetrieveOrDiposeSample","SampleStorageRetrieval","constructor","props","dragOverCnt","isDragDrop","SEPARATOR","uniqueIDArr","countforTree","pointedItem","undefined","getitemPath","openModal","updateInfo","typeName","data","selectedRecord","loadTreeProperties","treeData","text","expanded","editable","root","id","operation","closeModal","loadEsign","state","Login","setState","selectedId","getprojectbarcodeconfig","isInitialRender","isFilterPopup","isRetrieveOrDispose","importRetrieveOrDispose","onInputChange","event","target","type","name","checked","value","onSaveClick","saveType","formRef","onSaveProperties","openSpreadSheet","CRUDSampleStorageTransaction","editedsheetData","nsamplestoragemappingcode","isMultiSampleAdd","Object","keys","sheetData","map","join","toString","nsamplestoragelocationcode","JSON","stringify","sheetUpdate","userinfo","userInfo","onSaveSampleStorageTransaction","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","e","skip","take","handleDetailPageChange","openFilter","boolean","showFilter","closeFilter","reloadData","onFilterSubmit","onEditSampleStorageLocation","selectedSampleStorageVersion","editId","handleSearch","searchedTreeData","searchRef","current","isOnlyDraft","masterData","sampleStorageVersion","length","editSampleStorageLocation","openStorageMapping","addId","addSampleStorageMapping","deletesamplestoragemapping","param","selectedSampleStorageLocation","addMultipleSample","loading","opensearch","submittedselectedRecord","openbulkretrieve","isbulkretrieve","handleExportClick","exportFiled","export","bulkRetrieveDispose","openRetrieveDispose","urlArray","url1","post","all","then","response","unitMap","unit","get","unitMapList","dynamicfields","selectedBarcodeValue","catch","error","status","message","warn","addSample","nflag","samplestorageretrieval","item","parse","Rows","nrow","columns","ncolumn","onComboChange","comboData","fieldName","selectedProjectType","selectedRecordFilter","getSampleStorageLocation","nstoragecategorycode","getContainerStructure","ncontainertypecode","containerpathCodeArray","inputParam","nsamplestoragetransactioncode","parseInt","nproductcode","ndirectionmastercode","ssamplestoragemappingname","nsamplestoragecontainerpathcode","containerpathsize","nneedposition","ncontainerstructurecode","nquantity","userRoleControlRights","nformcode","ncontrolcode","screenData","getsamplestoragetransaction","childDataChange","childSheetDataChange","getActiveSampleStorageMappingById","filterColumnData","filterValue","filterParam","primaryKeyValue","searchedData","inputListName","primaryKeyField","isjsondata","searchFieldList","fetchUrl","fecthInputObject","sortField","sortOrder","intl","formatMessage","selectedObject","forEach","unchangeList","indexOf","modalName","onNumericInputChange","field","constantvalue","isNaN","validateRetrievOrDispose","saliquotsampleid","info","nunitcode","inputData","obj","fromDate","toDate","isFileupload","formData","FormData","scomments","spositionvalue","sunitname","isRetrieve","nneedaliquot","breadCrumbdata","breadcrumbprojecttype","append","Retrieved","Disposed","methodUrl","classUrl","statesaveType","currentTimeUrl","reasonUrl","reasonMap","reasonList","esign","serverTime","crudMasterSampleStorageRetrieval","getprojectbarcodeconfigForSubmit","bulkeretrieval","nprojecttypecode","spositionvaluesize","newData","onSampleMappingSaveClick","mandatoryFields","dataStateChange","dataState","dataStateGridChange","approveSampleStorageMapping","inputParamData","fetchRecord","url2","url3","storageMappingMap","storageMappingMapList","containerTypeMap","containerTypeList","directionmasterMap","directionmasterList","containerstructureMap","containerstructureList","productMap","productList","editedObject","editsampleStorageMapping","unshift","label","scontainerpath","sdirection","sproductname","scontainertype","scontainerstructurename","directionmasterOptions","storageMappingMapOptions","productOptions","containerTypeOptions","containerStructureOptions","retrievalType","onInputOnChange","handlePageChangeFilter","kendoSkip","kendoTake","onChange","immutableTree","config","sqlFormat","tree","processWithGroups","aggregates","aggregate","groups","group","newDataState","handleFilterDateChange","dateName","dateValue","validateEsign","sreason","nreasoncode","spredefinedreason","password","action","sformname","smodulename","toLowerCase","defaultInput","requestUrl","toggleAction","treeDataView","toggleActionView","panes","size","scrollable","controlMap","Map","detailSkip","detailTake","settings","selectedItem","esignreason","fields","createRef","dragClue","confirmMessage","getDerivedStateFromProps","masterStatus","componentDidUpdate","previousProps","previousState","filterData","storageCategoryOptions","storageLocationOptions","sampleStorageVersionOptions","selectedProjectTypeList","bool","sampleStorageLocation","queryBuilderFreezer","push","ssamplestoragelocationname","values","filterStorageCategory","filterStorageCategorylist","selectedStorageCategory","filter","sampleStorageLocationList","sampleStorageVersionList","nsamplestorageversioncode","sprojecttypename","projectbarcodeconfig","generateBreadCrumData","_excelExportHeader","save","componentDidMount","parentHeight","height","clientHeight","firstPane","breadCrumbData","selectedStorageCategoryName","containerStructure","isFilterSubmit","containerStructureList","getSelectedBarcodeData","keyCode","temparray2","option","sfieldname","getDynamicFilterExecuteData","filterquery","valuemember","source","displayQuery","queryString","rtn","shouldComponentUpdate","nextProps","nextState","gridfillingColumn","temparray1","newArray","render","Date","extractedColumnList","hasOwnProperty","dataField","idsName","breadCrumbFrom","breadCrumbto","ssitedate","date","showModalBg","onClick","controlname","parsedData","jsondata","deleteRecord","displayName","exporter","bind","queryArray","slideList","slideResult","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col,  InputGroup } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { constructOptionList, convertDateValuetoString, getControlMap, onSaveMandatoryValidation,\r\n     rearrangeDateFormat, searchData, searchJsonData, showEsign, sortData,Lims_JSON_stringify } from '../../components/CommonScript';\r\n//import SortableTree from 'react-sortable-tree'; \r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport {\r\n \r\n    Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { uuid } from \"uuidv4\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport Esign from '../audittrail/Esign';\r\nimport rsapi from '../../rsapi';\r\nimport AddSampleStorageMapping from './AddSampleStorageMapping';\r\nimport Axios from 'axios';\r\nimport Preloader from '../../components/preloader/preloader.component';\r\nimport { process } from '@progress/kendo-data-query';\r\n//import Spreadsheet from '../../components/Spreadsheet/Spreadsheet';\r\nimport MatrixComponent from '../../components/MatrixComponent';\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport AdvFilter from '../../components/AdvFilter';\r\nimport DateTimePicker from \"../../components/date-time-picker/date-time-picker.component\";\r\nimport RetrieveOrDiposeSample from '../storagemanagement/RetrieveOrDiposeSample';\r\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport BulkRetrieveOrDiposeSample from '../storagemanagement/BulkRetrieveOrDiposeSample';\r\n// import * as XLSX from 'xlsx';\r\n// import { Upload } from '@progress/kendo-react-upload';\r\n\r\nclass SampleStorageRetrieval extends Component {\r\n    dragOverCnt = 0;\r\n    isDragDrop = false;\r\n    SEPARATOR = '_';\r\n    uniqueIDArr = [];\r\n    countforTree = 0;\r\n    pointedItem = undefined\r\n    getitemPath = {};\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            retrievalType: 1,\r\n            // extractedColumnList: [   \r\n            //     { \"idsName\": \"IDS_STORAGESTRUCTURE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\" },\r\n            //     { \"idsName\": \"IDS_SAMPLESTORAGEPATH\", \"dataField\": \"scontainerpath\", \"width\": \"450px\" },\r\n            //     { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"100px\" },\r\n            //     { \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\", \"width\": \"100px\" },\r\n            //     //{ \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"width\": \"100px\" },\r\n            //     //{ \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"width\": \"100px\" },\r\n            //     { \"idsName\": \"IDS_PARTICIPANTS\", \"dataField\": \"sparticipantid\", \"width\": \"100px\" },\r\n            //     //{ \"idsName\": \"IDS_VISITNUMBER\", \"dataField\": \"svisitnumber\", \"width\": \"100px\" },\r\n            //     { \"dataField\": \"svisitnumbershortcode\", \"idsName\": \"IDS_VISITNUMBERCODE\", \"width\": \"100px\" }, \r\n            //     { \"dataField\": \"sprojectshortcode\", \"idsName\": \"IDS_PROJECTTYPECODE\" , \"width\": \"100px\"} ,\r\n            //     { \"dataField\": \"sproductshortcode\", \"idsName\": \"IDS_PRODUCTCODE\", \"width\": \"100px\" } ,\r\n            //     { \"dataField\": \"ssampledonorshortcode\", \"idsName\": \"IDS_SAMPLEDONORCODE\", \"width\": \"100px\" }  ,\r\n            //     { \"dataField\": \"scollectiontubetypeshortcode\", \"idsName\": \"IDS_COLLECTIONTUBETYPECODE\", \"width\": \"100px\" }\r\n            // ],\r\n            sheetData: {},\r\n            selectedRecordFilter: {},\r\n           // treeData: [{ title: 'Chicken', children: [{ title: 'Egg' }] }],\r\n            toggleAction: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            treeData: [\r\n                {\r\n                    //  text: \"root\",\r\n                    text: this.props.intl.formatMessage({ id: \"IDS_ROOT\" }),\r\n                    expanded: true,\r\n                    editable: true,\r\n                    root: true,\r\n                    id: uuid(),\r\n                }],\r\n            panes: [{\r\n                size: '50%',\r\n                scrollable: false\r\n            }],\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            selectedItem: undefined,\r\n            loading: false,\r\n            esignreason: this.props.esignreason,\r\n            dataStateGridChange: {\r\n                take: 10,\r\n                skip: 0\r\n            },\r\n            dataStateChange: {\r\n                take: 10,\r\n                skip: 0,\r\n                // group: [\r\n                //     {\r\n                //         field: \"ssamplestoragelocationname\",\r\n                //     },\r\n                // ],\r\n            }\r\n        };\r\n        let fields = {};\r\n        // if (this.state.extractedColumnList) {\r\n        //     // let newArr=[...[  { \"dataField\": \"svisitnumbershortcode\", \"idsName\": \"IDS_VISITNUMBERCODE\", \"width\": \"100px\" }, \r\n        //     // { \"dataField\": \"sprojectshortcode\", \"idsName\": \"IDS_PROJECTTYPECODE\" , \"width\": \"100px\"} ,\r\n        //     // { \"dataField\": \"sproductshortcode\", \"idsName\": \"IDS_PRODUCTCODE\", \"width\": \"100px\" } ,\r\n        //     // { \"dataField\": \"ssampledonorshortcode\", \"idsName\": \"IDS_SAMPLEDONORCODE\", \"width\": \"100px\" }  ,\r\n        //     // { \"dataField\": \"scollectiontubetypeshortcode\", \"idsName\": \"IDS_COLLECTIONTUBETYPECODE\", \"width\": \"100px\" }]\r\n        //     // ,...this.state.extractedColumnList]\r\n        //     this.state.extractedColumnList.map(field => {\r\n        //         if (field.dataField !== 'ssamplestoragelocationname' && field.dataField !== 'sproductname'\r\n        //             && field.dataField !== 'sprojecttypename' && field.dataField !== 'svisitnumber') {\r\n        //             fields = {\r\n        //                 ...fields,\r\n        //                 [field.dataField]: {\r\n        //                     \"label\":\r\n        //                         this.props.intl.formatMessage({\r\n        //                             id: field.idsName,\r\n        //                         })\r\n        //                     ,\r\n        //                     \"type\": field.dataField === 'navailablespace' ? \"number\" : \"text\",\r\n        //                     \"valueSources\": [\"value\", \"func\"],\r\n\r\n        //                     \"mainWidgetProps\": {\r\n        //                         \"valueLabel\": \"Name\",\r\n        //                         \"valuePlaceholder\": this.props.intl.formatMessage({\r\n        //                             id: field.idsName\r\n        //                         })\r\n        //                     }\r\n        //                 }\r\n        //             }\r\n        //         }\r\n        //     });\r\n        // }\r\n        this.state = { ...this.state, 'fields': fields }\r\n        this.searchRef = React.createRef();\r\n        this.dragClue = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        let { filterData, storageCategoryOptions,\r\n            selectedRecord, controlMap,\r\n            userRoleControlRights, storageLocationOptions,\r\n            sampleStorageVersionOptions, masterData, selectedRecordFilter,\r\n            fields, selectedProjectType, selectedProjectTypeList,\r\n            breadCrumbdata, openModal, isInitialRender, dynamicfields//,importRetrieveOrDispose,isRetrieveOrDispose \r\n        } = this.state\r\n        let bool = false;\r\n        ///////////////////////////////\r\n      //  if(this.props.Login.importRetrieveOrDispose){\r\n        if (this.props.Login.openModal !== previousProps.Login.openModal) {\r\n            bool = true;\r\n            openModal = this.props.Login.openModal;\r\n        }\r\n    //}\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord || {};\r\n            bool = true;\r\n            isInitialRender = true;\r\n            dynamicfields = [];\r\n            // selectedRecord['spositionvalue'] = \"\";\r\n            // selectedRecord['scomments'] = \"\"; \r\n            selectedRecord['nprojecttypecode'] = previousProps.Login.selectedRecord.nprojecttypecode;\r\n\r\n        }\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nsamplestoragelocationcode, \"title\": item.ssamplestoragelocationname })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'nsamplestoragelocationcode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_STORAGESTRUCTURENAME\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        // if (this.props.Login.masterData.sampleType !== previousProps.Login.masterData.sampleType) {\r\n        //     let queryBuilderFreezer = [];\r\n        //     bool = true;\r\n        //     this.props.Login.masterData.sampleType && this.props.Login.masterData.sampleType.map(\r\n        //         (item) => queryBuilderFreezer.push({ \"value\": item.nproductcode, \"title\": item.sproductname })\r\n        //     )\r\n        //     fields = {\r\n        //         ...fields,\r\n        //         'nproductcode': {\r\n        //             \"label\": this.props.intl.formatMessage({\r\n        //                 id: \"IDS_PRODUCT\",\r\n        //             }),\r\n        //             \"type\": \"select\",\r\n        //             \"valueSources\": [\"value\"],\r\n        //             \"fieldSettings\": {\r\n        //                 \"listValues\": queryBuilderFreezer\r\n        //             }\r\n        //         }\r\n        //     }\r\n\r\n        // }\r\n        // if (this.props.Login.masterData.ProjectType !== previousProps.Login.masterData.ProjectType) {\r\n        //     let queryBuilderFreezer = [];\r\n        //     bool = true;\r\n        //     this.props.Login.masterData.ProjectType && this.props.Login.masterData.ProjectType.map(\r\n        //         (item) => queryBuilderFreezer.push({ \"value\": item.nprojecttypecode, \"title\": item.sprojecttypename })\r\n        //     )\r\n        //     fields = {\r\n        //         ...fields,\r\n        //         'nprojecttypecode': {\r\n        //             \"label\": this.props.intl.formatMessage({\r\n        //                 id: \"IDS_PROJECTTYPE\",\r\n        //             }),\r\n        //             \"type\": \"select\",\r\n        //             \"valueSources\": [\"value\"],\r\n        //             \"fieldSettings\": {\r\n        //                 \"listValues\": queryBuilderFreezer\r\n        //             }\r\n        //         }\r\n        //     }\r\n\r\n        // } if (this.props.Login.masterData.VisitNumber !== previousProps.Login.masterData.VisitNumber) {\r\n        //     let queryBuilderFreezer = [];\r\n        //     bool = true;\r\n        //     this.props.Login.masterData.VisitNumber && this.props.Login.masterData.VisitNumber.map(\r\n        //         (item) => queryBuilderFreezer.push({ \"value\": item.nvisitnumbercode, \"title\": item.svisitnumber })\r\n        //     )\r\n        //     fields = {\r\n        //         ...fields,\r\n        //         'nvisitnumbercode': {\r\n        //             \"label\": this.props.intl.formatMessage({\r\n        //                 id: \"IDS_VISITNUMBER\",\r\n        //             }),\r\n        //             \"type\": \"select\",\r\n        //             \"valueSources\": [\"value\"],\r\n        //             \"fieldSettings\": {\r\n        //                 \"listValues\": queryBuilderFreezer\r\n        //             }\r\n        //         }\r\n        //     }\r\n\r\n        // }\r\n        ///////////////////////////////\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            bool = true;\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            bool = true;\r\n            const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                \"sstoragecategoryname\", undefined, undefined, undefined);\r\n            storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedStorageCategory) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nstoragecategorycode: storageCategoryOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\r\n            bool = true;\r\n            const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n            storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageLocation) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\r\n            bool = true;\r\n            const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                \"nversionno\", undefined, undefined, undefined);\r\n            sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            masterData = this.props.Login.masterData;\r\n            if (selectedRecord[\"nprojecttypecode\"] === undefined) {\r\n                selectedRecord[\"nprojecttypecode\"] = {\r\n                    label: this.props.Login.masterData.selectedProjectType &&\r\n                        this.props.Login.masterData.selectedProjectType.sprojecttypename ?\r\n                        this.props.Login.masterData.selectedProjectType.sprojecttypename : 'NA'\r\n                    , value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.nprojecttypecode ? this.props.Login.masterData.selectedProjectType.nprojecttypecode:-1\r\n                };\r\n\r\n                // selectedRecord[\"nprojecttypecode\"] = {\r\n                //     label: this.state.selectedProjectType.nprojecttypecode.item.sprojecttypename &&\r\n                //     this.state.selectedProjectType.nprojecttypecode.item.sprojecttypename ?\r\n                //    this.state.selectedProjectType.nprojecttypecode.item.sprojecttypename: 'NA'\r\n                //     , value: this.state.selectedProjectType && this.state.selectedProjectType.nprojecttypecode.item.nprojecttypecode\r\n                // }; \r\n\r\n                selectedProjectType = {\r\n                    nprojecttypecode: {\r\n                        label: this.props.Login.masterData.selectedProjectType &&\r\n                            this.props.Login.masterData.selectedProjectType.sprojecttypename ?\r\n                            this.props.Login.masterData.selectedProjectType.sprojecttypename : 'NA'\r\n                        , value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.nprojecttypecode ? this.props.Login.masterData.selectedProjectType.nprojecttypecode:-1\r\n                    }\r\n                };\r\n                breadCrumbdata = {\r\n                    ...convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                        this.props.Login.masterData.toDate, this.props.Login.userInfo),\r\n                    breadcrumbprojecttype: {\r\n                        label: this.props.Login.masterData.selectedProjectType &&\r\n                            this.props.Login.masterData.selectedProjectType.sprojecttypename ?\r\n                            this.props.Login.masterData.selectedProjectType.sprojecttypename : 'NA',\r\n                        value: this.props.Login.masterData.selectedProjectType &&\r\n                            this.props.Login.masterData.selectedProjectType.nprojecttypecode ?\r\n                            this.props.Login.masterData.selectedProjectType.nprojecttypecode : -1\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.props.Login.masterData.projectbarcodeconfig !== previousProps.Login.masterData.projectbarcodeconfig) {\r\n                selectedProjectTypeList = this.props.Login.masterData.selectedProjectTypeList;\r\n                const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.projectbarcodeconfig || [], \"nprojecttypecode\",\r\n                    \"sprojecttypename\", undefined, undefined, undefined);\r\n                masterData['projectbarcodeconfig'] = filterStorageCategorylist.get(\"OptionList\");\r\n            }\r\n\r\n            filterData = this.generateBreadCrumData(this.props.Login.masterData);\r\n\r\n        }\r\n        if (this.state.export) {\r\n            this._excelExportHeader.save()\r\n            this.setState({ export: false })\r\n        }\r\n    //     if(this.props.Login.importRetrieveOrDispose!== previousProps.Login.importRetrieveOrDispose){\r\n    //         //bool = true;\r\n    //            // importRetrieveOrDispose=this.props.Login.importRetrieveOrDispose\r\n    //             //openModal = this.props.Login.importRetrieveOrDispose?this.props.Login.openModal:true;\r\n    //     }\r\n    //     if(this.props.Login.isRetrieveOrDispose!== previousProps.Login.isRetrieveOrDispose){\r\n    //         // bool = true;\r\n    //      // isRetrieveOrDispose=this.props.Login.importRetrieveOrDispose?this.props.Login.isRetrieveOrDispose :true;\r\n    //  }\r\n        /*    if (this.state.masterData !== previousState.masterData) {\r\n                bool = true;\r\n    \r\n                selectedRecord[\"nprojecttypecode\"] = {\r\n                    label: this.state.masterData.selectedProjectType &&\r\n                        this.state.masterData.selectedProjectType.sprojecttypename ?\r\n                        this.state.masterData.selectedProjectType.sprojecttypename : 'NA'\r\n                    , value: this.state.masterData.selectedProjectType && this.state.masterData.selectedProjectType.nprojecttypecode\r\n                };\r\n                selectedProjectType = {\r\n                    nprojecttypecode: {\r\n                        label: this.state.masterData.selectedProjectType &&\r\n                        this.state.masterData.selectedProjectType.sprojecttypename ?\r\n                        this.state.masterData.selectedProjectType.sprojecttypename : 'NA'\r\n                        , value: this.state.masterData.selectedProjectType && this.state.masterData.selectedProjectType.nprojecttypecode\r\n                    }\r\n                };\r\n             \r\n    \r\n                //this.state.masterData.projectbarcodeconfig=previousState.masterData.projectbarcodeconfig;\r\n    \r\n                filterData = this.generateBreadCrumData(this.state.masterData);\r\n    \r\n            }*/\r\n\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                storageCategoryOptions, filterData,\r\n                selectedRecord, controlMap,\r\n                userRoleControlRights, storageLocationOptions,\r\n                sampleStorageVersionOptions, masterData, selectedRecordFilter, fields, selectedProjectType, selectedProjectTypeList,\r\n                breadCrumbdata, isInitialRender, openModal, dynamicfields//,importRetrieveOrDispose,isRetrieveOrDispose\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    openModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true, selectedRecord: {}, loadTreeProperties: false,\r\n                treeData: [\r\n                    {\r\n                        text: \"root\",\r\n                        expanded: true,\r\n                        editable: true,\r\n                        root: true,\r\n                        id: uuid(),\r\n                    },\r\n                ], operation: \"create\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    // closeModalImport=()=>{\r\n    //     let loadEsign = this.props.Login.loadEsign;\r\n    //     let openModal = this.props.Login.openModal;\r\n    //     let isRetrieveOrDispose = this.props.Login.isRetrieveOrDispose;\r\n    //     let importRetrieveOrDispose = this.props.Login.importRetrieveOrDispose;\r\n    //     let selectedId = this.props.Login.selectedId;\r\n    //     let selectedRecord = this.state.selectedRecord;\r\n    //     if (this.props.Login.loadEsign) {\r\n    //         openModal = true;\r\n    //         loadEsign = false;\r\n    //         isRetrieveOrDispose=true;\r\n    //         importRetrieveOrDispose=true;\r\n    //         selectedRecord['esignpassword'] = \"\"\r\n    //         selectedRecord['esigncomments'] = \"\"\r\n    //         selectedRecord['esignreason'] = \"\"\r\n\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: {\r\n    //                 openModal, importRetrieveOrDispose  ,isRetrieveOrDispose,loadEsign,selectedRecord, selectedId: null \r\n    //             }\r\n    //         }\r\n    //         this.props.updateStore(updateInfo);\r\n    //     }else{\r\n    //         selectedRecord={};\r\n    //         this.setState({\r\n    //             selectedRecord,\r\n    //             openModal: false, isInitialRender: true\r\n    //             , isFilterPopup: false, isRetrieveOrDispose: false,importRetrieveOrDispose:false\r\n    //         })\r\n    //     }\r\n       \r\n    // }\r\n    closeModal = () => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         openModal: false, selectedRecord: {}\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n\t\t//ALPD-4749\r\n\t\t//Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\r\n        let loadEsign = this.state.loadEsign;\r\n        let openModal = this.state.openModal;\r\n        //let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        if (this.state.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                //selectedId = null;\r\n            }\r\n            else {\r\n                //this.state.isRetrieveOrDispose=true;\r\n                openModal = true;\r\n                loadEsign = false;\r\n                //isRetrieveOrDispose=false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n\t\t\t\t//ALPD-4749\r\n\t\t\t\t//Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\r\n                this.setState({selectedRecord, openModal, loadEsign, selectedId: null})\r\n                // const updateInfo = {\r\n                //     typeName: DEFAULT_RETURN,\r\n                //     data: { openModal, loadEsign, selectedRecord, selectedId: null ,importRetrieveOrDispose:false}\r\n                // }\r\n                // this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            ///selectedId = null;\r\n            //selectedRecord = {};\r\n            //this.state.isRetrieveOrDispose= false;\r\n\r\n            this.getprojectbarcodeconfig(true);\r\n            this.setState({\r\n                selectedRecord,\r\n                openModal: false, isInitialRender: true\r\n                , isFilterPopup: false, isRetrieveOrDispose: false,importRetrieveOrDispose:false\r\n            })\r\n        }\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        // this.getsamplestoragetransaction({}, this.props.Login.userInfo);\r\n        // if (!this.state.isFilterPopup) {\r\n        //     this.getDynamicFilterExecuteData()\r\n\r\n        // }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.loadTreeProperties === true) {\r\n            this.onSaveProperties(saveType, formRef);\r\n        } else if (this.state.openSpreadSheet) {\r\n            this.CRUDSampleStorageTransaction({\r\n                ...this.state.editedsheetData,\r\n                nsamplestoragemappingcode: this.state.isMultiSampleAdd ?\r\n                    Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\")\r\n                    : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\r\n                nsamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\r\n                sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\r\n                sheetUpdate: true,\r\n                userinfo: this.props.Login.userInfo,\r\n                isMultiSampleAdd: this.state.isMultiSampleAdd\r\n            }, 'create');\r\n        } else {\r\n            this.onSaveSampleStorageTransaction(saveType, formRef);\r\n        }\r\n    };\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    generateBreadCrumData(obj) {\r\n        const breadCrumbData = [];\r\n        if (this.state.masterData && this.state.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": obj.selectedStorageCategoryName &&\r\n                        obj.selectedStorageCategoryName !== null ?\r\n                        obj.selectedStorageCategoryName : \"NA\"\r\n\r\n                }\r\n                // ,\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\r\n                //     \"value\": obj.selectedSampleStorageLocation &&\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\r\n                // },\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\r\n                //     \"value\": obj.selectedSampleStorageVersion &&\r\n                //         obj.selectedSampleStorageVersion.nversionno !== null ?\r\n                //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\r\n                // }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        // let showFilter = !this.props.Login.showFilter\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { showFilter }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n\r\n        let boolean = !this.state.showFilter\r\n        this.setState({ showFilter: boolean })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { showFilter: false }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({ showFilter: false })\r\n    }\r\n    reloadData = () => {\r\n        this.onFilterSubmit();\r\n    }\r\n    onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n        let isOnlyDraft = false;\r\n        if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\r\n            isOnlyDraft = true;\r\n        }\r\n        this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\r\n    }\r\n    openStorageMapping = (addId) => {\r\n        this.addSampleStorageMapping({ userInfo: this.props.Login.userInfo, addId });\r\n    }\r\n    deletesamplestoragemapping = (param) => {\r\n        this.CRUDSampleStorageTransaction({\r\n            'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\r\n            'userinfo': this.props.Login.userInfo\r\n        }, 'delete');\r\n    }\r\n    addMultipleSample = (param) => {\r\n        this.setState({\r\n            //sheetData: JSON.parse(response[0].data.sheetData),\r\n            openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n            loading: false\r\n        })\r\n    }\r\n    opensearch = () => {\r\n        this.setState({\r\n            openModal: true, isFilterPopup: true, selectedRecord: { ...this.state.submittedselectedRecord } ||\r\n                { ...this.state.selectedRecord }\r\n        })\r\n    }\r\n    openbulkretrieve = () => {\r\n        this.setState({\r\n            isbulkretrieve: true,\r\n            openModal: true,\r\n            loading: false\r\n        });\r\n    }\r\n    handleExportClick = () => {\r\n        let exportFiled = [{ \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\", \"width\": \"200px\", \"staticField\": true }];\r\n        this.setState({ exportFiled, export: true });\r\n    }\r\n    bulkRetrieveDispose = () => {\r\n        this.setState({\r\n            importRetrieveOrDispose: true,\r\n            openModal: true,\r\n            loading: false,\r\n            isRetrieveOrDispose: false,\r\n            selectedRecord: {},\r\n        });\r\n    //     const updateInfo = {\r\n    //         typeName: DEFAULT_RETURN,\r\n    //         data: {\r\n    //             openModal: true, importRetrieveOrDispose: true,\r\n    //                   isRetrieveOrDispose: true,\r\n    //     }\r\n    // }\r\n    //     this.props.updateStore(updateInfo);\r\n    }\r\n    openRetrieveDispose = () => {\r\n        this.setState({ loading: true, importRetrieveOrDispose:false})\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"unit/getUnit\", { userinfo: this.props.Login.userInfo });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const unitMap = constructOptionList(response[0].data || [], \"nunitcode\", \"sunitname\", false, false, true);\r\n                const unit = unitMap.get(\"OptionList\");\r\n                this.setState({\r\n                    unitMapList: unit,\r\n                    openModal: true, isRetrieveOrDispose: true,importRetrieveOrDispose:false,\r\n                    dynamicfields: [],\r\n                    selectedBarcodeValue: {},\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n\r\n\r\n    addSample = (param, nflag) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragemappingSheetData\",\r\n            {\r\n                isMultiSampleAdd: (nflag === 2) ? true : false,\r\n                nsamplestoragemappingcode:\r\n                    (nflag === 2) ? this.state.masterData.samplestorageretrieval.map(item => item.nsamplestoragemappingcode).join(\",\")\r\n                        : param.nsamplestoragemappingcode.toString()\r\n            });\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (nflag === 2) {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        openModal: true, isMultiSampleAdd: false, openSpreadSheet: true,\r\n                        editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false\r\n                    })\r\n                }\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const selectedProjectType = this.state.selectedProjectType || {};\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n\r\n        if (fieldName === 'nstoragecategorycode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: comboData.value\r\n            }, fieldName, comboData);\r\n        } else if (fieldName === 'ncontainertypecode') {\r\n            return this.getContainerStructure({\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontainertypecode: comboData.value\r\n            }, fieldName, comboData);\r\n\r\n        }\r\n        else if (fieldName === 'nprojecttypecode') {\r\n            ///return this.getprojectbarcodeconfig(comboData);\r\n           selectedProjectType[fieldName] = comboData;\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else if (fieldName === 'ncontainerstructurecode') {\r\n            selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\r\n            selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\r\n        } else if (fieldName === 'nsamplestoragelocationcode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value\r\n\r\n            }, fieldName, comboData);\r\n        }\r\n        if (fieldName === 'nsamplestorageversioncode') {\r\n            selectedRecordFilter[fieldName] = comboData;\r\n            this.setState({ selectedRecordFilter });\r\n\r\n        } else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord, selectedRecordFilter });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onSaveSampleStorageTransaction = (saveType) => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let containerpathCodeArray = [];\r\n        if (this.state.operation === 'create') {\r\n            containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\r\n        }\r\n        const inputParam =\r\n        {\r\n            nsamplestoragetransactioncode: selectedRecord['nsamplestoragetransactioncode'] ?\r\n                parseInt(selectedRecord['nsamplestoragetransactioncode']) : 0,\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ?\r\n                parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\r\n            ncontainertypecode: -1,\r\n            nproductcode: selectedRecord['nproductcode'].value,\r\n            ndirectionmastercode: -1,\r\n            ssamplestoragemappingname: \"-\",\r\n            nsamplestoragecontainerpathcode: this.state.operation === 'create' ?\r\n                JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\r\n            containerpathsize: containerpathCodeArray.length,\r\n            nneedposition: 4,\r\n            ncontainerstructurecode: -1, nquantity: selectedRecord['nquantity'] ?\r\n                parseInt(selectedRecord['nquantity']) : 1,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n           \r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n\r\n        }\r\n        else {\r\n            this.CRUDSampleStorageTransaction(inputParam, this.state.operation);\r\n        }\r\n    }\r\n    getsamplestoragetransaction = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragetransaction\", {\r\n            userinfo: this.props.Login.userInfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    },\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    childDataChange = (selectedRecord) => {\r\n        this.setState({\r\n            selectedRecord: {\r\n                ...selectedRecord\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    childSheetDataChange = (sheetData) => {\r\n\r\n        this.setState({\r\n            // selectedRecord: {\r\n            //     ...this.state.selectedRecord,\r\n            //     sheetData: {\r\n            //         ...this.state.selectedRecord.sheetData,\r\n            //         ...sheetData\r\n            //     }\r\n            // },\r\n            sheetData: {\r\n                ...sheetData\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    // Actions start\r\n    getActiveSampleStorageMappingById = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/getActiveSampleStorageMappingById\", {\r\n            nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\r\n            userinfo: userinfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    }//,\r\n                    // selectedRecord: {\r\n                    //     ...this.state.selectedRecord\r\n                    //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\r\n                    // }\r\n                    ,\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n    filterColumnData = (filterValue, filterParam) => {\r\n        let masterData = filterParam.masterData;\r\n        let primaryKeyValue = 0;\r\n        let searchedData = undefined;\r\n        if (filterValue === \"\") {\r\n            if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n                primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n        else {\r\n            if (filterParam.isjsondata) {\r\n                searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n            }\r\n            else {\r\n                searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n\r\n            }\r\n            if (searchedData.length > 0) {\r\n                primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n\r\n        if (primaryKeyValue !== 0) {\r\n            this.setState({ loading: true });\r\n            return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n                .then(response => {\r\n                    masterData[\"searchedData\"] = searchedData;\r\n                    masterData = { ...masterData, ...response.data };\r\n\r\n                    if (filterParam.sortField) {\r\n                        sortData(masterData, filterParam.sortOrder, filterParam.sortField);\r\n                    }\r\n                    else {\r\n                        sortData(masterData);\r\n                    }\r\n                    this.setState({ masterData, loading: false, skip: 0, take: 10, selectedId: null });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ loading: false });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            masterData[filterParam.selectedObject] = undefined;\r\n            masterData[\"searchedData\"] = [];\r\n            Object.keys(masterData).forEach(item => {\r\n                if (item !== filterParam.inputListName && item !== filterParam.selectedObject\r\n                    && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1)\r\n                    masterData[item] = [];\r\n            })\r\n            this.setState({\r\n                masterData, operation: null, modalName: undefined,\r\n                loading: false\r\n            });\r\n\r\n        }\r\n    }\r\n    onNumericInputChange = (value, field) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let constantvalue = value.target.value;\r\n        if (!isNaN(constantvalue)) {\r\n            selectedRecord[field] = constantvalue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    validateRetrievOrDispose = () => {\r\n        if ((this.state.selectedRecord.saliquotsampleid && this.state.selectedRecord.saliquotsampleid === \"\") ||\r\n            this.state.selectedRecord.saliquotsampleid === undefined) {\r\n            toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${\"IDS_NEWSAMPLEID\"}`);\r\n        }\r\n        else if ((this.state.selectedRecord.nquantity && this.state.selectedRecord.nquantity === \"\") ||\r\n            (this.state.selectedRecord.saliquotsampleid === undefined)) {\r\n            return toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${\"IDS_QUANTITY\"}`);\r\n        }\r\n        else if ((this.state.selectedRecord.nunitcode && Object.keys(this.state.selectedRecord.nunitcode).length <= 0) ||\r\n            (this.state.selectedRecord.nunitcode === undefined)) {\r\n            return toast.info(`${this.props.intl.formatMessage({ id: \"IDS_SELECT\" })} ${\"IDS_UNIT\"}`);\r\n        }\r\n    }\r\n\r\n    CRUDSampleStorageTransaction = (inputParam, operation) => {\r\n       \r\n        let inputData = [];\r\n        let obj = convertDateValuetoString(this.state.masterData.fromDate,\r\n            this.state.masterData.toDate, this.props.Login.userInfo);\r\n       let selectedRecord = this.state.selectedRecord;\r\n       let isFileupload = inputParam.importRetrieveOrDispose?true:false;\r\n       const formData = new FormData();\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"scomments\"] = inputParam.scomments;\r\n        inputData[\"spositionvalue\"] = inputParam.spositionvalue\r\n        inputData[\"nquantity\"] = parseInt(inputParam.nquantity)\r\n        inputData[\"sunitname\"] = inputParam.sunitname\r\n        inputData[\"saliquotsampleid\"] = inputParam.saliquotsampleid\r\n        inputData[\"isRetrieve\"] = inputParam.isRetrieve;\r\n        inputData[\"nneedaliquot\"] = inputParam.nneedaliquot;\r\n        inputData[\"nprojecttypecode\"] = this.state.breadCrumbdata.breadcrumbprojecttype.value||-1;\r\n\r\n        if(inputParam.importRetrieveOrDispose){\r\n        formData.append(\"ImportFile\", selectedRecord['sfilename'][0])\r\n        formData.append(\"retrieveDisposeSampleType\", inputParam.isRetrieve?transactionStatus.Retrieved:transactionStatus.Disposed)\r\n        formData.append(\"fieldName\", Lims_JSON_stringify(this.props.intl.formatMessage({ id: \"IDS_SAMPLEID\" })))\r\n        formData.append(\"fromDate\", obj.fromDate);\r\n        formData.append(\"toDate\", obj.toDate);\r\n        formData.append( \"nprojecttypecode\", this.state.breadCrumbdata.breadcrumbprojecttype.value||-1);\r\n        }\r\n        inputParam = {\r\n            formData: formData,\r\n            isFileupload,\r\n            methodUrl: inputParam.importRetrieveOrDispose?\"bulkeretrievedispose\":\"samplestorageretrieval\",\r\n            operation: \"create\",\r\n            dynamicfields: [],\r\n            classUrl: \"samplestorageretrieval\",\r\n            isInitialRender: true,\r\n              selectedRecord:  inputParam.importRetrieveOrDispose?{...this.state.selectedRecord}:{},\r\n            //selectedRecord: {},\r\n            ...inputParam, inputData\r\n        }\r\n        var saveType = this.statesaveType;\r\n        const masterData = this.state.masterData;\r\n     \r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputParam.ncontrolcode)) {\r\n       \t\t//ALPD-4749\r\n\t\t\t//Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\r\n\t\t    this.setState({ loading: true,dynamicfields:[] })\r\n            let urlArray = [];\r\n            const currentTimeUrl = rsapi.post(\"/timezone/getLocalTimeByZone\", {\r\n                \"userinfo\": this.props.Login.userInfo\r\n            });\r\n            const reasonUrl = rsapi.post(\"/reason/getReason\", {\r\n                \"userinfo\": this.props.Login.userInfo\r\n            });\r\n    \r\n            urlArray = [reasonUrl,currentTimeUrl];\r\n           \r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    const reasonMap = constructOptionList(response[0].data || [], \"nreasoncode\",\r\n                        \"sreason\", undefined, undefined, false);\r\n                    const reasonList = reasonMap.get(\"OptionList\");\r\n                    this.setState({\r\n                        esign:reasonList,\r\n                        serverTime: rearrangeDateFormat(this.props.Login.userInfo, response[1].data),\r\n                        loadEsign: true, openModal: true,  screenData: { inputParam, masterData },importRetrieveOrDispose:inputParam.importRetrieveOrDispose,\r\n                        loading: false\r\n                    });\r\n                }).catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                });\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         loadEsign: true, dynamicfields: [], screenData: { inputParam, masterData }, saveType,importRetrieveOrDispose:inputParam.importRetrieveOrDispose\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.crudMasterSampleStorageRetrieval(inputParam, this.state.masterData, inputParam.importRetrieveOrDispose?\"openModal\":\"\");\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    getSampleStorageLocation(inputData, fieldName, comboData) {\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        if (fieldName === 'nsamplestoragelocationcode') {\r\n            inputParamData = {\r\n                nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        } else {\r\n            inputParamData = {\r\n                nstoragecategorycode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragemapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { storageLocationOptions,\r\n                    sampleStorageVersionOptions } = this.state\r\n\r\n                let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n                storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n                let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                    \"nversionno\", undefined, undefined, undefined);\r\n                sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.length > 0 ?\r\n                        storageLocationOptions[0] : [],\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ?\r\n                        sampleStorageVersionOptions[0] : [],\r\n\r\n                }\r\n                this.setState({\r\n                    storageLocationOptions, sampleStorageVersionOptions,\r\n                    selectedRecordFilter: {\r\n                        ...selectedRecordFilter,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.getprojectbarcodeconfigForSubmit(true);\r\n        // this.setState({ loading: true })\r\n        // let inputParamData = {\r\n        //     nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n        //     // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\r\n        //     // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n        //     userinfo: this.props.Login.userInfo,\r\n        // }\r\n        // let urlArray = [];\r\n        // const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragemapping\", inputParamData);\r\n        // urlArray = [url1];\r\n        // Axios.all(urlArray)\r\n        //     .then(response => {\r\n        //         let object = {\r\n        //             selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname,\r\n        //             // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\r\n        //             // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\r\n        //         }\r\n        //         let filterData = this.generateBreadCrumData(object);\r\n\r\n        //         this.setState({\r\n        //             filterData,\r\n        //             masterData: {\r\n        //                 ...this.state.masterData,\r\n        //                 ...response[0].data,\r\n        //                 //   samplestorageretrieval: response[0].data['samplestorageretrieval'],\r\n        //             },\r\n        //             loading: false\r\n        //         });\r\n        //     }).catch(error => {\r\n        //         if (error.response.status === 500) {\r\n        //             toast.error(error.message);\r\n        //         } else {\r\n        //             toast.warn(error.response.data);\r\n        //         }\r\n        //         this.setState({\r\n        //             loading: false\r\n        //         });\r\n        //     });\r\n    }\r\n    addSampleStorageMapping() {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        // const url3 = rsapi.post(\"containertype/getContainerType\",\r\n        //     { 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n                const containerstructureMap = constructOptionList(response[0].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                //const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                this.setState({\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        directionmasterOptions: directionmasterList,\r\n                        // ncontainertypecode: containerTypeList[0],\r\n                        // containerStructureOptions: containerstructureList,\r\n                        // ncontainerstructurecode: containerstructureList[0],\r\n                        nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\r\n                        ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\r\n                        isInitialRender: true\r\n\r\n                    },\r\n                    openSpreadSheet: false,\r\n                    operation: 'create',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    \r\n    getprojectbarcodeconfigForSubmit(nflag) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        let obj = convertDateValuetoString(this.state.masterData.fromDate, this.state.masterData.toDate, this.props.Login.userInfo);\r\n        inputParamData = {\r\n            nprojecttypecode: this.state.selectedProjectType.nprojecttypecode.value,\r\n            isFilterSubmit: nflag,\r\n            // fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\r\n            // toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\r\n            fromDate: obj.fromDate,\r\n            toDate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/getProjectbarcodeconfig\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                //let masterData = this.state.masterData.samplestorageretrieval;\r\n                this.setState(nflag === false ? {\r\n                    selectedProjectTypeList: sortData(response[0].data.selectedProjectTypeList),\r\n                    // selectedRecord: {\r\n                    //     nprojecttypecode: { label: comboData.label, value: comboData.value }\r\n                    // },\r\n                    loading: false\r\n                } : {\r\n                    selectedProjectTypeList: sortData(response[0].data.selectedProjectTypeList),\r\n                    breadCrumbdata: {\r\n                        breadcrumbprojecttype: {\r\n                            label: this.state.selectedProjectType.nprojecttypecode.label,\r\n                            value: this.state.selectedProjectType.nprojecttypecode.value\r\n                        },\r\n                        ...convertDateValuetoString(this.state.masterData.fromDate,\r\n                            this.state.masterData.toDate, this.props.Login.userInfo)\r\n                    },\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\r\n                        toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\r\n                        samplestorageretrieval: response[0].data.samplestorageretrieval\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n\r\n    getprojectbarcodeconfig(nflag) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        let obj = convertDateValuetoString(this.state.masterData.fromDate, this.state.masterData.toDate, this.props.Login.userInfo);\r\n        inputParamData = {\r\n            nprojecttypecode: this.state.breadCrumbdata.breadcrumbprojecttype.value,\r\n            isFilterSubmit: nflag,\r\n            // fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\r\n            // toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\r\n            fromDate: obj.fromDate,\r\n            toDate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/getProjectbarcodeconfig\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                //let masterData = this.state.masterData.samplestorageretrieval\r\n                this.setState(nflag === false ? {\r\n                    selectedProjectTypeList: sortData(response[0].data.selectedProjectTypeList),\r\n                    // selectedRecord: {\r\n                    //     nprojecttypecode: { label: comboData.label, value: comboData.value }\r\n                    // },\r\n                    loading: false\r\n                } : {\r\n                    selectedProjectTypeList: sortData(response[0].data.selectedProjectTypeList),\r\n                    /*breadCrumbdata: {\r\n                        breadcrumbprojecttype: {\r\n                            label: this.state.selectedProjectType.nprojecttypecode.label,\r\n                            value: this.state.selectedProjectType.nprojecttypecode.value\r\n                        },\r\n                        ...convertDateValuetoString(this.state.masterData.fromDate,\r\n                            this.state.masterData.toDate, this.props.Login.userInfo)\r\n                    },*/\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\r\n                        toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\r\n                        samplestorageretrieval: response[0].data.samplestorageretrieval\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    getContainerStructure(inputData, fieldName, comboData) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            ncontainertypecode: comboData.value,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/getContainerStructure\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { containerStructureOptions, selectedRecord } = this.state\r\n\r\n                let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, undefined);\r\n                containerStructureOptions = containerStructureList.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    nrow: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.nrow : 1,\r\n                    ncolumn: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.ncolumn : 1,\r\n                    ncontainerstructurecode: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0] : [],\r\n                    containerStructureOptions: containerStructureOptions.length > 0 ?\r\n                        [...containerStructureOptions] : [],\r\n                }\r\n\r\n                this.setState({\r\n\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    bulkeretrieval = (inputParam, operation) => {\r\n        let inputData = [];\r\n        let obj = convertDateValuetoString(this.state.masterData.fromDate, this.state.masterData.toDate, this.props.Login.userInfo);\r\n\r\n        inputData = {\r\n            fromDate: obj.fromDate,\r\n            toDate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n            nprojecttypecode: this.state.breadCrumbdata.breadcrumbprojecttype.value,\r\n            spositionvaluesize: this.state.newData.length,\r\n            spositionvalue: this.state.newData.map(item => item['Sample Id']).join('\\',\\''),\r\n            isbulkretrieve: true\r\n        }\r\n        inputParam = {\r\n            methodUrl: \"bulkeretrieve\",\r\n            operation: \"create\",\r\n            classUrl: \"samplestorageretrieval\",\r\n            isInitialRender: true,\r\n            //  selectedRecord: {...this.state.selectedRecord},\r\n            selectedRecord: {},\r\n            ...inputParam, inputData\r\n        }\r\n        var saveType = this.statesaveType;\r\n        const masterData = this.state.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputParam.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, this.state.masterData, \"openModal\");\r\n\r\n        }\r\n    }\r\n   \r\n    onSampleMappingSaveClick = (param) => {\r\n        if (!param.isRetrieve) {\r\n            if (this.state.selectedRecord[\"nneedaliquot\"] &&\r\n                this.state.selectedRecord[\"nneedaliquot\"] === true) {\r\n                return toast.info(this.props.intl.formatMessage({ id: \"IDS_DISABLEINPUTFORALIQUOTSAMPLE\" }));\r\n            }\r\n        }\r\n        const mandatoryFields = param.importRetrieveOrDispose?\r\n        [{ \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }]\r\n        :this.state.selectedRecord[\"nneedaliquot\"] &&\r\n            this.state.selectedRecord[\"nneedaliquot\"] === true ? [\r\n            {\r\n                \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\",\r\n                \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_NEWSAMPLEID\",\r\n                \"dataField\": \"saliquotsampleid\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_QUANTITY\",\r\n                \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_UNITNAME\",\r\n                \"dataField\": \"nunitcode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            }\r\n        ] : [\r\n            {\r\n                \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\",\r\n                \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            }\r\n        ]\r\n        onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields,\r\n            () => this.CRUDSampleStorageTransaction(param))\r\n\r\n\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateChange: event.dataState\r\n        });\r\n    }\r\n    dataStateGridChange = (event) => {\r\n        this.setState({\r\n            dataStateGridChange: event.dataState\r\n        });\r\n    }\r\n    approveSampleStorageMapping = (event) => {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/approveSampleStorageMapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        ...response[0].data\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    getSelectedBarcodeData(e, inputParam) {\r\n        if (e.keyCode === 13) {\r\n            this.setState({ loading: true })\r\n            //let selectedRecord = this.state.selectedRecord || {};\r\n            let urlArray = [];\r\n            const url1 = rsapi.post(\"/samplestorageretrieval/getSelectedBarcodeData\", {\r\n                // nprojecttypecode: this.state.selectedBarcodeValue.nprojecttypecode,\r\n                spositionvalue: inputParam.spositionvalue,\r\n                userinfo: this.props.Login.userInfo\r\n            });\r\n            urlArray = [url1];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let dynamicfields = [];\r\n                    dynamicfields = [{ \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\", \"width\": \"200px\", \"staticField\": true },\r\n                    { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"200px\", \"staticField\": true },\r\n                    { \"idsName\": \"IDS_QUANTITY\", \"dataField\": \"nquantity\", \"width\": \"200px\", \"staticField\": true },\r\n                    { \"idsName\": \"IDS_UNIT\", \"dataField\": \"sunitname\", \"width\": \"200px\", \"staticField\": true }];\r\n                    const temparray2 = response[0].data['selectedProjectTypeList'] && response[0].data['selectedProjectTypeList'].map((option) => {\r\n                        return { \"idsName\": option.sfieldname, \"dataField\": option.sfieldname, \"width\": \"200px\" };\r\n                    });\r\n                    dynamicfields = [...dynamicfields, ...temparray2]\r\n                    this.setState({\r\n                        dynamicfields,\r\n                        selectedBarcodeValue: { ...response[0].data['selectedBarcodeValue'] },\r\n                        loading: false\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            dynamicfields: [],\r\n                            selectedBarcodeValue: {}\r\n                        })\r\n                        toast.info(error.response.data);\r\n                    }\r\n\r\n                })\r\n        }\r\n    }\r\n    getDynamicFilterExecuteData(nflag) {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (nflag === 2 ? true : (selectedRecord.filterquery && selectedRecord.filterquery !== \"\")) {\r\n            this.setState({ loading: true })\r\n            let obj = {// ...inputParam.component, \r\n                label: 'samplestorageretrieval', valuemember: 'nsamplestorageretrievalcode',\r\n                filterquery: nflag === 2 ?\r\n                    this.state.submittedselectedRecord.filterquery\r\n                    :\r\n                    selectedRecord.filterquery,\r\n                fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\r\n                toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\r\n                nprojecttypecode: this.state.breadCrumbdata.breadcrumbprojecttype.value\r\n                , source: 'view_sampleretrieval_' + this.state.breadCrumbdata.breadcrumbprojecttype.value, userinfo: this.props.Login.userInfo\r\n            }\r\n            let urlArray = [];\r\n            const url1 = rsapi.post(\"/samplestorageretrieval/getdynamicfilterexecutedata\", obj);\r\n            urlArray = [url1];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let masterData = this.state.masterData\r\n                    masterData = { ...masterData, ...response[0].data }\r\n                    this.setState({\r\n                        masterData: { ...masterData },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        isFilterPopup: false,\r\n                        submittedselectedRecord: nflag === 2 ?\r\n                            { ...this.state.submittedselectedRecord }\r\n                            :\r\n                            { ...selectedRecord }\r\n                        ,\r\n                        selectedRecord: {},\r\n                        displayQuery: this.state.tree ? QbUtils.queryString(this.state.tree, this.state.config, true) : \"\"\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data.rtn);\r\n                    }\r\n\r\n                })\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTAFILTER\" }));\r\n\r\n        }\r\n    }\r\n    // getDynamicFilterExecuteData(nflag) {\r\n    //     this.setState({ loading: true })\r\n    //     let selectedRecord = this.state.selectedRecord || {};\r\n    //     let obj = {// ...inputParam.component, \r\n    //         label: 'samplestorageretrieval', valuemember: 'nsamplestoragetransactioncode',\r\n    //         filterquery:   \r\n    //         selectedRecord.filterquery, source: 'view_sampleretrieval', userinfo: this.props.Login.userInfo\r\n    //     }\r\n    //     let urlArray = [];\r\n    //     const url1 = rsapi.post(\"/samplestorageretrieval/getdynamicfilterexecutedata\", obj);\r\n    //     urlArray = [url1];\r\n    //     Axios.all(urlArray)\r\n    //         .then(response => {\r\n    //             console.log(response)\r\n    //             let masterData = this.state.masterData\r\n    //             masterData = { ...masterData, ...response[0].data }\r\n    //             this.setState({\r\n    //                 masterData: { ...masterData },\r\n    //                 loading: false,\r\n    //                 openModal: false,\r\n    //                 submittedselectedRecord: nflag === 2 ?\r\n    //                     { ...this.state.submittedselectedRecord }\r\n    //                     :\r\n    //                     { ...selectedRecord }\r\n    //                 ,\r\n    //                 isFilterPopup: false,\r\n    //                 selectedRecord: {}\r\n    //             })\r\n    //         })\r\n    //         .catch(error => {\r\n    //             this.setState({\r\n    //                 loading: false\r\n    //             });\r\n    //             if (error.response.status === 500) {\r\n    //                 toast.error(error.message);\r\n    //             }\r\n    //             else {\r\n    //                 toast.info(error.response.data.rtn);\r\n    //             }\r\n\r\n    //         })\r\n    // }\r\n\r\n    fetchRecord = (data) => {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        const url3 = rsapi.post(\"samplestorageretrieval/getEditSampleStorageMapping\",\r\n            { 'nsamplestoragemappingcode': data.nsamplestoragemappingcode, 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2, url3];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n               // let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n\r\n                const containerstructureMap = constructOptionList(response[2].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                const editedObject = response[2].data.editsampleStorageMapping;\r\n\r\n                storageMappingMapList.unshift({ label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode })\r\n                selectedRecord = {\r\n                    ndirectionmastercode: { label: editedObject.sdirection, value: editedObject.ndirectionmastercode },\r\n                    nsamplestoragecontainerpathcode: { label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode },\r\n                    nproductcode: { label: editedObject.sproductname, value: editedObject.nproductcode },\r\n                    ncontainertypecode: { label: editedObject.scontainertype, value: editedObject.ncontainertypecode },\r\n                    ncontainerstructurecode: { label: editedObject.scontainerstructurename, value: editedObject.ncontainerstructurecode },\r\n                    nneedposition: editedObject.nneedposition === 3 ? true : false,\r\n                    directionmasterOptions: directionmasterList,\r\n                    nquantity: editedObject.nquantity,\r\n                    nrow: editedObject.nrow,\r\n                    ncolumn: editedObject.ncolumn,\r\n                    nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\r\n                }\r\n                this.setState({\r\n                    openSpreadSheet: false,\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        containerStructureOptions: containerstructureList,\r\n                        isInitialRender: true\r\n                    },\r\n                    operation: 'update',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    // Actions End\r\n    retrievalType = () => {\r\n        let retrievalType = this.state.retrievalType;\r\n        if (retrievalType === 1) {\r\n            retrievalType = 2;\r\n        } else {\r\n            retrievalType = 1;\r\n        }\r\n        this.setState({ retrievalType: retrievalType })\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.selectedRecord !== this.state.selectedRecord)) {\r\n            return false;\r\n        } else if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.sheetData !== this.state.sheetData)) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    handlePageChangeFilter = (event) => {\r\n        this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    onChange = (immutableTree, config) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[\"tree\"] = immutableTree;\r\n        selectedRecord[\"config\"] = config;\r\n        selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\r\n        this.setState({ tree: immutableTree, config: config, selectedRecord: selectedRecord });\r\n\r\n    };\r\n    // cellRender(tdElement, cellProps) {\r\n\r\n    //     if (cellProps.rowType === \"groupFooter\") {\r\n    //         console.log('cellProps.field', cellProps)\r\n    //         if (cellProps.dataItem.field === \"ssamplestoragelocationname\") {\r\n    //             console.log('tdElement', tdElement, 'cellProps', cellProps)\r\n    //             return (\r\n    //                 <td aria-colindex={cellProps.columnIndex} role={\"gridcell\"}>\r\n    //                     Sum: {cellProps.dataItem.aggregates.navailablespace.sum}\r\n    //                 </td>\r\n    //             );\r\n    //         }\r\n    //     }\r\n    //     return tdElement;\r\n    // }\r\n    // handleGroupChange = (event) => {\r\n    //     const newDataState = this.processWithGroups(this.state.masterData.samplestorageretrieval || [], this.state.dataStateChange, event.group);\r\n    //     this.setState({\r\n    //         masterData: { ...this.state.masterData, samplestorageretrieval: newDataState },\r\n    //         group: event.group,\r\n    //     });\r\n    // };\r\n    // processWithGroups = (data, group) => {\r\n    //     const newDataState = groupBy(data, group);\r\n    //     return newDataState;\r\n    // };\r\n    processWithGroups = (data, dataState) => {\r\n        const aggregates = [\r\n            {\r\n                field: \"navailablespace\",\r\n                aggregate: \"sum\",\r\n            }\r\n        ];\r\n        const groups = dataState.group;\r\n        if (groups) {\r\n            groups.map((group) => (group.aggregates = aggregates));\r\n        }\r\n        dataState.group = groups;\r\n        const newDataState = process(data, dataState);\r\n        // setGroupIds({\r\n        //     data: newDataState.data,\r\n        //     group: dataState.group,\r\n        // });\r\n        return newDataState;\r\n    };\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray1 = [{ \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_STORAGESTRUCTURE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_PATHWITHPOSITION\", \"dataField\": \"scontainerpathwithposition\", \"width\": \"500px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_CONTAINERID\", \"dataField\": \"sboxid\", \"width\": \"200px\", \"staticField\": true },\r\n        //  { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_QUANTITY\", \"dataField\": \"nquantity\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_UNIT\", \"dataField\": \"sunitname\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_TRANSACTIONSTATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_TRANSACTIONDATE\", \"dataField\": \"dtransactiondate\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"200px\", \"staticField\": true }];\r\n        const temparray2 = data && data.map((option) => {\r\n            return { \"idsName\": option.sfieldname, \"dataField\": option.sfieldname, \"width\": \"200px\" };\r\n        });\r\n        const newArray = [...temparray1, ...temparray2]\r\n        return newArray;\r\n    }\r\n    handleFilterDateChange = (dateName, dateValue) => {\r\n        let masterData = this.state.masterData;\r\n        masterData[dateName] = dateValue;\r\n        this.setState({ masterData });\r\n\r\n    }\r\n    // handleAdd = e => {\r\n    //     let file = e.newState[0].getRawFile();\r\n    //     /* Boilerplate to set up FileReader */\r\n    //     const reader = new FileReader();\r\n    //     const rABS = !!reader.readAsBinaryString;\r\n\r\n    //     reader.onload = e => {\r\n    //       /* Parse data */\r\n    //       const bstr = e.target.result;\r\n    //       const wb = XLSX.read(bstr, {\r\n    //         type: rABS ? \"binary\" : \"array\",\r\n    //         bookVBA: true\r\n    //       });\r\n    //       /* Get first worksheet */\r\n    //       const wsname = wb.SheetNames[0];\r\n    //       const ws = wb.Sheets[wsname];\r\n    //       /* Convert array of arrays */\r\n    //       const newData = XLSX.utils.sheet_to_json(ws); \r\n    //       /* Update state */\r\n    //       this.setState({\r\n    //         newData\r\n    //       })\r\n    //     };\r\n    //     if (rABS) {\r\n    //       reader.readAsBinaryString(file);\r\n    //     } else {\r\n    //       reader.readAsArrayBuffer(file);\r\n    //     }\r\n    //   };\r\n    render() {\r\n        // const addId = this.state.controlMap.has(\"Add samplestorageretrieval\") && this.state.controlMap.get(\"Add samplestorageretrieval\").ncontrolcode;\r\n        // const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n        // const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\r\n        // const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\r\n        // const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\r\n        // const retrievedispose = this.state.controlMap.has(\"Retrieve/Dispose\") && this.state.controlMap.get(\"Retrieve/Dispose\").ncontrolcode;\r\n        // const retrieve = this.state.controlMap.has(\"Retrieve\") && this.state.controlMap.get(\"Retrieve\").ncontrolcode;\r\n        // const dispose = this.state.controlMap.has(\"Dispose\") && this.state.controlMap.get(\"Dispose\").ncontrolcode;\r\n\r\n\r\n        let fromDate = this.state.masterData && this.state.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate) : new Date();\r\n        let toDate = this.state.masterData && this.state.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate) : new Date();\r\n\r\n        //  let obj = convertDateValuetoString(this.props.Login.masterData.realfromDate, this.props.Login.masterData.realtoDate, this.props.Login.userInfo);\r\n\r\n        const extractedColumnList = this.state.selectedProjectTypeList ? this.gridfillingColumn(this.state.selectedProjectTypeList) : [];\r\n\r\n        let fields = {};\r\n        if (extractedColumnList.length > 0) {\r\n            extractedColumnList.map(field => {\r\n                field.hasOwnProperty(\"staticField\") ?\r\n                    fields = {\r\n                        ...fields,\r\n                        [field.dataField]: {\r\n                            \"label\": this.props.intl.formatMessage({\r\n                                id: field.idsName,\r\n                            })\r\n                            ,\r\n                            \"type\": \"text\",\r\n                            \"valueSources\": [\"value\", \"func\"],\r\n\r\n                            \"mainWidgetProps\": {\r\n                                \"valueLabel\": \"Name\",\r\n                                \"valuePlaceholder\": this.props.intl.formatMessage({\r\n                                    id: field.idsName\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                    :\r\n                    fields = {\r\n                        ...fields,\r\n                        ['\"' + field.dataField + '\"']: {\r\n                            \"label\": field.dataField\r\n                            ,\r\n                            \"type\": \"text\",\r\n                            \"valueSources\": [\"value\", \"func\"],\r\n\r\n                            \"mainWidgetProps\": {\r\n                                \"valueLabel\": \"Name\",\r\n                                \"valuePlaceholder\": field.dataField\r\n                            }\r\n                        }\r\n                    }\r\n            });\r\n        }\r\n        // const filterParam = {\r\n        //     inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\",\r\n        //     fetchUrl: \"samplestorageretrieval/getActiveSampleStorageMappingById\",\r\n        //     fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        //     masterData: this.props.Login.masterData,\r\n        //     searchFieldList: [\"ssamplestoragelocationname\"]\r\n        // };\r\n\r\n        const breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": this.state.breadCrumbdata && this.state.breadCrumbdata.breadCrumbFrom ? this.state.breadCrumbdata.breadCrumbFrom : 'IDS_NA'\r\n            },\r\n            {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": this.state.breadCrumbdata && this.state.breadCrumbdata.breadCrumbto ? this.state.breadCrumbdata.breadCrumbto : 'IDS_NA'\r\n            },\r\n            {\r\n                \"label\": \"IDS_PROJECTTYPE\",\r\n                \"value\": this.state.breadCrumbdata &&\r\n                    this.state.breadCrumbdata.breadcrumbprojecttype ? this.state.breadCrumbdata.breadcrumbprojecttype.label : 'IDS_NA'\r\n            }\r\n\r\n        ];\r\n\r\n        //const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n\r\n                <Preloader loading={this.state.loading} />\r\n                {//this.state.retrievalType === 1 ?\r\n                    <>\r\n\r\n                        <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\">\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                            {\r\n                                <>\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                            <InputGroup.Append>\r\n                                                <AdvFilter\r\n                                                    filterComponent={[{\r\n                                                        \"IDS_SAMPLESTORAGERETRIEVEFILTER\": <>\r\n                                                            <Col md={12}>\r\n                                                                <Row>\r\n                                                                    <Col md={6}>\r\n                                                                        <DateTimePicker\r\n                                                                            name={\"fromdate\"}\r\n                                                                            label={this.props.intl.formatMessage({ id: \"IDS_FROM\" })}\r\n                                                                            className=\"form-control\"\r\n                                                                            placeholderText={this.props.intl.formatMessage({ id: \"IDS_FROM\" })}\r\n                                                                            selected={fromDate}\r\n                                                                            value={fromDate}\r\n                                                                            dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                                                            isClearable={false}\r\n                                                                            onChange={(date) =>\r\n                                                                                this.handleFilterDateChange(\"fromDate\", date)}\r\n                                                                        />\r\n                                                                    </Col>\r\n                                                                    <Col md={6}>\r\n                                                                        <DateTimePicker\r\n                                                                            name={\"todate\"}\r\n                                                                            label={this.props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n                                                                            className=\"form-control\"\r\n                                                                            placeholderText={this.props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n                                                                            selected={toDate}\r\n                                                                            value={toDate}\r\n                                                                            dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                                                            isClearable={false}\r\n                                                                            onChange={(date) =>\r\n                                                                                this.handleFilterDateChange(\"toDate\", date)}\r\n                                                                        />\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                                <Row>\r\n                                                                    <Col md={12}>\r\n                                                                        <FormSelectSearch\r\n                                                                            name={\"nprojecttypecode\"}\r\n                                                                            as={\"select\"}\r\n                                                                            onChange={(event) => this.onComboChange(event, 'nprojecttypecode')}\r\n                                                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                                                                            isMandatory={this.state.selectedRecord[\"nneedposition\"]}\r\n                                                                            value={this.state.selectedProjectType && this.state.selectedProjectType[\"nprojecttypecode\"] ? this.state.selectedProjectType[\"nprojecttypecode\"] || [] : []}\r\n                                                                            options={this.state.masterData && (this.state.masterData.projectbarcodeconfig || [])}\r\n                                                                            optionId={\"value\"}\r\n                                                                            optionValue={\"label\"}\r\n                                                                            isMulti={false}\r\n                                                                            isDisabled={false}\r\n                                                                            isSearchable={false}\r\n                                                                            isClearable={false}\r\n                                                                        />\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </Col>\r\n\r\n                                                        </>\r\n                                                    }]}\r\n                                                    dataFor=\"tooltip_list_wrap\"\r\n                                                    onFilterSubmit={this.onFilterSubmit}\r\n                                                    showFilter={this.state.showFilter}\r\n                                                    openFilter={this.openFilter}\r\n                                                    closeFilter={this.closeFilter}\r\n                                                    showModalBg={(e) => this.setState({ showModalBg: e })}\r\n\r\n                                                />\r\n                                            </InputGroup.Append>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    {this.state.selectedProjectTypeList &&\r\n                                        <Row> <Col md={12}>\r\n                                            <DataGrid\r\n                                                // isDownloadPDFRequired={this.state.masterData && this.state.masterData.samplestorageretrieval &&\r\n                                                //     this.processWithGroups(this.state.masterData.samplestorageretrieval || [],\r\n                                                //         this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                //             take: 10,\r\n                                                //             skip: 0\r\n                                                //         }).data.length > 0 ?\r\n                                                //     true : false}\r\n                                                // isDownloadExcelRequired={this.state.masterData && this.state.masterData.samplestorageretrieval &&\r\n                                                //     this.processWithGroups(this.state.masterData.samplestorageretrieval || [],\r\n                                                //         this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                //             take: 10,\r\n                                                //             skip: 0\r\n                                                //         }).data.length > 0 ?\r\n                                                //     true : false}\r\n                                                isCustomButton={true}\r\n                                                customButtonlist={[\r\n                                                    //     {\r\n                                                    //     label: 'IDS_SEARCH',\r\n                                                    //     id: {},\r\n                                                    //     onClick: () => this.opensearch(),\r\n                                                    //     controlname: 'faSearch'\r\n                                                    // },\r\n                                                    // {\r\n                                                    //     label: 'IDS_BULKRETRIEVE',\r\n                                                    //     id: {},\r\n                                                    //     // hidden : this.state.userRoleControlRights.indexOf(retrievedispose) === -1,\r\n                                                    //     onClick: () => this.openbulkretrieve(),\r\n                                                    //     controlname: 'faRecycle'\r\n                                                    // },\r\n                                                    {\r\n                                                        label: 'IDS_RETRIEVEDISPOSE',\r\n                                                        id: {},\r\n                                                        // hidden : this.state.userRoleControlRights.indexOf(retrievedispose) === -1,\r\n                                                        onClick: () => this.openRetrieveDispose(),\r\n                                                        controlname: 'faRecycle'\r\n                                                    },\r\n                                                    {\r\n                                                        label: 'IDS_EXPORTTEMPLATE',\r\n                                                        id: {},\r\n                                                        // hidden : this.state.userRoleControlRights.indexOf(retrievedispose) === -1,\r\n                                                        onClick: () => this.handleExportClick(),\r\n                                                        controlname: 'faFileExcel'\r\n                                                    },\r\n                                                    {\r\n                                                        label: 'IDS_BULKRETRIEVEDISPOSE',\r\n                                                        id: {},\r\n                                                        // hidden : this.state.userRoleControlRights.indexOf(retrievedispose) === -1,\r\n                                                        onClick: () => this.bulkRetrieveDispose(),\r\n                                                        controlname: 'faFileImport'\r\n                                                    }\r\n\r\n                                                    // {\r\n                                                    //     label: 'IDS_RETRIEVE',\r\n\r\n                                                    //     hidden : this.state.userRoleControlRights.indexOf(retrieve) === -1,\r\n                                                    //     onClick: () => this.openRetrieve(),\r\n                                                    //     controlname: 'faRecycle'\r\n                                                    // }\r\n\r\n                                                    // {\r\n                                                    //     label: 'IDS_DISPOSE',\r\n                                                    //     id: {},\r\n                                                    //     hidden : this.state.userRoleControlRights.indexOf(dispose) === -1,\r\n                                                    //     onClick: () => this.openDispose(),\r\n                                                    //     controlname: 'faRecycle'\r\n                                                    // }\r\n\r\n\r\n                                                ]}\r\n                                                isRefreshRequired={false}\r\n                                                // onGroupChange={this.handleGroupChange}\r\n                                                primaryKeyField={'nsamplestoragetransactioncode'}\r\n                                                //data={this.state.masterData &&\r\n                                                  //  this.state.masterData.samplestorageretrieval}\r\n                                                  data={\r\n                                                    this.state.masterData && this.state.masterData.samplestorageretrieval? this.state.masterData.samplestorageretrieval.map(item => {\r\n                                                    let parsedData = {};\r\n                                                    parsedData = JSON.parse(item.jsondata.value) || {};\r\n                                                    return {...item,...parsedData};}) : []  }\r\n                                                dataResult={this.state.masterData &&\r\n                                                    this.state.masterData.samplestorageretrieval ?\r\n                                                    process(this.state.masterData.samplestorageretrieval.map(item => {\r\n                                                        let parsedData = {};\r\n                                                        parsedData = JSON.parse(item.jsondata.value) || {};return {...item,...parsedData};}) || [],\r\n                                                        this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }) : []\r\n                                                    // this.processWithGroups(this.state.masterData.samplestorageretrieval || [],\r\n                                                    //     this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    //         take: 10,\r\n                                                    //         skip: 0\r\n                                                    //     })\r\n                                                }\r\n                                                dataState={this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }}\r\n                                                dataStateChange={this.dataStateChange}\r\n                                                extractedColumnList={extractedColumnList}\r\n                                                controlMap={this.state.controlMap}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                deleteRecord={this.deleteRecord}\r\n                                                addRecord={() => this.openStorageMapping()}\r\n                                                pageable={true}\r\n                                                scrollable={'scrollable'}\r\n                                                // isComponent={true}\r\n                                                gridHeight={'600px'}\r\n                                                // isActionRequired={true}\r\n                                                isToolBarRequired={true}\r\n                                            // actionIcons={\r\n                                            //     [{\r\n                                            //         title: this.props.intl.formatMessage({ id: \"IDS_ADDSAMPLE\" }),\r\n                                            //         controlname: \"faPenSquare\",\r\n                                            //         hidden: false,\r\n                                            //         objectName: \"add\",\r\n                                            //         onClick: (param) => this.addSample(param, 1)\r\n                                            //     }]}\r\n                                            />\r\n\r\n                                        </Col></Row>\r\n\r\n                                    }\r\n                                    {this.state.export ?\r\n                                        <LocalizationProvider>\r\n                                            <ExcelExport\r\n                                                data={[]}\r\n                                                collapsible={true}\r\n                                                fileName={(this.props.Login.displayName && this.props.Login.displayName)}\r\n                                                ref={(exporter) => {\r\n                                                    this._excelExportHeader = exporter;\r\n                                                }}>\r\n                                                {[...this.state.exportFiled].map((item) =>\r\n                                                    <ExcelExportColumn\r\n                                                        field={item.dataField} title={this.props.intl.formatMessage({ id: item.idsName })} width={200} />\r\n                                                )\r\n\r\n                                                }\r\n                                            </ExcelExport>\r\n                                        </LocalizationProvider > : \"\"}\r\n\r\n\r\n                                </>\r\n\r\n\r\n                            }\r\n\r\n                        </ListWrapper>\r\n\r\n                        {/* < ListWrapper className=\"client-list-content\" ><Row> \r\n                        </Row>\r\n                            <Col md={12}>\r\n                                <Col md={6}>\r\n                                    <Row>\r\n                                        <FormInput\r\n                                            name={'spositionvalue'}\r\n                                            onb\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_POSITIONVALUE\" })}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_POSITIONVALUE\" })}\r\n                                            value={this.state.selectedRecord['spositionvalue']\r\n                                                ? this.state.selectedRecord['spositionvalue'] : \"\"}\r\n                                            maxLength={255}\r\n                                            isDisabled={this.props.isDisabled}\r\n                                            onKeyDown={(event) => this.getSelectedBarcodeData(this.state.selectedRecord)}\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                        />\r\n                                    </Row>\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    {this.state.selectedBarcodeValue && <div className=\"d-flex justify-content-end mr-3\">\r\n                                        <Row>\r\n                                            {\r\n                                                extractedColumnList.map((item, index) => {\r\n                                                    return (\r\n                                                        <>\r\n                                                            <Col md={6} key={`specInfo_${index}`}>\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>{this.props.intl.formatMessage({ id: item.idsName })}</FormLabel>\r\n                                                                    <ReadOnlyText>{this.state.selectedBarcodeValue[item.dataField]}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Row>\r\n                                    </div>}\r\n                                </Col>\r\n                            </Col></ListWrapper> */}\r\n                    </>}\r\n\r\n\r\n                {\r\n                    this.state.openModal &&\r\n                    <SlideOutModal show={this.state.openModal}\r\n                        closeModal={this.closeModal}\r\n                        hideSave={this.state.isbulkretrieve ? false : true}\r\n                        showSubmit={false}\r\n                        needClose={this.state.loadEsign?false:true}\r\n                        size={this.state.isbulkretrieve || this.state.openSpreadSheet || this.state.isFilterPopup ? 'xl' : \"\"}\r\n                        operation={\"\"}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.state.importRetrieveOrDispose ? \"IDS_BULKRETRIEVE\" :\r\n                            this.props.Login.loadEsign === true ? this.props.intl.formatMessage({ id: \"IDS_ESIGN\" }) : this.state.isRetrieveOrDispose ? this.props.intl.formatMessage({ id: \"IDS_RETRIEVEDISPOSE\" }) :\r\n                                this.state.isFilterPopup ? \"\" : this.state.isMultiSampleAdd ? this.props.intl.formatMessage({ id: \"IDS_STORAGESTRUCTURE\" })\r\n                                    :this.state.editedsheetData && this.state.editedsheetData.scontainerpath}\r\n                        onSaveClick={this.state.isFilterPopup ? this.getDynamicFilterExecuteData.bind(this) :this.onSampleMappingSaveClick}\r\n                        esign={this.state.loadEsign}\r\n                        // className={\"wide-popup\"}\r\n\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={\r\n                            // this.state.isbulkretrieve ?\r\n                            //     <>\r\n                            //         <Upload\r\n                            //            batch={false}\r\n                            //                multiple={false}\r\n                            //                defaultFiles={[]}\r\n                            //                withCredentials={false}\r\n                            //                autoUpload={false}\r\n                            //                onAdd={this.handleAdd}\r\n                            //         />\r\n                            //         <hr />\r\n                            //         <Grid   \r\n                            //   pageable={{ buttonCount: 4, pageSizes: this.props.Login.settings &&\r\n                            //      this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting)),\r\n                            //       previousNext: false}} \r\n                            //         onDataStateChange={this.dataStateGridChange}\r\n                            //         data={ process(this.state.newData || [],\r\n                            //                         this.state.dataStateGridChange ? \r\n                            //                         this.state.dataStateGridChange :\r\n                            //                          { skip: 0, take: 10 })} \r\n                            //         key={this.state.newData} \r\n                            //      />\r\n                            //     </>\r\n                            //     :\r\n                           // ALPD-5120 : Added by rukshana this.state.serverTime for Sample Retrieval and Disposal screen : E-signature's date and time not displayed in popup \r\n                            this.state.loadEsign ?//this.props.Login.loadEsign ?\r\n                                <Esign operation={this.props.Login.operation}\r\n                                    formatMessage={this.props.intl.formatMessage}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    esignReasonList={this.state.esign||[]}\r\n                                    serverTime={this.state.serverTime || []}\r\n                                /> :\r\n                                this.state.isRetrieveOrDispose ?\r\n                                    <RetrieveOrDiposeSample\r\n                                        dynamicfields={this.state.dynamicfields}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        controlMap={this.state.controlMap}\r\n                                        childDataChange={this.childDataChange}\r\n                                        CRUDSampleStorageTransaction={this.onSampleMappingSaveClick}\r\n                                        intl={this.props.intl}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        unitMapList={this.state.unitMapList}\r\n                                        loadEsign={this.props.Login.loadEsign}\r\n                                        isRetrieveOrDispose={this.state.isRetrieveOrDispose}\r\n                                        breadcrumbprojecttype={this.state.breadCrumbdata.breadcrumbprojecttype}\r\n                                    />\r\n                                    : this.state.importRetrieveOrDispose ?\r\n                                    <BulkRetrieveOrDiposeSample\r\n                                        dynamicfields={this.state.dynamicfields}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        controlMap={this.state.controlMap}\r\n                                        childDataChange={this.childDataChange}\r\n                                        CRUDSampleStorageTransaction={this.onSampleMappingSaveClick}\r\n                                        intl={this.props.intl}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        unitMapList={this.state.unitMapList}\r\n                                        importRetrieveOrDispose={this.state.importRetrieveOrDispose} \r\n                                        loadEsign={this.props.Login.loadEsign}\r\n                                        //isRetrieveOrDispose={this.state.isRetrieveOrDispose}\r\n                                    />\r\n                                    : this.state.isFilterPopup ?\r\n                                        <FilterQueryBuilder\r\n                                            fields={fields}\r\n                                            isSampleStorage={true}\r\n\r\n                                            queryArray={this.state.queryArray}\r\n                                            skip={this.state.kendoSkip}\r\n                                            take={this.state.kendoTake}\r\n                                            onChange={this.onChange}\r\n                                            tree={this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree}\r\n                                            gridColumns={this.slideList}\r\n                                            filterData={this.props.Login.slideResult || []}\r\n                                            handlePageChange={this.handlePageChangeFilter}\r\n                                            static={true}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            updateStore={this.props.updateStore}\r\n                                        />\r\n                                        :\r\n                                        //Command by Neeraj\r\n\t\t\t\t\t\t\t\t\t\t//ALPD-4749\r\n\t\t\t\t\t\t\t\t\t\t//Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\r\n                                        // this.state.loadEsign ?//this.props.Login.loadEsign ?\r\n                                        //     <Esign operation={this.props.Login.operation}\r\n                                        //         formatMessage={this.props.intl.formatMessage}\r\n                                        //         onInputOnChange={this.onInputOnChange}\r\n                                        //         inputParam={this.props.Login.inputParam}\r\n                                        //         selectedRecord={this.state.selectedRecord || {}}\r\n                                        //     />\r\n                                        //     :\r\n                                            this.state.openSpreadSheet ? <>\r\n                                                <MatrixComponent\r\n                                                    Rows={this.state.Rows || 1}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    columns={this.state.columns || 1}\r\n                                                    selectedRecord={this.state.selectedRecord.sheetData || {}}\r\n                                                    sheetData={this.state.sheetData || {}}\r\n                                                    isMultiSampleAdd={this.state.isMultiSampleAdd}\r\n                                                    childSheetDataChange={this.childSheetDataChange}\r\n                                                    editedsheetData={this.state.editedsheetData}\r\n                                                    multipleSheetData={this.state.masterData &&\r\n                                                        this.state.masterData.samplestorageretrieval &&\r\n                                                        process(this.state.masterData.samplestorageretrieval || [],\r\n                                                            this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }).data} />\r\n                                            </> \r\n                                                 :\r\n                                                <AddSampleStorageMapping\r\n                                                    operation={this.state.operation}\r\n                                                    selectedRecordFilter={this.state.selectedRecordFilter}\r\n                                                    onInputChange={(e) => this.onInputChange(e)}\r\n                                                    onComboChange={this.onComboChange}\r\n                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                    childDataChange={this.childDataChange}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.state.screenData//this.props.Login.screenData\r\n        }\r\n        //this.props.validateEsignCredential(inputParam, this.props.Login.importRetrieveOrDispose?\"openModal\":\"\");\r\n        this.validateEsignCredential(inputParam, this.state.importRetrieveOrDispose?\"openModal\":\"\");\r\n    }\r\n   //ALPD-4749\r\n\t//Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\r\n    validateEsignCredential = (inputParam, modalName,action) => {\r\n        this.setState({ loading: true })\r\n         if (inputParam && inputParam.inputData && inputParam.inputData.userinfo) {\r\n           inputParam.inputData[\"userinfo\"] = {\r\n             ...inputParam.inputData.userinfo,\r\n             sformname: Lims_JSON_stringify(inputParam.inputData.userinfo.sformname),\r\n             smodulename: Lims_JSON_stringify(inputParam.inputData.userinfo.smodulename),\r\n           }\r\n         }\r\n         return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n           .then(response => {\r\n             if (response.data === \"Success\") {\r\n     \r\n               const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\r\n               inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n     \r\n               if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\r\n     \r\n                 delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n     \r\n                 if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\r\n                   delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                   delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                   delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n     \r\n     \r\n                 }\r\n     \r\n                 // ALPD-2437 added for Type3 Component. Use selected record to clear esign values\r\n                 if (inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"]) {\r\n     \r\n                   delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignreason\"];\r\n                   delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignpassword\"];\r\n                   delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esigncomments\"];\r\n                   delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"agree\"];\r\n                 }\r\n               }\r\n               return(this.crudMasterSampleStorageRetrieval(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"], modalName,undefined,action))  \r\n             }\r\n           })\r\n           .catch(error => {\r\n             if (error.response.status === 500) {\r\n               toast.error(error.message);\r\n              } else{\r\n               toast.warn(error.response.data);\r\n               }\r\n           this.setState({\r\n               loading: false\r\n           });\r\n           })\r\n     }\r\n     \r\n\t//ALPD-4749\r\n\t//Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\r\n     crudMasterSampleStorageRetrieval = (inputParam, masterData, modalName, defaultInput,action)=> {\r\n        this.setState({ loading: true,dynamicfields:[] })\r\n              let requestUrl = '';\r\n              let urlArray = [];\r\n              if (inputParam.isFileupload) {\r\n                const formData = inputParam.formData;\r\n                formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\r\n                requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, formData);\r\n            } else {\r\n              requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData });\r\n            } \r\n              urlArray = [requestUrl];\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                            this.setState({\r\n                                isInitialRender: true,\r\n                                selectedRecord: {},\r\n                                masterData: {\r\n                                    ...masterData, ...response[0].data\r\n                                },\r\n                                [modalName]: false,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                            });\r\n                    }).catch(error => {\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else { \r\n                                toast.warn(error.response.data);\r\n                        }\r\n                        this.setState({\r\n                            loadEsign: false,loading: false\r\n                        });\r\n                    });\r\n          }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential\r\n})(injectIntl(SampleStorageRetrieval));"]},"metadata":{},"sourceType":"module"}