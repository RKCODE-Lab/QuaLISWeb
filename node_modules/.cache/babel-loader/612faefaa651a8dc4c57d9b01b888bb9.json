{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData, getSameRecordFromTwoArrays, getSameRecordFromTwoDifferentArrays } from '../components/CommonScript';\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\nimport { REPORTTYPE, reportCOAType, transactionStatus } from '../components/Enumeration';\nexport function getsubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      nflag: 2,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      nsectioncode: inputData.nsectioncode,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo,\n      nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    const subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"approval/getApprovalSubSample\", inputParamData).then(response => {\n        let responseData = { ...response.data,\n          APSelectedSample: inputData.APSelectedSample\n        };\n        responseData = sortData(responseData);\n        let oldSelectedTest = inputData.masterData.APSelectedTest ? inputData.masterData.APSelectedTest : [];\n        inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []; //inputData.masterData.APSelectedSubSample = responseData.APSelectedSubSample ? responseData.APSelectedSubSample : inputData.masterData.AP_SUBSAMPLE.length > 0 ? [inputData.masterData.AP_SUBSAMPLE[0]] : []\n\n        let skipInfo = {};\n        let masterData = {};\n\n        if (subSample) {\n          let oldSelectedSubSample = inputData.masterData.APSelectedSubSample;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            APSelectedSample: inputData.APSelectedSample,\n            selectedPreregno: inputData.npreregno,\n            APSelectedSubSample: inputData.masterData.AP_SUBSAMPLE.length > 0 ? [inputData.masterData.AP_SUBSAMPLE[0]] : []\n          };\n\n          if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {\n            const wholeSubSampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((subsample, index) => {\n              if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n            });\n\n            if (oldSelectedSubSample.length > 0) {\n              masterData = { ...masterData,\n                APSelectedSubSample: oldSelectedSubSample\n              };\n            }\n\n            const APSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, masterData.APSelectedSubSample, 'npreregno');\n            masterData = { ...masterData,\n              APSelectedTest\n            };\n          }\n\n          if (inputData.checkBoxOperation === 3) {\n            masterData = { ...masterData,\n              APSelectedTest: masterData.AP_TEST.length > 0 ? [masterData.AP_TEST[0]] : []\n            };\n          }\n\n          let {\n            testskip,\n            testtake,\n            subSampleSkip,\n            subSampleTake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.AP_SUBSAMPLE.length < inputData.subSampleSkip) {\n            testskip = 0;\n            subSampleSkip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake,\n              subSampleSkip,\n              subSampleTake\n            };\n          }\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          let masterData = { ...inputData.masterData,\n            APSelectedSample: inputData.APSelectedSample,\n            APSelectedSubSample: inputData.masterData.APSelectedSubSample,\n            APSelectedTest: inputData.masterData.APSelectedTest || [],\n            selectedPreregno: inputData.npreregno\n          };\n\n          if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n            inputData.searchSubSampleRef.current.value = \"\";\n            masterData['searchedSubSample'] = undefined;\n          }\n\n          if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n            inputData.searchTestRef.current.value = \"\";\n            masterData['searchedTests'] = undefined;\n          }\n\n          let {\n            testskip,\n            testtake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.AP_TEST.length < inputData.testskip) {\n            testskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake\n            };\n          }\n\n          let ApprovalParameter = [];\n          let ResultUsedInstrument = [];\n          let ResultUsedTasks = [];\n          let RegistrationTestAttachment = [];\n          let ApprovalResultChangeHistory = [];\n          let RegistrationTestComment = [];\n          let ApprovalHistory = [];\n\n          if (inputData.checkBoxOperation === 1) {\n            let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n            oldSelectedTest.map((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n\n              return null;\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                selectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = masterData.selectedTest[0].ntransactiontestcode;\n            }\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_RESULTS\":\n                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_INSTRUMENT\":\n                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ResultUsedInstrument\";\n                dataStateName = \"instrumentDataState\";\n                break;\n\n              case \"IDS_TASK\":\n                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ResultUsedTasks\";\n                dataStateName = \"taskDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n\n              case \"IDS_RESULTCHANGEHISTORY\":\n                ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalResultChangeHistory\";\n                dataStateName = \"resultChangeDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTAPPROVALHISTORY\":\n                ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalHistory\";\n                dataStateName = \"historyDataState\";\n                break;\n\n              default:\n                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          } else if (inputData.checkBoxOperation === 5) {\n            masterData = { ...masterData,\n              selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n            };\n            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n            let list = [];\n            let dbData = [];\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_RESULTS\":\n                dbData = response.data.ApprovalParameter || [];\n                list = [...inputData.masterData.ApprovalParameter, ...dbData];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_INSTRUMENT\":\n                dbData = response.data.ResultUsedInstrument || [];\n                list = [...inputData.masterData.ResultUsedInstrument, ...dbData];\n                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TASK\":\n                dbData = response.data.ResultUsedTasks || [];\n                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                dbData = response.data.RegistrationTestAttachment || [];\n                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_RESULTCHANGEHISTORY\":\n                dbData = response.data.ApprovalResultChangeHistory || [];\n                list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData];\n                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                dbData = response.data.RegistrationTestComment || [];\n                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTAPPROVALHISTORY\":\n                dbData = response.data.ApprovalHistory || [];\n                list = [...inputData.masterData.ApprovalHistory, ...dbData];\n                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              default:\n                dbData = response.data.ApprovalParameter || [];\n                list = [...inputData.masterData.ApprovalParameter, ...dbData];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n            }\n          } else {\n            masterData = { ...masterData,\n              selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n            };\n            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n            let list = [];\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_RESULTS\":\n                list = response.data.ApprovalParameter || [];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_INSTRUMENT\":\n                list = response.data.ResultUsedInstrument || [];\n                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ResultUsedInstrument\";\n                dataStateName = \"instrumentDataState\";\n                break;\n\n              case \"IDS_TASK\":\n                list = response.data.ResultUsedTasks || [];\n                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ResultUsedTasks\";\n                dataStateName = \"taskDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                list = response.data.RegistrationTestAttachment || [];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n\n              case \"IDS_RESULTCHANGEHISTORY\":\n                list = response.data.ApprovalResultChangeHistory || [];\n                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalResultChangeHistory\";\n                dataStateName = \"resultChangeDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                list = response.data.RegistrationTestComment || [];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTAPPROVALHISTORY\":\n                list = response.data.ApprovalHistory || [];\n                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalHistory\";\n                dataStateName = \"historyDataState\";\n                break;\n\n              default:\n                list = [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          }\n\n          masterData = { ...masterData,\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          };\n        }\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        skipInfo = { ...skipInfo,\n          samplePrintHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab,\n            activeSampleTab: inputData.activeSampleTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let skipInfo = {};\n      let bool = false;\n      let {\n        testskip,\n        testtake,\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.APSelectedTest;\n      let oldSelectedSubSample = inputData.masterData.APSelectedSubSample;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      let ApprovalParameter = [];\n      let ResultUsedInstrument = [];\n      let ResultUsedTasks = [];\n      let RegistrationTestAttachment = [];\n      let ApprovalResultChangeHistory = [];\n      let RegistrationTestComment = [];\n      let ApprovalHistory = [];\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\n        let APSelectedSample = inputData.APSelectedSample;\n        let selectedPreregno = inputData.npreregno;\n        let APSelectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\n        let APSelectedSubSample = inputData.masterData.AP_SUBSAMPLE;\n\n        if (subSample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\n          APSelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.AP_SUBSAMPLE[0]];\n\n          if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let masterData = { ...inputData.masterData,\n          APSelectedSample,\n          APSelectedSubSample,\n          APSelectedTest\n        };\n\n        if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        inputData = { ...inputData,\n          childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          APSelectedSample,\n          selectedPreregno,\n          APSelectedTest,\n          APSelectedSubSample,\n          checkBoxOperation: 3\n        };\n\n        if (subSample) {\n          if (APSelectedTest.length === 0) {\n            inputData[\"npreregno\"] = APSelectedSubSample.map(x => x.npreregno).join(\",\");\n            inputData[\"ntransactionsamplecode\"] = APSelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n            inputData[\"checkBoxOperation\"] = 3;\n            inputData[\"childTabsKey\"] = [\"AP_TEST\"];\n            dispatch(getTestChildTabDetail(inputData, true));\n          } else {\n            dispatch(getTestChildTabDetail(inputData, true));\n          }\n        } else {\n          dispatch(getTestChildTabDetail(inputData, true));\n        } // dispatch(getTestChildTabDetail(inputData, true));\n\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [],\n          selectedSample: inputData.selectedSample,\n          selectedSubSample: inputData.masterData.AP_SUBSAMPLE\n        };\n        let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\";\n        }\n\n        switch (inputData.activeTestTab) {\n          case \"IDS_RESULTS\":\n            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_INSTRUMENT\":\n            ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TASK\":\n            ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTATTACHMENTS\":\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_RESULTCHANGEHISTORY\":\n            ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTCOMMENTS\":\n            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTAPPROVALHISTORY\":\n            ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          default:\n            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              // wholeApprovalParameter,\n              ApprovalParameter,\n              // wholeResultUsedInstrument,\n              ResultUsedInstrument,\n              // wholeResultUsedTasks,\n              ResultUsedTasks,\n              // wholeRegistrationTestAttachment,\n              RegistrationTestAttachment,\n              // wholeApprovalResultChangeHistory,\n              ApprovalResultChangeHistory,\n              // wholeRegistrationTestComments,\n              RegistrationTestComment,\n              ApprovalHistory\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }\n    }\n  };\n}\nexport function getTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 3,\n      nflag: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalversioncode: inputData.napprovalversioncode,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      nsectioncode: inputData.nsectioncode,\n      ntestcode: inputData.ntestcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let masterData = {};\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"approval/getApprovalTest\", inputParamData).then(response => {\n        let responseData = { ...response.data\n        }; //responseData = sortData(responseData)\n\n        inputData.searchTestRef.current.null = \"\"; //inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n\n        let oldSelectedTest = inputData.masterData.APSelectedTest;\n        inputData.masterData.APSelectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          APSelectedTest: inputData.masterData.APSelectedTest,\n          // APselectedSample: inputData.APSelectedSample,\n          APSelectedSubSample: inputData.APSelectedSubSample,\n          selectedPreregno: inputData.npreregno\n        };\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n\n        if (inputData.masterData.AP_TEST.length < inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        let skipInfo = {};\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let ApprovalParameter = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ApprovalResultChangeHistory = [];\n        let RegistrationTestComment = [];\n        let ApprovalHistory = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode; // if (oldSelectedTest.length > 0) {\n          //     keepOld = true\n          //     masterData = {\n          //         ...masterData,\n          //         selectedTest: oldSelectedTest\n          //     }\n          // } else {\n\n          ntransactiontestcode = masterData.APSelectedTest[0].ntransactiontestcode; // }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalHistory\";\n              dataStateName = \"historyDataState\";\n              break;\n\n            default:\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          masterData = { ...masterData,\n            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n          };\n          let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.ApprovalParameter || [];\n              list = [...inputData.masterData.ApprovalParameter, ...dbData];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(dbData, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.ResultUsedInstrument || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...dbData];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ApprovalResultChangeHistory || [];\n              list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData];\n              ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              dbData = response.data.ApprovalHistory || [];\n              list = [...inputData.masterData.ApprovalHistory, ...dbData];\n              ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.ApprovalParameter || [];\n              list = [...inputData.masterData.ApprovalParameter, ...dbData];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n          let wholeTestListForSelectAll = masterData.AP_TEST;\n          let wholeTestListForSelectSingleSelect = oldSelectedTest.forEach((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              APSelectedTest: oldSelectedTest //oldSelectedTest\n\n            };\n          } else {\n            ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\";\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalHistory\";\n              dataStateName = \"historyDataState\";\n              break;\n\n            default:\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else {\n          masterData = { ...masterData,\n            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n          };\n          let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n          let list = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              list = response.data.ApprovalParameter || [];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument || [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks || [];\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment || [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ApprovalResultChangeHistory || [];\n              ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment || [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              list = response.data.ApprovalHistory || [];\n              ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalHistory\";\n              dataStateName = \"historyDataState\";\n              break;\n\n            default:\n              list = [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          ApprovalParameter,\n          ResultUsedInstrument,\n          ResultUsedTasks,\n          RegistrationTestAttachment,\n          ApprovalResultChangeHistory,\n          RegistrationTestComment,\n          ApprovalHistory\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        skipInfo = { ...skipInfo,\n          samplePrintHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              APSelectedSubSample: inputData.APSelectedSubSample,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              activeTestTab: inputData.activeTestTab,\n              activeSampleTab: inputData.activeSampleTab,\n              skip: undefined,\n              take: undefined,\n              ...skipInfo\n            },\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let bool = false;\n      let skipInfo = {};\n      let {\n        testskip,\n        testtake\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.APSelectedTest;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      let ApprovalParameter = [];\n      let ResultUsedInstrument = [];\n      let ResultUsedTasks = [];\n      let RegistrationTestAttachment = [];\n      let ApprovalResultChangeHistory = [];\n      let RegistrationTestComment = [];\n      let ApprovalHistory = [];\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        //let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\n        let APSelectedSample = inputData.masterData.APSelectedSample;\n        let selectedPreregno = inputData.npreregno; //let selectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\n\n        let APSelectedSubSample = inputData.masterData.APSelectedSubSample;\n        let filterTestSameOldSelectedTest = getSameRecordFromTwoDifferentArrays(oldSelectedTest, inputData.masterData.AP_TEST, \"ntransactiontestcode\");\n        let APSelectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : [inputData.masterData.AP_TEST[0]];\n        let ntransactiontestcode = APSelectedTest.length > 0 ? APSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\n\n        if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        inputData = { ...inputData,\n          childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          APSelectedSample,\n          selectedPreregno,\n          APSelectedTest,\n          APSelectedSubSample,\n          checkBoxOperation: 3,\n          skipInfo\n        };\n        dispatch(getTestChildTabDetail(inputData, true));\n      } else {\n        let oldSelectedTest = inputData.masterData.APSelectedTest;\n        let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        let isGrandChildGetRequired = false;\n\n        if (TestSelected.length > 0) {\n          isGrandChildGetRequired = true;\n        } else {\n          isGrandChildGetRequired = false;\n        }\n\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n        if (isGrandChildGetRequired) {\n          let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"-1\";\n          let APSelectedSubSample = inputData.APSelectedSubSample; // let selectedPreregno = inputData.npreregno;\n\n          let APSelectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []; // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\n\n          let masterData = { ...inputData.masterData,\n            APSelectedSubSample,\n            APSelectedTest\n          };\n          inputData = { ...inputData,\n            childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"],\n            ntransactiontestcode,\n            masterData,\n            APSelectedTest,\n            APSelectedSubSample,\n            checkBoxOperation: 3\n          };\n          dispatch(getTestChildTabDetail(inputData, true));\n        } else {\n          let masterData = { ...inputData.masterData,\n            APSelectedSubSample: inputData.APSelectedSubSample,\n            selectedTransactioncode: inputData.ntransactionsamplecode,\n            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n          };\n          const wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.forEach((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              APSelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\";\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            default:\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...masterData,\n                ApprovalParameter,\n                ResultUsedInstrument,\n                ResultUsedTasks,\n                RegistrationTestAttachment,\n                ApprovalResultChangeHistory,\n                RegistrationTestComment,\n                ApprovalHistory\n              },\n              loading: false,\n              showFilter: false,\n              ...skipInfo,\n              activeSampleTab: inputData.activeSampleTab,\n              activeTestTab: inputData.activeTestTab\n            }\n          });\n        }\n      }\n    }\n  };\n}\nexport function getTestChildTabDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      let inputParamData = {\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n      let {\n        testtake\n      } = inputData;\n      let activeName = \"\";\n      let dataStateName = \"\";\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_PARAMETERRESULTS\":\n          url = \"registration/getregistrationparameter\";\n          activeName = \"RegistrationParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          url = \"resultentrybysample/getResultUsedInstrument\";\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_TASK\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          url = \"comments/getTestComment\";\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          url = \"approval/getapprovalparameter\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          url = \"approval/getApprovalResultChangeHistory\";\n          activeName = \"ApprovalResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_TESTAPPROVALHISTORY\":\n          url = \"approval/getApprovalHistory\";\n          activeName = \"ApprovalHistory\";\n          dataStateName = \"historyDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        default:\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n\n        if (isServiceRequired) {\n          rsapi.post(url, inputParamData).then(response => {\n            let skipInfo = {};\n            let responseData = { ...response.data,\n              APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample,\n              selectedTest: inputData.APselectedTest\n            }; //responseData = sortData(responseData)\n            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\n\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n            let masterData = { ...inputData.masterData,\n              APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample,\n              APSelectedTest: inputData.APSelectedTest,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              selectedTestCode: inputData.ntransactiontestcode\n            };\n\n            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n              skipInfo = {\n                [dataStateName]: { ...inputData[dataStateName],\n                  skip: 0,\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            } else {\n              skipInfo = { ...skipInfo,\n                [dataStateName]: { ...inputData[dataStateName],\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            }\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                loading: false,\n                showFilter: false,\n                activeTestTab: inputData.activeTestTab,\n                screenName: inputData.screenName,\n                testtake,\n                testskip: undefined,\n                ...skipInfo\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n          });\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n          let skipInfo = {};\n          let masterData = { ...inputData.masterData,\n            APSelectedTest: inputData.APSelectedTest,\n            selectedPreregno: inputData.npreregno,\n            selectedSampleCode: inputData.ntransactionsamplecode,\n            selectedTestCode: inputData.ntransactiontestcode\n          };\n\n          if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n            skipInfo = {\n              [dataStateName]: { ...inputData[dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeTestTab,\n              screenName: inputData.screenName,\n              testtake,\n              testskip: undefined,\n              ...skipInfo\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      let {\n        ApprovalParameter,\n        ResultUsedInstrument,\n        ResultUsedTasks,\n        RegistrationTestAttachment,\n        ApprovalResultChangeHistory,\n        RegistrationTestComment,\n        ApprovalHistory\n      } = inputData.masterData;\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          ApprovalParameter = [];\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          ResultUsedInstrument = [];\n          break;\n\n        case \"IDS_TASK\":\n          ResultUsedTasks = [];\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          RegistrationTestAttachment = [];\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          ApprovalResultChangeHistory = [];\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          RegistrationTestComment = [];\n          break;\n\n        case \"IDS_APPROVALHISTORY\":\n          ApprovalHistory = [];\n          break;\n\n        default:\n          ApprovalParameter = [];\n          break;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedTest: [],\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          },\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function getSampleChildTabDetail(inputData) {\n  return function (dispatch) {\n    if (inputData.npreregno.length > 0) {\n      let inputParamData = {\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n\n      switch (inputData.activeSampleTab) {\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        case \"IDS_SAMPLECOMMENTS\":\n          url = \"resultentrybysample/getResultUsedInstrument\";\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          break;\n\n        case \"IDS_SOURCE\":\n          url = \"registration/getRegistrationSourceCountry\";\n          break;\n\n        case \"IDS_SAMPLEAPPROVALHISTORY\":\n          url = \"approval/getSampleApprovalHistory\";\n          break;\n\n        case \"IDS_PRINTHISTORY\":\n          url = \"approval/getPrintHistory\";\n          break;\n\n        case \"IDS_REPORTHISTORY\":\n          url = \"approval/getCOAHistory\";\n          break;\n\n        default:\n          url = null;\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n        rsapi.post(url, inputParamData).then(response => {\n          let responseData = { ...response.data\n          };\n          responseData = sortData(responseData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData.masterData,\n                ...responseData,\n                selectedSample: inputData.selectedSample,\n                selectedTestCode: inputData.ntransactiontestcode\n              },\n              loading: false,\n              showFilter: false,\n              activeSampleTab: inputData.activeSampleTab,\n              screenName: inputData.screenName\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              selectedSample: inputData.selectedSample\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      toast.warn(\"Please Select a Sample\");\n    }\n  };\n}\nexport function performAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/performAction\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data,\n        AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\n        AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\n        AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\n      }; // dispatch({type: DEFAULT_RETURN, payload:{\n      // masterData:{\n      //     ...inputParam.inputData.masterData,\n      //     ...response.data, \n      //     AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.AP_SAMPLE,'npreregno'),\n      //     AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\n      //     AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.AP_TEST,'ntransactiontestcode')\n      // },\n      //     loading:false ,\n      //     loadEsign:false,\n      //     openChildModal:false                     \n      // }}) \n\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"dynamic\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateDecision(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/updateDecision\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData); // dispatch({type: DEFAULT_RETURN, payload:{\n      //     masterData:{\n      //         ...inputParam.masterData,\n      //         ...responseData, \n      //         AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.AP_SAMPLE,'npreregno'),\n      //         AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\n      //         AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.AP_TEST,'ntransactiontestcode')\n      //     },\n      //     loading:false                      \n      // }}) \n\n      let masterData = { ...inputParam.masterData,\n        ...responseData,\n        AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\n        AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\n        AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\n      };\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"dynamic\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getFilterStatus\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"approval/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(\"Please Select All the Values in Filter\");\n    }\n  };\n}\nexport function getApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovalSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getApprovalSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\"; // masterData['searchedTest'] = undefined\n\n        masterData['searchedTests'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getStatusCombo(inputParam) {\n  return function (dispatch) {\n    let inputData = {\n      ntransactionresultcode: inputParam.primaryKeyValue,\n      userinfo: inputParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getStatusCombo\", inputData).then(response => {\n      let responseData = { ...response.data\n      }; //responseData = sortData(responseData)\n\n      const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\n      let Grade = GradeListMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            Grade,\n            selectedParamId: inputParam.primaryKeyValue\n          },\n          loading: false,\n          showFilter: false,\n          openChildModal: true,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord: {\n            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\n            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\n            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\n          },\n          operation: \"enforce\",\n          screenName: \"IDS_STATUS\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getParameterEdit(inputParam) {\n  return function (dispatch) {\n    let inputData = {\n      ntransactiontestcode: inputParam.selectedTest && inputParam.selectedTest.map(item => item.ntransactiontestcode).join(\",\"),\n      userinfo: inputParam.userInfo\n    };\n\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      dispatch(initRequest(true));\n      rsapi.post(\"approval/getEditParameter\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...responseData,\n            loading: false,\n            openChildModal: true,\n            operation: \"update\",\n            screenName: \"IDS_APPROVALPARAMETER\" // ncontrolCode:inputParam.ncontrolCode,\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          multilingualMsg: \"IDS_SELECTTEST\"\n        }\n      });\n    }\n  };\n}\nexport function validateEsignforApproval(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        if (inputParam.operation === 'dynamic') {\n          const methodUrl = \"performaction\";\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n          }\n\n          dispatch(performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]));\n        } else if (inputParam.operation === 'reportgeneration') {\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"agree\"];\n          inputParam[\"screenData\"][\"inputParam\"][\"reporparam\"][\"userinfo\"] = inputParam.inputData.userinfo;\n          dispatch(generateCOAReport(inputParam[\"screenData\"][\"inputParam\"]['reporparam']));\n        } else if (inputParam.operation === 'decision') {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"agree\"];\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n          dispatch(updateDecision(inputParam[\"screenData\"][\"inputParam\"]));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function previewSampleReport(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let ndecisionStatus = inputParam.sample.ndecisionstatus;\n\n    if (inputParam.sample.ndecisionstatus === undefined || inputParam.sample.ndecisionstatus === transactionStatus.DRAFT) {\n      ndecisionStatus = transactionStatus.PASS;\n    }\n\n    const inputData = {\n      ndecisionstatus: ndecisionStatus,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.sample.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLECERTIFICATEPRIVIEW,\n      nreporttypecode: REPORTTYPE.SAMPLEREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.sample.nregtypecode,\n      nregsubtypecode: inputParam.sample.nregsubtypecode,\n      npreregno: inputParam.sample.npreregno\n    };\n    rsapi.post(\"approval/previewSampleReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generateCOAReport(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: inputParam.sample.npreregno,\n      nsectioncode: inputParam.nsectioncode || -1,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.sample.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLEWISE,\n      nreporttypecode: REPORTTYPE.COAREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.nregtypecode,\n      nregsubtypecode: inputParam.nregsubtypecode\n    };\n    rsapi.post(\"approval/generateCOAReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEnforceCommentsHistory(selectedParam, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getEnforceCommentsHistory\", {\n      ntransactionresultcode: selectedParam.ntransactionresultcode,\n      userinfo: userInfo\n    }).then(response => {\n      if (response.data.length > 0) {\n        masterData = { ...masterData,\n          enforceCommentsHistory: response.data\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterData,\n            openChildModal: true,\n            operation: \"view\",\n            screenName: \"IDS_ENFORCECOMMENTHISTORY\"\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            multilingualMsg: \"IDS_NOPREVIOUSCOMMENTSFOUND\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/ApprovalAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","replaceUpdatedObject","sortData","getSameRecordFromTwoArrays","getSameRecordFromTwoDifferentArrays","postCRUDOrganiseTransSearch","REPORTTYPE","reportCOAType","transactionStatus","getsubSampleDetail","inputData","isServiceRequired","dispatch","inputParamData","ntype","nflag","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntransactionstatus","nsectioncode","ntestcode","napprovalversioncode","napprovalconfigcode","activeTestTab","activeSampleTab","userinfo","nneedsubsample","masterData","realRegSubTypeValue","activeName","dataStateName","subSample","post","then","response","responseData","data","APSelectedSample","oldSelectedTest","APSelectedTest","AP_TEST","length","skipInfo","oldSelectedSubSample","APSelectedSubSample","childTabsKey","checkBoxOperation","removeElementFromArray","selectedPreregno","AP_SUBSAMPLE","wholeSubSampleList","map","b","ntransactionsamplecode","forEach","subsample","index","includes","splice","testskip","testtake","subSampleSkip","subSampleTake","bool","searchSubSampleRef","undefined","current","value","searchTestRef","ApprovalParameter","ResultUsedInstrument","ResultUsedTasks","RegistrationTestAttachment","ApprovalResultChangeHistory","RegistrationTestComment","ApprovalHistory","wholeTestList","ntransactiontestcode","test","keepOld","selectedTest","list","dbData","skip","sort","filter","samplePrintHistoryDataState","sampleHistoryDataState","type","payload","loading","showFilter","take","catch","error","status","message","warn","subsampletake","subsampleskip","TestSelected","isGrandChildGetRequired","selectedSample","toString","filterSelectedSubSample","x","join","getTestChildTabDetail","selectedSubSample","getTestDetail","null","wholeTestListForSelectAll","wholeTestListForSelectSingleSelect","selectedSampleCode","filterTestSameOldSelectedTest","selectedTransactioncode","url","APselectedTest","selectedTestCode","screenName","getSampleChildTabDetail","performAction","inputParam","AP_SAMPLE","updatedSample","updatedSubSample","updatedTest","respObject","openChildModal","operation","masterStatus","errorCode","loadEsign","showEsign","selectedRecord","postParamList","updateDecision","getRegistrationType","SampleTypeValue","getRegistrationSubType","RegTypeValue","getFilterStatus","RegSubTypeValue","getFilterBasedTest","rtn","getApprovalVersion","getApprovalSample","searchSampleRef","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","getStatusCombo","ntransactionresultcode","primaryKeyValue","userInfo","GradeListMap","Grade","get","selectedParamId","ncontrolCode","senforcestatuscomment","parameterComment","getParameterEdit","item","multilingualMsg","validateEsignforApproval","methodUrl","toLowerCase","generateCOAReport","previewSampleReport","ndecisionStatus","sample","ndecisionstatus","DRAFT","PASS","nprimarykey","ncoareporttypecode","SAMPLECERTIFICATEPRIVIEW","nreporttypecode","SAMPLEREPORT","sprimarykeyname","ncontrolcode","document","getElementById","setAttribute","filepath","click","SAMPLEWISE","COAREPORT","getEnforceCommentsHistory","selectedParam","enforceCommentsHistory"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData, getSameRecordFromTwoArrays, getSameRecordFromTwoDifferentArrays } from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport { REPORTTYPE, reportCOAType, transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getsubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"approval/getApprovalSubSample\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data, APSelectedSample: inputData.APSelectedSample }\r\n                    responseData = sortData(responseData)\r\n                    let oldSelectedTest = inputData.masterData.APSelectedTest ? inputData.masterData.APSelectedTest : []\r\n                    inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                    //inputData.masterData.APSelectedSubSample = responseData.APSelectedSubSample ? responseData.APSelectedSubSample : inputData.masterData.AP_SUBSAMPLE.length > 0 ? [inputData.masterData.AP_SUBSAMPLE[0]] : []\r\n                    let skipInfo = {}\r\n                    let masterData = {}\r\n                    if (subSample) {\r\n                        let oldSelectedSubSample = inputData.masterData.APSelectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            APSelectedSample: inputData.APSelectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            APSelectedSubSample: inputData.masterData.AP_SUBSAMPLE.length > 0 ?\r\n                                [inputData.masterData.AP_SUBSAMPLE[0]] : [],\r\n                        }\r\n\r\n                        if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {\r\n\r\n                            const wholeSubSampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    APSelectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                            const APSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest,\r\n                                masterData.APSelectedSubSample, 'npreregno')\r\n                            masterData = {\r\n                                ...masterData,\r\n                                APSelectedTest\r\n                            }\r\n                        }\r\n                        if (inputData.checkBoxOperation === 3) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                APSelectedTest: masterData.AP_TEST.length > 0 ? [masterData.AP_TEST[0]] : []\r\n                            }\r\n                        }\r\n\r\n\r\n                        let { testskip, testtake, subSampleSkip, subSampleTake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.AP_SUBSAMPLE.length < inputData.subSampleSkip) {\r\n                            testskip = 0;\r\n                            subSampleSkip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake, subSampleSkip, subSampleTake }\r\n                        }\r\n                    }\r\n                    else {\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n                        let masterData = {\r\n                            ...inputData.masterData,\r\n                            APSelectedSample: inputData.APSelectedSample,\r\n                            APSelectedSubSample: inputData.masterData.APSelectedSubSample,\r\n                            APSelectedTest: inputData.masterData.APSelectedTest || [],\r\n                            selectedPreregno: inputData.npreregno,\r\n                        }\r\n                        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                            inputData.searchSubSampleRef.current.value = \"\";\r\n                            masterData['searchedSubSample'] = undefined\r\n                        }\r\n                        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                            inputData.searchTestRef.current.value = \"\"\r\n                            masterData['searchedTests'] = undefined\r\n                        }\r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n                        if (inputData.masterData.AP_TEST.length < inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                        let ApprovalParameter = [];\r\n                        let ResultUsedInstrument = [];\r\n                        let ResultUsedTasks = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        let ApprovalResultChangeHistory = [];\r\n                        let RegistrationTestComment = [];\r\n                        let ApprovalHistory = [];\r\n\r\n                        if (inputData.checkBoxOperation === 1) {\r\n\r\n                            let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.map((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.selectedTest[0].ntransactiontestcode\r\n                            }\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_RESULTS\":\r\n                                    ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_INSTRUMENT\":\r\n                                    ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedInstrument\"\r\n                                    dataStateName = \"instrumentDataState\"\r\n                                    break;\r\n                                case \"IDS_TASK\":\r\n                                    ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedTasks\"\r\n                                    dataStateName = \"taskDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                                case \"IDS_RESULTCHANGEHISTORY\":\r\n                                    ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalResultChangeHistory\"\r\n                                    dataStateName = \"resultChangeDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTAPPROVALHISTORY\":\r\n                                    ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalHistory\"\r\n                                    dataStateName = \"historyDataState\"\r\n                                    break;\r\n                                default:\r\n                                    ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        } else if (inputData.checkBoxOperation === 5) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                            }\r\n                            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\r\n                            let list = [];\r\n                            let dbData = []\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_RESULTS\":\r\n                                    dbData = response.data.ApprovalParameter || []\r\n                                    list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_INSTRUMENT\":\r\n                                    dbData = response.data.ResultUsedInstrument || []\r\n                                    list = [...inputData.masterData.ResultUsedInstrument, ...dbData]\r\n                                    ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TASK\":\r\n                                    dbData = response.data.ResultUsedTasks || []\r\n                                    list = [...inputData.masterData.ResultUsedTasks, ...dbData]\r\n                                    ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    dbData = response.data.RegistrationTestAttachment || []\r\n                                    list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_RESULTCHANGEHISTORY\":\r\n                                    dbData = response.data.ApprovalResultChangeHistory || []\r\n                                    list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData]\r\n                                    ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    dbData = response.data.RegistrationTestComment || []\r\n                                    list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TESTAPPROVALHISTORY\":\r\n                                    dbData = response.data.ApprovalHistory || []\r\n                                    list = [...inputData.masterData.ApprovalHistory, ...dbData]\r\n                                    ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                default:\r\n                                    dbData = response.data.ApprovalParameter || []\r\n                                    list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                            }\r\n                        } else {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                            }\r\n                            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0\r\n                            let list = [];\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_RESULTS\":\r\n                                    list = response.data.ApprovalParameter || []\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_INSTRUMENT\":\r\n                                    list = response.data.ResultUsedInstrument || []\r\n                                    ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedInstrument\"\r\n                                    dataStateName = \"instrumentDataState\"\r\n                                    break;\r\n                                case \"IDS_TASK\":\r\n                                    list = response.data.ResultUsedTasks || []\r\n                                    ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedTasks\"\r\n                                    dataStateName = \"taskDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    list = response.data.RegistrationTestAttachment || []\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                                case \"IDS_RESULTCHANGEHISTORY\":\r\n                                    list = response.data.ApprovalResultChangeHistory || []\r\n                                    ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalResultChangeHistory\"\r\n                                    dataStateName = \"resultChangeDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    list = response.data.RegistrationTestComment || []\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTAPPROVALHISTORY\":\r\n                                    list = response.data.ApprovalHistory || []\r\n                                    ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalHistory\"\r\n                                    dataStateName = \"historyDataState\"\r\n                                    break;\r\n                                default:\r\n                                    list = [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter]\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n\r\n                        masterData = {\r\n                            ...masterData,\r\n                            ApprovalParameter,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            ApprovalResultChangeHistory,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let skipInfo = {};\r\n            let bool = false;\r\n            let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n            let oldSelectedTest = inputData.masterData.APSelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.APSelectedSubSample\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            let ApprovalParameter = [];\r\n            let ResultUsedInstrument = [];\r\n            let ResultUsedTasks = [];\r\n            let RegistrationTestAttachment = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            let RegistrationTestComment = [];\r\n            let ApprovalHistory = [];\r\n\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let APSelectedSample = inputData.APSelectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                let APSelectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\r\n                let APSelectedSubSample = inputData.masterData.AP_SUBSAMPLE\r\n\r\n                if (subSample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    APSelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.AP_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n\r\n                }\r\n                let masterData = { ...inputData.masterData, APSelectedSample, APSelectedSubSample, APSelectedTest }\r\n                if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, APSelectedSample, selectedPreregno, APSelectedTest,\r\n                    APSelectedSubSample, checkBoxOperation: 3\r\n                }\r\n\r\n                if (subSample) {\r\n                    if (APSelectedTest.length === 0) {\r\n                        inputData[\"npreregno\"] = APSelectedSubSample.map(x => x.npreregno).join(\",\")\r\n                        inputData[\"ntransactionsamplecode\"] = APSelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\")\r\n                        inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"childTabsKey\"] = [\"AP_TEST\"]\r\n                        dispatch(getTestChildTabDetail(inputData, true));\r\n                    } else {\r\n                        dispatch(getTestChildTabDetail(inputData, true));\r\n                    }\r\n                } else {\r\n                    dispatch(getTestChildTabDetail(inputData, true));\r\n                }\r\n\r\n                // dispatch(getTestChildTabDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [],\r\n                    selectedSample: inputData.selectedSample,\r\n                    selectedSubSample: inputData.masterData.AP_SUBSAMPLE\r\n                }\r\n                let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\";\r\n                }\r\n                switch (inputData.activeTestTab) {\r\n                    case \"IDS_RESULTS\":\r\n                        ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n\r\n                        break;\r\n                    case \"IDS_INSTRUMENT\":\r\n                        ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TASK\":\r\n                        ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TESTATTACHMENTS\":\r\n                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_RESULTCHANGEHISTORY\":\r\n                        ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TESTCOMMENTS\":\r\n                        RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TESTAPPROVALHISTORY\":\r\n                        ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    default:\r\n                        ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            // wholeApprovalParameter,\r\n                            ApprovalParameter,\r\n                            // wholeResultUsedInstrument,\r\n                            ResultUsedInstrument,\r\n                            // wholeResultUsedTasks,\r\n                            ResultUsedTasks,\r\n                            // wholeRegistrationTestAttachment,\r\n                            RegistrationTestAttachment,\r\n                            // wholeApprovalResultChangeHistory,\r\n                            ApprovalResultChangeHistory,\r\n                            // wholeRegistrationTestComments,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 3,\r\n            nflag: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let masterData = {};\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"approval/getApprovalTest\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    //responseData = sortData(responseData)\r\n                    inputData.searchTestRef.current.null = \"\"\r\n                    //inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n\r\n                    let oldSelectedTest = inputData.masterData.APSelectedTest\r\n                    inputData.masterData.APSelectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        APSelectedTest: inputData.masterData.APSelectedTest,\r\n                        // APselectedSample: inputData.APSelectedSample,\r\n                        APSelectedSubSample: inputData.APSelectedSubSample,\r\n                        selectedPreregno: inputData.npreregno,\r\n                    }\r\n\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n\r\n                    let { testskip, testtake } = inputData\r\n                    let bool = false;\r\n                    if (inputData.masterData.AP_TEST.length < inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    let skipInfo = {}\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n\r\n                    let ApprovalParameter = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ApprovalResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n                    let ApprovalHistory = [];\r\n\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        // if (oldSelectedTest.length > 0) {\r\n                        //     keepOld = true\r\n                        //     masterData = {\r\n                        //         ...masterData,\r\n                        //         selectedTest: oldSelectedTest\r\n                        //     }\r\n                        // } else {\r\n                        ntransactiontestcode = masterData.APSelectedTest[0].ntransactiontestcode\r\n                        // }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalHistory\"\r\n                                dataStateName = \"historyDataState\"\r\n                                break;\r\n                            default:\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                        }\r\n                        let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\r\n                        let list = [];\r\n                        let dbData = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.ApprovalParameter || []\r\n                                list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(dbData, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.ResultUsedInstrument || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...dbData]\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData]\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ApprovalResultChangeHistory || []\r\n                                list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData]\r\n                                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                dbData = response.data.ApprovalHistory || []\r\n                                list = [...inputData.masterData.ApprovalHistory, ...dbData]\r\n                                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.ApprovalParameter || []\r\n                                list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                        let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                        let wholeTestListForSelectAll = masterData.AP_TEST\r\n                        let wholeTestListForSelectSingleSelect =\r\n                            oldSelectedTest.forEach((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                APSelectedTest: oldSelectedTest\r\n                                //oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\"\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalHistory\"\r\n                                dataStateName = \"historyDataState\"\r\n                                break;\r\n                            default:\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                        }\r\n                        let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0\r\n                        let list = [];\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.ApprovalParameter || []\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument || []\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks || []\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment || []\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ApprovalResultChangeHistory || []\r\n                                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment || []\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                list = response.data.ApprovalHistory || []\r\n                                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalHistory\"\r\n                                dataStateName = \"historyDataState\"\r\n                                break;\r\n                            default:\r\n                                list = [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        ApprovalParameter,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedTasks,\r\n                        RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory,\r\n                        RegistrationTestComment,\r\n                        ApprovalHistory\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                APSelectedSubSample: inputData.APSelectedSubSample,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                activeTestTab: inputData.activeTestTab,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                skip: undefined,\r\n                                take: undefined,\r\n                                ...skipInfo\r\n                            },\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            let bool = false;\r\n            let skipInfo = {};\r\n            let { testskip, testtake } = inputData;\r\n            let oldSelectedTest = inputData.masterData.APSelectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n\r\n            let ApprovalParameter = [];\r\n            let ResultUsedInstrument = [];\r\n            let ResultUsedTasks = [];\r\n            let RegistrationTestAttachment = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            let RegistrationTestComment = [];\r\n\r\n            let ApprovalHistory = [];\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                //let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let APSelectedSample = inputData.masterData.APSelectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                //let selectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\r\n                let APSelectedSubSample = inputData.masterData.APSelectedSubSample\r\n                let filterTestSameOldSelectedTest = getSameRecordFromTwoDifferentArrays(oldSelectedTest, inputData.masterData.AP_TEST, \"ntransactiontestcode\");\r\n                let APSelectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : [inputData.masterData.AP_TEST[0]];\r\n                let ntransactiontestcode = APSelectedTest.length > 0 ? APSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\r\n\r\n\r\n\r\n                if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true;\r\n\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { testskip, testtake }\r\n\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, APSelectedSample, selectedPreregno, APSelectedTest,\r\n                    APSelectedSubSample, checkBoxOperation: 3, skipInfo\r\n                }\r\n                dispatch(getTestChildTabDetail(inputData, true));\r\n            } else {\r\n                let oldSelectedTest = inputData.masterData.APSelectedTest\r\n                let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                let isGrandChildGetRequired = false;\r\n                if (TestSelected.length > 0) {\r\n                    isGrandChildGetRequired = true;\r\n                } else {\r\n                    isGrandChildGetRequired = false;\r\n                }\r\n                fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n                if (isGrandChildGetRequired) {\r\n                    let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"-1\";\r\n                    let APSelectedSubSample = inputData.APSelectedSubSample;\r\n                    // let selectedPreregno = inputData.npreregno;\r\n                    let APSelectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\r\n                    // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n                    let masterData = { ...inputData.masterData, APSelectedSubSample, APSelectedTest }\r\n                    inputData = {\r\n                        ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, APSelectedTest,\r\n                        APSelectedSubSample, checkBoxOperation: 3\r\n                    }\r\n                    dispatch(getTestChildTabDetail(inputData, true));\r\n                }\r\n                else {\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        APSelectedSubSample: inputData.APSelectedSubSample,\r\n                        selectedTransactioncode: inputData.ntransactionsamplecode,\r\n                        APSelectedTest: inputData.masterData.AP_TEST.length > 0 ?\r\n                            [inputData.masterData.AP_TEST[0]] : [],\r\n                    }\r\n\r\n                    const wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                    oldSelectedTest.forEach((test, index) => {\r\n                        if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                            oldSelectedTest.splice(index, 1)\r\n                        }\r\n                        return null;\r\n                    })\r\n                    let keepOld = false;\r\n                    let ntransactiontestcode;\r\n                    if (oldSelectedTest.length > 0) {\r\n                        keepOld = true\r\n                        masterData = {\r\n                            ...masterData,\r\n                            APSelectedTest: oldSelectedTest,\r\n                        }\r\n                    } else {\r\n                        ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ?\r\n                            inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\"\r\n                    }\r\n\r\n\r\n                    switch (inputData.activeTestTab) {\r\n                        case \"IDS_RESULTS\":\r\n                            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_INSTRUMENT\":\r\n                            ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TASK\":\r\n                            ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TESTATTACHMENTS\":\r\n                            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_RESULTCHANGEHISTORY\":\r\n                            ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TESTCOMMENTS\":\r\n                            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TESTAPPROVALHISTORY\":\r\n                            ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        default:\r\n                            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                ApprovalParameter,\r\n                                ResultUsedInstrument,\r\n                                ResultUsedTasks,\r\n                                RegistrationTestAttachment,\r\n                                ApprovalResultChangeHistory,\r\n                                RegistrationTestComment,\r\n                                ApprovalHistory\r\n                            },\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            ...skipInfo,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getTestChildTabDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactiontestcode: inputData.ntransactiontestcode,\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_PARAMETERRESULTS\":\r\n                    url = \"registration/getregistrationparameter\"\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    url = \"resultentrybysample/getResultUsedInstrument\"\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    url = \"comments/getTestComment\"\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    url = \"approval/getApprovalResultChangeHistory\"\r\n                    activeName = \"ApprovalResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_TESTAPPROVALHISTORY\":\r\n                    url = \"approval/getApprovalHistory\"\r\n                    activeName = \"ApprovalHistory\"\r\n                    dataStateName = \"historyDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                default:\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(url, inputParamData)\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample, selectedTest: inputData.APselectedTest }\r\n                            //responseData = sortData(responseData)\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample,\r\n                                APSelectedTest: inputData.APSelectedTest,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                selectedTestCode: inputData.ntransactiontestcode,\r\n                            }\r\n                            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.warn(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        APSelectedTest: inputData.APSelectedTest,\r\n                        selectedPreregno: inputData.npreregno,\r\n                        selectedSampleCode: inputData.ntransactionsamplecode,\r\n                        selectedTestCode: inputData.ntransactiontestcode,\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let { ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment, ApprovalResultChangeHistory,\r\n                RegistrationTestComment, ApprovalHistory } = inputData.masterData\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    ApprovalParameter = [];\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    ResultUsedInstrument = []\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    ResultUsedTasks = []\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    ApprovalResultChangeHistory = []\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = []\r\n                    break;\r\n                case \"IDS_APPROVALHISTORY\":\r\n                    ApprovalHistory = []\r\n                    break;\r\n                default:\r\n                    ApprovalParameter = []\r\n                    break;\r\n            }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory, RegistrationTestComment, ApprovalHistory\r\n                    }, loading: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport function getSampleChildTabDetail(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.npreregno.length > 0) {\r\n            let inputParamData = {\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            switch (inputData.activeSampleTab) {\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                case \"IDS_SAMPLECOMMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedInstrument\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    break;\r\n                case \"IDS_SOURCE\":\r\n                    url = \"registration/getRegistrationSourceCountry\"\r\n                    break;\r\n                case \"IDS_SAMPLEAPPROVALHISTORY\":\r\n                    url = \"approval/getSampleApprovalHistory\"\r\n                    break;\r\n\r\n                case \"IDS_PRINTHISTORY\":\r\n                    url = \"approval/getPrintHistory\"\r\n                    break;\r\n                case \"IDS_REPORTHISTORY\":\r\n                    url = \"approval/getCOAHistory\"\r\n                    break;\r\n                default:\r\n                    url = null\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(url, inputParamData)\r\n                    .then(response => {\r\n                        let responseData = { ...response.data }\r\n                        responseData = sortData(responseData)\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    ...responseData,\r\n                                    selectedSample: inputData.selectedSample,\r\n                                    selectedTestCode: inputData.ntransactiontestcode,\r\n                                },\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                screenName: inputData.screenName\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            toast.warn(\"Please Select a Sample\");\r\n        }\r\n    }\r\n}\r\nexport function performAction(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/performAction\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...response.data,\r\n                    AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\r\n                    AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                    AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\r\n                }\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                // masterData:{\r\n                //     ...inputParam.inputData.masterData,\r\n                //     ...response.data, \r\n                //     AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.AP_SAMPLE,'npreregno'),\r\n                //     AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //     AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.AP_TEST,'ntransactiontestcode')\r\n                // },\r\n                //     loading:false ,\r\n                //     loadEsign:false,\r\n                //     openChildModal:false                     \r\n                // }}) \r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function updateDecision(inputParam) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/updateDecision\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                //     masterData:{\r\n                //         ...inputParam.masterData,\r\n                //         ...responseData, \r\n                //         AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.AP_SAMPLE,'npreregno'),\r\n                //         AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //         AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.AP_TEST,'ntransactiontestcode')\r\n\r\n                //     },\r\n                //     loading:false                      \r\n                // }}) \r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                    AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\r\n                    AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                    AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\r\n\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterBasedTest(inputData) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approval/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(\"Please Select All the Values in Filter\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovalSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getApprovalSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTest'] = undefined\r\n                    masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getStatusCombo(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            ntransactionresultcode: inputParam.primaryKeyValue,\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getStatusCombo\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                //responseData = sortData(responseData)\r\n                const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\r\n                let Grade = GradeListMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            Grade,\r\n                            selectedParamId: inputParam.primaryKeyValue\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openChildModal: true,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord: {\r\n                            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\r\n                            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\r\n                            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\r\n                        },\r\n                        operation: \"enforce\",\r\n                        screenName: \"IDS_STATUS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getParameterEdit(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            ntransactiontestcode: inputParam.selectedTest && inputParam.selectedTest.map(item => item.ntransactiontestcode).join(\",\"),\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approval/getEditParameter\", inputData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            ...responseData,\r\n                            loading: false,\r\n                            openChildModal: true,\r\n                            operation: \"update\",\r\n                            screenName: \"IDS_APPROVALPARAMETER\"\r\n                            // ncontrolCode:inputParam.ncontrolCode,\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    multilingualMsg: \"IDS_SELECTTEST\",\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\nexport function validateEsignforApproval(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    if (inputParam.operation === 'dynamic') {\r\n                        const methodUrl = \"performaction\"\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                            inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                        }\r\n                        dispatch(performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    } else if (inputParam.operation === 'reportgeneration') {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"agree\"]\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"reporparam\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                        dispatch(generateCOAReport(inputParam[\"screenData\"][\"inputParam\"]['reporparam']))\r\n                    }\r\n                    else if (inputParam.operation === 'decision') {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"agree\"]\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                        dispatch(updateDecision(inputParam[\"screenData\"][\"inputParam\"]))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function previewSampleReport(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        let ndecisionStatus = inputParam.sample.ndecisionstatus;\r\n        if (inputParam.sample.ndecisionstatus === undefined || inputParam.sample.ndecisionstatus === transactionStatus.DRAFT) {\r\n            ndecisionStatus = transactionStatus.PASS;\r\n        }\r\n        const inputData = {\r\n            ndecisionstatus: ndecisionStatus,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.sample.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLECERTIFICATEPRIVIEW,\r\n            nreporttypecode: REPORTTYPE.SAMPLEREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.sample.nregtypecode,\r\n            nregsubtypecode: inputParam.sample.nregsubtypecode,\r\n            npreregno: inputParam.sample.npreregno\r\n        }\r\n        rsapi.post(\"approval/previewSampleReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function generateCOAReport(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: inputParam.sample.npreregno,\r\n            nsectioncode: inputParam.nsectioncode || -1,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.sample.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLEWISE,\r\n            nreporttypecode: REPORTTYPE.COAREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.nregtypecode,\r\n            nregsubtypecode: inputParam.nregsubtypecode\r\n        }\r\n        rsapi.post(\"approval/generateCOAReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, selectedRecord: {}, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getEnforceCommentsHistory(selectedParam, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getEnforceCommentsHistory\", {\r\n            ntransactionresultcode: selectedParam.ntransactionresultcode,\r\n            userinfo: userInfo\r\n        })\r\n            .then(response => {\r\n                if (response.data.length > 0) {\r\n                    masterData = { ...masterData, enforceCommentsHistory: response.data }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            masterData,\r\n                            openChildModal: true,\r\n                            operation: \"view\",\r\n                            screenName: \"IDS_ENFORCECOMMENTHISTORY\"\r\n                        }\r\n                    })\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, multilingualMsg: \"IDS_NOPREVIOUSCOMMENTSFOUND\" } })\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}