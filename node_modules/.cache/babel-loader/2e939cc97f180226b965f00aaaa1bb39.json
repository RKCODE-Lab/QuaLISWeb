{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\Barcode.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport AddBarcode from './AddBarcode';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { callService, getBarcodeComboService, updateStore, crudMaster, validateEsignCredential, viewAttachment } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { getControlMap, showEsign, create_UUID, onDropAttachFileList, deleteAttachmentDropZone, Lims_JSON_stringify } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { ListWrapper } from '../../components/client-group.styles';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Barcode extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteRecord = inputData => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: inputData.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        dataState: this.state.dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: inputData.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          // selectedRecord['agree'] = 4\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord.agree = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDropTestFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add \n      let inputFileData = {\n        nsitecode: this.props.Login.userInfo.nmastersitecode\n      };\n      let editData = {}; //inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      let dataState = undefined;\n      let selectedId = null; // const nattachmenttypecode =  this.state.selectedRecord.nattachmenttypecode;\n\n      const formData = new FormData();\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        editData[\"barcodeFiles\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n        selectedId = this.props.Login.selectedRecord.nbarcode;\n      } else {\n        //add     \n        selectedRecord[\"ssystemfilename\"] = \"\";\n      }\n\n      if (acceptedFiles && acceptedFiles.length === 1) {\n        acceptedFiles.forEach((file, index) => {\n          //const tempData = Object.assign({}, testFile);\n          const splittedFileName = file.name.split('.');\n          const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n          const uniquefilename = this.state.selectedRecord[\"ssystemfilename\"] === \"\" ? create_UUID() + '.' + fileExtension : selectedRecord.ssystemfilename;\n          inputFileData[\"sfilename\"] = Lims_JSON_stringify(file.name, false);\n          formData.append(\"uploadedFile\" + index, file);\n          formData.append(\"uniquefilename\" + index, uniquefilename);\n          inputFileData[\"nquerycode\"] = this.state.selectedRecord[\"nsqlquerycode\"] ? this.state.selectedRecord[\"nsqlquerycode\"].value : transactionStatus.NA;\n          inputFileData[\"nbarcode\"] = this.state.selectedRecord[\"nbarcode\"] ? this.state.selectedRecord[\"nbarcode\"] : \"\";\n          inputFileData[\"ncontrolcode\"] = this.state.selectedRecord[\"ncontrolcode\"] ? this.state.selectedRecord[\"ncontrolcode\"].value : \"\";\n          inputFileData[\"sdescription\"] = Lims_JSON_stringify(this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\", false);\n          inputFileData[\"sbarcodename\"] = Lims_JSON_stringify(this.state.selectedRecord[\"sbarcodename\"] ? this.state.selectedRecord[\"sbarcodename\"] : \"\", false); //inputData[\"sfilename\"] = this.state.selectedRecord[\"acceptedTestFiles\"]? this.state.selectedRecord.acceptedTestFiles[0].name:\"\";\n\n          inputFileData[\"ssystemfilename\"] = uniquefilename;\n          formData.append(\"filecount\", acceptedFiles.length);\n        });\n      } else {\n        inputFileData[\"nquerycode\"] = this.state.selectedRecord[\"nsqlquerycode\"] ? this.state.selectedRecord[\"nsqlquerycode\"].value : transactionStatus.NA;\n        inputFileData[\"nbarcode\"] = this.state.selectedRecord[\"nbarcode\"] ? this.state.selectedRecord[\"nbarcode\"] : \"\";\n        inputFileData[\"ncontrolcode\"] = this.state.selectedRecord[\"ncontrolcode\"] ? this.state.selectedRecord[\"ncontrolcode\"].value : \"\";\n        inputFileData[\"sdescription\"] = Lims_JSON_stringify(this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\", false);\n        inputFileData[\"sbarcodename\"] = Lims_JSON_stringify(this.state.selectedRecord[\"sbarcodename\"] ? this.state.selectedRecord[\"sbarcodename\"] : \"\", false);\n        inputFileData[\"sfilename\"] = \"\";\n        inputFileData[\"ssystemfilename\"] = \"\";\n      }\n\n      formData.append(\"barcodeFile\", JSON.stringify(inputFileData));\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n          }\n        },\n        formData: formData,\n        editData: editData,\n        isFileupload: true,\n        operation: this.props.Login.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        saveType,\n        formRef,\n        selectedId,\n        dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        //inputData[\"userinfo\"]= this.props.Login.userInfo\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.viewDownloadFile = filedata => {\n      let downloadfile = filedata.inputData;\n      delete downloadfile[\"userinfo\"];\n      const inputParam = {\n        inputData: {\n          downloadfile: downloadfile,\n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: \"barcode\",\n        operation: \"view\",\n        methodUrl: \"AttachedDownloadFile\",\n        screenName: \"IDS_BARCODE\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      //isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"controlType\": \"textarea\",\n        \"idsName\": \"IDS_BARCODENAME\",\n        \"dataField\": \"sbarcodename\",\n        \"width\": \"150px\"\n      }, {\n        \"controlType\": \"combobox\",\n        \"idsName\": \"IDS_QUERY\",\n        \"dataField\": \"ssqlqueryname\",\n        \"width\": \"150px\"\n      }, {\n        \"controlType\": \"textarea\",\n        \"idsName\": \"IDS_DESCRIPTION\",\n        \"dataField\": \"sdescription\",\n        \"width\": \"200px\"\n      }, {\n        \"controlType\": \"combobox\",\n        \"idsName\": \"IDS_CONTROLTYPE\",\n        \"dataField\": \"scontrolids\",\n        \"width\": \"150px\"\n      }, {\n        \"controlType\": \"textarea\",\n        \"idsName\": \"IDS_FILENAME\",\n        \"dataField\": \"sfilename\",\n        \"width\": \"150px\"\n      }];\n      primaryKeyField = \"nbarcode\";\n    }\n\n    let mandatoryFields = [];\n    mandatoryFields.push({\n      \"mandatory\": true,\n      \"idsName\": \"IDS_BARCODENAME\",\n      \"dataField\": \"sbarcodename\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_QUERY\",\n      \"dataField\": \"nsqlquerycode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_CONTROLTYPE\",\n      \"dataField\": \"ncontrolcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    });\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const addParam = {\n      screenName: \"Barcode\",\n      primaryeyField: \"nbarcode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      primaryKeyField: \"nbarcode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID\n    }; // const downloadId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\n    // && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    const downloadPram = {\n      operation: \"download\"\n    }; // const mandatoryFields=[];\n    // this.extractedColumnList.forEach(item=>item.mandatory === true ? \n    // mandatoryFields.push(item) :\"\"\n    // ); \n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 21\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      selectedId: this.props.Login.selectedId,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.getBarcodeComboService,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      editParam: editParam,\n      addRecord: () => this.props.getBarcodeComboService(addParam),\n      deleteParam: deleteParam,\n      downloadPram: downloadPram,\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\" //formatMessage={this.props.intl.formatMessage}\n      // isComponent={true}\n      ,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      pageable: true,\n      viewDownloadFile: this.viewDownloadFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 29\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      selectedRecord: this.state.selectedRecord || {},\n      updateStore: this.props.updateStore,\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation //formatMessage={this.props.intl.formatMessage}\n        ,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 25\n        }\n      }) : /*#__PURE__*/React.createElement(AddBarcode, {\n        selectedRecord: this.props.Login.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange //formatMessage={this.props.intl.formatMessage}\n        ,\n        barcodeData: this.props.Login.barcodeData,\n        queryMapList: this.props.Login.queryMapList,\n        controlMapList: this.props.Login.controlMapList,\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        onDropTestFile: this.onDropTestFile,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 27\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  getBarcodeComboService,\n  updateStore,\n  crudMaster,\n  validateEsignCredential,\n  viewAttachment\n})(injectIntl(Barcode));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/Barcode.jsx"],"names":["React","connect","injectIntl","Row","Col","process","toast","AddBarcode","SlideOutModal","Esign","DataGrid","callService","getBarcodeComboService","updateStore","crudMaster","validateEsignCredential","viewAttachment","DEFAULT_RETURN","getControlMap","showEsign","create_UUID","onDropAttachFileList","deleteAttachmentDropZone","Lims_JSON_stringify","transactionStatus","ListWrapper","mapStateToProps","state","Login","Barcode","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","deleteRecord","inputData","inputParam","classUrl","methodUrl","toLowerCase","userInfo","displayName","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","intl","formatMessage","id","selectedId","agree","validateEsign","sreason","password","onInputOnChange","target","type","name","checked","value","onComboChange","comboData","fieldName","onDropTestFile","attachedFiles","maxSize","actionType","deleteAttachment","file","onSaveClick","saveType","formRef","inputFileData","nsitecode","nmastersitecode","editData","undefined","formData","FormData","acceptedFiles","sfilename","JSON","parse","stringify","nbarcode","length","forEach","index","splittedFileName","split","fileExtension","uniquefilename","ssystemfilename","append","NA","sformname","smodulename","isFileupload","viewDownloadFile","filedata","downloadfile","userinfo","reloadData","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","mandatoryFields","push","addId","has","concat","get","ncontrolcode","editID","addParam","primaryeyField","primaryKeyValue","editParam","deleteParam","downloadPram","barcodeData","queryMapList","controlMapList","componentDidUpdate","previousProps","Object","values","map","item","isOpen"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport AddBarcode from './AddBarcode';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { callService, getBarcodeComboService, updateStore, crudMaster, validateEsignCredential, viewAttachment } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { getControlMap, showEsign, create_UUID, onDropAttachFileList, deleteAttachmentDropZone, Lims_JSON_stringify } from '../../components/CommonScript';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Barcode extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            //isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    deleteRecord = (inputData) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: inputData.operation,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            dataState: this.state.dataState\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: inputData.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                // selectedRecord['agree'] = 4\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {}\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord.agree = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId = null;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    onDropTestFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add \r\n        let inputFileData = { nsitecode: this.props.Login.userInfo.nmastersitecode };\r\n        let editData = {};\r\n        //inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        // const nattachmenttypecode =  this.state.selectedRecord.nattachmenttypecode;\r\n        const formData = new FormData();\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            dataState = this.state.dataState;\r\n            editData[\"barcodeFiles\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n            selectedId = this.props.Login.selectedRecord.nbarcode;\r\n        }\r\n        else {\r\n            //add     \r\n            selectedRecord[\"ssystemfilename\"] = \"\";\r\n        }\r\n\r\n        if (acceptedFiles && acceptedFiles.length === 1) {\r\n            acceptedFiles.forEach((file, index) => {\r\n                //const tempData = Object.assign({}, testFile);\r\n                const splittedFileName = file.name.split('.');\r\n                const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                const uniquefilename = this.state.selectedRecord[\"ssystemfilename\"] === \"\" ? create_UUID() + '.' + fileExtension : selectedRecord.ssystemfilename\r\n                inputFileData[\"sfilename\"] = Lims_JSON_stringify(file.name, false);\r\n                formData.append(\"uploadedFile\" + index, file);\r\n                formData.append(\"uniquefilename\" + index, uniquefilename);\r\n\r\n\r\n                inputFileData[\"nquerycode\"] = this.state.selectedRecord[\"nsqlquerycode\"] ? this.state.selectedRecord[\"nsqlquerycode\"].value : transactionStatus.NA;\r\n                inputFileData[\"nbarcode\"] = this.state.selectedRecord[\"nbarcode\"] ? this.state.selectedRecord[\"nbarcode\"] : \"\";\r\n                inputFileData[\"ncontrolcode\"] = this.state.selectedRecord[\"ncontrolcode\"] ? this.state.selectedRecord[\"ncontrolcode\"].value : \"\";\r\n                inputFileData[\"sdescription\"] = Lims_JSON_stringify(this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\", false);\r\n                inputFileData[\"sbarcodename\"] = Lims_JSON_stringify(this.state.selectedRecord[\"sbarcodename\"] ? this.state.selectedRecord[\"sbarcodename\"] : \"\", false);\r\n                //inputData[\"sfilename\"] = this.state.selectedRecord[\"acceptedTestFiles\"]? this.state.selectedRecord.acceptedTestFiles[0].name:\"\";\r\n                inputFileData[\"ssystemfilename\"] = uniquefilename;\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n            });\r\n        } else {\r\n            inputFileData[\"nquerycode\"] = this.state.selectedRecord[\"nsqlquerycode\"] ? this.state.selectedRecord[\"nsqlquerycode\"].value : transactionStatus.NA;\r\n            inputFileData[\"nbarcode\"] = this.state.selectedRecord[\"nbarcode\"] ? this.state.selectedRecord[\"nbarcode\"] : \"\";\r\n            inputFileData[\"ncontrolcode\"] = this.state.selectedRecord[\"ncontrolcode\"] ? this.state.selectedRecord[\"ncontrolcode\"].value : \"\";\r\n            inputFileData[\"sdescription\"] = Lims_JSON_stringify(this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\", false);\r\n            inputFileData[\"sbarcodename\"] = Lims_JSON_stringify(this.state.selectedRecord[\"sbarcodename\"] ? this.state.selectedRecord[\"sbarcodename\"] : \"\", false);\r\n            inputFileData[\"sfilename\"] = \"\";\r\n            inputFileData[\"ssystemfilename\"] = \"\";\r\n\r\n        }\r\n\r\n        formData.append(\"barcodeFile\", JSON.stringify(inputFileData));\r\n\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\r\n                }\r\n            },\r\n            formData: formData,\r\n            editData: editData,\r\n            isFileupload: true,\r\n            operation: this.props.Login.operation,\r\n            displayName: this.props.Login.inputParam.displayName, saveType, formRef, selectedId, dataState,\r\n\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            //inputData[\"userinfo\"]= this.props.Login.userInfo\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation,\r\n                },\r\n\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    viewDownloadFile = (filedata) => {\r\n        let downloadfile = filedata.inputData\r\n        delete downloadfile[\"userinfo\"]\r\n        const inputParam = {\r\n            inputData: {\r\n                downloadfile: downloadfile,\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            classUrl: \"barcode\",\r\n            operation: \"view\",\r\n            methodUrl: \"AttachedDownloadFile\",\r\n            screenName: \"IDS_BARCODE\"\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n\r\n\r\n\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_BARCODENAME\", \"dataField\": \"sbarcodename\", \"width\": \"150px\" },\r\n                { \"controlType\": \"combobox\", \"idsName\": \"IDS_QUERY\", \"dataField\": \"ssqlqueryname\", \"width\": \"150px\" },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" },\r\n                { \"controlType\": \"combobox\", \"idsName\": \"IDS_CONTROLTYPE\", \"dataField\": \"scontrolids\", \"width\": \"150px\" },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_FILENAME\", \"dataField\": \"sfilename\", \"width\": \"150px\" }\r\n            ]\r\n            primaryKeyField = \"nbarcode\";\r\n        }\r\n        let mandatoryFields = [];\r\n        mandatoryFields.push(\r\n            { \"mandatory\": true, \"idsName\": \"IDS_BARCODENAME\", \"dataField\": \"sbarcodename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_QUERY\", \"dataField\": \"nsqlquerycode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_CONTROLTYPE\", \"dataField\": \"ncontrolcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n\r\n        )\r\n\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const addParam = {\r\n            screenName: \"Barcode\", primaryeyField: \"nbarcode\", primaryKeyValue: undefined,\r\n            operation: \"create\", inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: addId\r\n        };\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), primaryKeyField: \"nbarcode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editID\r\n        };\r\n\r\n        // const downloadId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n        // && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n        const deleteParam = { operation: \"delete\" };\r\n        const downloadPram = { operation: \"download\" };\r\n\r\n        // const mandatoryFields=[];\r\n        // this.extractedColumnList.forEach(item=>item.mandatory === true ? \r\n        // mandatoryFields.push(item) :\"\"\r\n        // ); \r\n\r\n\r\n        return (<>\r\n            <Row>\r\n                <Col>\r\n                    <ListWrapper className=\"client-list-content\">\r\n                        {/* <PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                                <HeaderName className=\"header-primary-md\">\r\n                                    {this.props.Login.inputParam && this.props.Login.inputParam.displayName ?\r\n                                        <FormattedMessage id={this.props.Login.inputParam.displayName} /> : \"\"}\r\n                                </HeaderName>\r\n                                <Button className=\"btn btn-user btn-primary-blue\"\r\n                                     hidden={this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                    onClick={() => this.props.getBarcodeComboService(addParam)}>\r\n                                    <FontAwesomeIcon icon={faPlus} /> {}\r\n                                    <FormattedMessage id=\"IDS_ADD\" defaultMessage='Add' />\r\n                                </Button>\r\n                            </PrimaryHeader> */}\r\n\r\n                        {this.state.data ?\r\n                            <DataGrid\r\n                                primaryKeyField={primaryKeyField}\r\n                                selectedId={this.props.Login.selectedId}\r\n                                data={this.state.data}\r\n                                dataResult={this.state.dataResult}\r\n                                dataState={this.state.dataState}\r\n                                dataStateChange={this.dataStateChange}\r\n                                extractedColumnList={this.extractedColumnList}\r\n                                controlMap={this.state.controlMap}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                fetchRecord={this.props.getBarcodeComboService}\r\n                                deleteRecord={this.deleteRecord}\r\n                                reloadData={this.reloadData}\r\n                                editParam={editParam}\r\n                                addRecord={() => this.props.getBarcodeComboService(addParam)}\r\n                                deleteParam={deleteParam}\r\n                                downloadPram={downloadPram}\r\n                                scrollable={\"scrollable\"}\r\n                                gridHeight={\"600px\"}\r\n                                //formatMessage={this.props.intl.formatMessage}\r\n                                // isComponent={true}\r\n                                isActionRequired={true}\r\n                                isToolBarRequired={true}\r\n                                pageable={true}\r\n                                viewDownloadFile={this.viewDownloadFile}\r\n                            />\r\n                            : \"\"}\r\n                    </ListWrapper>\r\n                </Col>\r\n            </Row>\r\n\r\n            {this.props.Login.openModal &&\r\n                <SlideOutModal\r\n                    show={this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    updateStore={this.props.updateStore}\r\n                    mandatoryFields={mandatoryFields}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign\r\n                            operation={this.props.Login.operation}\r\n                            //formatMessage={this.props.intl.formatMessage}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                        : <AddBarcode\r\n                            selectedRecord={this.props.Login.selectedRecord || {}}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            onComboChange={this.onComboChange}\r\n                            //formatMessage={this.props.intl.formatMessage}\r\n                            barcodeData={this.props.Login.barcodeData}\r\n                            queryMapList={this.props.Login.queryMapList}\r\n                            controlMapList={this.props.Login.controlMapList}\r\n                            operation={this.props.Login.operation}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            onDropTestFile={this.onDropTestFile}\r\n                            deleteAttachment={this.deleteAttachment}\r\n                            actionType={this.state.actionType}\r\n\r\n                        />}\r\n                />\r\n            }\r\n\r\n        </>);\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    isOpen: false,\r\n                    selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { callService, getBarcodeComboService, updateStore, crudMaster, validateEsignCredential, viewAttachment })(injectIntl(Barcode));\r\n"]},"metadata":{},"sourceType":"module"}