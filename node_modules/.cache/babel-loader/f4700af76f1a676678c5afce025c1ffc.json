{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\SampleCollection.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport AddSampleCollection from '../storagemanagement//AddSampleCollection';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { SampleCycle, transactionStatus } from '../../components/Enumeration';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { callService, crudMaster, updateStore, validateEsignCredential, getComboSampleCollection, getBarcodeDataCollection, saveCollection, getActiveSampleCollectionById, getSampleCollection, validateEsignCredentialSampleCollection } from '../../actions';\nimport { sortData, getControlMap, getStartOfDay, getEndOfDay, convertDateValuetoString, rearrangeDateFormat, constructOptionList, Lims_JSON_stringify, formatInputDate, showEsign } from '../../components/CommonScript';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass SampleCollection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.props.Login.operation === 'update') {\n        this.props.validateEsignCredentialSampleCollection(inputParam, \"openModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo,\n          \"fromDate\": fromDate,\n          \"toDate\": toDate,\n          \"nprojecttypecode\": this.props.Login.masterData.selectedProjectType.value || -1,\n          \"nsamplecollectioncode\": deleteParam.selectedRecord['nsamplecollectioncode']\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      const sbarcodeid = this.props.Login.masterData.barcodedata;\n\n      if (selectedRecord[\"sbarcodeid\"] && selectedRecord[\"sbarcodeid\"].length === parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength)) {\n        let invalidbarcode = selectedRecord[\"sbarcodeid\"].substring(1, 2);\n\n        if (parseInt(invalidbarcode) === SampleCycle.COLLECTION) {\n          if (sbarcodeid != undefined && sbarcodeid != '') {\n            let inputData = {};\n            inputData[\"storagesamplecollection\"] = {};\n\n            if (this.props.Login.operation === \"create\") {\n              inputData[\"storagesamplecollection\"][\"nunitcode\"] = selectedRecord[\"nunitcode\"] ? selectedRecord[\"nunitcode\"].value : -1;\n              inputData[\"storagesamplecollection\"][\"nsampleqty\"] = selectedRecord[\"nsampleqty\"] ? Number(selectedRecord[\"nsampleqty\"]) : -1;\n              inputData[\"storagesamplecollection\"][\"jsondata\"] = Lims_JSON_stringify(JSON.stringify(this.props.Login.masterData.barcodedata));\n            }\n\n            inputData[\"storagesamplecollection\"][\"nprojecttypecode\"] = this.props.Login.masterData.selectedProjectType.value || transactionStatus.NA;\n\n            if (this.props.Login.operation === \"update\") {\n              inputData[\"storagesamplecollection\"][\"nsamplecollectioncode\"] = this.props.Login.selectedId;\n            }\n\n            inputData[\"storagesamplecollection\"][\"sbarcodeid\"] = selectedRecord[\"sbarcodeid\"] ? selectedRecord[\"sbarcodeid\"] : -1;\n            inputData[\"storagesamplecollection\"][\"dcollectiondate\"] = formatInputDate(selectedRecord[\"dcollectiondate\"], false);\n            inputData[\"storagesamplecollection\"][\"scomments\"] = selectedRecord[\"scomments\"] && selectedRecord[\"scomments\"] || \"\";\n            inputData[\"storagesamplecollection\"][\"ntzcollectiondatetime\"] = selectedRecord[\"ntzcollectiondatetime\"] && selectedRecord[\"ntzcollectiondatetime\"].value || transactionStatus.NA;\n            inputData[\"storagesamplecollection\"][\"noffsetdcollectiondatetime\"] = selectedRecord[\"noffsetdcollectiondatetime\"] && selectedRecord[\"noffsetdcollectiondatetime\"].value || transactionStatus.NA;\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n            let fromDate = obj.fromDate;\n            let toDate = obj.toDate;\n            inputData[\"fromDate\"] = fromDate;\n            inputData[\"toDate\"] = toDate;\n            inputData[\"nprojecttypecode\"] = this.props.Login.masterData.selectedProjectType.value || transactionStatus.NA;\n            inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n              sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n              smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n            };\n            const inputParam = {\n              nformcode: this.props.Login.userInfo.nformcode,\n              classUrl: \"storagesamplecollection\",\n              methodUrl: \"SampleCollection\",\n              inputData: inputData,\n              operation: this.props.Login.operation,\n              saveType,\n              formRef,\n              selectedRecord: this.state.selectedRecord || {}\n            };\n            const masterData = this.props.Login.masterData;\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData\n                  },\n                  saveType\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.saveCollection(inputParam, masterData);\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_CLICKENTERTOJSONRECORD\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INVALIDBARCODEID\" //ALPD-4498 Changed IDS to throw alert correctly by VISHAKH\n\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_INVALIDABARCODE\" //ALPD-4498 Changed IDS to throw alert correctly by VISHAKH\n\n        }));\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === \"nprojecttypecode\") {\n        let inputData = [];\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n        inputData[\"fromDate\"] = fromDate;\n        inputData[\"toDate\"] = toDate;\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          nprojecttypecode: parseInt(comboData.value),\n          selectedProjectType: comboData,\n          toDate: toDate,\n          fromDate: fromDate\n        };\n        const masterData = { ...this.props.Login.masterData\n        };\n        const inputParam = {\n          masterData,\n          inputData\n        };\n        this.props.getSampleCollection(inputParam);\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChangeSlidout = (dateName, dateValue) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.autoSaveGetDataCollection = event => {\n      let selectedRecord = this.state.selectedRecord || {};\n      /*  let nsamplecyclestartpostion=this.props.Login.masterData&&this.props.Login.masterData.samplecyclestartpostion || -1;\r\n        let samplecyclenfieldlength=this.props.Login.masterData&&this.props.Login.masterData.samplecyclenfieldlength || -1;*/\n\n      event.stopPropagation();\n      let invalidbarcode = event.target.value.substring(1, 2);\n\n      if (parseInt(selectedRecord[\"sbarcodeid\"] && selectedRecord[\"sbarcodeid\"].length) === parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength) && event.keyCode === 13) {\n        if (parseInt(invalidbarcode) === SampleCycle.COLLECTION) {\n          let inputParam = {\n            nprojecttypecode: this.props.Login.masterData.selectedProjectType.value,\n            spositionvalue: event.target.value,\n            userinfo: this.props.Login.userInfo,\n            nbarcodeLength: parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength),\n            jsondata: {},\n            masterData: this.props.Login.masterData,\n            selectedRecord: selectedRecord || {}\n          };\n          this.props.getBarcodeDataCollection(inputParam);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INVALIDBARCODEID\"\n          }));\n        }\n      } // else {\n      //     toast.warn(\n      //         this.props.intl.formatMessage({\n      //             id: \"IDS_INVALIDBARCODELENGTH\",\n      //         })\n      //     );\n      // }\n\n    };\n\n    this.onInputOnChange = (event, fieldname) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldname === 'nsampleqty') {\n        if (/^\\d{0,3}(\\.\\d{0,2})?$/.test(event.target.value) || event.target.value === \"\") {\n          selectedRecord[fieldname] = event.target.value;\n        }\n      } else if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      if (dateName === 'todate') {\n        selectedRecord[dateName] = dateValue;\n      } else {\n        selectedRecord[dateName] = dateValue;\n      }\n\n      selectedRecord[dateName] = dateValue; // this.setState({ selectedRecord });\n      // this.reloadData(selectedRecord, true);\n\n      let dateObj = {};\n      let obj = convertDateValuetoString(selectedRecord['fromdate'] && selectedRecord['fromdate'] || this.props.Login.masterData.FromDate, selectedRecord['todate'] && selectedRecord['todate'] || this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: fromDate,\n          toDate: toDate,\n          selectedProjectType: this.props.Login.masterData.selectedProjectType,\n          nprojecttypecode: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.value || -1\n        }\n      };\n      this.props.getSampleCollection(inputParam);\n    };\n\n    this.reloadData = () => {\n      //this.searchRef.current.value = \"\";\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo, true);\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: obj.fromDate,\n          toDate: obj.toDate,\n          \"nprojecttypecode\": this.props.Login.masterData.selectedProjectType.value || -1 // currentdate: isDateChange === true ? null : formatInputDate(new Date(), true)\n\n        },\n        classUrl: 'storagesamplecollection',\n        methodUrl: \"SampleCollection\",\n        displayName: \"IDS_SAMPLECOLLECTION\",\n        userInfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord || {}\n      };\n      this.props.getSampleCollection(inputParam);\n    };\n\n    this.searchRef = React.createRef();\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  gridfillingColumn(data, barcodeFields) {\n    //  const tempArray = [];\n    const temparray1 = [{\n      idsName: 'IDS_BARCODEID',\n      dataField: 'sbarcodeid',\n      width: '250px',\n      mandatoryLabel: 'IDS_ENTER',\n      controlType: 'textinput'\n    }, {\n      idsName: 'IDS_SAMPLEQTY',\n      dataField: 'nsampleqty',\n      width: '200px',\n      mandatoryLabel: 'IDS_ENTER',\n      controlType: 'textinput'\n    }, {\n      idsName: 'IDS_UNIT',\n      dataField: 'sunitname',\n      width: '200px',\n      mandatoryLabel: 'IDS_SELECT',\n      controlType: 'selectbox'\n    }, {\n      idsName: 'IDS_SAMPLECOLLECTIONDATE',\n      dataField: 'scollectiondate',\n      width: '200px'\n    }];\n    /*let temparray2 = []\r\n    barcodeFields&&barcodeFields.forEach(item=>{\r\n        data && data.forEach((item) => {\r\n            const entries = Object.entries(item.jsondata);\r\n            if (entries.length > 0) {\r\n                entries.forEach(([key]) => {\r\n                    const keyExists = temparray2.some(column => column.idsName === key);\r\n                    if (!keyExists) {\r\n                        if(item.sfieldname===key){\r\n                            temparray2.push({\r\n                                idsName: key,\r\n                                dataField: key,\r\n                                width: '250px'\r\n                            });\r\n                        }\r\n                       \r\n                    }\r\n      \r\n                });\r\n            }\r\n        });\r\n    });*/\n\n    let temparray2 = [];\n    barcodeFields && barcodeFields.forEach(barcodeItem => {\n      data && data.forEach(dataItem => {\n        const entries = Object.entries(dataItem.jsondata);\n\n        if (entries.length > 0) {\n          entries.forEach(([key]) => {\n            const keyExists = temparray2.some(column => column.idsName === key);\n\n            if (!keyExists) {\n              if (barcodeItem.sfieldname === key) {\n                temparray2.push({\n                  idsName: key,\n                  dataField: key,\n                  width: '250px'\n                });\n              }\n            }\n          });\n        }\n      });\n    });\n    const newArray = [...temparray1, ...temparray2];\n    newArray.push({\n      idsName: 'IDS_COMMENTS',\n      dataField: 'scomments',\n      width: '250px'\n    });\n    return newArray;\n  }\n\n  render() {\n    let fromDate = \"\";\n    let toDate = \"\";\n    const extractedColumnList = this.gridfillingColumn(this.props.Login.masterData.SampleCollection && this.props.Login.masterData.SampleCollection || [], this.props.Login.masterData.jsondataBarcodeFields && this.props.Login.masterData.jsondataBarcodeFields);\n    this.extractedColumnList = extractedColumnList;\n    const addId = this.state.controlMap.has(\"AddStorageSampleCollection\") && this.state.controlMap.get(\"AddStorageSampleCollection\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditStorageSampleCollection\") && this.state.controlMap.get(\"EditStorageSampleCollection\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteStorageSampleCollection\") && this.state.controlMap.get(\"DeleteStorageSampleCollection\").ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.displayName,\n      operation: \"update\",\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: editId,\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      primaryKeyField: \"nsamplecollectioncode\",\n      selectedRecord: this.state.selectedRecord || {},\n      dataState: this.state.dataState\n    };\n    const addParam = {\n      screenName: this.props.Login.displayName,\n      primaryKeyField: \"nsamplecollectioncode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: addId,\n      selectedRecord: this.state.selectedRecord,\n      masterData: this.props.Login.masterData\n    }; //ALPD-4618--Vignesh R(01-08-2024)\n\n    const deleteParam = {\n      operation: \"delete\",\n      ncontrolcode: deleteId,\n      selectedRecord: this.state.selectedRecord\n    };\n\n    if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\n      fromDate = this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      toDate = this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"fromdate\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_FROM\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecord[\"fromdate\"] || fromDate,\n      dateFormat: this.props.Login.userInfo.ssitedate,\n      isClearable: false,\n      onChange: date => this.handleDateChange(\"fromdate\", date),\n      value: this.state.selectedRecord[\"fromdate\"] || fromDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"todate\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_TO\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecord[\"todate\"] || toDate,\n      dateFormat: this.props.Login.userInfo.ssitedate,\n      isClearable: false,\n      onChange: date => this.handleDateChange(\"todate\", date),\n      value: this.state.selectedRecord[\"todate\"] || toDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PROJECTTYPE\"\n      }),\n      isSearchable: true,\n      name: \"nprojecttypecode\",\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      isClearable: false,\n      options: this.state.projectType,\n      value: this.state.selectedRecord[\"nprojecttypecode\"] && this.state.selectedRecord[\"nprojecttypecode\"] || this.props.Login.masterData.selectedProjectType,\n      defaultValue: this.state.selectedRecord[\"nprojecttypecode\"],\n      onChange: event => this.onComboChange(event, \"nprojecttypecode\"),\n      closeMenuOnSelect: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 37\n      }\n    })), \"    \"), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nsamplecollectioncode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      scrollable: \"scrollable\",\n      pageable: true,\n      isComponent: true,\n      gridHeight: '600px',\n      isToolBarRequired: true,\n      isActionRequired: true,\n      expandField: \"expanded\",\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.getComboSampleCollection(addParam),\n      deleteParam: deleteParam,\n      deleteRecord: this.deleteRecord,\n      fetchRecord: this.props.getActiveSampleCollectionById,\n      editParam: editParam //ATE234 Janakumar ALPD-5577 Sample Storage-->while download the pdf, screen getting freezed\n      ,\n      isDownloadPDFRequired: false,\n      isDownloadExcelRequired: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      size: 'lg',\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      showSaveContinue: true,\n      mandatoryFields: [{\n        \"mandatory\": true,\n        \"idsName\": \"IDS_BARCODEID\",\n        \"dataField\": \"sbarcodeid\",\n        \"width\": \"250px\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textinput\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_SAMPLEQTY\",\n        \"dataField\": \"nsampleqty\",\n        \"width\": \"250px\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textinput\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_UNIT\",\n        \"dataField\": \"nunitcode\",\n        \"width\": \"250px\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddSampleCollection, {\n        autoSaveGetDataCollection: this.autoSaveGetDataCollection,\n        barcodedata: this.props.Login.masterData.barcodedata,\n        barcodeFields: this.props.Login.masterData.jsondataBarcodeFields,\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        formatMessage: this.props.intl.formatMessage,\n        operation: this.props.Login.operation,\n        unit: this.props.Login.unit,\n        userInfo: this.props.Login.userInfo,\n        handleDateChangeSlidout: this.handleDateChangeSlidout,\n        selectedProjectType: this.props.Login.masterData.selectedProjectType,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      projectType\n    } = this.state;\n    let bool = false;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\n      const projectTypeMap = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n      projectType = projectTypeMap.get(\"OptionList\");\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.selectedProjectType !== previousProps.Login.masterData.selectedProjectType) {\n      const projectTypeMap = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n      projectType = projectTypeMap.get(\"OptionList\");\n      bool = true;\n    } // if (this.props.Login.masterData.SampleCollection !== previousProps.Login.masterData.SampleCollection) {\n    //     let samplecollect = [];\n    //     samplecollect =\n    //         this.props.Login.masterData.SampleCollection && this.props.Login.masterData.SampleCollection.map(sampleItem => {\n    //             const entries = Object.entries(sampleItem.jsondata);\n    //             if (entries.length > 0) {\n    //                 const newItem = { ...sampleItem };\n    //                 entries.forEach(([key, value]) => {\n    //                     newItem[key] = value;\n    //                 });\n    //                 return newItem;\n    //             }\n    //             return sampleItem;\n    //         });\n    //     // let { dataState } = this.state;\n    //     // if (dataState === undefined) {\n    //     //     dataState = { skip: 0, take: this.state.dataState.take }\n    //     // }\n    //     // if (this.state.dataResult.data) {\n    //     //     if (this.state.dataResult.data.length === 1) {\n    //     //         let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\n    //     //             this.state.dataState.skip\n    //     //         dataState = { skip: skipcount, take: this.state.dataState.take }\n    //     //     }\n    //     // }\n    //     this.setState({\n    //         data: samplecollect,\n    //         dataResult: process(samplecollect || []),\n    //     });\n    // }\n\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      let temporaryStorage = [];\n\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        temporaryStorage = this.props.Login.masterData.SampleCollection && this.props.Login.masterData.SampleCollection.map(sampleItem => {\n          const entries = Object.entries(sampleItem.jsondata);\n\n          if (entries.length > 0) {\n            const newItem = { ...sampleItem\n            };\n            entries.forEach(([key, value]) => {\n              newItem[key] = value;\n            });\n            return newItem;\n          }\n\n          return sampleItem;\n        }); // let { dataState } = this.state;\n        // if (dataState === undefined) {\n        //     dataState = { skip: 0, take: this.state.dataState.take }\n        // }\n        // if (this.state.dataResult.data) {\n        //     if (this.state.dataResult.data.length === 1) {\n        //         let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\n        //             this.state.dataState.skip\n        //         dataState = { skip: skipcount, take: this.state.dataState.take }\n        //     }\n        // }\n\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: temporaryStorage,\n          dataResult: process(temporaryStorage || [], this.state.dataState)\n        });\n      } else {\n        //jana ALPD-4694 Temporary Storage-->While Try to Delete the Records the Fields are Align Wrongly\n        let samplecollect = [];\n        samplecollect = this.props.Login.masterData.SampleCollection && this.props.Login.masterData.SampleCollection.map(sampleItem => {\n          const entries = Object.entries(sampleItem.jsondata);\n\n          if (entries.length > 0) {\n            const newItem = { ...sampleItem\n            };\n            entries.forEach(([key, value]) => {\n              newItem[key] = value;\n            });\n            return newItem;\n          }\n\n          return sampleItem;\n        });\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined || this.props.Login.masterData.selectedProjectType !== previousProps.Login.masterData.selectedProjectType) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: samplecollect,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(samplecollect || [], dataState),\n          dataState\n        });\n      }\n      /*  else {\r\n            if (this.props.Login.masterData.SampleCollection) {\r\n                let samplecollect = [];\r\n                samplecollect =\r\n                    this.props.Login.masterData.SampleCollection && this.props.Login.masterData.SampleCollection.map(sampleItem => {\r\n                        const entries = Object.entries(sampleItem.jsondata);\r\n                        if (entries.length > 0) {\r\n                            const newItem = { ...sampleItem };\r\n                            entries.forEach(([key, value]) => {\r\n                                    newItem[key] = value;\r\n                                });\r\n                            return newItem;\r\n                        }\r\n                        return sampleItem;\r\n                    });\r\n                    this.setState({\r\n                    data: samplecollect,\r\n                    dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n                    dataResult: process(samplecollect || [], { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }),\r\n                });\r\n            }\r\n        }*/\n\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData.jsondataBarcodeFields !== previousProps.Login.masterData.jsondataBarcodeFields) {\n      const retrievedData = sortData(this.props.Login.masterData.jsondataBarcodeFields, \"ascending\", \"nsorter\");\n      this.setState({\n        jsondataBarcodeFields: retrievedData\n      });\n    }\n\n    if (bool) {\n      this.setState({\n        projectType\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getComboSampleCollection,\n  getBarcodeDataCollection,\n  saveCollection,\n  getActiveSampleCollectionById,\n  getSampleCollection,\n  validateEsignCredentialSampleCollection\n})(injectIntl(SampleCollection));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/storagemanagement/SampleCollection.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","DateTimePicker","ListWrapper","AddSampleCollection","SlideOutModal","Esign","SampleCycle","transactionStatus","DEFAULT_RETURN","FormSelectSearch","callService","crudMaster","updateStore","validateEsignCredential","getComboSampleCollection","getBarcodeDataCollection","saveCollection","getActiveSampleCollectionById","getSampleCollection","validateEsignCredentialSampleCollection","sortData","getControlMap","getStartOfDay","getEndOfDay","convertDateValuetoString","rearrangeDateFormat","constructOptionList","Lims_JSON_stringify","formatInputDate","showEsign","mapStateToProps","state","Login","SampleCollection","Component","constructor","props","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","data","dataStateChange","event","setState","dataResult","dataState","validateEsign","inputParam","inputData","userInfo","sreason","nreasoncode","value","spredefinedreason","label","password","screenData","deleteRecord","deleteParam","obj","masterData","FromDate","ToDate","fromDate","toDate","classUrl","methodUrl","displayName","toLowerCase","selectedProjectType","userRoleControlRights","nformcode","ncontrolCode","screenName","intl","formatMessage","id","onSaveClick","saveType","formRef","sbarcodeid","barcodedata","length","parseInt","nbarcodelength","invalidbarcode","substring","COLLECTION","undefined","Number","JSON","stringify","NA","selectedId","sformname","smodulename","ncontrolcode","warn","onComboChange","comboData","fieldName","userinfo","nprojecttypecode","handleDateChangeSlidout","dateName","dateValue","autoSaveGetDataCollection","stopPropagation","target","keyCode","spositionvalue","nbarcodeLength","jsondata","onInputOnChange","fieldname","test","type","name","checked","YES","NO","handleDateChange","Date","dateObj","reloadData","searchRef","createRef","skip","take","settings","masterStatus","error","controlMap","Map","getDerivedStateFromProps","gridfillingColumn","barcodeFields","temparray1","idsName","dataField","width","mandatoryLabel","controlType","temparray2","forEach","barcodeItem","dataItem","entries","Object","key","keyExists","some","column","sfieldname","push","newArray","render","extractedColumnList","jsondataBarcodeFields","addId","has","get","editId","deleteId","editParam","primaryKeyField","addParam","primaryKeyValue","ssitedate","date","projectType","unit","componentDidUpdate","previousProps","bool","projectTypeMap","temporaryStorage","values","map","item","sampleItem","newItem","samplecollect","skipcount","retrievedData"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport AddSampleCollection from '../storagemanagement//AddSampleCollection';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport { SampleCycle,transactionStatus } from '../../components/Enumeration';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\n\r\nimport {\r\n    callService, crudMaster,\r\n    updateStore, validateEsignCredential, getComboSampleCollection, getBarcodeDataCollection, saveCollection, getActiveSampleCollectionById, getSampleCollection, validateEsignCredentialSampleCollection\r\n} from '../../actions';\r\nimport { sortData,getControlMap, getStartOfDay, getEndOfDay, convertDateValuetoString, rearrangeDateFormat, constructOptionList, Lims_JSON_stringify, formatInputDate, showEsign } from '../../components/CommonScript'\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass SampleCollection extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchRef = React.createRef();\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n        };\r\n\r\n\r\n\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    gridfillingColumn(data, barcodeFields) {\r\n        //  const tempArray = [];\r\n        const temparray1 = [{ idsName: 'IDS_BARCODEID', dataField: 'sbarcodeid', width: '250px', mandatoryLabel: 'IDS_ENTER', controlType: 'textinput' },\r\n        { idsName: 'IDS_SAMPLEQTY', dataField: 'nsampleqty', width: '200px', mandatoryLabel: 'IDS_ENTER', controlType: 'textinput' },\r\n        { idsName: 'IDS_UNIT', dataField: 'sunitname', width: '200px', mandatoryLabel: 'IDS_SELECT', controlType: 'selectbox' },\r\n        { idsName: 'IDS_SAMPLECOLLECTIONDATE', dataField: 'scollectiondate', width: '200px' }\r\n        ];\r\n        /*let temparray2 = []\r\n        barcodeFields&&barcodeFields.forEach(item=>{\r\n            data && data.forEach((item) => {\r\n                const entries = Object.entries(item.jsondata);\r\n                if (entries.length > 0) {\r\n                    entries.forEach(([key]) => {\r\n                        const keyExists = temparray2.some(column => column.idsName === key);\r\n                        if (!keyExists) {\r\n                            if(item.sfieldname===key){\r\n                                temparray2.push({\r\n                                    idsName: key,\r\n                                    dataField: key,\r\n                                    width: '250px'\r\n                                });\r\n                            }\r\n                           \r\n                        }\r\n    \r\n    \r\n                    });\r\n                }\r\n            });\r\n        });*/\r\n\r\n        let temparray2 = [];\r\n        barcodeFields && barcodeFields.forEach(barcodeItem => {\r\n            data && data.forEach(dataItem => {\r\n                const entries = Object.entries(dataItem.jsondata);\r\n                if (entries.length > 0) {\r\n                    entries.forEach(([key]) => {\r\n                        const keyExists = temparray2.some(column => column.idsName === key);\r\n                        if (!keyExists) {\r\n                            if (barcodeItem.sfieldname === key) {\r\n                                temparray2.push({\r\n                                    idsName: key,\r\n                                    dataField: key,\r\n                                    width: '250px'\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        const newArray = [...temparray1, ...temparray2]\r\n        newArray.push({ idsName: 'IDS_COMMENTS', dataField: 'scomments', width: '250px' })\r\n        return newArray;\r\n    }\r\n\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        if (this.props.Login.operation === 'update') {\r\n            this.props.validateEsignCredentialSampleCollection(inputParam, \"openModal\");\r\n        } else {\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let fromDate = \"\";\r\n        let toDate = \"\";\r\n        const extractedColumnList = this.gridfillingColumn(this.props.Login.masterData.SampleCollection && this.props.Login.masterData.SampleCollection \r\n            || [], this.props.Login.masterData.jsondataBarcodeFields && this.props.Login.masterData.jsondataBarcodeFields);\r\n        this.extractedColumnList = extractedColumnList;\r\n\r\n\r\n        const addId = this.state.controlMap.has(\"AddStorageSampleCollection\") && this.state.controlMap.get(\"AddStorageSampleCollection\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditStorageSampleCollection\") && this.state.controlMap.get(\"EditStorageSampleCollection\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteStorageSampleCollection\") && this.state.controlMap.get(\"DeleteStorageSampleCollection\").ncontrolcode;\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.displayName,\r\n            operation: \"update\",\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: editId,\r\n            masterData: this.props.Login.masterData,\r\n            inputParam: this.props.Login.inputParam,\r\n            primaryKeyField: \"nsamplecollectioncode\",\r\n            selectedRecord: this.state.selectedRecord || {},\r\n            dataState:this.state.dataState\r\n\r\n\r\n        };\r\n        const addParam = {\r\n            screenName: this.props.Login.displayName, primaryKeyField: \"nsamplecollectioncode\", primaryKeyValue: undefined,\r\n            operation: \"create\", inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolcode: addId,\r\n            selectedRecord: this.state.selectedRecord,\r\n            masterData: this.props.Login.masterData\r\n        };\r\n//ALPD-4618--Vignesh R(01-08-2024)\r\n        const deleteParam = { operation: \"delete\",ncontrolcode:deleteId,  selectedRecord: this.state.selectedRecord };\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\r\n            fromDate = (this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n            toDate = (this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        }\r\n        return (\r\n            <>\r\n                {/* <Preloader loadng={this.props.Login.loading}/> */}\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            <Row>\r\n                                <Col md={2}>\r\n                                    <DateTimePicker\r\n                                        name={\"fromdate\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_FROM\" })}\r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"fromdate\"] || fromDate}\r\n                                        dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"fromdate\", date)}\r\n                                        value={this.state.selectedRecord[\"fromdate\"] || fromDate}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col md={2}>\r\n                                    <DateTimePicker\r\n                                        name={\"todate\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"todate\"] || toDate}\r\n                                        dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"todate\", date)}\r\n                                        value={this.state.selectedRecord[\"todate\"] || toDate}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col md={2}>\r\n                                    <FormSelectSearch\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                                        isSearchable={true}\r\n                                        name={\"nprojecttypecode\"}\r\n                                        isDisabled={false}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={true}\r\n                                        isClearable={false}\r\n                                        options={this.state.projectType}\r\n                                        value={this.state.selectedRecord[\"nprojecttypecode\"] && this.state.selectedRecord[\"nprojecttypecode\"] || this.props.Login.masterData.selectedProjectType}\r\n                                        defaultValue={this.state.selectedRecord[\"nprojecttypecode\"]}\r\n                                        onChange={(event) => this.onComboChange(event, \"nprojecttypecode\")}\r\n                                        closeMenuOnSelect={true}\r\n                                    >\r\n                                    </FormSelectSearch>\r\n                                </Col>    {/* <Col></Col> */}\r\n                            </Row>\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"nsamplecollectioncode\"}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    scrollable={\"scrollable\"}\r\n                                    pageable={true}\r\n                                    isComponent={true}\r\n                                    gridHeight={'600px'}\r\n                                    isToolBarRequired={true}\r\n                                    isActionRequired={true}\r\n                                    expandField=\"expanded\"\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    addRecord={() => this.props.getComboSampleCollection(addParam)}\r\n                                    deleteParam={deleteParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    fetchRecord={this.props.getActiveSampleCollectionById}\r\n                                    editParam={editParam}\r\n                                    //ATE234 Janakumar ALPD-5577 Sample Storage-->while download the pdf, screen getting freezed\r\n                                    isDownloadPDFRequired={false}\r\n                                    isDownloadExcelRequired={true}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        size={'lg'}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        showSaveContinue={true}\r\n                        mandatoryFields={[\r\n                            { \"mandatory\": true, \"idsName\": \"IDS_BARCODEID\", \"dataField\": \"sbarcodeid\", \"width\": \"250px\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textinput\" },\r\n                            { \"mandatory\": true, \"idsName\": \"IDS_SAMPLEQTY\", \"dataField\": \"nsampleqty\", \"width\": \"250px\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textinput\" },\r\n                            { \"mandatory\": true, \"idsName\": \"IDS_UNIT\", \"dataField\": \"nunitcode\", \"width\": \"250px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]}\r\n\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddSampleCollection\r\n                                autoSaveGetDataCollection={this.autoSaveGetDataCollection}\r\n                                barcodedata={this.props.Login.masterData.barcodedata}\r\n                                barcodeFields={this.props.Login.masterData.jsondataBarcodeFields}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                operation={this.props.Login.operation}\r\n                                unit={this.props.Login.unit}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                handleDateChangeSlidout={this.handleDateChangeSlidout}\r\n                                selectedProjectType={this.props.Login.masterData.selectedProjectType}\r\n\r\n                            />}\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n    deleteRecord = (deleteParam) => {\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo,\r\n\r\n                \"fromDate\": fromDate,\r\n                \"toDate\": toDate,\r\n                \"nprojecttypecode\": this.props.Login.masterData.selectedProjectType.value || -1,\r\n                \"nsamplecollectioncode\": deleteParam.selectedRecord['nsamplecollectioncode']\r\n\r\n            },\r\n            operation: deleteParam.operation,\r\n            dataState: this.state.dataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        const sbarcodeid = this.props.Login.masterData.barcodedata;\r\n        if (selectedRecord[\"sbarcodeid\"] && selectedRecord[\"sbarcodeid\"].length === parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength)) {\r\n\r\n            let invalidbarcode = selectedRecord[\"sbarcodeid\"].substring(1, 2);\r\n            if (parseInt(invalidbarcode) === SampleCycle.COLLECTION) {\r\n\r\n                if (sbarcodeid != undefined && sbarcodeid != '') {\r\n\r\n                    let inputData = {};\r\n                    inputData[\"storagesamplecollection\"] = {};\r\n                    if (this.props.Login.operation === \"create\") {\r\n\r\n                        inputData[\"storagesamplecollection\"][\"nunitcode\"] = selectedRecord[\"nunitcode\"] ? selectedRecord[\"nunitcode\"].value : -1;\r\n                        inputData[\"storagesamplecollection\"][\"nsampleqty\"] = selectedRecord[\"nsampleqty\"] ? Number(selectedRecord[\"nsampleqty\"]) : -1;\r\n                        inputData[\"storagesamplecollection\"][\"jsondata\"] = Lims_JSON_stringify(JSON.stringify(this.props.Login.masterData.barcodedata));\r\n                    }\r\n                    inputData[\"storagesamplecollection\"][\"nprojecttypecode\"] = this.props.Login.masterData.selectedProjectType.value || transactionStatus.NA;\r\n                    if (this.props.Login.operation === \"update\") {\r\n                        inputData[\"storagesamplecollection\"][\"nsamplecollectioncode\"] = this.props.Login.selectedId;\r\n                    }\r\n                    inputData[\"storagesamplecollection\"][\"sbarcodeid\"] = selectedRecord[\"sbarcodeid\"] ? selectedRecord[\"sbarcodeid\"] : -1;\r\n\r\n                    inputData[\"storagesamplecollection\"][\"dcollectiondate\"] = formatInputDate(selectedRecord[\"dcollectiondate\"], false);\r\n                    inputData[\"storagesamplecollection\"][\"scomments\"] = selectedRecord[\"scomments\"] && selectedRecord[\"scomments\"] || \"\";\r\n                    inputData[\"storagesamplecollection\"][\"ntzcollectiondatetime\"] = selectedRecord[\"ntzcollectiondatetime\"] && selectedRecord[\"ntzcollectiondatetime\"].value || transactionStatus.NA\r\n                    inputData[\"storagesamplecollection\"][\"noffsetdcollectiondatetime\"] = selectedRecord[\"noffsetdcollectiondatetime\"] && selectedRecord[\"noffsetdcollectiondatetime\"].value || transactionStatus.NA\r\n                    let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n                    let fromDate = obj.fromDate;\r\n                    let toDate = obj.toDate;\r\n                    inputData[\"fromDate\"] = fromDate;\r\n                    inputData[\"toDate\"] = toDate;\r\n                    inputData[\"nprojecttypecode\"] = this.props.Login.masterData.selectedProjectType.value || transactionStatus.NA;\r\n                    inputData[\"userinfo\"] = {\r\n                        ...this.props.Login.userInfo,\r\n                        sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                        smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\r\n                    }\r\n\r\n\r\n\r\n                    const inputParam = {\r\n                        nformcode: this.props.Login.userInfo.nformcode,\r\n                        classUrl: \"storagesamplecollection\",\r\n                        methodUrl: \"SampleCollection\",\r\n                        inputData: inputData,\r\n                        operation: this.props.Login.operation,\r\n                        saveType, formRef,\r\n                        selectedRecord: this.state.selectedRecord || {}\r\n                    }\r\n\r\n                    const masterData = this.props.Login.masterData;\r\n\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }\r\n                    else {\r\n                        this.props.saveCollection(inputParam, masterData);\r\n                    }\r\n                } else {\r\n                    toast.warn(\r\n                        this.props.intl.formatMessage({\r\n                            id: \"IDS_CLICKENTERTOJSONRECORD\",\r\n                        })\r\n                    );\r\n                }\r\n\r\n            } else {\r\n                toast.warn(\r\n                    this.props.intl.formatMessage({\r\n                        id: \"IDS_INVALIDBARCODEID\", //ALPD-4498 Changed IDS to throw alert correctly by VISHAKH\r\n                    })\r\n                );\r\n            }\r\n        } else {\r\n            toast.warn(\r\n                this.props.intl.formatMessage({\r\n                    id: \"IDS_INVALIDABARCODE\",  //ALPD-4498 Changed IDS to throw alert correctly by VISHAKH\r\n                })\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (fieldName === \"nprojecttypecode\") {\r\n            let inputData = [];\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n            inputData[\"fromDate\"] = fromDate;\r\n            inputData[\"toDate\"] = toDate;\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                nprojecttypecode: parseInt(comboData.value),\r\n                selectedProjectType: comboData,\r\n                toDate: toDate,\r\n                fromDate: fromDate\r\n            }\r\n            const masterData = { ...this.props.Login.masterData }\r\n            const inputParam = { masterData, inputData }\r\n            this.props.getSampleCollection(inputParam)\r\n        } else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n    handleDateChangeSlidout = (dateName, dateValue) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    };\r\n    autoSaveGetDataCollection = (event) => {\r\n        let selectedRecord = this.state.selectedRecord || {}\r\n      /*  let nsamplecyclestartpostion=this.props.Login.masterData&&this.props.Login.masterData.samplecyclestartpostion || -1;\r\n        let samplecyclenfieldlength=this.props.Login.masterData&&this.props.Login.masterData.samplecyclenfieldlength || -1;*/\r\n\r\n        event.stopPropagation();\r\n        let invalidbarcode = event.target.value.substring(1, 2);\r\n      \r\n        if (parseInt(selectedRecord[\"sbarcodeid\"] && selectedRecord[\"sbarcodeid\"].length) === parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength)\r\n            && event.keyCode === 13) {\r\n\r\n            if (parseInt(invalidbarcode) === SampleCycle.COLLECTION) {\r\n\r\n                let inputParam = {\r\n                    nprojecttypecode: this.props.Login.masterData.selectedProjectType.value,\r\n                    spositionvalue: event.target.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nbarcodeLength: parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength),\r\n                    jsondata: {},\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedRecord: selectedRecord || {}\r\n                }\r\n                this.props.getBarcodeDataCollection(inputParam);\r\n            }\r\n            else {\r\n                toast.warn(\r\n                    this.props.intl.formatMessage({\r\n                        id: \"IDS_INVALIDBARCODEID\",\r\n                    })\r\n                );\r\n            }\r\n        }\r\n        // else {\r\n        //     toast.warn(\r\n        //         this.props.intl.formatMessage({\r\n        //             id: \"IDS_INVALIDBARCODELENGTH\",\r\n        //         })\r\n        //     );\r\n        // }\r\n    };\r\n\r\n    onInputOnChange = (event, fieldname) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (fieldname === 'nsampleqty') {\r\n            if (/^\\d{0,3}(\\.\\d{0,2})?$/.test(event.target.value) || event.target.value === \"\") {\r\n\r\n                selectedRecord[fieldname] = event.target.value;\r\n\r\n            }\r\n        }\r\n        else if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let { projectType } = this.state;\r\n        let bool = false;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n        if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\r\n            const projectTypeMap = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, undefined);\r\n            projectType = projectTypeMap.get(\"OptionList\");\r\n            bool = true;\r\n\r\n        }\r\n        if (this.props.Login.masterData.selectedProjectType !== previousProps.Login.masterData.selectedProjectType) {\r\n            const projectTypeMap = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, undefined);\r\n            projectType = projectTypeMap.get(\"OptionList\");\r\n            bool = true;\r\n        }\r\n\r\n        // if (this.props.Login.masterData.SampleCollection !== previousProps.Login.masterData.SampleCollection) {\r\n        //     let samplecollect = [];\r\n        //     samplecollect =\r\n        //         this.props.Login.masterData.SampleCollection && this.props.Login.masterData.SampleCollection.map(sampleItem => {\r\n        //             const entries = Object.entries(sampleItem.jsondata);\r\n        //             if (entries.length > 0) {\r\n        //                 const newItem = { ...sampleItem };\r\n        //                 entries.forEach(([key, value]) => {\r\n\r\n        //                     newItem[key] = value;\r\n\r\n        //                 });\r\n        //                 return newItem;\r\n        //             }\r\n        //             return sampleItem;\r\n        //         });\r\n\r\n        //     // let { dataState } = this.state;\r\n        //     // if (dataState === undefined) {\r\n        //     //     dataState = { skip: 0, take: this.state.dataState.take }\r\n        //     // }\r\n        //     // if (this.state.dataResult.data) {\r\n        //     //     if (this.state.dataResult.data.length === 1) {\r\n        //     //         let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\r\n        //     //             this.state.dataState.skip\r\n        //     //         dataState = { skip: skipcount, take: this.state.dataState.take }\r\n        //     //     }\r\n        //     // }\r\n\r\n        //     this.setState({\r\n        //         data: samplecollect,\r\n        //         dataResult: process(samplecollect || []),\r\n        //     });\r\n        // }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            let temporaryStorage = [];\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                temporaryStorage =\r\n                    this.props.Login.masterData.SampleCollection && this.props.Login.masterData.SampleCollection.map(sampleItem => {\r\n                        const entries = Object.entries(sampleItem.jsondata);\r\n                        if (entries.length > 0) {\r\n                            const newItem = { ...sampleItem };\r\n                            entries.forEach(([key, value]) => {\r\n\r\n                                newItem[key] = value;\r\n\r\n                            });\r\n                            return newItem;\r\n                        }\r\n                        return sampleItem;\r\n                    });\r\n                // let { dataState } = this.state;\r\n                // if (dataState === undefined) {\r\n                //     dataState = { skip: 0, take: this.state.dataState.take }\r\n                // }\r\n                // if (this.state.dataResult.data) {\r\n                //     if (this.state.dataResult.data.length === 1) {\r\n                //         let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\r\n                //             this.state.dataState.skip\r\n                //         dataState = { skip: skipcount, take: this.state.dataState.take }\r\n                //     }\r\n                // }\r\n\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: temporaryStorage,\r\n                    dataResult: process(temporaryStorage || [],this.state.dataState),\r\n                });\r\n            }else {\r\n                //jana ALPD-4694 Temporary Storage-->While Try to Delete the Records the Fields are Align Wrongly\r\n                let samplecollect = [];\r\n                samplecollect =\r\n                    this.props.Login.masterData.SampleCollection && this.props.Login.masterData.SampleCollection.map(sampleItem => {\r\n                        const entries = Object.entries(sampleItem.jsondata);\r\n                        if (entries.length > 0) {\r\n                            const newItem = { ...sampleItem };\r\n                            entries.forEach(([key, value]) => {\r\n    \r\n                                newItem[key] = value;\r\n    \r\n                            });\r\n                            return newItem;\r\n                        }\r\n                        return sampleItem;\r\n                    });\r\n                    let {dataState}=this.state;\r\n                    if(this.props.Login.dataState===undefined  || this.props.Login.masterData.selectedProjectType !== previousProps.Login.masterData.selectedProjectType){\r\n                        dataState={skip:0,take:this.state.dataState.take}\r\n                    }\r\n                     if(this.state.dataResult.data){\r\n                         if(this.state.dataResult.data.length ===1){\r\n                            let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                            this.state.dataState.skip\r\n                             dataState={skip:skipcount,take:this.state.dataState.take}\r\n                         }\r\n                     \r\n                }\r\n            \r\n                 this.setState({\r\n                    data: samplecollect, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(samplecollect || [],dataState),\r\n                    dataState\r\n                });\r\n            }\r\n            /*  else {\r\n                  if (this.props.Login.masterData.SampleCollection) {\r\n                      let samplecollect = [];\r\n                      samplecollect =\r\n                          this.props.Login.masterData.SampleCollection && this.props.Login.masterData.SampleCollection.map(sampleItem => {\r\n                              const entries = Object.entries(sampleItem.jsondata);\r\n                              if (entries.length > 0) {\r\n                                  const newItem = { ...sampleItem };\r\n                                  entries.forEach(([key, value]) => {\r\n  \r\n                                      newItem[key] = value;\r\n  \r\n                                  });\r\n                                  return newItem;\r\n                              }\r\n                              return sampleItem;\r\n                          });\r\n  \r\n                      this.setState({\r\n                          data: samplecollect,\r\n                          dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n                          dataResult: process(samplecollect || [], { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }),\r\n                      });\r\n                  }\r\n              }*/\r\n        }else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n        if (this.props.Login.masterData.jsondataBarcodeFields !== previousProps.Login.masterData.jsondataBarcodeFields) {\r\n            const retrievedData = sortData(this.props.Login.masterData.jsondataBarcodeFields,\"ascending\",\"nsorter\");\r\n            this.setState({ jsondataBarcodeFields: retrievedData });\r\n        }\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                projectType\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        if (dateName === 'todate') {\r\n            selectedRecord[dateName] = dateValue;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[dateName] = dateValue;\r\n\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        // this.setState({ selectedRecord });\r\n        // this.reloadData(selectedRecord, true);\r\n\r\n        let dateObj = {};\r\n        let obj = convertDateValuetoString(selectedRecord['fromdate'] && selectedRecord['fromdate'] || this.props.Login.masterData.FromDate, selectedRecord['todate'] && selectedRecord['todate'] || this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate: fromDate,\r\n                toDate: toDate,\r\n                selectedProjectType: this.props.Login.masterData.selectedProjectType,\r\n                nprojecttypecode: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.value || -1\r\n            }\r\n        };\r\n        this.props.getSampleCollection(inputParam);\r\n    }\r\n\r\n    reloadData = () => {\r\n        //this.searchRef.current.value = \"\";\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n\r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo, true);\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate: obj.fromDate,\r\n                toDate: obj.toDate,\r\n                \"nprojecttypecode\": this.props.Login.masterData.selectedProjectType.value || -1\r\n                // currentdate: isDateChange === true ? null : formatInputDate(new Date(), true)\r\n            },\r\n            classUrl: 'storagesamplecollection',\r\n            methodUrl: \"SampleCollection\",\r\n            displayName: \"IDS_SAMPLECOLLECTION\",\r\n            userInfo: this.props.Login.userInfo,\r\n            selectedRecord: this.state.selectedRecord || {}\r\n        };\r\n        this.props.getSampleCollection(inputParam);\r\n    }\r\n\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster,\r\n    updateStore, validateEsignCredential, getComboSampleCollection, getBarcodeDataCollection, saveCollection, getActiveSampleCollectionById, getSampleCollection, validateEsignCredentialSampleCollection\r\n})(injectIntl(SampleCollection));"]},"metadata":{},"sourceType":"module"}