{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\RegistrationDesigner.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { showUnderDevelopment, callService, crudMaster, updateStore, getSampleTypeChange, getRegTypeChange, getRegSubTypeChange, getAttachmentCombo, viewAttachment, getCommentsCombo, filterTransactionList, validateEsignCredential, ReloadData, getSampleChildTabDetail, getTestChildTabDetailRegistration, getPreviewTemplate, getChildValues, getRegistrationSample, getRegistrationsubSampleDetail, getRegistrationTestDetail, acceptRegistration, addMoreTest, createRegistrationTest, getEditRegistrationComboService, cancelTestAction, cancelSampleAction, addsubSampleRegistration, saveSubSample, getEditSubSampleComboService, onUpdateSubSampleRegistration, cancelSubSampleAction, preregRecordToQuarantine, componentTest, getSubSampleChildTabDetail, validateEsignforRegistration, onApprovalConfigVersionChange } from '../../actions';\nimport { Button, Card, Col, Nav, Row, FormLabel } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { getControlMap, showEsign, sortData, constructOptionList, onDropAttachFileList, deleteAttachmentDropZone, convertDateTimetoString, comboChild, childComboClear, convertDateTimetoStringDBFormat } from '../../components/CommonScript';\nimport RegistrationFilter from './RegistrationFilter';\nimport Esign from '../audittrail/Esign';\nimport { injectIntl } from 'react-intl';\nimport { MediaHeader, ProductList } from '../product/product.styled';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SplitterLayout from \"react-splitter-layout\";\nimport AddTest from './AddTest';\nimport { designProperties, RegistrationType, transactionStatus, SideBarSeqno, SideBarTabIndex } from '../../components/Enumeration'; // import BreadcrumbComponentToolbar from '../../components/ToolbarBreadcrumb.Component';\n\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ScrollBar from 'react-perfect-scrollbar';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileInvoice, faEye, faPlus, faSync, faBorderAll, faLink, faCommentDots, faChevronRight, faComments, faComment, faPaperclip, faFlask, faMicroscope, faHistory } from '@fortawesome/free-solid-svg-icons';\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\nimport SampleInfoView from '../approval/SampleInfoView';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddPrinter from './AddPrinter';\nimport SampleGridTab from './SampleGridTab';\nimport AddFile from './AddFile';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveSampleComments, onSaveSubSampleComments, onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\nimport { onSaveSampleAttachment, onSaveSubSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport { ReactComponent as Quarantine } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/Quarantine.svg\";\nimport { ReactComponent as Register } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/register.svg\";\nimport { ReactComponent as Reject } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/reject.svg\";\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript';\nimport RegistrationResultTab from './RegistrationResultTab';\nimport PortalModal from '../../PortalModal';\nimport PreRegisterSlideOutModal from './PreRegisterSlideOutModal';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { checkTestPresent, getRegistrationSubSample } from './RegistrationValidation';\nimport AddSubSample from './AddSubSample';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport ContextAwareToggle from '../../components/sidebar/ContextAwareToggle';\nimport QRCode from 'react-qr-code';\n\nclass RegistrationDesigner extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onReload = () => {\n      // let RealFromDate = new Date(this.props.Login.masterData.RealFromDate)\n      // let RealToDate = new Date(this.props.Login.masterData.RealToDate)\n      const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      const RealFromDate = obj.fromDate;\n      const RealToDate = obj.toDate;\n      let RealSampleTypeValue = this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue;\n      let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue;\n      let RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue;\n      let RealDesignTemplateMappingValue = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue;\n      let RealApprovalConfigVersionValue = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue;\n      let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      let activeSubSampleTab = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n      let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      let SampleTypeValue = RealSampleTypeValue;\n      let RegTypeValue = RealRegTypeValue;\n      let RegSubTypeValue = RealRegSubTypeValue;\n      let FilterStatusValue = RealFilterStatusValue;\n      let DesignTemplateMappingValue = RealDesignTemplateMappingValue;\n      let ApprovalConfigVersionValue = RealApprovalConfigVersionValue; // let FromDate = this.props.Login.masterData.FromDate\n      // let ToDate = this.props.Login.masterData.ToDate\n\n      const FromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      const ToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n      let masterData = { ...this.props.Login.masterData,\n        RealSampleTypeValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        FromDate,\n        ToDate,\n        RealFilterStatusValue,\n        RealFromDate,\n        RealToDate,\n        SampleTypeValue,\n        RegTypeValue,\n        RegSubTypeValue,\n        FilterStatusValue,\n        DesignTemplateMappingValue,\n        RealDesignTemplateMappingValue,\n        RealApprovalConfigVersionValue\n      };\n      let inputData = {\n        npreregno: \"\",\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        nfilterstatus: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus,\n        userinfo: this.props.Login.userInfo,\n        activeSampleTab,\n        activeTestTab,\n        activeSubSampleTab,\n        flag: 1,\n        nneedtemplatebasedflow: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedtemplatebasedflow,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        checkBoxOperation: 3\n      };\n\n      if (inputData.nsampletypecode) {\n        // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\n        inputData['FromDate'] = obj.fromDate;\n        inputData['ToDate'] = obj.toDate;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchSampleRef: this.searchSampleRef,\n          searchTestRef: this.searchTestRef,\n          selectedFilter: this.state.selectedFilter\n        };\n        this.props.ReloadData(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      const RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\n      const RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate);\n      let RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue;\n      let RealRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue;\n      let RealRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue;\n      let RealDesignTemplateMappingValue = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue;\n      let RealApprovalConfigVersionValue = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue;\n      let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      let activeSubSampleTab = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n      let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      let masterData = { ...this.props.Login.masterData,\n        RealSampleTypeValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        RealFilterStatusValue,\n        RealFromDate,\n        RealToDate,\n        RealDesignTemplateMappingValue,\n        RealApprovalConfigVersionValue\n      };\n      let inputData = {\n        npreregno: \"\",\n        nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        userinfo: this.props.Login.userInfo,\n        activeSampleTab,\n        activeTestTab,\n        activeSubSampleTab,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        napproveconfversioncode: this.props.Login.masterData.ApprovalConfigVersion && this.props.Login.masterData.ApprovalConfigVersionValue.napproveconfversioncode,\n        ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        checkBoxOperation: 3\n      };\n\n      if (inputData.nsampletypecode) {\n        if (inputData.ndesigntemplatemappingcode) {\n          const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n          inputData['FromDate'] = obj.fromDate;\n          inputData['ToDate'] = obj.toDate;\n          const selectedFilter = {};\n          selectedFilter[\"fromdate\"] = RealFromDate;\n          selectedFilter[\"todate\"] = RealToDate;\n          const inputParam = {\n            masterData,\n            inputData,\n            searchSubSampleRef: this.searchSubSampleRef,\n            searchSampleRef: this.searchSampleRef,\n            searchTestRef: this.searchTestRef,\n            selectedFilter\n          };\n          this.props.getRegistrationSample(inputParam);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PLSSCONFIGREGISTRATIONTEMPLATE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.verticalPaneSizeChange = val => {\n      if (this.state.enableAutoHeight) {\n        this.setState({\n          initialVerticalWidth: val - 150\n        });\n      }\n    };\n\n    this.changeSplitterOption = () => {\n      this.setState({\n        enableAutoHeight: !this.state.enableAutoHeight,\n        initialVerticalWidth: \"57vh\"\n      });\n    };\n\n    this.sideNavDetail = screenName => {\n      let testList = this.props.Login.masterData.RegistrationGetTest || [];\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\n      let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      return screenName == \"IDS_PARAMETERRESULTS\" ? /*#__PURE__*/React.createElement(RegistrationResultTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.testDataStateChange,\n        screenName: \"IDS_PARAMETERRESULTS\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 17\n        }\n      }) : screenName == \"IDS_ATTACHMENTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\",\n        tabDetail: this.attachmentTabDetail(),\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 21\n        }\n      }) : screenName == \"IDS_COMMENTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_TESTCOMMENTS\",\n        tabDetail: this.commentTabDetail(),\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 25\n        }\n      }) : screenName == \"IDS_SAMPLEDETAILS\" ? this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n        data: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 ? this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {},\n        SingleItem: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ? this.state.SingleItem : [],\n        screenName: \"IDS_SAMPLEINFO\",\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(SampleGridTab, {\n        userInfo: this.props.Login.masterData.userInfo || {},\n        GridData: this.props.Login.masterData.selectedSample || [],\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.sampleGridDataState,\n        dataStateChange: this.sampleInfoDataStateChange,\n        extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n        detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n        primaryKeyField: \"npreregno\",\n        expandField: \"expanded\",\n        screenName: \"IDS_SAMPLEINFO\" //jsonField={\"jsondata\"}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 33\n        }\n      }) : \"\";\n    };\n\n    this.attachmentTabDetail = () => {\n      const attachmentTabMap = new Map();\n      let testList = this.props.Login.masterData.RegistrationGetTest || [];\n      let {\n        testskip,\n        testtake,\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      testList = testList.slice(testskip, testskip + testtake);\n      let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      attachmentTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_TESTATTACHMENTS\",\n        tabSequence: SideBarSeqno.TEST,\n        selectedMaster: \"selectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: getSameRecordFromTwoArrays(testList || [], this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"),\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        dataState: this.state.testAttachmentDataState,\n        dataStateChange: this.testDataStateChange,\n        nsubsampleneed: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: this.props.Login.masterData.selectedTest\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 53\n        }\n      }));\n      this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample && attachmentTabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        tabSequence: SideBarSeqno.SUBSAMPLE,\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.selectedSubSample || [],\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSubSample || []\n        },\n        selectedListName: \"IDS_SUBSAMPLE\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 62\n        }\n      }));\n      attachmentTabMap.set(\"IDS_SAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        tabSequence: SideBarSeqno.SAMPLE,\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.selectedSample || [],\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        userInfo: this.props.Login.userInfo,\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\",\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\",\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSample || []\n        },\n        selectedListName: \"IDS_SAMPLE\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 13\n        }\n      }));\n      return attachmentTabMap;\n    };\n\n    this.commentTabDetail = () => {\n      const commentTabMap = new Map();\n      let testList = this.props.Login.masterData.RegistrationGetTest || [];\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\n      let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\n      let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      let {\n        skip,\n        take\n      } = this.state;\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      let ntransactionsamplecode = this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\n      let {\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\n      commentTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        masterData: this.props.Login.masterData,\n        tabSequence: SideBarSeqno.TEST,\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedTest\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        isTestComment: false,\n        masterList: getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"),\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 47\n        }\n      }));\n      this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample && commentTabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        masterData: this.props.Login.masterData,\n        tabSequence: SideBarSeqno.SUBSAMPLE,\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        isTestComment: false,\n        masterList: selectedSubSampleList,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SUBSAMPLES\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 56\n        }\n      }));\n      commentTabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        masterData: this.props.Login.masterData,\n        tabSequence: SideBarSeqno.SAMPLE,\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSampleComment\",\n        editName: \"EditSampleComment\",\n        deleteName: \"DeleteSampleComment\",\n        methodUrl: \"SampleComment\",\n        isTestComment: false,\n        masterList: selectedSampleList,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nregcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLES\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 49\n        }\n      }));\n      return commentTabMap;\n    };\n\n    this.onTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n      const tabseqno = tabProps.tabSequence; // if (activeTestTab !== this.props.Login.activeTestTab) {\n\n      if (tabseqno == SideBarSeqno.TEST) {\n        if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedTest: this.props.Login.masterData.selectedTest,\n            ntransactiontestcode: this.props.Login.masterData.selectedTest ? String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n            npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestTab,\n            screenName: activeTestTab,\n            resultDataState: this.state.resultDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            testAttachmentDataState: this.state.testAttachmentDataState,\n            activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\n            activeTabId: tabProps.activeTabId ? tabProps.activeTabId : this.state.activeTabId\n          };\n          this.props.getTestChildTabDetailRegistration(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      } else if (tabseqno == SideBarSeqno.SUBSAMPLE) {\n        if (activeTestTab !== this.props.Login.activeTestTab) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedSubSample: this.props.Login.masterData.selectedSubSample,\n            ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            screenName: activeTestTab,\n            activeSubSampleTab: activeTestTab,\n            subSampleCommentDataState: this.state.subSampleCommentDataState,\n            subSampleAttachmentDataState: this.state.subSampleAttachmentDataState\n          };\n          this.props.getSubSampleChildTabDetail(inputData);\n        }\n      } else {\n        if (activeTestTab !== this.props.Login.activeTestTab) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedSample: this.props.Login.masterData.selectedSample,\n            npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            screenName: activeTestTab,\n            activeSampleTab: activeTestTab\n          };\n          this.props.getSampleChildTabDetail(inputData);\n        }\n      }\n    };\n\n    this.changePropertyView = (index, event, status) => {\n      let id = false;\n\n      if (event && event.ntransactiontestcode) {\n        id = event.ntransactiontestcode;\n      } else if (event && event.ntransactionsamplecode) {\n        id = event.ntransactionsamplecode;\n      } else if (event && event.npreregno) {\n        id = event.npreregno;\n      }\n\n      let activeTabIndex;\n      let activeTabId;\n\n      if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\n      }\n\n      if (status != \"click\") {\n        if (index == SideBarTabIndex.RESULT) {\n          const tabProps = {\n            tabSequence: SideBarSeqno.TEST,\n            screenName: \"IDS_PARAMETERRESULTS\",\n            activeTabIndex,\n            activeTabId\n          };\n          this.onTabChange(tabProps);\n        } else if (index == SideBarTabIndex.ATTACHMENTS) {\n          const tabProps = {\n            tabSequence: SideBarSeqno.TEST,\n            screenName: \"IDS_TESTATTACHMENTS\",\n            activeTabIndex,\n            activeTabId\n          };\n          this.onTabChange(tabProps);\n        } else if (index == SideBarTabIndex.COMMENTS) {\n          const tabProps = {\n            tabSequence: SideBarSeqno.TEST,\n            screenName: \"IDS_TESTCOMMENTS\",\n            activeTabIndex,\n            activeTabId\n          };\n          this.onTabChange(tabProps);\n        } else {\n          if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                activeTabIndex: this.state.activeTabIndex !== index ? index : id ? index : false,\n                activeTabId: id\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        }\n      } else {// if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        //     const updateInfo = {\n        //         typeName: DEFAULT_RETURN,\n        //         data: {\n        //             activeTabIndex :activeTabIndex\n        //            // activeTabId :  id\n        //         }\n        //     }\n        //     this.props.updateStore(updateInfo);\n        //     }\n      }\n    };\n\n    this.onInputSwitchOnChange = event => {\n      if (event.target.name == \"PopupNav\") {\n        this.setState({\n          enablePropertyPopup: !this.state.enablePropertyPopup\n        });\n      } else {\n        this.setState({\n          enableAutoClick: !this.state.enableAutoClick\n        });\n      }\n    };\n\n    this.changePropertyViewClose = id => {\n      // this.setState({\n      //             activeTabIndex :undefined,\n      //             activeTestTab:undefined,\n      //             activeTabId :  id\n      //         })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          activeTabIndex: undefined,\n          activeTestTab: undefined,\n          activeTabId: id\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.printBarcode = inputParam => {\n      this.setState({\n        selectedRecord: {\n          barcodevalue: inputParam.sample.sarno,\n          barcodeData: inputParam.sample\n        },\n        showQRCode: true,\n        openModal: true\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        //  if (!nneedsubsample) {\n        const selectedRecord = this.state.selectedRecord || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectedRecord[\"ntzdreceivedate\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else {\n          // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n          // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n          //     //selectComponent[\"nneedservice\"] = true;\n          // }\n          selectedRecord[fieldName] = comboData;\n          selectedRecord[\"Sample Name\"] = comboData.label;\n          selectedRecord[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\n          selectedRecord[\"ntestgrouptestcode\"] = [];\n          this.props.componentTest(selectedRecord, true, this.props.Login.specBasedComponent, this.props.Login.Conponent);\n        } // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         selectComponent\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        // } else {\n        //     const selectComponent = this.state.selectComponent || {};\n        //     selectComponent[fieldName] = comboData;\n        //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n        //     this.setState({ selectComponent })\n        // }\n\n      }\n    };\n\n    this.onInputOnSubSampleChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          // item: comboData ? comboData.item : \"\",\n          item: comboData ? { ...comboData.item,\n            pkey: control.valuemember,\n            nquerybuildertablecode: control.nquerybuildertablecode,\n            \"source\": control.source\n          } : \"\",\n          label: comboName,\n          nameofdefaultcomp: control.name\n        };\n        comboData[\"item\"] = { ...comboData[\"item\"],\n          pkey: control.valuemember,\n          nquerybuildertablecode: control.nquerybuildertablecode,\n          \"source\": control.source\n        };\n\n        if (comboData) {\n          selectedRecord[comboName] = comboData;\n        } else {\n          selectedRecord[comboName] = [];\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.state.regSubSamplecomboComponents, control.child, \"label\");\n          childColumnList = {};\n          childComboList.map(columnList => {\n            const val = comboChild(this.state.regSubSamplecomboComponents, columnList, childColumnList, false);\n            childColumnList = val.childColumnList;\n            return null;\n          });\n          parentList = getSameRecordFromTwoArrays(this.state.regSubSamplewithoutCombocomponent, control.child, \"label\");\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.regSubSamplecomboData, childComboList, childColumnList, this.state.regSubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          this.setState({\n            selectedRecord\n          });\n        }\n      } else {\n        let regSubSamplecomboData = this.props.Login.regSubSamplecomboData;\n        selectedRecord[control.label] = \"\";\n        const inputParam = {\n          control,\n          comboComponents: this.state.regSubSamplecomboData,\n          withoutCombocomponent: this.state.regSubSamplewithoutCombocomponent,\n          selectedRecord: selectedRecord,\n          comboData: regSubSamplecomboData\n        };\n        const childParam = childComboClear(inputParam);\n        selectedRecord = childParam.selectedRecord;\n        regSubSamplecomboData = childParam.comboData;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            regSubSamplecomboData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (value === 0) {\n        selectedRecord[name] = undefined;\n      } else {\n        selectedRecord[name] = value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlurSubSample = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n\n      if (operation === 'create') {\n        let objSubSample = this.state.selectedRecord;\n        const userInfo = this.props.Login.userInfo; //   let saveSubSample = {};\n\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.selectedSample, sampleList, 'npreregno');\n        const findSampleAlloSpec = [...new Set(sampleList.map(item => item.nallottedspeccode))]; // if (this.props.Login.specBasedComponent) {\n        //     saveSubSample[\"nspecsampletypecode\"] = objSubSample[\"nspecsampletypecode\"] ? objSubSample[\"nspecsampletypecode\"] : -1\n        //     saveSubSample[\"ncomponentcode\"] = objSubSample[\"ncomponentcode\"] ? objSubSample[\"ncomponentcode\"].value : -1\n        // } else {\n        //     const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\n        //     saveSubSample[\"nspecsampletypecode\"] = findSampleSpec[0] ? findSampleSpec[0] : -1;\n        //     saveSubSample[\"ncomponentcode\"] = -1\n        // }\n        // saveSubSample[\"jsondata\"] = {}\n        // saveSubSample[\"jsonuidata\"] = {}\n        // const dateList = []\n        // this.props.Login.masterData.SubSampleTemplate &&\n        //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        //         row.children.map(column => {\n        //             column.children.map(component => {\n        //                 if (component.hasOwnProperty(\"children\")) {\n        //                     //let componentrowlabel = ''\n        //                     // let componentrowvalue = ''\n        //                     component.children.map(componentrow => {\n        //                         if (componentrow.inputtype === \"combo\") {\n        //                             saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\n        //                                 { value: objSubSample[componentrow.label].value, label: objSubSample[componentrow.label].label } : -1\n        //                             saveSubSample[\"jsonuidata\"][componentrow.label] = objSubSample[componentrow.label] ? objSubSample[componentrow.label].label : \"\"\n        //                             // if (componentrow.mandatory || objSubSample[componentrow.label]) {\n        //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                             //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label].label\n        //                             // }\n        //                         }\n        //                         else if (componentrow.inputtype === \"date\") {\n        //                             if (componentrow.mandatory) {\n        //                                 saveSubSample[\"jsondata\"][componentrow.label] = convertDateTimetoStringDBFormat(objSubSample[componentrow.label] ?\n        //                                     objSubSample[componentrow.label] : new Date(), userInfo);\n        //                                 saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\n        //                             } else {\n        //                                 saveSubSample[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n        //                                 convertDateTimetoStringDBFormat(objSubSample[componentrow.label] ?\n        //                                         objSubSample[componentrow.label] : new Date(), userInfo) :\n        //                                     objSubSample[componentrow.label] ? convertDateTimetoStringDBFormat(objSubSample[componentrow.label] ?\n        //                                         objSubSample[componentrow.label] : new Date(), userInfo) : \"\";\n        //                                 saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\n        //                             }\n        //                             if (componentrow.timezone) {\n        //                                 saveSubSample[\"jsondata\"][`tz${componentrow.label}`] = objSubSample[`tz${componentrow.label}`] ?\n        //                                     { value: objSubSample[`tz${componentrow.label}`].value, label: objSubSample[`tz${componentrow.label}`].label } :\n        //                                     defaulttimezone ? defaulttimezone : -1\n        //                                 saveSubSample[\"jsonuidata\"][`tz${componentrow.label}`] = saveSubSample[\"jsondata\"][`tz${componentrow.label}`]\n        //                             }\n        //                             dateList.push(componentrow.label)\n        //                         }\n        //                         else {\n        //                             saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\n        //                                 objSubSample[componentrow.label] : \"\"\n        //                             saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\n        //                             // if (objSubSample[componentrow.label]) {\n        //                             //     componentrowlabel = componentrowlabel + '&' + objSubSample.label\n        //                             //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label]\n        //                             // }\n        //                         }\n        //                         return saveSubSample;\n        //                     })\n        //                     //saveSubSample[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n        //                 }\n        //                 else {\n        //                     if (component.inputtype === \"combo\") {\n        //                         saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\n        //                             { value: objSubSample[component.label].value, label: objSubSample[component.label].label } : -1\n        //                         saveSubSample[\"jsonuidata\"][component.label] = objSubSample[component.label] ? objSubSample[component.label].label : \"\"\n        //                     }\n        //                     else if (component.inputtype === \"date\") {\n        //                         if (component.mandatory) {\n        //                             saveSubSample[\"jsondata\"][component.label] = convertDateTimetoStringDBFormat(objSubSample[component.label] ?\n        //                                 objSubSample[component.label] : new Date(), userInfo);\n        //                             saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\n        //                         } else {\n        //                             saveSubSample[\"jsondata\"][component.label] = component.loadcurrentdate ?\n        //                             convertDateTimetoStringDBFormat(objSubSample[component.label] ?\n        //                                     objSubSample[component.label] : new Date(), userInfo) :\n        //                                 objSubSample[component.label] ? convertDateTimetoStringDBFormat(objSubSample[component.label] ?\n        //                                     objSubSample[component.label] : new Date(), userInfo) : \"\";\n        //                             saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\n        //                         }\n        //                         if (component.timezone) {\n        //                             saveSubSample[\"jsondata\"][`tz${component.label}`] = objSubSample[`tz${component.label}`] ?\n        //                                 { value: objSubSample[`tz${component.label}`].value, label: objSubSample[`tz${component.label}`].label } :\n        //                                 defaulttimezone ? defaulttimezone : -1\n        //                             saveSubSample[\"jsonuidata\"][`tz${component.label}`] = saveSubSample[\"jsondata\"][`tz${component.label}`]\n        //                         }\n        //                         dateList.push(component.label)\n        //                     }\n        //                     else {\n        //                         saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\n        //                             objSubSample[component.label] : \"\"\n        //                         saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\n        //                     }\n        //                 }\n        //                 return saveSubSample;\n        //             }\n        //             )\n        //             return saveSubSample;\n        //         })\n        //         return saveSubSample;\n        //     })\n        //  saveSubSample[\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1;\n        // Component.unshift(saveSubSample);\n\n        let selectedTestData = objSubSample[\"ntestgrouptestcode\"];\n        const selectedTestArray = [];\n        selectedTestData && selectedTestData.map(item => {\n          return selectedTestArray.push(item.item);\n        }); // const Test = this.props.Login.Test || [];\n        // const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n        //Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\n        //  const saveSubSample = this.state.selectedRecord||{}\n        // if (this.props.Login.specBasedComponent) {\n        //   saveSubSample[\"nspecsampletypecode\"] = objSubSample[\"nspecsampletypecode\"] ? objSubSample[\"nspecsampletypecode\"] : -1\n        // saveSubSample[\"ncomponentcode\"] = objSubSample[\"ncomponentcode\"] ? objSubSample[\"ncomponentcode\"].value : -1\n        //  } \n        //   if(!this.props.Login.specBasedComponent) {\n        //  const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\n        // objSubSample[\"nspecsampletypecode\"] = selectedTestData&&selectedTestData.length>0?selectedTestData[0]['item']['nspecsampletypecode']:-1;\n        // objSubSample[\"ncomponentcode\"] = -1\n        //  }\n\n        const map = {};\n        const param = getRegistrationSubSample(objSubSample, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, false, this.props.Login.specBasedComponent, operation);\n        map[\"RegistrationSample\"] = param.sampleRegistration;\n        map[\"subsampleDateList\"] = param.dateList;\n        map[\"RegistrationSample\"][\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1; // map['RegistrationSample'] = saveSubSample\n        //   map['subsampleDateList'] = dateList\n\n        map['subsampledateconstraints'] = this.state.subsampledateconstraints;\n        map['testgrouptest'] = selectedTestArray;\n        map['npreregno'] = sampleList.map(item => item.npreregno).join(\",\");\n        map['userinfo'] = userInfo;\n        map['checkBoxOperation'] = 3;\n        map['ntype'] = 3;\n        map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n        map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n        map[\"checkBoxOperation\"] = 3;\n        map[\"masterData\"] = this.props.Login.masterData;\n        map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        map[\"specBasedComponent\"] = this.props.Login.specBasedComponent;\n        const inputParam = {\n          inputData: map,\n          postParamList: this.postParamList\n        };\n        this.props.saveSubSample(inputParam);\n      } else {\n        this.onUpdateSubSampleRegistration(saveType, formRef, operation);\n      }\n    };\n\n    this.mandatoryList = (prereg, printer, file, childtest, regSubSample) => {\n      let mandatory = [];\n\n      if (file) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_IMPORTFILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }];\n      } else if (printer) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_PRINTER\",\n          \"dataField\": \"sprintername\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else if (regSubSample) {\n        let sampleList = [];\n        const skip = this.state.skip;\n        const take = this.state.take;\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n        }\n\n        let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n        const findComponentReqSpec = [...new Set(addSubSampleList.map(item => item.ncomponentrequired))];\n\n        if (findComponentReqSpec[0] === 3) {\n          mandatory = [{\n            \"idsName\": \"IDS_SPECIMEN\",\n            \"dataField\": \"ncomponentcode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"combo\"\n          }];\n        }\n\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  mandatory.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n\n                return mandatory;\n              }) : component.mandatory === true ? mandatory.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\";\n            });\n          });\n        });\n      } else if (childtest) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_TESTNAME\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      }\n\n      return mandatory;\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedFile = this.state.selectedFile || {};\n      selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file);\n      this.setState({\n        selectedFile,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onSaveChildTestClick = (saveType, formRef) => {\n      const masterData = this.props.Login.masterData;\n      const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n      const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\"); //  selectedSubsample =masterData.selectedSubSample.slice(this.state.skip, (this.state.skip + this.state.take));\n\n      const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\n      let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      const inputData = {\n        TestGroupTest: this.state.selectedRecord.ntestgrouptestcode.map(value => value.item),\n        RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\n        ntransactionsamplecode: ntransactionsamplecode,\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\n        nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\n        ntype: 3,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        npreregno: selectedSample && selectedSample.map(sample => sample.npreregno).join(\",\"),\n        // ntransactionsamplecode: selectedSubsample &&\n        // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n        FromDate: obj.fromDate,\n        ToDate: obj.toDate,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"registration\",\n        operation: this.props.Login.operation,\n        methodUrl: \"Test\",\n        responseKeyList: [{\n          \"responseKey\": \"selectedSample\",\n          \"masterDataKey\": \"RegistrationGetSample\",\n          \"primaryKey\": \"npreregno\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedSubSample\",\n          \"masterDataKey\": \"RegistrationGetSubSample\",\n          \"primaryKey\": \"ntransactionsamplecode\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedTest\",\n          \"masterDataKey\": \"RegistrationGetTest\",\n          \"primaryKey\": \"ntransactiontestcode\",\n          \"dataAction\": \"add\"\n        }],\n        saveType,\n        formRef,\n        postParamList: this.postParamList\n      };\n\n      if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.createRegistrationTest(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.getRegistrationComboService = (ScreenName, operation, primaryKeyField, masterData, userInfo, editId) => {\n      const ndesigntemplatemappingcodefilter = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode;\n\n      if (ndesigntemplatemappingcodefilter === this.props.Login.masterData.ndesigntemplatemappingcode) {\n        let data = [];\n        const withoutCombocomponent = [];\n        const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n        if (Layout !== undefined) {\n          Layout.map(row => {\n            return row.children.map(column => {\n              return column.children.map(component => {\n                return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    data.push(componentrow);\n                  } else {\n                    withoutCombocomponent.push(componentrow);\n                  }\n\n                  return null;\n                }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n              });\n            });\n          });\n          const comboComponents = data;\n          let childColumnList = {};\n          data.map(columnList => {\n            const val = comboChild(data, columnList, childColumnList, true);\n            data = val.data;\n            childColumnList = val.childColumnList;\n            return null;\n          });\n          const mapOfFilterRegData = {\n            nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n          };\n          this.props.getPreviewTemplate(masterData, userInfo, editId, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent, true, false, mapOfFilterRegData, false, \"create\", this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename);\n        } else {\n          toast.info(\"Configure the preregister template for this registrationtype\");\n        }\n      } else {\n        toast.info(\"select the approved design template\");\n      }\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n\n              return data;\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n\n                return null;\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            }\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take\n      });\n    };\n\n    this.handleSubSamplePageChange = e => {\n      this.setState({\n        subsampleskip: e.skip,\n        subsampletake: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterChange = (event, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSample: this.props.Login.masterData.selectedSample,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab\n        };\n        this.props.getSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.onSubSampleTabChange = tabProps => {\n      const activeSubSampleTab = tabProps.screenName;\n\n      if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSubSample: this.props.Login.masterData.selectedSubSample,\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSubSampleTab,\n          activeSubSampleTab,\n          subSampleCommentDataState: this.state.subSampleCommentDataState,\n          subSampleAttachmentDataState: this.state.subSampleAttachmentDataState\n        };\n        this.props.getSubSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.ontestTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n\n      if (activeTestTab !== this.props.Login.activeTestTab) {\n        if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedTest: this.props.Login.masterData.selectedTest,\n            ntransactiontestcode: this.props.Login.masterData.selectedTest ? String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n            npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestTab,\n            screenName: activeTestTab,\n            resultDataState: this.state.resultDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            testAttachmentDataState: this.state.testAttachmentDataState\n          };\n          this.props.getTestChildTabDetailRegistration(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.onDropComponentFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedFile = this.state.selectedFile || {};\n      selectedFile[fieldName] = onDropAttachFileList(selectedFile[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedFile,\n        actionType: \"new\"\n      });\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue) => {\n      const {\n        selectedFilter\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedFilter[dateName] = dateValue;\n      this.setState({\n        selectedFilter\n      });\n    };\n\n    this.onUpdateRegistrationConfirm = () => {\n      this.showAlert();\n      this.onUpdateRegistration(this.props.Login.regEditParam.saveType, this.props.Login.regEditParam.formRef, this.props.Login.regEditParam.operation, 2);\n    };\n\n    this.confirmAlert = () => {\n      if (this.state.showConfirmAlert) {\n        if (this.props.Login.regDateEditConfirmMessage) {\n          this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.Login.regDateEditConfirmMessage, this.props.intl.formatMessage({\n            id: \"IDS_OK\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_CANCEL\"\n          }), () => this.onUpdateRegistrationConfirm(), undefined, () => this.showAlert());\n        } else {\n          this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.Login.booleanFlag, \"ok\", \"Cancel\", () => this.insertRegistration(false), undefined, () => this.showAlert());\n        }\n      }\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.showAlert = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlert: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddFile = () => {\n      let selectedRecord = this.state.selectedRecord;\n      let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue;\n      let booleanmanuf = true;\n\n      if (RealRegTypeValue === RegistrationType.PLASMA_POOL) {\n        booleanmanuf = selectedRecord[\"nmanufcode\"] > 0 && selectedRecord[\"nmanufcode\"] !== undefined ? true : false;\n      }\n\n      if (booleanmanuf) {\n        if (this.state.selectedRecord.nallottedspeccode !== undefined) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadFile: true,\n              ChildscreenName: \"File\",\n              childoperation: \"Import\",\n              parentPopUpSize: \"lg\",\n              selectedFile: undefined\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSPECIFICATION\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTMANUFACTURER\"\n        }));\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (name !== \"nnoofcontainer\" && (value === 0 || value === 0.0)) {\n        selectComponent[name] = '';\n        this.setState({\n          selectComponent\n        });\n      } else {\n        selectComponent[name] = value;\n        this.setState({\n          selectComponent\n        });\n      }\n    };\n\n    this.onSampleTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nsampletypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getSampleTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.ConfirmComponent = props => {\n      this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to Override the Existing Components ?\", \"ok\", \"cancel\", () => this.getComponentfromJava(props));\n    };\n\n    this.onRegTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nregtypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getRegTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.acceptRegistration = (registerId, skip, take) => {\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      } // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\n\n\n      let acceptList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (acceptList && acceptList.length > 0) {\n        if (acceptList.every(this.checkPreregisterAndQuarentine)) {\n          if (this.props.Login.masterData.selectedTest.length > 0) {\n            if (checkTestPresent(this.props.Login.masterData.RegistrationGetTest, acceptList)) {\n              let Map = {};\n              Map[\"fromdate\"] = \"\";\n              Map[\"todate\"] = \"\";\n              Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n              Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n              Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n              Map[\"nfilterstatus\"] = -1;\n              Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\"); // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\n              //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\n\n              Map[\"registrationsample\"] = this.props.Login.masterData.RegistrationGetSubSample;\n              Map[\"registration\"] = this.props.Login.masterData.selectedSample;\n              Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n              Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n              Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");\n              ;\n              Map[\"userinfo\"] = this.props.Login.userInfo;\n              Map[\"nflag\"] = 2;\n              Map[\"ntype\"] = 3;\n              Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n              Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n              Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n              Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n              Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n              Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n              Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n              Map[\"checkBoxOperation\"] = 3;\n              Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n              let inputParam = {\n                inputData: Map,\n                postParamList: this.postParamList,\n                action: 'accept'\n              };\n              this.confirmMessage.confirm(this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_ACCEPTREGISTRATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_OK\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CANCEL\"\n              }), () => this.acceptRegistrationConfirm(inputParam, registerId));\n            } else {\n              let Map = {};\n              Map[\"fromdate\"] = \"\";\n              Map[\"todate\"] = \"\";\n              Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n              Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n              Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n              Map[\"nfilterstatus\"] = -1;\n              Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\"); // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\n              //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\n\n              Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n              Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n              Map[\"userinfo\"] = this.props.Login.userInfo;\n              Map[\"nflag\"] = 2;\n              Map[\"ntype\"] = 1;\n              Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n              Map[\"activeSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n              Map[\"activeSubSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n              Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n              Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n              Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n              Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n              Map[\"checkBoxOperation\"] = 3;\n              Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n              let inputParam = {\n                inputData: Map,\n                postParamList: this.postParamList,\n                action: 'accept'\n              };\n              this.confirmMessage.confirm(\"Confirmation\", \"Confirmation!\", \"Samples With atleast One Preregister Test Will Only Accept.Do You Want Accept?\", \"OK\", \"Cancel\", () => this.acceptRegistrationConfirm(inputParam, registerId));\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ADDTESTTOREGISTERSAMPLES\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPREREGQUARANTINESAMPLES\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPREREGQUARANTINESAMPLES\"\n        }));\n      }\n    };\n\n    this.acceptRegistrationConfirm = (inputParam, registerId) => {\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, registerId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            parentPopUpSize: 'lg',\n            screenName: this.props.Login.screenName,\n            operation: 'accept'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.acceptRegistration(inputParam, this.props.Login.masterData);\n      }\n    };\n\n    this.selectQuarantine = (quarantineId, skip, take) => {\n      let sampleList = this.props.Login.masterData.searchedSample || (this.props.Login.masterData.RegistrationGetSample ? [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take) : []);\n      let quarentineList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (quarentineList && quarentineList.length > 0) {\n        if (quarentineList.every(this.checkPreregisterRecordQuarantine)) {\n          // let ntransactionstatus = this.props.Login.masterData.selectedSample &&\n          //     this.props.Login.masterData.selectedSample.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\n          //if (ntransactionstatus === transactionStatus.PREREGISTER) {\n          let Map = {};\n          Map[\"fromdate\"] = \"\";\n          Map[\"todate\"] = \"\";\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = -1;\n          Map[\"npreregno\"] = quarentineList && quarentineList.map(sample => sample.npreregno).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"selectedSample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 1;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n          Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n          Map[\"ntransactionstatus\"] = quarentineList && quarentineList.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\"); //Map[\"ninsertpreregno\"] = quarantineSample.quarantineSample.npreregno;\n\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'quarantine'\n          }; //console.log(\"inputParam, quarantine:\", inputParam);\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, quarantineId)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'quarantine'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.preregRecordToQuarantine(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPREREGISTERSAMPLES\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPREREGISTERSAMPLES\"\n        }));\n      }\n    };\n\n    this.onRegSubTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = parseInt(event.value);\n        Map[\"nneedtemplatebasedflow\"] = event.item.nneedtemplatebasedflow;\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.onApprovalConfigVersionChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RegSubTypeValue.nregsubtypecode; //  Map[\"nneedtemplatebasedflow\"] = event.item.nneedtemplatebasedflow;\n\n        Map[\"napproveconfversioncode\"] = event.value;\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.onApprovalConfigVersionChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.onDesignTemplateChange = (event, fieldName, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      // if (comboData !== null) {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      }); // }\n    };\n\n    this.PrinterChange = (comboData, fieldName) => {\n      const selectedPrinterData = this.state.selectedPrinterData || {};\n      selectedPrinterData[fieldName] = comboData;\n      this.setState({\n        selectedPrinterData\n      });\n    };\n\n    this.closeChildModal = () => {\n      let loadRegSubSample = this.props.Login.loadRegSubSample;\n      let loadFile = this.props.Login.loadFile;\n      let showSaveContinue = this.props.Login.showSaveContinue;\n      let screenName = this.props.Login.screenName;\n      let loadChildTest = this.props.Login.loadChildTest;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.loadFile) {\n        loadFile = false;\n        screenName = this.props.Login.PopUpLabel;\n      } else if (this.props.Login.loadChildTest) {\n        loadChildTest = false;\n        openModal = false;\n        selectedRecord = {};\n      } else if (this.props.Login.loadRegSubSample) {\n        loadRegSubSample = false;\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadRegSubSample,\n          screenName,\n          showSaveContinue,\n          loadFile,\n          loadChildTest,\n          openModal,\n          parentPopUpSize: \"xl\",\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let loadPreregister = this.props.Login.loadPreregister;\n      let openChildModal = this.props.Login.openChildModal;\n      let parentPopUpSize = this.props.Login.pare;\n      let screenName = this.props.Login.screenName;\n      let loadPrinter = this.props.Login.loadPrinter;\n      let openPortal = this.props.Login.openPortal;\n      let Component = this.props.Login.Component;\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"accept\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"quarantine\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          loadPreregister = false;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign,\n              openModal,\n              openChildModal,\n              loadPreregister\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          loadEsign = false;\n          selectedRecord[\"esigncomments\"] = \"\";\n          selectedRecord[\"esignpassword\"] = \"\";\n\n          if (loadPreregister) {\n            parentPopUpSize = 'xl';\n            openPortal = true;\n            openModal = false;\n          }\n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign,\n              parentPopUpSize,\n              openPortal,\n              openModal,\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        openModal = false;\n        loadPrinter = false;\n        loadPreregister = false;\n        selectedRecord = {};\n        openPortal = false;\n        subSampleDataGridList = [];\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            loadPreregister,\n            selectedRecord,\n            screenName,\n            insertSourcePreregno: undefined,\n            loadPrinter,\n            openPortal,\n            Component,\n            subSampleDataGridList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (operation === \"update\") {\n        this.onUpdateRegistration(saveType, formRef, operation);\n      }\n    };\n\n    this.onSavePrinterClick = () => {\n      let insertlist = []; //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\n\n      const inputParam = {\n        classUrl: 'barcode',\n        methodUrl: 'Barcode',\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          npreregno: this.props.Login.insertPrinterPreregno,\n          sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\n          insertlist,\n          npreregno1: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: this.props.Login.ncontrolcode\n        },\n        operation: 'printer',\n        // dataState:this.state.sourceDataState,\n        // activeSampleTab:\"IDS_SOURCE\",\n        action: 'printer'\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: 'printer'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveFileClick = (saveType, formRef) => {\n      const selectedFile = this.state.selectedFile;\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedFile.sfilename;\n      const formData = new FormData(); // if(nattachmenttypecode === attachmentType.FTP) {\n\n      if (acceptedFiles && acceptedFiles.length > 0) {\n        acceptedFiles.forEach((file, index) => {\n          formData.append(\"uploadedFile\" + index, file);\n        });\n        formData.append(\"filecount\", acceptedFiles.length);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYONEFILETOSUBMIT\"\n        }));\n      }\n\n      formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n      formData.append(\"nstudyplan\", JSON.stringify(selectedRecord.nallottedspeccode.value));\n      formData.append(\"testrequired\", JSON.stringify(selectedRecord.ntransactionstatus === 3 ? true : false));\n      formData.append(\"ntemplatemanipulationcode\", JSON.stringify(selectedRecord.ntemplatemanipulationcode));\n      formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.RealRegTypeValue.nregtypecode));\n      formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode));\n      this.props.ImportFile(formData, this.confirmMessage, this.props.Login);\n    };\n\n    this.sampleInfoDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n      this.changePropertyView(1);\n    };\n\n    this.dataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_SOURCE\":\n          this.setState({\n            sourceDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sourceDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.subSampledataStateChange = event => {\n      switch (this.props.Login.activeSubSampleTab) {\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          this.setState({\n            subSampleCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          this.setState({\n            subSampleAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testdataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_TEST\":\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.sampleTabDetail = () => {\n      let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\n      let {\n        skip,\n        take\n      } = this.state;\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      tabMap.set(\"IDS_ATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.selectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        userInfo: this.props.Login.userInfo,\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSample || []\n        },\n        selectedListName: \"IDS_SAMPLE\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3184,\n          columnNumber: 39\n        }\n      }));\n      tabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSampleComment\",\n        editName: \"EditSampleComment\",\n        deleteName: \"DeleteSampleComment\",\n        methodUrl: \"SampleComment\",\n        isTestComment: false,\n        masterList: selectedSampleList,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nregcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLES\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3225,\n          columnNumber: 42\n        }\n      }));\n      return tabMap;\n    };\n\n    this.sampleComments = () => {\n      let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\n      let {\n        skip,\n        take\n      } = this.state;\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      return /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSampleComment\",\n        editName: \"EditSampleComment\",\n        deleteName: \"DeleteSampleComment\",\n        methodUrl: \"SampleComment\",\n        isTestComment: false,\n        masterList: selectedSampleList,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nregcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLES\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3281,\n          columnNumber: 16\n        }\n      });\n    };\n\n    this.subsampleTabDetail = () => {\n      const ntransactionsamplecode = this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\n      console.log(\"ntransactionsamplecode\", ntransactionsamplecode);\n      const tabMap = new Map();\n      let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\n      let {\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\n      tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.selectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        userInfo: this.props.Login.userInfo,\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSubSample || []\n        },\n        selectedListName: \"IDS_SUBSAMPLE\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3336,\n          columnNumber: 48\n        }\n      }));\n      tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        isTestComment: false,\n        masterList: selectedSubSampleList,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SUBSAMPLES\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3377,\n          columnNumber: 45\n        }\n      }));\n      return tabMap;\n    };\n\n    this.subsampleComments = () => {\n      const ntransactionsamplecode = this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\n      const tabMap = new Map();\n      let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\n      let {\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\n      return /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        isTestComment: false,\n        masterList: selectedSubSampleList,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SUBSAMPLES\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3432,\n          columnNumber: 16\n        }\n      });\n    };\n\n    this.testTabDetail = () => {\n      const testTabMap = new Map();\n      let testList = this.props.Login.masterData.RegistrationGetTest || [];\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"); // const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\n\n      let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      testTabMap.set(\"IDS_PARAMETERRESULTS\", /*#__PURE__*/React.createElement(RegistrationResultTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.testDataStateChange,\n        screenName: \"IDS_PARAMETERRESULTS\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3486,\n          columnNumber: 48\n        }\n      }));\n      testTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"selectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        dataState: this.state.testAttachmentDataState,\n        dataStateChange: this.testDataStateChange,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: this.props.Login.masterData.selectedTest\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3496,\n          columnNumber: 47\n        }\n      }));\n      testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedTest\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        isTestComment: false,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3538,\n          columnNumber: 44\n        }\n      }));\n      return testTabMap;\n    };\n\n    this.getCommentsCombo = event => {\n      if (this.props.Login.selectedTest && this.props.Login.selectedTest.length > 0) {\n        this.props.getCommentsCombo(...event);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOADDCOMMENTS\"\n        }));\n      }\n    };\n\n    this.testDataStateChange = event => {\n      switch (this.props.Login.activeTestTab) {\n        case \"IDS_PARAMETERRESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TEST\":\n          this.setState({\n            testDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let testList = [];\n\n        if (this.props.Login.masterData.searchedTest !== undefined) {\n          testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n        } else {\n          testList = this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, acceptList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      let acceptList = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedTest !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n      }\n\n      if (this.props.Login.operation === \"update\") {\n        acceptList.push(selectedRecord);\n      } else {\n        acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      }\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleAttachment(saveParam, acceptList);\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestAttachment(saveParam, this.props.Login.masterData.selectedTest);\n      } else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.selectedSubSample);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n      }\n    };\n\n    this.cancelSubSampleRecord = (controlcode, skip, take) => {\n      let testList = this.props.Login.masterData.searchedSubSample || (this.props.Login.masterData.RegistrationGetSubSample ? [...this.props.Login.masterData.RegistrationGetSubSample].splice(skip, skip + take) : []);\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\n\n      if (acceptList && acceptList.length > 0) {\n        // console.log(\"Success:\", dataitem);\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\n          let Map = {};\n          Map['npreregno'] = acceptList.map(x => x.npreregno).join(\",\");\n          Map['ntransactiontestcode'] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\"); // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\n          // Map[\"ntransactionsamplecode\"] = acceptList.map(x => x.ntransactionsamplecode).join(\",\");\n          //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3; // Map[\"withoutgetparameter\"] = 3;\n\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n          Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = acceptList && acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"selectedTest\"] = this.props.Login.masterData.RegistrationGetTest;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelSample'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelSubSampleAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = [];\n          this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => {\n            if (sample.nregsubtypecode === this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode) {\n              value.push(this.props.intl.formatMessage({\n                id: sample.stransdisplaystatus\n              }));\n            }\n          });\n          value = value.map(sample => sample).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTTEST\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.cancelRecord = (controlcode, skip, take) => {\n      let testList = this.props.Login.masterData.searchedTest || (this.props.Login.masterData.RegistrationGetTest ? [...this.props.Login.masterData.RegistrationGetTest].splice(skip, skip + take) : []);\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\n\n      if (acceptList && acceptList.length > 0) {\n        // console.log(\"Success:\", dataitem);\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\n          let Map = {};\n          Map['ninsertpreregno'] = acceptList.map(x => x.npreregno).join(\",\"); // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\n\n          Map[\"ntransactiontestcode\"] = acceptList.map(x => x.ntransactiontestcode).join(\",\"); //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3;\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n          Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = acceptList && acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelTest'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelTestAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = [];\n          this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => {\n            if (sample.nregsubtypecode === this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode) {\n              value.push(this.props.intl.formatMessage({\n                id: sample.stransdisplaystatus\n              }));\n            }\n          });\n          value = value.map(item => item).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTTEST\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.addSubSample = (controlcode, skip, take) => {\n      let Map = {};\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      }\n\n      let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (addSubSampleList && addSubSampleList.length > 0) {\n        const findTransactionStatus = [...new Set(addSubSampleList.map(item => item.ntransactionstatus))];\n\n        if (findTransactionStatus.length === 1) {\n          if (findTransactionStatus[0] === transactionStatus.PREREGISTER) {\n            //   const findApprovalVersion = [...new Set(addSubSampleList.map(item => item.napprovalversioncode))];\n            //   if (findApprovalVersion.length === 1) {\n            const findSampleSpec = [...new Set(addSubSampleList.map(item => item.nallottedspeccode))];\n            const findComponentReqSpec = [...new Set(addSubSampleList.map(item => item.ncomponentrequired))];\n            const findSampleSpectemplate = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))]; //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\n\n            if (findSampleSpec.length === 1) //&& findComponent.length === 1 \n              {\n                let data = [];\n                const regSubSamplewithoutCombocomponent = [];\n                const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n                if (Layout !== undefined) {\n                  Layout.map(row => {\n                    return row.children.map(column => {\n                      return column.children.map(component => {\n                        return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                          if (componentrow.inputtype === \"combo\") {\n                            data.push(componentrow);\n                          } else {\n                            regSubSamplewithoutCombocomponent.push(componentrow);\n                          }\n\n                          return null;\n                        }) : component.inputtype === \"combo\" ? data.push(component) : regSubSamplewithoutCombocomponent.push(component);\n                      });\n                    });\n                  });\n                  const regSubSamplecomboComponents = data;\n                  let regchildColumnList = {};\n                  data.map(columnList => {\n                    const val = comboChild(data, columnList, regchildColumnList, true);\n                    data = val.data;\n                    regchildColumnList = val.childColumnList;\n                    return null;\n                  }); //const Map={}\n                  // const findSamplentemplatemanipulationcode = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\n                  // Map[\"ntemplatemanipulationcode\"] = findSamplentemplatemanipulationcode[0];\n\n                  Map[\"nallottedspeccode\"] = findSampleSpec[0];\n                  Map[\"ntemplatemanipulationcode\"] = findSampleSpectemplate[0];\n                  Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n                  Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n                  Map[\"npreregno\"] = addSubSampleList && addSubSampleList.map(sample => sample.npreregno).join(\",\");\n                  Map[\"registrationsample\"] = addSubSampleList;\n                  this.props.addsubSampleRegistration(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectedRecord, regchildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, Map, controlcode, findComponentReqSpec[0] === 3 ? true : false);\n                } else {\n                  toast.warn(this.props.intl.formatMessage({\n                    id: \"IDS_PLEASECONFIGURETHESUBSAMPLETEMPLATE\"\n                  }));\n                }\n              } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n              }));\n            } // } else {\n            //    toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\n            // }\n\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTPREREGISTERSAMPLETOADDSUBSAMPLE\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOSUBSAMPLE\"\n        }));\n      }\n    };\n\n    this.handleEditDateChange = (dateName, dateValue) => {\n      const selectComponent = this.state.selectedRecord;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectedRecord: selectComponent\n      });\n    };\n\n    this.onNumericInputEditChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (name !== \"nnoofcontainer\" && (value === 0 || value === 0.0)) {\n        selectedRecord[name] = '';\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectedRecord[name] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.cancelSampleRecords = (controlcode, skip, take) => {\n      let Map = {};\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      } // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\n      // sampleList = sampleList.splice(skip, skip + take);\n\n\n      let cancelRejectSamplesList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (cancelRejectSamplesList && cancelRejectSamplesList.length > 0) {\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, cancelRejectSamplesList)) {\n          //Map['ninsertpreregno']=dataitem.cancelSample.npreregno;\n          Map['ntransactionstatus'] = cancelRejectSamplesList && cancelRejectSamplesList.map(transactionstatus => transactionstatus.ntransactionstatus).join(\",\"); //Map[\"ntransactiontestcode\"]=dataitem.ntransactiontestcode;\n          //Map[\"ninserttransactionsamplecode\"]=dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n          Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = -1;\n          Map[\"npreregno\"] = cancelRejectSamplesList && cancelRejectSamplesList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\");\n          Map[\"registrationsample\"] = cancelRejectSamplesList;\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"transactionValidation\"] = this.props.Login.transactionValidation;\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n          Map[\"selectedSample\"] = sortData(this.props.Login.masterData.selectedSample, \"ascending\", \"npreregno\");\n          Map[\"RegistrationGetSubSample\"] = sortData(this.props.Login.masterData.RegistrationGetSubSample, \"ascending\", \"ntransactionsamplecode\");\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelSample'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelSampleAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = [];\n          this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => {\n            if (sample.nregsubtypecode === this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode) {\n              value.push(this.props.intl.formatMessage({\n                id: sample.stransdisplaystatus\n              }));\n            }\n          });\n          value = value.map(sample => sample).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Sample\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTSAMPLE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.transValidation = (transactionValidation, ncontrolcode, selectedSample) => {\n      //  const transList=transactionValidation?Object.keys(transactionValidation):[];\n      //  const index=transList.findIndex(x=>x.ncontrolcode===ncontrolcode);\n      //let check=true;\n      //  let validate=false;\n      let ntransstatus = [];\n      let translist = transactionValidation[ncontrolcode];\n\n      if (translist) {\n        transactionValidation[ncontrolcode] && transactionValidation[ncontrolcode].map(sam => {\n          return ntransstatus.push(sam.ntransactionstatus);\n        });\n        const selectdata = selectedSample ? selectedSample : [];\n        let check = selectdata.map(sam1 => {\n          return ntransstatus.includes(sam1.ntransactionstatus);\n        });\n\n        if (check.includes(false)) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignforRegistration(inputParam, \"openModal\");\n    };\n\n    this.editRegistration = inputParam => {\n      let data = [];\n      const withoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n      if (Layout !== undefined) {\n        Layout.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data.push(componentrow);\n                } else {\n                  withoutCombocomponent.push(componentrow);\n                }\n\n                return null;\n              }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n            });\n          });\n        });\n        const comboComponents = data;\n        let childColumnList = {};\n        data.map(columnList => {\n          const val = comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n          return null;\n        });\n        this.props.getEditRegistrationComboService(inputParam, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent);\n      } else {\n        toast.info(\"Configure the preregister template for this registrationtype\");\n      }\n    };\n\n    this.editSubSampleRegistration = inputParam => {\n      let data = [];\n      const regSubSamplewithoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n      if (Layout !== undefined) {\n        Layout.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data.push(componentrow);\n                } else {\n                  regSubSamplewithoutCombocomponent.push(componentrow);\n                }\n\n                return null;\n              }) : component.inputtype === \"combo\" ? data.push(component) : regSubSamplewithoutCombocomponent.push(component);\n            });\n          });\n        });\n        const regSubSamplecomboComponents = data;\n        let regSubSamplechildColumnList = {};\n        data.map(columnList => {\n          const val = comboChild(data, columnList, regSubSamplechildColumnList, true);\n          data = val.data;\n          regSubSamplechildColumnList = val.childColumnList;\n          return null;\n        });\n        const sampleList = getSameRecordFromTwoArrays(inputParam.masterData.selectedSample, [inputParam.mastertoedit], \"npreregno\");\n        this.props.getEditSubSampleComboService(inputParam, data, this.state.selectedRecord, regSubSamplechildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, sampleList[0].ncomponentrequired === 3 ? true : false);\n      } else {\n        toast.info(\"Configure the sub sample template for this registrationtype\");\n      }\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.PrevoiusLoginData = undefined;\n    this.breadCrumbData = []; //  this.sampleeditable=this.props.Login.masterData.DynamicDesign&& JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\n\n    this.state = {\n      layout: 1,\n      openModal: false,\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      screenName: \"Product\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      showSaveContinue: false,\n      filterCollection: [],\n      selectedFilter: {},\n      breadCrumb: [],\n      showTest: true,\n      showSample: false,\n      showSubSample: false,\n      sampleSearchFied: [],\n      subsampleSearchFied: [],\n      testSearchFied: [],\n      showConfirmAlert: false,\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      DynamicSampleColumns: [],\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'npreregno' }] \n\n      },\n      testCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      subSampleCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      subSampleAttachmentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      testAttachmentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      sampleCommentsDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }]\n\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }, { field: 'stestsynonym' }] \n\n      },\n      selectedPrinterData: {},\n      grandparentheight: '150vh',\n      transactionValidation: [],\n      skip: 0,\n      take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\n      testskip: 0,\n      splitChangeWidthPercentage: 28.6,\n      testtake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      subsampleskip: 0,\n      subsampletake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      comboComponents: [],\n      withoutCombocomponent: [],\n      childColumnList: [],\n      columnList: [],\n      regSubSamplecomboComponents: [],\n      regSubSamplewithoutCombocomponent: [],\n      regparentSubSampleColumnList: [],\n      regchildSubSampleColumnList: [],\n      DynamicSubSampleColumns: [],\n      DynamicTestColumns: [],\n      DynamicGridItem: [],\n      DynamicGridMoreField: [],\n      SingleItem: [],\n      testMoreField: [],\n      testListColumns: [],\n      SubSampleDynamicGridItem: [],\n      SubSampleDynamicGridMoreField: [],\n      SubSampleSingleItem: [],\n      sampleCombinationUnique: [],\n      subsampleCombinationUnique: [],\n      cancelId: -1,\n      preRegisterId: -1,\n      registerId: -1,\n      editSampleId: -1,\n      quarantineId: -1,\n      addTestId: -1,\n      printBarcodeId: -1,\n      cancelSampleId: -1,\n      addSubSampleId: -1,\n      editSubSampleId: -1,\n      cancelSubSampleId: -1,\n      stateSampleType: [],\n      stateRegistrationType: [],\n      stateRegistrationSubType: [],\n      stateFilterStatus: [],\n      stateDynamicDesign: [],\n      testGetParam: {},\n      testChildGetParam: {},\n      subSampleGetParam: {},\n      filterSampleParam: {},\n      filterTestParam: {},\n      editRegParam: {},\n      editSubSampleRegParam: {},\n      addTestParam: {},\n      sampleSearchField: [],\n      subsampleSearchField: [],\n      testSearchField: [],\n      filterSubSampleParam: {},\n      initialVerticalWidth: \"57vh\",\n      enablePin: false,\n      fixefScrollHeight: window.outerHeight - 300,\n      enablePropertyPopup: false,\n      enableAutoClick: false,\n      //mention the property width in percentage based on window size\n      propertyPopupWidth: \"60\",\n      showQRCode: false // specBasedComponent: this.props.Login.settings\n      //     && this.props.Login.settings[18] ? this.props.Login.settings[18] === \"true\" ? true : false : false,\n\n    }; // this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n\n    this.myRef = React.createRef();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\n      return {\n        showConfirmAlert: props.Login.showConfirmAlert\n      };\n    }\n\n    return null;\n  }\n\n  getActiveTestURL() {\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (this.props.Login.activeTestKey) {\n      case \"IDS_PARAMETERRESULTS\":\n        //url = \"resultentrybysample/getTestbasedParameter\";\n        url = \"registration/getregistrationparameter\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      default:\n        url = \"registration/getregistrationparameter\"; // url = \"resultentrybysample/getTestbasedParameter\";\n\n        break;\n    }\n\n    return url;\n  }\n\n  render() {\n    this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : this.props.Login.masterData.FromDate;\n    this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : this.props.Login.masterData.ToDate;\n    let sampleList = this.props.Login.masterData.RegistrationGetSample ? sortData(this.props.Login.masterData.RegistrationGetSample, 'desc', 'npreregno') : [];\n    let subSampleList = this.props.Login.masterData.RegistrationGetSubSample ? this.props.Login.masterData.RegistrationGetSubSample : [];\n    let testList = this.props.Login.masterData.RegistrationGetTest ? this.props.Login.masterData.RegistrationGetTest : []; //\n\n    const testDesign = /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 929,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 931,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 932,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 933,\n        columnNumber: 25\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    })))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0 sm-pager\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 943,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      cardHead: 94 // paneHeight={this.state.initialVerticalWidth}\n      ,\n      masterList: this.props.Login.masterData.searchedTest || testList,\n      selectedMaster: this.props.Login.masterData.selectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: (event, status) => {\n        this.props.getTestChildTabDetailRegistration(event, status);\n        this.changePropertyView(1, event, \"click\");\n      },\n      inputParam: { ...this.state.testChildGetParam,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState,\n        activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined\n      },\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"selectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\" // jsonField={'jsondata'}\n      ,\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      subFieldsLabel: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      showStatusName: true,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: this.state.filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\" // childTabsKey={[\"RegistrationTestComment\"]}\n      ,\n      childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\", \"ApprovalParameter\"],\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"RegistrationGetSample\",\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\" // selectionList=\n      // actionIcons={\n      //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\n      //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\n      //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\n      // }\n      ,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1000,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addtest\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        //data-for=\"tooltip-common-wrap\"\n        ,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1,\n        onClick: () => this.props.addMoreTest({ ...this.state.addTestParam,\n          skip: this.state.skip,\n          take: this.state.skip + this.state.take\n        }, this.state.addTestId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1002,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1012,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        // data-for=\"tooltip-common-wrap\"\n        ,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1,\n        onClick: () => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1015,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1022,\n          columnNumber: 41\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 944,\n        columnNumber: 21\n      }\n    }))));\n    let mainDesign = \"\";\n\n    if (this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample) {\n      mainDesign = /*#__PURE__*/React.createElement(SplitterLayout, {\n        borderColor: \"#999\",\n        primaryIndex: 1,\n        percentage: true,\n        secondaryInitialSize: this.state.splitChangeWidthPercentage // onSecondaryPaneSizeChange={this.paneSizeChange}\n        ,\n        primaryMinSize: 40,\n        secondaryMinSize: 30,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1039,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1047,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        style: {\n          borderBottom: \"0px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1048,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          display: \"inline-block\",\n          marginTop: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1049,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"card-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1050,\n          columnNumber: 29\n        }\n      }, this.props.intl.formatMessage({\n        id: \"IDS_SUBSAMPLE\"\n      })))), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"p-0 sm-pager\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1053,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n        cardHead: 94 // paneHeight={this.state.initialVerticalWidth}\n        // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\n        ,\n        masterList: this.props.Login.masterData.searchedSubSample || subSampleList,\n        selectedMaster: this.props.Login.masterData.selectedSubSample,\n        primaryKeyField: \"ntransactionsamplecode\",\n        getMasterDetail: (event, status) => {\n          this.props.getRegistrationTestDetail(event, status);\n          this.changePropertyView(6, event, status);\n        },\n        inputParam: { ...this.state.testGetParam,\n          searchTestRef: this.searchTestRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          testskip: this.state.testskip,\n          subsampleskip: this.state.subsampleskip,\n          resultDataState: this.state.resultDataState,\n          activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined\n        },\n        filterColumnData: this.props.filterTransactionList,\n        searchListName: \"searchedSubSample\",\n        searchRef: this.searchSubSampleRef,\n        filterParam: { ...this.state.filterSubSampleParam,\n          childRefs: [{\n            ref: this.searchTestRef,\n            childFilteredListName: \"searchedTest\"\n          }]\n        },\n        additionalParam: ['napprovalversioncode'],\n        showStatusLink: true,\n        showStatusName: true,\n        statusFieldName: \"stransdisplaystatus\",\n        statusField: \"ntransactionstatus\",\n        mainField: \"ssamplearno\",\n        selectedListName: \"selectedSubSample\",\n        objectName: \"subsample\",\n        listName: \"IDS_SUBSAMPLE\" // jsonField={'jsondata'}\n        //jsonDesignFields={true}\n        ,\n        needValidation: true,\n        validationKey: \"napprovalversioncode\",\n        validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n        subFields: this.state.DynamicSubSampleColumns,\n        skip: this.state.subsampleskip,\n        take: this.state.subsampletake,\n        selectionField: \"ntransactionstatus\",\n        selectionFieldName: \"stransdisplaystatus\",\n        needMultiSelect: true,\n        selectionColorField: \"scolorhexcode\",\n        subFieldsLabel: false,\n        handlePageChange: this.handleSubSamplePageChange,\n        selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n        childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetTest\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"],\n        actionIcons: [{\n          title: this.props.intl.formatMessage({\n            id: \"IDS_EDIT\"\n          }),\n          controlname: \"faPencilAlt\",\n          objectName: \"mastertoedit\",\n          hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\n          onClick: this.editSubSampleRegistration,\n          inputData: {\n            primaryKeyName: \"ntransactionsamplecode\",\n            operation: \"update\",\n            masterData: this.props.Login.masterData,\n            userInfo: this.props.Login.userInfo,\n            editSubSampleRegParam: { ...this.state.editSubSampleRegParam,\n              ncontrolCode: this.state.editSubSampleId\n            }\n          }\n        }],\n        needFilter: false,\n        commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n          className: \"d-flex justify-content-end icon-group-wrap\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1129,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"adddeputy\",\n          className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n          //  data-for=\"tooltip-common-wrap\"\n          ,\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_ADDSUBSAMPLE\"\n          }),\n          hidden: this.state.userRoleControlRights.indexOf(this.state.addSubSampleId) === -1,\n          onClick: () => this.addSubSample(this.state.addSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1131,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faPlus,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1138,\n            columnNumber: 45\n          }\n        })), /*#__PURE__*/React.createElement(Nav.Link, {\n          className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n          //data-for=\"tooltip-common-wrap\"\n          ,\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_CANCEL\"\n          }),\n          hidden: this.state.userRoleControlRights.indexOf(this.state.cancelSubSampleId) === -1,\n          onClick: () => this.cancelSubSampleRecord(this.state.cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1140,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Reject, {\n          className: \"custom_icons\",\n          width: \"15\",\n          height: \"15\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1147,\n            columnNumber: 45\n          }\n        })))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1054,\n          columnNumber: 25\n        }\n      }))), testDesign);\n    } else {\n      mainDesign = testDesign;\n    }\n\n    this.confirmMessage = new ConfirmMessage();\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"registration/getRegistrationSubSample\",\n      fecthInputObject: { ...this.state.subSampleGetParam,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        searchSubSampleRef: this.searchSubSampleRef,\n        searchTestRef: this.searchTestRef,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState,\n        sampleGridDataState: this.state.sampleGridDataState\n      },\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      selectedObject: \"selectedSample\",\n      inputListName: \"AP_SAMPLE\",\n      updatedListname: \"selectedSample\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedSubSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSubSampleRef,\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"registration/getRegistrationTestSample\",\n      fecthInputObject: { ...this.state.testGetParam,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        searchSubSampleRef: this.searchSubSampleRef,\n        searchTestRef: this.searchTestRef,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState,\n        sampleGridDataState: this.state.sampleGridDataState\n      },\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      selectedObject: \"selectedSubSample\",\n      inputListName: \"AP_SUBSAMPLE\",\n      updatedListname: \"selectedSubSample\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedTest\",\n      updatedListname: \"selectedTest\",\n      clearFilter: \"no\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: \"approval/getApprovalTest\",\n      fecthInputObject: { ...this.state.testGetParam,\n        searchTestRef: this.searchTestRef,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        resultDataState: this.state.resultDataState\n      },\n      selectedObject: \"selectedTest\",\n      inputListName: \"RegistrationGetTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }]; // let editRegParam = {\n    //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     userinfo: this.props.Login.userInfo,\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     ncontrolCode: this.state.editSampleId,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\n    //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    //     nneedsubsample: this.props.Login.masterData\n    //         && this.props.Login.masterData.nneedsubsample\n    // }\n    // let editSubSampleRegParam = {\n    //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     userinfo: this.props.Login.userInfo,\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     ncontrolCode: this.state.editSampleId,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\n    //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    //     nneedsubsample: this.props.Login.masterData\n    //         && this.props.Login.masterData.nneedsubsample\n    // }\n    // const addTestParam = {\n    //     selectedsample: this.props.Login.masterData.selectedSample,\n    //     selectedsubsample: this.props.Login.masterData.selectedSubSample,\n    //     skip: this.state.skip, take: (this.state.skip + this.state.take),\n    //     userinfo: this.props.Login.userInfo,\n    //     sampleList: this.props.Login.masterData.RegistrationGetSample,\n    //     snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\n    //         [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\n    // };\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1282,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1283,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      className: \"toolbar-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1284,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1285,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: `vertical-tab-top ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1286,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1288,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage //onSecondaryPaneSizeChange={this.paneSizeChange}\n      ,\n      primaryMinSize: 30,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1289,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolbar-top-inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1296,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      listMasterShowIcon: 1 // paneHeight={this.state.firstPane}\n      ,\n      clickIconGroup: true,\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedSample || sampleList,\n      selectedMaster: this.props.Login.masterData.selectedSample,\n      primaryKeyField: \"npreregno\",\n      filterColumnData: this.props.filterTransactionList // getMasterDetail={(event, status) => { this.props.getRegistrationsubSampleDetail(event, status); this.changePropertyView(4, event, status) }}\n      ,\n      getMasterDetail: this.props.getRegistrationsubSampleDetail,\n      inputParam: { ...this.state.subSampleGetParam,\n        searchTestRef: this.searchTestRef,\n        searchSubSampleRef: this.searchSubSampleRef,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        resultDataState: this.state.resultDataState\n      },\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\",\n      mainField: \"sarno\",\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      selectedListName: \"selectedSample\",\n      searchListName: \"searchedSample\",\n      searchRef: this.searchSampleRef,\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\",\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      subFields: this.state.DynamicSampleColumns // jsonField={'jsondata'}\n      //jsonDesignFields={true}\n      ,\n      needMultiSelect: true,\n      showStatusBlink: true,\n      filterParam: { ...this.state.filterSampleParam,\n        childRefs: [{\n          ref: this.searchSubSampleRef,\n          childFilteredListName: \"searchedSubSample\"\n        }, {\n          ref: this.searchTestRef,\n          childFilteredListName: \"searchedTest\"\n        }]\n      },\n      subFieldsLabel: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take // splitModeClass={this.state.splitChangeWidthPercentage\n      //     && this.state.splitChangeWidthPercentage > 50 ? 'split-mode'\n      //     : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\n      ,\n      childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationSampleComment\", \"selectedSubSample\", \"selectedTest\", \"RegistrationComment\"] //, \"RegistrationParameter\"\"RegistrationTestComment\"\n      ,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.editSampleId) === -1,\n        onClick: this.editRegistration,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam: { ...this.state.editRegParam,\n            ncontrolCode: this.state.editSampleId\n          }\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_PRINTBARCODE\"\n        }),\n        controlname: \"faPrint\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\n        //onClick: this.props.getPrinterComboService,\n        onClick: this.printBarcode,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"print\",\n          ncontrolcode: this.state.printBarcodeId,\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam: { ...this.state.editRegParam,\n            ncontrolCode: this.state.printBarcodeId\n          }\n        }\n      }],\n      needFilter: true,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1398,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue ml-2\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_PREREGISTER\"\n        }) //  data-for=\"tooltip-common-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(this.state.preRegisterId) === -1,\n        onClick: () => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\", this.props.Login.masterData, this.props.Login.userInfo, this.state.preRegisterId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1400,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1406,\n          columnNumber: 61\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REGISTER\"\n        }) // data-for=\"tooltip-common-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(this.state.registerId) === -1,\n        onClick: () => this.acceptRegistration(this.state.registerId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1408,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Register, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1414,\n          columnNumber: 61\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_QUARANTINE\"\n        }) //  data-for=\"tooltip-common-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(this.state.quarantineId) === -1,\n        onClick: () => this.selectQuarantine(this.state.quarantineId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1416,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Quarantine, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1422,\n          columnNumber: 61\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTSAMPLE\"\n        }) // data-for=\"tooltip-common-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelSampleId) === -1,\n        onClick: () => this.cancelSampleRecords(this.state.cancelSampleId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1424,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"20\",\n        height: \"20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1430,\n          columnNumber: 61\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }) //   data-for=\"tooltip-common-wrap\"\n        ,\n        onClick: () => this.onReload(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1432,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1437,\n          columnNumber: 61\n        }\n      }))),\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(RegistrationFilter, {\n          SampleType: this.state.stateSampleType || [],\n          RegistrationType: this.state.stateRegistrationType || [],\n          RegistrationSubType: this.state.stateRegistrationSubType || [],\n          userInfo: this.props.Login.userInfo || {},\n          SampleTypeValue: this.props.Login.masterData.SampleTypeValue || {},\n          RegTypeValue: this.props.Login.masterData.RegTypeValue || {},\n          RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue || {},\n          FilterStatusValue: this.props.Login.masterData.FilterStatusValue || {},\n          ApprovalConfigVersionValue: this.props.Login.masterData.ApprovalConfigVersionValue || {},\n          ApprovalConfigVersion: this.state.stateApprovalConfigVersion || {},\n          DesignTemplateMapping: this.props.Login.masterData.DesignTemplateMapping,\n          DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue || {},\n          FilterStatus: this.state.stateFilterStatus || [],\n          FromDate: this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date(),\n          ToDate: this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date(),\n          onSampleTypeChange: this.onSampleTypeChange,\n          onRegTypeChange: this.onRegTypeChange,\n          onRegSubTypeChange: this.onRegSubTypeChange,\n          onDesignTemplateChange: this.onDesignTemplateChange,\n          onApprovalConfigVersionChange: this.onApprovalConfigVersionChange,\n          DynamicDesignMapping: this.state.stateDynamicDesign || [],\n          handleFilterDateChange: this.handleFilterDateChange,\n          onFilterChange: this.onFilterChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1443,\n            columnNumber: 74\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1297,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1474,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true || this.state.showSubSample === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1475,\n        columnNumber: 45\n      }\n    }, mainDesign)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1539,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      style: {\n        width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1540,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: ` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyViewClose(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1541,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faChevronRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1541,\n        columnNumber: 178\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1542,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1543,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 4 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid sm-view-v-t  ${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1548,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1549,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_RESULT\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 1 ? this.sideNavDetail(\"IDS_PARAMETERRESULTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-attachment  ${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1554,\n        columnNumber: 41\n      }\n    }, this.state.activeTabIndex && this.state.activeTabIndex == 2 ? this.sideNavDetail(\"IDS_ATTACHMENTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid-tab  ${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1557,\n        columnNumber: 41\n      }\n    }, this.state.activeTabIndex && this.state.activeTabIndex == 3 ? this.sideNavDetail(\"IDS_COMMENTS\") : \"\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tab-head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1562,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1563,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1564,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1565,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1566,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1570,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1571,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1572,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_ATTACHMENTS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1576,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1577,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1578,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_COMMENTS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1582,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileInvoice //   data-for=\"tooltip-common-wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RESULT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1583,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1586,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_RESULT\"\n    })))), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tab-click-toggle-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1592,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      label: \"Auto Show\",\n      type: \"switch\",\n      name: \"Auto Click\",\n      onChange: event => this.onInputSwitchOnChange(event),\n      defaultValue: this.state.enableAutoClick,\n      isMandatory: false,\n      required: true,\n      checked: this.state.enableAutoClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1593,\n        columnNumber: 45\n      }\n    })))))))), this.props.Login.openPortal ? /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1624,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PreRegisterSlideOutModal, {\n      postParamList: this.postParamList,\n      PrevoiusLoginData: this.PrevoiusLoginData,\n      closeModal: this.closeModal,\n      operation: \"create\",\n      screenName: \"IDS_REGISTRATION\",\n      onSaveClick: this.onSaveClick,\n      validateEsign: this.validateEsign,\n      updateStore: this.props.updateStore,\n      comboComponents: this.state.comboComponents,\n      withoutCombocomponent: this.state.withoutCombocomponent,\n      userRoleControlRights: this.state.userRoleControlRights,\n      fromDate: this.fromDate,\n      toDate: this.toDate,\n      samplecombinationunique: this.state.sampleCombinationUnique,\n      subsamplecombinationunique: this.state.subsampleCombinationUnique //  specBasedComponent={this.state.specBasedComponent}\n      ,\n      mandatoryFields: [{\n        \"idsName\": \"IDS_PRODUCTCATEGORY\",\n        \"dataField\": \"nproductcatcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCTNAME\",\n        \"dataField\": \"sproductname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1625,\n        columnNumber: 29\n      }\n    })) : \"\", (this.props.Login.openModal || this.state.showQRCode) && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal || this.state.showQRCode //|| this.props.Login.loadEsign}\n      ,\n      closeModal: this.state.showQRCode ? () => this.setState({\n        showQRCode: false,\n        openModal: false\n      }) : this.props.Login.loadRegSubSample || this.props.Login.loadFile || this.props.Login.loadChildTest ? this.closeChildModal : this.closeModal,\n      size: this.props.Login.parentPopUpSize,\n      loginoperation: this.props.Login.loadPrinter ? true : false,\n      buttonLabel: this.state.showQRCode || this.props.Login.loadPrinter ? \"print\" : undefined,\n      operation: this.state.showQRCode ? \"Preview\" : this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.childoperation : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.state.showQRCode ? \"QR Code\" : this.props.Login.loadTest || this.props.Login.loadFile ? this.props.Login.ChildscreenName : this.props.Login.screenName,\n      esign: this.props.Login.loadEsign,\n      innerPopup: this.props.Login.loadComponent,\n      onSaveClick: this.state.showQRCode ? () => this.setState({\n        showQRCode: false,\n        openModal: false\n      }) : this.props.Login.loadRegSubSample ? this.onSaveSubSampleClick : this.props.Login.loadFile ? this.onSaveFileClick : this.props.Login.loadPrinter ? this.onSavePrinterClick : this.props.Login.loadChildTest ? this.onSaveChildTestClick : this.onSaveClick,\n      validateEsign: this.validateEsign,\n      showSaveContinue: this.props.Login.showSaveContinue,\n      selectedRecord: !this.props.Login.loadEsign ? this.props.Login.loadComponent ? this.state.selectComponent : this.props.Login.loadPrinter ? this.state.selectedPrinterData : this.props.Login.loadTest ? this.state.selectedTestData : this.props.Login.loadFile ? this.state.selectedFile : this.props.Login.loadPoolSource ? this.state.selectedSourceData : this.state.selectedRecord : this.state.selectedRecord,\n      mandatoryFields: this.mandatoryList(this.props.Login.loadPreregister, this.props.Login.loadPrinter, this.props.Login.loadFile, this.props.Login.loadChildTest, this.props.Login.loadRegSubSample),\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1678,\n          columnNumber: 29\n        }\n      }) : this.state.showQRCode ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1684,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1685,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(QRCode, {\n        value: this.state.selectedRecord.barcodevalue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1686,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1689,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1690,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1691,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1692,\n          columnNumber: 49\n        }\n      }, this.props.intl.formatMessage({\n        id: \"IDS_ARNO\"\n      }), \":\"), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1693,\n          columnNumber: 49\n        }\n      }, this.state.selectedRecord.barcodeData.sarno || '-')), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1695,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1696,\n          columnNumber: 49\n        }\n      }, this.props.intl.formatMessage({\n        id: \"IDS_SAMPLETYPE\"\n      }), \":\"), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1697,\n          columnNumber: 49\n        }\n      }, this.state.selectedRecord.barcodeData.Product || '-'))))) : this.props.Login.loadRegSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n        editfield: this.props.Login.masterData.DynamicDesign && JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value),\n        Component: this.props.Login.lstComponent || [],\n        selectComponent: this.state.selectedRecord,\n        templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        handleDateChange: this.handleDateSubSampleChange,\n        onInputOnChange: this.onInputOnSubSampleChange,\n        onNumericInputChange: this.onNumericInputSubSampleChange,\n        onNumericBlur: this.onNumericBlurSubSample,\n        comboData: this.props.Login.regSubSamplecomboData,\n        onComboChange: this.onComboSubSampleChange,\n        onComponentChange: this.onComponentChange,\n        TestCombined: this.props.Login.TestCombined || [],\n        TestChange: this.onComboChange,\n        selectedTestData: this.state.selectedRecord,\n        childoperation: this.props.Login.operation,\n        specBasedComponent: this.props.Login.specBasedComponent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1711,\n          columnNumber: 37\n        }\n      }) : this.props.Login.loadFile ? /*#__PURE__*/React.createElement(AddFile, {\n        selectedFile: this.state.selectedFile || {},\n        onInputOnChange: this.onInputOnChange,\n        onDrop: this.onDropComponentFile,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        maxSize: 20,\n        maxFiles: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1734,\n          columnNumber: 67\n        }\n      }) : this.props.Login.loadPrinter ? /*#__PURE__*/React.createElement(AddPrinter, {\n        printer: this.props.Login.printer,\n        selectedPrinterData: this.state.selectedPrinterData,\n        PrinterChange: this.PrinterChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1744,\n          columnNumber: 45\n        }\n      }) : this.props.Login.loadChildTest ? /*#__PURE__*/React.createElement(AddTest, {\n        TestCombined: this.props.Login.availableTest,\n        selectedTestData: this.state.selectedRecord,\n        TestChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1748,\n          columnNumber: 83\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1651,\n        columnNumber: 21\n      }\n    }), this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  showSampleInfo() {\n    this.setState({\n      showSample: true,\n      showTest: false\n    });\n  }\n\n  showSample() {\n    let fixefScrollHeight = this.state.fixefScrollHeight;\n    let disableSplit = false;\n\n    if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\n      let fixefScrollHeight = this.myRef.current.clientHeight + 20;\n      let disableSplit = true;\n    }\n\n    this.setState({\n      showSample: true,\n      showSubSample: false,\n      showTest: false,\n      fixefScrollHeight: fixefScrollHeight,\n      disableSplit: disableSplit\n    });\n  }\n\n  showTest() {\n    let fixefScrollHeight = this.state.fixefScrollHeight;\n    let disableSplit = false;\n\n    if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\n      let fixefScrollHeight = this.myRef.current.clientHeight + 20;\n      let disableSplit = true;\n    }\n\n    this.setState({\n      showSample: false,\n      showSubSample: false,\n      showTest: true,\n      fixefScrollHeight: fixefScrollHeight,\n      disableSplit: disableSplit\n    }); // setTimeout(()=>{\n    //     this.setState({\n    //         disableSplit :false\n    //     })  \n    // },100)\n  }\n\n  showSubSample() {\n    this.setState({\n      showSample: false,\n      showTest: false,\n      showSubSample: !this.state.showSubSample\n    });\n  }\n\n  showTestDetails() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        showSample: !this.state.showSample,\n        showTest: !this.state.showTest\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  checkPreregisterAndQuarentine(sample) {\n    return sample.ntransactionstatus === transactionStatus.PREREGISTER || sample.ntransactionstatus === transactionStatus.QUARANTINE;\n  }\n\n  checkPreregisterRecordQuarantine(sample) {\n    return sample.ntransactionstatus === transactionStatus.PREREGISTER;\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode] || \"-\",\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  componentWillUnmount() {\n    let activeTabIndex = this.props.Login.activeTabIndex;\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        activeTabIndex: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.columnList !== previousProps.Login.columnList) {\n      this.setState({\n        columnList: this.props.Login.columnList,\n        childColumnList: this.props.Login.childColumnList,\n        withoutCombocomponent: this.props.Login.withoutCombocomponent,\n        comboComponents: this.props.Login.comboComponents\n      });\n    }\n\n    if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\n      this.setState({\n        regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\n        regchildSubSampleColumnList: this.props.Login.regchildSubSampleColumnList,\n        regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\n        regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\n      });\n    }\n\n    if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\n      this.setState({\n        showSaveContinue: this.props.Login.showSaveContinue\n      });\n    }\n\n    if (this.props.Login !== previousProps.Login) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    } else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\n      this.setState({\n        selectedPrinterData: this.props.Login.selectedPrinterData\n      });\n    } else if (this.props.Login.loadFile !== previousProps.Login.loadFile && this.props.Login.loadFile === false) {\n      this.setState({\n        selectedFile: undefined\n      });\n    } else if (this.props.Login.selectedFilter !== previousProps.Login.selectedFilter) {\n      this.setState({\n        selectedFilter: this.props.Login.selectedFilter\n      });\n    }\n\n    if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\n      this.setState({\n        popUptestDataState: this.props.Login.popUptestDataState\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      const cancelId = controlMap.has(\"CancelTest\") ? controlMap.get(\"CancelTest\").ncontrolcode : -1;\n      const preRegisterId = controlMap.has(\"AddPreregister\") ? controlMap.get(\"AddPreregister\").ncontrolcode : -1;\n      const registerId = controlMap.has(\"RegisterAccept\") ? controlMap.get(\"RegisterAccept\").ncontrolcode : -1;\n      const editSampleId = controlMap.has(\"EditSample\") ? controlMap.get(\"EditSample\").ncontrolcode : -1;\n      const quarantineId = controlMap.has(\"RegisterQuarantine\") ? controlMap.get(\"RegisterQuarantine\").ncontrolcode : -1;\n      const addTestId = controlMap.has(\"AddNewTest\") ? controlMap.get(\"AddNewTest\").ncontrolcode : -1;\n      const printBarcodeId = controlMap.has(\"PrintBarcode\") ? controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\n      const cancelSampleId = controlMap.has(\"CancelReject\") ? controlMap.get(\"CancelReject\").ncontrolcode : -1;\n      const addSubSampleId = controlMap.has(\"AddSubSample\") ? controlMap.get(\"AddSubSample\").ncontrolcode : -1;\n      const editSubSampleId = controlMap.has(\"EditSubSample\") ? controlMap.get(\"EditSubSample\").ncontrolcode : -1;\n      const cancelSubSampleId = controlMap.has(\"CancelSubSample\") ? controlMap.get(\"CancelSubSample\").ncontrolcode : -1;\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        cancelId,\n        preRegisterId,\n        registerId,\n        editSampleId,\n        quarantineId,\n        addTestId,\n        printBarcodeId,\n        cancelSampleId,\n        addSubSampleId,\n        editSubSampleId,\n        cancelSubSampleId\n      });\n    }\n\n    let activeTabIndex = this.state.activeTabIndex || undefined;\n    let activeTabId = this.state.activeTabId || undefined;\n\n    if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex || this.props.Login.masterData !== previousProps.Login.masterData) {\n      let {\n        skip,\n        take,\n        testskip,\n        testtake,\n        subsampleskip,\n        subsampletake,\n        testCommentDataState,\n        resultDataState,\n        sampleGridDataState,\n        popUptestDataState,\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        SingleItem,\n        testMoreField,\n        testListColumns,\n        SubSampleDynamicGridItem,\n        SubSampleDynamicGridMoreField,\n        SubSampleSingleItem,\n        sampleSearchField,\n        subsampleSearchField,\n        testSearchField,\n        testAttachmentDataState,\n        sampleCommentDataState,\n        sampledateconstraints,\n        subsampledateconstraints,\n        activeTabIndex,\n        activeTabId,\n        sampleCombinationUnique,\n        subsampleCombinationUnique\n      } = this.state;\n\n      if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\n        activeTabIndex = this.props.Login.activeTabIndex;\n        activeTabId = this.props.Login.activeTabId;\n      }\n\n      if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n        const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n        DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\n        DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n        DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n        DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n        DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n        SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\n        SubSampleDynamicGridItem = dynamicColumn.subsamplegriditem ? dynamicColumn.subsamplegriditem : [];\n        SubSampleDynamicGridMoreField = dynamicColumn.subsamplegridmoreitem ? dynamicColumn.subsamplegridmoreitem : [];\n        SubSampleSingleItem = dynamicColumn.subsampledisplayfields ? dynamicColumn.subsampledisplayfields : [];\n        testMoreField = dynamicColumn.testListFields.testlistmoreitems ? dynamicColumn.testListFields.testlistmoreitems : [];\n        testListColumns = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\n        sampleSearchField = dynamicColumn.samplesearchfields ? dynamicColumn.samplesearchfields : [];\n        subsampleSearchField = dynamicColumn.subsamplesearchfields ? dynamicColumn.subsamplesearchfields : [];\n        testSearchField = dynamicColumn.testListFields.testsearchfields ? dynamicColumn.testListFields.testsearchfields : [];\n        sampledateconstraints = dynamicColumn.sampledateconstraints || [];\n        subsampledateconstraints = dynamicColumn.subsampledateconstraints || [];\n        sampleCombinationUnique = dynamicColumn.samplecombinationunique || [];\n        subsampleCombinationUnique = dynamicColumn.subsamplecombinationunique || []; // specBasedComponent = true;\n      }\n\n      let showSample = this.props.Login.showSample === this.state.showTest || this.state.showSample;\n      let showTest = showSample ? false : true;\n      let stateSampleType = this.state.stateSampleType;\n      let stateRegistrationType = this.state.stateRegistrationType;\n      let stateRegistrationSubType = this.state.stateRegistrationSubType;\n      let stateFilterStatus = this.state.stateFilterStatus;\n      let stateDynamicDesign = this.state.stateDynamicDesign;\n      let stateApprovalConfigVersion = this.state.stateApprovalConfigVersion;\n\n      if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\n        const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", false);\n        stateSampleType = sampleTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.RegistrationType !== previousProps.Login.masterData.RegistrationType) {\n        const registrationTypeMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", \"ascending\", false);\n        stateRegistrationType = registrationTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n        const registrationSubTypeMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", false);\n        stateRegistrationSubType = registrationSubTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.FilterStatus !== previousProps.Login.masterData.FilterStatus) {\n        const filterStatusMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"stransdisplaystatus\", \"nsorter\", \"ascending\", false);\n        stateFilterStatus = filterStatusMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.ApprovalConfigVersion !== previousProps.Login.masterData.ApprovalConfigVersion) {\n        const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], \"napproveconfversioncode\", \"sversionname\", undefined, undefined, false);\n        stateApprovalConfigVersion = DesignTemplateMappingMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\n        const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\", \"sregtemplatename\", undefined, undefined, false);\n        stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\");\n      } // const stateSampleType = sampleTypeMap.get(\"OptionList\");\n\n\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      subsampleskip = this.props.Login.subsampleskip === undefined ? subsampleskip : this.props.Login.subsampleskip;\n      subsampletake = this.props.Login.subsampletake || subsampletake;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      }\n\n      if (this.props.Login.testAttachmentDataState && this.props.Login.testAttachmentDataState !== previousProps.Login.testAttachmentDataState) {\n        testAttachmentDataState = this.props.Login.testAttachmentDataState;\n      }\n\n      if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\n        sampleGridDataState = this.props.Login.sampleGridDataState;\n      }\n\n      if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\n        popUptestDataState = this.props.Login.popUptestDataState;\n      }\n\n      const testGetParam = {\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeTestTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n        npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        //searchTestRef: this.searchTestRef,\n        // testskip: testskip,\n        //subsampleskip: subsampleskip,\n        // resultDataState: resultDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample //activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined\n\n      };\n      const testChildGetParam = {\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeTestTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n        npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n        ntransactionsamplecode: this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        // resultDataState: resultDataState,\n        // testCommentDataState: testCommentDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined\n      };\n      const subSampleGetParam = {\n        masterData: this.props.Login.masterData,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeTestTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n        // testskip: testskip,\n        // subsampleskip: subsampleskip,\n        // searchTestRef: this.searchTestRef,\n        //resultDataState: resultDataState,\n        // testCommentDataState: testCommentDataState,\n        //sampleGridDataState: sampleGridDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample\n      };\n      const filterSampleParam = {\n        inputListName: \"RegistrationGetSample\",\n        selectedObject: \"selectedSample\",\n        primaryKeyField: \"npreregno\",\n        fetchUrl: \"registration/getRegistrationSubSample\",\n        //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n        fecthInputObject: {\n          //nflag: 2,\n          // ntype: 2,\n          masterData: this.props.Login.masterData,\n          ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n          nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n          activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n          ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n          nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n          nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n          checkBoxOperation: 3\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: sampleSearchField,\n        changeList: [\"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"]\n      };\n      const filterSubSampleParam = {\n        inputListName: \"RegistrationGetSubSample\",\n        selectedObject: \"selectedSubSample\",\n        primaryKeyField: \"ntransactionsamplecode\",\n        fetchUrl: \"registration/getRegistrationTest\",\n        //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n        fecthInputObject: {\n          //nflag: 2,\n          // ntype: 2,\n          masterData: this.props.Login.masterData,\n          //  ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n          nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n          activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n          ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n          nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n          nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n          checkBoxOperation: 3,\n          npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\")\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: subsampleSearchField,\n        changeList: [\"RegistrationGetTest\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"]\n      };\n      const filterTestParam = {\n        inputListName: \"RegistrationGetTest\",\n        selectedObject: \"selectedTest\",\n        primaryKeyField: \"ntransactiontestcode\",\n        fetchUrl: this.getActiveTestURL(),\n        fecthInputObject: {\n          ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n          nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n          nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n          checkBoxOperation: 3,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n          activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: testSearchField,\n        changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\n      }; // let postParamList = [\n      //     {\n      //         filteredListName: \"searchedSample\",\n      //         clearFilter: \"no\",\n      //         searchRef: this.searchSampleRef,\n      //         primaryKeyField: \"npreregno\",\n      //         fetchUrl: \"registration/getRegistrationSubSample\",\n      //         fecthInputObject: subSampleGetParam,\n      //        // childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n      //         selectedObject: \"selectedSample\",\n      //         inputListName: \"AP_SAMPLE\",\n      //         updatedListname: \"selectedSample\",\n      //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\n      //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\n      //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n      //     }\n      //     , {\n      //         filteredListName: \"searchedTest\",\n      //         updatedListname: \"selectedTest\",\n      //         clearFilter: \"no\",\n      //         searchRef: this.searchTestRef,\n      //         primaryKeyField: \"ntransactiontestcode\",\n      //         fetchUrl: \"approval/getApprovalTest\",\n      //         fecthInputObject: testGetParam,\n      //         selectedObject: \"selectedTest\",\n      //         inputListName: \"RegistrationGetTest\",\n      //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\n      //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\n      //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n      //     }\n      // ];\n\n      const editRegParam = {\n        nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        // ncontrolCode: this.state.editSampleId,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n        checkBoxOperation: 3\n      };\n      const editSubSampleRegParam = {\n        nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        //ncontrolCode: this.state.editSampleId,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n      };\n      const addTestParam = {\n        selectedSample: this.props.Login.masterData.selectedSample,\n        selectedSubSample: this.props.Login.masterData.selectedSubSample,\n        // skip: skip, take: (skip + take),\n        userinfo: this.props.Login.userInfo,\n        sampleList: this.props.Login.masterData.RegistrationGetSample,\n        snspecsampletypecode: this.props.Login.masterData.selectedSubSample && [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\n      };\n      const breadCrumbobj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo); //  if (this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedtemplatebasedflow) {\n\n      this.breadCrumbData = [{\n        \"label\": \"IDS_FROM\",\n        \"value\": breadCrumbobj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": breadCrumbobj.breadCrumbto\n      }, {\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\n      }, {\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\n      }, {\n        \"label\": \"IDS_REGSUBTYPE\",\n        \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n      }, {\n        \"label\": \"IDS_FILTERSTATUS\",\n        \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\n      }, {\n        \"label\": \"IDS_APPROVALCONFIGVERSION\",\n        \"value\": this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.sversionname\n      }, {\n        \"label\": \"IDS_DESIGNTEMPLATE\",\n        \"value\": this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.sregtemplatename\n      }]; // } else {\n      //     this.breadCrumbData = [\n      //         {\n      //             \"label\": \"IDS_FROM\",\n      //             \"value\": breadCrumbobj.breadCrumbFrom\n      //         }, {\n      //             \"label\": \"IDS_TO\",\n      //             \"value\": breadCrumbobj.breadCrumbto\n      //         }, {\n      //             \"label\": \"IDS_SAMPLETYPE\",\n      //             \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\n      //         }, {\n      //             \"label\": \"IDS_REGTYPE\",\n      //             \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\n      //         }, {\n      //             \"label\": \"IDS_REGSUBTYPE\",\n      //             \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n      //         },\n      //         {\n      //             \"label\": \"IDS_FILTERSTATUS\",\n      //             \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\n      //         }\n      //     ]\n      //  }\n\n      this.setState({\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        SingleItem,\n        testMoreField,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        testListColumns,\n        stateSampleType,\n        stateRegistrationType,\n        stateRegistrationSubType,\n        stateFilterStatus,\n        stateDynamicDesign,\n        stateApprovalConfigVersion,\n        popUptestDataState,\n        showSample,\n        showTest,\n        skip,\n        take,\n        testskip,\n        subsampleskip,\n        subsampletake,\n        testtake,\n        testCommentDataState,\n        testAttachmentDataState,\n        resultDataState,\n        sampleGridDataState,\n        SubSampleDynamicGridItem,\n        SubSampleDynamicGridMoreField,\n        SubSampleSingleItem,\n        testGetParam,\n        testChildGetParam,\n        subSampleGetParam,\n        filterSampleParam,\n        filterTestParam,\n        editRegParam,\n        editSubSampleRegParam,\n        addTestParam,\n        sampleSearchField,\n        subsampleSearchField,\n        testSearchField,\n        filterSubSampleParam,\n        sampledateconstraints,\n        subsampledateconstraints,\n        activeTabIndex,\n        activeTabId,\n        sampleCombinationUnique,\n        subsampleCombinationUnique\n      });\n    }\n  }\n\n  onUpdateSubSampleRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      ntype: 5,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ntransactionsamplecode: String(this.state.selectedRecord.ntransactionsamplecode),\n      ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n      nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n      checkBoxOperation: 3,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistrationSubSample(this.state.selectedRecord, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, false, this.props.Login.specBasedComponent);\n    inputData[\"registrationsample\"] = param.sampleRegistration;\n    inputData[\"SubSampleDateList\"] = param.dateList;\n    inputData['subsampledateconstraints'] = this.state.subsampledateconstraints;\n    inputData[\"flag\"] = flag === undefined ? 1 : flag;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n    inputData[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n    inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n    inputData[\"checkBoxOperation\"] = 3;\n    inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n    inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n    inputData[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"SubSampleRegistration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      action: 'editSubSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      testAttachmentDataState: this.state.testAttachmentDataState // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.onUpdateSubSampleRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getSampleTypeChange,\n  getRegTypeChange,\n  getRegSubTypeChange,\n  getAttachmentCombo,\n  viewAttachment,\n  getCommentsCombo,\n  filterTransactionList,\n  validateEsignCredential,\n  getSampleChildTabDetail,\n  getTestChildTabDetailRegistration,\n  ReloadData,\n  showUnderDevelopment,\n  getPreviewTemplate,\n  getChildValues,\n  getRegistrationSample,\n  getRegistrationsubSampleDetail,\n  getRegistrationTestDetail,\n  acceptRegistration,\n  addMoreTest,\n  createRegistrationTest,\n  getEditRegistrationComboService,\n  cancelTestAction,\n  cancelSampleAction,\n  addsubSampleRegistration,\n  saveSubSample,\n  getEditSubSampleComboService,\n  onUpdateSubSampleRegistration,\n  validateEsignforRegistration,\n  cancelSubSampleAction,\n  preregRecordToQuarantine,\n  componentTest,\n  getSubSampleChildTabDetail,\n  onApprovalConfigVersionChange\n})(injectIntl(RegistrationDesigner));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/registration/RegistrationDesigner.jsx"],"names":["React","Component","connect","showUnderDevelopment","callService","crudMaster","updateStore","getSampleTypeChange","getRegTypeChange","getRegSubTypeChange","getAttachmentCombo","viewAttachment","getCommentsCombo","filterTransactionList","validateEsignCredential","ReloadData","getSampleChildTabDetail","getTestChildTabDetailRegistration","getPreviewTemplate","getChildValues","getRegistrationSample","getRegistrationsubSampleDetail","getRegistrationTestDetail","acceptRegistration","addMoreTest","createRegistrationTest","getEditRegistrationComboService","cancelTestAction","cancelSampleAction","addsubSampleRegistration","saveSubSample","getEditSubSampleComboService","onUpdateSubSampleRegistration","cancelSubSampleAction","preregRecordToQuarantine","componentTest","getSubSampleChildTabDetail","validateEsignforRegistration","onApprovalConfigVersionChange","Button","Card","Col","Nav","Row","FormLabel","toast","SlideOutModal","getControlMap","showEsign","sortData","constructOptionList","onDropAttachFileList","deleteAttachmentDropZone","convertDateTimetoString","comboChild","childComboClear","convertDateTimetoStringDBFormat","RegistrationFilter","Esign","injectIntl","MediaHeader","ProductList","DEFAULT_RETURN","SplitterLayout","AddTest","designProperties","RegistrationType","transactionStatus","SideBarSeqno","SideBarTabIndex","BreadcrumbComponent","ScrollBar","ListWrapper","TransactionListMasterJson","TransactionListMasterJsonView","FontAwesomeIcon","faFileInvoice","faEye","faPlus","faSync","faBorderAll","faLink","faCommentDots","faChevronRight","faComments","faComment","faPaperclip","faFlask","faMicroscope","faHistory","ContentPanel","ReadOnlyText","SampleInfoView","CustomTabs","ConfirmMessage","AddPrinter","SampleGridTab","AddFile","Attachments","Comments","onSaveSampleComments","onSaveSubSampleComments","onSaveTestComments","onSaveSampleAttachment","onSaveSubSampleAttachment","onSaveTestAttachment","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","RegistrationResultTab","PortalModal","PreRegisterSlideOutModal","PerfectScrollbar","checkTestPresent","getRegistrationSubSample","AddSubSample","CustomSwitch","ContextAwareToggle","QRCode","RegistrationDesigner","constructor","props","onReload","obj","Login","masterData","RealFromDate","RealToDate","userInfo","fromDate","toDate","RealSampleTypeValue","RealRegTypeValue","RealRegSubTypeValue","RealFilterStatusValue","RealDesignTemplateMappingValue","RealApprovalConfigVersionValue","activeSampleTab","activeSubSampleTab","activeTestTab","SampleTypeValue","RegTypeValue","RegSubTypeValue","FilterStatusValue","DesignTemplateMappingValue","ApprovalConfigVersionValue","FromDate","ToDate","inputData","npreregno","nsampletypecode","nregtypecode","nregsubtypecode","nfilterstatus","ntransactionstatus","userinfo","flag","nneedtemplatebasedflow","ndesigntemplatemappingcode","napproveconfversioncode","nneedsubsample","checkBoxOperation","inputParam","searchSubSampleRef","searchSampleRef","searchTestRef","selectedFilter","state","warn","intl","formatMessage","id","onFilterSubmit","fromdate","todate","ApprovalConfigVersion","paneSizeChange","d","setState","splitChangeWidthPercentage","verticalPaneSizeChange","val","enableAutoHeight","initialVerticalWidth","changeSplitterOption","sideNavDetail","screenName","testList","RegistrationGetTest","testskip","testtake","slice","selectedTestList","selectedTest","ntransactiontestcode","map","test","join","resultDataState","testDataStateChange","controlMap","userRoleControlRights","attachmentTabDetail","onTabChange","commentTabDetail","selectedSample","length","SingleItem","sampleGridDataState","sampleInfoDataStateChange","gridfillingColumn","DynamicGridItem","DynamicGridMoreField","attachmentTabMap","Map","subsampleskip","subsampletake","subsampleList","RegistrationGetSubSample","set","TEST","onAttachmentSaveClick","RegistrationTestAttachment","deleteAttachment","testAttachmentDataState","methodUrl","esignRights","masterList","SUBSAMPLE","RegistrationSampleAttachment","selectedSubSample","attachmentskip","attachmenttake","settings","parseInt","ntransactionsamplecode","sample","SAMPLE","RegistrationAttachment","RegistrationGetSample","commentTabMap","sampleList","skip","take","selectedSampleList","selectedSubSampleList","onCommentsSaveClick","RegistrationTestComment","testCommentDataState","operation","ncontrolCode","has","get","ncontrolcode","RegistrationSampleComment","subSampleCommentDataState","subSampledataStateChange","RegistrationComment","tabProps","tabseqno","tabSequence","String","item","activeTabIndex","activeTabId","subSampleAttachmentDataState","changePropertyView","index","event","status","window","innerWidth","enableAutoClick","RESULT","ATTACHMENTS","COMMENTS","updateInfo","typeName","data","onInputSwitchOnChange","target","name","enablePropertyPopup","changePropertyViewClose","undefined","printBarcode","selectedRecord","barcodevalue","sarno","barcodeData","showQRCode","openModal","handleDateSubSampleChange","dateValue","dateName","onComponentChange","comboData","fieldName","label","nspecsampletypecode","specBasedComponent","Conponent","onInputOnSubSampleChange","type","checked","value","onComboSubSampleChange","control","customName","parentList","childComboList","childColumnList","comboName","inputParem","child","source","primarykeyField","valuemember","pkey","nquerybuildertablecode","nameofdefaultcomp","regSubSamplecomboComponents","columnList","regSubSamplewithoutCombocomponent","regSubSamplecomboData","comboComponents","withoutCombocomponent","childParam","onNumericInputSubSampleChange","onNumericBlurSubSample","max","parseFloat","precision","min","onSaveSubSampleClick","saveType","formRef","objSubSample","searchedSample","findSampleAlloSpec","Set","nallottedspeccode","selectedTestData","selectedTestArray","push","param","SubSampleTemplate","jsondata","defaulttimezone","sampleRegistration","dateList","subsampledateconstraints","postParamList","mandatoryList","prereg","printer","file","childtest","regSubSample","mandatory","addSubSampleList","findComponentReqSpec","ncomponentrequired","row","children","column","component","hasOwnProperty","componentrow","inputtype","selectedFile","actionType","onSaveChildTestClick","selectedSubsample","x","TestGroupTest","ntestgrouptestcode","RegistrationSample","ntype","classUrl","responseKeyList","nformcode","loadEsign","screenData","getRegistrationComboService","ScreenName","primaryKeyField","editId","ndesigntemplatemappingcodefilter","Layout","registrationTemplate","mapOfFilterRegData","sregsubtypename","info","retunObj","childList","childData","findIndex","y","handlePageChange","e","setTimeout","_scrollBarRef","updateScroll","handleTestPageChange","handleSubSamplePageChange","openFilter","showFilter","onFilterChange","labelname","onSampleTabChange","onSubSampleTabChange","ontestTabChange","onDropComponentFile","attachedFiles","maxSize","handleFilterDateChange","Date","onUpdateRegistrationConfirm","showAlert","onUpdateRegistration","regEditParam","confirmAlert","showConfirmAlert","regDateEditConfirmMessage","confirmMessage","confirm","booleanFlag","insertRegistration","closeFilter","booleanmanuf","PLASMA_POOL","loadFile","ChildscreenName","childoperation","parentPopUpSize","onNumericInputChange","selectComponent","onSampleTypeChange","ConfirmComponent","getComponentfromJava","onRegTypeChange","registerId","acceptList","every","checkPreregisterAndQuarentine","action","acceptRegistrationConfirm","selectQuarantine","quarantineId","splice","quarentineList","checkPreregisterRecordQuarantine","onRegSubTypeChange","onDesignTemplateChange","onInputOnChange","onComboChange","PrinterChange","selectedPrinterData","closeChildModal","loadRegSubSample","showSaveContinue","loadChildTest","PopUpLabel","closeModal","loadPreregister","openChildModal","pare","loadPrinter","openPortal","subSampleDataGridList","insertSourcePreregno","onSaveClick","onSavePrinterClick","insertlist","displayName","insertPrinterPreregno","sprintername","npreregno1","onSaveFileClick","acceptedFiles","sfilename","formData","FormData","forEach","append","JSON","stringify","ntemplatemanipulationcode","ImportFile","dataState","dataStateChange","sourceDataState","popUptestDataState","testdataStateChange","testStateChange","testDataState","sampleTabDetail","tabMap","sampleComments","subsampleTabDetail","console","log","subsampleComments","testTabDetail","testTabMap","saveParam","isTestComment","searchedSubSample","searchedTest","selectedMaster","cancelSubSampleRecord","controlcode","transValidation","transactionValidation","stransdisplaystatus","cancelRecord","addSubSample","findTransactionStatus","PREREGISTER","findSampleSpec","findSampleSpectemplate","regchildColumnList","handleEditDateChange","onNumericInputEditChange","cancelSampleRecords","cancelRejectSamplesList","transactionstatus","ntransstatus","translist","sam","selectdata","check","sam1","includes","validateEsign","sreason","nreasoncode","spredefinedreason","password","editRegistration","editSubSampleRegistration","regSubSamplechildColumnList","mastertoedit","createRef","PrevoiusLoginData","breadCrumbData","layout","masterStatus","error","showAccordian","filterCollection","breadCrumb","showTest","showSample","showSubSample","sampleSearchFied","subsampleSearchFied","testSearchFied","DynamicSampleColumns","sampleCommentsDataState","historyDataState","grandparentheight","regparentSubSampleColumnList","regchildSubSampleColumnList","DynamicSubSampleColumns","DynamicTestColumns","testMoreField","testListColumns","SubSampleDynamicGridItem","SubSampleDynamicGridMoreField","SubSampleSingleItem","sampleCombinationUnique","subsampleCombinationUnique","cancelId","preRegisterId","editSampleId","addTestId","printBarcodeId","cancelSampleId","addSubSampleId","editSubSampleId","cancelSubSampleId","stateSampleType","stateRegistrationType","stateRegistrationSubType","stateFilterStatus","stateDynamicDesign","testGetParam","testChildGetParam","subSampleGetParam","filterSampleParam","filterTestParam","editRegParam","editSubSampleRegParam","addTestParam","sampleSearchField","subsampleSearchField","testSearchField","filterSubSampleParam","enablePin","fixefScrollHeight","outerHeight","propertyPopupWidth","myRef","getDerivedStateFromProps","getActiveTestURL","url","activeTestKey","render","subSampleList","testDesign","borderBottom","display","split","setting","ALL","FilterStatus","indexOf","mainDesign","marginTop","childRefs","ref","childFilteredListName","title","controlname","objectName","hidden","onClick","primaryKeyName","filteredListName","clearFilter","searchRef","fetchUrl","fecthInputObject","selectedObject","inputListName","updatedListname","unchangeList","stateApprovalConfigVersion","DesignTemplateMapping","background","width","loadComponent","loadTest","loadSource","loadPoolSource","selectedSourceData","Product","DynamicDesign","parse","lstComponent","timeZoneList","defaultTimeZone","TestCombined","availableTest","showSampleInfo","disableSplit","current","clientHeight","showTestDetails","QUARANTINE","temparray","option","LABEL","slanguagetypecode","VALUE","componentWillUnmount","componentDidUpdate","previousProps","Object","values","sampleCommentDataState","sampledateconstraints","dynamicColumn","samplelistitem","subsamplelistitem","testlistitem","samplegriditem","samplegridmoreitem","sampledisplayfields","subsamplegriditem","subsamplegridmoreitem","subsampledisplayfields","testListFields","testlistmoreitems","samplesearchfields","subsamplesearchfields","testsearchfields","samplecombinationunique","subsamplecombinationunique","SampleType","sampleTypeMap","registrationTypeMap","RegistrationSubType","registrationSubTypeMap","filterStatusMap","DesignTemplateMappingMap","sfromdate","stodate","searchFieldList","changeList","snspecsampletypecode","breadCrumbobj","breadCrumbFrom","breadCrumbto","ssampletypename","sregtypename","sversionname","sregtemplatename","initialParam","nflag","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    showUnderDevelopment,\r\n    callService, crudMaster, updateStore, getSampleTypeChange, getRegTypeChange,\r\n    getRegSubTypeChange, getAttachmentCombo, viewAttachment, getCommentsCombo,\r\n    filterTransactionList, validateEsignCredential, ReloadData, getSampleChildTabDetail,\r\n    getTestChildTabDetailRegistration, getPreviewTemplate, getChildValues,\r\n    getRegistrationSample, getRegistrationsubSampleDetail, getRegistrationTestDetail,\r\n    acceptRegistration, addMoreTest, createRegistrationTest, getEditRegistrationComboService,\r\n    cancelTestAction, cancelSampleAction, addsubSampleRegistration, saveSubSample,\r\n    getEditSubSampleComboService, onUpdateSubSampleRegistration, cancelSubSampleAction,\r\n    preregRecordToQuarantine, componentTest, getSubSampleChildTabDetail, validateEsignforRegistration,onApprovalConfigVersionChange\r\n} from '../../actions'\r\nimport { Button, Card, Col, Nav, Row, FormLabel } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    getControlMap, showEsign, sortData, constructOptionList,\r\n    onDropAttachFileList, deleteAttachmentDropZone, convertDateTimetoString, comboChild, childComboClear, convertDateTimetoStringDBFormat\r\n} from '../../components/CommonScript';\r\nimport RegistrationFilter from './RegistrationFilter';\r\nimport Esign from '../audittrail/Esign';\r\nimport { injectIntl } from 'react-intl';\r\nimport { MediaHeader, ProductList } from '../product/product.styled';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport AddTest from './AddTest';\r\nimport { designProperties, RegistrationType, transactionStatus, SideBarSeqno, SideBarTabIndex } from '../../components/Enumeration';\r\n// import BreadcrumbComponentToolbar from '../../components/ToolbarBreadcrumb.Component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileInvoice, faEye, faPlus, faSync, faBorderAll, faLink, faCommentDots, faChevronRight, faComments, faComment, faPaperclip, faFlask, faMicroscope, faHistory } from '@fortawesome/free-solid-svg-icons';\r\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddPrinter from './AddPrinter';\r\nimport SampleGridTab from './SampleGridTab';\r\nimport AddFile from './AddFile';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveSampleComments, onSaveSubSampleComments, onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\r\nimport { onSaveSampleAttachment, onSaveSubSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport { ReactComponent as Quarantine } from '../../assets/image/Quarantine.svg'\r\nimport { ReactComponent as Register } from '../../assets/image/register.svg'\r\nimport { ReactComponent as Reject } from '../../assets/image/reject.svg'\r\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'\r\nimport RegistrationResultTab from './RegistrationResultTab';\r\nimport PortalModal from '../../PortalModal';\r\nimport PreRegisterSlideOutModal from './PreRegisterSlideOutModal';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { checkTestPresent, getRegistrationSubSample } from './RegistrationValidation';\r\nimport AddSubSample from './AddSubSample';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport ContextAwareToggle from '../../components/sidebar/ContextAwareToggle';\r\nimport QRCode from 'react-qr-code';\r\n\r\nclass RegistrationDesigner extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef();\r\n        this.PrevoiusLoginData = undefined;\r\n        this.breadCrumbData = [];\r\n        //  this.sampleeditable=this.props.Login.masterData.DynamicDesign&& JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n        this.state = {\r\n            layout: 1,\r\n            openModal: false,\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            screenName: \"Product\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            showSaveContinue: false,\r\n            filterCollection: [],\r\n            selectedFilter: {},\r\n            breadCrumb: [],\r\n            showTest: true,\r\n            showSample: false,\r\n            showSubSample: false,\r\n            sampleSearchFied: [],\r\n            subsampleSearchFied: [],\r\n            testSearchFied: [],\r\n            showConfirmAlert: false,\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            DynamicSampleColumns: [],\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            testDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'npreregno' }] \r\n            },\r\n            testCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            subSampleCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            subSampleAttachmentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            testAttachmentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            sampleCommentsDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }]\r\n            },\r\n            resultDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            historyDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5\r\n                //, group: [{ field: 'sarno' }, { field: 'stestsynonym' }] \r\n            },\r\n            selectedPrinterData: {},\r\n            grandparentheight: '150vh',\r\n            transactionValidation: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\r\n            testskip: 0,\r\n            splitChangeWidthPercentage: 28.6,\r\n            testtake: this.props.Login.settings\r\n                && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            subsampleskip: 0,\r\n            subsampletake: this.props.Login.settings\r\n                && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            comboComponents: [],\r\n            withoutCombocomponent: [],\r\n            childColumnList: [],\r\n            columnList: [],\r\n            regSubSamplecomboComponents: [],\r\n            regSubSamplewithoutCombocomponent: [],\r\n            regparentSubSampleColumnList: [],\r\n            regchildSubSampleColumnList: [],\r\n            DynamicSubSampleColumns: [],\r\n            DynamicTestColumns: [],\r\n            DynamicGridItem: [],\r\n            DynamicGridMoreField: [],\r\n            SingleItem: [],\r\n            testMoreField: [],\r\n            testListColumns: [],\r\n            SubSampleDynamicGridItem: [],\r\n            SubSampleDynamicGridMoreField: [],\r\n            SubSampleSingleItem: [],\r\n            sampleCombinationUnique: [], subsampleCombinationUnique: [],\r\n            cancelId: -1,\r\n            preRegisterId: -1,\r\n            registerId: -1,\r\n            editSampleId: -1,\r\n            quarantineId: -1,\r\n            addTestId: -1,\r\n            printBarcodeId: -1,\r\n            cancelSampleId: -1,\r\n            addSubSampleId: -1,\r\n            editSubSampleId: -1,\r\n            cancelSubSampleId: -1,\r\n            stateSampleType: [],\r\n            stateRegistrationType: [],\r\n            stateRegistrationSubType: [],\r\n            stateFilterStatus: [],\r\n            stateDynamicDesign: [],\r\n            testGetParam: {},\r\n            testChildGetParam: {},\r\n            subSampleGetParam: {},\r\n            filterSampleParam: {},\r\n            filterTestParam: {},\r\n            editRegParam: {},\r\n            editSubSampleRegParam: {},\r\n            addTestParam: {},\r\n            sampleSearchField: [],\r\n            subsampleSearchField: [],\r\n            testSearchField: [],\r\n            filterSubSampleParam: {},\r\n            initialVerticalWidth: \"57vh\",\r\n            enablePin: false,\r\n            fixefScrollHeight: window.outerHeight - 300,\r\n            enablePropertyPopup: false,\r\n            enableAutoClick: false,\r\n            //mention the property width in percentage based on window size\r\n            propertyPopupWidth: \"60\",\r\n            showQRCode: false,\r\n\r\n            // specBasedComponent: this.props.Login.settings\r\n            //     && this.props.Login.settings[18] ? this.props.Login.settings[18] === \"true\" ? true : false : false,\r\n\r\n        };\r\n        // this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n        this.myRef = React.createRef();\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\r\n            return {\r\n                showConfirmAlert: props.Login.showConfirmAlert\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onReload = () => {\r\n\r\n        // let RealFromDate = new Date(this.props.Login.masterData.RealFromDate)\r\n        // let RealToDate = new Date(this.props.Login.masterData.RealToDate)\r\n        const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\r\n        const RealFromDate = obj.fromDate;\r\n        const RealToDate = obj.toDate;\r\n        let RealSampleTypeValue = this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue\r\n        let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue\r\n        let RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue\r\n        let RealFilterStatusValue = this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue\r\n        let RealDesignTemplateMappingValue = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue\r\n        let RealApprovalConfigVersionValue = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue\r\n        let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n        let activeSubSampleTab = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n        let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n\r\n        let SampleTypeValue = RealSampleTypeValue\r\n        let RegTypeValue = RealRegTypeValue\r\n        let RegSubTypeValue = RealRegSubTypeValue\r\n        let FilterStatusValue = RealFilterStatusValue\r\n        let DesignTemplateMappingValue = RealDesignTemplateMappingValue\r\n        let ApprovalConfigVersionValue = RealApprovalConfigVersionValue\r\n        // let FromDate = this.props.Login.masterData.FromDate\r\n        // let ToDate = this.props.Login.masterData.ToDate\r\n        const FromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        const ToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue, FromDate, ToDate,\r\n            RealFilterStatusValue, RealFromDate, RealToDate, SampleTypeValue, RegTypeValue, \r\n            RegSubTypeValue, FilterStatusValue, DesignTemplateMappingValue, RealDesignTemplateMappingValue,RealApprovalConfigVersionValue\r\n        }\r\n        let inputData = {\r\n            npreregno: \"\",\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nfilterstatus: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo, activeSampleTab, activeTestTab, activeSubSampleTab,\r\n            flag: 1,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedtemplatebasedflow,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue\r\n                && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\r\n            nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            checkBoxOperation: 3\r\n        }\r\n        if (inputData.nsampletypecode) {\r\n            // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\r\n            inputData['FromDate'] = obj.fromDate;\r\n            inputData['ToDate'] = obj.toDate;\r\n\r\n            let inputParam = { masterData, inputData, searchSubSampleRef: this.searchSubSampleRef, searchSampleRef: this.searchSampleRef, searchTestRef: this.searchTestRef, selectedFilter: this.state.selectedFilter }\r\n            this.props.ReloadData(inputParam);\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        const RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\r\n        const RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate)\r\n        let RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue\r\n        let RealRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue\r\n        let RealRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue\r\n        let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue\r\n        let RealDesignTemplateMappingValue = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue\r\n        let RealApprovalConfigVersionValue = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue\r\n\r\n        let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n        let activeSubSampleTab = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n\r\n        let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue,\r\n            RealFilterStatusValue, RealFromDate, RealToDate, RealDesignTemplateMappingValue,RealApprovalConfigVersionValue\r\n        }\r\n        let inputData = {\r\n            npreregno: \"\",\r\n            nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo, activeSampleTab, activeTestTab, activeSubSampleTab,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            napproveconfversioncode: this.props.Login.masterData.ApprovalConfigVersion\r\n                && this.props.Login.masterData.ApprovalConfigVersionValue.napproveconfversioncode,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue\r\n                && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            checkBoxOperation: 3\r\n        }\r\n\r\n        if (inputData.nsampletypecode) {\r\n            if (inputData.ndesigntemplatemappingcode) {\r\n                const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate,\r\n                    this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo)\r\n                inputData['FromDate'] = obj.fromDate;\r\n                inputData['ToDate'] = obj.toDate;\r\n                const selectedFilter = {};\r\n                selectedFilter[\"fromdate\"] = RealFromDate;\r\n                selectedFilter[\"todate\"] = RealToDate;\r\n                const inputParam = {\r\n                    masterData, inputData, searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchSampleRef: this.searchSampleRef,\r\n                    searchTestRef: this.searchTestRef, selectedFilter\r\n                }\r\n                this.props.getRegistrationSample(inputParam);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSCONFIGREGISTRATIONTEMPLATE\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    getActiveTestURL() {\r\n\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (this.props.Login.activeTestKey) {\r\n\r\n            case \"IDS_PARAMETERRESULTS\":\r\n                //url = \"resultentrybysample/getTestbasedParameter\";\r\n                url = \"registration/getregistrationparameter\";\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\";\r\n                break;\r\n            default:\r\n                url = \"registration/getregistrationparameter\";\r\n                // url = \"resultentrybysample/getTestbasedParameter\";\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    // gridViewChange(layout) {\r\n    //     this.setState({\r\n    //         layout: layout\r\n    //     })\r\n    // }\r\n    verticalPaneSizeChange = (val) => {\r\n        if (this.state.enableAutoHeight) {\r\n            this.setState({\r\n                initialVerticalWidth: val - 150\r\n            })\r\n        }\r\n    }\r\n    changeSplitterOption = () => {\r\n        this.setState({\r\n            enableAutoHeight: !this.state.enableAutoHeight,\r\n            initialVerticalWidth: \"57vh\"\r\n\r\n        })\r\n    }\r\n\r\n\r\n    sideNavDetail = (screenName) => {\r\n        let testList = this.props.Login.masterData.RegistrationGetTest || [];\r\n        let { testskip, testtake } = this.state\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n        let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        return (\r\n            screenName == \"IDS_PARAMETERRESULTS\" ?\r\n                <RegistrationResultTab\r\n                    userInfo={this.props.Login.userInfo}\r\n                    masterData={this.props.Login.masterData}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    dataState={this.state.resultDataState}\r\n                    dataStateChange={this.testDataStateChange}\r\n                    screenName=\"IDS_PARAMETERRESULTS\"\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                />\r\n                : screenName == \"IDS_ATTACHMENTS\" ?\r\n                    <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\"} tabDetail={this.attachmentTabDetail()} onTabChange={this.onTabChange} />\r\n                    : screenName == \"IDS_COMMENTS\" ?\r\n                        <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_TESTCOMMENTS\"} tabDetail={this.commentTabDetail()} onTabChange={this.onTabChange} />\r\n                        : screenName == \"IDS_SAMPLEDETAILS\" ?\r\n                            this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                <SampleInfoView\r\n                                    data={(this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0) ?\r\n                                        this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {}}\r\n                                    SingleItem={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ?\r\n                                        this.state.SingleItem : []}\r\n                                    screenName=\"IDS_SAMPLEINFO\"\r\n                                    userInfo={this.props.Login.userInfo}\r\n\r\n                                />\r\n                                :\r\n                                <SampleGridTab\r\n                                    userInfo={this.props.Login.masterData.userInfo || {}}\r\n                                    GridData={this.props.Login.masterData.selectedSample || []}\r\n                                    masterData={this.props.Login.masterData}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    dataState={this.state.sampleGridDataState}\r\n                                    dataStateChange={this.sampleInfoDataStateChange}\r\n                                    extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                    detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                    primaryKeyField={\"npreregno\"}\r\n                                    expandField=\"expanded\"\r\n                                    screenName=\"IDS_SAMPLEINFO\"\r\n                                //jsonField={\"jsondata\"}\r\n                                />\r\n                            : \"\"\r\n        )\r\n    }\r\n\r\n\r\n\r\n    attachmentTabDetail = () => {\r\n        const attachmentTabMap = new Map();\r\n        let testList = this.props.Login.masterData.RegistrationGetTest || [];\r\n        let { testskip, testtake, subsampleskip, subsampletake } = this.state\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n\r\n        attachmentTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            tabSequence={SideBarSeqno.TEST}\r\n            selectedMaster=\"selectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={getSameRecordFromTwoArrays(testList || [], this.props.Login.masterData.selectedTest, \"ntransactiontestcode\")}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            dataState={this.state.testAttachmentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n  nsubsampleneed={this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample}\r\n            userInfo={this.props.Login.userInfo}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: this.props.Login.masterData.selectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample &&\r\n            attachmentTabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n                screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n                tabSequence={SideBarSeqno.SUBSAMPLE}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                selectedMaster=\"selectedSubSample\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                masterList={this.props.Login.masterData.selectedSubSample || []}\r\n                masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                viewFile={this.props.viewAttachment}\r\n                addName={\"AddSubSampleAttachment\"}\r\n                editName={\"EditSubSampleAttachment\"}\r\n                deleteName={\"DeleteSubSampleAttachment\"}\r\n                viewName={\"ViewSubSampleAttachment\"}\r\n                methodUrl={\"SubSampleAttachment\"}\r\n                skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n                take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SubSampleAttachment\",\r\n                        ntransactionsamplecode:\r\n                            this.props.Login.masterData.selectedSubSample&&this.props.Login.masterData.selectedSubSample.map(sample=>sample.ntransactionsamplecode).join(\",\"),\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode:  this.props.Login.masterData.selectedSubSample&&this.props.Login.masterData.selectedSubSample.map(sample=>sample.ntransactionsamplecode).join(\",\"),\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RegistrationGetSubSample || []\r\n\r\n                }}\r\n                selectedListName=\"IDS_SUBSAMPLE\"\r\n                displayName=\"ssamplearno\"\r\n            />)\r\n        attachmentTabMap.set(\"IDS_SAMPLEATTACHMENTS\",\r\n            <Attachments\r\n                screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n                tabSequence={SideBarSeqno.SAMPLE}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                selectedMaster=\"selectedSample\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                masterList={this.props.Login.masterData.selectedSample || []}\r\n                masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                viewFile={this.props.viewAttachment}\r\n                addName={\"AddSampleAttachment\"}\r\n                editName={\"EditSampleAttachment\"}\r\n                deleteName={\"DeleteSampleAttachment\"}\r\n                viewName={\"ViewSampleAttachment\"}\r\n                methodUrl={\"SampleAttachment\"}\r\n                userInfo={this.props.Login.userInfo}\r\n                skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n                take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SampleAttachment\",\r\n                        npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\",\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\",\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RegistrationGetSample || []\r\n\r\n                }}\r\n                selectedListName=\"IDS_SAMPLE\"\r\n                displayName=\"sarno\"\r\n            />)\r\n        return attachmentTabMap;\r\n    }\r\n\r\n    commentTabDetail = () => {\r\n        const commentTabMap = new Map();\r\n        let testList = this.props.Login.masterData.RegistrationGetTest || [];\r\n        let { testskip, testtake } = this.state\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n        let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\r\n        let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let { skip, take } = this.state\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        let ntransactionsamplecode = this.props.Login.masterData.selectedSubSample ?\r\n            this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\r\n        let { subsampleskip, subsampletake } = this.state\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n\r\n\r\n        commentTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            masterData={this.props.Login.masterData}\r\n            tabSequence={SideBarSeqno.TEST}\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedTest\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            isTestComment={false}\r\n            masterList={getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\")}\r\n            masterAlertStatus=\"IDS_SELECTTESTTOADDCOMMENTS\"\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample &&\r\n            commentTabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n                screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n                masterData={this.props.Login.masterData}\r\n                tabSequence={SideBarSeqno.SUBSAMPLE}\r\n                onSaveClick={this.onCommentsSaveClick}\r\n                selectedMaster=\"selectedSubSample\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n                fetchRecord={this.props.getCommentsCombo}\r\n                addName={\"AddSubSampleComment\"}\r\n                editName={\"EditSubSampleComment\"}\r\n                deleteName={\"DeleteSubSampleComment\"}\r\n                methodUrl={\"SubSampleComment\"}\r\n                isTestComment={false}\r\n                masterList={selectedSubSampleList}\r\n                masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n                primaryKeyField={\"nsamplecommentcode\"}\r\n                dataState={this.state.subSampleCommentDataState}\r\n                dataStateChange={this.subSampledataStateChange}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SubSampleComment\",\r\n                        ntransactionsamplecode,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                    operation: \"update\",\r\n                    masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\r\n                    ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n                }}\r\n                selectedListName=\"IDS_SUBSAMPLES\"\r\n                displayName=\"ssamplearno\"\r\n            />)\r\n        commentTabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            masterData={this.props.Login.masterData}\r\n            tabSequence={SideBarSeqno.SAMPLE}\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLES\"\r\n            displayName=\"sarno\"\r\n        />)\r\n\r\n        return commentTabMap;\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const activeTestTab = tabProps.screenName;\r\n        const tabseqno = tabProps.tabSequence;\r\n        // if (activeTestTab !== this.props.Login.activeTestTab) {\r\n        if (tabseqno == SideBarSeqno.TEST) {\r\n            if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedTest: this.props.Login.masterData.selectedTest,\r\n                    ntransactiontestcode: this.props.Login.masterData.selectedTest ?\r\n                        String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    npreregno: this.props.Login.masterData.selectedSample ?\r\n                        this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                    activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\r\n                    activeTabId: tabProps.activeTabId ? tabProps.activeTabId : this.state.activeTabId\r\n                }\r\n                this.props.getTestChildTabDetailRegistration(inputData, true)\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n            }\r\n        }\r\n        else if (tabseqno == SideBarSeqno.SUBSAMPLE) {\r\n            if (activeTestTab !== this.props.Login.activeTestTab) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedSubSample: this.props.Login.masterData.selectedSubSample,\r\n                    ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    screenName: activeTestTab,\r\n                    activeSubSampleTab: activeTestTab,\r\n                    subSampleCommentDataState: this.state.subSampleCommentDataState,\r\n                    subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\r\n                }\r\n                this.props.getSubSampleChildTabDetail(inputData)\r\n            }\r\n        }\r\n        else {\r\n\r\n            if (activeTestTab !== this.props.Login.activeTestTab) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedSample: this.props.Login.masterData.selectedSample,\r\n                    npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    screenName: activeTestTab,\r\n                    activeSampleTab: activeTestTab\r\n                }\r\n                this.props.getSampleChildTabDetail(inputData)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    changePropertyView = (index, event, status) => {\r\n\r\n        let id = false;\r\n        if (event && event.ntransactiontestcode) {\r\n            id = event.ntransactiontestcode\r\n        } else if (event && event.ntransactionsamplecode) {\r\n            id = event.ntransactionsamplecode\r\n        } else if (event && event.npreregno) {\r\n            id = event.npreregno\r\n        }\r\n\r\n        let activeTabIndex\r\n        let activeTabId\r\n        if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n            activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\r\n        }\r\n        if (status != \"click\") {\r\n            if (index == SideBarTabIndex.RESULT) {\r\n                const tabProps = {\r\n                    tabSequence: SideBarSeqno.TEST,\r\n                    screenName: \"IDS_PARAMETERRESULTS\",\r\n                    activeTabIndex,\r\n                    activeTabId\r\n                }\r\n                this.onTabChange(tabProps);\r\n            }\r\n\r\n            else if (index == SideBarTabIndex.ATTACHMENTS) {\r\n                const tabProps = {\r\n                    tabSequence: SideBarSeqno.TEST,\r\n                    screenName: \"IDS_TESTATTACHMENTS\",\r\n                    activeTabIndex,\r\n                    activeTabId\r\n                }\r\n                this.onTabChange(tabProps);\r\n            }\r\n            else if (index == SideBarTabIndex.COMMENTS) {\r\n                const tabProps = {\r\n                    tabSequence: SideBarSeqno.TEST,\r\n                    screenName: \"IDS_TESTCOMMENTS\",\r\n                    activeTabIndex,\r\n                    activeTabId\r\n                }\r\n                this.onTabChange(tabProps);\r\n            }\r\n            else {\r\n                if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            activeTabIndex: this.state.activeTabIndex !== index ? index : id ? index : false,\r\n                            activeTabId: id\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n\r\n            //     const updateInfo = {\r\n            //         typeName: DEFAULT_RETURN,\r\n            //         data: {\r\n            //             activeTabIndex :activeTabIndex\r\n            //            // activeTabId :  id\r\n            //         }\r\n            //     }\r\n            //     this.props.updateStore(updateInfo);\r\n\r\n            //     }\r\n        }\r\n    }\r\n\r\n\r\n    onInputSwitchOnChange = (event) => {\r\n        if (event.target.name == \"PopupNav\") {\r\n            this.setState({\r\n                enablePropertyPopup: !this.state.enablePropertyPopup\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                enableAutoClick: !this.state.enableAutoClick\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    changePropertyViewClose = (id) => {\r\n        // this.setState({\r\n        //             activeTabIndex :undefined,\r\n        //             activeTestTab:undefined,\r\n        //             activeTabId :  id\r\n        //         })\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined,\r\n                activeTestTab: undefined,\r\n                activeTabId: id\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : this.props.Login.masterData.FromDate;\r\n        this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : this.props.Login.masterData.ToDate;\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample ? sortData(this.props.Login.masterData.RegistrationGetSample, 'desc', 'npreregno') : [];\r\n        let subSampleList = this.props.Login.masterData.RegistrationGetSubSample ? this.props.Login.masterData.RegistrationGetSubSample : [];\r\n        let testList = this.props.Login.masterData.RegistrationGetTest ? this.props.Login.masterData.RegistrationGetTest : []; //\r\n\r\n        const testDesign = <ContentPanel>\r\n            <Card>\r\n                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                    <span style={{ display: \"inline-block\" }}>\r\n                        <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                    </span>\r\n                    {/* <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                        onClick={() => this.showSample()}\r\n                    >\r\n                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                        {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                    </button> */}\r\n\r\n                </Card.Header>\r\n                <Card.Body className='p-0 sm-pager' >\r\n                    <TransactionListMasterJsonView\r\n                        cardHead={94}\r\n                        // paneHeight={this.state.initialVerticalWidth}\r\n                        masterList={this.props.Login.masterData.searchedTest || testList}\r\n                        selectedMaster={this.props.Login.masterData.selectedTest}\r\n                        primaryKeyField=\"ntransactiontestcode\"\r\n                        getMasterDetail={(event, status) => { this.props.getTestChildTabDetailRegistration(event, status); this.changePropertyView(1, event, \"click\") }}\r\n                        inputParam={{\r\n                            ...this.state.testChildGetParam, resultDataState: this.state.resultDataState,\r\n                            testCommentDataState: this.state.testCommentDataState,\r\n                            testAttachmentDataState: this.state.testAttachmentDataState,\r\n                            activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined,\r\n                        }}\r\n                        additionalParam={[]}\r\n                        mainField=\"stestsynonym\"\r\n                        selectedListName=\"selectedTest\"\r\n                        objectName=\"test\"\r\n                        listName=\"IDS_TEST\"\r\n                        // jsonField={'jsondata'}\r\n                        pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                        showStatusLink={true}\r\n                        subFieldsLabel={true}\r\n                        statusFieldName=\"stransdisplaystatus\"\r\n                        statusField=\"ntransactionstatus\"\r\n                        needMultiSelect={true}\r\n                        subFields={this.state.testListColumns || []}\r\n                        moreField={this.state.testMoreField}\r\n                        needValidation={false}\r\n                        showStatusName={true}\r\n                        needFilter={false}\r\n                        filterColumnData={this.props.filterTransactionList}\r\n                        searchListName=\"searchedTest\"\r\n                        searchRef={this.searchTestRef}\r\n                        filterParam={this.state.filterTestParam}\r\n                        selectionField=\"ntransactionstatus\"\r\n                        selectionFieldName=\"stransdisplaystatus\"\r\n                        // childTabsKey={[\"RegistrationTestComment\"]}\r\n                        childTabsKey={[\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\", \"ApprovalParameter\"]}\r\n                        handlePageChange={this.handleTestPageChange}\r\n                        buttonCount={5}\r\n                        skip={this.state.testskip}\r\n                        take={this.state.testtake}\r\n                        showMoreResetList={true}\r\n                        showMoreResetListName=\"RegistrationGetSample\"\r\n                        selectionList={this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                        selectionColorField=\"scolorhexcode\"\r\n                        // selectionList=\r\n                        // actionIcons={\r\n                        //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                        //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                        //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\r\n                        //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\r\n                        // }\r\n                        commonActions={\r\n                            <>\r\n                                {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                    {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                    <Nav.Link name=\"addtest\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                        //title={\"Add Test\"}\r\n                                        //data-for=\"tooltip-common-wrap\"\r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDTEST\" })}\r\n                                        hidden={this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1}\r\n                                        onClick={() => this.props.addMoreTest({\r\n                                            ...this.state.addTestParam,\r\n                                            skip: this.state.skip, take: (this.state.skip + this.state.take)\r\n                                        }, this.state.addTestId)}\r\n                                    >\r\n                                        <FontAwesomeIcon icon={faPlus} />\r\n                                    </Nav.Link>\r\n\r\n                                    <Nav.Link\r\n                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                        //title={\"Cancel/Reject Test\"}\r\n                                        // data-for=\"tooltip-common-wrap\"\r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTTEST\" })}\r\n                                        hidden={this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1}\r\n                                        onClick={() => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake)}>\r\n                                        <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                    </Nav.Link>\r\n                                </ProductList>\r\n                                {/* </Tooltip> */}\r\n                            </>\r\n                        }\r\n                    />\r\n                </Card.Body>\r\n            </Card>\r\n        </ContentPanel>\r\n\r\n\r\n        let mainDesign = \"\"\r\n\r\n        if (this.props.Login.masterData.RealRegSubTypeValue &&\r\n            this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample) {\r\n\r\n            mainDesign = <SplitterLayout borderColor=\"#999\"\r\n                primaryIndex={1} percentage={true}\r\n                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                // onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                primaryMinSize={40}\r\n                secondaryMinSize={30}\r\n            >\r\n\r\n                <Card >\r\n                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                            <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}</h4>\r\n                        </span>\r\n                    </Card.Header>\r\n                    <Card.Body className='p-0 sm-pager'>\r\n                        <TransactionListMasterJson\r\n                            cardHead={94}\r\n                            // paneHeight={this.state.initialVerticalWidth}\r\n                            // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                            masterList={this.props.Login.masterData.searchedSubSample || subSampleList}\r\n                            selectedMaster={this.props.Login.masterData.selectedSubSample}\r\n                            primaryKeyField=\"ntransactionsamplecode\"\r\n                            getMasterDetail={(event, status) => { this.props.getRegistrationTestDetail(event, status); this.changePropertyView(6, event, status) }}\r\n                            inputParam={{\r\n                                ...this.state.testGetParam,\r\n                                searchTestRef: this.searchTestRef,\r\n                                searchSubSampleRef: this.searchSubSampleRef,\r\n                                testskip: this.state.testskip,\r\n                                subsampleskip: this.state.subsampleskip,\r\n                                resultDataState: this.state.resultDataState,\r\n                                activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined,\r\n                            }}\r\n                            filterColumnData={this.props.filterTransactionList}\r\n                            searchListName=\"searchedSubSample\"\r\n                            searchRef={this.searchSubSampleRef}\r\n                            filterParam={{\r\n                                ...this.state.filterSubSampleParam,\r\n                                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }]\r\n                            }}\r\n                            additionalParam={['napprovalversioncode']}\r\n                            showStatusLink={true}\r\n                            showStatusName={true}\r\n                            statusFieldName=\"stransdisplaystatus\"\r\n                            statusField=\"ntransactionstatus\"\r\n                            mainField=\"ssamplearno\"\r\n                            selectedListName=\"selectedSubSample\"\r\n                            objectName=\"subsample\"\r\n                            listName=\"IDS_SUBSAMPLE\"\r\n                            // jsonField={'jsondata'}\r\n                            //jsonDesignFields={true}\r\n                            needValidation={true}\r\n                            validationKey=\"napprovalversioncode\"\r\n                            validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                            subFields={this.state.DynamicSubSampleColumns}\r\n                            skip={this.state.subsampleskip}\r\n                            take={this.state.subsampletake}\r\n                            selectionField=\"ntransactionstatus\"\r\n                            selectionFieldName=\"stransdisplaystatus\"\r\n                            needMultiSelect={true}\r\n                            selectionColorField=\"scolorhexcode\"\r\n                            subFieldsLabel={false}\r\n                            handlePageChange={this.handleSubSamplePageChange}\r\n                            selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                            childTabsKey={[\"RegistrationAttachment\",\r\n                                \"RegistrationGetTest\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"]}\r\n                            actionIcons={\r\n                                [\r\n                                    {\r\n                                        title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                        controlname: \"faPencilAlt\",\r\n                                        objectName: \"mastertoedit\",\r\n                                        hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\r\n                                        onClick: this.editSubSampleRegistration,\r\n                                        inputData: {\r\n                                            primaryKeyName: \"ntransactionsamplecode\",\r\n                                            operation: \"update\",\r\n                                            masterData: this.props.Login.masterData,\r\n                                            userInfo: this.props.Login.userInfo,\r\n                                            editSubSampleRegParam: { ...this.state.editSubSampleRegParam, ncontrolCode: this.state.editSubSampleId }\r\n                                        },\r\n                                    }\r\n\r\n\r\n                                ]\r\n                            }\r\n                            needFilter={false}\r\n                            commonActions={\r\n                                <>\r\n                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                    <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                        <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                            //title={\"Add Test\"}\r\n                                            //  data-for=\"tooltip-common-wrap\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLE\" })}\r\n                                            hidden={this.state.userRoleControlRights.indexOf(this.state.addSubSampleId) === -1}\r\n                                            onClick={() => this.addSubSample(this.state.addSubSampleId, this.state.subsampleskip, this.state.subsampletake)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPlus} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link\r\n                                            className=\"btn btn-circle outline-grey ml-2\"\r\n                                            //title={\"Cancel/Reject Test\"}\r\n                                            //data-for=\"tooltip-common-wrap\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                            hidden={this.state.userRoleControlRights.indexOf(this.state.cancelSubSampleId) === -1}\r\n                                            onClick={() => this.cancelSubSampleRecord(this.state.cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake)}>\r\n                                            <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                        </Nav.Link>\r\n                                    </ProductList>\r\n                                    {/* </Tooltip> */}\r\n                                </>\r\n                            }\r\n                        />\r\n                    </Card.Body>\r\n                </Card>\r\n                {testDesign}\r\n            </SplitterLayout>\r\n\r\n        } else {\r\n            mainDesign = testDesign\r\n        }\r\n\r\n\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"registration/getRegistrationSubSample\",\r\n                fecthInputObject: {\r\n                    ...this.state.subSampleGetParam, testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchTestRef: this.searchTestRef,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                    sampleGridDataState: this.state.sampleGridDataState\r\n                },\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\r\n                { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                selectedObject: \"selectedSample\",\r\n                inputListName: \"AP_SAMPLE\",\r\n                updatedListname: \"selectedSample\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            },\r\n            {\r\n                filteredListName: \"searchedSubSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSubSampleRef,\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"registration/getRegistrationTestSample\",\r\n                fecthInputObject: {\r\n                    ...this.state.testGetParam, testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchTestRef: this.searchTestRef,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                    sampleGridDataState: this.state.sampleGridDataState\r\n                },\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                selectedObject: \"selectedSubSample\",\r\n                inputListName: \"AP_SUBSAMPLE\",\r\n                updatedListname: \"selectedSubSample\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            },\r\n            {\r\n                filteredListName: \"searchedTest\",\r\n                updatedListname: \"selectedTest\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: \"approval/getApprovalTest\",\r\n                fecthInputObject: {\r\n                    ...this.state.testGetParam,\r\n                    searchTestRef: this.searchTestRef,\r\n                    testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    resultDataState: this.state.resultDataState\r\n                },\r\n                selectedObject: \"selectedTest\",\r\n                inputListName: \"RegistrationGetTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }\r\n        ];\r\n\r\n\r\n        // let editRegParam = {\r\n        //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     ncontrolCode: this.state.editSampleId,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n        //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        //     nneedsubsample: this.props.Login.masterData\r\n        //         && this.props.Login.masterData.nneedsubsample\r\n        // }\r\n\r\n        // let editSubSampleRegParam = {\r\n        //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     ncontrolCode: this.state.editSampleId,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n        //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        //     nneedsubsample: this.props.Login.masterData\r\n        //         && this.props.Login.masterData.nneedsubsample\r\n        // }\r\n\r\n        // const addTestParam = {\r\n        //     selectedsample: this.props.Login.masterData.selectedSample,\r\n        //     selectedsubsample: this.props.Login.masterData.selectedSubSample,\r\n        //     skip: this.state.skip, take: (this.state.skip + this.state.take),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     sampleList: this.props.Login.masterData.RegistrationGetSample,\r\n        //     snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\r\n        //         [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n        // };\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    <Row noGutters={true} className=\"toolbar-top\">\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            <ListWrapper className={`vertical-tab-top ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                {/* className={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 60 ? 'split-mode' : ''} */}\r\n                                <div className={`tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"}`}>\r\n                                    <SplitterLayout borderColor=\"#999\"\r\n                                        primaryIndex={1} percentage={true}\r\n                                        secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                        //onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                        primaryMinSize={30}\r\n                                        secondaryMinSize={20}\r\n                                    >\r\n                                        <div className='toolbar-top-inner'>\r\n                                            <TransactionListMasterJson\r\n                                                listMasterShowIcon={1}\r\n                                                // paneHeight={this.state.firstPane}\r\n                                                clickIconGroup={true}\r\n                                                splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                                masterList={this.props.Login.masterData.searchedSample || sampleList}\r\n                                                selectedMaster={this.props.Login.masterData.selectedSample}\r\n                                                primaryKeyField=\"npreregno\"\r\n                                                filterColumnData={this.props.filterTransactionList}\r\n                                                // getMasterDetail={(event, status) => { this.props.getRegistrationsubSampleDetail(event, status); this.changePropertyView(4, event, status) }}\r\n                                                getMasterDetail={this.props.getRegistrationsubSampleDetail}\r\n                                                inputParam={{\r\n                                                    ...this.state.subSampleGetParam,\r\n                                                    searchTestRef: this.searchTestRef,\r\n                                                    searchSubSampleRef: this.searchSubSampleRef,\r\n                                                    testskip: this.state.testskip,\r\n                                                    subsampleskip: this.state.subsampleskip,\r\n                                                    resultDataState: this.state.resultDataState\r\n                                                }}\r\n                                                selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                                    && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                selectionColorField=\"scolorhexcode\"\r\n                                                mainField={\"sarno\"}\r\n                                                showStatusLink={true}\r\n                                                showStatusName={true}\r\n                                                statusFieldName=\"stransdisplaystatus\"\r\n                                                statusField=\"ntransactionstatus\"\r\n                                                selectedListName=\"selectedSample\"\r\n                                                searchListName=\"searchedSample\"\r\n                                                searchRef={this.searchSampleRef}\r\n                                                objectName=\"sample\"\r\n                                                listName=\"IDS_SAMPLE\"\r\n                                                selectionField=\"ntransactionstatus\"\r\n                                                selectionFieldName=\"stransdisplaystatus\"\r\n                                                showFilter={this.props.Login.showFilter}\r\n                                                openFilter={this.openFilter}\r\n                                                closeFilter={this.closeFilter}\r\n                                                onFilterSubmit={this.onFilterSubmit}\r\n                                                subFields={this.state.DynamicSampleColumns}\r\n                                                // jsonField={'jsondata'}\r\n                                                //jsonDesignFields={true}\r\n                                                needMultiSelect={true}\r\n                                                showStatusBlink={true}\r\n                                                filterParam={{\r\n                                                    ...this.state.filterSampleParam,\r\n                                                    childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\r\n                                                    { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                                                }}\r\n                                                subFieldsLabel={false}\r\n                                                handlePageChange={this.handlePageChange}\r\n                                                skip={this.state.skip}\r\n                                                take={this.state.take}\r\n                                                // splitModeClass={this.state.splitChangeWidthPercentage\r\n                                                //     && this.state.splitChangeWidthPercentage > 50 ? 'split-mode'\r\n                                                //     : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                                childTabsKey={[\"RegistrationAttachment\", \"RegistrationGetSubSample\",\r\n                                                    \"RegistrationGetTest\", \"RegistrationSampleComment\", \"selectedSubSample\", \"selectedTest\", \"RegistrationComment\"]} //, \"RegistrationParameter\"\"RegistrationTestComment\"\r\n                                                actionIcons={\r\n                                                    [\r\n                                                        {\r\n                                                            title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                            controlname: \"faPencilAlt\",\r\n                                                            objectName: \"mastertoedit\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(this.state.editSampleId) === -1,\r\n                                                            onClick: this.editRegistration,\r\n                                                            inputData: {\r\n                                                                primaryKeyName: \"npreregno\",\r\n                                                                operation: \"update\",\r\n                                                                masterData: this.props.Login.masterData,\r\n                                                                userInfo: this.props.Login.userInfo,\r\n                                                                editRegParam: {\r\n                                                                    ...this.state.editRegParam,\r\n                                                                    ncontrolCode: this.state.editSampleId\r\n                                                                }\r\n                                                            },\r\n                                                        },\r\n                                                        {\r\n                                                            title: this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" }),\r\n                                                            controlname: \"faPrint\",\r\n                                                            objectName: \"sample\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\r\n                                                            //onClick: this.props.getPrinterComboService,\r\n                                                            onClick: this.printBarcode,\r\n                                                            inputData: {\r\n                                                                primaryKeyName: \"npreregno\",\r\n                                                                operation: \"print\",\r\n                                                                ncontrolcode: this.state.printBarcodeId,\r\n                                                                masterData: this.props.Login.masterData,\r\n                                                                userInfo: this.props.Login.userInfo,\r\n                                                                editRegParam: {\r\n                                                                    ...this.state.editRegParam,\r\n                                                                    ncontrolCode: this.state.printBarcodeId\r\n                                                                }\r\n                                                            },\r\n                                                        },\r\n\r\n                                                    ]\r\n                                                }\r\n                                                needFilter={true}\r\n                                                commonActions={\r\n\r\n                                                    <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                        <Button className=\"btn btn-icon-rounded btn-circle solid-blue ml-2\" role=\"button\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_PREREGISTER\" })}\r\n                                                            //  data-for=\"tooltip-common-wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.preRegisterId) === -1}\r\n                                                            onClick={() => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\",\r\n                                                                this.props.Login.masterData, this.props.Login.userInfo, this.state.preRegisterId)}>\r\n                                                            <FontAwesomeIcon icon={faPlus} />\r\n                                                        </Button>\r\n                                                        <Nav.Link\r\n                                                            className=\"btn btn-circle outline-grey ml-2\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_REGISTER\" })}\r\n                                                            // data-for=\"tooltip-common-wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.registerId) === -1}\r\n                                                            onClick={() => this.acceptRegistration(this.state.registerId, this.state.skip, this.state.take)} >\r\n                                                            <Register className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link\r\n                                                            className=\"btn btn-circle outline-grey ml-2\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_QUARANTINE\" })}\r\n                                                            //  data-for=\"tooltip-common-wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.quarantineId) === -1}\r\n                                                            onClick={() => this.selectQuarantine(this.state.quarantineId, this.state.skip, this.state.take)} >\r\n                                                            <Quarantine className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link\r\n                                                            className=\"btn btn-circle outline-grey ml-2\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTSAMPLE\" })}\r\n                                                            // data-for=\"tooltip-common-wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.cancelSampleId) === -1}\r\n                                                            onClick={() => this.cancelSampleRecords(this.state.cancelSampleId, this.state.skip, this.state.take)}>\r\n                                                            <Reject className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                                        </Nav.Link>\r\n                                                        <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                                            //   data-for=\"tooltip-common-wrap\"\r\n                                                            onClick={() => this.onReload()} >\r\n\r\n                                                            <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                        </Button>\r\n                                                    </ProductList>\r\n                                                }\r\n                                                filterComponent={[\r\n                                                    {\r\n                                                        \"Sample Filter\": <RegistrationFilter\r\n                                                            SampleType={this.state.stateSampleType || []}\r\n                                                            RegistrationType={this.state.stateRegistrationType || []}\r\n                                                            RegistrationSubType={this.state.stateRegistrationSubType || []}\r\n                                                            userInfo={this.props.Login.userInfo || {}}\r\n                                                            SampleTypeValue={this.props.Login.masterData.SampleTypeValue || {}}\r\n                                                            RegTypeValue={this.props.Login.masterData.RegTypeValue || {}}\r\n                                                            RegSubTypeValue={this.props.Login.masterData.RegSubTypeValue || {}}\r\n                                                            FilterStatusValue={this.props.Login.masterData.FilterStatusValue || {}}\r\n                                                            ApprovalConfigVersionValue={this.props.Login.masterData.ApprovalConfigVersionValue || {}}\r\n                                                            ApprovalConfigVersion={this.state.stateApprovalConfigVersion|| {}}\r\n                                                            DesignTemplateMapping={this.props.Login.masterData.DesignTemplateMapping}\r\n                                                            DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || {}}\r\n                                                            FilterStatus={this.state.stateFilterStatus || []}\r\n                                                            FromDate={this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date()}\r\n                                                            ToDate={this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date()}\r\n                                                            onSampleTypeChange={this.onSampleTypeChange}\r\n                                                            onRegTypeChange={this.onRegTypeChange}\r\n                                                            onRegSubTypeChange={this.onRegSubTypeChange}\r\n                                                            onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                                            onApprovalConfigVersionChange={this.onApprovalConfigVersionChange}\r\n                                                            DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                                            handleFilterDateChange={this.handleFilterDateChange}\r\n                                                            onFilterChange={this.onFilterChange}\r\n                                                        />\r\n                                                    }\r\n                                                ]}\r\n\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div>\r\n                                            <div style={this.state.showTest === true || this.state.showSubSample === true ?\r\n                                                { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                {mainDesign}\r\n                                            </div>\r\n                                            {/* <ContentPanel ref={this.myRef} style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                <Card ref={this.myRef} className=\"border-0\">\r\n                                                    <Card.Body className='p-0'>\r\n                                                        <Row>\r\n                                                            <Col md={12}>\r\n                                                                <Card className='p-0'>\r\n                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                            <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                        </span>\r\n                                                                      \r\n                                                                        <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                            onClick={() => this.showTest()}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                        </button>\r\n                                                                    </Card.Header>\r\n                                                                    <Card.Body>\r\n                                                                        <PerfectScrollbar>\r\n                                                                            <div ref={this.myRef} style={{ height: this.state.initialVerticalWidth + 30 }}>\r\n                                                                                {this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                                                                    <SampleInfoView\r\n                                                                                        data={(this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0) ?\r\n                                                                                            this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {}}\r\n                                                                                        SingleItem={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ?\r\n                                                                                            this.state.SingleItem : []}\r\n                                                                                        screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                        userInfo={this.props.Login.userInfo}\r\n\r\n                                                                                    />\r\n\r\n                                                                                    :\r\n                                                                                    <SampleGridTab\r\n                                                                                        userInfo={this.props.Login.masterData.userInfo || {}}\r\n                                                                                        GridData={this.props.Login.masterData.selectedSample || []}\r\n                                                                                        masterData={this.props.Login.masterData}\r\n                                                                                        inputParam={this.props.Login.inputParam}\r\n                                                                                        dataState={this.state.sampleGridDataState}\r\n                                                                                        dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                        extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                                                        detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                                                        primaryKeyField={\"npreregno\"}\r\n                                                                                        expandField=\"expanded\"\r\n                                                                                        screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                    //jsonField={\"jsondata\"}\r\n                                                                                    />\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                        </PerfectScrollbar>\r\n                                                                    </Card.Body>\r\n                                                                </Card>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                            </ContentPanel> */}\r\n                                        </div>\r\n                                    </SplitterLayout>\r\n                                </div>\r\n                                <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`} >\r\n                                    <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`} style={{ width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\" }}>\r\n                                        <span className={` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`} onClick={() => this.changePropertyViewClose(false)}><FontAwesomeIcon icon={faChevronRight} /> </span>\r\n                                        <div className={` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 4 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid sm-view-v-t  ${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_RESULT\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 1 ? this.sideNavDetail(\"IDS_PARAMETERRESULTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-attachment  ${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`}>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 2 ? this.sideNavDetail(\"IDS_ATTACHMENTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid-tab  ${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`}>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 3 ? this.sideNavDetail(\"IDS_COMMENTS\") : \"\"}\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                    <div className='tab-head'>\r\n                                        <ul>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(4)}>\r\n                                                <FontAwesomeIcon icon={faEye} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(2)}>\r\n                                                <FontAwesomeIcon icon={faLink} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_ATTACHMENTS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(3)}>\r\n                                                <FontAwesomeIcon icon={faComments} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(1)}>\r\n                                                <FontAwesomeIcon icon={faFileInvoice}\r\n                                                    //   data-for=\"tooltip-common-wrap\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_RESULT\" })} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_RESULT\" })}\r\n                                                </span>\r\n                                            </li>\r\n\r\n                                        </ul>\r\n                                        <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                label={\"Auto Show\"}\r\n                                                type=\"switch\"\r\n                                                name={\"Auto Click\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enableAutoClick}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enableAutoClick}\r\n                                            />\r\n                                        </span>\r\n                                        {/* <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                label={\"Popup Nav\"}\r\n                                                type=\"switch\"\r\n                                                name={\"PopupNav\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enablePropertyPopup}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enablePropertyPopup}\r\n                                            />\r\n                                        </span> */}\r\n                                    </div>\r\n                                </div>\r\n                            </ListWrapper>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper >\r\n                {\r\n                    this.props.Login.openPortal ?\r\n                        <PortalModal>\r\n                            <PreRegisterSlideOutModal\r\n                                postParamList={this.postParamList}\r\n                                PrevoiusLoginData={this.PrevoiusLoginData}\r\n                                closeModal={this.closeModal}\r\n                                operation={\"create\"}\r\n                                screenName={\"IDS_REGISTRATION\"}\r\n                                onSaveClick={this.onSaveClick}\r\n                                validateEsign={this.validateEsign}\r\n                                updateStore={this.props.updateStore}\r\n                                comboComponents={this.state.comboComponents}\r\n                                withoutCombocomponent={this.state.withoutCombocomponent}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                fromDate={this.fromDate}\r\n                                toDate={this.toDate}\r\n                                samplecombinationunique={this.state.sampleCombinationUnique}\r\n                                subsamplecombinationunique={this.state.subsampleCombinationUnique}\r\n                                //  specBasedComponent={this.state.specBasedComponent}\r\n                                mandatoryFields={[\r\n                                    { \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                                    { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sproductname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]}\r\n                            />\r\n                        </PortalModal>\r\n                        : \"\"\r\n                }\r\n                {\r\n                    (this.props.Login.openModal || this.state.showQRCode) &&\r\n                    <SlideOutModal show={this.props.Login.openModal || this.state.showQRCode}\r\n                        //|| this.props.Login.loadEsign}\r\n                        closeModal={this.state.showQRCode ? () => this.setState({ showQRCode: false, openModal: false }) :\r\n                            this.props.Login.loadRegSubSample ||\r\n                                this.props.Login.loadFile ||\r\n                                this.props.Login.loadChildTest ? this.closeChildModal : this.closeModal}\r\n                        size={this.props.Login.parentPopUpSize}\r\n                        loginoperation={this.props.Login.loadPrinter ? true : false}\r\n                        buttonLabel={this.state.showQRCode || this.props.Login.loadPrinter ? \"print\" : undefined}\r\n                        operation={this.state.showQRCode ? \"Preview\" : this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.childoperation : this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.state.showQRCode ? \"QR Code\" : this.props.Login.loadTest || this.props.Login.loadFile ?\r\n                            this.props.Login.ChildscreenName : this.props.Login.screenName}\r\n                        esign={this.props.Login.loadEsign}\r\n                        innerPopup={this.props.Login.loadComponent}\r\n                        onSaveClick={this.state.showQRCode ? () => this.setState({ showQRCode: false, openModal: false }) : this.props.Login.loadRegSubSample ? this.onSaveSubSampleClick : this.props.Login.loadFile ? this.onSaveFileClick :\r\n                            this.props.Login.loadPrinter ? this.onSavePrinterClick :\r\n                                this.props.Login.loadChildTest ? this.onSaveChildTestClick : this.onSaveClick}\r\n                        validateEsign={this.validateEsign}\r\n                        showSaveContinue={this.props.Login.showSaveContinue}\r\n                        selectedRecord={!this.props.Login.loadEsign ? this.props.Login.loadComponent ? this.state.selectComponent : this.props.Login.loadPrinter ? this.state.selectedPrinterData\r\n                            : this.props.Login.loadTest ? this.state.selectedTestData : this.props.Login.loadFile ? this.state.selectedFile\r\n                                : this.props.Login.loadPoolSource ? this.state.selectedSourceData : this.state.selectedRecord : this.state.selectedRecord}\r\n                        mandatoryFields={this.mandatoryList(this.props.Login.loadPreregister,\r\n                            this.props.Login.loadPrinter, this.props.Login.loadFile,\r\n                            this.props.Login.loadChildTest, this.props.Login.loadRegSubSample)}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.state.showQRCode ?\r\n                                <Row>\r\n                                    <Col md={6}>\r\n                                        <QRCode value={this.state.selectedRecord.barcodevalue} />\r\n                                    </Col>\r\n\r\n                                    <Col md={6}>\r\n                                        <Row>\r\n                                            <Col md={12}>\r\n                                                <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_ARNO\" })}:</FormLabel>\r\n                                                <ReadOnlyText>{this.state.selectedRecord.barcodeData.sarno || '-'}</ReadOnlyText>\r\n                                            </Col>\r\n                                            <Col md={12}>\r\n                                                <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPE\" })}:</FormLabel>\r\n                                                <ReadOnlyText>{this.state.selectedRecord.barcodeData.Product || '-'}</ReadOnlyText>\r\n                                            </Col>\r\n                                            {/* <Col md={12}>\r\n                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_COLLECTIONDATE\" })}:</FormLabel>\r\n                                            <ReadOnlyText>{this.state.selectedRecord.barcodeData.scollectiondate || '-'}</ReadOnlyText>\r\n                                        </Col>\r\n                                        <Col md={12}>\r\n                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SUBMITTER\" })}:</FormLabel>\r\n                                            <ReadOnlyText>{this.state.selectedRecord.barcodeData.submitter || '-'}</ReadOnlyText>\r\n                                        </Col> */}\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                                : this.props.Login.loadRegSubSample ?\r\n                                    <AddSubSample\r\n                                        editfield={this.props.Login.masterData.DynamicDesign && JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)}\r\n                                        Component={this.props.Login.lstComponent || []}\r\n                                        selectComponent={this.state.selectedRecord}\r\n                                        templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                            this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                        defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                        handleDateChange={this.handleDateSubSampleChange}\r\n                                        onInputOnChange={this.onInputOnSubSampleChange}\r\n                                        onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                        onNumericBlur={this.onNumericBlurSubSample}\r\n                                        comboData={this.props.Login.regSubSamplecomboData}\r\n                                        onComboChange={this.onComboSubSampleChange}\r\n                                        onComponentChange={this.onComponentChange}\r\n                                        TestCombined={this.props.Login.TestCombined || []}\r\n                                        TestChange={this.onComboChange}\r\n                                        selectedTestData={this.state.selectedRecord}\r\n                                        childoperation={this.props.Login.operation}\r\n                                        specBasedComponent={this.props.Login.specBasedComponent}\r\n\r\n                                    />\r\n                                    : this.props.Login.loadFile ? <AddFile\r\n                                        selectedFile={this.state.selectedFile || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onDrop={this.onDropComponentFile}\r\n                                        deleteAttachment={this.deleteAttachment}\r\n                                        actionType={this.state.actionType}\r\n                                        maxSize={20}\r\n                                        maxFiles={1}\r\n                                    /> :\r\n                                        this.props.Login.loadPrinter ?\r\n                                            <AddPrinter\r\n                                                printer={this.props.Login.printer}\r\n                                                selectedPrinterData={this.state.selectedPrinterData}\r\n                                                PrinterChange={this.PrinterChange}\r\n                                            /> : this.props.Login.loadChildTest ? <AddTest\r\n                                                TestCombined={this.props.Login.availableTest}\r\n                                                selectedTestData={this.state.selectedRecord}\r\n                                                TestChange={this.onComboChange}\r\n                                            /> : \"\"\r\n                        }\r\n                    />\r\n                }\r\n                {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    printBarcode = (inputParam) => {\r\n\r\n        this.setState({\r\n            selectedRecord: {\r\n                barcodevalue: inputParam.sample.sarno,\r\n                barcodeData: inputParam.sample\r\n            },\r\n            showQRCode: true, openModal: true\r\n        })\r\n    }\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            //  if (!nneedsubsample) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            if (fieldName === 'ntzdreceivedate') {\r\n                selectedRecord[\"ntzdreceivedate\"] = comboData;\r\n                this.setState({ selectedRecord })\r\n            } else {\r\n                // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                //     //selectComponent[\"nneedservice\"] = true;\r\n                // }\r\n                selectedRecord[fieldName] = comboData;\r\n                selectedRecord[\"Sample Name\"] = comboData.label;\r\n                selectedRecord[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n                selectedRecord[\"ntestgrouptestcode\"] = [];\r\n\r\n                this.props.componentTest(selectedRecord, true, this.props.Login.specBasedComponent,\r\n                    this.props.Login.Conponent)\r\n            }\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         selectComponent\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     const selectComponent = this.state.selectComponent || {};\r\n            //     selectComponent[fieldName] = comboData;\r\n            //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n            //     this.setState({ selectComponent })\r\n            // }\r\n        }\r\n\r\n    }\r\n    onInputOnSubSampleChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n\r\n            let comboName = customName || control.label;\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n               // item: comboData ? comboData.item : \"\",\r\n                item: comboData ? {...comboData.item, pkey:control.valuemember, nquerybuildertablecode:control.nquerybuildertablecode,\"source\": control.source} : \"\",\r\n                label: comboName,\r\n                nameofdefaultcomp: control.name\r\n            }\r\n            comboData[\"item\"] = {...comboData[\"item\"], pkey:control.valuemember,\r\n                                nquerybuildertablecode:control.nquerybuildertablecode ,\"source\": control.source};\r\n            if (comboData) {\r\n                selectedRecord[comboName] = comboData;\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n            }\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.state.regSubSamplecomboComponents,\r\n                    control.child, \"label\")\r\n                childColumnList = {};\r\n                childComboList.map(columnList => {\r\n                    const val = comboChild(this.state.regSubSamplecomboComponents,\r\n                        columnList, childColumnList, false);\r\n                    childColumnList = val.childColumnList\r\n                    return null;\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.state.regSubSamplewithoutCombocomponent,\r\n                    control.child, \"label\")\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectedRecord, this.props.Login.regSubSamplecomboData,\r\n                    childComboList, childColumnList, this.state.regSubSamplewithoutCombocomponent,\r\n                    [...childComboList, ...parentList])\r\n            } else {\r\n                this.setState({ selectedRecord })\r\n            }\r\n        } else {\r\n            let regSubSamplecomboData = this.props.Login.regSubSamplecomboData\r\n            selectedRecord[control.label] = \"\";\r\n\r\n            const inputParam = {\r\n                control, comboComponents: this.state.regSubSamplecomboData,\r\n                withoutCombocomponent: this.state.regSubSamplewithoutCombocomponent, selectedRecord: selectedRecord, comboData: regSubSamplecomboData\r\n            }\r\n            const childParam = childComboClear(inputParam)\r\n            selectedRecord = childParam.selectedRecord\r\n            regSubSamplecomboData = childParam.comboData\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, regSubSamplecomboData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if(value === 0){\r\n            selectedRecord[name] = undefined;\r\n        }else{\r\n            selectedRecord[name] = value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlurSubSample = (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        if (operation === 'create') {\r\n            let objSubSample = this.state.selectedRecord;\r\n            const userInfo = this.props.Login.userInfo;\r\n\r\n         //   let saveSubSample = {};\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.selectedSample, sampleList, 'npreregno')\r\n\r\n            const findSampleAlloSpec = [...new Set(sampleList.map(item => item.nallottedspeccode))];\r\n            // if (this.props.Login.specBasedComponent) {\r\n            //     saveSubSample[\"nspecsampletypecode\"] = objSubSample[\"nspecsampletypecode\"] ? objSubSample[\"nspecsampletypecode\"] : -1\r\n            //     saveSubSample[\"ncomponentcode\"] = objSubSample[\"ncomponentcode\"] ? objSubSample[\"ncomponentcode\"].value : -1\r\n            // } else {\r\n            //     const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\r\n            //     saveSubSample[\"nspecsampletypecode\"] = findSampleSpec[0] ? findSampleSpec[0] : -1;\r\n            //     saveSubSample[\"ncomponentcode\"] = -1\r\n            // }\r\n\r\n            // saveSubSample[\"jsondata\"] = {}\r\n            // saveSubSample[\"jsonuidata\"] = {}\r\n            // const dateList = []\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                     //let componentrowlabel = ''\r\n            //                     // let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\r\n            //                                 { value: objSubSample[componentrow.label].value, label: objSubSample[componentrow.label].label } : -1\r\n\r\n            //                             saveSubSample[\"jsonuidata\"][componentrow.label] = objSubSample[componentrow.label] ? objSubSample[componentrow.label].label : \"\"\r\n\r\n            //                             // if (componentrow.mandatory || objSubSample[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label].label\r\n            //                             // }\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 saveSubSample[\"jsondata\"][componentrow.label] = convertDateTimetoStringDBFormat(objSubSample[componentrow.label] ?\r\n            //                                     objSubSample[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                 saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 saveSubSample[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                 convertDateTimetoStringDBFormat(objSubSample[componentrow.label] ?\r\n            //                                         objSubSample[componentrow.label] : new Date(), userInfo) :\r\n            //                                     objSubSample[componentrow.label] ? convertDateTimetoStringDBFormat(objSubSample[componentrow.label] ?\r\n            //                                         objSubSample[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                 saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 saveSubSample[\"jsondata\"][`tz${componentrow.label}`] = objSubSample[`tz${componentrow.label}`] ?\r\n            //                                     { value: objSubSample[`tz${componentrow.label}`].value, label: objSubSample[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 saveSubSample[\"jsonuidata\"][`tz${componentrow.label}`] = saveSubSample[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\r\n            //                                 objSubSample[componentrow.label] : \"\"\r\n\r\n            //                             saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n\r\n            //                             // if (objSubSample[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + objSubSample.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                         return saveSubSample;\r\n            //                     })\r\n            //                     //saveSubSample[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\r\n            //                             { value: objSubSample[component.label].value, label: objSubSample[component.label].label } : -1\r\n\r\n            //                         saveSubSample[\"jsonuidata\"][component.label] = objSubSample[component.label] ? objSubSample[component.label].label : \"\"\r\n            //                     }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             saveSubSample[\"jsondata\"][component.label] = convertDateTimetoStringDBFormat(objSubSample[component.label] ?\r\n            //                                 objSubSample[component.label] : new Date(), userInfo);\r\n\r\n            //                             saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             saveSubSample[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                             convertDateTimetoStringDBFormat(objSubSample[component.label] ?\r\n            //                                     objSubSample[component.label] : new Date(), userInfo) :\r\n            //                                 objSubSample[component.label] ? convertDateTimetoStringDBFormat(objSubSample[component.label] ?\r\n            //                                     objSubSample[component.label] : new Date(), userInfo) : \"\";\r\n            //                             saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n            //                         }\r\n            //                         if (component.timezone) {\r\n            //                             saveSubSample[\"jsondata\"][`tz${component.label}`] = objSubSample[`tz${component.label}`] ?\r\n            //                                 { value: objSubSample[`tz${component.label}`].value, label: objSubSample[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                             saveSubSample[\"jsonuidata\"][`tz${component.label}`] = saveSubSample[\"jsondata\"][`tz${component.label}`]\r\n            //                         }\r\n            //                         dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\r\n            //                             objSubSample[component.label] : \"\"\r\n\r\n            //                         saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n            //                 return saveSubSample;\r\n            //             }\r\n            //             )\r\n            //             return saveSubSample;\r\n            //         })\r\n            //         return saveSubSample;\r\n            //     })\r\n\r\n\r\n\r\n\r\n            //  saveSubSample[\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1;\r\n            // Component.unshift(saveSubSample);\r\n\r\n            let selectedTestData = objSubSample[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n\r\n            // const Test = this.props.Login.Test || [];\r\n            // const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n          //  const saveSubSample = this.state.selectedRecord||{}\r\n\r\n           // if (this.props.Login.specBasedComponent) {\r\n             //   saveSubSample[\"nspecsampletypecode\"] = objSubSample[\"nspecsampletypecode\"] ? objSubSample[\"nspecsampletypecode\"] : -1\r\n               // saveSubSample[\"ncomponentcode\"] = objSubSample[\"ncomponentcode\"] ? objSubSample[\"ncomponentcode\"].value : -1\r\n          //  } \r\n         //   if(!this.props.Login.specBasedComponent) {\r\n              //  const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\r\n               // objSubSample[\"nspecsampletypecode\"] = selectedTestData&&selectedTestData.length>0?selectedTestData[0]['item']['nspecsampletypecode']:-1;\r\n               // objSubSample[\"ncomponentcode\"] = -1\r\n          //  }\r\n\r\n            const map = {}\r\n            const param = getRegistrationSubSample(\r\n                objSubSample,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaulttimezone, false, \r\n                this.props.Login.specBasedComponent,operation);\r\n\r\n            map[\"RegistrationSample\"] = param.sampleRegistration\r\n            map[\"subsampleDateList\"] = param.dateList\r\n            map[\"RegistrationSample\"][\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1;\r\n            // map['RegistrationSample'] = saveSubSample\r\n            //   map['subsampleDateList'] = dateList\r\n            map['subsampledateconstraints'] = this.state.subsampledateconstraints;\r\n            map['testgrouptest'] = selectedTestArray\r\n            map['npreregno'] = sampleList.map(item => item.npreregno).join(\",\")\r\n            map['userinfo'] = userInfo\r\n            map['checkBoxOperation'] = 3\r\n            map['ntype'] = 3\r\n            map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n            map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n            map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n            map[\"checkBoxOperation\"] = 3\r\n            map[\"masterData\"] = this.props.Login.masterData\r\n            map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"\r\n            map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n            map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n            map[\"specBasedComponent\"] = this.props.Login.specBasedComponent;\r\n            \r\n\r\n            const inputParam = {\r\n                inputData: map,\r\n                postParamList: this.postParamList,\r\n            }\r\n\r\n            this.props.saveSubSample(inputParam);\r\n        } else {\r\n            this.onUpdateSubSampleRegistration(saveType, formRef, operation);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    mandatoryList = (prereg, printer, file, childtest, regSubSample) => {\r\n        let mandatory = [];\r\n        if (file) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_IMPORTFILE\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }\r\n            ];\r\n        }\r\n        else if (printer) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_PRINTER\", \"dataField\": \"sprintername\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        } else if (regSubSample) {\r\n\r\n            let sampleList = [];\r\n            const skip=this.state.skip\r\n            const take=this.state.take\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n            }\r\n    \r\n            let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n            const findComponentReqSpec = [...new Set(addSubSampleList.map(item => item.ncomponentrequired))];\r\n            if(findComponentReqSpec[0]===3){\r\n                mandatory = [{ \"idsName\": \"IDS_SPECIMEN\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n            }\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        mandatory.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" })\r\n\r\n                                    }\r\n                                    return mandatory;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    mandatory.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" }) : \"\"\r\n\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n\r\n        else if (childtest) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ];\r\n        }\r\n        return mandatory;\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedFile = this.state.selectedFile || {};\r\n        selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file)\r\n        this.setState({\r\n            selectedFile, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    onSaveChildTestClick = (saveType, formRef) => {\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.RegistrationGetSample.slice(this.state.skip, (this.state.skip + this.state.take)), \"npreregno\");\r\n        const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, masterData.RegistrationGetSample.slice(this.state.skip, (this.state.skip + this.state.take)), \"npreregno\");\r\n        //  selectedSubsample =masterData.selectedSubSample.slice(this.state.skip, (this.state.skip + this.state.take));\r\n        const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate,\r\n            this.props.Login.masterData.RealToDate, this.props.Login.userInfo)\r\n        const inputData = {\r\n            TestGroupTest: this.state.selectedRecord.ntestgrouptestcode.map(value => value.item),\r\n            RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\r\n            ntransactionsamplecode: ntransactionsamplecode,\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\r\n            ntype: 3,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            npreregno: selectedSample &&\r\n                selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            // ntransactionsamplecode: selectedSubsample &&\r\n            // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            FromDate: obj.fromDate,\r\n            ToDate: obj.toDate,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n        }\r\n\r\n\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"registration\",\r\n            operation: this.props.Login.operation,\r\n            methodUrl: \"Test\",\r\n            responseKeyList: [\r\n                { \"responseKey\": \"selectedSample\", \"masterDataKey\": \"RegistrationGetSample\", \"primaryKey\": \"npreregno\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedSubSample\", \"masterDataKey\": \"RegistrationGetSubSample\", \"primaryKey\": \"ntransactionsamplecode\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedTest\", \"masterDataKey\": \"RegistrationGetTest\", \"primaryKey\": \"ntransactiontestcode\", \"dataAction\": \"add\" }],\r\n            saveType, formRef,\r\n            postParamList: this.postParamList,\r\n\r\n        }\r\n        if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.createRegistrationTest(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    getRegistrationComboService = (ScreenName, operation,\r\n        primaryKeyField, masterData, userInfo, editId) => {\r\n        const ndesigntemplatemappingcodefilter = this.props.Login.masterData.DesignTemplateMappingValue &&\r\n            this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode\r\n        if (ndesigntemplatemappingcodefilter === this.props.Login.masterData.ndesigntemplatemappingcode) {\r\n            let data = [];\r\n            const withoutCombocomponent = []\r\n            const Layout = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.jsondata\r\n            if (Layout !== undefined) {\r\n                Layout.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        data.push(componentrow)\r\n                                    } else {\r\n                                        withoutCombocomponent.push(componentrow)\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.inputtype === \"combo\" ?\r\n                                    data.push(component) : withoutCombocomponent.push(component)\r\n                        })\r\n                    })\r\n\r\n                })\r\n                const comboComponents = data\r\n                let childColumnList = {};\r\n                data.map(columnList => {\r\n                    const val = comboChild(data, columnList, childColumnList, true);\r\n                    data = val.data;\r\n                    childColumnList = val.childColumnList\r\n                    return null;\r\n                })\r\n                const mapOfFilterRegData = {\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\r\n                }\r\n                this.props.getPreviewTemplate(masterData, userInfo, editId,\r\n                    data, this.state.selectedRecord, childColumnList,\r\n                    comboComponents, withoutCombocomponent, true, false,\r\n                    mapOfFilterRegData, false, \"create\", this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename)\r\n            } else {\r\n                toast.info(\"Configure the preregister template for this registrationtype\")\r\n            }\r\n        } else {\r\n            toast.info(\"select the approved design template\")\r\n        }\r\n    }\r\n    comboChild = (data, columnList, childColumnList, slice) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n                    let childList = []\r\n                    columnList.child.map(childData => {\r\n                        const index = data.findIndex(x => x.label === childData.label)\r\n                        if (index !== -1) {\r\n                            childList.push(data[index])\r\n                            if (slice) {\r\n                                data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                            }\r\n                        }\r\n                        return data;\r\n                    })\r\n                    childColumnList[columnList.label] = childList;\r\n                    if (childList.length > 0) {\r\n                        childList.map(y => {\r\n                            if (y.hasOwnProperty(\"child\")) {\r\n                                const val = comboChild(data, y, childColumnList, slice)\r\n                                retunObj[\"data\"] = val.data;\r\n                                retunObj[\"childColumnList\"] = val.childColumnList;\r\n                            } else {\r\n                                retunObj[\"data\"] = data;\r\n                                retunObj[\"childColumnList\"] = childColumnList;\r\n                            }\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        retunObj[\"data\"] = data;\r\n                        retunObj[\"childColumnList\"] = childColumnList;\r\n                    }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take\r\n        });\r\n    };\r\n\r\n    handleSubSamplePageChange = e => {\r\n        this.setState({\r\n            subsampleskip: e.skip,\r\n            subsampletake: e.take\r\n        });\r\n    };\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterChange = (event, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSample: this.props.Login.masterData.selectedSample,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab\r\n            }\r\n            this.props.getSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    onSubSampleTabChange = (tabProps) => {\r\n        const activeSubSampleTab = tabProps.screenName;\r\n        if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSubSample: this.props.Login.masterData.selectedSubSample,\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSubSampleTab,\r\n                activeSubSampleTab,\r\n                subSampleCommentDataState: this.state.subSampleCommentDataState,\r\n                subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\r\n            }\r\n            this.props.getSubSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    ontestTabChange = (tabProps) => {\r\n        const activeTestTab = tabProps.screenName;\r\n        if (activeTestTab !== this.props.Login.activeTestTab) {\r\n            if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedTest: this.props.Login.masterData.selectedTest,\r\n                    ntransactiontestcode: this.props.Login.masterData.selectedTest ?\r\n                        String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    npreregno: this.props.Login.masterData.selectedSample ?\r\n                        this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                }\r\n                this.props.getTestChildTabDetailRegistration(inputData, true)\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n            }\r\n        }\r\n    }\r\n\r\n    onDropComponentFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedFile = this.state.selectedFile || {};\r\n        selectedFile[fieldName] = onDropAttachFileList(selectedFile[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedFile, actionType: \"new\" });\r\n    }\r\n\r\n    handleFilterDateChange = (dateName, dateValue) => {\r\n        const { selectedFilter } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedFilter[dateName] = dateValue;\r\n        this.setState({ selectedFilter });\r\n    }\r\n\r\n\r\n    onUpdateRegistrationConfirm = () => {\r\n        this.showAlert();\r\n        this.onUpdateRegistration(this.props.Login.regEditParam.saveType,\r\n            this.props.Login.regEditParam.formRef,\r\n            this.props.Login.regEditParam.operation, 2)\r\n    }\r\n\r\n    confirmAlert = () => {\r\n        if (this.state.showConfirmAlert) {\r\n            if (this.props.Login.regDateEditConfirmMessage) {\r\n                this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n                    this.props.Login.regDateEditConfirmMessage,\r\n                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                    () => this.onUpdateRegistrationConfirm(),\r\n                    undefined,\r\n                    () => this.showAlert());\r\n            }\r\n            else {\r\n                this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n                    this.props.Login.booleanFlag, \"ok\", \"Cancel\",\r\n                    () => this.insertRegistration(false), undefined, () => this.showAlert());\r\n            }\r\n        }\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    showAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlert: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    showSampleInfo() {\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n    showSample() {\r\n        let fixefScrollHeight = this.state.fixefScrollHeight\r\n        let disableSplit = false;\r\n        if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\r\n\r\n\r\n            let fixefScrollHeight = this.myRef.current.clientHeight + 20;\r\n            let disableSplit = true;\r\n        }\r\n        this.setState({\r\n            showSample: true, showSubSample: false,\r\n            showTest: false,\r\n            fixefScrollHeight: fixefScrollHeight,\r\n            disableSplit: disableSplit\r\n        })\r\n    }\r\n\r\n    showTest() {\r\n        let fixefScrollHeight = this.state.fixefScrollHeight\r\n        let disableSplit = false;\r\n        if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\r\n\r\n\r\n            let fixefScrollHeight = this.myRef.current.clientHeight + 20;\r\n            let disableSplit = true;\r\n        }\r\n\r\n        this.setState({\r\n            showSample: false, showSubSample: false,\r\n            showTest: true,\r\n            fixefScrollHeight: fixefScrollHeight,\r\n            disableSplit: disableSplit\r\n        })\r\n\r\n        // setTimeout(()=>{\r\n        //     this.setState({\r\n        //         disableSplit :false\r\n        //     })  \r\n        // },100)\r\n    }\r\n\r\n    showSubSample() {\r\n        this.setState({\r\n            showSample: false, showTest: false,\r\n            showSubSample: !this.state.showSubSample\r\n        })\r\n    }\r\n\r\n    showTestDetails() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showSample: !this.state.showSample, showTest: !this.state.showTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    AddFile = () => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue;\r\n        let booleanmanuf = true;\r\n        if (RealRegTypeValue === RegistrationType.PLASMA_POOL) {\r\n            booleanmanuf = selectedRecord[\"nmanufcode\"] > 0 && selectedRecord[\"nmanufcode\"] !== undefined ? true : false\r\n        }\r\n        if (booleanmanuf) {\r\n            if (this.state.selectedRecord.nallottedspeccode !== undefined) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadFile: true,\r\n                        ChildscreenName: \"File\", childoperation: \"Import\",\r\n                        parentPopUpSize: \"lg\", selectedFile: undefined\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMANUFACTURER\" }));\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if ((name !== \"nnoofcontainer\") && (value === 0 || value === 0.0)) {\r\n            selectComponent[name] = '';\r\n            this.setState({ selectComponent });\r\n        } else {\r\n            selectComponent[name] = value;\r\n            this.setState({ selectComponent });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onSampleTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nsampletypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getSampleTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    ConfirmComponent = (props) => {\r\n        this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to Override the Existing Components ?\",\r\n            \"ok\", \"cancel\", () => this.getComponentfromJava(props));\r\n    }\r\n\r\n    onRegTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nregtypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getRegTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n    acceptRegistration = (registerId, skip, take) => {\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample\r\n                && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n\r\n        // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\r\n        let acceptList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        if (acceptList && acceptList.length > 0) {\r\n            if (acceptList.every(this.checkPreregisterAndQuarentine)) {\r\n                if (this.props.Login.masterData.selectedTest.length > 0) {\r\n                    if (checkTestPresent(this.props.Login.masterData.RegistrationGetTest, acceptList)) {\r\n                        let Map = {};\r\n                        Map[\"fromdate\"] = \"\";\r\n                        Map[\"todate\"] = \"\";\r\n                        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                        Map[\"nfilterstatus\"] = -1;\r\n                        Map[\"npreregno\"] = acceptList &&\r\n                            acceptList.map(sample => sample.npreregno).join(\",\");\r\n                        // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\r\n                        //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\r\n                        Map[\"registrationsample\"] = this.props.Login.masterData.RegistrationGetSubSample;\r\n                        Map[\"registration\"] = this.props.Login.masterData.selectedSample;\r\n                        Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                        Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\r\n                        Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");;\r\n                        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                        Map[\"nflag\"] = 2;\r\n                        Map[\"ntype\"] = 3;\r\n                        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                        Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                       \r\n                            Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue\r\n                            && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                            Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                        Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                            && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                        Map[\"checkBoxOperation\"] = 3\r\n                        Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                        let inputParam = {\r\n                            inputData: Map,\r\n                            postParamList: this.postParamList,\r\n                            action: 'accept'\r\n                        }\r\n                        this.confirmMessage.confirm(\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_ACCEPTREGISTRATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                            () => this.acceptRegistrationConfirm(inputParam, registerId));\r\n                    } else {\r\n                        let Map = {};\r\n                        Map[\"fromdate\"] = \"\";\r\n                        Map[\"todate\"] = \"\";\r\n                        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                        Map[\"nfilterstatus\"] = -1;\r\n                        Map[\"npreregno\"] = acceptList &&\r\n                            acceptList.map(sample => sample.npreregno).join(\",\");\r\n                        // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\r\n                        //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\r\n                        Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                        Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                        Map[\"nflag\"] = 2;\r\n                        Map[\"ntype\"] = 1;\r\n                        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                        Map[\"activeSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                        Map[\"activeSubSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                     \r\n                            Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue\r\n                            && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                            Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                        Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                            && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                        Map[\"checkBoxOperation\"] = 3\r\n                        Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                        let inputParam = {\r\n                            inputData: Map,\r\n                            postParamList: this.postParamList,\r\n                            action: 'accept'\r\n                        }\r\n                        this.confirmMessage.confirm(\"Confirmation\", \"Confirmation!\", \"Samples With atleast One Preregister Test Will Only Accept.Do You Want Accept?\",\r\n                            \"OK\", \"Cancel\", () => this.acceptRegistrationConfirm(inputParam, registerId));\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDTESTTOREGISTERSAMPLES\" }));\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGQUARANTINESAMPLES\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGQUARANTINESAMPLES\" }));\r\n        }\r\n    }\r\n\r\n    acceptRegistrationConfirm = (inputParam, registerId) => {\r\n        if (showEsign(this.props.Login.userRoleControlRights,\r\n            this.props.Login.userInfo.nformcode, registerId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    parentPopUpSize: 'lg',\r\n                    screenName: this.props.Login.screenName,\r\n                    operation: 'accept'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.acceptRegistration(inputParam, this.props.Login.masterData)\r\n        }\r\n\r\n    }\r\n\r\n    selectQuarantine = (quarantineId, skip, take) => {\r\n        let sampleList = this.props.Login.masterData.searchedSample || (this.props.Login.masterData.RegistrationGetSample ? [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take) : []);\r\n        let quarentineList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (quarentineList && quarentineList.length > 0) {\r\n            if (quarentineList.every(this.checkPreregisterRecordQuarantine)) {\r\n\r\n                // let ntransactionstatus = this.props.Login.masterData.selectedSample &&\r\n                //     this.props.Login.masterData.selectedSample.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\r\n                //if (ntransactionstatus === transactionStatus.PREREGISTER) {\r\n                let Map = {};\r\n                Map[\"fromdate\"] = \"\";\r\n                Map[\"todate\"] = \"\";\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = -1;\r\n                Map[\"npreregno\"] = quarentineList && quarentineList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"selectedSample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 1;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n               \r\n                    Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue\r\n                    && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                    Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3\r\n                Map[\"checkBoxOperation\"] = 3\r\n                Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                Map[\"ntransactionstatus\"] = quarentineList &&\r\n                    quarentineList.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\r\n                //Map[\"ninsertpreregno\"] = quarantineSample.quarantineSample.npreregno;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'quarantine'\r\n                }\r\n                //console.log(\"inputParam, quarantine:\", inputParam);\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, quarantineId)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'quarantine'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.preregRecordToQuarantine(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLES\" }))\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLES\" }))\r\n        }\r\n\r\n    }\r\n\r\n    checkPreregisterAndQuarentine(sample) {\r\n        return (sample.ntransactionstatus === transactionStatus.PREREGISTER || sample.ntransactionstatus === transactionStatus.QUARANTINE)\r\n    }\r\n\r\n    checkPreregisterRecordQuarantine(sample) {\r\n        return (sample.ntransactionstatus === transactionStatus.PREREGISTER)\r\n    }\r\n\r\n    onRegSubTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = parseInt(event.value);\r\n            Map[\"nneedtemplatebasedflow\"] = event.item.nneedtemplatebasedflow;\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n    onApprovalConfigVersionChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = this.props.Login.masterData.RegSubTypeValue.nregsubtypecode;\r\n          //  Map[\"nneedtemplatebasedflow\"] = event.item.nneedtemplatebasedflow;\r\n            Map[\"napproveconfversioncode\"] = event.value;\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.onApprovalConfigVersionChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n\r\n    onDesignTemplateChange = (event, fieldName, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        // if (comboData !== null) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n        // }\r\n    }\r\n\r\n    PrinterChange = (comboData, fieldName) => {\r\n        const selectedPrinterData = this.state.selectedPrinterData || {};\r\n        selectedPrinterData[fieldName] = comboData;\r\n        this.setState({ selectedPrinterData });\r\n    }\r\n\r\n\r\n\r\n    closeChildModal = () => {\r\n        let loadRegSubSample = this.props.Login.loadRegSubSample;\r\n        let loadFile = this.props.Login.loadFile;\r\n        let showSaveContinue = this.props.Login.showSaveContinue;\r\n        let screenName = this.props.Login.screenName;\r\n        let loadChildTest = this.props.Login.loadChildTest;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (this.props.Login.loadFile) {\r\n            loadFile = false;\r\n            screenName = this.props.Login.PopUpLabel\r\n        } else if (this.props.Login.loadChildTest) {\r\n            loadChildTest = false;\r\n            openModal = false;\r\n            selectedRecord = {}\r\n        }\r\n        else if (this.props.Login.loadRegSubSample) {\r\n            loadRegSubSample = false;\r\n            openModal = false;\r\n            selectedRecord = {}\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadRegSubSample, screenName, showSaveContinue,\r\n                loadFile, loadChildTest,\r\n                openModal,\r\n                parentPopUpSize: \"xl\", selectedRecord\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let loadPreregister = this.props.Login.loadPreregister;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let parentPopUpSize = this.props.Login.pare\r\n        let screenName = this.props.Login.screenName;\r\n        let loadPrinter = this.props.Login.loadPrinter;\r\n        let openPortal = this.props.Login.openPortal;\r\n        let Component = this.props.Login.Component;\r\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"accept\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"quarantine\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal = false\r\n                loadPreregister = false;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { loadEsign, openModal, openChildModal, loadPreregister }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord[\"esigncomments\"] = \"\";\r\n                selectedRecord[\"esignpassword\"] = \"\";\r\n\r\n                if (loadPreregister) {\r\n                    parentPopUpSize = 'xl';\r\n                    openPortal = true;\r\n                    openModal = false;\r\n                }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign, parentPopUpSize, openPortal, openModal\r\n                        , selectedRecord\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            loadPrinter = false;\r\n            loadPreregister = false;\r\n            selectedRecord = {};\r\n            openPortal = false;\r\n            subSampleDataGridList = []\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal, loadPreregister, selectedRecord,\r\n                    screenName, insertSourcePreregno: undefined,\r\n                    loadPrinter, openPortal,\r\n                    Component, subSampleDataGridList\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            this.onUpdateRegistration(saveType, formRef, operation);\r\n        }\r\n    }\r\n\r\n\r\n    onSavePrinterClick = () => {\r\n        let insertlist = [];\r\n        //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\r\n        const inputParam = {\r\n            classUrl: 'barcode',\r\n            methodUrl: 'Barcode',\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                npreregno: this.props.Login.insertPrinterPreregno,\r\n                sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\r\n                insertlist,\r\n                npreregno1: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.props.Login.ncontrolcode\r\n            },\r\n            operation: 'printer',\r\n            // dataState:this.state.sourceDataState,\r\n            // activeSampleTab:\"IDS_SOURCE\",\r\n            action: 'printer'\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: 'printer'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveFileClick = (saveType, formRef) => {\r\n        const selectedFile = this.state.selectedFile;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedFile.sfilename;\r\n        const formData = new FormData();\r\n        // if(nattachmenttypecode === attachmentType.FTP) {\r\n        if (acceptedFiles && acceptedFiles.length > 0) {\r\n            acceptedFiles.forEach((file, index) => {\r\n                formData.append(\"uploadedFile\" + index, file);\r\n            });\r\n            formData.append(\"filecount\", acceptedFiles.length);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEFILETOSUBMIT\" }));\r\n        }\r\n\r\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"nstudyplan\", JSON.stringify(selectedRecord.nallottedspeccode.value));\r\n        formData.append(\"testrequired\", JSON.stringify(selectedRecord.ntransactionstatus === 3 ? true : false));\r\n        formData.append(\"ntemplatemanipulationcode\", JSON.stringify(selectedRecord.ntemplatemanipulationcode));\r\n        formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.RealRegTypeValue.nregtypecode));\r\n        formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode));\r\n        this.props.ImportFile(formData, this.confirmMessage, this.props.Login);\r\n    }\r\n\r\n\r\n    sampleInfoDataStateChange = (event) => {\r\n        this.setState({\r\n            sampleGridDataState: event.dataState\r\n        });\r\n        this.changePropertyView(1)\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_SOURCE\":\r\n                this.setState({\r\n                    sourceDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sourceDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    subSampledataStateChange = (event) => {\r\n        switch (this.props.Login.activeSubSampleTab) {\r\n            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                this.setState({\r\n                    subSampleCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                this.setState({\r\n                    subSampleAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    testdataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    testStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n\r\n    sampleTabDetail = () => {\r\n        let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n\r\n\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\r\n        let { skip, take } = this.state\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        tabMap.set(\"IDS_ATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.selectedSample}\r\n            masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSampleAttachment\"}\r\n            editName={\"EditSampleAttachment\"}\r\n            deleteName={\"DeleteSampleAttachment\"}\r\n            viewName={\"ViewSampleAttachment\"}\r\n            methodUrl={\"SampleAttachment\"}\r\n            userInfo={this.props.Login.userInfo}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleAttachment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLE\"\r\n            displayName=\"sarno\"\r\n        />)\r\n        tabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLES\"\r\n            displayName=\"sarno\"\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n    sampleComments = () => {\r\n        let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n\r\n\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\r\n        let { skip, take } = this.state\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        return <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLES\"\r\n            displayName=\"sarno\"\r\n        />\r\n    }\r\n\r\n    subsampleTabDetail = () => {\r\n        const ntransactionsamplecode = this.props.Login.masterData.selectedSubSample &&\r\n            this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") ;\r\n            console.log(\"ntransactionsamplecode\",ntransactionsamplecode)\r\n        const tabMap = new Map();\r\n        let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\r\n        let { subsampleskip, subsampletake } = this.state\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n\r\n        tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.selectedSubSample}\r\n            masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSubSampleAttachment\"}\r\n            editName={\"EditSubSampleAttachment\"}\r\n            deleteName={\"DeleteSubSampleAttachment\"}\r\n            viewName={\"ViewSubSampleAttachment\"}\r\n            methodUrl={\"SubSampleAttachment\"}\r\n            userInfo={this.props.Login.userInfo}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleAttachment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RegistrationGetSubSample || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SUBSAMPLE\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n        tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSubSampleComment\"}\r\n            editName={\"EditSubSampleComment\"}\r\n            deleteName={\"DeleteSubSampleComment\"}\r\n            methodUrl={\"SubSampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSubSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nsamplecommentcode\"}\r\n            dataState={this.state.subSampleCommentDataState}\r\n            dataStateChange={this.subSampledataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleComment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SUBSAMPLES\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    subsampleComments = () => {\r\n        const ntransactionsamplecode = this.props.Login.masterData.selectedSubSample &&\r\n            this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") ;\r\n        const tabMap = new Map();\r\n        let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\r\n        let { subsampleskip, subsampletake } = this.state\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n        return <Comments\r\n            screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSubSampleComment\"}\r\n            editName={\"EditSubSampleComment\"}\r\n            deleteName={\"DeleteSubSampleComment\"}\r\n            methodUrl={\"SubSampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSubSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nsamplecommentcode\"}\r\n            dataState={this.state.subSampleCommentDataState}\r\n            dataStateChange={this.subSampledataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleComment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SUBSAMPLES\"\r\n            displayName=\"ssamplearno\"\r\n        />\r\n    }\r\n\r\n    testTabDetail = () => {\r\n\r\n        const testTabMap = new Map();\r\n        let testList = this.props.Login.masterData.RegistrationGetTest || [];\r\n        let { testskip, testtake } = this.state\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n        // const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\r\n        let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        testTabMap.set(\"IDS_PARAMETERRESULTS\", <RegistrationResultTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            screenName=\"IDS_PARAMETERRESULTS\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n        />)\r\n        testTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"selectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            dataState={this.state.testAttachmentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            userInfo={this.props.Login.userInfo}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: this.props.Login.masterData.selectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedTest\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus=\"IDS_SELECTTESTTOADDCOMMENTS\"\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        return testTabMap;\r\n    }\r\n\r\n    getCommentsCombo = (event) => {\r\n\r\n        if (this.props.Login.selectedTest && this.props.Login.selectedTest.length > 0) {\r\n            this.props.getCommentsCombo(...event);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOADDCOMMENTS\" }))\r\n        }\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_PARAMETERRESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    testDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n        if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleComments(saveParam, acceptList);\r\n        }\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let testList = [];\r\n            if (this.props.Login.masterData.searchedTest !== undefined) {\r\n                testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n            } else {\r\n                testList = this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, acceptList);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        }\r\n    }\r\n\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        let acceptList = []\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedTest !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n        }\r\n        if (this.props.Login.operation === \"update\") {\r\n            acceptList.push(selectedRecord);\r\n        }\r\n        else {\r\n            acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        }\r\n\r\n\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam, acceptList);\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestAttachment(saveParam, this.props.Login.masterData.selectedTest);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.selectedSubSample);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n        }\r\n    }\r\n\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode] || \"-\", \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n        });\r\n        return temparray;\r\n    }\r\n\r\n\r\n    cancelSubSampleRecord = (controlcode, skip, take) => {\r\n        let testList = this.props.Login.masterData.searchedSubSample ||\r\n            (this.props.Login.masterData.RegistrationGetSubSample ?\r\n                [...this.props.Login.masterData.RegistrationGetSubSample].splice(skip, skip + take) : []);\r\n      \r\n                let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n        if (acceptList && acceptList.length > 0) {\r\n            // console.log(\"Success:\", dataitem);\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\r\n                let Map = {};\r\n                Map['npreregno'] = acceptList.map(x => x.npreregno).join(\",\");\r\n                Map['ntransactiontestcode'] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");\r\n                // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\r\n                // Map[\"ntransactionsamplecode\"] = acceptList.map(x => x.ntransactionsamplecode).join(\",\");\r\n                //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                // Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"npreregno\"] = acceptList &&\r\n                    acceptList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = acceptList &&\r\n                    acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"selectedTest\"] = this.props.Login.masterData.RegistrationGetTest;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelSample'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelSubSampleAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value =[]\r\n                this.props.Login.transactionValidation[controlcode] &&\r\n                   this.props.Login.transactionValidation[controlcode].map(sample =>{\r\n                       if(sample.nregsubtypecode===this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode){\r\n                           value.push(this.props.intl.formatMessage({ id: sample.stransdisplaystatus }))\r\n                       }\r\n                   })\r\n                      value=value.map(sample=>sample).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTTEST\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCANCELREJECT\" }));\r\n        }\r\n    }\r\n\r\n    cancelRecord = (controlcode, skip, take) => {\r\n        let testList = this.props.Login.masterData.searchedTest ||\r\n            (this.props.Login.masterData.RegistrationGetTest ?\r\n                [...this.props.Login.masterData.RegistrationGetTest].splice(skip, skip + take) : []);\r\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptList && acceptList.length > 0) {\r\n            // console.log(\"Success:\", dataitem);\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\r\n                let Map = {};\r\n                Map['ninsertpreregno'] = acceptList.map(x => x.npreregno).join(\",\");\r\n                // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\r\n                Map[\"ntransactiontestcode\"] = acceptList.map(x => x.ntransactiontestcode).join(\",\");\r\n                //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"npreregno\"] = acceptList &&\r\n                    acceptList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = acceptList &&\r\n                    acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelTest'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelTestAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value  =[]\r\n                this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>{\r\n                        if(sample.nregsubtypecode===this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode){\r\n                            value.push(this.props.intl.formatMessage({ id: sample.stransdisplaystatus }))\r\n                        }})\r\n                        value=value.map(item=>item).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTTEST\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCANCELREJECT\" }));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    addSubSample = (controlcode, skip, take) => {\r\n        let Map = {};\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n\r\n        let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (addSubSampleList && addSubSampleList.length > 0) {\r\n            const findTransactionStatus = [...new Set(addSubSampleList.map(item => item.ntransactionstatus))];\r\n\r\n            if (findTransactionStatus.length === 1) {\r\n                if (findTransactionStatus[0] === transactionStatus.PREREGISTER) {\r\n                    //   const findApprovalVersion = [...new Set(addSubSampleList.map(item => item.napprovalversioncode))];\r\n                    //   if (findApprovalVersion.length === 1) {\r\n                    const findSampleSpec = [...new Set(addSubSampleList.map(item => item.nallottedspeccode))];\r\n                    const findComponentReqSpec = [...new Set(addSubSampleList.map(item => item.ncomponentrequired))];\r\n                    const findSampleSpectemplate = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\r\n                    //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                    if (findSampleSpec.length === 1)//&& findComponent.length === 1 \r\n                    {\r\n                        let data = []\r\n                        const regSubSamplewithoutCombocomponent = []\r\n                        const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                            && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n                        if (Layout !== undefined) {\r\n                            Layout.map(row => {\r\n                                return row.children.map(column => {\r\n                                    return column.children.map(component => {\r\n                                        return component.hasOwnProperty(\"children\") ?\r\n                                            component.children.map(componentrow => {\r\n                                                if (componentrow.inputtype === \"combo\") {\r\n                                                    data.push(componentrow)\r\n                                                } else {\r\n                                                    regSubSamplewithoutCombocomponent.push(componentrow)\r\n                                                }\r\n                                                return null;\r\n                                            })\r\n                                            : component.inputtype === \"combo\" ? data.push(component) :\r\n                                                regSubSamplewithoutCombocomponent.push(component)\r\n                                    })\r\n                                })\r\n\r\n                            })\r\n                            const regSubSamplecomboComponents = data\r\n                            let regchildColumnList = {};\r\n                            data.map(columnList => {\r\n                                const val = comboChild(data, columnList, regchildColumnList, true);\r\n                                data = val.data;\r\n                                regchildColumnList = val.childColumnList\r\n                                return null;\r\n                            })\r\n                            //const Map={}\r\n                            // const findSamplentemplatemanipulationcode = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\r\n                            // Map[\"ntemplatemanipulationcode\"] = findSamplentemplatemanipulationcode[0];\r\n                            Map[\"nallottedspeccode\"] = findSampleSpec[0];\r\n                            Map[\"ntemplatemanipulationcode\"] = findSampleSpectemplate[0];\r\n                            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                            Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                            Map[\"npreregno\"] = addSubSampleList &&\r\n                                addSubSampleList.map(sample => sample.npreregno).join(\",\");\r\n                            Map[\"registrationsample\"] = addSubSampleList;\r\n\r\n                            this.props.addsubSampleRegistration(this.props.Login.masterData,\r\n                                this.props.Login.userInfo, data, this.state.selectedRecord,\r\n                                regchildColumnList, regSubSamplecomboComponents,\r\n                                regSubSamplewithoutCombocomponent,\r\n                                Map, controlcode, findComponentReqSpec[0] === 3 ? true : false)\r\n                        } else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASECONFIGURETHESUBSAMPLETEMPLATE\" }));\r\n                        }\r\n\r\n                    } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                    }\r\n                    // } else {\r\n                    //    toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                    // }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLETOADDSUBSAMPLE\" }));\r\n                }\r\n            }\r\n\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOSUBSAMPLE\" }));\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        let activeTabIndex = this.props.Login.activeTabIndex\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        if (this.props.Login.columnList !== previousProps.Login.columnList) {\r\n\r\n            this.setState({\r\n                columnList: this.props.Login.columnList,\r\n                childColumnList: this.props.Login.childColumnList,\r\n                withoutCombocomponent: this.props.Login.withoutCombocomponent,\r\n                comboComponents: this.props.Login.comboComponents\r\n            });\r\n\r\n        }\r\n\r\n        if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\r\n            this.setState({\r\n                regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\r\n                regchildSubSampleColumnList: this.props.Login.regchildSubSampleColumnList,\r\n                regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\r\n                regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\r\n            });\r\n\r\n        }\r\n\r\n\r\n        if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\r\n            this.setState({ showSaveContinue: this.props.Login.showSaveContinue });\r\n\r\n        }\r\n        if (this.props.Login !== previousProps.Login) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\r\n            this.setState({ selectedPrinterData: this.props.Login.selectedPrinterData });\r\n        }\r\n        else if (this.props.Login.loadFile !== previousProps.Login.loadFile && (this.props.Login.loadFile === false)) {\r\n            this.setState({ selectedFile: undefined })\r\n        }\r\n        else if (this.props.Login.selectedFilter !== previousProps.Login.selectedFilter) {\r\n            this.setState({ selectedFilter: this.props.Login.selectedFilter });\r\n        }\r\n        if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\r\n            this.setState({ popUptestDataState: this.props.Login.popUptestDataState });\r\n        }\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n            const cancelId = controlMap.has(\"CancelTest\") ? controlMap.get(\"CancelTest\").ncontrolcode : -1;\r\n            const preRegisterId = controlMap.has(\"AddPreregister\") ? controlMap.get(\"AddPreregister\").ncontrolcode : -1;\r\n            const registerId = controlMap.has(\"RegisterAccept\") ? controlMap.get(\"RegisterAccept\").ncontrolcode : -1;\r\n            const editSampleId = controlMap.has(\"EditSample\") ? controlMap.get(\"EditSample\").ncontrolcode : -1;\r\n            const quarantineId = controlMap.has(\"RegisterQuarantine\") ? controlMap.get(\"RegisterQuarantine\").ncontrolcode : -1;\r\n            const addTestId = controlMap.has(\"AddNewTest\") ? controlMap.get(\"AddNewTest\").ncontrolcode : -1;\r\n            const printBarcodeId = controlMap.has(\"PrintBarcode\") ? controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\r\n            const cancelSampleId = controlMap.has(\"CancelReject\") ? controlMap.get(\"CancelReject\").ncontrolcode : -1;\r\n            const addSubSampleId = controlMap.has(\"AddSubSample\") ? controlMap.get(\"AddSubSample\").ncontrolcode : -1;\r\n            const editSubSampleId = controlMap.has(\"EditSubSample\") ? controlMap.get(\"EditSubSample\").ncontrolcode : -1;\r\n            const cancelSubSampleId = controlMap.has(\"CancelSubSample\") ? controlMap.get(\"CancelSubSample\").ncontrolcode : -1;\r\n\r\n            this.setState({\r\n                userRoleControlRights, controlMap, cancelId,\r\n                preRegisterId, registerId, editSampleId, quarantineId, addTestId, printBarcodeId,\r\n                cancelSampleId, addSubSampleId, editSubSampleId, cancelSubSampleId\r\n            });\r\n\r\n        }\r\n        let activeTabIndex = this.state.activeTabIndex || undefined;\r\n        let activeTabId = this.state.activeTabId || undefined;\r\n\r\n\r\n\r\n        if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex || this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n\r\n            let { skip, take, testskip, testtake, subsampleskip, subsampletake, testCommentDataState,\r\n                resultDataState, sampleGridDataState, popUptestDataState, DynamicSampleColumns, DynamicSubSampleColumns,\r\n                DynamicTestColumns, DynamicGridItem, DynamicGridMoreField, SingleItem, testMoreField, testListColumns,\r\n                SubSampleDynamicGridItem, SubSampleDynamicGridMoreField, SubSampleSingleItem, sampleSearchField, subsampleSearchField,\r\n                testSearchField, testAttachmentDataState, sampleCommentDataState,\r\n                 sampledateconstraints, subsampledateconstraints, activeTabIndex, \r\n                 activeTabId, sampleCombinationUnique, subsampleCombinationUnique } = this.state\r\n\r\n            if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\r\n                activeTabIndex = this.props.Login.activeTabIndex;\r\n                activeTabId = this.props.Login.activeTabId;\r\n            }\r\n\r\n            if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n                const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n                DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\r\n                DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n                DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [] \r\n                DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n                DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n                SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : []; \r\n                SubSampleDynamicGridItem = dynamicColumn.subsamplegriditem ? dynamicColumn.subsamplegriditem : [];\r\n                SubSampleDynamicGridMoreField = dynamicColumn.subsamplegridmoreitem ? dynamicColumn.subsamplegridmoreitem : [];\r\n                SubSampleSingleItem = dynamicColumn.subsampledisplayfields ? dynamicColumn.subsampledisplayfields : []; \r\n                testMoreField = dynamicColumn.testListFields.testlistmoreitems ? dynamicColumn.testListFields.testlistmoreitems: []; \r\n                testListColumns = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : []; \r\n                sampleSearchField = dynamicColumn.samplesearchfields ? dynamicColumn.samplesearchfields : [];\r\n                subsampleSearchField = dynamicColumn.subsamplesearchfields ? dynamicColumn.subsamplesearchfields : [];\r\n                testSearchField = dynamicColumn.testListFields.testsearchfields ? dynamicColumn.testListFields.testsearchfields : [];  \r\n                sampledateconstraints = dynamicColumn.sampledateconstraints || [];\r\n                subsampledateconstraints = dynamicColumn.subsampledateconstraints || []; \r\n                sampleCombinationUnique = dynamicColumn.samplecombinationunique || [];\r\n                subsampleCombinationUnique = dynamicColumn.subsamplecombinationunique || []; \r\n                // specBasedComponent = true;\r\n            }\r\n            let showSample = this.props.Login.showSample === this.state.showTest || this.state.showSample\r\n            let showTest = showSample ? false : true\r\n            let stateSampleType = this.state.stateSampleType\r\n            let stateRegistrationType = this.state.stateRegistrationType\r\n            let stateRegistrationSubType = this.state.stateRegistrationSubType\r\n            let stateFilterStatus = this.state.stateFilterStatus\r\n            let stateDynamicDesign = this.state.stateDynamicDesign\r\n            let stateApprovalConfigVersion=this.state.stateApprovalConfigVersion\r\n            if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\r\n\r\n                const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\",\r\n                    \"ssampletypename\", \"nsorter\", \"ascending\", false);\r\n                stateSampleType = sampleTypeMap.get(\"OptionList\")\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.RegistrationType !== previousProps.Login.masterData.RegistrationType) {\r\n\r\n                const registrationTypeMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\",\r\n                    \"sregtypename\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateRegistrationType = registrationTypeMap.get(\"OptionList\")\r\n            }\r\n\r\n            if (this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n                const registrationSubTypeMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\",\r\n                    \"sregsubtypename\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateRegistrationSubType = registrationSubTypeMap.get(\"OptionList\")\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.FilterStatus !== previousProps.Login.masterData.FilterStatus) {\r\n\r\n\r\n                const filterStatusMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\",\r\n                    \"stransdisplaystatus\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateFilterStatus = filterStatusMap.get(\"OptionList\")\r\n            }\r\n            if (this.props.Login.masterData.ApprovalConfigVersion !== previousProps.Login.masterData.ApprovalConfigVersion) {\r\n                const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], \"napproveconfversioncode\",\r\n                    \"sversionname\", undefined, undefined, false);\r\n\r\n                stateApprovalConfigVersion = DesignTemplateMappingMap.get(\"OptionList\")\r\n            }\r\n\r\n            if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\r\n\r\n\r\n                const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\",\r\n                    \"sregtemplatename\", undefined, undefined, false);\r\n\r\n                stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\")\r\n            }\r\n\r\n\r\n            // const stateSampleType = sampleTypeMap.get(\"OptionList\");\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            subsampleskip = this.props.Login.subsampleskip === undefined ? subsampleskip : this.props.Login.subsampleskip\r\n            subsampletake = this.props.Login.subsampletake || subsampletake\r\n\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n            if (this.props.Login.testAttachmentDataState && this.props.Login.testAttachmentDataState !== previousProps.Login.testAttachmentDataState) {\r\n                testAttachmentDataState = this.props.Login.testAttachmentDataState;\r\n            }\r\n            if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\r\n                sampleGridDataState = this.props.Login.sampleGridDataState;\r\n            }\r\n            if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\r\n                popUptestDataState = this.props.Login.popUptestDataState;\r\n            }\r\n\r\n            const testGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeTestTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                npreregno: this.props.Login.masterData.selectedSample &&\r\n                    this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                //searchTestRef: this.searchTestRef,\r\n                // testskip: testskip,\r\n                //subsampleskip: subsampleskip,\r\n                // resultDataState: resultDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                //activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined\r\n            }\r\n            const testChildGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeTestTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample &&\r\n                    this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                // resultDataState: resultDataState,\r\n                // testCommentDataState: testCommentDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined,\r\n\r\n            }\r\n\r\n            const subSampleGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeTestTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                // testskip: testskip,\r\n                // subsampleskip: subsampleskip,\r\n                // searchTestRef: this.searchTestRef,\r\n                //resultDataState: resultDataState,\r\n                // testCommentDataState: testCommentDataState,\r\n                //sampleGridDataState: sampleGridDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample\r\n            }\r\n\r\n\r\n            const filterSampleParam = {\r\n                inputListName: \"RegistrationGetSample\",\r\n                selectedObject: \"selectedSample\",\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"registration/getRegistrationSubSample\",\r\n                //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n                fecthInputObject: {\r\n                    //nflag: 2,\r\n                    // ntype: 2,\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                    activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                    nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                    nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                    checkBoxOperation: 3,\r\n\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: sampleSearchField,\r\n                changeList: [\r\n                    \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n                    \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\",\r\n                    \"selectedTest\", \"RegistrationParameter\"\r\n                ]\r\n            };\r\n\r\n            const filterSubSampleParam = {\r\n                inputListName: \"RegistrationGetSubSample\",\r\n                selectedObject: \"selectedSubSample\",\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"registration/getRegistrationTest\",\r\n                //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n                fecthInputObject: {\r\n                    //nflag: 2,\r\n                    // ntype: 2,\r\n                    masterData: this.props.Login.masterData,\r\n                    //  ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                    activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                    nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                    nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                    checkBoxOperation: 3,\r\n                    npreregno: this.props.Login.masterData.selectedSample &&\r\n                        this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\")\r\n\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: subsampleSearchField,\r\n                changeList: [\r\n                    \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n                    \"RegistrationTestComment\", \"RegistrationAttachment\",\r\n                    \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"\r\n                ]\r\n            };\r\n\r\n            const filterTestParam = {\r\n                inputListName: \"RegistrationGetTest\",\r\n                selectedObject: \"selectedTest\",\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: this.getActiveTestURL(),\r\n                fecthInputObject: {\r\n                    ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                    nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                    nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                    activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: testSearchField,\r\n                changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\r\n\r\n            }\r\n\r\n            // let postParamList = [\r\n            //     {\r\n            //         filteredListName: \"searchedSample\",\r\n            //         clearFilter: \"no\",\r\n            //         searchRef: this.searchSampleRef,\r\n            //         primaryKeyField: \"npreregno\",\r\n            //         fetchUrl: \"registration/getRegistrationSubSample\",\r\n            //         fecthInputObject: subSampleGetParam,\r\n            //        // childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n            //         selectedObject: \"selectedSample\",\r\n            //         inputListName: \"AP_SAMPLE\",\r\n            //         updatedListname: \"selectedSample\",\r\n            //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n            //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n            //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            //     }\r\n            //     , {\r\n            //         filteredListName: \"searchedTest\",\r\n            //         updatedListname: \"selectedTest\",\r\n            //         clearFilter: \"no\",\r\n            //         searchRef: this.searchTestRef,\r\n            //         primaryKeyField: \"ntransactiontestcode\",\r\n            //         fetchUrl: \"approval/getApprovalTest\",\r\n            //         fecthInputObject: testGetParam,\r\n            //         selectedObject: \"selectedTest\",\r\n            //         inputListName: \"RegistrationGetTest\",\r\n            //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n            //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n            //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            //     }\r\n            // ];\r\n\r\n\r\n            const editRegParam = {\r\n                nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                // ncontrolCode: this.state.editSampleId,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n\r\n\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                checkBoxOperation: 3\r\n            }\r\n\r\n            const editSubSampleRegParam = {\r\n                nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                //ncontrolCode: this.state.editSampleId,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n            }\r\n\r\n            const addTestParam = {\r\n                selectedSample: this.props.Login.masterData.selectedSample,\r\n                selectedSubSample: this.props.Login.masterData.selectedSubSample,\r\n                // skip: skip, take: (skip + take),\r\n                userinfo: this.props.Login.userInfo,\r\n                sampleList: this.props.Login.masterData.RegistrationGetSample,\r\n                snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\r\n                    [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n            };\r\n\r\n            const breadCrumbobj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo)\r\n          //  if (this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedtemplatebasedflow) {\r\n                this.breadCrumbData = [\r\n                    {\r\n                        \"label\": \"IDS_FROM\",\r\n                        \"value\": breadCrumbobj.breadCrumbFrom\r\n                    }, {\r\n                        \"label\": \"IDS_TO\",\r\n                        \"value\": breadCrumbobj.breadCrumbto\r\n                    }, {\r\n                        \"label\": \"IDS_SAMPLETYPE\",\r\n                        \"value\": this.props.Login.masterData.RealSampleTypeValue \r\n                        && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\r\n                    }, {\r\n                        \"label\": \"IDS_REGTYPE\",\r\n                        \"value\": this.props.Login.masterData.RealRegTypeValue\r\n                         && this.props.Login.masterData.RealRegTypeValue.sregtypename\r\n                    }, {\r\n                        \"label\": \"IDS_REGSUBTYPE\",\r\n                        \"value\": this.props.Login.masterData.RealRegSubTypeValue \r\n                        && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                    },\r\n                  \r\n                    {\r\n                        \"label\": \"IDS_FILTERSTATUS\",\r\n                        \"value\": this.props.Login.masterData.RealFilterStatusValue \r\n                        && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_APPROVALCONFIGVERSION\",\r\n                        \"value\": this.props.Login.masterData.RealApprovalConfigVersionValue \r\n                        && this.props.Login.masterData.RealApprovalConfigVersionValue.sversionname\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_DESIGNTEMPLATE\",\r\n                        \"value\": this.props.Login.masterData.RealDesignTemplateMappingValue \r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.sregtemplatename\r\n                    },\r\n                ]\r\n            // } else {\r\n            //     this.breadCrumbData = [\r\n            //         {\r\n            //             \"label\": \"IDS_FROM\",\r\n            //             \"value\": breadCrumbobj.breadCrumbFrom\r\n            //         }, {\r\n            //             \"label\": \"IDS_TO\",\r\n            //             \"value\": breadCrumbobj.breadCrumbto\r\n            //         }, {\r\n            //             \"label\": \"IDS_SAMPLETYPE\",\r\n            //             \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\r\n            //         }, {\r\n            //             \"label\": \"IDS_REGTYPE\",\r\n            //             \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\r\n            //         }, {\r\n            //             \"label\": \"IDS_REGSUBTYPE\",\r\n            //             \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            //         },\r\n            //         {\r\n            //             \"label\": \"IDS_FILTERSTATUS\",\r\n            //             \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\r\n            //         }\r\n            //     ]\r\n          //  }\r\n\r\n\r\n\r\n            this.setState({\r\n                DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns,\r\n                SingleItem, testMoreField,\r\n                DynamicGridItem, DynamicGridMoreField,\r\n                testListColumns, stateSampleType,\r\n                stateRegistrationType,\r\n                stateRegistrationSubType,\r\n                stateFilterStatus,\r\n                stateDynamicDesign,\r\n                stateApprovalConfigVersion,\r\n                popUptestDataState,\r\n                showSample, showTest, skip, take, testskip,\r\n                subsampleskip, subsampletake,\r\n                testtake, testCommentDataState, testAttachmentDataState,\r\n                resultDataState, sampleGridDataState,\r\n                SubSampleDynamicGridItem, SubSampleDynamicGridMoreField,\r\n                SubSampleSingleItem,\r\n                testGetParam, testChildGetParam, subSampleGetParam,\r\n                filterSampleParam, filterTestParam,\r\n                editRegParam, editSubSampleRegParam,\r\n                addTestParam, sampleSearchField, subsampleSearchField,\r\n                testSearchField, filterSubSampleParam, sampledateconstraints, subsampledateconstraints,\r\n                activeTabIndex, activeTabId, sampleCombinationUnique, subsampleCombinationUnique\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    handleEditDateChange = (dateName, dateValue) => {\r\n        const selectComponent = this.state.selectedRecord;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectedRecord: selectComponent });\r\n    }\r\n\r\n    onNumericInputEditChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if ((name !== \"nnoofcontainer\") && (value === 0 || value === 0.0)) {\r\n            selectedRecord[name] = '';\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[name] = value;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    cancelSampleRecords = (controlcode, skip, take) => {\r\n        let Map = {};\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n        // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\r\n        // sampleList = sampleList.splice(skip, skip + take);\r\n        let cancelRejectSamplesList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (cancelRejectSamplesList && cancelRejectSamplesList.length > 0) {\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, cancelRejectSamplesList)) {\r\n                //Map['ninsertpreregno']=dataitem.cancelSample.npreregno;\r\n                Map['ntransactionstatus'] = cancelRejectSamplesList &&\r\n                    cancelRejectSamplesList.map(transactionstatus => transactionstatus.ntransactionstatus).join(\",\");\r\n                //Map[\"ntransactiontestcode\"]=dataitem.ntransactiontestcode;\r\n                //Map[\"ninserttransactionsamplecode\"]=dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                    Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue\r\n                    && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = -1;\r\n                Map[\"npreregno\"] = cancelRejectSamplesList &&\r\n                    cancelRejectSamplesList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample &&\r\n                    this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest &&\r\n                    this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\");\r\n                Map[\"registrationsample\"] = cancelRejectSamplesList;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"transactionValidation\"] = this.props.Login.transactionValidation;\r\n                Map[\"withoutgetparameter\"] = 3\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"selectedSample\"] = sortData(this.props.Login.masterData.selectedSample, \"ascending\", \"npreregno\")\r\n                Map[\"RegistrationGetSubSample\"] = sortData(this.props.Login.masterData.RegistrationGetSubSample, \"ascending\", \"ntransactionsamplecode\")\r\n\r\n\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelSample'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelSampleAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value =[]\r\n                 this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>{\r\n                        if(sample.nregsubtypecode===this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode){\r\n                            value.push(this.props.intl.formatMessage({ id: sample.stransdisplaystatus }))\r\n                        }\r\n                    })\r\n                       value=value.map(sample=>sample).join(\"/\")\r\n                       \r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Sample\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTSAMPLE\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOCANCELREJECT\" }));\r\n        }\r\n\r\n    }\r\n\r\n    transValidation = (transactionValidation, ncontrolcode, selectedSample) => {\r\n        //  const transList=transactionValidation?Object.keys(transactionValidation):[];\r\n        //  const index=transList.findIndex(x=>x.ncontrolcode===ncontrolcode);\r\n        //let check=true;\r\n        //  let validate=false;\r\n        let ntransstatus = [];\r\n\r\n        let translist = transactionValidation[ncontrolcode];\r\n        if (translist) {\r\n            transactionValidation[ncontrolcode] && transactionValidation[ncontrolcode].map(sam => {\r\n                return ntransstatus.push(sam.ntransactionstatus)\r\n            });\r\n            const selectdata = selectedSample ? selectedSample : [];\r\n            let check = selectdata.map(sam1 => {\r\n                return ntransstatus.includes(sam1.ntransactionstatus)\r\n            })\r\n            if (check.includes(false)) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    onUpdateSubSampleRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            ntype: 5,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ntransactionsamplecode: String(this.state.selectedRecord.ntransactionsamplecode),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            checkBoxOperation: 3,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistrationSubSample(\r\n            this.state.selectedRecord,\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone, false, this.props.Login.specBasedComponent);\r\n\r\n        inputData[\"registrationsample\"] = param.sampleRegistration\r\n        inputData[\"SubSampleDateList\"] = param.dateList\r\n        inputData['subsampledateconstraints'] = this.state.subsampledateconstraints;\r\n        inputData[\"flag\"] = flag === undefined ? 1 : flag;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n            inputData[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue\r\n            && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n        inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n        inputData[\"checkBoxOperation\"] = 3;\r\n        inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n        inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n        inputData[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"SubSampleRegistration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            action: 'editSubSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            testAttachmentDataState: this.state.testAttachmentDataState,\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\",\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.onUpdateSubSampleRegistration(inputParam,\r\n                this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignforRegistration(inputParam, \"openModal\");\r\n\r\n    }\r\n\r\n\r\n    editRegistration = (inputParam) => {\r\n        let data = [];\r\n        const withoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.registrationTemplate\r\n            && this.props.Login.masterData.registrationTemplate.jsondata\r\n        if (Layout !== undefined) {\r\n            Layout.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    data.push(componentrow)\r\n                                } else {\r\n                                    withoutCombocomponent.push(componentrow)\r\n                                }\r\n\r\n                                return null;\r\n                            })\r\n                            : component.inputtype === \"combo\" ?\r\n                                data.push(component) : withoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n            })\r\n            const comboComponents = data\r\n            let childColumnList = {};\r\n            data.map(columnList => {\r\n                const val = comboChild(data, columnList, childColumnList, true);\r\n                data = val.data;\r\n                childColumnList = val.childColumnList\r\n                return null;\r\n            })\r\n\r\n            this.props.getEditRegistrationComboService(inputParam,\r\n                data, this.state.selectedRecord, childColumnList,\r\n                comboComponents, withoutCombocomponent)\r\n        } else {\r\n            toast.info(\"Configure the preregister template for this registrationtype\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n    editSubSampleRegistration = (inputParam) => {\r\n        let data = [];\r\n        const regSubSamplewithoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.SubSampleTemplate\r\n            && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n        if (Layout !== undefined) {\r\n            Layout.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    data.push(componentrow)\r\n                                } else {\r\n                                    regSubSamplewithoutCombocomponent.push(componentrow)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            : component.inputtype === \"combo\" ?\r\n                                data.push(component) : regSubSamplewithoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n            })\r\n            const regSubSamplecomboComponents = data\r\n            let regSubSamplechildColumnList = {};\r\n            data.map(columnList => {\r\n                const val = comboChild(data, columnList, regSubSamplechildColumnList, true);\r\n                data = val.data;\r\n                regSubSamplechildColumnList = val.childColumnList\r\n                return null;\r\n            })\r\n\r\n\r\n            const sampleList = getSameRecordFromTwoArrays(inputParam.masterData.selectedSample, [inputParam.mastertoedit], \"npreregno\")\r\n\r\n            this.props.getEditSubSampleComboService(inputParam,\r\n                data, this.state.selectedRecord, regSubSamplechildColumnList,\r\n                regSubSamplecomboComponents, regSubSamplewithoutCombocomponent,\r\n                sampleList[0].ncomponentrequired === 3 ? true : false)\r\n        } else {\r\n            toast.info(\"Configure the sub sample template for this registrationtype\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore,\r\n    getSampleTypeChange, getRegTypeChange, getRegSubTypeChange,\r\n    getAttachmentCombo, viewAttachment, getCommentsCombo,\r\n    filterTransactionList, validateEsignCredential,\r\n    getSampleChildTabDetail, getTestChildTabDetailRegistration,\r\n    ReloadData, showUnderDevelopment, getPreviewTemplate,\r\n    getChildValues, getRegistrationSample,\r\n    getRegistrationsubSampleDetail, getRegistrationTestDetail,\r\n    acceptRegistration, addMoreTest, createRegistrationTest,\r\n    getEditRegistrationComboService, cancelTestAction,\r\n    cancelSampleAction, addsubSampleRegistration, saveSubSample,\r\n    getEditSubSampleComboService, onUpdateSubSampleRegistration, validateEsignforRegistration,\r\n    cancelSubSampleAction, preregRecordToQuarantine, componentTest, getSubSampleChildTabDetail,onApprovalConfigVersionChange\r\n})(injectIntl(RegistrationDesigner));"]},"metadata":{},"sourceType":"module"}