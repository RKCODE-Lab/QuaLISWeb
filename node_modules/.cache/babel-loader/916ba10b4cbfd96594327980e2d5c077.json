{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\competencemanagement\\\\trainingupdate\\\\TrainingUpdateChildTab.jsx\";\nimport React, { version } from 'react';\nimport { Row, Col, Card } from 'react-bootstrap'; //, Nav, Tab\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n//import { faPlus } from '@fortawesome/free-solid-svg-icons';//,faPencilAlt, faTrash\n\nimport { injectIntl } from 'react-intl'; //FormattedMessage,\n//import { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal'; //import Axios from 'axios';\n//import rsapi from '../../rsapi';\n\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { constructOptionList, onDropAttachFileList, deleteAttachmentDropZone, showEsign, create_UUID } from '../../../components/CommonScript'; //import DataGrid from '../../components/DataGrid';\n\nimport CustomTabs from '../../../components/custom-tabs/custom-tabs.component';\nimport { connect } from 'react-redux';\nimport TrainingParticipantsTab from './TrainingParticipantsTab';\nimport TrainingDocTab from './TrainingDocTab';\nimport AddTrainingDocFile from './AddTrainingDocFile';\nimport AddTraineeDocFile from './AddTraineeDocFile';\nimport Esign from '../../audittrail/Esign';\nimport { attachmentType, FORMULAFIELDTYPE, transactionStatus } from '../../../components/Enumeration';\nimport { Expression } from '@progress/kendo-react-data-tools';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass TrainingUpdateChildTab extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.TrainingDocumentDataStateChange = event => {\n      this.setState({\n        dataState: event.dataState\n      });\n    };\n\n    this.ParticipantsDataStateChange = event => {\n      this.setState({\n        dataStateParticipants: event.dataState\n      });\n    };\n\n    this.tabDetail = () => {\n      // const addSupCatId = this.props.controlMap.has(\"AddSupplierCategory\") && this.props.controlMap.get(\"AddSupplierCategory\").ncontrolcode\n      // const deleteSupCatId = this.props.controlMap.has(\"DeleteSupplierCategory\") && this.props.controlMap.get(\"DeleteSupplierCategory\").ncontrolcode\n      // const addMatCatId = this.props.controlMap.has(\"AddMaterialCategory\") && this.props.controlMap.get(\"AddMaterialCategory\").ncontrolcode\n      // const deleteMatCatId = this.props.controlMap.has(\"DeleteMaterialCategory\") && this.props.controlMap.get(\"DeleteMaterialCategory\").ncontrolcode\n      // const supcatAddParam = {\n      //     screenName: \"SupplierCategory\", operation: \"create\", primaryKeyField: \"nsuppliercatcode\",\n      //     masterData: this.props.masterData, userInfo: this.props.userInfo, ncontrolCode: addSupCatId\n      // };\n      // const supcatDeleteParam = { screenName: \"SupplierCategory\", methodUrl: \"SupplierMatrix\", operation: \"delete\", ncontrolCode: deleteSupCatId };\n      // const matericatAddParam = {\n      //     screenName: \"MaterialCategory\", operation: \"create\", primaryKeyField: \"nmaterialcatcode\",\n      //     masterData: this.props.masterData, userInfo: this.props.userInfo, ncontrolCode: addMatCatId\n      // };\n      // const materialcatDeleteParam = { screenName: \"MaterialCategory\", methodUrl: \"SupplierMatrix\", operation: \"delete\", ncontrolCode: deleteMatCatId };\n      const tabMap = new Map();\n      tabMap.set(\"IDS_TRAININGDOCUMENTS\", /*#__PURE__*/React.createElement(TrainingDocTab, {\n        screenName: \"TrainingDocuments\" //     inputParam={this.props.inputParam}\n        //     userInfo={this.props.userInfo}\n        //     screenName={\"TrainingDocument\"}  \n        //    // addId={addSupCatId}\n        //    //addParam={supcatAddParam}\n        //    //comboDataService={this.props.getSupplierCategoryComboDataService}\n        //     addTitleIDS={\"IDS_SUPPLIERCATEGORY\"}\n        //     addTitleDefaultMsg={'TrainingDocument'}\n        // primaryKeyField={\"ntrainingdoccode\"}\n        //     masterData={this.props.masterData}\n        //     primaryList={\"TrainingDocument\"}\n        //     dataResult={process(this.props.masterData[\"TrainingDocument\"], this.state.dataState)}\n        //     // dataState={this.state.dataState}\n        //     // dataStateChange={this.supplierDataStateChange}\n        //     dataState={(this.props.screenName === undefined || this.props.screenName === ''|| this.props.screenName === \"TrainingDocument\") ? this.state.dataState : { skip: 0 }}\n        //     dataStateChange={(event) => this.setState({ dataState: event.data })}\n        //     columnList={this.trainingDocumentColumnList}\n        //     methodUrl={\"TrainingDocument\"}\n        //    // deleteRecord={this.deleteRecord}\n        //     //deleteParam={supcatDeleteParam}\n        // //selectedId={this.props.selectedId}\n        //openModal={this.openModal}\n        //addtrainingdocfile={this.addtrainingdocfile}\n        //selectedRecord={this.state.selectedRecord }\n        ,\n        onInputOnChange: this.onInputOnChange,\n        controlMap: this.props.controlMap,\n        updateStore: this.props.updateStore,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        TrainingDocument: this.props.masterData.TrainingDocument || [],\n        getAvailableData: this.props.getAvailableData //addTrainingDoc={this.props.addTrainingDoc}                                                   \n        //defaultRecord={this.defaultRecord}\n        ,\n        settings: this.props.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 45\n        }\n      }));\n      tabMap.set(\"IDS_PARTICIPANTS\", /*#__PURE__*/React.createElement(TrainingParticipantsTab, {\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        screenName: \" TrainieeDocuments\",\n        updateStore: this.props.updateStore //addId={addMatCatId}\n        //addParam={matericatAddParam}\n        //comboDataService={this.props.getMaterialCategoryComboDataService}\n        //addTitleIDS={\"IDS_PARTICIPANTSNAME\"}\n        //addTitleDefaultMsg={'Participants'}\n        ,\n        primaryKeyField: \"nparticipantcode\",\n        masterData: this.props.masterData,\n        primaryList: \"Participants\",\n        dataResult: process(this.props.Login.masterData[(\"Participants\", \"TraineeDocuments\")] || [], this.state.dataStateParticipants),\n        dataState: this.state.dataStateParticipants // dataStateChange={this.materialDataStateChange}\n        ,\n        dataState: this.props.screenName === undefined || this.props.screenName === \"Participants\" ? this.state.dataStateParticipants : {\n          skip: 0\n        },\n        dataStateChange: event => this.setState({\n          dataStateParticipants: event.data\n        }),\n        columnList: this.participantsColumnList,\n        methodUrl: \"TrainingParticipants\",\n        fetchParticipantsRecordByID: this.fetchParticipantsRecordByID //participantsVersionAccordion={this.participantsVersionAccordion}\n        ,\n        deleteRecord: this.deleteRecord //deleteParam={materialcatDeleteParam}\n        //selectedId={this.props.selectedId}\n        //TraineeDocuments={this.props.masterData.TraineeDocuments || []}\n        ,\n        getAvailableData: this.props.getAvailableData,\n        addtraineedoc: this.addtraineedoc //settings = {this.props.settings}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 40\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = optional; //  selectedRecord[\"sfilename\"]=\"\";\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      }); // const inputValue = event.target.value;\n      // if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\n      //     selectedRecord[event.target.name] = event.target.value;\n      // }\n      // this.setState({ selectedRecord });\n    };\n\n    this.addtraineedoc = ncontrolcode => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          operation: \"create\",\n          selectedRecord: {},\n          ncontrolcode: ncontrolcode,\n          screenName: \"IDS_TRAINEEDOCUMENTS\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"certified\" || this.props.Login.operation === \"attendance\" || this.props.Login.operation === \"competent\" || this.props.Login.operation === \"complete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onDropTrainingDoc = (attachedFiles, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.onDropTrainieeDoc = (attachedFiles, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\"\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const methodUrl = deleteParam.methodUrl;\n      const selected = deleteParam.selectedRecord;\n      let dataState = undefined;\n      const inputParam = {\n        inputData: {\n          [methodUrl.toLowerCase()]: selected,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"trainingupdate\",\n        operation: deleteParam.operation,\n        methodUrl: methodUrl,\n        dataState\n      };\n      const masterData = this.props.masterData;\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation: deleteParam.operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {};\n      let defaultInput = {};\n      let isValidRequest = true;\n\n      if (this.props.screenName === \"IDS_TRAININGDOCUMENTS\") {\n        inputParam = this.onSaveTrainingDoc(saveType, formRef);\n      }\n\n      if (this.props.screenName === \"IDS_TRAINEEDOCUMENTS\") {\n        inputParam = this.onSaveTrainieeDoc(saveType, formRef);\n      }\n\n      if (isValidRequest) {\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openModal\", defaultInput);\n        }\n      }\n    };\n\n    this.onSaveTrainingDoc = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let trainingdocArray = [];\n      let trainingdoc = {\n        ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\n        ntrainingdoccode: selectedRecord.ntrainingdoccode ? selectedRecord.ntrainingdoccode : 0,\n        nstatus: transactionStatus.ACTIVE //nattachmenttypecode,\n        //ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK?\"nlinkdefaultstatus\":\"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK?\"nlinkdefaultstatus\":\"ndefaultstatus\"] : 4\n\n      };\n      const formData = new FormData(); //if (nattachmenttypecode === attachmentType.FTP) {\n\n      if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n        acceptedFiles.forEach((file, index) => {\n          const tempData = Object.assign({}, trainingdoc);\n          const splittedFileName = file.name.split('.');\n          const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n          const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n          const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n          const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntrainingdoccode && selectedRecord.ntrainingdoccode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n          tempData[\"sfilename\"] = file.name;\n          tempData[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\"; //tempData[\"nlinkcode\"] = transactionStatus.NA;\n\n          tempData[\"ssystemfilename\"] = uniquefilename; //tempData[\"nfilesize\"] = file.size;\n\n          formData.append(\"uploadedFile\" + index, file);\n          formData.append(\"uniquefilename\" + index, uniquefilename);\n          trainingdocArray.push(tempData);\n        });\n        formData.append(\"filecount\", acceptedFiles.length);\n        isFileEdited = transactionStatus.YES;\n      } else {\n        trainingdoc[\"sfilename\"] = selectedRecord.sfilename;\n        trainingdoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\"; //trainingdoc[\"nlinkcode\"] = transactionStatus.NA;\n\n        trainingdoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename; //trainingdoc[\"nfilesize\"] = selectedRecord.nfilesize;\n\n        trainingdocArray.push(trainingdoc);\n      } // } else {\n      //     testFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\n      //     testFile[\"sfiledesc\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\n      //     testFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n      //     testFile[\"ssystemfilename\"] = \"\";\n      //     testFile[\"nfilesize\"] = 0;\n      //     testFileArray.push(testFile);\n      // }\n\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"trainingdoc\", JSON.stringify(trainingdocArray)); // formData.append(\"userinfo\", JSON.stringify(this.props.userInfo));\n\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.operation,\n        classUrl: \"trainingupdate\",\n        saveType,\n        formRef,\n        methodUrl: \"TrainingDoc\"\n      };\n      return inputParam;\n    };\n\n    this.onSaveTrainieeDoc = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let trainieedocArray = [];\n      let trainieedoc = {\n        nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\n        ntraineedoccode: selectedRecord.ntraineedoccode ? selectedRecord.ntraineedoccode : 0,\n        nstatus: transactionStatus.ACTIVE //nattachmenttypecode,\n        //ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK?\"nlinkdefaultstatus\":\"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK?\"nlinkdefaultstatus\":\"ndefaultstatus\"] : 4\n\n      };\n      const formData = new FormData();\n\n      if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n        acceptedFiles.forEach((file, index) => {\n          const tempData = Object.assign({}, trainieedoc);\n          const splittedFileName = file.name.split('.');\n          const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n          const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n          const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n          const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntraineedoccode && selectedRecord.ntraineedoccode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n          tempData[\"sfilename\"] = file.name;\n          tempData[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\"; //tempData[\"nlinkcode\"] = transactionStatus.NA;\n\n          tempData[\"ssystemfilename\"] = uniquefilename; //tempData[\"nfilesize\"] = file.size;\n\n          formData.append(\"uploadedFile\" + index, file);\n          formData.append(\"uniquefilename\" + index, uniquefilename);\n          trainieedocArray.push(tempData);\n        });\n        formData.append(\"filecount\", acceptedFiles.length);\n        isFileEdited = transactionStatus.YES;\n      } else {\n        trainieedoc[\"sfilename\"] = selectedRecord.sfilename;\n        trainieedoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\"; //trainingdoc[\"nlinkcode\"] = transactionStatus.NA;\n\n        trainieedoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename; //trainingdoc[\"nfilesize\"] = selectedRecord.nfilesize;\n\n        trainieedocArray.push(trainieedoc);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"trainieedoc\", JSON.stringify(trainieedocArray));\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.operation,\n        classUrl: \"trainingupdate\",\n        saveType,\n        formRef,\n        methodUrl: \"TrainieeDoc\"\n      };\n      return inputParam;\n    };\n\n    this.fetchParticipantsRecordByID = (operation, version, ncontrolCode) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"trainingparticipants\"] = {\n        \"nusercode\": version.nusercode,\n        \"nparticipantcode\": version.nparticipantcode,\n        \"ntrainingcode\": version.ntrainingcode,\n        \"ncertifiedstatus\": version.ncertifiedstatus,\n        \"ncompetencystatus\": version.ncompetencystatus,\n        \"ntransactionstatus\": version.ntransactionstatus\n      };\n      const postParam = {\n        inputListName: \"Participants\",\n        selectedObject: \"selectedParticipants\",\n        primaryKeyField: \"nparticipantcode\",\n        primaryKeyValue: this.props.Login.masterData.selectedParticipants.nparticipantcode,\n        fetchUrl: \"trainingupdate/getTrainingParticipants\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        methodUrl: \"trainingparticipants\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        postParam,\n        operation\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation,\n            screenName: '',\n            id: 'ParticipantsStatus'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    const _dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    const dataStateParticipants = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      isOpen: false,\n      selectedRecord: {},\n      dataResult: [],\n      activeTab: 'Trainingdoc-tab',\n      dataState: _dataState,\n      dataStateParticipants: dataStateParticipants,\n      trainingDocument: [],\n      participants: []\n    };\n    this.trainingDocumentFieldList = ['ntrainingdoccode', 'nparticipantcode', 'ntrainingcode', 'sfilename', 'ntechniquecode', 'sfullname', 'nstatus', 'ntransactionstatus'];\n    this.trainingDocumentColumnList = [{\n      \"idsName\": \"IDS_TRAININGDOCUMENTNAME\",\n      \"dataField\": \"sfilename\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    this.participantsColumnList = [{\n      \"idsName\": \"IDS_PARTICIPANTSNAME\",\n      \"dataField\": \"sfullname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    this.validationTrainingDocumentColumnList = [{\n      \"idsName\": \"IDS_TRAININGDOCUMENTNAME\",\n      \"dataField\": \"sfilename\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.validationParticipantsColumnList = [{\n      \"idsName\": \"IDS_PARTICIPANTS\",\n      \"dataField\": \"sfullname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n  }\n\n  render() {\n    const mandatoryFields = []; //const matmandatoryFields = [];\n\n    this.validationTrainingDocumentColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\"); // this.validationParticipantsColumnList.forEach(item => item.mandatory === true ?\n    //     matmandatoryFields.push(item) : \"\"\n    // );\n    // if (this.props.Login.openModal) {\n    //     this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation)\n    // }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 29\n      }\n    })))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_TRAININGDOCUMENTS\" ? /*#__PURE__*/React.createElement(AddTrainingDocFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onDrop: this.onDropTrainingDoc,\n        onInputOnChange: this.onInputOnChange //onComboChange={this.onComboChange}\n        ,\n        deleteAttachment: this.deleteAttachment,\n        formatMessage: this.props.intl.formatMessage //selectedmaHolder={this.props.Login.masterData.SelectedMAHolder || {}}\n        ,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_FILENAME\"\n        }),\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        selectedId: this.props.Login.selectedId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_TRAINEEDOCUMENTS\" ? /*#__PURE__*/React.createElement(AddTraineeDocFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onDrop: this.onDropTrainieeDoc,\n        onInputOnChange: this.onInputOnChange //onComboChange={this.onComboChange}\n        ,\n        deleteAttachment: this.deleteAttachment,\n        formatMessage: this.props.intl.formatMessage //selectedmaHolder={this.props.Login.masterData.SelectedMAHolder || {}}\n        ,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_FILENAME\"\n        }),\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        selectedId: this.props.Login.selectedId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 29\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  // onComboChange = (comboData, fieldName) => {\n  //     const selectedRecord = this.state.selectedRecord || {};\n  //     selectedRecord[fieldName] = comboData;;\n  //     if (fieldName === \"nsuppliercatcode\") {\n  //         let selectedSupplierCategory = comboData;\n  //         this.setState({ selectedRecord, selectedSupplierCategory });\n  //     }\n  //     if (fieldName === \"nmaterialcatcode\") {\n  //         let selectedMaterialCategory = comboData;\n  //         this.setState({ selectedRecord, selectedMaterialCategory });\n  //     }\n  // }\n  // onInputOnChange = (event) => {\n  //     const selectedRecord = this.state.selectedRecord || {};\n  //     if (event.target.type === 'checkbox') {\n  //         if (event.target.name === \"ntransactionstatus\")\n  //             selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\n  //         // else if (event.target.name === \"nlockmode\")\n  //         //     selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.UNLOCK : transactionStatus.LOCK;\n  //         else\n  //             selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n  //     }\n  //     else {\n  //         selectedRecord[event.target.name] = event.target.value;\n  //     }\n  //     this.setState({ selectedRecord });\n  // }\n  componentDidUpdate(previousProps) {\n    if (this.props.masterData !== previousProps.masterData) {\n      let isOpen = false;\n\n      if (this.props.errorCode !== undefined && (this.state.operation === \"create\" || this.state.operation === \"update\")) {\n        isOpen = true;\n      }\n\n      let {\n        dataState,\n        dataStateParticipants\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\n          filter: undefined,\n          sort: undefined\n        };\n        dataStateParticipants = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\n          filter: undefined,\n          sort: undefined\n        };\n      }\n\n      this.setState({\n        isOpen,\n        activeTab: 'Trainingdocument-tab',\n        dataState,\n        dataStateParticipants\n      });\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n\n    let {\n      dataState,\n      dataStateParticipants\n    } = this.state;\n\n    if (this.props.dataState !== previousProps.dataState && this.props.dataState !== dataState) {\n      dataState = {\n        skip: 0,\n        take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n      };\n      dataStateParticipants = {\n        skip: 0,\n        take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n      };\n      this.setState({\n        dataState,\n        dataStateParticipants\n      });\n    } // {\n    //     dataState={...dataState,filter:undefined,sort:undefined}\n    //     dataStateMaterial={...dataStateMaterial,filter:undefined,sort:undefined}\n    //     this.setState({ dataState, dataStateMaterial });\n    // }\n\n\n    if (this.props.trainingDocument !== previousProps.trainingDocument || this.props.participants !== previousProps.participants) {\n      // const trainingDocument = constructOptionList(this.props.trainingDocument || [], \"ntrainingdoccode\",\n      //     \"sfilename\", undefined, undefined, undefined);\n      //const trainingDocumentList = trainingDocument.get(\"OptionList\");\n      const participants = constructOptionList(this.props.participants || [], \"nparticipantcode\", \"sfullname\", undefined, undefined, undefined);\n      const participantsList = participants.get(\"OptionList\");\n      this.setState({\n        //trainingDocument: trainingDocumentList,\n        participants: participantsList\n      });\n    }\n  } // onSaveClick = (saveType, formRef) => {\n  //     //add / edit  \n  //     let inputParam = {};\n  //     if (this.props.screenName === \"SupplierCategory\") {\n  //         inputParam = this.saveSupplierCategory(saveType, formRef);\n  //     }\n  //     else if (this.props.screenName === \"MaterialCategory\") {\n  //         inputParam = this.saveMaterial(saveType, formRef);\n  //     }\n  //     if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n  //         const updateInfo = {\n  //             typeName: DEFAULT_RETURN,\n  //             data: {\n  //                 loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\n  //             }\n  //         }\n  //         this.props.updateStore(updateInfo);\n  //     }\n  //     else {\n  //         this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n  //     }\n  // }\n  // saveSupplierCategory(saveType, formRef) {\n  //     let inputData = [];\n  //     inputData[\"userinfo\"] = this.props.userInfo;\n  //     inputData[\"supplier\"] = this.props.masterData.SelectedSupplier;\n  //     inputData[\"suppliermatrix\"] = {};\n  //     let dataState = { skip: 0 , take :this.props.settings? parseInt(this.props.settings[14]) : 5 };\n  //     let suppliermatrixArray = []\n  //     suppliermatrixArray = this.state.selectedRecord.nsuppliercatcode.map(item => {\n  //         let suppliermat = {}\n  //         suppliermat[\"nsuppliercode\"] = this.props.masterData.SelectedSupplier.nsuppliercode; //this.state.selectedRecord[\"nmahcode\"] ? this.state.selectedRecord[\"nmahcode\"].value : \"\";\n  //         suppliermat[\"ntypecode\"] = 1;\n  //         suppliermat[\"sremarks\"] = \"\";\n  //         suppliermat[\"ntransactionstatus\"] = transactionStatus.ACTIVE;\n  //         suppliermat[\"ncategorycode\"] = item.value\n  //         //suppliermatrixArray.push(suppliermat);\n  //         return suppliermat;\n  //     });\n  //     inputData['suppliermatrix'] = suppliermatrixArray;\n  //     const inputParam = {\n  //         classUrl: \"suppliermatrix\",\n  //         methodUrl: \"SupplierMatrix\",\n  //         inputData: inputData,\n  //         operation: this.props.operation, saveType, formRef, dataState\n  //     }\n  //     return inputParam;\n  // }\n  // saveMaterial(saveType, formRef) {\n  //     let inputData = [];\n  //     inputData[\"userinfo\"] = this.props.userInfo;\n  //     inputData[\"supplier\"] = this.props.masterData.SelectedSupplier;\n  //     inputData[\"suppliermatrix\"] = {};\n  //     let dataStateMaterial = undefined;\n  //     let suppliermatrixArray = []\n  //     suppliermatrixArray = this.state.selectedRecord.nmaterialcatcode.map(item => {\n  //         let suppliermat = {}\n  //         suppliermat[\"nsuppliercode\"] = this.props.masterData.SelectedSupplier.nsuppliercode; //this.state.selectedRecord[\"nmahcode\"] ? this.state.selectedRecord[\"nmahcode\"].value : \"\";\n  //         suppliermat[\"ntypecode\"] = 2;\n  //         suppliermat[\"sremarks\"] = \"\";\n  //         suppliermat[\"ntransactionstatus\"] = transactionStatus.ACTIVE;\n  //         suppliermat[\"ncategorycode\"] = item.value\n  //         //suppliermatrixArray.push(suppliermat);\n  //         return suppliermat;\n  //     });\n  //     inputData['suppliermatrix'] = suppliermatrixArray;\n  //     const inputParam = {\n  //         classUrl: \"suppliermatrix\",\n  //         methodUrl: \"SupplierMatrix\",\n  //         inputData: inputData,\n  //         operation: this.props.operation, saveType, formRef, dataStateMaterial\n  //     }\n  //     return inputParam;\n  // }\n  // deleteRecord = (supplierparam) => {\n  //     if (this.props.masterData.SelectedSupplier.ntransactionstatus === transactionStatus.RETIRED) {\n  //         toast.warn(this.props.intl.formatMessage({ id: this.props.masterData.SelectedSupplier.stranstatus }));\n  //     }\n  //     else {\n  //         const inputParam = {\n  //             classUrl: \"suppliermatrix\",\n  //             methodUrl: supplierparam.methodUrl,\n  //             inputData: {\n  //                 [supplierparam.methodUrl.toLowerCase()]: supplierparam.selectedRecord,\n  //                 \"userinfo\": this.props.userInfo,\n  //             },\n  //             operation: supplierparam.operation,\n  //             //dataState: this.state.dataState,\n  //             //dataStateMaterial: this.state.dataStateMaterial\n  //             dataState: this.state.dataState\n  //         }\n  //         if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, supplierparam.ncontrolCode)) {\n  //             const updateInfo = {\n  //                 typeName: DEFAULT_RETURN,\n  //                 data: {\n  //                     loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\n  //                     openChildModal: true, screenName: supplierparam.screenName, operation: supplierparam.operation\n  //                 }\n  //             }\n  //             this.props.updateStore(updateInfo);\n  //         }\n  //         else {\n  //             this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n  //         }\n  //     }\n  // }\n  // validateEsign = () => {\n  //     const inputParam = {\n  //         inputData: {\n  //             \"userinfo\": {\n  //                 ...this.props.userInfo,\n  //                 sreason: this.state.selectedRecord[\"esigncomments\"]\n  //             },\n  //             password: this.state.selectedRecord[\"esignpassword\"]\n  //         },\n  //         screenData: this.props.screenData\n  //     }\n  //     this.props.validateEsignCredential(inputParam, \"openChildModal\");\n  // }\n\n\n}\n\nexport default connect(mapStateToProps, {})(injectIntl(TrainingUpdateChildTab));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/competencemanagement/trainingupdate/TrainingUpdateChildTab.jsx"],"names":["React","version","Row","Col","Card","injectIntl","process","SlideOutModal","DEFAULT_RETURN","constructOptionList","onDropAttachFileList","deleteAttachmentDropZone","showEsign","create_UUID","CustomTabs","connect","TrainingParticipantsTab","TrainingDocTab","AddTrainingDocFile","AddTraineeDocFile","Esign","attachmentType","FORMULAFIELDTYPE","transactionStatus","Expression","mapStateToProps","state","Login","TrainingUpdateChildTab","Component","constructor","props","TrainingDocumentDataStateChange","event","setState","dataState","ParticipantsDataStateChange","dataStateParticipants","tabDetail","tabMap","Map","set","onInputOnChange","controlMap","updateStore","userRoleControlRights","userInfo","inputParam","deleteRecord","masterData","TrainingDocument","getAvailableData","settings","screenName","undefined","skip","data","participantsColumnList","fetchParticipantsRecordByID","addtraineedoc","optional","selectedRecord","target","type","name","checked","value","ncontrolcode","updateInfo","typeName","openModal","operation","closeModal","loadEsign","selectedId","onDropTrainingDoc","attachedFiles","fieldName","actionType","onDropTrainieeDoc","validateEsign","inputData","sreason","password","screenData","validateEsignCredential","deleteAttachment","file","deleteParam","methodUrl","selected","toLowerCase","userinfo","classUrl","esignRights","nformcode","ncontrolCode","crudMaster","onSaveClick","saveType","formRef","defaultInput","isValidRequest","onSaveTrainingDoc","onSaveTrainieeDoc","acceptedFiles","sfilename","nattachmenttypecode","isFileEdited","NO","trainingdocArray","trainingdoc","ntrainingcode","SelectedTrainingUpdate","ntrainingdoccode","nstatus","ACTIVE","formData","FormData","Array","isArray","length","forEach","index","tempData","Object","assign","splittedFileName","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","FTP","sfiledesc","trim","append","push","YES","JSON","stringify","isFileupload","trainieedocArray","trainieedoc","nparticipantcode","selectedParticipants","ntraineedoccode","nusercode","ncertifiedstatus","ncompetencystatus","ntransactionstatus","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","fetchUrl","fecthInputObject","id","onTabChange","tabProps","take","parseInt","isOpen","dataResult","activeTab","trainingDocument","participants","trainingDocumentFieldList","trainingDocumentColumnList","validationTrainingDocumentColumnList","validationParticipantsColumnList","render","mandatoryFields","item","mandatory","masterStatus","intl","formatMessage","userLogged","componentDidUpdate","previousProps","errorCode","filter","sort","participantsList","get"],"mappings":"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","sourcesContent":["import React, { version } from 'react'\r\nimport { Row, Col, Card } from 'react-bootstrap';//, Nav, Tab\r\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n//import { faPlus } from '@fortawesome/free-solid-svg-icons';//,faPencilAlt, faTrash\r\nimport { injectIntl } from 'react-intl';//FormattedMessage,\r\n//import { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\n//import Axios from 'axios';\r\n//import rsapi from '../../rsapi';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { constructOptionList, onDropAttachFileList ,deleteAttachmentDropZone, showEsign,create_UUID} from '../../../components/CommonScript';\r\n//import DataGrid from '../../components/DataGrid';\r\nimport CustomTabs from '../../../components/custom-tabs/custom-tabs.component';\r\nimport { connect } from 'react-redux';\r\nimport TrainingParticipantsTab from './TrainingParticipantsTab';\r\nimport TrainingDocTab from './TrainingDocTab';\r\nimport AddTrainingDocFile from './AddTrainingDocFile';\r\nimport AddTraineeDocFile from './AddTraineeDocFile';\r\nimport Esign from '../../audittrail/Esign';\r\nimport { attachmentType, FORMULAFIELDTYPE, transactionStatus } from '../../../components/Enumeration';\r\nimport { Expression } from '@progress/kendo-react-data-tools';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass TrainingUpdateChildTab extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings? parseInt(this.props.settings[14]) : 5\r\n        };\r\n        const dataStateParticipants = {\r\n            skip: 0,\r\n            take:this.props.settings? parseInt(this.props.settings[14]) : 5\r\n        };\r\n        this.state = {\r\n            isOpen: false, selectedRecord: {}, dataResult: [],\r\n            activeTab: 'Trainingdoc-tab',\r\n            dataState: dataState,\r\n            dataStateParticipants: dataStateParticipants, trainingDocument: [], participants: []\r\n        };\r\n        this.trainingDocumentFieldList = ['ntrainingdoccode', 'nparticipantcode', 'ntrainingcode', 'sfilename', 'ntechniquecode', 'sfullname',\r\n            'nstatus', 'ntransactionstatus'];\r\n        this.trainingDocumentColumnList = [{ \"idsName\": \"IDS_TRAININGDOCUMENTNAME\", \"dataField\": \"sfilename\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" }];\r\n        this.participantsColumnList = [{ \"idsName\": \"IDS_PARTICIPANTSNAME\", \"dataField\": \"sfullname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" }];\r\n        this.validationTrainingDocumentColumnList = [{ \"idsName\": \"IDS_TRAININGDOCUMENTNAME\", \"dataField\": \"sfilename\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }];\r\n        this.validationParticipantsColumnList = [{ \"idsName\": \"IDS_PARTICIPANTS\", \"dataField\": \"sfullname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }];\r\n    }\r\n    TrainingDocumentDataStateChange = (event) => {\r\n        this.setState({\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    ParticipantsDataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateParticipants: event.dataState\r\n        });\r\n    }\r\n    render() {\r\n        const mandatoryFields = [];\r\n        //const matmandatoryFields = [];\r\n        this.validationTrainingDocumentColumnList.forEach(item => item.mandatory === true ?\r\n           mandatoryFields.push(item) : \"\"\r\n         );\r\n        // this.validationParticipantsColumnList.forEach(item => item.mandatory === true ?\r\n        //     matmandatoryFields.push(item) : \"\"\r\n        // );\r\n        // if (this.props.Login.openModal) {\r\n        //     this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation)\r\n        // }\r\n        return (\r\n            <>\r\n                <Row className=\"no-gutters\">\r\n                    <Col md={12}>\r\n                        <Card className=\"at-tabs\">\r\n                            <CustomTabs tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                             : this.props.screenName === \"IDS_TRAININGDOCUMENTS\" ?\r\n                            <AddTrainingDocFile\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onDrop={this.onDropTrainingDoc}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                //onComboChange={this.onComboChange}\r\n                                deleteAttachment={this.deleteAttachment}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                //selectedmaHolder={this.props.Login.masterData.SelectedMAHolder || {}}\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_FILENAME\" })}\r\n                                operation={this.props.Login.operation}\r\n                                userLogged={this.props.Login.userLogged}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedId={this.props.Login.selectedId}\r\n                            />\r\n                            : this.props.screenName === \"IDS_TRAINEEDOCUMENTS\" ?\r\n                            <AddTraineeDocFile\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onDrop={this.onDropTrainieeDoc}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                //onComboChange={this.onComboChange}\r\n                                deleteAttachment={this.deleteAttachment}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                //selectedmaHolder={this.props.Login.masterData.SelectedMAHolder || {}}\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_FILENAME\" })}\r\n                                operation={this.props.Login.operation}\r\n                                userLogged={this.props.Login.userLogged}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedId={this.props.Login.selectedId}\r\n                            />\r\n                            : \"\"\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n\r\n\r\n    tabDetail = () => {\r\n        // const addSupCatId = this.props.controlMap.has(\"AddSupplierCategory\") && this.props.controlMap.get(\"AddSupplierCategory\").ncontrolcode\r\n\r\n        // const deleteSupCatId = this.props.controlMap.has(\"DeleteSupplierCategory\") && this.props.controlMap.get(\"DeleteSupplierCategory\").ncontrolcode\r\n\r\n        // const addMatCatId = this.props.controlMap.has(\"AddMaterialCategory\") && this.props.controlMap.get(\"AddMaterialCategory\").ncontrolcode\r\n\r\n        // const deleteMatCatId = this.props.controlMap.has(\"DeleteMaterialCategory\") && this.props.controlMap.get(\"DeleteMaterialCategory\").ncontrolcode\r\n\r\n        // const supcatAddParam = {\r\n        //     screenName: \"SupplierCategory\", operation: \"create\", primaryKeyField: \"nsuppliercatcode\",\r\n        //     masterData: this.props.masterData, userInfo: this.props.userInfo, ncontrolCode: addSupCatId\r\n        // };\r\n\r\n        // const supcatDeleteParam = { screenName: \"SupplierCategory\", methodUrl: \"SupplierMatrix\", operation: \"delete\", ncontrolCode: deleteSupCatId };\r\n\r\n        // const matericatAddParam = {\r\n        //     screenName: \"MaterialCategory\", operation: \"create\", primaryKeyField: \"nmaterialcatcode\",\r\n        //     masterData: this.props.masterData, userInfo: this.props.userInfo, ncontrolCode: addMatCatId\r\n        // };\r\n\r\n        // const materialcatDeleteParam = { screenName: \"MaterialCategory\", methodUrl: \"SupplierMatrix\", operation: \"delete\", ncontrolCode: deleteMatCatId };\r\n\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_TRAININGDOCUMENTS\", <TrainingDocTab\r\n                                                screenName={\"TrainingDocuments\"}\r\n\r\n                                                    //     inputParam={this.props.inputParam}\r\n                                                    //     userInfo={this.props.userInfo}\r\n                                                    //     screenName={\"TrainingDocument\"}  \r\n                                                    //    // addId={addSupCatId}\r\n                                                    //    //addParam={supcatAddParam}\r\n                                                    //    //comboDataService={this.props.getSupplierCategoryComboDataService}\r\n                                                    //     addTitleIDS={\"IDS_SUPPLIERCATEGORY\"}\r\n                                                    //     addTitleDefaultMsg={'TrainingDocument'}\r\n                                                      // primaryKeyField={\"ntrainingdoccode\"}\r\n                                                    //     masterData={this.props.masterData}\r\n                                                    //     primaryList={\"TrainingDocument\"}\r\n                                                    //     dataResult={process(this.props.masterData[\"TrainingDocument\"], this.state.dataState)}\r\n                                                    //     // dataState={this.state.dataState}\r\n                                                    //     // dataStateChange={this.supplierDataStateChange}\r\n                                                    //     dataState={(this.props.screenName === undefined || this.props.screenName === ''|| this.props.screenName === \"TrainingDocument\") ? this.state.dataState : { skip: 0 }}\r\n                                                    //     dataStateChange={(event) => this.setState({ dataState: event.data })}\r\n                                                    //     columnList={this.trainingDocumentColumnList}\r\n                                                    //     methodUrl={\"TrainingDocument\"}\r\n                                                    //    // deleteRecord={this.deleteRecord}\r\n                                                    //     //deleteParam={supcatDeleteParam}\r\n                                                    // //selectedId={this.props.selectedId}\r\n                                                    //openModal={this.openModal}\r\n                                                    //addtrainingdocfile={this.addtrainingdocfile}\r\n                                                    //selectedRecord={this.state.selectedRecord }\r\n                                                    onInputOnChange={this.onInputOnChange}\r\n                                                    controlMap={this.props.controlMap}\r\n                                                    updateStore={this.props.updateStore}\r\n                                                    userRoleControlRights={this.props.userRoleControlRights}\r\n                                                    userInfo={this.props.userInfo}\r\n                                                    inputParam={this.props.inputParam}\r\n                                                    deleteRecord={this.deleteRecord}\r\n                                                    TrainingDocument={this.props.masterData.TrainingDocument || []}\r\n                                                    getAvailableData={this.props.getAvailableData}\r\n                                                    //addTrainingDoc={this.props.addTrainingDoc}                                                   \r\n                                                    //defaultRecord={this.defaultRecord}\r\n                                                    settings = {this.props.settings}\r\n                                                    />)\r\n        tabMap.set(\"IDS_PARTICIPANTS\", <TrainingParticipantsTab \r\n                                                          \r\n                                                            userRoleControlRights={this.props.userRoleControlRights}\r\n                                                            controlMap={this.props.controlMap}\r\n                                                            inputParam={this.props.inputParam}\r\n                                                            userInfo={this.props.userInfo}\r\n                                                            screenName={\" TrainieeDocuments\"}   \r\n                                                            updateStore={this.props.updateStore}\r\n                                                            //addId={addMatCatId}\r\n                                                            //addParam={matericatAddParam}\r\n                                                            //comboDataService={this.props.getMaterialCategoryComboDataService}\r\n                                                            //addTitleIDS={\"IDS_PARTICIPANTSNAME\"}\r\n                                                            //addTitleDefaultMsg={'Participants'}\r\n                                                            primaryKeyField={\"nparticipantcode\"}\r\n                                                            masterData={this.props.masterData}\r\n                                                            primaryList={\"Participants\"}\r\n                                                            dataResult={process(this.props.Login.masterData[\"Participants\", \"TraineeDocuments\"] || [], this.state.dataStateParticipants)}\r\n                                                            dataState={this.state.dataStateParticipants}\r\n                                                            // dataStateChange={this.materialDataStateChange}\r\n                                                            dataState={(this.props.screenName === undefined || this.props.screenName === \"Participants\") ? this.state.dataStateParticipants : { skip: 0 }}\r\n                                                            dataStateChange={(event) => this.setState({ dataStateParticipants: event.data })}\r\n                                                            columnList={this.participantsColumnList}\r\n                                                            methodUrl={\"TrainingParticipants\"}\r\n                                                            fetchParticipantsRecordByID={this.fetchParticipantsRecordByID}\r\n                                                            //participantsVersionAccordion={this.participantsVersionAccordion}\r\n                                                            deleteRecord={this.deleteRecord}\r\n                                                            //deleteParam={materialcatDeleteParam}\r\n                                                        //selectedId={this.props.selectedId}\r\n                                                        //TraineeDocuments={this.props.masterData.TraineeDocuments || []}\r\n                                                        getAvailableData={this.props.getAvailableData}\r\n                                                        addtraineedoc={this.addtraineedoc}\r\n                                                        //settings = {this.props.settings}\r\n                                                        \r\n                                                        />)\r\n        return tabMap;\r\n    }\r\n\r\n\r\n    onInputOnChange = (event,optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n       \r\n           \r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n                } else if (event.target.type === 'radio') {\r\n                    selectedRecord[event.target.name] = optional;\r\n                  //  selectedRecord[\"sfilename\"]=\"\";\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n             \r\n                // const inputValue = event.target.value;\r\n                // if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\r\n                //     selectedRecord[event.target.name] = event.target.value;\r\n                // }\r\n                // this.setState({ selectedRecord });\r\n           \r\n                }\r\n\r\n                addtraineedoc =(ncontrolcode) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true,\r\n                operation: \"create\",\r\n                selectedRecord: {},\r\n                ncontrolcode: ncontrolcode,\r\n                screenName : \"IDS_TRAINEEDOCUMENTS\" \r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" ||\r\n                 this.props.Login.operation === \"certified\" ||\r\n                 this.props.Login.operation === \"attendance\" ||\r\n                 this.props.Login.operation === \"competent\" || this.props.Login.operation === \"complete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    onDropTrainingDoc = (attachedFiles, fieldName) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n    onDropTrainieeDoc = (attachedFiles, fieldName) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" \r\n        });\r\n    }\r\n        \r\n    \r\n    deleteRecord = (deleteParam) => {\r\n        const methodUrl = deleteParam.methodUrl;\r\n        const selected = deleteParam.selectedRecord;\r\n        let dataState = undefined;\r\n    const inputParam =   \r\n       {\r\n          inputData: {\r\n\r\n              [methodUrl.toLowerCase()]: selected,\r\n              userinfo: this.props.userInfo\r\n          },\r\n          classUrl: \"trainingupdate\",\r\n          operation: deleteParam.operation,\r\n          methodUrl: methodUrl,\r\n           dataState\r\n      }\r\n  \r\n   const masterData = this.props.masterData;\r\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n          const updateInfo = {\r\n              typeName: DEFAULT_RETURN,\r\n              data: {\r\n                  loadEsign: true, screenData: { inputParam, masterData },\r\n                  openModal: true,  operation: deleteParam.operation, selectedRecord: {}\r\n              }\r\n          }\r\n          this.props.updateStore(updateInfo);\r\n      } else {\r\n          this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n      }\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        let defaultInput = {};\r\n        let isValidRequest = true;\r\n         if (this.props.screenName === \"IDS_TRAININGDOCUMENTS\") {\r\n            inputParam = this.onSaveTrainingDoc(saveType, formRef);\r\n        } \r\n        if (this.props.screenName === \"IDS_TRAINEEDOCUMENTS\") {\r\n            inputParam = this.onSaveTrainieeDoc(saveType, formRef);\r\n        } \r\n        if (isValidRequest) {\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openModal\", defaultInput);\r\n            }\r\n        }\r\n    }\r\n\r\n    onSaveTrainingDoc = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let trainingdocArray = [];\r\n        let trainingdoc = {\r\n            ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n            ntrainingdoccode: selectedRecord.ntrainingdoccode ? selectedRecord.ntrainingdoccode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            //nattachmenttypecode,\r\n            //ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK?\"nlinkdefaultstatus\":\"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK?\"nlinkdefaultstatus\":\"ndefaultstatus\"] : 4\r\n        };\r\n        const formData = new FormData();\r\n        //if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, trainingdoc);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntrainingdoccode && selectedRecord.ntrainingdoccode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = file.name;\r\n                    tempData[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\r\n                    //tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    //tempData[\"nfilesize\"] = file.size;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    trainingdocArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                trainingdoc[\"sfilename\"] = selectedRecord.sfilename;\r\n                trainingdoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\r\n                //trainingdoc[\"nlinkcode\"] = transactionStatus.NA;\r\n                trainingdoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                //trainingdoc[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                trainingdocArray.push(trainingdoc);\r\n            }\r\n        // } else {\r\n        //     testFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\r\n        //     testFile[\"sfiledesc\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\r\n        //     testFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n        //     testFile[\"ssystemfilename\"] = \"\";\r\n        //     testFile[\"nfilesize\"] = 0;\r\n        //     testFileArray.push(testFile);\r\n        // }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"trainingdoc\", JSON.stringify(trainingdocArray));\r\n        // formData.append(\"userinfo\", JSON.stringify(this.props.userInfo));\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.operation,\r\n            classUrl: \"trainingupdate\",\r\n            saveType, formRef, methodUrl: \"TrainingDoc\"\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveTrainieeDoc = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let trainieedocArray = [];\r\n        let trainieedoc = {\r\n            nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\r\n            ntraineedoccode: selectedRecord.ntraineedoccode ? selectedRecord.ntraineedoccode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            //nattachmenttypecode,\r\n            //ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK?\"nlinkdefaultstatus\":\"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK?\"nlinkdefaultstatus\":\"ndefaultstatus\"] : 4\r\n        };\r\n        const formData = new FormData();\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, trainieedoc);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntraineedoccode && selectedRecord.ntraineedoccode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = file.name;\r\n                    tempData[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\r\n                    //tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    //tempData[\"nfilesize\"] = file.size;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    trainieedocArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                trainieedoc[\"sfilename\"] = selectedRecord.sfilename;\r\n                trainieedoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\r\n                //trainingdoc[\"nlinkcode\"] = transactionStatus.NA;\r\n                trainieedoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                //trainingdoc[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                trainieedocArray.push(trainieedoc);\r\n            }\r\n     \r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"trainieedoc\", JSON.stringify(trainieedocArray));\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.operation,\r\n            classUrl: \"trainingupdate\",\r\n            saveType, formRef, methodUrl: \"TrainieeDoc\"\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    fetchParticipantsRecordByID = (operation,version,ncontrolCode) => {\r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"trainingparticipants\"] = {\r\n            \"nusercode\": version.nusercode,\r\n            \"nparticipantcode\": version.nparticipantcode,\r\n            \"ntrainingcode\": version.ntrainingcode,\r\n            \"ncertifiedstatus\" : version.ncertifiedstatus,\r\n            \"ncompetencystatus\" : version.ncompetencystatus,\r\n            \"ntransactionstatus\" : version.ntransactionstatus\r\n\r\n        }\r\n        const postParam = {\r\n            inputListName: \"Participants\", \r\n            selectedObject: \"selectedParticipants\",\r\n            primaryKeyField: \"nparticipantcode\",\r\n            primaryKeyValue: this.props.Login.masterData.selectedParticipants.nparticipantcode,\r\n            fetchUrl: \"trainingupdate/getTrainingParticipants\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"trainingparticipants\",\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData, postParam,\r\n            operation\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, \r\n                    screenData: { inputParam, masterData }, \r\n                    openModal: true, \r\n                    operation, \r\n                    screenName: '', \r\n                    id: 'ParticipantsStatus'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n  \r\n\r\n    // onComboChange = (comboData, fieldName) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[fieldName] = comboData;;\r\n\r\n\r\n    //     if (fieldName === \"nsuppliercatcode\") {\r\n    //         let selectedSupplierCategory = comboData;\r\n    //         this.setState({ selectedRecord, selectedSupplierCategory });\r\n    //     }\r\n    //     if (fieldName === \"nmaterialcatcode\") {\r\n    //         let selectedMaterialCategory = comboData;\r\n    //         this.setState({ selectedRecord, selectedMaterialCategory });\r\n    //     }\r\n    // }\r\n\r\n    // onInputOnChange = (event) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     if (event.target.type === 'checkbox') {\r\n    //         if (event.target.name === \"ntransactionstatus\")\r\n    //             selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n    //         // else if (event.target.name === \"nlockmode\")\r\n    //         //     selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.UNLOCK : transactionStatus.LOCK;\r\n    //         else\r\n    //             selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n    //     }\r\n    //     else {\r\n    //         selectedRecord[event.target.name] = event.target.value;\r\n    //     }\r\n    //     this.setState({ selectedRecord });\r\n    // }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n\r\n            let isOpen = false;\r\n            if (this.props.errorCode !== undefined && (this.state.operation === \"create\" || this.state.operation === \"update\")) {\r\n                isOpen = true;\r\n            }\r\n            let { dataState, dataStateParticipants } = this.state;\r\n            if(this.props.dataState === undefined)\r\n            {\r\n                dataState={skip: 0,take:this.props.settings? parseInt(this.props.settings[14]) : 5,filter:undefined,sort:undefined}\r\n                dataStateParticipants = { skip: 0, take :this.props.settings? parseInt(this.props.settings[14]) : 5,filter:undefined,sort:undefined }\r\n            } \r\n            this.setState({ isOpen, activeTab: 'Trainingdocument-tab',dataState, dataStateParticipants });\r\n        }\r\n\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n        let { dataState, dataStateParticipants } = this.state;\r\n        if (this.props.dataState !== previousProps.dataState && this.props.dataState !== dataState) {\r\n            dataState = { skip: 0,take : this.props.settings? parseInt(this.props.settings[14]) : 5 }\r\n            dataStateParticipants = { skip: 0 , take:this.props.settings? parseInt(this.props.settings[14]) : 5}\r\n            this.setState({ dataState, dataStateParticipants });\r\n        }\r\n     \r\n        // {\r\n        //     dataState={...dataState,filter:undefined,sort:undefined}\r\n        //     dataStateMaterial={...dataStateMaterial,filter:undefined,sort:undefined}\r\n        //     this.setState({ dataState, dataStateMaterial });\r\n        // }\r\n        if (this.props.trainingDocument !== previousProps.trainingDocument || this.props.participants !== previousProps.participants) {\r\n\r\n            // const trainingDocument = constructOptionList(this.props.trainingDocument || [], \"ntrainingdoccode\",\r\n            //     \"sfilename\", undefined, undefined, undefined);\r\n            //const trainingDocumentList = trainingDocument.get(\"OptionList\");\r\n\r\n            const participants = constructOptionList(this.props.participants || [], \"nparticipantcode\",\r\n                \"sfullname\", undefined, undefined, undefined);\r\n            const participantsList = participants.get(\"OptionList\");\r\n\r\n            this.setState({ //trainingDocument: trainingDocumentList,\r\n                 participants: participantsList });\r\n        }\r\n    }\r\n\r\n    onTabChange = (tabProps) =>{\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {screenName}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    // onSaveClick = (saveType, formRef) => {\r\n    //     //add / edit  \r\n    //     let inputParam = {};\r\n\r\n    //     if (this.props.screenName === \"SupplierCategory\") {\r\n    //         inputParam = this.saveSupplierCategory(saveType, formRef);\r\n    //     }\r\n    //     else if (this.props.screenName === \"MaterialCategory\") {\r\n    //         inputParam = this.saveMaterial(saveType, formRef);\r\n    //     }\r\n\r\n\r\n    //     if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: {\r\n    //                 loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n    //             }\r\n    //         }\r\n    //         this.props.updateStore(updateInfo);\r\n    //     }\r\n    //     else {\r\n    //         this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n    //     }\r\n\r\n    // }\r\n\r\n    // saveSupplierCategory(saveType, formRef) {\r\n    //     let inputData = [];\r\n    //     inputData[\"userinfo\"] = this.props.userInfo;\r\n    //     inputData[\"supplier\"] = this.props.masterData.SelectedSupplier;\r\n    //     inputData[\"suppliermatrix\"] = {};\r\n    //     let dataState = { skip: 0 , take :this.props.settings? parseInt(this.props.settings[14]) : 5 };\r\n\r\n    //     let suppliermatrixArray = []\r\n    //     suppliermatrixArray = this.state.selectedRecord.nsuppliercatcode.map(item => {\r\n    //         let suppliermat = {}\r\n    //         suppliermat[\"nsuppliercode\"] = this.props.masterData.SelectedSupplier.nsuppliercode; //this.state.selectedRecord[\"nmahcode\"] ? this.state.selectedRecord[\"nmahcode\"].value : \"\";\r\n    //         suppliermat[\"ntypecode\"] = 1;\r\n    //         suppliermat[\"sremarks\"] = \"\";\r\n    //         suppliermat[\"ntransactionstatus\"] = transactionStatus.ACTIVE;\r\n    //         suppliermat[\"ncategorycode\"] = item.value\r\n    //         //suppliermatrixArray.push(suppliermat);\r\n    //         return suppliermat;\r\n    //     });\r\n    //     inputData['suppliermatrix'] = suppliermatrixArray;\r\n\r\n    //     const inputParam = {\r\n    //         classUrl: \"suppliermatrix\",\r\n    //         methodUrl: \"SupplierMatrix\",\r\n    //         inputData: inputData,\r\n    //         operation: this.props.operation, saveType, formRef, dataState\r\n    //     }\r\n    //     return inputParam;\r\n    // }\r\n\r\n    // saveMaterial(saveType, formRef) {\r\n    //     let inputData = [];\r\n    //     inputData[\"userinfo\"] = this.props.userInfo;\r\n    //     inputData[\"supplier\"] = this.props.masterData.SelectedSupplier;\r\n    //     inputData[\"suppliermatrix\"] = {};\r\n    //     let dataStateMaterial = undefined;\r\n\r\n    //     let suppliermatrixArray = []\r\n    //     suppliermatrixArray = this.state.selectedRecord.nmaterialcatcode.map(item => {\r\n    //         let suppliermat = {}\r\n    //         suppliermat[\"nsuppliercode\"] = this.props.masterData.SelectedSupplier.nsuppliercode; //this.state.selectedRecord[\"nmahcode\"] ? this.state.selectedRecord[\"nmahcode\"].value : \"\";\r\n    //         suppliermat[\"ntypecode\"] = 2;\r\n    //         suppliermat[\"sremarks\"] = \"\";\r\n    //         suppliermat[\"ntransactionstatus\"] = transactionStatus.ACTIVE;\r\n    //         suppliermat[\"ncategorycode\"] = item.value\r\n    //         //suppliermatrixArray.push(suppliermat);\r\n    //         return suppliermat;\r\n    //     });\r\n    //     inputData['suppliermatrix'] = suppliermatrixArray;\r\n\r\n    //     const inputParam = {\r\n    //         classUrl: \"suppliermatrix\",\r\n    //         methodUrl: \"SupplierMatrix\",\r\n    //         inputData: inputData,\r\n    //         operation: this.props.operation, saveType, formRef, dataStateMaterial\r\n    //     }\r\n    //     return inputParam;\r\n    // }\r\n\r\n\r\n    // deleteRecord = (supplierparam) => {\r\n    //     if (this.props.masterData.SelectedSupplier.ntransactionstatus === transactionStatus.RETIRED) {\r\n    //         toast.warn(this.props.intl.formatMessage({ id: this.props.masterData.SelectedSupplier.stranstatus }));\r\n    //     }\r\n    //     else {\r\n    //         const inputParam = {\r\n    //             classUrl: \"suppliermatrix\",\r\n    //             methodUrl: supplierparam.methodUrl,\r\n    //             inputData: {\r\n    //                 [supplierparam.methodUrl.toLowerCase()]: supplierparam.selectedRecord,\r\n    //                 \"userinfo\": this.props.userInfo,\r\n\r\n    //             },\r\n    //             operation: supplierparam.operation,\r\n    //             //dataState: this.state.dataState,\r\n    //             //dataStateMaterial: this.state.dataStateMaterial\r\n    //             dataState: this.state.dataState\r\n    //         }\r\n\r\n    //         if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, supplierparam.ncontrolCode)) {\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n    //                     openChildModal: true, screenName: supplierparam.screenName, operation: supplierparam.operation\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         }\r\n    //         else {\r\n    //             this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // validateEsign = () => {\r\n    //     const inputParam = {\r\n    //         inputData: {\r\n    //             \"userinfo\": {\r\n    //                 ...this.props.userInfo,\r\n    //                 sreason: this.state.selectedRecord[\"esigncomments\"]\r\n    //             },\r\n    //             password: this.state.selectedRecord[\"esignpassword\"]\r\n    //         },\r\n    //         screenData: this.props.screenData\r\n    //     }\r\n    //     this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    // }\r\n}\r\n\r\nexport default connect(mapStateToProps,{})(injectIntl(TrainingUpdateChildTab));\r\n\r\n"]},"metadata":{},"sourceType":"module"}