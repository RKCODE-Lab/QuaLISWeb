{"ast":null,"code":"import Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { constructOptionList, sortData } from \"../components/CommonScript\";\nimport { transactionStatus } from \"../components/Enumeration\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { intl } from '../components/App';\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nexport function getSeqNoFormats(inputObj, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let URL = [rsapi.post('/registrationsubtype/getAllSeqNoFormats', {\n      userinfo: inputObj.userInfo\n    })];\n    URL.push(rsapi.post('/registrationsubtype/getPeriods', {\n      userinfo: inputObj.userInfo\n    }));\n    Axios.all(URL).then(response => {\n      let periodMap = constructOptionList(response[1].data || [], 'nperiodcode', 'speriodname');\n      let periodList = periodMap.get(\"OptionList\");\n      const periodDefault = periodMap.get(\"DefaultValue\");\n\n      if (periodDefault !== undefined) {\n        selectedRecord = {\n          \"nperiodcode\": {\n            \"value\": periodDefault.value,\n            \"label\": periodDefault.label\n          }\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          existingFormats: response[0].data,\n          periodList,\n          selectedRecord,\n          openChildModal: true,\n          loading: false,\n          operation: 'create',\n          screenName: \"Version\",\n          ncontrolcode: inputObj.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationSubTypeOnReload(userInfo, searchRef) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('registrationsubtype/getRegistrationSubType', {\n      userinfo: userInfo\n    }).then(res => {\n      let masterData = { ...res.data\n      };\n\n      if (searchRef !== undefined && searchRef.current !== null) {\n        searchRef.current.value = \"\"; //masterData['searchedData'] = undefined\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          reloadData: true\n        }\n      });\n    }).catch(err => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      if (err.response.status === 500) toast.error(err.message);else toast.warn(err.response.data);\n    });\n  };\n}\nexport function getRegistrationSubTypeMaster(selectedSampleType, selectedRegType, masterData, userInfo, searchRef) {\n  return function (dispatch) {\n    if (selectedRegType.value === undefined) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTALLVALUESINFILTER\"\n      }));\n    } else {\n      dispatch(initRequest(true));\n      rsapi.post('registrationsubtype/getRegistrationSubTypeMaster', {\n        nregtypecode: selectedRegType.value,\n        userinfo: userInfo\n      }).then(response => {\n        masterData = { ...masterData,\n          ...response.data\n        };\n\n        if (searchRef !== undefined && searchRef.current !== null) {\n          searchRef.current.value = \"\";\n          masterData['searchedData'] = undefined;\n        }\n\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            realSampleType: selectedSampleType,\n            realRegtype: selectedRegType,\n            loading: false\n          }\n        });\n      }).catch(err => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        if (err.response.status === 500) toast.error(err.message);else toast.warn(err.response.data);\n      });\n    }\n  };\n}\nexport function selectRegistrationSubType(selectedRegSubType, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('/registrationsubtype/getRegistrationSubTypeById', {\n      nregsubtypecode: selectedRegSubType.nregsubtypecode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        selectedRegistrationSubType: selectedRegSubType\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(err => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      if (err.response.status === 500) toast.error(err.message);else toast.warn(err.response.data);\n    });\n  };\n}\nexport function getEditRegSubType(nregsubtypecode, userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('/registrationsubtype/getEditRegSubType', {\n      nregsubtypecode,\n      userinfo: userInfo\n    }).then(response => {\n      let selectedRecord = {\n        nregsubtypecode: response.data.nregsubtypecode,\n        nregtypecode: response.data.nregtypecode,\n        ...response.data.jsondata\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          loading: false,\n          openModal: true,\n          screenName: \"IDS_REGISTRATIONSUBTYPE\",\n          ncontrolcode,\n          operation: \"update\"\n        }\n      });\n    }).catch(err => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      if (err.response.status === 500) toast.error(err.message);else toast.warn(err.response.data);\n    });\n  };\n}\nexport function getRegSubTypeDetails(inputObj) {\n  let {\n    version,\n    masterData,\n    userInfo\n  } = inputObj;\n  return function (dispatch) {\n    if (!(masterData.selectedVersion.nregsubtypeversioncode === version.nregsubtypeversioncode)) {\n      dispatch(initRequest(true));\n      rsapi.post('registrationsubtype/getVersionDetails', {\n        userinfo: userInfo,\n        nregsubtypeversioncode: version.nregsubtypeversioncode\n      }).then(res => {\n        masterData = { ...masterData,\n          selectedVersion: res.data\n        };\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function getVersionById(primaryKey, userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let URL = [];\n    URL.push(rsapi.post('/registrationsubtype/getAllSeqNoFormats', {\n      userinfo: userInfo\n    }));\n    URL.push(rsapi.post('/registrationsubtype/getPeriods', {\n      userinfo: userInfo\n    }));\n    URL.push(rsapi.post('registrationsubtype/getVersionDetails', {\n      userinfo: userInfo,\n      nregsubtypeversioncode: primaryKey\n    }));\n    Axios.all(URL).then(res => {\n      if (res[2].data.ntransactionstatus === transactionStatus.DRAFT) {\n        let periodList = constructOptionList(res[1].data || [], 'nperiodcode', 'speriodname').get(\"OptionList\");\n        let nperiodcode = periodList.filter(period => period.value === res[2].data.nperiodcode);\n        let selectedRecord = {};\n        selectedRecord = { ...res[2].data.jsondata,\n          nperiodcode,\n          nregsubtypeversioncode: primaryKey\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            existingFormats: res[0].data,\n            periodList,\n            selectedRecord,\n            openChildModal: true,\n            operation: 'update',\n            ncontrolcode,\n            loading: false,\n            screenName: \"Version\"\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterStatus: \"IDS_SELECTDRAFTRECORD\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationTypeBySampleType(comboData, masterData, userInfo, realRegtype) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('registrationtype/getRegistrationTypeBySampleType', {\n      nsampletypecode: comboData.value,\n      userinfo: userInfo\n    }).then(res => {\n      masterData = { ...masterData,\n        RegistrationTypes: res.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedSampleType: comboData,\n          realRegtype,\n          loading: false,\n          reloadData: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/RegistrationSubTypeAction.js"],"names":["Axios","toast","constructOptionList","sortData","transactionStatus","rsapi","initRequest","intl","DEFAULT_RETURN","getSeqNoFormats","inputObj","selectedRecord","dispatch","URL","post","userinfo","userInfo","push","all","then","response","periodMap","data","periodList","get","periodDefault","undefined","value","label","type","payload","existingFormats","openChildModal","loading","operation","screenName","ncontrolcode","catch","error","status","message","warn","getRegistrationSubTypeOnReload","searchRef","res","masterData","current","reloadData","err","getRegistrationSubTypeMaster","selectedSampleType","selectedRegType","formatMessage","id","nregtypecode","realSampleType","realRegtype","selectRegistrationSubType","selectedRegSubType","nregsubtypecode","selectedRegistrationSubType","getEditRegSubType","jsondata","openModal","getRegSubTypeDetails","version","selectedVersion","nregsubtypeversioncode","getVersionById","primaryKey","ntransactionstatus","DRAFT","nperiodcode","filter","period","masterStatus","getRegistrationTypeBySampleType","comboData","nsampletypecode","RegistrationTypes"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { constructOptionList, sortData } from \"../components/CommonScript\";\r\nimport { transactionStatus } from \"../components/Enumeration\";\r\nimport rsapi from \"../rsapi\"\r\nimport { initRequest } from \"./LoginAction\"\r\nimport { intl } from '../components/App';\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\n\r\nexport function getSeqNoFormats(inputObj,selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let URL = [rsapi.post('/registrationsubtype/getAllSeqNoFormats', { userinfo: inputObj.userInfo })]\r\n        URL.push(rsapi.post('/registrationsubtype/getPeriods', { userinfo: inputObj.userInfo }))\r\n        Axios.all(URL)\r\n            .then(response => {\r\n                let periodMap = constructOptionList(response[1].data || [], 'nperiodcode', 'speriodname');\r\n                let periodList = periodMap.get(\"OptionList\")\r\n                const periodDefault = periodMap.get(\"DefaultValue\");\r\n\r\n                if (periodDefault !== undefined) {\r\n                    selectedRecord = {\r\n                        \"nperiodcode\": {\r\n                            \"value\": periodDefault.value,\r\n                            \"label\": periodDefault.label\r\n                        },\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        existingFormats: response[0].data,\r\n                        periodList,\r\n                        selectedRecord,\r\n                        openChildModal: true,\r\n                        loading: false,\r\n                        operation: 'create',\r\n                        screenName: \"Version\",\r\n                        ncontrolcode:inputObj.ncontrolcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationSubTypeOnReload(userInfo,searchRef) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('registrationsubtype/getRegistrationSubType', { userinfo: userInfo })\r\n            .then(res => {\r\n                let masterData = {\r\n                    ...res.data\r\n                }\r\n                if (searchRef !== undefined && searchRef.current !== null) {\r\n                    searchRef.current.value = \"\";\r\n                    //masterData['searchedData'] = undefined\r\n                }\r\n                sortData(masterData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        reloadData: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: { loading: false }\r\n                })\r\n                if (err.response.status === 500)\r\n                    toast.error(err.message);\r\n                else\r\n                    toast.warn(err.response.data)\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationSubTypeMaster(selectedSampleType, selectedRegType, masterData, userInfo,searchRef) {\r\n    return function (dispatch) {\r\n        if(selectedRegType.value === undefined){\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }));\r\n        }\r\n        else{\r\n            dispatch(initRequest(true));\r\n            rsapi.post('registrationsubtype/getRegistrationSubTypeMaster', { nregtypecode: selectedRegType.value, userinfo: userInfo })\r\n                .then(response => {\r\n                    masterData = {\r\n                        ...masterData,\r\n                        ...response.data\r\n                    }\r\n                    if (searchRef !== undefined && searchRef.current !== null) {\r\n                        searchRef.current.value = \"\";\r\n                        masterData['searchedData'] = undefined\r\n                    }\r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            realSampleType: selectedSampleType,\r\n                            realRegtype: selectedRegType,\r\n                            loading: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(err => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: { loading: false }\r\n                    })\r\n                    if (err.response.status === 500)\r\n                        toast.error(err.message);\r\n                    else\r\n                        toast.warn(err.response.data)\r\n                })\r\n            }\r\n    }\r\n}\r\nexport function selectRegistrationSubType(selectedRegSubType, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('/registrationsubtype/getRegistrationSubTypeById', { nregsubtypecode: selectedRegSubType.nregsubtypecode, userinfo: userInfo })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    selectedRegistrationSubType: selectedRegSubType\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: { loading: false }\r\n                })\r\n                if (err.response.status === 500)\r\n                    toast.error(err.message);\r\n                else\r\n                    toast.warn(err.response.data)\r\n            })\r\n    }\r\n}\r\nexport function getEditRegSubType(nregsubtypecode, userInfo, ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('/registrationsubtype/getEditRegSubType', { nregsubtypecode, userinfo: userInfo })\r\n            .then(response => {\r\n                let selectedRecord = {\r\n                    nregsubtypecode: response.data.nregsubtypecode,\r\n                    nregtypecode: response.data.nregtypecode,\r\n                    ...response.data.jsondata\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        openModal: true,\r\n                        screenName: \"IDS_REGISTRATIONSUBTYPE\",\r\n                        ncontrolcode,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: { loading: false }\r\n                })\r\n                if (err.response.status === 500)\r\n                    toast.error(err.message);\r\n                else\r\n                    toast.warn(err.response.data)\r\n            })\r\n    }\r\n}\r\nexport function getRegSubTypeDetails(inputObj) {\r\n    let { version, masterData, userInfo } = inputObj;\r\n    return function (dispatch) {\r\n        if (!(masterData.selectedVersion.nregsubtypeversioncode === version.nregsubtypeversioncode)) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post('registrationsubtype/getVersionDetails', { userinfo: userInfo, nregsubtypeversioncode: version.nregsubtypeversioncode })\r\n                .then(res => {\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedVersion: res.data\r\n                    }\r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\nexport function getVersionById(primaryKey, userInfo, ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let URL = []\r\n        URL.push(rsapi.post('/registrationsubtype/getAllSeqNoFormats', { userinfo: userInfo }))\r\n        URL.push(rsapi.post('/registrationsubtype/getPeriods', { userinfo: userInfo }))\r\n        URL.push(rsapi.post('registrationsubtype/getVersionDetails', { userinfo: userInfo, nregsubtypeversioncode: primaryKey }))\r\n        Axios.all(URL)\r\n            .then(res => {\r\n                if (res[2].data.ntransactionstatus === transactionStatus.DRAFT) {\r\n                    let periodList = constructOptionList(res[1].data || [], 'nperiodcode', 'speriodname').get(\"OptionList\")\r\n                    let nperiodcode = periodList.filter(period => period.value === res[2].data.nperiodcode)\r\n                    let selectedRecord = {}\r\n                    selectedRecord = {\r\n                        ...res[2].data.jsondata,\r\n                        nperiodcode,\r\n                        nregsubtypeversioncode: primaryKey\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            existingFormats: res[0].data,\r\n                            periodList,\r\n                            selectedRecord,\r\n                            openChildModal: true,\r\n                            operation: 'update',\r\n                            ncontrolcode,\r\n                            loading: false,\r\n                            screenName:\"Version\"\r\n                        }\r\n                    });\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, masterStatus: \"IDS_SELECTDRAFTRECORD\" } });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationTypeBySampleType(comboData, masterData, userInfo, realRegtype) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('registrationtype/getRegistrationTypeBySampleType', { nsampletypecode: comboData.value, userinfo: userInfo })\r\n            .then(res => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    RegistrationTypes: res.data\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedSampleType: comboData,\r\n                        realRegtype,\r\n                        loading: false,\r\n                        reloadData: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}