{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\Material\\\\MaterialInventory.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Row, Col, Nav, Card, FormGroup, FormLabel } from 'react-bootstrap';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faPencilAlt, faCalendar, faEye } from '@fortawesome/free-solid-svg-icons';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport ModalShow from '../../components/ModalShow.jsx';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport { showEsign, getControlMap, constructOptionList, rearrangeDateFormatDateOnly, sortData, getSameRecordFromTwoArrays, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, constructjsonOptionList, convertDateTimetoString, rearrangeDateFormat, comboChild, convertDateTimetoStringDBFormat } from '../../components/CommonScript';\nimport { callService, updateStore, crudMaster, filterColumnData, validateEsignCredential, viewAttachment, initialcombochangeMaterialInvget, getMaterialInventoryByID, getAddMaterialInventoryPopup, getMaterialInventoryDetails, addMaterialInventoryFile, updateMaterialStatus, openDatePopup, getQuantityTransactionPopup, getMaterialChildValues, getQuantityTransactionOnchange } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus, attachmentType, designProperties } from '../../components/Enumeration';\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ReactTooltip from 'react-tooltip';\nimport MaterialFilter from './MaterialFilter';\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout';\nimport { Affix } from 'rsuite';\nimport AddMaterialOpenDate from './AddMaterialOpenDate';\nimport AddMaterialFile from './AddMaterialFile';\nimport InvenotryTransaction from './InvenotryTransaction';\nimport MaterialInvFileTab from './MaterialInvFileTab';\nimport { MediaLabel, ProductList } from '../product/product.styled';\nimport SampleInfoView from '../approval/SampleInfoView';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass MaterialInventory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n      event.dataItem.expanded = !isExpanded;\n      this.setState({ ...this.state\n      });\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.quantityTransaction = param => {\n      if (this.props.Login.masterData['SelectedMaterialInventory'].jsondata.ntranscode === transactionStatus.RELEASED) {\n        let ncontrolCode = this.props.Login.ncontrolCode;\n        let openModal = this.props.Login.openModal;\n        openModal = true;\n        ncontrolCode = param;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal\n          }\n        };\n        this.props.getQuantityTransactionPopup(this.props.Login.masterData, this.props.Login.userInfo, updateInfo, ncontrolCode);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRELEASEDINVENTORY\"\n        }));\n      }\n    };\n\n    this.viewQuantityTrans = viewQuantityTransdetails => {\n      let showModalPopup = this.props.Login.showModalPopup;\n      let ModaTitle = this.props.Login.ModaTitle;\n      showModalPopup = true;\n      ModaTitle = 'IDS_QUANTITYTRANSACTION';\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showModalPopup,\n          ModaTitle,\n          viewQuantityTransdetails\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.accordianDesign = (Template, selectedmasterlistmain1) => {\n      let selectedmasterlistmain = [];\n      selectedmasterlistmain.push(selectedmasterlistmain1);\n      let designaccordian = [];\n      Template.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.inputtype === 'combo') {\n              if (component.label !== undefined) {\n                designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                  md: 4,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 589,\n                    columnNumber: 50\n                  }\n                }, /*#__PURE__*/React.createElement(FormGroup, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 590,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(FormLabel, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 591,\n                    columnNumber: 37\n                  }\n                }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                  id: [component.label],\n                  message: [component.label],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 591,\n                    columnNumber: 48\n                  }\n                })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 592,\n                    columnNumber: 37\n                  }\n                }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] ? selectedmasterlistmain[0][component.label]['label'] : \"-\"))));\n              }\n            } else if (component.inputtype === 'date') {\n              if (component.label !== undefined) {\n                designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                  md: 4,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 604,\n                    columnNumber: 50\n                  }\n                }, /*#__PURE__*/React.createElement(FormGroup, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 605,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(FormLabel, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 606,\n                    columnNumber: 37\n                  }\n                }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                  id: [component.label],\n                  message: [component.label],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 606,\n                    columnNumber: 48\n                  }\n                })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 607,\n                    columnNumber: 37\n                  }\n                }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] ? rearrangeDateFormatDateOnly(this.props.Login.userInfo, selectedmasterlistmain[0][component.label]) // selectedmasterlistmain[0][component.label]\n                : \"-\"))));\n              }\n            } else if (component.inputtype === 'toggle') {\n              if (component.label !== undefined) {\n                designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                  md: 4,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 623,\n                    columnNumber: 50\n                  }\n                }, /*#__PURE__*/React.createElement(FormGroup, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 624,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(FormLabel, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 625,\n                    columnNumber: 37\n                  }\n                }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                  id: [component.label],\n                  message: [component.label],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 625,\n                    columnNumber: 48\n                  }\n                })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 626,\n                    columnNumber: 37\n                  }\n                }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] && selectedmasterlistmain[0][component.label] === transactionStatus.YES ? 'Yes' : 'No'))));\n              }\n            } else {\n              if (component.label !== undefined) {\n                if (!component.needAccordian) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 640,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 641,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 643,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [component.label],\n                    message: [component.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 643,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 644,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] ? selectedmasterlistmain[0][component.label] : \"-\"))));\n                }\n              }\n            }\n\n            component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n              if (componentrow.inputtype === 'combo') {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 658,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 659,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 660,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 660,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 661,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] ? selectedmasterlistmain[0][componentrow.label]['label'] : \"-\"))));\n                }\n              } else if (componentrow.inputtype === 'date') {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 673,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 674,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 675,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 675,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 676,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] ? selectedmasterlistmain[0][componentrow.label] : \"-\"))));\n                }\n              } else if (componentrow.inputtype === 'toggle') {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 688,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 689,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 690,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 690,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 691,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] && selectedmasterlistmain[0][componentrow.label]['label'] === transactionStatus.YES ? 'Yes' : 'No'))));\n                }\n              } else {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 704,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 705,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 706,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 706,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 707,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] ? selectedmasterlistmain[0][componentrow.label] : \"-\"))));\n                }\n              }\n            });\n          });\n        });\n      });\n      return designaccordian;\n    };\n\n    this.onComboChangeopendate = (comboData, control) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[control] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChangedynamic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.inputtype === 'date') {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[`tz${control.label}`] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } else if (control.parent && control.parent === true) {\n        let data = [];\n        const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata;\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.inputtype === 'combo') {\n                data.push(component);\n              }\n\n              component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n                if (componentrow.inputtype === 'combo') {\n                  data.push(componentrow);\n                }\n              });\n            });\n          });\n        });\n        const comboComponents = data;\n        let parentcolumnlist = [];\n        comboComponents.map(columnList => {\n          if (columnList.hasOwnProperty('child')) {\n            parentcolumnlist.push(columnList);\n          }\n        });\n        let childColumnList = {};\n        parentcolumnlist.map(columnList => {\n          const val = comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n        });\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData.value,\n          item: comboData.item\n        };\n        this.props.getMaterialChildValues(inputParem, this.props.Login.userInfo, selectedRecord, parentcolumnlist, childColumnList, this.props.Login.templateData.comboData, Object.keys(childColumnList)[0], childColumnList[Object.keys(childColumnList)[0]][0].label, this.props.Login.masterData);\n      } else {\n        if (control.label === 'IDS_TRANSACTIONTYPE') {\n          this.props.getQuantityTransactionOnchange(comboData, this.props.Login.masterData, this.props.Login.userInfo, selectedRecord, this.props.Login.templateData);\n        } else {\n          selectedRecord[control.label] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.viewMaterialInventoryDetails = () => {\n      console.log('this.state.SelectedMaterialInventory :', this.state.SelectedMaterialInventory);\n      console.log('tthis.props.Login.showModalPopup :', this.props.Login.masterData.SelectedMaterialInventory);\n\n      if (this.props.Login.masterData.SelectedMaterialInventory) {\n        if (this.props.Login.masterData.SelectedMaterialInventory.length !== 0) {\n          // let showModalPopup = this.props.Login.showModalPopup;\n          let showInventoryDetails = this.state.showInventoryDetails;\n          let ModaTitle = this.props.Login.ModaTitle; //showModalPopup = true;\n\n          if (showInventoryDetails === undefined) {\n            this.setState({\n              showInventoryDetails: true\n            });\n          }\n\n          if (showInventoryDetails) {\n            this.setState({\n              showInventoryDetails: false\n            });\n          } else {\n            this.setState({\n              showInventoryDetails: true\n            });\n          } // ModaTitle = 'IDS_MATERIALINVENTORYDETAILS'\n          // const updateInfo = {\n          //     typeName: DEFAULT_RETURN,\n          //    // data: { showModalPopup, ModaTitle }\n          //    data: { showInventoryDetails, ModaTitle }\n          // }\n          // this.props.updateStore(updateInfo);\n\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTMATERIALINVENTORY\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTMATERIALINVENTORY\"\n        }));\n      }\n    };\n\n    this.closeModalShow = () => {\n      let showModalPopup = this.props.Login.showModalPopup;\n      showModalPopup = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showModalPopup\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onDropMaterialFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\"\n      });\n    };\n\n    this.onSaveMaterialFile = () => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let testFileArray = [];\n      let testFile = {\n        nmaterialinventorycode: this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode,\n        nmaterialinventoryfilecode: selectedRecord.nmaterialinventoryfilecode ? selectedRecord.nmaterialinventoryfilecode : 0,\n        nstatus: transactionStatus.ACTIVE,\n        nattachmenttypecode,\n        ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, testFile);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n            const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntestfilecode && selectedRecord.ntestfilecode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = file.name;\n            tempData[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            tempData[\"dcreateddate\"] = this.props.Login.dcreateddate && convertDateTimetoStringDBFormat(this.props.Login.dcreateddate, this.props.Login.userInfo);\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            testFileArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          testFile[\"sfilename\"] = selectedRecord.sfilename;\n          testFile[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\n          testFile[\"nlinkcode\"] = transactionStatus.NA;\n          testFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          testFile[\"nfilesize\"] = selectedRecord.nfilesize;\n          testFile[\"dcreateddate\"] = this.props.Login.dcreateddate && convertDateTimetoStringDBFormat(this.props.Login.dcreateddate, this.props.Login.userInfo);\n          testFileArray.push(testFile);\n        }\n      } else {\n        testFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\n        testFile[\"sdescription\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\n        testFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        testFile[\"dcreateddate\"] = this.props.Login.dcreateddate && convertDateTimetoStringDBFormat(this.props.Login.dcreateddate, this.props.Login.userInfo);\n        testFile[\"ssystemfilename\"] = \"\";\n        testFile[\"nfilesize\"] = 0;\n        testFileArray.push(testFile);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"materialinventoryfile\", JSON.stringify(testFileArray[0]));\n      let inputParam;\n\n      if (this.props.Login.operation === 'create') {\n        inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo\n          },\n          formData: formData,\n          isFileupload: true,\n          operation: \"create\",\n          classUrl: \"materialinventory\",\n          methodUrl: \"MaterialInventoryFile\"\n        };\n      } else {\n        inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo\n          },\n          formData: formData,\n          isFileupload: true,\n          operation: \"update\",\n          classUrl: \"materialinventory\",\n          methodUrl: \"MaterialInventoryFile\"\n        };\n      }\n\n      return inputParam;\n    };\n\n    this.dynamicmandatoryFeilds = Template => {\n      let mandatoryFeildsMaterial = [];\n      Template.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.mandatory) {\n              if (component.inputtype === 'combo') {\n                mandatoryFeildsMaterial.push({\n                  \"idsName\": [component.label],\n                  \"dataField\": [component.label],\n                  \"mandatoryLabel\": \"IDS_SELECT\",\n                  \"controlType\": \"selectbox\"\n                });\n              } else {\n                mandatoryFeildsMaterial.push({\n                  \"idsName\": [component.label],\n                  \"dataField\": [component.label],\n                  \"mandatoryLabel\": \"IDS_ENTER\",\n                  \"controlType\": \"selectbox\"\n                });\n              }\n            }\n\n            component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n              if (componentrow.mandatory) {\n                if (componentrow.inputtype === 'combo') {\n                  mandatoryFeildsMaterial.push({\n                    \"idsName\": [componentrow.label],\n                    \"dataField\": [componentrow.label],\n                    \"mandatoryLabel\": \"IDS_SELECT\",\n                    \"controlType\": \"selectbox\"\n                  });\n                } else {\n                  mandatoryFeildsMaterial.push({\n                    \"idsName\": [componentrow.label],\n                    \"dataField\": [componentrow.label],\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"selectbox\"\n                  });\n                }\n              }\n            });\n          });\n        });\n      });\n      return mandatoryFeildsMaterial;\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      {\n        let dataresultarr = []; //let IDS_TRANSACTIONDATE;\n\n        this.props.Login.masterData[\"MaterialInventoryTrans\"] && this.props.Login.masterData[\"MaterialInventoryTrans\"].map((temp, index) => {\n          // temp.jsondata['IDS_TRANSACTIONDATE'] =\n          this.props.Login.masterData[\"MaterialInventoryTrans\"][index].jsondata['IDS_TRANSACTIONDATE'] = rearrangeDateFormatDateOnly(this.props.Login.userInfo, temp.jsondata['IDS_TRANSACTIONDATE']);\n          dataresultarr.push(temp.jsondata);\n        });\n        tabMap.set(\"IDS_INVENTORYTRANSACTION\", /*#__PURE__*/React.createElement(InvenotryTransaction, {\n          Template: this.props.Login.masterData.QuantityTransactionTemplate && this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          dataResult: process(this.props.Login.masterData[\"MaterialInventoryTrans\"], this.props.screenName === undefined || this.props.screenName === \"IDS_QUANTITYTRANSACTION\" ? this.state.sectionDataState : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.props.screenName === undefined || this.props.screenname === \"IDS_QUANTITYTRANSACTION\" ? this.state.sectionDataState : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: event => this.setState({\n            sectionDataState: event.dataState\n          }),\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          getTestDetails: this.props.getTestDetails,\n          SelectedMaterialInventory: this.props.Login.masterData.SelectedMaterialInventory,\n          quantityTransaction: this.quantityTransaction // dataState={{ skip: 0, take: 10 }}\n          ,\n          deleteRecord: this.deleteRecordmain,\n          QuantityTransactionForGrid: this.gridfillingColumn(JSON.parse(this.props.Login.masterData.DesignMappedFeilds && this.props.Login.masterData.DesignMappedFeilds['jsondata'] !== null && this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['QuantityTransactionForGrid']),\n          QuantityTransactionForExpandedGrid: this.gridfillingColumn(JSON.parse(this.props.Login.masterData.DesignMappedFeilds && this.props.Login.masterData.DesignMappedFeilds['jsondata'] !== null && this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['QuantityTransactionForExpandedGrid']),\n          viewQuantityTrans: this.viewQuantityTrans,\n          selectedRecord: this.props.Login.selectedRecord,\n          intl: this.props.intl,\n          DesignMappedFeilds: JSON.parse(this.props.Login.masterData.DesignMappedFeilds && this.props.Login.masterData.DesignMappedFeilds['jsondata'] !== null && this.props.Login.masterData.DesignMappedFeilds['jsondata'].value),\n          screenName: \"IDS_QUANTITYTRANSACTION\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1016,\n            columnNumber: 17\n          }\n        }));\n        tabMap.set(\"IDS_MATERIALINVENTORYFILE\", /*#__PURE__*/React.createElement(MaterialInvFileTab, {\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          userInfo: this.props.Login.userInfo,\n          deleteRecord: this.deleteRecordmain,\n          MaterialFile: this.props.Login.masterData.MaterialInventoryFile || [],\n          addMaterialFile: param => this.props.addMaterialInventoryFile(param, this.props.Login.masterData.SelectedMaterialInventory),\n          viewMaterialFile: this.viewMaterialFile,\n          screenName: \"IDS_MATERIALINVENTORYFILE\",\n          settings: this.props.settings,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1053,\n            columnNumber: 17\n          }\n        }));\n      }\n      return tabMap;\n    };\n\n    this.onInputOnChangeFile = (event, optional2) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let isSelectedRecordChange = this.state.isSelectedRecordChange;\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? optional2[0] : optional2[1];\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = optional2;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.updateMaterialStatus = (buttonId, nflag) => {\n      let inputParam = {};\n      let inputData = [];\n      let operation;\n      let masterData = this.props.Login.masterData;\n      inputData[\"nflag\"] = nflag;\n      operation = nflag === 1 ? 'RELEASED' : 'RETIRE';\n      inputData[\"nmaterialinventorycode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialinventorycode;\n      inputData[\"nmaterialcode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialcode;\n      inputData[\"nmaterialtypecode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialtypecode;\n      inputData[\"nmaterialcatcode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialcatcode;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputParam = {\n        classUrl: \"materialinventory\",\n        methodUrl: \"MaterialStatus\",\n        inputData: inputData,\n        operation: 'update',\n        selectedRecord: this.state.selectedRecord,\n        searchRef: this.searchRef,\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, buttonId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal: true,\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecordmain = deleteParam => {\n      const methodUrl = deleteParam.methodUrl;\n      const selected = JSON.stringify(deleteParam.selectedRecord[\"jsondata\"]);\n      let dataState = undefined;\n\n      if (this.props.screenName === \"IDS_SECTION\") {\n        dataState = this.state.sectionDataState;\n      } else if (this.props.screenName === \"IDS_METHOD\") {\n        dataState = this.state.methodDataState;\n      } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\n        dataState = this.state.instrumentCatDataState;\n      }\n\n      const inputParam = {\n        inputData: {\n          ncontrolCode: deleteParam.ncontrolCode,\n          [methodUrl.toLowerCase()]: selected,\n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: \"materialinventory\",\n        operation: deleteParam.operation,\n        ncontrolCode: deleteParam.ncontrolCode,\n        methodUrl: methodUrl,\n        screenName: \"IDS_MATERIALINVENTORY\",\n        dataState\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_MATERIALINVENTORY\",\n            operation: deleteParam.operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n      let inputData = [];\n\n      if (this.state.selectedMaterialCat !== undefined ? this.state.selectedMaterialCat[\"nmaterialcatcode\"] !== \"\" : false) {\n        if (this.state.selectedMaterialcombo !== undefined ? this.state.selectedMaterialcombo[\"nmaterialcode\"] !== \"\" : false) {\n          // if (this.state.selectedMaterialCat[\"nmaterialcatcode\"] !== \"\" ) {\n          //     if (this.state.selectedMaterialcombo[\"nmaterialcode\"] !== \"\" ) {\n          inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\n          inputData[\"materialCatList\"] = this.state.materialCatList;\n          inputData[\"nmaterialcode\"] = this.state.selectedMaterialcombo[\"nmaterialcode\"].value;\n          inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value;\n\n          if (this.state.selectedcombo[\"nmaterialtypecode\"]) {\n            this.props.getMaterialInventoryByID(this.state.selectedcombo, this.state.selectedMaterialCat, this.state.selectedMaterialcombo, this.props.Login.masterData, this.props.Login.userInfo);\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTUSERROLE\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTMATERIAL\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTMATERIALCATEGORY\"\n        }));\n      }\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.viewMaterialFile = filedata => {\n      const inputParam = {\n        inputData: {\n          nmaterialinventorycode: this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode,\n          materialinventoryfile: JSON.stringify(filedata['jsondata']),\n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: \"materialinventory\",\n        operation: \"view\",\n        methodUrl: \"AttachedMaterialInventoryFile\",\n        screenname: \"IDS_MATERIALINVENTORY\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let showMaterialSection = this.props.Login.showMaterialSection;\n      let isneedcombomulti = this.props.Login.isneedcombomulti;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let showModalPopup = this.props.Login.showModalPopup;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"RETIRE\" || this.props.Login.operation === \"RELEASED\" || this.props.Login.operation === \"IDS_OPENDATE\") {\n          loadEsign = false;\n          openModal = false;\n          showModalPopup = this.props.Login.operation === \"IDS_OPENDATE\" ? true : false; // selectedRecord =  this.props.Login.operation === \"IDS_OPENDATE\"?selectedRecord[\"IDS_OPENDATE\"]\n          // &&selectedRecord[\"IDS_OPENDATE\"]:{};\n\n          if (this.props.Login.operation === \"IDS_OPENDATE\") {\n            let temp = selectedRecord[\"IDS_OPENDATE\"];\n            selectedRecord = {};\n            selectedRecord[\"IDS_OPENDATE\"] = temp;\n          } else {\n            selectedRecord = {};\n          }\n        } else {\n          loadEsign = false; //openModal = false;\n\n          showModalPopup = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        showMaterialSection = false;\n        isneedcombomulti = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          showMaterialSection,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          showModalPopup\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        if (fieldName === \"nmaterialtypecode\") {\n          const selectedcombo = this.state.selectedcombo || {};\n          selectedcombo[fieldName] = comboData;\n          this.searchRef.current.value = \"\";\n          this.props.initialcombochangeMaterialInvget(comboData.item.nmaterialtypecode, undefined, this.props.Login.masterData, this.props.Login.userInfo);\n        }\n\n        if (fieldName === \"nmaterialcode\") {\n          const selectedMaterialcombo = this.state.selectedMaterialcombo || {};\n          selectedMaterialcombo[\"nmaterialcode\"] = comboData;\n          this.setState({\n            selectedMaterialcombo\n          });\n        } else if (fieldName === \"nmaterialcatcode\") {\n          const selectedMaterialCat = this.state.selectedMaterialCat || {};\n          selectedMaterialCat[fieldName] = comboData;\n          this.props.initialcombochangeMaterialInvget(this.state.selectedcombo[\"nmaterialtypecode\"].value, comboData.item.nmaterialcatcode, this.props.Login.masterData, this.props.Login.userInfo);\n        } else if (fieldName === \"nmaterialsectioncode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[\"nmaterialsectioncode\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else if (fieldName === \"nlinkcode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[\"nlinkcode\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else if (fieldName.displaymember === \"smaterialcatname\" || fieldName.displaymember === \"sunitname\" || fieldName.displaymember === \"speriodname\") {\n          const selectedMaterialCat = this.state.selectedMaterialCat || {};\n          selectedMaterialCat[fieldName] = comboData;\n          this.setState({\n            selectedMaterialCat\n          });\n          let comboName = fieldName.label;\n          const selectedRecord = this.state.selectedRecord || {};\n\n          if (comboData) {\n            selectedRecord[comboName] = comboData;\n          } else {\n            selectedRecord[comboName] = [];\n          }\n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else if (fieldName.label === \"IDS_STORAGECONDITION\") {\n          let comboName = fieldName.label;\n          const selectedRecord = this.state.selectedRecord || {};\n\n          if (comboData) {\n            selectedRecord[comboName] = comboData;\n          } else {\n            selectedRecord[comboName] = [];\n          }\n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else if (fieldName === \"value\") {\n          const comboitem = this.state.comboitem || {};\n          comboitem[fieldName] = comboData;\n          this.setState({\n            comboitem\n          });\n        }\n      }\n    };\n\n    this.onInputOnChange = (event, optional1, optional2) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (this.props.Login.screenname !== \"IDS_MATERIALINVENTORYFILE\") {\n        if (event.target.type === 'checkbox') {\n          if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        if (event.target.type === 'checkbox') {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else if (event.target.type === 'radio') {\n          selectedRecord[event.target.name] = optional2;\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.saveClick = () => {\n      let operation = \"update\";\n      let operations = 'IDS_OPENDATE';\n      let inputData = [];\n      inputData[\"IDS_OPENDATE\"] = this.state.selectedRecord.IDS_OPENDATE && convertDateTimetoString(this.state.selectedRecord.IDS_OPENDATE, this.props.Login.userInfo);\n      inputData[\"tzIDS_OPENDATE\"] = this.state.selectedRecord.tzIDS_OPENDATE && this.state.selectedRecord.tzIDS_OPENDATE;\n      inputData[\"nflag\"] = 3;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode;\n      inputData[\"nmaterialcatcode\"] = this.props.Login.masterData.SelectedMaterialCategory.nmaterialcatcode;\n      inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode;\n      inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialinventorycode;\n      const inputParam = {\n        classUrl: \"materialinventory\",\n        methodUrl: \"MaterialStatus\",\n        inputData: inputData,\n        operation: operation\n      };\n      let masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal: true,\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operations,\n            showModalPopup: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"showModalPopup\");\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n\n      if (this.props.Login.screenname === \"IDS_MATERIALINVENTORY\") {\n        inputData[\"MaterialInventory\"] = {};\n        inputData[\"DateList\"] = [];\n        const Layout = this.props.Login.masterData.selectedTemplate[0].jsondata;\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.inputtype === 'combo') {\n                inputData[\"MaterialInventory\"][component.label] = this.state.selectedRecord[component.label] ? {\n                  label: this.state.selectedRecord[component.label][\"label\"],\n                  value: this.state.selectedRecord[component.label][\"value\"]\n                } : \"\";\n              } else if (component.inputtype === 'date') {\n                if (this.state.selectedRecord[component.label]) {\n                  inputData[\"MaterialInventory\"][`tz${component.label}`] = component.hasOwnProperty('timezone') ? {\n                    label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\n                    value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\n                  } : {\n                    label: this.props.Login.userInfo['stimezoneid'],\n                    value: this.props.Login.userInfo['ntimezonecode']\n                  };\n                  inputData[\"MaterialInventory\"][component.label] = convertDateTimetoString(this.state.selectedRecord[component.label], this.props.Login.userInfo);\n                  inputData[\"DateList\"].push(component.label);\n                }\n              } else {\n                inputData[\"MaterialInventory\"][component.label] = this.state.selectedRecord[component.label] && this.state.selectedRecord[component.label];\n              }\n\n              component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n                if (componentrow.inputtype === 'combo') {\n                  inputData[\"MaterialInventory\"][componentrow.label] = this.state.selectedRecord[componentrow.label] ? {\n                    label: this.state.selectedRecord[componentrow.label][\"label\"],\n                    value: this.state.selectedRecord[componentrow.label][\"value\"]\n                  } : \"\";\n                } else if (componentrow.inputtype === 'date') {\n                  if (this.state.selectedRecord[componentrow.label]) {\n                    inputData[\"MaterialInventory\"][`tz${componentrow.label}`] = componentrow.hasOwnProperty('timezone') ? {\n                      label: this.state.selectedRecord[`tz${componentrow.label}`][\"label\"],\n                      value: this.state.selectedRecord[`tz${componentrow.label}`][\"value\"]\n                    } : {\n                      label: this.props.Login.userInfo['stimezoneid'],\n                      value: this.props.Login.userInfo['ntimezonecode']\n                    };\n                    inputData[\"MaterialInventory\"][componentrow.label] = convertDateTimetoString(this.state.selectedRecord[componentrow.label], this.props.Login.userInfo);\n                    inputData[\"DateList\"].push(componentrow.label);\n                  }\n                } else {\n                  inputData[\"MaterialInventory\"][componentrow.label] = this.state.selectedRecord[componentrow.label] && this.state.selectedRecord[componentrow.label];\n                }\n              });\n            });\n          });\n        });\n        inputData[\"MaterialInventory\"] = { ...inputData[\"MaterialInventory\"],\n          \"IDS_INVENTORYTRANSACTIONTYPE\": {\n            label: \"Outside\",\n            value: 2\n          },\n          \"IDS_TRANSACTIONTYPE\": {\n            label: \"Received\",\n            value: 47\n          },\n          [this.props.Login.masterData.siteLabelName && this.props.Login.masterData.siteLabelName]: {\n            label: this.props.Login.masterData.siteName && this.props.Login.masterData.siteName,\n            value: this.props.Login.userInfo.nsitecode && this.props.Login.userInfo.nsitecode\n          },\n          \"dretestdate\": this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory['jsondata'] && this.props.Login.masterData.SelectedMaterialInventory['jsondata'].dretestdate,\n          \"IDS_AVAILABLEQUANTITY\": this.state.selectedRecord['IDS_RECEIVEDQUANTITY'],\n          \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\n          \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n          \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\n          \"ntranscode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].ntranscode === 3 ? transactionStatus.QUARANTINE : transactionStatus.RELEASED,\n          \"IDS_INVENTORYID\": this.state.selectedRecord[\"IDS_INVENTORYID\"] && this.state.selectedRecord[\"IDS_INVENTORYID\"]\n        };\n        inputData[\"materialInventoryJson\"] = JSON.stringify(inputData[\"MaterialInventory\"]);\n        inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode;\n        inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value;\n        inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode;\n\n        if (this.props.Login.operation === 'create') {\n          inputParam = {\n            classUrl: \"materialinventory\",\n            methodUrl: \"MaterialInventory\",\n            inputData: inputData,\n            operation: this.props.Login.operation,\n            saveType,\n            formRef,\n            postParam,\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef,\n            dataState: this.state.dataState\n          };\n        } else {\n          inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode;\n          inputParam = {\n            classUrl: \"materialinventory\",\n            methodUrl: \"MaterialInventory\",\n            inputData: inputData,\n            operation: this.props.Login.operation,\n            saveType,\n            formRef,\n            postParam,\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef,\n            dataState: this.state.dataState\n          };\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (this.props.Login.screenName === \"IDS_MATERIAL\") {\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\n          }\n        } else {\n          if (this.props.Login.masterData.copyScreenRights ? this.props.Login.masterData.copyScreenRights.length > 0 : false) {\n            this.ConfirmComponent();\n          } else {\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData\n                  },\n                  saveType\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.crudMaster(inputParam, masterData, \"openModal\");\n            }\n          }\n        }\n      } else if (this.props.Login.screenname === \"IDS_QUANTITYTRANSACTION\") {\n        let nflag = true;\n\n        if (this.state.selectedRecord['IDS_TRANSACTIONTYPE'].value === 47) {\n          nflag = false;\n        }\n\n        if (nflag ? this.state.selectedRecord['IDS_RECEIVEDQUANTITY'] <= parseFloat(this.state.selectedRecord['IDS_AVAILABLEQUANTITY']) : true) {\n          const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata;\n          let dynamicobj = {};\n          inputData[\"DateList\"] = [];\n          Layout.map(row => {\n            row.children.map(column => {\n              column.children.map(component => {\n                if (component.inputtype === 'combo') {\n                  if (this.state.selectedRecord[component.label]) {\n                    dynamicobj[component.label] = {\n                      label: this.state.selectedRecord[component.label][\"label\"],\n                      value: this.state.selectedRecord[component.label][\"value\"]\n                    };\n                  }\n                } else if (component.inputtype === 'Numeric') {\n                  if (this.state.selectedRecord[component.label]) {\n                    dynamicobj[component.label] = this.state.selectedRecord[component.label].toString();\n                  }\n                } else if (component.inputtype === 'date') {\n                  if (this.state.selectedRecord[component.label]) {\n                    dynamicobj[`tz${component.label}`] = component.hasOwnProperty('timezone') ? {\n                      label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\n                      value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\n                    } : {\n                      label: this.props.Login.userInfo['stimezoneid'],\n                      value: this.props.Login.userInfo['ntimezonecode']\n                    };\n                    dynamicobj[component.label] = convertDateTimetoString(this.state.selectedRecord[component.label], this.props.Login.userInfo);\n                    inputData[\"DateList\"].push(component.label);\n                  }\n                } else {\n                  if (this.state.selectedRecord[component.label]) {\n                    dynamicobj[component.label] = this.state.selectedRecord[component.label];\n                  }\n                }\n\n                component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n                  if (componentrow.inputtype === 'combo') {\n                    if (this.state.selectedRecord[componentrow.label]) {\n                      dynamicobj[componentrow.label] = {\n                        label: this.state.selectedRecord[componentrow.label][\"label\"],\n                        value: this.state.selectedRecord[componentrow.label][\"value\"]\n                      };\n                    }\n                  } else {\n                    if (this.state.selectedRecord[componentrow.label]) {\n                      dynamicobj[componentrow.label] = this.state.selectedRecord[componentrow.label];\n                    }\n                  }\n\n                  if (componentrow.inputtype === 'date') {\n                    if (this.state.selectedRecord[componentrow.label]) {\n                      dynamicobj[`tz${componentrow.label}`] = componentrow.hasOwnProperty('timezone') ? {\n                        label: this.state.selectedRecord[`tz${componentrow.label}`][\"label\"],\n                        value: this.state.selectedRecord[`tz${componentrow.label}`][\"value\"]\n                      } : {\n                        label: this.props.Login.userInfo['stimezoneid'],\n                        value: this.props.Login.userInfo['ntimezonecode']\n                      };\n                      dynamicobj[componentrow.label] = convertDateTimetoString(this.state.selectedRecord[componentrow.label], this.props.Login.userInfo);\n                      inputData[\"DateList\"].push(componentrow.label);\n                    }\n                  }\n                });\n              });\n            });\n          });\n          dynamicobj = { ...dynamicobj,\n            \"ntransactiontype\": this.state.selectedRecord.IDS_TRANSACTIONTYPE && this.state.selectedRecord.IDS_TRANSACTIONTYPE.value,\n            \"navailableqty\": this.state.selectedRecord.IDS_AVAILABLEQUANTITY !== undefined ? this.state.selectedRecord.IDS_AVAILABLEQUANTITY : this.props.Login.navailableqtyref,\n            \"IDS_INVENTORYID\": this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.IDS_INVENTORYID\n          };\n          inputData[\"nprecision\"] = this.props.Login.masterData.nprecision && this.props.Login.masterData.nprecision;\n          inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode;\n          inputData[\"MaterialInventoryTrans\"] = JSON.stringify(dynamicobj);\n          inputParam = {\n            classUrl: \"materialinventory\",\n            methodUrl: \"MaterialInventoryTrans\",\n            inputData: inputData,\n            operation: 'create',\n            saveType,\n            formRef,\n            postParam,\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef,\n            dataState: this.state.dataState\n          };\n          let masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_RETURNEDLESSTHANAVAILABLE\"\n          }));\n        }\n      } else if (this.props.Login.screenname === \"IDS_MATERIALINVENTORYFILE\") {\n        inputParam = this.onSaveMaterialFile();\n        let masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.ConfirmComponent = () => {\n      this.confirmMessage.confirm(\"confirmation\", \"Confiramtion!\", this.props.intl.formatMessage({\n        id: \"IDS_OVERWRITRTHEEXISTINGSCREENRIGHTS\"\n      }), \"ok\", \"cancel\", () => this.copyAlertSave());\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      let inputData = [];\n      inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\n      inputData[\"materialCatList\"] = this.state.materialCatList;\n      const inputParam = {\n        classUrl: \"materialinventory\",\n        methodUrl: \"getMaterialInventoryByID\",\n        displayName: \"MaterialInventory\",\n        inputData: inputData\n      };\n      this.setState({\n        sectionDataState: {\n          skip: 0,\n          take: 10\n        }\n      });\n\n      if (this.state.selectedcombo[\"nmaterialtypecode\"]) {\n        this.props.getMaterialInventoryByID(this.props.Login.masterData.SelectedMaterialType[0], this.props.Login.masterData.SelectedMaterialCategory, this.props.Login.masterData.SelectedMaterialCrumb['jsondata'], this.props.Login.masterData, this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTUSERROLE\"\n        }));\n      }\n    };\n\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      masterStatus: \"\",\n      sectionDataState: {\n        skip: 0,\n        take: 10\n      },\n      error: \"\",\n      isOpen: false,\n      selectedRecord: {},\n      filterCatList: [],\n      operation: \"\",\n      comboitem: undefined,\n      screenName: undefined,\n      selectedcombo: undefined,\n      selectedMaterialCatRole: undefined,\n      isSelectedRecordChange: false,\n      selectedMaterialCat: undefined,\n      materialCatList: [],\n      userRoleControlRights: [],\n      ControlRights: undefined,\n      controlMap: new Map(),\n      showAccordian: true,\n      dataResult: [],\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      dataState: _dataState,\n      columnName: '',\n      rowIndex: 0,\n      data: [],\n      splitChangeWidthPercentage: 30\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    console.log('dxc :', this.props.Login.masterData.SelectedMaterialCrumb);\n    const addId = this.state.controlMap.has(\"AddMaterialInventory\") && this.state.controlMap.get(\"AddMaterialInventory\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditMaterialInventory\") && this.state.controlMap.get(\"EditMaterialInventory\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteMaterialInventory\") && this.state.controlMap.get(\"DeleteMaterialInventory\").ncontrolcode;\n    const releaseId = this.state.controlMap.has(\"ReleaseMaterialInventory\") && this.state.controlMap.get(\"ReleaseMaterialInventory\").ncontrolcode;\n    const retireId = this.state.controlMap.has(\"RetireMaterialInventory\") && this.state.controlMap.get(\"RetireMaterialInventory\").ncontrolcode;\n    const openDateId = this.state.controlMap.has(\"OpenDateMaterialInventory\") && this.state.controlMap.get(\"OpenDateMaterialInventory\").ncontrolcode;\n    const viewId = this.state.controlMap.has(\"ViewMaterialInventory\") && this.state.controlMap.get(\"ViewMaterialInventory\").ncontrolcode;\n    let masterlistmain = [];\n    this.props.Login.masterData.SelectedMaterialInventory && console.log('SelectedMaterialInventory :', this.props.Login.masterData.SelectedMaterialInventory); // this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE']\n\n    this.props.Login.masterData.MaterialInventory && this.props.Login.masterData.MaterialInventory.map((temp, i) => {\n      return masterlistmain.push(this.props.Login.masterData.MaterialInventory[i].jsondata);\n    });\n    let searchedDatalistmain = [];\n\n    if (this.props.Login.masterData.searchedData === undefined) {\n      searchedDatalistmain = undefined;\n    } else {\n      this.props.Login.masterData.searchedData && this.props.Login.masterData.searchedData.map((temp, i) => {\n        return searchedDatalistmain.push(this.props.Login.masterData.searchedData[i].jsondata);\n      });\n    }\n\n    let searchFieldList = [];\n    let mandatoryFieldsMaterialFile = [];\n\n    if (this.props.Login.masterData.SelectedMaterialType) {\n      if (this.props.Login.masterData.SelectedMaterialType.length > 0) {\n        if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1) {\n          searchFieldList = [{\n            feild: \"IDS_INVENTORYID\",\n            jsonfeild: \"jsondata\"\n          }];\n        } else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2) {\n          searchFieldList = [{\n            feild: \"IDS_INVENTORYID\",\n            jsonfeild: \"jsondata\"\n          }];\n        } else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) {\n          searchFieldList = [{\n            feild: \"IDS_INVENTORYID\",\n            jsonfeild: \"jsondata\"\n          }];\n        }\n      }\n    }\n\n    const filterParam = {\n      inputListName: \"MaterialInventory\",\n      selectedObject: \"SelectedMaterialInventory\",\n      primaryKeyField: \"nmaterialinventorycode\",\n      fetchUrl: \"materialinventory/getMaterialInventorySearchByID\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nmaterialtypecode: this.props.Login.masterData.SelectedMaterialType && this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\n      },\n      masterData: this.props.Login.masterData,\n      isjsondata: true,\n      searchFieldList: searchFieldList\n    };\n    let mandatoryFieldsOpenDate = [];\n    mandatoryFieldsOpenDate = [{\n      \"idsName\": \"IDS_OPENDATE\",\n      \"dataField\": \"IDS_OPENDATE\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.props.Login.screenname === 'IDS_MATERIALINVENTORYFILE' && this.props.Login.selectedRecord && this.props.Login.selectedRecord.nattachmenttypecode === attachmentType.LINK ? mandatoryFieldsMaterialFile = [{\n      \"idsName\": \"IDS_FILENAME\",\n      \"dataField\": \"slinkfilename\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }, {\n      \"idsName\": \"IDS_LINKNAME\",\n      \"dataField\": \"nlinkcode\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }] : mandatoryFieldsMaterialFile = [{\n      \"idsName\": \"IDS_FILE\",\n      \"dataField\": \"sfilename\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }];\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb  fixed_breadcrumd \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 64,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: \"MaterialInventory\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: searchedDatalistmain || masterlistmain,\n      getMasterDetail: master => this.props.getMaterialInventoryDetails(master, this.props.Login.masterData, this.props.Login.userInfo),\n      selectedMaster: this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory.jsondata,\n      primaryKeyField: \"nmaterialinventorycode\",\n      mainField: \"IDS_INVENTORYID\",\n      firstField: \"smaterialname\",\n      secondField: \"status\",\n      isIDSField: \"Yes\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      viewId: viewId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: false,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      showFilterIcon: true,\n      onFilterSubmit: this.onFilterSubmit //viewMaterialInventoryDetails={this.viewMaterialInventoryDetails}\n      ,\n      filterComponent: [{\n        \"IDS_FILTER\": /*#__PURE__*/React.createElement(MaterialFilter, {\n          filterCatList: this.state.filterCatList || [],\n          materialCatList: this.state.materialCatList || [],\n          MaterialComboList: this.state.MaterialComboList || [],\n          selectedRecord: this.state.selectedcombo || {} //\n          ,\n          selectedMaterialCat: this.state.selectedMaterialCat || {},\n          selectedMaterialcombo: this.state.selectedMaterialcombo || {},\n          onComboChange: this.onComboChange,\n          ismaterialInventory: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 45\n          }\n        })\n      }],\n      openModal: () => this.props.getAddMaterialInventoryPopup(\"create\", this.props.Login.userInfo, this.props.Login.masterData.SelectedMaterialCrumb, addId, this.props.Login.masterData, this.state.selectedRecord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 37\n      }\n    }, this.props.Login.masterData.MaterialInventory && this.props.Login.masterData.MaterialInventory.length > 0 && this.props.Login.masterData.SelectedMaterialInventory ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory['jsondata']['IDS_INVENTORYID']), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-flex product-category icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-subMaterial flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined \n                                                                    outline-success btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory['jsondata']['status'])), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 65\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      href: \"#\",\n      style: {\n        \"float\": \"right\",\n        \"margin-right\": \"6px\"\n      },\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_VIEWMATERIALINVDETAILS\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: this.viewMaterialInventoryDetails,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_VIEWMATERIALINVDETAILS\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 69\n      }\n    }), ' ', this.props.intl.formatMessage({\n      id: \"IDS_VIEWMATERIALINVDETAILS\"\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: e => this.props.getAddMaterialInventoryPopup(\"update\", this.props.Login.userInfo, this.props.Login.masterData.SelectedMaterialCrumb, editId, this.props.Login.masterData, this.state.selectedRecord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      href: \"\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_OPENDATE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: e => this.props.openDatePopup(this.props.Login.masterData, openDateId),\n      disabled: this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].IDS_OPENEXIPIRYNEED === '4' ? true : false //disabled={true}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalendar,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_OPENDATE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RELEASED\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: e => this.updateMaterialStatus(releaseId, 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_RELEASED\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RETIRE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: e => this.updateMaterialStatus(retireId, 2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_RETIRE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 69\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 53\n      }\n    }, this.state.showInventoryDetails &&\n    /*#__PURE__*/\n    // this.props.Login.masterData.DesignMappedFeilds &&\n    // JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)\n    // [this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode===1?\n    //     'MaterialInventoryStandardViewFields':this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode===2?\n    //     'MaterialInventoryVolumetricViewFields':'MaterialInventoryMatInventViewFields'\n    // ].map((field, index) =>\n    //     <Col md={4} key={index}>\n    //         <FormGroup>\n    //             <FormLabel>\n    //                 <FormattedMessage id={field[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode]} message={field[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode]} />\n    //             </FormLabel>\n    //             <ReadOnlyText>{\n    //                 field.hasOwnProperty('isDateFeild')? this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]] ?\n    //              rearrangeDateFormatDateOnly(this.props.Login.userInfo\n    //                     ,this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]] )\n    //                 : \"-\":\n    //                 this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]] ?\n    //                     this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]].label ?\n    //                         this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]].label\n    //                         : this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]]\n    //                     : \"-\"}</ReadOnlyText>\n    //         </FormGroup>\n    //     </Col>\n    // )\n    React.createElement(SampleInfoView, {\n      data: this.props.Login.masterData.SelectedMaterialInventory,\n      SingleItem: JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)[this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1 ? 'MaterialInventoryStandardViewFields' : this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2 ? 'MaterialInventoryVolumetricViewFields' : 'MaterialInventoryMatInventViewFields'],\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 61\n      }\n    })), this.props.Login.masterData && /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 85\n      }\n    }))) : \"\")))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.screenname === 'IDS_QUANTITYTRANSACTION' ? '' : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenname === 'IDS_QUANTITYTRANSACTION' ? 'IDS_TRANSFERQUANTITY' : this.props.Login.screenname,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenname !== 'IDS_MATERIALINVENTORYFILE' ? this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1 || this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2 || this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) && this.dynamicmandatoryFeilds(this.props.Login.masterData.selectedTemplate[0].jsondata) : this.dynamicmandatoryFeilds(this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata) : mandatoryFieldsMaterialFile,\n      updateStore: this.props.updateStore,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 33\n        }\n      }) : this.props.Login.screenname === \"IDS_MATERIALINVENTORYFILE\" ? /*#__PURE__*/React.createElement(AddMaterialFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChangeFile,\n        onDrop: this.onDropMaterialFile,\n        deleteAttachment: this.deleteAttachment,\n        onComboChange: this.onComboChange,\n        linkMaster: this.props.Login.linkMaster,\n        maxSize: 20,\n        maxFiles: 1,\n        multiple: false,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_MATERIALINVENTORYFILE\"\n        }),\n        name: \"testfilename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 37\n        }\n      }) : /*#__PURE__*/React.createElement(DynamicSlideout, {\n        selectedRecord: this.state.selectedRecord,\n        templateData: this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate[0].jsondata : this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata,\n        onNumericInputChange: this.onNumericInputChange,\n        enabledisableAvailableQty: this.state.selectedRecord['IDS_TRANSACTIONTYPE'] && this.state.selectedRecord['IDS_TRANSACTIONTYPE'].value,\n        handleChange: this.handleChange,\n        onInputOnChange: this.onInputOnChange,\n        isExpiryNeed: parseInt(this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].isExpiryNeed),\n        comboData: this.props.Login.templateData && this.props.Login.templateData.comboData,\n        onComboChange: this.onComboChangedynamic,\n        userInfo: this.props.Login.userInfo,\n        handleDateChange: this.handleDateChange,\n        timeZoneList: this.props.Login.timeZoneList,\n        needfeild: this.state.selectedRecord['IDS_TRANSACTIONTYPE'] && this.state.selectedRecord['IDS_TRANSACTIONTYPE'].value === 47 ? transactionStatus.YES : transactionStatus.NO,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 37\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 21\n      }\n    }), this.props.Login.showModalPopup && /*#__PURE__*/React.createElement(ModalShow, {\n      modalShow: true,\n      selectedRecord: this.state.selectedRecord,\n      modalTitle: this.props.intl.formatMessage({\n        id: this.props.Login.ModaTitle\n      }),\n      needSave: this.props.Login.ModaTitle === 'IDS_OPENDATE' ? false : true,\n      closeModal: this.closeModalShow,\n      onSaveClick: this.props.Login.ModaTitle === 'IDS_OPENDATE' && this.saveClick,\n      validateEsign: this.validateEsign,\n      mandatoryFields: this.props.Login.ModaTitle === 'IDS_OPENDATE' && mandatoryFieldsOpenDate,\n      modalBody: this.props.Login.ModaTitle === 'IDS_OPENDATE' ? /*#__PURE__*/React.createElement(AddMaterialOpenDate, {\n        isMultiLingualLabel: true,\n        label: 'IDS_OPENDATE',\n        intl: this.props.intl.formatMessage,\n        selectedRecord: this.state.selectedRecord,\n        dateonly: true,\n        onComboChange: this.onComboChangeopendate,\n        userInfo: this.props.Login.userInfo,\n        handleDateChange: this.handleDateChange,\n        mandatory: true,\n        timeZoneList: this.props.Login.timeZoneList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 77\n        }\n      }) : this.props.Login.ModaTitle !== 'IDS_QUANTITYTRANSACTION' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: 'IDS_INVENTORYID',\n        message: 'Inventory ID',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 60\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 49\n        }\n      }, this.props.Login.masterData.SelectedMaterialInventory.jsondata && this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_INVENTORYID'] ? this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_INVENTORYID'] : \"-\"))), this.accordianDesign(this.props.Login.masterData.selectedTemplate[0].jsondata, this.props.Login.masterData.SelectedMaterialInventory.jsondata), /*#__PURE__*/React.createElement(Col, {\n        md: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: 'IDS_OPENDATE',\n        message: 'Open Date',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 60\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 49\n        }\n      }, this.props.Login.masterData.SelectedMaterialInventory.jsondata && this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE'] ? rearrangeDateFormatDateOnly(this.props.Login.userInfo, this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE']) : \"-\")))) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 37\n        }\n      }, this.accordianDesign(this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata, this.props.Login.viewQuantityTransdetails), /*#__PURE__*/React.createElement(Col, {\n        md: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: 'IDS_AVAILABLEQTY',\n        message: 'Open Date',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 60\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 49\n        }\n      }, this.props.Login.masterData.SelectedMaterialInventory.jsondata && this.props.Login.viewQuantityTransdetails['namountleft'] ? this.props.Login.viewQuantityTransdetails['namountleft'] : \"-\" // this.props.Login.navailableqty\n      ))), /*#__PURE__*/React.createElement(Col, {\n        md: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: 'IDS_ISSUEDQUANTITY',\n        message: 'Open Date',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 60\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 49\n        }\n      }, this.props.Login.masterData.SelectedMaterialInventory.jsondata && this.props.Login.viewQuantityTransdetails['nqtyissued'] ? this.props.Login.viewQuantityTransdetails['nqtyissued'] : \"-\")))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  gridfillingColumn(data) {\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n    breadCrumbData.push({\n      \"label\": \"IDS_MATERIALTYPE\",\n      \"value\": this.props.Login.masterData.SelectedMaterialType ? this.props.Login.masterData.SelectedMaterialType[0]['jsondata'].smaterialtypename[this.props.Login.userInfo.slanguagetypecode] : \"NA\"\n    }, {\n      \"label\": \"IDS_MATERIALCAT\",\n      \"value\": this.props.Login.masterData.SelectedMaterialCategory ? this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname !== undefined ? this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname : \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_MATERIAL\",\n      \"value\": this.props.Login.masterData.SelectedMaterialCrumb ? this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].smaterialname !== undefined ? this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].smaterialname : \"NA\" : \"NA\"\n    });\n    return breadCrumbData;\n  }\n\n  componentDidUpdate(previousProps) {\n    let bool = false;\n    let {\n      selectedRecord,\n      selectedcombo,\n      comboitem,\n      filterData,\n      filterCatList,\n      selectedMaterialCat,\n      selectedMaterialcombo,\n      materialCatList,\n      MaterialComboList,\n      SelectedMaterialInventory\n    } = this.state;\n    let masterData = this.props.Login.masterData;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      bool = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.selectedMaterialCat !== previousProps.Login.selectedMaterialCat) {\n      bool = true;\n      selectedMaterialCat = this.props.Login.selectedMaterialCat;\n    }\n\n    if (this.props.Login.masterData.SelectedMaterialInventory !== previousProps.Login.masterData.SelectedMaterialInventory) {\n      bool = true;\n      SelectedMaterialInventory = this.props.Login.SelectedMaterialInventory;\n    }\n\n    if (this.props.Login.comboitem !== previousProps.Login.comboitem) {\n      bool = true;\n      comboitem = this.props.Login.comboitem;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        data: this.props.Login.masterData.ControlRights\n      });\n    }\n\n    if (this.props.Login.masterData.MaterialType !== undefined) {\n      if (this.props.Login.masterData.MaterialType !== previousProps.Login.masterData.MaterialType) {\n        bool = true;\n        const materialTypeList = constructjsonOptionList(this.props.Login.masterData.MaterialType, \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined, undefined, undefined, true, this.props.Login.userInfo.slanguagetypecode);\n        filterCatList = materialTypeList.get(\"OptionList\");\n        selectedcombo = {\n          nmaterialtypecode: masterData.MaterialType && masterData.MaterialType.length > 0 ? {\n            \"value\": masterData.MaterialType[0].nmaterialtypecode,\n            \"label\": masterData.MaterialType[0]['jsondata'].smaterialtypename[this.props.Login.userInfo.slanguagetypecode]\n          } : \"\"\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.MaterialCategoryMain !== previousProps.Login.masterData.MaterialCategoryMain) {\n      bool = true;\n      const MaterialCategoryMain = constructOptionList(this.props.Login.masterData.MaterialCategoryMain || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      materialCatList = MaterialCategoryMain.get(\"OptionList\");\n      selectedMaterialCat = {\n        nmaterialcatcode: masterData.MaterialCategoryMain && masterData.MaterialCategoryMain.length > 0 ? {\n          \"value\": masterData.MaterialCategoryMain[0].nmaterialcatcode,\n          \"label\": masterData.MaterialCategoryMain[0].smaterialcatname\n        } : \"\"\n      };\n    }\n\n    if (this.props.Login.masterData.MaterialCombo !== previousProps.Login.masterData.MaterialCombo) {\n      bool = true;\n      let MaterialComboArr = [];\n      this.props.Login.masterData.MaterialCombo.map(temp => {\n        MaterialComboArr.push(temp.jsondata);\n      });\n      const MaterialCombo = constructOptionList(MaterialComboArr || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      MaterialComboList = MaterialCombo.get(\"OptionList\");\n      selectedMaterialcombo = {\n        nmaterialcode: masterData.MaterialCombo && masterData.MaterialCombo.length > 0 ? {\n          \"value\": masterData.MaterialCombo[0][\"jsondata\"].nmaterialcode,\n          \"label\": masterData.MaterialCombo[0][\"jsondata\"].smaterialname\n        } : \"\"\n      };\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      filterData = this.generateBreadCrumData();\n    }\n\n    if (this.props.Login.masterData.searchedData !== previousProps.Login.masterData.searchedData) {\n      if (this.props.Login.masterData.searchedData) {\n        if (this.props.Login.masterData.searchedData.length <= this.state.skip) {\n          this.setState({\n            skip: 0\n          });\n        }\n      }\n    }\n\n    if (bool) {\n      this.setState({\n        selectedRecord,\n        comboitem,\n        filterData,\n        selectedcombo,\n        filterCatList,\n        selectedMaterialCat,\n        selectedMaterialcombo,\n        materialCatList,\n        MaterialComboList,\n        SelectedMaterialInventory\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  handleClickDelete(masterData, ncontrolcode, modalName) {\n    // if (this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RETIRED &&\n    //     this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RELEASED) {\n    if (this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode === transactionStatus.QUARANTINE) {\n      const fieldArray = [];\n      let postParam = {\n        inputListName: \"MaterialInventory\",\n        selectedObject: \"SelectedMaterialInventory\",\n        primaryKeyField: \"nmaterialinventorycode\",\n        primaryKeyValue: fieldArray,\n        fetchUrl: \"materialinventory/getMaterialInventory\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        },\n        \"nmaterialtypecode\": this.props.Login.masterData.length > 0 && this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\n        \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n        \"nmaterialcode\": this.props.Login.masterData.length > 0 && this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode\n      };\n      modalName = 'openModal';\n      const inputParam = {\n        methodUrl: \"MaterialInventory\",\n        classUrl: \"materialinventory\",\n        inputData: {\n          \"material\": this.props.Login.masterData.SelectedMaterial,\n          \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\n          \"nmaterialinventorycode\": this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode,\n          \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n          \"userinfo\": this.props.Login.userInfo,\n          \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\n        },\n        operation: \"delete\",\n        postParam,\n        displayName: \"Material\"\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            [modalName]: true,\n            operation: 'delete',\n            screenName: \"Material\",\n            id: \"material\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, modalName);\n      }\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_SELECTQUARENTINEINVENTORY\"\n      }));\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  getAddMaterialInventoryPopup,\n  updateMaterialStatus,\n  openDatePopup,\n  getQuantityTransactionPopup,\n  getQuantityTransactionOnchange,\n  updateStore,\n  initialcombochangeMaterialInvget,\n  viewAttachment,\n  getMaterialChildValues,\n  crudMaster,\n  getMaterialInventoryDetails,\n  getMaterialInventoryByID,\n  addMaterialInventoryFile,\n  filterColumnData,\n  validateEsignCredential\n})(injectIntl(MaterialInventory));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/Material/MaterialInventory.jsx"],"names":["React","connect","FormattedMessage","injectIntl","Row","Col","Nav","Card","FormGroup","FormLabel","process","toast","FontAwesomeIcon","faTrashAlt","faPencilAlt","faCalendar","faEye","SlideOutModal","Esign","ListMaster","ModalShow","CustomTab","showEsign","getControlMap","constructOptionList","rearrangeDateFormatDateOnly","sortData","getSameRecordFromTwoArrays","onDropAttachFileList","deleteAttachmentDropZone","create_UUID","constructjsonOptionList","convertDateTimetoString","rearrangeDateFormat","comboChild","convertDateTimetoStringDBFormat","callService","updateStore","crudMaster","filterColumnData","validateEsignCredential","viewAttachment","initialcombochangeMaterialInvget","getMaterialInventoryByID","getAddMaterialInventoryPopup","getMaterialInventoryDetails","addMaterialInventoryFile","updateMaterialStatus","openDatePopup","getQuantityTransactionPopup","getMaterialChildValues","getQuantityTransactionOnchange","DEFAULT_RETURN","transactionStatus","attachmentType","designProperties","ContentPanel","ReadOnlyText","ConfirmMessage","BreadcrumbComponent","ReactTooltip","MaterialFilter","DynamicSlideout","Affix","AddMaterialOpenDate","AddMaterialFile","InvenotryTransaction","MaterialInvFileTab","MediaLabel","ProductList","SampleInfoView","mapStateToProps","state","Login","MaterialInventory","Component","constructor","props","expandChange","event","isExpanded","dataItem","expanded","undefined","aggregates","setState","paneSizeChange","d","splitChangeWidthPercentage","quantityTransaction","param","masterData","jsondata","ntranscode","RELEASED","ncontrolCode","openModal","updateInfo","typeName","data","userInfo","warn","intl","formatMessage","id","viewQuantityTrans","viewQuantityTransdetails","showModalPopup","ModaTitle","accordianDesign","Template","selectedmasterlistmain1","selectedmasterlistmain","push","designaccordian","map","row","children","column","component","inputtype","label","length","YES","needAccordian","hasOwnProperty","componentrow","onComboChangeopendate","comboData","control","selectedRecord","onComboChangedynamic","customName","comboName","parent","Layout","QuantityTransactionTemplate","comboComponents","parentcolumnlist","columnList","childColumnList","val","inputParem","child","source","primarykeyField","valuemember","value","item","templateData","Object","keys","viewMaterialInventoryDetails","console","log","SelectedMaterialInventory","showInventoryDetails","closeModalShow","handleDateChange","dateValue","dateName","onTabChange","tabProps","screenName","onDropMaterialFile","attachedFiles","fieldName","maxSize","actionType","deleteAttachment","file","onSaveMaterialFile","acceptedFiles","sfilename","nattachmenttypecode","isFileEdited","NO","testFileArray","testFile","nmaterialinventorycode","nmaterialinventoryfilecode","nstatus","ACTIVE","ndefaultstatus","LINK","formData","FormData","FTP","Array","isArray","forEach","index","tempData","assign","splittedFileName","name","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","ntestfilecode","sdescription","trim","NA","size","dcreateddate","append","nfilesize","slinkfilename","slinkdescription","nlinkcode","JSON","stringify","inputParam","operation","inputData","userinfo","isFileupload","classUrl","methodUrl","dynamicmandatoryFeilds","mandatoryFeildsMaterial","mandatory","tabDetail","tabMap","Map","dataresultarr","temp","set","controlMap","userRoleControlRights","sectionDataState","skip","take","screenname","dataState","getTestDetails","deleteRecordmain","gridfillingColumn","parse","DesignMappedFeilds","MaterialInventoryFile","viewMaterialFile","settings","onInputOnChangeFile","optional2","isSelectedRecordChange","target","type","checked","buttonId","nflag","nmaterialcode","nmaterialtypecode","nmaterialcatcode","searchRef","nformcode","loadEsign","screenData","deleteParam","selected","methodDataState","instrumentCatDataState","toLowerCase","ConfirmDelete","deleteId","confirmMessage","confirm","handleClickDelete","openFilter","showFilter","closeFilter","onFilterSubmit","current","selectedMaterialCat","selectedMaterialcombo","selectedcombo","materialCatList","handlePageChange","e","validateEsign","sreason","password","filedata","materialinventoryfile","closeModal","showMaterialSection","isneedcombomulti","selectedId","onComboChange","displaymember","comboitem","onInputOnChange","optional1","DEACTIVE","saveClick","operations","IDS_OPENDATE","tzIDS_OPENDATE","SelectedMaterialType","SelectedMaterialCategory","SelectedMaterialCrumb","onSaveClick","saveType","formRef","postParam","selectedTemplate","siteLabelName","siteName","nsitecode","dretestdate","QUARANTINE","copyScreenRights","ConfirmComponent","parseFloat","dynamicobj","toString","IDS_TRANSACTIONTYPE","IDS_AVAILABLEQUANTITY","navailableqtyref","IDS_INVENTORYID","nprecision","onNumericInputChange","copyAlertSave","reloadData","displayName","parseInt","masterStatus","error","isOpen","filterCatList","selectedMaterialCatRole","ControlRights","showAccordian","dataResult","columnName","rowIndex","createRef","getDerivedStateFromProps","render","addId","has","get","ncontrolcode","editId","releaseId","retireId","openDateId","viewId","masterlistmain","i","searchedDatalistmain","searchedData","searchFieldList","mandatoryFieldsMaterialFile","feild","jsonfeild","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","isjsondata","mandatoryFieldsOpenDate","breadCrumbData","filterData","master","MaterialComboList","IDS_OPENEXIPIRYNEED","linkMaster","handleChange","isExpiryNeed","timeZoneList","temparray","option","LABEL","slanguagetypecode","VALUE","componentDidMount","parentHeight","height","clientHeight","firstPane","generateBreadCrumData","smaterialtypename","smaterialcatname","smaterialname","componentDidUpdate","previousProps","bool","values","MaterialType","materialTypeList","MaterialCategoryMain","MaterialCombo","MaterialComboArr","componentWillUnmount","modalName","fieldArray","primaryKeyValue","SelectedMaterial"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Row, Col, Nav, Card, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faPencilAlt, faCalendar, faEye } from '@fortawesome/free-solid-svg-icons';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport ModalShow from '../../components/ModalShow.jsx';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component'\r\nimport { showEsign, getControlMap, constructOptionList, rearrangeDateFormatDateOnly, sortData, getSameRecordFromTwoArrays, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, constructjsonOptionList, convertDateTimetoString, rearrangeDateFormat, comboChild, convertDateTimetoStringDBFormat } from '../../components/CommonScript';\r\n\r\nimport {\r\n    callService, updateStore, crudMaster, filterColumnData, validateEsignCredential, viewAttachment,\r\n    initialcombochangeMaterialInvget, getMaterialInventoryByID,\r\n    getAddMaterialInventoryPopup, getMaterialInventoryDetails, addMaterialInventoryFile,\r\n    updateMaterialStatus, openDatePopup, getQuantityTransactionPopup, getMaterialChildValues, getQuantityTransactionOnchange\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus, attachmentType, designProperties } from '../../components/Enumeration';\r\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport MaterialFilter from './MaterialFilter';\r\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout';\r\nimport { Affix } from 'rsuite';\r\nimport AddMaterialOpenDate from './AddMaterialOpenDate';\r\nimport AddMaterialFile from './AddMaterialFile';\r\nimport InvenotryTransaction from './InvenotryTransaction';\r\nimport MaterialInvFileTab from './MaterialInvFileTab';\r\nimport { MediaLabel, ProductList } from '../product/product.styled';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass MaterialInventory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n        };\r\n        this.state = {\r\n            masterStatus: \"\",\r\n            sectionDataState: { skip: 0, take: 10 },\r\n            error: \"\",\r\n            isOpen: false,\r\n            selectedRecord: {},\r\n            filterCatList: [],\r\n            operation: \"\",\r\n            comboitem: undefined,\r\n            screenName: undefined,\r\n            selectedcombo: undefined, selectedMaterialCatRole: undefined,\r\n            isSelectedRecordChange: false,\r\n            selectedMaterialCat: undefined,\r\n            materialCatList: [],\r\n            userRoleControlRights: [],\r\n            ControlRights: undefined,\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            dataResult: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            dataState: dataState,\r\n            columnName: '',\r\n            rowIndex: 0,\r\n            data: [],\r\n            splitChangeWidthPercentage: 30,\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n    expandChange = event => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined\r\n                ? event.dataItem.aggregates\r\n                : event.dataItem.expanded;\r\n        event.dataItem.expanded = !isExpanded;\r\n        this.setState({ ...this.state });\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    render() {\r\n\r\n        console.log('dxc :', this.props.Login.masterData.SelectedMaterialCrumb)\r\n        const addId = this.state.controlMap.has(\"AddMaterialInventory\") && this.state.controlMap.get(\"AddMaterialInventory\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditMaterialInventory\") && this.state.controlMap.get(\"EditMaterialInventory\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteMaterialInventory\") && this.state.controlMap.get(\"DeleteMaterialInventory\").ncontrolcode;\r\n        const releaseId = this.state.controlMap.has(\"ReleaseMaterialInventory\") && this.state.controlMap.get(\"ReleaseMaterialInventory\").ncontrolcode;\r\n        const retireId = this.state.controlMap.has(\"RetireMaterialInventory\") && this.state.controlMap.get(\"RetireMaterialInventory\").ncontrolcode;\r\n        const openDateId = this.state.controlMap.has(\"OpenDateMaterialInventory\") && this.state.controlMap.get(\"OpenDateMaterialInventory\").ncontrolcode;\r\n        const viewId = this.state.controlMap.has(\"ViewMaterialInventory\") && this.state.controlMap.get(\"ViewMaterialInventory\").ncontrolcode;\r\n        let masterlistmain = []\r\n        this.props.Login.masterData.SelectedMaterialInventory&&\r\n        console.log('SelectedMaterialInventory :',this.props.Login.masterData.SelectedMaterialInventory)\r\n       // this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE']\r\n        this.props.Login.masterData.MaterialInventory &&\r\n            this.props.Login.masterData.MaterialInventory.map((temp, i) => {\r\n                return masterlistmain.push(this.props.Login.masterData.MaterialInventory[i].jsondata)\r\n            })\r\n        let searchedDatalistmain = []\r\n        if (this.props.Login.masterData.searchedData === undefined) {\r\n            searchedDatalistmain = undefined\r\n        } else {\r\n            this.props.Login.masterData.searchedData &&\r\n                this.props.Login.masterData.searchedData.map((temp, i) => {\r\n                    return searchedDatalistmain.push(this.props.Login.masterData.searchedData[i].jsondata)\r\n                })\r\n        }\r\n        let searchFieldList = []\r\n        let mandatoryFieldsMaterialFile = []\r\n        if (this.props.Login.masterData.SelectedMaterialType) {\r\n            if (this.props.Login.masterData.SelectedMaterialType.length > 0) {\r\n                if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1) {\r\n                    searchFieldList = [{\r\n                        feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\r\n                    }]\r\n                }\r\n                else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2) {\r\n                    searchFieldList = [{\r\n                        feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\r\n                    }]\r\n                }\r\n                else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) {\r\n                    searchFieldList = [{\r\n                        feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\r\n                    }]\r\n                }\r\n            }\r\n        }\r\n        const filterParam = {\r\n            inputListName: \"MaterialInventory\", selectedObject: \"SelectedMaterialInventory\", primaryKeyField: \"nmaterialinventorycode\",\r\n            fetchUrl: \"materialinventory/getMaterialInventorySearchByID\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo, nmaterialtypecode: this.props.Login.masterData.SelectedMaterialType && this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode },\r\n            masterData: this.props.Login.masterData,\r\n            isjsondata: true,\r\n            searchFieldList: searchFieldList\r\n        };\r\n        let mandatoryFieldsOpenDate = []\r\n        mandatoryFieldsOpenDate = [\r\n       { \"idsName\": \"IDS_OPENDATE\", \"dataField\": \"IDS_OPENDATE\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" }\r\n        ]\r\n        this.props.Login.screenname === 'IDS_MATERIALINVENTORYFILE' && (this.props.Login.selectedRecord &&\r\n            this.props.Login.selectedRecord.nattachmenttypecode === attachmentType.LINK) ?\r\n            mandatoryFieldsMaterialFile = [\r\n                { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n            :\r\n            mandatoryFieldsMaterialFile = [\r\n                { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n            ]\r\n        const breadCrumbData = this.state.filterData || [];\r\n        return (\r\n            <>\r\n                <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb  fixed_breadcrumd \">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={64}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix>\r\n                        : \"\"\r\n                    }\r\n                    <Row noGutters>\r\n                        <Col md={4} >\r\n\r\n                            <ListMaster\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={\"MaterialInventory\"}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={searchedDatalistmain || masterlistmain}\r\n                                getMasterDetail={(master) => this.props.getMaterialInventoryDetails(master, this.props.Login.masterData, this.props.Login.userInfo)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory.jsondata}\r\n                                primaryKeyField=\"nmaterialinventorycode\"\r\n                                mainField=\"IDS_INVENTORYID\"\r\n                                firstField=\"smaterialname\"\r\n                                secondField=\"status\"\r\n                                isIDSField=\"Yes\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                viewId={viewId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={false}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                showFilterIcon={true}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                //viewMaterialInventoryDetails={this.viewMaterialInventoryDetails}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_FILTER\":\r\n                                            <MaterialFilter\r\n                                                filterCatList={this.state.filterCatList || []}\r\n                                                materialCatList={this.state.materialCatList || []}\r\n                                                MaterialComboList={this.state.MaterialComboList || []}\r\n                                                selectedRecord={this.state.selectedcombo || {}}//\r\n                                                selectedMaterialCat={this.state.selectedMaterialCat || {}}\r\n                                                selectedMaterialcombo={this.state.selectedMaterialcombo || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                                ismaterialInventory={true}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                                openModal={() => this.props.getAddMaterialInventoryPopup(\r\n                                    \"create\", this.props.Login.userInfo, this.props.Login.masterData.SelectedMaterialCrumb,\r\n                                    addId, this.props.Login.masterData,\r\n                                    this.state.selectedRecord)}\r\n                            />\r\n                        </Col>\r\n                        <Col md='8'>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <ContentPanel className=\"panel-main-content\">\r\n                                        {this.props.Login.masterData.MaterialInventory && this.props.Login.masterData.MaterialInventory.length > 0 && this.props.Login.masterData.SelectedMaterialInventory ?\r\n                                            <Card className=\"border-0\">\r\n                                                <Card.Header>\r\n                                                    {/* <Card.Title className=\"product-title-main\">{this.props.intl.formatMessage({ id: \"IDS_MATERIALINVENTORY\" })}</Card.Title> */}\r\n                                                    <Card.Title className=\"product-title-main\">{\r\n                                                        this.props.Login.masterData.SelectedMaterialInventory &&\r\n                                                        this.props.Login.masterData.SelectedMaterialInventory['jsondata']['IDS_INVENTORYID']\r\n                                                    }</Card.Title>\r\n                                                    <Card.Subtitle>\r\n                                                        <ProductList className=\"d-flex product-category icon-group-wrap\">\r\n                                                            <h2 className=\"product-title-subMaterial flex-grow-1\">\r\n                                                                <MediaLabel\r\n                                                                    className={`btn btn-outlined \r\n                                                                    outline-success btn-sm ml-3`}>\r\n                                                                    {/* <h2 className=\"product-title-sub flex-grow-1\"> */}\r\n                                                                    {\r\n                                                                        this.props.Login.masterData.SelectedMaterialInventory &&\r\n                                                                        this.props.Login.masterData.SelectedMaterialInventory['jsondata']['status']\r\n                                                                    }\r\n                                                                </MediaLabel>\r\n                                                            </h2>\r\n                                                            <div className=\"d-inline \">\r\n                                                                <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                                                                <button  className=\"btn btn-primary btn-padd-custom\" href=\"#\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEWMATERIALINVDETAILS\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={this.viewMaterialInventoryDetails}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faEye}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_VIEWMATERIALINVDETAILS\" })} >\r\n                                                                       </FontAwesomeIcon>{' '}\r\n                                                                       {this.props.intl.formatMessage({ id: \"IDS_VIEWMATERIALINVDETAILS\" })}\r\n                                                                </button>\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.props.getAddMaterialInventoryPopup(\r\n                                                                            \"update\", this.props.Login.userInfo, this.props.Login.masterData.SelectedMaterialCrumb,\r\n                                                                            editId, this.props.Login.masterData,\r\n                                                                            this.state.selectedRecord)\r\n                                                                    }\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.ConfirmDelete(deleteId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n\r\n                                                                </Nav.Link>\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_OPENDATE\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.props.openDatePopup(this.props.Login.masterData, openDateId)\r\n                                                                    }\r\n                                                                    disabled={this.props.Login.masterData.\r\n                                                                        SelectedMaterialCrumb['jsondata'].IDS_OPENEXIPIRYNEED === '4' ?\r\n                                                                        true : false}\r\n                                                                //disabled={true}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faCalendar}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_OPENDATE\" })} />\r\n                                                                </Nav.Link>\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_RELEASED\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.updateMaterialStatus(releaseId, 1)\r\n                                                                    }\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_RELEASED\" })} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_RETIRE\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.updateMaterialStatus(retireId, 2)\r\n                                                                    }\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_RETIRE\" })} />\r\n                                                                </Nav.Link>\r\n                                                            </div>\r\n                                                        </ProductList>\r\n                                                    </Card.Subtitle>\r\n                                                </Card.Header>\r\n                                                <Card.Body>\r\n                                                    <Row>\r\n                                                        {this.state.showInventoryDetails &&\r\n\r\n\r\n                                                            // this.props.Login.masterData.DesignMappedFeilds &&\r\n                                                            // JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)\r\n                                                            // [this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode===1?\r\n                                                            //     'MaterialInventoryStandardViewFields':this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode===2?\r\n                                                            //     'MaterialInventoryVolumetricViewFields':'MaterialInventoryMatInventViewFields'\r\n                                                            // ].map((field, index) =>\r\n                                                            //     <Col md={4} key={index}>\r\n                                                            //         <FormGroup>\r\n                                                            //             <FormLabel>\r\n                                                            //                 <FormattedMessage id={field[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode]} message={field[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode]} />\r\n                                                            //             </FormLabel>\r\n                                                            //             <ReadOnlyText>{\r\n                                                            //                 field.hasOwnProperty('isDateFeild')? this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]] ?\r\n                                                            //              rearrangeDateFormatDateOnly(this.props.Login.userInfo\r\n                                                            //                     ,this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]] )\r\n                                                            //                 : \"-\":\r\n                                                            //                 this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]] ?\r\n                                                            //                     this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]].label ?\r\n                                                            //                         this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]].label\r\n                                                            //                         : this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]]\r\n                                                            //                     : \"-\"}</ReadOnlyText>\r\n                                                            //         </FormGroup>\r\n                                                            //     </Col>\r\n                                                            // )\r\n                                                            <SampleInfoView\r\n                                                                data={this.props.Login.masterData.SelectedMaterialInventory}\r\n                                                                SingleItem={JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)\r\n                                                                [this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1 ?\r\n                                                                        'MaterialInventoryStandardViewFields' : this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2 ?\r\n                                                                            'MaterialInventoryVolumetricViewFields' : 'MaterialInventoryMatInventViewFields'\r\n                                                                ]}\r\n                                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                                userInfo={this.props.Login.userInfo}\r\n\r\n                                                            />\r\n\r\n                                                        }\r\n                                                    </Row>\r\n                                                    {this.props.Login.masterData && <CustomTab tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />}\r\n                                                </Card.Body>\r\n                                            </Card> : \"\"}\r\n                                    </ContentPanel>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                { }\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.screenname === 'IDS_QUANTITYTRANSACTION' ? '' :\r\n                            this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenname === 'IDS_QUANTITYTRANSACTION' ? 'IDS_TRANSFERQUANTITY'\r\n                            : this.props.Login.screenname}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.screenname !== 'IDS_MATERIALINVENTORYFILE' ?\r\n                            this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1\r\n                                || this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2 ||\r\n                                this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) && this.dynamicmandatoryFeilds(this.props.Login.masterData.selectedTemplate[0].jsondata)\r\n                                : this.dynamicmandatoryFeilds(this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata) : mandatoryFieldsMaterialFile}\r\n                        updateStore={this.props.updateStore}\r\n                        addComponent={\r\n                            this.props.Login.loadEsign ?\r\n                                <Esign operation={this.props.Login.operation}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                />\r\n                                :\r\n                                this.props.Login.screenname === \"IDS_MATERIALINVENTORYFILE\" ?\r\n                                    <AddMaterialFile\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChangeFile}\r\n                                        onDrop={this.onDropMaterialFile}\r\n                                        deleteAttachment={this.deleteAttachment}\r\n                                        onComboChange={this.onComboChange}\r\n                                        linkMaster={this.props.Login.linkMaster}\r\n                                        maxSize={20}\r\n                                        maxFiles={1}\r\n                                        multiple={false}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_MATERIALINVENTORYFILE\" })}\r\n                                        name=\"testfilename\"\r\n                                    />\r\n                                    :\r\n                                    <DynamicSlideout\r\n                                        selectedRecord={this.state.selectedRecord}\r\n                                        templateData={this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? this.props.Login.masterData.selectedTemplate &&\r\n                                            this.props.Login.masterData.selectedTemplate[0].jsondata\r\n                                            : this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata}\r\n                                        onNumericInputChange={this.onNumericInputChange}\r\n                                        enabledisableAvailableQty={this.state.selectedRecord['IDS_TRANSACTIONTYPE'] && this.state.selectedRecord['IDS_TRANSACTIONTYPE'].value}\r\n                                        handleChange={this.handleChange}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        isExpiryNeed={parseInt(this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].isExpiryNeed)}\r\n                                        comboData={this.props.Login.templateData && this.props.Login.templateData.comboData}\r\n                                        onComboChange={this.onComboChangedynamic}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                        needfeild={this.state.selectedRecord['IDS_TRANSACTIONTYPE'] && this.state.selectedRecord['IDS_TRANSACTIONTYPE'].value === 47 ? transactionStatus.YES :\r\n                                            transactionStatus.NO}\r\n                                    />\r\n                        }\r\n                    />\r\n\r\n\r\n\r\n                }\r\n\r\n                {this.props.Login.showModalPopup &&\r\n                    <ModalShow\r\n                        modalShow={true}\r\n                        selectedRecord={this.state.selectedRecord}\r\n                        modalTitle={this.props.intl.formatMessage({ id: this.props.Login.ModaTitle })}\r\n                        needSave={this.props.Login.ModaTitle === 'IDS_OPENDATE' ? false : true}\r\n                        closeModal={this.closeModalShow}\r\n                        onSaveClick={this.props.Login.ModaTitle === 'IDS_OPENDATE' && this.saveClick}\r\n                        validateEsign={this.validateEsign}\r\n                        mandatoryFields={this.props.Login.ModaTitle === 'IDS_OPENDATE'&&mandatoryFieldsOpenDate}\r\n                        modalBody={\r\n                            this.props.Login.ModaTitle === 'IDS_OPENDATE' ? <AddMaterialOpenDate\r\n                                isMultiLingualLabel={true}\r\n                                label={'IDS_OPENDATE'}\r\n                                intl={this.props.intl.formatMessage}\r\n                                selectedRecord={this.state.selectedRecord}\r\n                                dateonly={true}\r\n                                onComboChange={this.onComboChangeopendate}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                handleDateChange={this.handleDateChange}\r\n                                mandatory={true}\r\n                                timeZoneList={this.props.Login.timeZoneList}\r\n                            /> :\r\n                                this.props.Login.ModaTitle !== 'IDS_QUANTITYTRANSACTION' ?\r\n                                    <Row>\r\n                                        <Col md='4'>\r\n                                            <FormGroup>\r\n                                                <FormLabel><FormattedMessage id={'IDS_INVENTORYID'} message={'Inventory ID'} /></FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                        this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_INVENTORYID'] ?\r\n                                                        this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_INVENTORYID'] : \"-\"}\r\n                                                </ReadOnlyText>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        {this.accordianDesign(this.props.Login.masterData.selectedTemplate[0].jsondata,\r\n                                            this.props.Login.masterData.SelectedMaterialInventory.jsondata)}\r\n                                        <Col md='4'>\r\n                                            <FormGroup>\r\n                                                <FormLabel><FormattedMessage id={'IDS_OPENDATE'} message={'Open Date'} /></FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                        this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE'] ?\r\n                                                        rearrangeDateFormatDateOnly(this.props.Login.userInfo,\r\n                                                            this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE']\r\n                                                        )\r\n                                                        : \"-\"}\r\n                                                </ReadOnlyText>\r\n\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    </Row> :\r\n                                    <Row>\r\n                                        {this.accordianDesign(this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata,\r\n                                            this.props.Login.viewQuantityTransdetails)}\r\n                                        <Col md='4'>\r\n                                            <FormGroup>\r\n                                                <FormLabel><FormattedMessage id={'IDS_AVAILABLEQTY'} message={'Open Date'} /></FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                        this.props.Login.viewQuantityTransdetails['namountleft'] ?\r\n                                                        this.props.Login.viewQuantityTransdetails['namountleft'] : \"-\"\r\n                                                        // this.props.Login.navailableqty\r\n                                                    }\r\n                                                </ReadOnlyText>\r\n\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        <Col md='4'>\r\n                                            <FormGroup>\r\n                                                <FormLabel><FormattedMessage id={'IDS_ISSUEDQUANTITY'} message={'Open Date'} /></FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                        this.props.Login.viewQuantityTransdetails['nqtyissued'] ?\r\n                                                        this.props.Login.viewQuantityTransdetails['nqtyissued'] : \"-\"}\r\n                                                </ReadOnlyText>\r\n\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    </Row>\r\n                        }\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n    gridfillingColumn(data) {\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\r\n             \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n        });\r\n        return temparray;\r\n    }\r\n    quantityTransaction = (param) => {\r\n        if (this.props.Login.masterData['SelectedMaterialInventory'].jsondata.ntranscode === transactionStatus.RELEASED) {\r\n            let ncontrolCode = this.props.Login.ncontrolCode\r\n            let openModal = this.props.Login.openModal\r\n            openModal = true\r\n            ncontrolCode = param;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModal }\r\n            }\r\n            this.props.getQuantityTransactionPopup(this.props.Login.masterData, this.props.Login.userInfo, updateInfo, ncontrolCode)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRELEASEDINVENTORY\" }));\r\n\r\n        }\r\n    }\r\n    viewQuantityTrans = (viewQuantityTransdetails) => {\r\n        let showModalPopup = this.props.Login.showModalPopup;\r\n        let ModaTitle = this.props.Login.ModaTitle;\r\n        showModalPopup = true;\r\n        ModaTitle = 'IDS_QUANTITYTRANSACTION'\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showModalPopup, ModaTitle, viewQuantityTransdetails }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    accordianDesign = (Template, selectedmasterlistmain1) => {\r\n        let selectedmasterlistmain = [];\r\n        selectedmasterlistmain.push(selectedmasterlistmain1)\r\n        let designaccordian = [];\r\n        Template.map((row) => {\r\n            row.children.map((column) => {\r\n                column.children.map((component) => {\r\n                    if (component.inputtype === 'combo') {\r\n                        if (component.label !== undefined) {\r\n                            designaccordian.push(<Col md={4}>\r\n                                <FormGroup>\r\n                                    <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                    <ReadOnlyText >\r\n                                        {selectedmasterlistmain.length > 0 &&\r\n                                            selectedmasterlistmain[0][component.label] ?\r\n                                            selectedmasterlistmain[0][component.label]['label'] : \"-\"}\r\n                                    </ReadOnlyText>\r\n\r\n                                </FormGroup>\r\n                            </Col>)\r\n                        }\r\n                    }\r\n                    else if (component.inputtype === 'date') {\r\n                        if (component.label !== undefined) {\r\n                            designaccordian.push(<Col md={4}>\r\n                                <FormGroup>\r\n                                    <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                    <ReadOnlyText>\r\n                                        {selectedmasterlistmain.length > 0 &&\r\n                                            selectedmasterlistmain[0][component.label] ?\r\n                                            rearrangeDateFormatDateOnly(\r\n                                                this.props.Login.userInfo, selectedmasterlistmain[0][component.label])\r\n                                            // selectedmasterlistmain[0][component.label]\r\n                                            : \"-\"}\r\n\r\n                                    </ReadOnlyText>\r\n\r\n                                </FormGroup>\r\n                            </Col>)\r\n                        }\r\n                    }\r\n                    else if (component.inputtype === 'toggle') {\r\n                        if (component.label !== undefined) {\r\n                            designaccordian.push(<Col md={4}>\r\n                                <FormGroup>\r\n                                    <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                    <ReadOnlyText>\r\n                                        {selectedmasterlistmain.length > 0 &&\r\n                                            selectedmasterlistmain[0][component.label] &&\r\n                                            selectedmasterlistmain[0][component.label] === transactionStatus.YES ?\r\n                                            'Yes' : 'No'}\r\n                                    </ReadOnlyText>\r\n\r\n                                </FormGroup>\r\n                            </Col>)\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (component.label !== undefined) {\r\n                            if (!component.needAccordian) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup >\r\n\r\n                                        <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                        <ReadOnlyText >\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][component.label] ? selectedmasterlistmain[0][component.label] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                    component.hasOwnProperty(\"children\") && component.children.map((componentrow) => {\r\n                        if (componentrow.inputtype === 'combo') {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] ?\r\n                                                selectedmasterlistmain[0][componentrow.label]['label'] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                        else if (componentrow.inputtype === 'date') {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] ?\r\n                                                selectedmasterlistmain[0][componentrow.label] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                        else if (componentrow.inputtype === 'toggle') {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] &&\r\n                                                selectedmasterlistmain[0][componentrow.label]['label'] === transactionStatus.YES ?\r\n                                                'Yes' : 'No'}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] ?\r\n                                                selectedmasterlistmain[0][componentrow.label] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n        })\r\n        return designaccordian;\r\n    }\r\n    onComboChangeopendate = (comboData, control) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[control] = comboData;\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n    onComboChangedynamic = (comboData, control, customName) => {\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        if (control.inputtype === 'date') {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[`tz${control.label}`] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else if (control.parent && control.parent === true) {\r\n            let data = [];\r\n            const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata\r\n            Layout.map((row) => {\r\n                row.children.map((column) => {\r\n                    column.children.map((component) => {\r\n                        if (component.inputtype === 'combo') {\r\n                            data.push(component)\r\n                        }\r\n                        component.hasOwnProperty(\"children\") && component.children.map(\r\n                            (componentrow) => {\r\n                                if (componentrow.inputtype === 'combo') {\r\n                                    data.push(componentrow)\r\n                                }\r\n                            }\r\n                        )\r\n                    })\r\n                })\r\n            })\r\n            const comboComponents = data\r\n            let parentcolumnlist = []\r\n            comboComponents.map(columnList => {\r\n                if (columnList.hasOwnProperty('child')) {\r\n                    parentcolumnlist.push(columnList)\r\n                }\r\n            })\r\n            let childColumnList = {};\r\n            parentcolumnlist.map(columnList => {\r\n                const val = comboChild(data, columnList, childColumnList, true);\r\n                data = val.data;\r\n                childColumnList = val.childColumnList\r\n            })\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData.value,\r\n                item: comboData.item\r\n            }\r\n            this.props.getMaterialChildValues(inputParem,\r\n                this.props.Login.userInfo, selectedRecord,\r\n                parentcolumnlist, childColumnList, this.props.Login.templateData.comboData, Object.keys(childColumnList)[0]\r\n                , childColumnList[Object.keys(childColumnList)[0]][0].label, this.props.Login.masterData)\r\n        }\r\n        else {\r\n            if (control.label === 'IDS_TRANSACTIONTYPE') {\r\n                this.props.getQuantityTransactionOnchange(comboData, this.props.Login.masterData,\r\n                    this.props.Login.userInfo, selectedRecord, this.props.Login.templateData)\r\n            }\r\n            else {\r\n                selectedRecord[control.label] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n        }\r\n\r\n    }\r\n    viewMaterialInventoryDetails = () => {\r\n        console.log('this.state.SelectedMaterialInventory :', this.state.SelectedMaterialInventory)\r\n        console.log('tthis.props.Login.showModalPopup :', this.props.Login.masterData.SelectedMaterialInventory)\r\n        if (this.props.Login.masterData.SelectedMaterialInventory) {\r\n            if (this.props.Login.masterData.SelectedMaterialInventory.length !== 0) {\r\n                // let showModalPopup = this.props.Login.showModalPopup;\r\n                let showInventoryDetails = this.state.showInventoryDetails;\r\n                let ModaTitle = this.props.Login.ModaTitle;\r\n                //showModalPopup = true;\r\n\r\n                if (showInventoryDetails === undefined) {\r\n                    this.setState({ showInventoryDetails: true })\r\n                }\r\n                if (showInventoryDetails) {\r\n                    this.setState({ showInventoryDetails: false })\r\n                }\r\n                else {\r\n                    this.setState({ showInventoryDetails: true })\r\n                }\r\n\r\n\r\n                // ModaTitle = 'IDS_MATERIALINVENTORYDETAILS'\r\n                // const updateInfo = {\r\n                //     typeName: DEFAULT_RETURN,\r\n                //    // data: { showModalPopup, ModaTitle }\r\n                //    data: { showInventoryDetails, ModaTitle }\r\n                // }\r\n                // this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMATERIALINVENTORY\" }))\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMATERIALINVENTORY\" }))\r\n        }\r\n    }\r\n    closeModalShow = () => {\r\n        let showModalPopup = this.props.Login.showModalPopup;\r\n        showModalPopup = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showModalPopup }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onDropMaterialFile = (attachedFiles, fieldName, maxSize) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\"\r\n        });\r\n    }\r\n    onSaveMaterialFile = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let testFileArray = [];\r\n        let testFile = {\r\n            nmaterialinventorycode: this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode,\r\n            nmaterialinventoryfilecode: selectedRecord.nmaterialinventoryfilecode ? selectedRecord.nmaterialinventoryfilecode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nattachmenttypecode,\r\n            ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, testFile);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntestfilecode && selectedRecord.ntestfilecode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = file.name;\r\n                    tempData[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    tempData[\"dcreateddate\"] = this.props.Login.dcreateddate &&\r\n                        convertDateTimetoStringDBFormat(this.props.Login.dcreateddate, this.props.Login.userInfo)\r\n\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    testFileArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                testFile[\"sfilename\"] = selectedRecord.sfilename;\r\n                testFile[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\r\n                testFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                testFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                testFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                testFile[\"dcreateddate\"] = this.props.Login.dcreateddate &&\r\n                    convertDateTimetoStringDBFormat(this.props.Login.dcreateddate, this.props.Login.userInfo)\r\n                testFileArray.push(testFile);\r\n            }\r\n        } else {\r\n            testFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\r\n            testFile[\"sdescription\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\r\n            testFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            testFile[\"dcreateddate\"] = this.props.Login.dcreateddate &&\r\n                convertDateTimetoStringDBFormat(this.props.Login.dcreateddate, this.props.Login.userInfo)\r\n            testFile[\"ssystemfilename\"] = \"\";\r\n            testFile[\"nfilesize\"] = 0;\r\n            testFileArray.push(testFile);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"materialinventoryfile\", JSON.stringify(testFileArray[0]));\r\n\r\n        let inputParam;\r\n        if (this.props.Login.operation === 'create') {\r\n            inputParam = {\r\n                inputData: { userinfo: this.props.Login.userInfo },\r\n                formData: formData,\r\n                isFileupload: true,\r\n                operation: \"create\",\r\n                classUrl: \"materialinventory\",\r\n                methodUrl: \"MaterialInventoryFile\"\r\n            }\r\n        }\r\n        else {\r\n            inputParam = {\r\n                inputData: { userinfo: this.props.Login.userInfo },\r\n                formData: formData,\r\n                isFileupload: true,\r\n                operation: \"update\",\r\n                classUrl: \"materialinventory\",\r\n                methodUrl: \"MaterialInventoryFile\"\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    dynamicmandatoryFeilds = (Template) => {\r\n        let mandatoryFeildsMaterial = [];\r\n        Template.map((row) => {\r\n            row.children.map((column) => {\r\n                column.children.map((component) => {\r\n                    if (component.mandatory) {\r\n                        if (component.inputtype === 'combo') {\r\n                            mandatoryFeildsMaterial.push({\r\n                                \"idsName\": [component.label], \"dataField\": [component.label],\r\n                                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                            })\r\n                        }\r\n                        else {\r\n                            mandatoryFeildsMaterial.push({\r\n                                \"idsName\": [component.label], \"dataField\": [component.label],\r\n                                \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                            })\r\n                        }\r\n                    }\r\n                    component.hasOwnProperty(\"children\") && component.children.map((componentrow) => {\r\n                        if (componentrow.mandatory) {\r\n                            if (componentrow.inputtype === 'combo') {\r\n                                mandatoryFeildsMaterial.push({\r\n                                    \"idsName\": [componentrow.label], \"dataField\": [componentrow.label],\r\n                                    \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                                })\r\n                            }\r\n                            else {\r\n                                mandatoryFeildsMaterial.push({\r\n                                    \"idsName\": [componentrow.label], \"dataField\": [componentrow.label],\r\n                                    \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n        })\r\n        return mandatoryFeildsMaterial;\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        {\r\n            let dataresultarr = []\r\n            //let IDS_TRANSACTIONDATE;\r\n            this.props.Login.masterData[\"MaterialInventoryTrans\"] &&\r\n                this.props.Login.masterData[\"MaterialInventoryTrans\"].map((temp, index) => {\r\n                    // temp.jsondata['IDS_TRANSACTIONDATE'] =\r\n                    this.props.Login.masterData[\"MaterialInventoryTrans\"][index].jsondata['IDS_TRANSACTIONDATE'] =\r\n                        rearrangeDateFormatDateOnly(\r\n                            this.props.Login.userInfo,\r\n                            temp.jsondata['IDS_TRANSACTIONDATE']\r\n                        )\r\n                    dataresultarr.push(temp.jsondata)\r\n                })\r\n            tabMap.set(\"IDS_INVENTORYTRANSACTION\",\r\n                <InvenotryTransaction\r\n                    Template={this.props.Login.masterData.QuantityTransactionTemplate &&\r\n                        this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata}\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    dataResult={process(this.props.Login.masterData[\"MaterialInventoryTrans\"],\r\n                        (this.props.screenName === undefined || this.props.screenName === \"IDS_QUANTITYTRANSACTION\")\r\n                            ? this.state.sectionDataState : { skip: 0, take: 10 })}\r\n                    dataState={(this.props.screenName === undefined || this.props.screenname === \"IDS_QUANTITYTRANSACTION\")\r\n                        ? this.state.sectionDataState : { skip: 0, take: 10 }}\r\n                        \r\n                    dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\r\n                    masterData={this.props.Login.masterData}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    getTestDetails={this.props.getTestDetails}\r\n                    SelectedMaterialInventory={this.props.Login.masterData.SelectedMaterialInventory}\r\n                    quantityTransaction={this.quantityTransaction}\r\n                    // dataState={{ skip: 0, take: 10 }}\r\n                    deleteRecord={this.deleteRecordmain}\r\n                    QuantityTransactionForGrid={this.gridfillingColumn(JSON.parse(this.props.Login.masterData.DesignMappedFeilds &&\r\n                        this.props.Login.masterData.DesignMappedFeilds['jsondata'] !== null &&\r\n                        this.props.Login.\r\n                            masterData.DesignMappedFeilds['jsondata'].value)['QuantityTransactionForGrid'])}\r\n                    QuantityTransactionForExpandedGrid={this.gridfillingColumn(JSON.parse(this.props.Login.masterData.DesignMappedFeilds &&\r\n                        this.props.Login.masterData.DesignMappedFeilds['jsondata'] !== null &&\r\n                        this.props.Login.\r\n                            masterData.DesignMappedFeilds['jsondata'].value)['QuantityTransactionForExpandedGrid'])}\r\n                    viewQuantityTrans={this.viewQuantityTrans}\r\n                    selectedRecord={this.props.Login.selectedRecord}\r\n                    intl={this.props.intl}\r\n                    DesignMappedFeilds={JSON.parse(this.props.Login.masterData.DesignMappedFeilds &&\r\n                        this.props.Login.masterData.DesignMappedFeilds['jsondata'] !== null &&\r\n                        this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)}\r\n                    screenName=\"IDS_QUANTITYTRANSACTION\"\r\n                />\r\n            );\r\n            tabMap.set(\"IDS_MATERIALINVENTORYFILE\",\r\n                <MaterialInvFileTab\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    deleteRecord={this.deleteRecordmain}\r\n                    MaterialFile={this.props.Login.masterData.MaterialInventoryFile || []}\r\n                    addMaterialFile={(param) => this.props.addMaterialInventoryFile(param, this.props.Login.masterData.SelectedMaterialInventory)}\r\n                    viewMaterialFile={this.viewMaterialFile}\r\n                    screenName=\"IDS_MATERIALINVENTORYFILE\"\r\n                    settings={this.props.settings}\r\n                />);\r\n        }\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    onInputOnChangeFile = (event, optional2) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let isSelectedRecordChange = this.state.isSelectedRecordChange\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? optional2[0] : optional2[1];\r\n        } else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = optional2;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n    updateMaterialStatus = (buttonId, nflag) => {\r\n        let inputParam = {}\r\n        let inputData = [];\r\n        let operation;\r\n        let masterData = this.props.Login.masterData\r\n        inputData[\"nflag\"] = nflag\r\n        operation = nflag === 1 ? 'RELEASED' : 'RETIRE'\r\n        inputData[\"nmaterialinventorycode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialinventorycode\r\n        inputData[\"nmaterialcode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialcode\r\n        inputData[\"nmaterialtypecode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialtypecode\r\n        inputData[\"nmaterialcatcode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialcatcode\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo\r\n        inputParam = {\r\n            classUrl: \"materialinventory\",\r\n            methodUrl: \"MaterialStatus\",\r\n            inputData: inputData,\r\n            operation: 'update',\r\n            selectedRecord: this.state.selectedRecord,\r\n            searchRef: this.searchRef,\r\n            dataState: this.state.dataState\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, buttonId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal: true, loadEsign: true, screenData: { inputParam, masterData }, operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    deleteRecordmain = (deleteParam) => {\r\n        const methodUrl = deleteParam.methodUrl;\r\n        const selected = JSON.stringify(deleteParam.selectedRecord[\"jsondata\"]);\r\n        let dataState = undefined;\r\n        if (this.props.screenName === \"IDS_SECTION\") {\r\n            dataState = this.state.sectionDataState;\r\n        } else if (this.props.screenName === \"IDS_METHOD\") {\r\n            dataState = this.state.methodDataState;\r\n        } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\r\n            dataState = this.state.instrumentCatDataState;\r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                ncontrolCode: deleteParam.ncontrolCode,\r\n                [methodUrl.toLowerCase()]: selected,\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            classUrl: \"materialinventory\",\r\n            operation: deleteParam.operation,\r\n            ncontrolCode: deleteParam.ncontrolCode,\r\n            methodUrl: methodUrl,\r\n            screenName: \"IDS_MATERIALINVENTORY\", dataState\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_MATERIALINVENTORY\", operation: deleteParam.operation, selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.searchRef.current.value = \"\";\r\n        let inputData = [];\r\n        if (this.state.selectedMaterialCat !== undefined ? this.state.selectedMaterialCat[\"nmaterialcatcode\"] !== \"\" : false) {\r\n            if (this.state.selectedMaterialcombo !== undefined ? this.state.selectedMaterialcombo[\"nmaterialcode\"] !== \"\" : false) {\r\n                // if (this.state.selectedMaterialCat[\"nmaterialcatcode\"] !== \"\" ) {\r\n                //     if (this.state.selectedMaterialcombo[\"nmaterialcode\"] !== \"\" ) {\r\n                inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\r\n                inputData[\"materialCatList\"] = this.state.materialCatList;\r\n                inputData[\"nmaterialcode\"] = this.state.selectedMaterialcombo[\"nmaterialcode\"].value\r\n                inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value\r\n                if (this.state.selectedcombo[\"nmaterialtypecode\"]) {\r\n                    this.props.getMaterialInventoryByID(this.state.selectedcombo,\r\n                        this.state.selectedMaterialCat, this.state.selectedMaterialcombo, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTUSERROLE\" }));\r\n                }\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMATERIAL\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMATERIALCATEGORY\" }));\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height\r\n            });\r\n        }\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        breadCrumbData.push(\r\n            {\r\n                \"label\": \"IDS_MATERIALTYPE\",\r\n                \"value\": this.props.Login.masterData.SelectedMaterialType ? this.props.Login.masterData.SelectedMaterialType[0]['jsondata'].smaterialtypename[this.props.Login.userInfo.slanguagetypecode] : \"NA\",\r\n\r\n            }, {\r\n\r\n            \"label\": \"IDS_MATERIALCAT\",\r\n            \"value\": this.props.Login.masterData.SelectedMaterialCategory ?\r\n                this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname !== undefined ?\r\n                    this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname : \"NA\" : \"NA\",\r\n        }, {\r\n\r\n            \"label\": \"IDS_MATERIAL\",\r\n            \"value\": this.props.Login.masterData.SelectedMaterialCrumb ?\r\n                this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].smaterialname !== undefined ?\r\n                    this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].smaterialname : \"NA\" : \"NA\",\r\n        }\r\n        );\r\n        return breadCrumbData;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let bool = false;\r\n        let { selectedRecord, selectedcombo, comboitem, filterData, filterCatList, selectedMaterialCat, selectedMaterialcombo,\r\n            materialCatList, MaterialComboList, SelectedMaterialInventory } = this.state\r\n        let masterData = this.props.Login.masterData;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            bool = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n        if (this.props.Login.selectedMaterialCat !== previousProps.Login.selectedMaterialCat) {\r\n            bool = true;\r\n            selectedMaterialCat = this.props.Login.selectedMaterialCat\r\n        }\r\n        if (this.props.Login.masterData.SelectedMaterialInventory !== previousProps.Login.masterData.SelectedMaterialInventory) {\r\n            bool = true;\r\n            SelectedMaterialInventory = this.props.Login.SelectedMaterialInventory\r\n        }\r\n\r\n        if (this.props.Login.comboitem !== previousProps.Login.comboitem) {\r\n            bool = true;\r\n            comboitem = this.props.Login.comboitem\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({\r\n                userRoleControlRights, controlMap, data: this.props.Login.masterData.ControlRights\r\n            });\r\n        }\r\n        if (this.props.Login.masterData.MaterialType !== undefined) {\r\n            if (this.props.Login.masterData.MaterialType !== previousProps.Login.masterData.MaterialType) {\r\n                bool = true;\r\n                const materialTypeList = constructjsonOptionList(this.props.Login.masterData.MaterialType,\r\n                    \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined,\r\n                    undefined, undefined,\r\n                    undefined, true, this.props.Login.userInfo.slanguagetypecode)\r\n                filterCatList = materialTypeList.get(\"OptionList\");\r\n\r\n                selectedcombo = {\r\n                    nmaterialtypecode: masterData.MaterialType && masterData.MaterialType.length > 0 ? {\r\n                        \"value\": masterData.MaterialType[0].nmaterialtypecode,\r\n                        \"label\": masterData.MaterialType[0]['jsondata'].smaterialtypename[this.props.Login.userInfo.slanguagetypecode]\r\n                    } : \"\"\r\n                }\r\n            }\r\n        }\r\n        if (this.props.Login.masterData.MaterialCategoryMain !== previousProps.Login.masterData.MaterialCategoryMain) {\r\n            bool = true;\r\n            const MaterialCategoryMain = constructOptionList(this.props.Login.masterData.MaterialCategoryMain || [], \"nmaterialcatcode\",\r\n                \"smaterialcatname\", undefined, undefined, undefined);\r\n            materialCatList = MaterialCategoryMain.get(\"OptionList\");\r\n\r\n            selectedMaterialCat = {\r\n                nmaterialcatcode: masterData.MaterialCategoryMain && masterData.MaterialCategoryMain.length > 0 ? {\r\n                    \"value\": masterData.MaterialCategoryMain[0].nmaterialcatcode,\r\n                    \"label\": masterData.MaterialCategoryMain[0].smaterialcatname\r\n                } : \"\"\r\n            }\r\n        }\r\n        if (this.props.Login.masterData.MaterialCombo !== previousProps.Login.masterData.MaterialCombo) {\r\n\r\n            bool = true;\r\n            let MaterialComboArr = [];\r\n            this.props.Login.masterData.MaterialCombo.map((temp => {\r\n                MaterialComboArr.push(temp.jsondata)\r\n            }))\r\n            const MaterialCombo = constructOptionList(MaterialComboArr || [], \"nmaterialcode\",\r\n                \"smaterialname\", undefined, undefined, undefined);\r\n            MaterialComboList = MaterialCombo.get(\"OptionList\");\r\n            selectedMaterialcombo = {\r\n                nmaterialcode: masterData.MaterialCombo && masterData.MaterialCombo.length > 0 ? {\r\n                    \"value\": masterData.MaterialCombo[0][\"jsondata\"].nmaterialcode,\r\n                    \"label\": masterData.MaterialCombo[0][\"jsondata\"].smaterialname\r\n                } : \"\"\r\n            }\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            filterData = this.generateBreadCrumData();\r\n        }\r\n        if (this.props.Login.masterData.searchedData !== previousProps.Login.masterData.searchedData) {\r\n            if (this.props.Login.masterData.searchedData) {\r\n                if (this.props.Login.masterData.searchedData.length <= this.state.skip) {\r\n                    this.setState({ skip: 0 });\r\n                }\r\n            }\r\n        }\r\n        if (bool) {\r\n            this.setState({\r\n                selectedRecord, comboitem, filterData, selectedcombo, filterCatList, selectedMaterialCat, selectedMaterialcombo,\r\n                materialCatList, MaterialComboList, SelectedMaterialInventory\r\n            });\r\n        }\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n\r\n    };\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    viewMaterialFile = (filedata) => {\r\n        const inputParam = {\r\n            inputData: {\r\n                nmaterialinventorycode: this.props.Login.masterData.SelectedMaterialInventory\r\n                    && this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode,\r\n                materialinventoryfile: JSON.stringify(filedata['jsondata']),\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            classUrl: \"materialinventory\",\r\n            operation: \"view\",\r\n            methodUrl: \"AttachedMaterialInventoryFile\",\r\n            screenname: \"IDS_MATERIALINVENTORY\"\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let showMaterialSection = this.props.Login.showMaterialSection\r\n        let isneedcombomulti = this.props.Login.isneedcombomulti;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let showModalPopup = this.props.Login.showModalPopup\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"RETIRE\"\r\n            || this.props.Login.operation === \"RELEASED\"||this.props.Login.operation === \"IDS_OPENDATE\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                showModalPopup = this.props.Login.operation === \"IDS_OPENDATE\"?true:false;\r\n               // selectedRecord =  this.props.Login.operation === \"IDS_OPENDATE\"?selectedRecord[\"IDS_OPENDATE\"]\r\n               // &&selectedRecord[\"IDS_OPENDATE\"]:{};\r\n                if(this.props.Login.operation === \"IDS_OPENDATE\")\r\n                {\r\n                    let temp=selectedRecord[\"IDS_OPENDATE\"]\r\n                    selectedRecord={}\r\n                    selectedRecord[\"IDS_OPENDATE\"]=temp\r\n                }\r\n                else\r\n                {\r\n                    selectedRecord ={};\r\n                }\r\n                \r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                //openModal = false;\r\n                showModalPopup = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            showMaterialSection = false;\r\n            isneedcombomulti = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, showMaterialSection, loadEsign, selectedRecord, selectedId: null,showModalPopup }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            if (fieldName === \"nmaterialtypecode\") {\r\n                const selectedcombo = this.state.selectedcombo || {};\r\n                selectedcombo[fieldName] = comboData;\r\n                this.searchRef.current.value = \"\";\r\n                this.props.initialcombochangeMaterialInvget(comboData.item.nmaterialtypecode, undefined, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n            }\r\n            if (fieldName === \"nmaterialcode\") {\r\n                const selectedMaterialcombo = this.state.selectedMaterialcombo || {};\r\n                selectedMaterialcombo[\"nmaterialcode\"] = comboData;\r\n                this.setState({ selectedMaterialcombo });\r\n\r\n            }\r\n            else if (fieldName === \"nmaterialcatcode\") {\r\n                const selectedMaterialCat = this.state.selectedMaterialCat || {};\r\n                selectedMaterialCat[fieldName] = comboData;\r\n                this.props.initialcombochangeMaterialInvget(this.state.selectedcombo[\"nmaterialtypecode\"].value, comboData.item.nmaterialcatcode, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n            }\r\n\r\n            else if (fieldName === \"nmaterialsectioncode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[\"nmaterialsectioncode\"] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n            else if (fieldName === \"nlinkcode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[\"nlinkcode\"] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n\r\n            else if (fieldName.displaymember === \"smaterialcatname\" || fieldName.displaymember === \"sunitname\" || fieldName.displaymember === \"speriodname\") {\r\n                const selectedMaterialCat = this.state.selectedMaterialCat || {};\r\n                selectedMaterialCat[fieldName] = comboData;\r\n                this.setState({ selectedMaterialCat });\r\n\r\n                let comboName = fieldName.label\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                if (comboData) {\r\n                    selectedRecord[comboName] = comboData;\r\n                } else {\r\n                    selectedRecord[comboName] = []\r\n                }\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n\r\n            else if (fieldName.label === \"IDS_STORAGECONDITION\") {\r\n                let comboName = fieldName.label\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                if (comboData) {\r\n                    selectedRecord[comboName] = comboData;\r\n                } else {\r\n                    selectedRecord[comboName] = []\r\n                }\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else if (fieldName === \"value\") {\r\n                const comboitem = this.state.comboitem || {};\r\n                comboitem[fieldName] = comboData;\r\n                this.setState({ comboitem });\r\n            }\r\n        }\r\n    }\r\n    onInputOnChange = (event, optional1, optional2) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.screenname !== \"IDS_MATERIALINVENTORYFILE\") {\r\n            if (event.target.type === 'checkbox') {\r\n                if (event.target.name === \"ntransactionstatus\")\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n                else\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else {\r\n            if (event.target.type === 'checkbox') {\r\n                selectedRecord[event.target.name] = event.target.checked === true ?transactionStatus.YES : transactionStatus.NO;\r\n            } else if (event.target.type === 'radio') {\r\n                selectedRecord[event.target.name] = optional2;\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    saveClick = () => {\r\n        let operation = \"update\";\r\n        let operations = 'IDS_OPENDATE';\r\n        let inputData = [];\r\n        inputData[\"IDS_OPENDATE\"] = this.state.selectedRecord.IDS_OPENDATE &&\r\n            convertDateTimetoString(this.state.selectedRecord.IDS_OPENDATE, this.props.Login.userInfo);\r\n        inputData[\"tzIDS_OPENDATE\"] = this.state.selectedRecord.tzIDS_OPENDATE && this.state.selectedRecord.tzIDS_OPENDATE;\r\n        inputData[\"nflag\"] = 3;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\r\n        inputData[\"nmaterialcatcode\"] = this.props.Login.masterData.SelectedMaterialCategory.nmaterialcatcode\r\n        inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode\r\n        inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialinventorycode\r\n        const inputParam = {\r\n            classUrl: \"materialinventory\",\r\n            methodUrl: \"MaterialStatus\",\r\n            inputData: inputData,\r\n            operation: operation\r\n        }\r\n\r\n        let masterData = this.props.Login.masterData\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal: true, loadEsign: true, screenData: { inputParam, masterData }, operations, showModalPopup: false\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"showModalPopup\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let inputParam = {};\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n\r\n        if (this.props.Login.screenname === \"IDS_MATERIALINVENTORY\") {\r\n            inputData[\"MaterialInventory\"] = {}\r\n            inputData[\"DateList\"] = []\r\n            const Layout = this.props.Login.masterData.selectedTemplate[0].jsondata\r\n            Layout.map((row) => {\r\n                row.children.map((column) => {\r\n                    column.children.map((component) => {\r\n                        if (component.inputtype === 'combo') {\r\n                            inputData[\"MaterialInventory\"][component.label] = this.state.selectedRecord[component.label] ? {\r\n                                label: this.state.selectedRecord[component.label][\"label\"],\r\n                                value: this.state.selectedRecord[component.label][\"value\"]\r\n                            } : \"\"\r\n\r\n                        }\r\n                        else if (component.inputtype === 'date') {\r\n                            if (this.state.selectedRecord[component.label]) {\r\n                                inputData[\"MaterialInventory\"][`tz${component.label}`] = component.hasOwnProperty('timezone') ? {\r\n                                    label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\r\n                                    value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\r\n                                } : {\r\n                                    label: this.props.Login.userInfo['stimezoneid'],\r\n                                    value: this.props.Login.userInfo['ntimezonecode']\r\n                                }\r\n                                inputData[\"MaterialInventory\"][component.label] = convertDateTimetoString(this.state.selectedRecord[component.label], this.props.Login.userInfo)\r\n                                inputData[\"DateList\"].push(component.label)\r\n                            }\r\n\r\n\r\n                        }\r\n                        else {\r\n                            inputData[\"MaterialInventory\"][component.label] = this.state.selectedRecord[component.label] && this.state.selectedRecord[component.label]\r\n                        }\r\n                        component.hasOwnProperty(\"children\") && component.children.map(\r\n                            (componentrow) => {\r\n                                if (componentrow.inputtype === 'combo') {\r\n                                    inputData[\"MaterialInventory\"][componentrow.label] = this.state.selectedRecord[componentrow.label] ?\r\n                                        {\r\n                                            label: this.state.selectedRecord[componentrow.label][\"label\"],\r\n                                            value: this.state.selectedRecord[componentrow.label][\"value\"]\r\n                                        } : \"\"\r\n                                }\r\n                                else if (componentrow.inputtype === 'date') {\r\n                                    if (this.state.selectedRecord[componentrow.label]) {\r\n                                        inputData[\"MaterialInventory\"][`tz${componentrow.label}`] = componentrow.hasOwnProperty('timezone') ? {\r\n                                            label: this.state.selectedRecord[`tz${componentrow.label}`][\"label\"],\r\n                                            value: this.state.selectedRecord[`tz${componentrow.label}`][\"value\"]\r\n                                        } : {\r\n                                            label: this.props.Login.userInfo['stimezoneid'],\r\n                                            value: this.props.Login.userInfo['ntimezonecode']\r\n                                        }\r\n                                        inputData[\"MaterialInventory\"][componentrow.label] = convertDateTimetoString(this.state.selectedRecord[componentrow.label],\r\n                                            this.props.Login.userInfo)\r\n                                        inputData[\"DateList\"].push(componentrow.label)\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    inputData[\"MaterialInventory\"][componentrow.label] = this.state.selectedRecord[componentrow.label] &&\r\n                                        this.state.selectedRecord[componentrow.label]\r\n                                }\r\n                            }\r\n                        )\r\n                    })\r\n                })\r\n            })\r\n            inputData[\"MaterialInventory\"] = {\r\n                ...inputData[\"MaterialInventory\"],\r\n                \"IDS_INVENTORYTRANSACTIONTYPE\": {\r\n                    label: \"Outside\",\r\n                    value: 2\r\n                },\r\n                \"IDS_TRANSACTIONTYPE\": {\r\n                    label: \"Received\",\r\n                    value: 47\r\n                },\r\n                [this.props.Login.masterData.siteLabelName && this.props.Login.masterData.siteLabelName]: {\r\n                    label: this.props.Login.masterData.siteName && this.props.Login.masterData.siteName,\r\n                    value: this.props.Login.userInfo.nsitecode && this.props.Login.userInfo.nsitecode\r\n                },\r\n                \"dretestdate\": this.props.Login.masterData.SelectedMaterialInventory &&\r\n                    this.props.Login.masterData.SelectedMaterialInventory['jsondata'] &&\r\n                    this.props.Login.masterData.SelectedMaterialInventory['jsondata'].dretestdate,\r\n                  \"IDS_AVAILABLEQUANTITY\": this.state.selectedRecord['IDS_RECEIVEDQUANTITY'],\r\n                \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n                \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n                \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n                \"ntranscode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].ntranscode === 3 ?\r\n                    transactionStatus.QUARANTINE : transactionStatus.RELEASED,\r\n                \"IDS_INVENTORYID\": this.state.selectedRecord[\"IDS_INVENTORYID\"] && this.state.selectedRecord[\"IDS_INVENTORYID\"]\r\n            }\r\n\r\n            inputData[\"materialInventoryJson\"] = JSON.stringify(inputData[\"MaterialInventory\"])\r\n            inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\r\n            inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value\r\n            inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode\r\n            if (this.props.Login.operation === 'create') {\r\n                inputParam = {\r\n                    classUrl: \"materialinventory\",\r\n                    methodUrl: \"MaterialInventory\",\r\n                    inputData: inputData,\r\n                    operation: this.props.Login.operation,\r\n                    saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef,\r\n                    dataState: this.state.dataState\r\n                }\r\n            }\r\n            else {\r\n                inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode\r\n                inputParam = {\r\n                    classUrl: \"materialinventory\",\r\n                    methodUrl: \"MaterialInventory\",\r\n                    inputData: inputData,\r\n                    operation: this.props.Login.operation,\r\n                    saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef,\r\n                    dataState: this.state.dataState\r\n                }\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (this.props.Login.screenName === \"IDS_MATERIAL\") {\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                }\r\n            } else {\r\n                if (this.props.Login.masterData.copyScreenRights ? this.props.Login.masterData.copyScreenRights.length > 0 : false) {\r\n                    this.ConfirmComponent()\r\n                }\r\n                else {\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }\r\n                    else {\r\n                        this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        else if (this.props.Login.screenname === \"IDS_QUANTITYTRANSACTION\") {\r\n            let nflag = true;\r\n            if (this.state.selectedRecord['IDS_TRANSACTIONTYPE'].value === 47) {\r\n                nflag = false\r\n            }\r\n            if (nflag ? (this.state.selectedRecord['IDS_RECEIVEDQUANTITY'] <= parseFloat(this.state.selectedRecord['IDS_AVAILABLEQUANTITY'])) : true) {\r\n                const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata\r\n                let dynamicobj = {};\r\n                inputData[\"DateList\"] = [];\r\n                Layout.map((row) => {\r\n                    row.children.map((column) => {\r\n                        column.children.map((component) => {\r\n                            if (component.inputtype === 'combo') {\r\n                                if (this.state.selectedRecord[component.label]) {\r\n                                    dynamicobj[component.label] = {\r\n                                        label: this.state.selectedRecord[component.label][\"label\"],\r\n                                        value: this.state.selectedRecord[component.label][\"value\"]\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (component.inputtype === 'Numeric') {\r\n                                if (this.state.selectedRecord[component.label]) {\r\n                                    dynamicobj[component.label] = this.state.selectedRecord[component.label].toString()\r\n\r\n                                }\r\n                            }\r\n                            else if (component.inputtype === 'date') {\r\n                                if (this.state.selectedRecord[component.label]) {\r\n                                    dynamicobj[`tz${component.label}`] = component.hasOwnProperty('timezone') ? {\r\n                                        label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\r\n                                        value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\r\n                                    } : {\r\n                                        label: this.props.Login.userInfo['stimezoneid'],\r\n                                        value: this.props.Login.userInfo['ntimezonecode']\r\n                                    }\r\n                                    dynamicobj[component.label] = convertDateTimetoString(this.state.selectedRecord[component.label], this.props.Login.userInfo)\r\n                                    inputData[\"DateList\"].push(component.label)\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n                                if (this.state.selectedRecord[component.label]) {\r\n                                    dynamicobj[component.label] = this.state.selectedRecord[component.label]\r\n                                }\r\n                            }\r\n                            component.hasOwnProperty(\"children\") && component.children.map(\r\n                                (componentrow) => {\r\n                                    if (componentrow.inputtype === 'combo') {\r\n                                        if (this.state.selectedRecord[componentrow.label]) {\r\n                                            dynamicobj[componentrow.label] =\r\n                                            {\r\n                                                label: this.state.selectedRecord[componentrow.label][\"label\"],\r\n                                                value: this.state.selectedRecord[componentrow.label][\"value\"]\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        if (this.state.selectedRecord[componentrow.label]) {\r\n                                            dynamicobj[componentrow.label] = this.state.selectedRecord[componentrow.label]\r\n                                        }\r\n                                    }\r\n                                    if (componentrow.inputtype === 'date') {\r\n                                        if (this.state.selectedRecord[componentrow.label]) {\r\n                                            dynamicobj[`tz${componentrow.label}`] = componentrow.hasOwnProperty('timezone') ? {\r\n                                                label: this.state.selectedRecord[`tz${componentrow.label}`][\"label\"],\r\n                                                value: this.state.selectedRecord[`tz${componentrow.label}`][\"value\"]\r\n                                            } : {\r\n                                                label: this.props.Login.userInfo['stimezoneid'],\r\n                                                value: this.props.Login.userInfo['ntimezonecode']\r\n                                            }\r\n                                            dynamicobj[componentrow.label] = convertDateTimetoString(this.state.selectedRecord[componentrow.label], this.props.Login.userInfo)\r\n                                            inputData[\"DateList\"].push(componentrow.label)\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            )\r\n                        })\r\n                    })\r\n                })\r\n                dynamicobj = {\r\n                    ...dynamicobj, \"ntransactiontype\":\r\n                        this.state.selectedRecord.IDS_TRANSACTIONTYPE && this.state.selectedRecord.IDS_TRANSACTIONTYPE.value,\r\n                    \"navailableqty\": this.state.selectedRecord.IDS_AVAILABLEQUANTITY !== undefined\r\n                        ? this.state.selectedRecord.IDS_AVAILABLEQUANTITY :\r\n                        this.props.Login.navailableqtyref,\r\n                    \"IDS_INVENTORYID\": this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.IDS_INVENTORYID\r\n\r\n                }\r\n                inputData[\"nprecision\"] = this.props.Login.masterData.nprecision && this.props.Login.masterData.nprecision\r\n                inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode\r\n                inputData[\"MaterialInventoryTrans\"] = JSON.stringify(dynamicobj)\r\n                inputParam = {\r\n                    classUrl: \"materialinventory\",\r\n                    methodUrl: \"MaterialInventoryTrans\",\r\n                    inputData: inputData,\r\n                    operation: 'create',\r\n                    saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef,\r\n                    dataState: this.state.dataState\r\n                }\r\n                let masterData = this.props.Login.masterData\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                }\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_RETURNEDLESSTHANAVAILABLE\" }));\r\n            }\r\n        }\r\n        else if (this.props.Login.screenname === \"IDS_MATERIALINVENTORYFILE\") {\r\n            inputParam = this.onSaveMaterialFile();\r\n            let masterData = this.props.Login.masterData\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n    }\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    ConfirmComponent = () => {\r\n        this.confirmMessage.confirm(\"confirmation\", \"Confiramtion!\", this.props.intl.formatMessage({ id: \"IDS_OVERWRITRTHEEXISTINGSCREENRIGHTS\" }),\r\n            \"ok\", \"cancel\", () => this.copyAlertSave());\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handleClickDelete(masterData, ncontrolcode, modalName) {\r\n        // if (this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RETIRED &&\r\n        //     this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RELEASED) {\r\n        if (this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode === transactionStatus.QUARANTINE) {\r\n            const fieldArray = [];\r\n            let postParam = {\r\n                inputListName: \"MaterialInventory\", selectedObject: \"SelectedMaterialInventory\",\r\n                primaryKeyField: \"nmaterialinventorycode\",\r\n                primaryKeyValue: fieldArray,\r\n                fetchUrl: \"materialinventory/getMaterialInventory\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                \"nmaterialtypecode\": this.props.Login.masterData.length > 0 && this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n                \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n                \"nmaterialcode\": this.props.Login.masterData.length > 0 && this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n            }\r\n            modalName = 'openModal'\r\n\r\n            const inputParam = {\r\n                methodUrl: \"MaterialInventory\",\r\n                classUrl: \"materialinventory\",\r\n                inputData: {\r\n                    \"material\": this.props.Login.masterData.SelectedMaterial,\r\n                    \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n                    \"nmaterialinventorycode\": this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode,\r\n                    \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n                },\r\n                operation: \"delete\", postParam,\r\n                displayName: \"Material\",\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, [modalName]: true,\r\n                        operation: 'delete', screenName: \"Material\", id: \"material\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, modalName);\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTQUARENTINEINVENTORY\" }));\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        let inputData = [];\r\n        inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\r\n        inputData[\"materialCatList\"] = this.state.materialCatList;\r\n        const inputParam = {\r\n            classUrl: \"materialinventory\",\r\n            methodUrl: \"getMaterialInventoryByID\",\r\n            displayName: \"MaterialInventory\",\r\n            inputData: inputData\r\n        }\r\n        this.setState({ sectionDataState: { skip: 0, take: 10 } })\r\n        if (this.state.selectedcombo[\"nmaterialtypecode\"]) {\r\n            this.props.getMaterialInventoryByID(this.props.Login.masterData.SelectedMaterialType[0],\r\n                this.props.Login.masterData.SelectedMaterialCategory, this.props.Login.masterData.SelectedMaterialCrumb['jsondata'], this.props.Login.masterData, this.props.Login.userInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTUSERROLE\" }));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, getAddMaterialInventoryPopup, updateMaterialStatus, openDatePopup, getQuantityTransactionPopup, getQuantityTransactionOnchange,\r\n    updateStore, initialcombochangeMaterialInvget, viewAttachment, getMaterialChildValues,\r\n    crudMaster, getMaterialInventoryDetails, getMaterialInventoryByID, addMaterialInventoryFile\r\n    , filterColumnData, validateEsignCredential\r\n})(injectIntl(MaterialInventory));\r\n\r\n"]},"metadata":{},"sourceType":"module"}