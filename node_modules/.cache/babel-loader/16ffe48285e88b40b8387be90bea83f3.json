{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboard\\\\AddParameter.js\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { process } from '@progress/kendo-data-query';\nimport FormInput from '../../components/form-input/form-input.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport ComboBoxControl from './ComboBoxControl';\nimport { MediaHeader } from '../../components/App.styles';\nimport { Attachments } from '../../components/dropzone/dropzone.styles';\n\nconst AddParameter = props => {\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, [...props.parameters.keys()].map((parameter, index) => props.parameters.get(parameter).value === \"DateTimePicker\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(DateTimePicker, {\n    name: parameter,\n    label: props.intl.formatMessage({\n      id: props.parameters.get(parameter).actuallableName\n    }),\n    className: \"form-control\",\n    placeholderText: \"Select date..\",\n    selected: props.parameters.get(parameter).Datetime,\n    dateFormat: \"dd/MM/yyyy\",\n    isClearable: false,\n    isMandatory: true,\n    required: true //onChange={props.onChange(props.parameters.get(parameter).lableName)}\n    ,\n    onChange: props.onChange(parameter),\n    value: props.parameters.get(parameter).Datetime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 29\n    }\n  }))) : props.parameters.get(parameter).TableName === \"\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: props.parameters.get(parameter).actuallableName\n    }),\n    name: parameter,\n    type: \"text\",\n    onChange: props.onInputOnChange(props.parameters.get(parameter).lableName),\n    placeholder: props.intl.formatMessage({\n      id: props.parameters.get(parameter).actuallableName\n    }),\n    value: props.parameters.get(parameter).textValue,\n    isMandatory: true,\n    required: true,\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 33\n    }\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(ComboBoxControl, {\n    onvaluechange: props.onComboChange(parameter),\n    tableName: props.parameters.get(parameter).TableName,\n    fieldName: props.parameters.get(parameter).lableName,\n    labelName: props.parameters.get(parameter).actuallableName,\n    displayParam: props.parameters.get(parameter).DisplayParam,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 33\n    }\n  })))), props.queryTypeCode === 2 && /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MediaHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    style: {\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }\n  }, props.selectedRecord[\"sscreenheader\"] ? props.selectedRecord[\"sscreenheader\"] : props.sscreenheader ? props.sscreenheader : \"\", \":\", props.resultStatus === \"Warning\" ? \"\" : `${props.slideResult.length} Items`))), props.resultStatus === \"Success\" ? /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, props.slideResult && props.slideResult.length > 0 ? /*#__PURE__*/React.createElement(DataGrid, {\n    pageable: true,\n    scrollable: \"scrollable\",\n    gridHeight: '600px' //gridWidth={'600px'}\n    ,\n    data: props.slideResult || [],\n    dataResult: process(props.slideResult || [], props.dataStateUserQuery),\n    dataState: props.dataStateUserQuery,\n    dataStateChange: props.userQueryDataStateChange,\n    extractedColumnList: props.slideList || [],\n    detailedFieldList: [],\n    hideDetailBand: true,\n    controlMap: props.controlMap,\n    methodUrl: \"SQLQuery\",\n    isActionRequired: false,\n    isToolBarRequired: true,\n    isAddRequired: false,\n    isRefreshRequired: false,\n    selectedId: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }) : /*#__PURE__*/React.createElement(Attachments, {\n    className: \"norecordtxt\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 22\n    }\n  }, props.intl.formatMessage({\n    id: \"IDS_NORECORDSAVAILABLE\"\n  }))) : props.resultStatus === \"Warning\" ? /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(MediaHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    style: {\n      color: \"red\",\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 29\n    }\n  }, \"Message : \", \" \", props.slideResult[0] && props.slideResult[0].Messages))) : \"\");\n};\n\nexport default injectIntl(AddParameter);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dashboard/AddParameter.js"],"names":["React","injectIntl","Row","Col","DataGrid","process","FormInput","DateTimePicker","ComboBoxControl","MediaHeader","Attachments","AddParameter","props","parameters","keys","map","parameter","index","get","value","intl","formatMessage","id","actuallableName","Datetime","onChange","TableName","onInputOnChange","lableName","textValue","onComboChange","DisplayParam","queryTypeCode","fontWeight","selectedRecord","sscreenheader","resultStatus","slideResult","length","dataStateUserQuery","userQueryDataStateChange","slideList","controlMap","color","Messages"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,OAAOC,QAAP,MAAqB,gDAArB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,OAAOC,cAAP,MAA2B,8DAA3B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,WAAT,QAA4B,2CAA5B;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAE5B,sBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAAC,GAAGA,KAAK,CAACC,UAAN,CAAiBC,IAAjB,EAAJ,EAA6BC,GAA7B,CAAiC,CAACC,SAAD,EAAYC,KAAZ,KAC9BL,KAAK,CAACC,UAAN,CAAiBK,GAAjB,CAAqBF,SAArB,EAAgCG,KAAhC,KAA0C,gBAA1C,gBACI,uDACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AACI,IAAA,IAAI,EAAEH,SADV;AAEI,IAAA,KAAK,EAAEJ,KAAK,CAACQ,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAEV,KAAK,CAACC,UAAN,CAAiBK,GAAjB,CAAqBF,SAArB,EAAgCO;AAAtC,KAAzB,CAFX;AAGI,IAAA,SAAS,EAAC,cAHd;AAII,IAAA,eAAe,EAAC,eAJpB;AAKI,IAAA,QAAQ,EAAEX,KAAK,CAACC,UAAN,CAAiBK,GAAjB,CAAqBF,SAArB,EAAgCQ,QAL9C;AAMI,IAAA,UAAU,EAAE,YANhB;AAOI,IAAA,WAAW,EAAE,KAPjB;AAQI,IAAA,WAAW,EAAE,IARjB;AASI,IAAA,QAAQ,EAAE,IATd,CAUI;AAVJ;AAWI,IAAA,QAAQ,EAAEZ,KAAK,CAACa,QAAN,CAAeT,SAAf,CAXd;AAYI,IAAA,KAAK,EAAEJ,KAAK,CAACC,UAAN,CAAiBK,GAAjB,CAAqBF,SAArB,EAAgCQ,QAZ3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADJ,GAoBIZ,KAAK,CAACC,UAAN,CAAiBK,GAAjB,CAAqBF,SAArB,EAAgCU,SAAhC,KAA8C,EAA9C,gBACI,uDACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAEd,KAAK,CAACQ,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAEV,KAAK,CAACC,UAAN,CAAiBK,GAAjB,CAAqBF,SAArB,EAAgCO;AAAtC,KAAzB,CADX;AAEI,IAAA,IAAI,EAAEP,SAFV;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,QAAQ,EAAEJ,KAAK,CAACe,eAAN,CAAsBf,KAAK,CAACC,UAAN,CAAiBK,GAAjB,CAAqBF,SAArB,EAAgCY,SAAtD,CAJd;AAKI,IAAA,WAAW,EAAEhB,KAAK,CAACQ,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAEV,KAAK,CAACC,UAAN,CAAiBK,GAAjB,CAAqBF,SAArB,EAAgCO;AAAtC,KAAzB,CALjB;AAMI,IAAA,KAAK,EAAEX,KAAK,CAACC,UAAN,CAAiBK,GAAjB,CAAqBF,SAArB,EAAgCa,SAN3C;AAOI,IAAA,WAAW,EAAE,IAPjB;AAQI,IAAA,QAAQ,EAAE,IARd;AASI,IAAA,SAAS,EAAE,GATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADJ,gBAiBI,uDACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,eAAD;AACI,IAAA,aAAa,EAAEjB,KAAK,CAACkB,aAAN,CAAoBd,SAApB,CADnB;AAEI,IAAA,SAAS,EAAEJ,KAAK,CAACC,UAAN,CAAiBK,GAAjB,CAAqBF,SAArB,EAAgCU,SAF/C;AAGI,IAAA,SAAS,EAAEd,KAAK,CAACC,UAAN,CAAiBK,GAAjB,CAAqBF,SAArB,EAAgCY,SAH/C;AAII,IAAA,SAAS,EAAEhB,KAAK,CAACC,UAAN,CAAiBK,GAAjB,CAAqBF,SAArB,EAAgCO,eAJ/C;AAKI,IAAA,YAAY,EAAEX,KAAK,CAACC,UAAN,CAAiBK,GAAjB,CAAqBF,SAArB,EAAgCe,YALlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CAtCX,CADL,EAoDKnB,KAAK,CAACoB,aAAN,KAAwB,CAAxB,iBACG,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAUI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,KAAK,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKrB,KAAK,CAACsB,cAAN,CAAqB,eAArB,IACGtB,KAAK,CAACsB,cAAN,CAAqB,eAArB,CADH,GAEKtB,KAAK,CAACuB,aAAN,GAAsBvB,KAAK,CAACuB,aAA5B,GAA4C,EAHtD,OAIMvB,KAAK,CAACwB,YAAN,KAAuB,SAAvB,GAAmC,EAAnC,GAAyC,GAAExB,KAAK,CAACyB,WAAN,CAAkBC,MAAO,QAJ1E,CADJ,CAVJ,CArDR,EAyEK1B,KAAK,CAACwB,YAAN,KAAuB,SAAvB,gBACG,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKxB,KAAK,CAACyB,WAAN,IAAqBzB,KAAK,CAACyB,WAAN,CAAkBC,MAAlB,GAAyB,CAA9C,gBACG,oBAAC,QAAD;AACI,IAAA,QAAQ,EAAE,IADd;AAEI,IAAA,UAAU,EAAE,YAFhB;AAGI,IAAA,UAAU,EAAE,OAHhB,CAII;AAJJ;AAKI,IAAA,IAAI,EAAE1B,KAAK,CAACyB,WAAN,IAAqB,EAL/B;AAMI,IAAA,UAAU,EAAEhC,OAAO,CAACO,KAAK,CAACyB,WAAN,IAAqB,EAAtB,EAA0BzB,KAAK,CAAC2B,kBAAhC,CANvB;AAOI,IAAA,SAAS,EAAE3B,KAAK,CAAC2B,kBAPrB;AAQI,IAAA,eAAe,EAAE3B,KAAK,CAAC4B,wBAR3B;AASI,IAAA,mBAAmB,EAAE5B,KAAK,CAAC6B,SAAN,IAAmB,EAT5C;AAUI,IAAA,iBAAiB,EAAE,EAVvB;AAWI,IAAA,cAAc,EAAE,IAXpB;AAYI,IAAA,UAAU,EAAE7B,KAAK,CAAC8B,UAZtB;AAaI,IAAA,SAAS,EAAC,UAbd;AAcI,IAAA,gBAAgB,EAAE,KAdtB;AAeI,IAAA,iBAAiB,EAAE,IAfvB;AAgBI,IAAA,aAAa,EAAE,KAhBnB;AAiBI,IAAA,iBAAiB,EAAE,KAjBvB;AAkBI,IAAA,UAAU,EAAI,IAlBlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,gBAqBA,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI9B,KAAK,CAACQ,IAAN,CAAWC,aAAX,CAAyB;AAACC,IAAAA,EAAE,EAAC;AAAJ,GAAzB,CADJ,CAtBL,CADH,GA2BKV,KAAK,CAACwB,YAAN,KAAuB,SAAvB,gBACE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,EAAE,KAAT;AAAgBV,MAAAA,UAAU,EAAE;AAA5B,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,YADL,OACoBrB,KAAK,CAACyB,WAAN,CAAkB,CAAlB,KAAwBzB,KAAK,CAACyB,WAAN,CAAkB,CAAlB,EAAqBO,QADjE,CADJ,CADJ,CADF,GAOI,EA3Gd,CADJ;AA+GH,CAjHD;;AAkHA,eAAgB3C,UAAU,CAACU,YAAD,CAA1B","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport ComboBoxControl from './ComboBoxControl';\r\nimport { MediaHeader } from '../../components/App.styles';\r\nimport { Attachments } from '../../components/dropzone/dropzone.styles';\r\n\r\nconst AddParameter = (props) => {\r\n    \r\n    return (\r\n        <Row>\r\n            {[...props.parameters.keys()].map((parameter, index) => (\r\n                props.parameters.get(parameter).value === \"DateTimePicker\" ?\r\n                    <>\r\n                        <Col lg={12}>\r\n                            <DateTimePicker\r\n                                name={parameter}\r\n                                label={props.intl.formatMessage({ id: props.parameters.get(parameter).actuallableName })}\r\n                                className='form-control'\r\n                                placeholderText=\"Select date..\"\r\n                                selected={props.parameters.get(parameter).Datetime}\r\n                                dateFormat={\"dd/MM/yyyy\"}\r\n                                isClearable={false}\r\n                                isMandatory={true}\r\n                                required={true}\r\n                                //onChange={props.onChange(props.parameters.get(parameter).lableName)}\r\n                                onChange={props.onChange(parameter)}\r\n                                value={props.parameters.get(parameter).Datetime}\r\n                            />\r\n                        </Col>\r\n                    </>\r\n                    :\r\n                    props.parameters.get(parameter).TableName === \"\" ?\r\n                        <>\r\n                            <Col lg={12}>\r\n                                <FormInput\r\n                                    label={props.intl.formatMessage({ id: props.parameters.get(parameter).actuallableName })}\r\n                                    name={parameter}\r\n                                    type=\"text\"\r\n                                    onChange={props.onInputOnChange(props.parameters.get(parameter).lableName)}\r\n                                    placeholder={props.intl.formatMessage({ id: props.parameters.get(parameter).actuallableName })}\r\n                                    value={props.parameters.get(parameter).textValue}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={100}\r\n                                />\r\n                            </Col>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <Col lg={12}>\r\n                                <ComboBoxControl\r\n                                    onvaluechange={props.onComboChange(parameter)}\r\n                                    tableName={props.parameters.get(parameter).TableName}\r\n                                    fieldName={props.parameters.get(parameter).lableName}\r\n                                    labelName={props.parameters.get(parameter).actuallableName}\r\n                                    displayParam={props.parameters.get(parameter).DisplayParam}\r\n                                />\r\n                            </Col>\r\n                        </>\r\n            ))\r\n            }\r\n            {props.queryTypeCode === 2 &&\r\n                <Col md={12}>\r\n                    {/* <FormInput\r\n                        label={props.intl.formatMessage({ id: props.selectedRecord[\"sscreenheader\"] ? props.selectedRecord[\"sscreenheader\"] : props.sscreenheader ? props.sscreenheader : \"\" })}\r\n                        name={\"IDS_SCREENHEADER\"}\r\n                        type=\"text\"\r\n                        //onChange={props.onInputOnChange(index)}\r\n                        //placeholder={props.intl.formatMessage({ id: props.parameters[index].lableName })}\r\n                        value={props.slideResult.length}\r\n                        readOnly={true}\r\n                    /> */}\r\n                    <MediaHeader>\r\n                        <h6 style={{ fontWeight: \"bold\" }}>\r\n                            {props.selectedRecord[\"sscreenheader\"] ?\r\n                                props.selectedRecord[\"sscreenheader\"]\r\n                                : props.sscreenheader ? props.sscreenheader : \"\"}\r\n                            :{props.resultStatus === \"Warning\" ? \"\" : `${props.slideResult.length} Items`}\r\n                        </h6>\r\n                    </MediaHeader>\r\n                </Col>\r\n            }\r\n            {props.resultStatus === \"Success\" ?\r\n                <Col md={12}>\r\n                    {props.slideResult && props.slideResult.length>0?\r\n                        <DataGrid\r\n                            pageable={true}\r\n                            scrollable={\"scrollable\"}\r\n                            gridHeight={'600px'}\r\n                            //gridWidth={'600px'}\r\n                            data={props.slideResult || []}\r\n                            dataResult={process(props.slideResult || [], props.dataStateUserQuery)}\r\n                            dataState={props.dataStateUserQuery}\r\n                            dataStateChange={props.userQueryDataStateChange}\r\n                            extractedColumnList={props.slideList || []}\r\n                            detailedFieldList={[]}\r\n                            hideDetailBand={true}\r\n                            controlMap={props.controlMap}\r\n                            methodUrl=\"SQLQuery\"\r\n                            isActionRequired={false}\r\n                            isToolBarRequired={true}\r\n                            isAddRequired={false}\r\n                            isRefreshRequired={false}\r\n                            selectedId = {null}\r\n                        />\r\n                    :<Attachments className=\"norecordtxt\">\r\n                        {props.intl.formatMessage({id:\"IDS_NORECORDSAVAILABLE\"})}\r\n                    </Attachments>}\r\n                </Col>\r\n                : props.resultStatus === \"Warning\" ?\r\n                    <Col md={12}>\r\n                        <MediaHeader>\r\n                            <h6 style={{ color: \"red\", fontWeight: \"bold\" }}>\r\n                                {\"Message : \"} {props.slideResult[0] && props.slideResult[0].Messages}</h6>\r\n                        </MediaHeader>\r\n                    </Col>\r\n                    : \"\"}\r\n        </Row>\r\n    )\r\n}\r\nexport default (injectIntl(AddParameter));\r\n"]},"metadata":{},"sourceType":"module"}