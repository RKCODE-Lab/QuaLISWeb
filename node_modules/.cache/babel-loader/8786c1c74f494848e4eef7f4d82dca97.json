{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntry.jsx\";\nimport React, { Component } from 'react';\nimport { faPlay, faAddressBook, faCheckCircle, faEye, faPencilRuler, faFileImport, faSync, faBorderAll, faLink, faComment, faComments, faPaperclip, faCommentDots, faChevronRight, faMicroscope, faFlask, faHistory } from '@fortawesome/free-solid-svg-icons';\nimport { Card, Col, Row, Nav, Button } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileInvoice } from '@fortawesome/free-solid-svg-icons';\nimport SplitterLayout from \"react-splitter-layout\";\nimport { ContentPanel } from '../../components/App.styles';\nimport { crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule, fetchMaterialRecord, completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord, fetchTaskRecord, parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType, getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus, viewAttachment, validateEsignCredentialComplete, getAttachmentCombo, deleteAttachment, getCommentsCombo, updateTestMethodSource, resultImportFile, filterTransactionList, validateEsignCredential, getSampleChildTabREDetail, updateParameterComments, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial, previewSampleReport, getMeanCalculationTestParameter, getAvailableMaterialQuantity, testStart, getSubSampleChildTabDetail, getSampleChildTabDetail, getREFilterTemplate //,deleteResultUsedMaterial\n} from '../../actions';\nimport { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone } from '../../components/CommonScript';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { parameterType, grade, transactionStatus, RegistrationType, RegistrationSubType, FORMULAFIELDTYPE, designProperties, SideBarSeqno, SideBarTabIndex } from '../../components/Enumeration';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport { ProductList } from '../product/product.styled';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ResultEntryResultsTab from './ResultEntryResultsTab';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ResultEntryFilter from './ResultEntryFilter';\nimport ResultEntryInstrumentForm from './ResultEntryInstrumentForm';\nimport ResultEntryForm from './ResultEntryForm';\nimport TestEditForm from './TestEditForm';\nimport SampleInfoView from '../approval/SampleInfoView';\nimport SampleInfoGrid from '../approval/SampleInfoGrid';\nimport ApprovalInstrumentTab from '../approval/ApprovalInstrumentTab';\nimport ResultEntryTaskTab from './ResultEntryTaskTab';\nimport ResultEntryTaskForm from './ResultEntryTaskForm';\nimport ResultEntryParamCommetsForm from './ResultEntryParamCommetsForm';\nimport TemplateForm from '../checklist/checklist/TemplateForm';\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\nimport { numberConversion, numericGrade } from './ResultEntryValidation';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport ResultEntryFormulaForm from './ResultEntryFormulaForm';\nimport SampleApprovalHistory from '../approval/SampleApprovalHistory';\nimport ResultChangeHistoryTab from '../approval/ResultChangeHistoryTab';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveSampleAttachment, onSaveTestAttachment, onSaveSubSampleAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport { onSaveSampleComments, onSaveTestComments, onSaveSubSampleComments } from '../attachmentscomments/comments/CommentFunctions';\nimport ResultEntryImport from './ResultEntryImport';\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'; // import ReactTooltip from 'react-tooltip';\n\nimport ResultEntryMean from './ResultEntryMean';\nimport ScrollBar from 'react-perfect-scrollbar';\nimport ResultEntryMaterialForm from './ResultEntryMaterialForm';\nimport ResultUsedMaterial from './UsedMaterial';\nimport { FontIconWrap } from '../../components/data-grid/data-grid.styles';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\n\nclass ResultEntry extends Component {\n  constructor(props) {\n    super(props);\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.props.Login.masterData.selectedImportFile;\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: { ...this.props.Login.masterData,\n            selectedImportFile: selectedRecord\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openTemplateModal = this.props.Login.openTemplateModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let screenName = this.props.Login.screenName;\n      let operation = this.props.Login.operation;\n      let loadFile = this.props.Login.loadFile;\n      let updateInfo = {};\n\n      if (screenName === \"IDS_RESULTFORMULA\") {\n        screenName = \"IDS_RESULTENTRY\";\n        operation = \"update\";\n        let showValidate = !this.props.Login.showValidate;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName,\n            operation,\n            showValidate,\n            validateFormulaMandyFields: []\n          }\n        };\n      } else {\n        if (this.props.Login.loadEsign) {\n          if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"complete\" || this.props.Login.operation === \"default\" || this.props.Login.operation === \"deleteTask\" || this.props.Login.operation === \"deleteInstrument\") {\n            loadEsign = false;\n            openModal = false;\n            selectedRecord = {};\n          } else if (this.props.Login.operation === \"updatechecklist\") {\n            loadEsign = false;\n            openModal = false;\n          } else {\n            loadEsign = false;\n          }\n        } else {\n          openModal = false;\n          openTemplateModal = false;\n          selectedRecord = {};\n          loadFile = false;\n        }\n\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            screenName,\n            loadEsign,\n            selectedRecord,\n            openTemplateModal,\n            loadFile\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        let inputData = [];\n\n        if (fieldname === \"fromDate\") {\n          let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            fromdate: dateObj.fromDate,\n            //this.OnDateConverstion(event, fieldname),\n            todate: dateObj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        }\n\n        if (fieldname === \"toDate\") {\n          let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            fromdate: dateObj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: dateObj.toDate,\n            //this.OnDateConverstion(event, fieldname),\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        } // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \n        //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \n\n\n        if (fieldname === \"nsampletypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"] || this.props.Login.masterData.fromDate, this.state.selectedRecord && this.state.selectedRecord[\"toDate\"] || this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            nsampletypecode: parseInt(event.value),\n            fromdate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            userinfo: this.props.Login.userInfo,\n            defaultSampleType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getRERegistrationType(inputData);\n        } else if (fieldname === \"nregtypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"] || this.props.Login.masterData.fromDate, this.state.selectedRecord && this.state.selectedRecord[\"toDate\"] || this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 3,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            fromdate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            nregtypecode: parseInt(event.value),\n            userinfo: this.props.Login.userInfo,\n            defaultRegistrationType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getRERegistrationSubType(inputData);\n        } else if (fieldname === \"nregsubtypecode\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 4,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultRegistrationSubType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        } else if (fieldname === 'ndesigntemplatemappingcode') {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          const inputParamData = {\n            nflag: 3,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            //defaultFilterStatus: event.item,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n            // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n            //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\n            ndesigntemplatemappingcode: event.value,\n            DesignTemplateMappingValue: event.item\n          }; //this.props.getREFilterTestData(inputParamData)\n\n          this.props.getREFilterTemplate(inputParamData);\n        } else if (fieldname === \"version\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 4,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultApprovalConfigVersion: event.item,\n            masterData: this.props.Login.masterData,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\n          };\n          this.props.getREJobStatus(inputData);\n        } else if (fieldname === \"jobstatus\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultjobstatus: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREFilterStatus(inputData);\n        } else if (fieldname === \"filter\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: 1,\n            // parseInt(this.props.Login.masterData.defaultjobstatus.njobstatuscode),\n            ntranscode: String(event.value),\n            userinfo: this.props.Login.userInfo,\n            defaultFilterStatus: event.item,\n            masterData: this.props.Login.masterData,\n            DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\n          };\n          this.props.getREFilterTestData(inputData);\n        } else if (fieldname === \"test\") {\n          let defaultTestvalues = event.item;\n          this.props.Login.masterData.defaultTestvalues = defaultTestvalues;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {}\n      }\n    };\n\n    this.OnDateConverstion = (date, fieldname) => {\n      const month = validateTwoDigitDate(String(date.getMonth() + 1));\n      const day = validateTwoDigitDate(String(date.getDate()));\n\n      if (fieldname === \"fromDate\") {\n        date = date.getFullYear() + '-' + month + '-' + day + \"T00:00:00\";\n      } else {\n        date = date.getFullYear() + '-' + month + '-' + day + \"T23:59:00\";\n      }\n\n      return date;\n    };\n\n    this.onReload = () => {\n      let {\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realApproveConfigVersion,\n        realFilterStatusValue,\n        realTestcodeValue\n      } = this.props.Login.masterData; //let obj = this.covertDatetoString(realFromDate, realToDate)\n\n      let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate: obj.fromDate,\n        realToDate: obj.toDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApproveConfigVersion,\n        realTestcodeValue\n      };\n      let inputData = {\n        nsampletypecode: realSampleTypeValue && realSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: realRegTypeValue && realRegTypeValue.nregtypecode || -1,\n        nregsubtypecode: realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode || -1,\n        napprovalversioncode: realApproveConfigVersion && realApproveConfigVersion.napprovalconfigversioncode || -1,\n        ntranscode: String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\n        ntestcode: realTestcodeValue ? realTestcodeValue.ntestcode : -1,\n        ntransactiontestcode: 0,\n        njobstatuscode: this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode || 1,\n        fromdate: obj.fromDate,\n        todate: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n        showTest: true,\n        showSample: false,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n      };\n      const inpuParamData = {\n        inputData,\n        masterData,\n        refs: {\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef\n        },\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        historyDataState: this.state.historyDataState\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1 && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== -1) {\n        this.props.getResultEntryDetails(inpuParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onDesignTemplateChange = (event, fieldName, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onREFilterSubmit = event => {\n      // let realFromDate = new Date(this.props.Login.masterData.fromDate)\n      // let realToDate = new Date(this.props.Login.masterData.toDate)\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let realSampleTypeValue = this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType;\n      let realRegTypeValue = this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType;\n      let realRegSubTypeValue = this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType;\n      let realApproveConfigVersion = this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion;\n      let realFilterStatusValue = this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus;\n      let realTestcodeValue = this.props.Login.masterData.defaultTestvalues && this.props.Login.masterData.defaultTestvalues; //let obj = this.covertDatetoString(realFromDate, realToDate)\n\n      let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate: obj.fromDate,\n        realToDate: obj.toDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApproveConfigVersion,\n        realTestcodeValue\n      };\n      let inputData = {\n        nsampletypecode: this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType.nsampletypecode || -1,\n        nregtypecode: this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType.nregtypecode || -1,\n        nregsubtypecode: this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode || -1,\n        napprovalversioncode: this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode || -1,\n        ntranscode: String(this.props.Login.masterData.defaultFilterStatus ? this.props.Login.masterData.defaultFilterStatus.ntransactionstatus : -1),\n        ntestcode: this.props.Login.masterData.defaultTestvalues ? this.props.Login.masterData.defaultTestvalues.ntestcode : -1,\n        ntransactiontestcode: 0,\n        njobstatuscode: this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode || 1,\n        fromdate: obj.fromDate,\n        todate: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n        showTest: true,\n        showSample: false,\n        nneedsubsample: this.props.Login.masterData.nneedsubsample || false,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode || -1,\n        nneedtemplatebasedflow: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow || false\n      };\n      const inpuParamData = {\n        inputData,\n        masterData,\n        refs: {\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef\n        },\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        historyDataState: this.state.historyDataState\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1 && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== undefined) {\n        this.props.getResultEntryDetails(inpuParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onSecondaryPaneSizeChange = (e, val) => {// let hGrand = this.state.grandparentheight\n      // let check = e - 400;\n      // if (check > 1) {\n      //     hGrand = this.state.parentHeight + check\n      // }\n      // this.setState({\n      //     paneHeight: e - val,\n      //     secondPaneHeight: hGrand - e - 70,\n      //     grandparentheight: hGrand\n      // })\n      // this.setState({\n      //     paneHeight: e - val,\n      //     secondPaneHeight: this.state.parentHeight - e - 70\n      // })\n    };\n\n    this.onComboCategoryChange = (event, fieldname) => {\n      if (event !== null) {\n        let uRL = \"\";\n        let inputData = [];\n        uRL = 'resultentrybysample/getResultUsedInstrumentCombo';\n\n        if (fieldname === \"ninstrumentcatcode\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 2,\n            ninstrumentcatcode: event.value,\n            ncalibrationRequired: event.item.ncalibrationreq\n          };\n        }\n\n        rsapi.post(uRL, inputData).then(response => {\n          const TagInstrument = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n          const TagListInstrument = TagInstrument.get(\"OptionList\");\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData,\n                Instrument: TagListInstrument\n              },\n              selectedRecord: { ...this.props.Login.selectedRecord,\n                [fieldname]: event,\n                ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : []\n              }\n            }\n          };\n          this.props.updateStore(updateInfo); // const selectedRecord = this.state.selectedRecord || {};\n          // selectedRecord[fieldname] = event;\n          // this.setState({ selectedRecord });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }\n    };\n\n    this.testRETabDetail = () => {\n      const testTabMap = new Map(); //let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.RE_TEST || [];\n      testList = testList.slice(testskip, testskip + testtake);\n      const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode;\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      testTabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(ResultEntryResultsTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.dataStateChange,\n        fetchRecord: this.props.parameterRecord,\n        controlMap: this.state.controlMap,\n        parameterParam: {\n          primaryKeyField: \"ntransactionresultcode\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        checkListRecord: this.checkListRecord,\n        checklistParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        selectedId: this.props.Login.selectedId || null,\n        viewFile: this.props.viewAttachment,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_RESULTS\",\n        getMeanTestParameter: this.props.getMeanCalculationTestParameter,\n        meanParam: {\n          \"userInfo\": this.props.Login.userInfo,\n          ncontrolCode: meanControlId\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 39\n        }\n      }));\n      testTabMap.set(\"IDS_INSTRUMENT\", /*#__PURE__*/React.createElement(ApprovalInstrumentTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedInstrument\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.instrumentDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteInstrumentRecord,\n        fetchRecord: this.fetchInstrumentRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_INSTRUMENT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 42\n        }\n      }));\n      testTabMap.set(\"IDS_MATERIAL\", /*#__PURE__*/React.createElement(ResultUsedMaterial, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedMaterial\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.materialDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteMaterialRecord,\n        fetchRecord: this.props.fetchMaterialRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_MATERIAL\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 40\n        }\n      }));\n      testTabMap.set(\"IDS_TASK\", /*#__PURE__*/React.createElement(ResultEntryTaskTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedTask\",\n        addResultEntryTask: this.addResultEntryTask,\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\n        },\n        dataState: this.state.taskDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteTaskRecord,\n        fetchRecord: this.fetchTaskRecord //fetchRecord={this.fetchInstrumentRecord}\n        ,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_TASK\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 36\n        }\n      }));\n      testTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        nsubsampleneed: this.props.Login.masterData.nneedsubsample,\n        subFields: [{\n          [designProperties.VALUE]: \"stestsynonym\"\n        }, {\n          [designProperties.VALUE]: \"dcreateddate\"\n        }],\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: selectedTestList //this.props.Login.masterData.RESelectedTest\n\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 47\n        }\n      }));\n      testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onCommentsSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.dataStateChange,\n        masterData: this.props.Login.masterData,\n        isTestComment: true,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          masterList: this.props.Login.masterData.RESelectedTest,\n          ncontrolCode: this.state.controlMap.has(\"DeleteTestComment\") && this.state.controlMap.get(\"DeleteTestComment\").ncontrolcode\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RESelectedTest,\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 801,\n          columnNumber: 44\n        }\n      }));\n      testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", /*#__PURE__*/React.createElement(ResultChangeHistoryTab, {\n        userInfo: this.props.Login.userInfo,\n        ApprovalResultChangeHistory: this.props.Login.masterData.ResultChangeHistory || [],\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultChangeDataState,\n        dataStateChange: this.dataStateChange,\n        screenName: \"IDS_RESULTCHANGEHISTORY\",\n        controlMap: this.state.controlMap,\n        masterData: this.props.Login.masterData,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedId: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 51\n        }\n      }));\n      return testTabMap;\n    };\n\n    this.sampleDataStateChange = event => {\n      switch (this.props.Login.activeSampleKey) {\n        case \"IDS_APPROVALHISTORY\":\n          this.setState({\n            sampleHistoryDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sampleGridDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.sampleGridDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.dataStateChange = event => {\n      switch (this.props.Login.activeTestKey) {\n        case \"IDS_RESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_MATERIAL\":\n          this.setState({\n            materialDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TASK\":\n          this.setState({\n            taskDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          this.setState({\n            documentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          this.setState({\n            resultChangeDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SAMPLECOMMENTS\":\n          this.setState({\n            sampleChangeDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.subsampleTabDetail = () => {\n      let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\n      let {\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n      tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        nsubsampleneed: this.props.Login.masterData.nneedsubsample,\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1089,\n          columnNumber: 48\n        }\n      }));\n      tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"RESelectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        masterData: this.props.Login.masterData,\n        isTestComment: false,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1131,\n          columnNumber: 45\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          RESelectedSample: this.props.Login.masterData.RESelectedSample,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab\n        };\n        this.props.getSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.onTestTabChange = tabProps => {\n      const activeTestKey = tabProps.screenName;\n\n      if (activeTestKey !== this.props.Login.activeTestKey) {\n        if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n            RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\n            // ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\n            //     this.props.Login.masterData.selectedTestCode : this.props.Login.masterData.RESelectedTest ?\n            //         String(this.props.Login.masterData.RESelectedTest.ntransactiontestcode) : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: activeTestKey,\n            screenName: activeTestKey,\n            resultDataState: this.state.resultDataState,\n            instrumentDataState: this.state.instrumentDataState,\n            materialDataState: this.state.materialDataState,\n            taskDataState: this.state.taskDataState,\n            documentDataState: this.state.documentDataState,\n            resultChangeDataState: this.state.resultChangeDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            sampleChangeDataState: this.state.sampleChangeDataState\n          };\n          this.props.getTestChildTabREDetail(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.onSubSampleTabChange = tabProps => {\n      const activeSubSampleTab = tabProps.screenName;\n\n      if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSubSampleTab,\n          activeSubSampleTab,\n          subSampleCommentDataState: this.state.subSampleCommentDataState,\n          subSampleAttachmentDataState: this.state.subSampleAttachmentDataState\n        };\n        this.props.getSubSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.subSampledataStateChange = event => {\n      switch (this.props.Login.activeSubSampleTab) {\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          this.setState({\n            subSampleCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          this.setState({\n            subSampleAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testMethodSourceEdit = test => {\n      this.props.testMethodSourceEdit(test);\n    };\n\n    this.addREInstrument = test => {\n      this.props.addREInstrument(test);\n    };\n\n    this.deleteInstrumentRecord = test => {\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      test = { ...test,\n        'ndesigntemplatemappingcode': ndesigntemplatemappingcode\n      };\n      let inputParam = {\n        inputData: { ...test,\n          'ndesigntemplatemappingcode': ndesigntemplatemappingcode,\n          'userinfo': this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        operation: \"deleteInstrument\",\n        screenName: \"deleteInstrumentAction\",\n        displayName: this.props.Login.inputParam.displayName //, postParam,\n        //test: test\n\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteInstrumentAction\",\n            operation: \"deleteInstrument\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.deleteInstrumentRecord(test);\n      }\n    };\n\n    this.fetchInstrumentRecord = test => {\n      this.props.fetchInstrumentRecord(test);\n    };\n\n    this.fetchMaterialRecord = test => {\n      this.props.fetchMaterialRecord(test);\n    };\n\n    this.deleteMaterialRecord = test => {\n      const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n      const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      test = { ...test,\n        nregtypecode: nregtypecode,\n        nregsubtypecode: nregsubtypecode,\n        ndesigntemplatemappingcode: ndesigntemplatemappingcode\n      };\n      let inputParam = {\n        inputData: { ...test.selectedRecord,\n          nregtypecode: nregtypecode,\n          nregsubtypecode: nregsubtypecode,\n          ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n          ntransactiontestcode: test.masterData.RESelectedTest ? test.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n          userinfo: this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        classUrl: 'resultentrybysample',\n        methodUrl: \"ResultUsedMaterial\",\n        operation: \"delete\",\n        screenName: \"deleteMaterialAction\",\n        displayName: this.props.Login.inputParam.displayName,\n        //, postParam,\n        //test: test\n        nresultusedmaterialcode: test.selectedRecord.nresultusedmaterialcode\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteMaterialAction\",\n            operation: \"deleteMaterial\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\"); //this.props.deleteResultUsedMaterial(test)\n      }\n    };\n\n    this.deleteTaskRecord = test => {\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      test = { ...test,\n        ndesigntemplatemappingcode: ndesigntemplatemappingcode\n      };\n      let inputParam = {\n        inputData: { ...test,\n          'userinfo': this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        operation: \"deleteTask\",\n        displayName: this.props.Login.inputParam.displayName //, postParam,\n        //test: test\n\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteTaskaction\",\n            operation: \"deleteTask\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.deleteTaskRecord(test);\n      }\n    };\n\n    this.fetchTaskRecord = test => {\n      this.props.fetchTaskRecord(test);\n    };\n\n    this.addResultEntryTask = inputData => {\n      let selectedRecord = {};\n      selectedRecord = {\n        npreregno: inputData.npreregno,\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        stestsynonym: inputData.stestsynonym\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: selectedRecord,\n          operation: \"create\",\n          screenName: \"IDS_TASK\",\n          openModal: true,\n          activeTestKey: \"IDS_TASK\",\n          ncontrolcode: inputData.addResultUsedTaskId,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.checkListRecord = parameterData => {\n      this.props.checkListRecord(parameterData, this.props.Login.userInfo);\n    };\n\n    this.getFormula = (parameterData, userInfo, masterData, index, event) => {\n      this.setState({\n        modalEvent: event.currentTarget\n      });\n      this.props.getFormula(parameterData, userInfo, masterData, index, this.state.selectedRecord);\n    };\n\n    this.calculateFormula = () => {\n      const selectedRecord = this.state.selectedRecord || [];\n      const selectedForumulaInput = selectedRecord.selectedForumulaInput || [];\n      let lstDynamicFields = [];\n\n      if (selectedForumulaInput) {\n        selectedForumulaInput.map(dynamicfields => lstDynamicFields.push(dynamicfields));\n        const inputData = {\n          masterData: this.props.Login.masterData,\n          lstDynamicFields: lstDynamicFields,\n          userInfo: this.props.Login.userInfo,\n          selectedRecord: selectedRecord,\n          selectedResultGrade: this.state.selectedRecord.selectedResultGrade,\n          ResultParameter: this.state.selectedRecord.ResultParameter || {}\n        };\n        this.props.calculateFormula(inputData);\n      }\n    };\n\n    this.resultImport = () => {\n      this.props.Login.masterData.selectedImportFile = [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          operation: \"create\",\n          screenName: \"IDS_RESULTIMPORTFILE\",\n          openModal: true,\n          loadFile: true,\n          activeTestKey: \"IDS_RESULTS\",\n          masterData: this.props.Login.masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.handleSubSamplePageChange = e => {\n      this.setState({\n        subSampleSkip: e.skip,\n        subSampleTake: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take,\n        sampletakeDataState: e.take\n      });\n    };\n\n    this.verticalPaneSizeChange = val => {\n      if (this.state.enableAutoHeight) {\n        this.setState({\n          initialVerticalWidth: val - 150\n        });\n      }\n    };\n\n    this.changeSplitterOption = () => {\n      this.setState({\n        enableAutoHeight: !this.state.enableAutoHeight,\n        initialVerticalWidth: \"57vh\"\n      });\n    };\n\n    this.sideNavDetail = screenName => {\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.RE_TEST || [];\n      const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\"); // let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      return screenName == \"IDS_RESULTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_RESULTS\",\n        tabDetail: this.resultTabDetail(),\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1566,\n          columnNumber: 17\n        }\n      }) : screenName == \"IDS_ATTACHMENTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\",\n        tabDetail: this.attachmentTabDetail(),\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1568,\n          columnNumber: 21\n        }\n      }) : screenName == \"IDS_COMMENTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_TESTCOMMENTS\",\n        tabDetail: this.commentTabDetail(),\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1570,\n          columnNumber: 25\n        }\n      }) : screenName == \"IDS_INSTRUMENT\" ? /*#__PURE__*/React.createElement(ApprovalInstrumentTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedInstrument\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.instrumentDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteInstrumentRecord,\n        fetchRecord: this.fetchInstrumentRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_INSTRUMENT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1573,\n          columnNumber: 29\n        }\n      }) : screenName == \"IDS_MATERIAL\" ? /*#__PURE__*/React.createElement(ResultUsedMaterial, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedMaterial\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.materialDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteMaterialRecord,\n        fetchRecord: this.props.fetchMaterialRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_MATERIAL\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1592,\n          columnNumber: 33\n        }\n      }) : screenName == \"IDS_TASK\" ? /*#__PURE__*/React.createElement(ResultEntryTaskTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedTask\",\n        addResultEntryTask: this.addResultEntryTask,\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\n        },\n        dataState: this.state.taskDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteTaskRecord,\n        fetchRecord: this.fetchTaskRecord //fetchRecord={this.fetchInstrumentRecord}\n        ,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_TASK\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1611,\n          columnNumber: 37\n        }\n      }) : screenName == \"IDS_SAMPLEDETAILS\" ? this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n        data: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {},\n        SingleItem: this.state.SingleItem,\n        screenName: \"IDS_SAMPLEINFO\",\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1638,\n          columnNumber: 45\n        }\n      }) : /*#__PURE__*/React.createElement(SampleInfoGrid, {\n        selectedSample: this.props.Login.masterData.RESelectedSample,\n        dataState: this.state.sampleGridDataState,\n        dataStateChange: this.sampleGridDataStateChange,\n        extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n        detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        screenName: \"IDS_SAMPLEGRID\",\n        jsonField: \"jsondata\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1646,\n          columnNumber: 45\n        }\n      }) : \"\";\n    };\n\n    this.resultTabDetail = () => {\n      const resultTabMap = new Map(); //let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      // let { testskip, testtake } = this.state\n      // let testList = this.props.Login.masterData.RE_TEST || [];\n      // testList = testList.slice(testskip, testskip + testtake);\n\n      const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode; //let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      resultTabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(ResultEntryResultsTab, {\n        tabSequence: SideBarSeqno.TEST,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.dataStateChange,\n        fetchRecord: this.props.parameterRecord,\n        controlMap: this.state.controlMap,\n        parameterParam: {\n          primaryKeyField: \"ntransactionresultcode\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        checkListRecord: this.checkListRecord,\n        checklistParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        selectedId: this.props.Login.selectedId || null,\n        viewFile: this.props.viewAttachment,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_RESULTS\",\n        getMeanTestParameter: this.props.getMeanCalculationTestParameter,\n        meanParam: {\n          \"userInfo\": this.props.Login.userInfo,\n          ncontrolCode: meanControlId\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1673,\n          columnNumber: 41\n        }\n      }));\n      resultTabMap.set(\"IDS_RESULTCHANGEHISTORY\", /*#__PURE__*/React.createElement(ResultChangeHistoryTab, {\n        tabSequence: SideBarSeqno.TEST,\n        userInfo: this.props.Login.userInfo,\n        ApprovalResultChangeHistory: this.props.Login.masterData.ResultChangeHistory || [],\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultChangeDataState,\n        dataStateChange: this.dataStateChange,\n        screenName: \"IDS_RESULTCHANGEHISTORY\",\n        controlMap: this.state.controlMap,\n        masterData: this.props.Login.masterData,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedId: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1694,\n          columnNumber: 13\n        }\n      }));\n      return resultTabMap;\n    };\n\n    this.attachmentTabDetail = () => {\n      const attachmentTabMap = new Map();\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let {\n        testskip,\n        testtake,\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      let testList = this.props.Login.masterData.RE_TEST || [];\n      testList = testList.slice(testskip, testskip + testtake);\n      const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode;\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n      attachmentTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        tabSequence: SideBarSeqno.TEST,\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        nsubsampleneed: this.props.Login.masterData.nneedsubsample,\n        subFields: [{\n          [designProperties.VALUE]: \"stestsynonym\"\n        }, {\n          [designProperties.VALUE]: \"dcreateddate\"\n        }],\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: selectedTestList //this.props.Login.masterData.RESelectedTest\n\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1728,\n          columnNumber: 53\n        }\n      }));\n      this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample && attachmentTabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        tabSequence: SideBarSeqno.SUBSAMPLE,\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        nsubsampleneed: this.props.Login.masterData.nneedsubsample,\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1773,\n          columnNumber: 58\n        }\n      }));\n      attachmentTabMap.set(\"IDS_SAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        tabSequence: SideBarSeqno.SAMPLE,\n        selectedMaster: this.props.Login.masterData.RESelectedSample,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        onSaveClick: this.onAttachmentSaveClick,\n        masterList: this.props.Login.masterData.RESelectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHEMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        nsubsampleneed: this.props.Login.masterData.nneedsubsample,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: this.props.Login.screenName\n        },\n        editParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RESelectedSample\n        },\n        selectedListName: \"IDS_ARNUMBER\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1817,\n          columnNumber: 13\n        }\n      }));\n      return attachmentTabMap;\n    };\n\n    this.commentTabDetail = () => {\n      const commentTabMap = new Map();\n      let {\n        testskip,\n        testtake,\n        subSampleSkip,\n        subSampleTake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.RE_TEST || [];\n      const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let npreregno = this.props.Login.masterData.REselectedSample ? this.props.Login.masterData.REselectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      const ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\n      subsampleList = subsampleList.slice(subSampleSkip, subSampleSkip + subSampleTake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n      commentTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        tabSequence: SideBarSeqno.TEST,\n        selectedMaster: selectedTestList,\n        onSaveClick: this.onCommentsSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        isTestComment: false,\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        masterData: this.props.Login.masterData,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: selectedTestList,\n          ncontrolCode: editTestCommentsId\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1877,\n          columnNumber: 47\n        }\n      }));\n      this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample && commentTabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        tabSequence: SideBarSeqno.SUBSAMPLE,\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        masterData: this.props.Login.masterData,\n        isTestComment: false,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1923,\n          columnNumber: 52\n        }\n      }));\n      commentTabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        tabSequence: SideBarSeqno.SAMPLE,\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"RESelectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        masterData: this.props.Login.masterData,\n        addName: \"AddSampleComment\",\n        editName: \"EditSampleComment\",\n        deleteName: \"DeleteSampleComment\",\n        methodUrl: \"SampleComment\",\n        isTestComment: false,\n        masterList: this.props.Login.masterData.RESelectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nregcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.dataStateChange,\n        deleteParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RESelectedSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_ARNUMBER\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1968,\n          columnNumber: 49\n        }\n      }));\n      return commentTabMap;\n    };\n\n    this.onInputSwitchOnChange = event => {\n      if (event.target.name == \"PopupNav\") {\n        this.setState({\n          enablePropertyPopup: !this.state.enablePropertyPopup\n        });\n      } else {\n        this.setState({\n          enableAutoClick: !this.state.enableAutoClick\n        });\n      }\n    };\n\n    this.changePropertyViewClose = id => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          activeTabIndex: undefined,\n          activeTestTab: undefined,\n          activeTabId: id\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.changePropertyView = (index, screenName, event, status) => {\n      let id = false;\n\n      if (event && event.ntransactiontestcode) {\n        id = event.ntransactiontestcode;\n      } else if (event && event.ntransactionsamplecode) {\n        id = event.ntransactionsamplecode;\n      } else if (event && event.npreregno) {\n        id = event.npreregno;\n      } //console.log(this.state.activeTabId, id , \"=======>\")\n\n\n      let activeTabIndex;\n      let activeTabId;\n\n      if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false; //activeTabId = this.state.activeTabIndex !== index ? true:false;\n      }\n\n      if (status != \"click\") {\n        if (index) {\n          const tabProps = {\n            tabSequence: SideBarSeqno.TEST,\n            screenName: screenName == \"IDS_COMMENTS\" ? \"IDS_TESTCOMMENTS\" : screenName === \"IDS_ATTACHMENTS\" ? \"IDS_TESTATTACHMENTS\" : screenName,\n            activeTabIndex //activeTabId\n\n          };\n          this.onTabChange(tabProps);\n        } // if (index == SideBarTabIndex.RESULT) {\n        //     const tabProps = {\n        //         tabSequence: SideBarSeqno.TEST,\n        //         screenName: \"IDS_RESULTS\",\n        //         activeTabIndex,\n        //         //activeTabId\n        //     }\n        //     this.onTabChange(tabProps);\n        // }\n        // else if (index == SideBarTabIndex.ATTACHMENTS) {\n        //     const tabProps = {\n        //         tabSequence: SideBarSeqno.TEST,\n        //         screenName: \"IDS_TESTATTACHMENTS\",\n        //         activeTabIndex,\n        //        // activeTabId\n        //     }\n        //     this.onTabChange(tabProps);\n        // }\n        // else if (index == SideBarTabIndex.COMMENTS) {\n        //     const tabProps = {\n        //         tabSequence: SideBarSeqno.TEST,\n        //         screenName: \"IDS_TESTCOMMENTS\",\n        //         activeTabIndex,\n        //         //activeTabId\n        //     }\n        //     this.onTabChange(tabProps);\n        // }\n        // else {\n        //     if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        //         const updateInfo = {\n        //             typeName: DEFAULT_RETURN,\n        //             data: {\n        //                 activeTabIndex: this.state.activeTabIndex !== index ? index : id ? index : false,\n        //                 activeTabId: id\n        //             }\n        //         }\n        //         this.props.updateStore(updateInfo);\n        //     }\n        // }\n\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n      const tabseqno = tabProps.tabSequence; // if (activeTestTab !== this.props.Login.activeTestTab) {\n\n      if (tabseqno == SideBarSeqno.TEST) {\n        if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n            RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: activeTestTab,\n            screenName: activeTestTab,\n            //activeTestTab,\n            resultDataState: this.state.resultDataState,\n            instrumentDataState: this.state.instrumentDataState,\n            materialDataState: this.state.materialDataState,\n            taskDataState: this.state.taskDataState,\n            documentDataState: this.state.documentDataState,\n            resultChangeDataState: this.state.resultChangeDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\n            activeTabId: tabProps.activeTabId ? tabProps.activeTabId : this.state.activeTabId\n          };\n          this.props.getTestChildTabREDetail(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      } else if (tabseqno == SideBarSeqno.SUBSAMPLE) {\n        if (activeTestTab !== this.props.Login.activeTestTab) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            screenName: activeTestTab,\n            activeTestTab,\n            activeSubSampleTab: activeTestTab,\n            subSampleCommentDataState: this.state.subSampleCommentDataState,\n            subSampleAttachmentDataState: this.state.subSampleAttachmentDataState\n          };\n          this.props.getSubSampleChildTabDetail(inputData);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSAMPLE\"\n          }));\n        }\n      } else {\n        if (activeTestTab !== this.props.Login.activeTestTab) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            RESelectedSample: this.props.Login.masterData.RESelectedSample,\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            screenName: activeTestTab,\n            activeSampleTab: activeTestTab,\n            activeTestTab,\n            sampleChangeDataState: this.state.sampleChangeDataState\n          };\n          this.props.getSampleChildTabDetail(inputData);\n        }\n      } //}\n\n    };\n\n    this.defaultActions = (testChildGetREParam, RESelectedTest, RESelectedSample, setDefaultId, testskip, testtake) => {\n      const nregtypecode = this.props.Login.masterData.realRegTypeValue.nregtypecode;\n      const nregsubtypecode = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"completeTest\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'nregtypecode': nregtypecode,\n            'nregsubtypecode': nregsubtypecode,\n            'ncontrolcode': setDefaultId\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"default\",\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: { ...testChildGetREParam,\n            ncontrolcode: setDefaultId\n          },\n          RESelectedTest: acceptTestList,\n          RESelectedSample: RESelectedSample\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, setDefaultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"defaultaction\",\n              operation: \"default\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.defaultTest(inputParam.testChildGetREParam, acceptTestList, RESelectedSample, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTTEST\"\n        }));\n      }\n    };\n\n    this.completeActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"completeTest\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'ncontrolcode': completeResultId\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"complete\",\n          postParamList: this.postParamList,\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: testChildGetREParam,\n          RESelectedTest: acceptTestList,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"complete\",\n              operation: \"complete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.completeTest(inputParam, acceptTestList, userInfo, completeResultId);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCOMPLETE\"\n        }));\n      }\n    };\n\n    this.testStartActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"completeTest\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'ncontrolcode': completeResultId\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"complete\",\n          postParamList: this.postParamList,\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: testChildGetREParam,\n          RESelectedTest: acceptTestList,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"complete\",\n              operation: \"complete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.testStart(inputParam, acceptTestList, userInfo, completeResultId);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCOMPLETE\"\n        }));\n      }\n    };\n\n    this.onSaveCheckList = (selectedRecord, userInfo, nregtypecode, nregsubtypecode) => {\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        let inputParam = {\n          \"inputData\": {\n            userinfo: userInfo\n          }\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              selectedRecord,\n              userInfo,\n              nregtypecode,\n              nregsubtypecode,\n              inputParam,\n              operation: \"updatechecklist\"\n            },\n            openModal: true,\n            operation: \"updatechecklist\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode);\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.props.Login.operation === 'complete' || this.props.Login.operation === 'default' || this.props.Login.operation === \"updatechecklist\" || this.props.Login.operation === 'deleteInstrument' || this.props.Login.operation === 'createMethod' || this.props.Login.operation === 'deleteTask' || this.props.Login.operation === 'updateParameterComments') {\n        this.props.validateEsignCredentialComplete(inputParam, \"openModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveFileClick = (saveType, formRef) => {\n      const selectedImportFile = this.props.Login.masterData.selectedImportFile;\n      const acceptedFile = selectedImportFile ? selectedImportFile.sfilename : [];\n      const formData = new FormData(); // if(nattachmenttypecode === attachmentType.FTP) {\n\n      if (acceptedFile && acceptedFile.length > 0) {\n        acceptedFile.forEach((file, index) => {\n          formData.append(\"uploadedFile\" + index, file);\n        });\n        formData.append(\"filecount\", acceptedFile.length);\n      } else {\n        return toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYONEFILETOSUBMIT\"\n        }));\n      }\n\n      formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n      formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.realRegTypeValue.nregtypecode));\n      formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode));\n      formData.append(\"stransactiontestcode\", JSON.stringify(this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"));\n      this.props.resultImportFile(formData, this.props.Login.masterData);\n    };\n\n    this.onDropFile = acceptedFile => {\n      // let selectedImportFile = this.props.Login.masterData.selectedImportFile || [];\n      // selectedImportFile['sfilename'] = acceptedFile;\n      this.props.Login.masterData.selectedImportFile['sfilename'] = acceptedFile;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: this.props.Login.masterData\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({selectedImportFile});\n    };\n\n    this.onFormulaInputChange = (event, index, fields) => {\n      let selectedRecord = this.state.selectedRecord;\n      let selectedForumulaInput = this.state.selectedRecord.selectedForumulaInput || [];\n      let selectedMandatory = this.state.selectedRecord.selectedMandatory || [];\n      let dynamicformulafields = {};\n\n      if (event) {\n        if (fields.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER) {\n          const value = event.target.value.replace(/[^-^0-9]/g, '');\n\n          if (/^-?\\d*?$/.test(value) || value === \"\") {\n            if (this.state.selectedRecord.formulainput) {\n              dynamicformulafields.svalues = value;\n              dynamicformulafields.sparameter = fields.sdescription;\n              selectedForumulaInput[index] = dynamicformulafields;\n              selectedMandatory[index] = event.target.value;\n            }\n          }\n\n          selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\n          selectedRecord[\"selectedMandatory\"] = selectedMandatory;\n          this.setState({\n            selectedRecord: selectedRecord\n          });\n        } else {\n          const value = event.target.value.replace(/[^-^0-9.]/g, '');\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(value) || value === \"\") {\n            if (this.state.selectedRecord.formulainput) {\n              dynamicformulafields.svalues = value;\n              dynamicformulafields.sparameter = fields.sdescription;\n              selectedForumulaInput[index] = dynamicformulafields;\n              selectedMandatory[index] = event.target.value;\n            }\n          } // else {\n          //     dynamicformulafields.svalues = selectedForumulaInput.length > 0 ? selectedForumulaInput[index].svalues : \"\";\n          //     selectedForumulaInput[index].svalues = selectedForumulaInput.length > 0 ? selectedForumulaInput[index].svalues : \"\";\n          // }\n\n\n          selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\n          selectedRecord[\"selectedMandatory\"] = selectedMandatory;\n          this.setState({\n            selectedRecord: selectedRecord\n          });\n        }\n      }\n    };\n\n    this.onTemplateInputChange = (event, control) => {\n      let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control);\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onTemplateComboChange = (comboData, control) => {\n      let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control);\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onTemplateDateChange = (dateData, control) => {\n      let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control); //this.setState({selectedRecord});\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputChange = (Data, name) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (Data) {\n        selectedRecord[name] = Data.target.value; //this.setState({selectedRecord});\n      } else {\n        selectedRecord[name] = []; //this.setState({selectedRecord});\n      }\n\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onNumericChange = (numericData, numericName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (numericData) {\n        if (numericName !== \"scomments\") {\n          selectedRecord[numericName] = numericData; //this.setState({selectedRecord});\n        } else {\n          selectedRecord[numericName] = numericData.target.value; //this.setState({selectedRecord});\n        }\n      } else {\n        selectedRecord[numericName] = \"\"; //this.setState({selectedRecord});\n      }\n\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onDateChange = (dateName, dateValue) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      selectedRecord[dateName] = dateValue;\n\n      if (dateName === \"dfromdate\" || dateName === \"dtodate\") {\n        this.setState({\n          selectedRecord\n        }); // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: { selectedRecord: selectedRecord }\n        // }\n        //this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      let meanTestParameterList = this.state.meanTestParameterList || [];\n      let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\n\n      if (checked) {\n        const data = meanTestParameterList.map(item => {\n          item.selected = checked;\n          selectedMeanTestParam.set(item.ntransactionresultcode, item.sresult);\n          return item;\n        });\n        let selectedTestParam = \"\";\n        let selectedTestParamMean = 0;\n        let size = 0;\n\n        if (selectedMeanTestParam.size > 0) {\n          [...selectedMeanTestParam.values()].forEach(item => item !== null && item !== \"\" ? (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item, size = size + 1, selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\");\n          selectedTestParamMean = selectedTestParamMean / size;\n        }\n\n        this.setState({\n          meanTestParameterList: data,\n          selectedMeanTestParam,\n          selectedTestParam,\n          testMean: selectedTestParamMean,\n          selectAll: checked\n        });\n      } else {\n        const data = meanTestParameterList.map(item => {\n          item.selected = checked;\n          return item;\n        });\n        this.setState({\n          meanTestParameterList: data,\n          selectedMeanTestParam: new Map(),\n          selectedTestParam: \"\",\n          testMean: \"\",\n          selectAll: checked\n        });\n      }\n    };\n\n    this.selectionChange = event => {\n      let meanTestParameterList = this.state.meanTestParameterList || [];\n      let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\n      meanTestParameterList.map(item => {\n        if (item.ntransactionresultcode === event.dataItem.ntransactionresultcode) {\n          item.selected = !event.dataItem.selected;\n        }\n\n        return item;\n      });\n\n      if (event.dataItem.selected) {\n        selectedMeanTestParam.set(event.dataItem.ntransactionresultcode, event.dataItem.sresult);\n      } else {\n        if (selectedMeanTestParam.has(event.dataItem.ntransactionresultcode)) {\n          selectedMeanTestParam.delete(event.dataItem.ntransactionresultcode);\n        }\n      }\n\n      let selectedTestParam = \"\";\n      let selectedTestParamMean = 0;\n      let size = 0;\n\n      if (selectedMeanTestParam.size > 0) {\n        [...selectedMeanTestParam.values()].forEach(item => item !== null && item !== \"\" ? (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item, size = size + 1, selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\");\n        selectedTestParamMean = selectedTestParamMean / size;\n      }\n\n      this.setState({\n        meanTestParameterList,\n        selectedMeanTestParam,\n        selectedTestParam,\n        testMean: selectedTestParamMean,\n        selectAll: this.valiateCheckAll(meanTestParameterList)\n      });\n    };\n\n    this.onMeanComboChange = (comboData, comboName) => {\n      const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\n      selectedMeanTestParam[comboName] = comboData[0];\n      let data = \"\";\n\n      if (selectedMeanTestParam[\"parametervalue\"] === undefined) {\n        data = comboData[0].value;\n      } else {\n        data = selectedMeanTestParam[\"parametervalue\"] + \"+\" + comboData[0].value;\n      }\n\n      selectedMeanTestParam[\"parametervalue\"] = data;\n      this.setState({\n        selectedMeanTestParam\n      });\n    };\n\n    this.onMaterialComboChange = (comboData, comboName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData; //this.setState({ selectedRecord });\n      } else {\n        selectedRecord[comboName] = []; //this.setState({ selectedRecord });\n      }\n\n      switch (comboName) {\n        case 'nmaterialtypecode':\n          this.props.getREMaterialCategoryByType({\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        case 'nmaterialcatcode':\n          selectedRecord['nsectioncode'] = this.props.Login.masterData.RESelectedTest[0].nsectioncode;\n          this.props.getREMaterialByCategory({\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        case 'nmaterialcode':\n          this.props.getREMaterialInvertoryByMaterial({\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        default:\n          this.props.getAvailableMaterialQuantity({\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n      }\n    };\n\n    this.onComboChange = (comboData, comboName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData; //this.setState({ selectedRecord });\n      } else {\n        selectedRecord[comboName] = []; //this.setState({ selectedRecord });\n      }\n\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onGradeEvent = (ResultParameter, index, parameter) => {\n      if (ResultParameter.length > 0 && ResultParameter[index] !== undefined && ResultParameter[index].sresult !== null) {\n        let selectedRecord = this.state.selectedRecord || [];\n        let selectedResultGrade = this.state.selectedRecord.selectedResultGrade || [];\n\n        if (parameter.nparametertypecode === parameterType.NUMERIC) {\n          selectedResultGrade[index] = {\n            ngradecode: ResultParameter[index].sresult !== \"\" ? numericGrade(parameter, numberConversion(parseFloat(ResultParameter[index].sresult), parseInt(parameter.nroundingdigits))) : -1\n          };\n        }\n\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n          if (ResultParameter[index].sresult !== null) {\n            selectedResultGrade[index] = {\n              ngradecode: ResultParameter[index].ngradecode\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: 0\n            };\n          }\n        }\n\n        if (parameter.nparametertypecode === parameterType.CHARACTER) {\n          if (ResultParameter[index].sresult !== null) {\n            //selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\n            selectedResultGrade[index] = {\n              ngradecode: 4\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: 4\n            };\n          }\n        } //this.props.Login.masterData[\"selectedResultGrade\"] = selectedResultGrade;\n\n\n        selectedRecord.selectedResultGrade = selectedResultGrade;\n        this.setState({\n          selectedRecord\n        }); // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: { masterData: this.props.Login.masterData }\n        // }\n        // this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = [...this.props.Login.masterData.RE_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, selectedTestList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subSampleTake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleComments(saveParam, acceptList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let {\n        testskip,\n        testtake,\n        skip,\n        take\n      } = this.state;\n      let testList = [...this.props.Login.masterData.RE_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let sampleList = [...this.props.Login.masterData.RE_SAMPLE];\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestAttachment(saveParam, selectedTestList);\n      } else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.RESelectedSubSample);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n      }\n    };\n\n    this.onKeyPress = (event, index, paremterResultcode) => {\n      if (event.keyCode === 13) {\n        for (let i = 0; i < event.target.form.elements.length; i++) {\n          if (parseInt(event.target.form.elements[i].id) === paremterResultcode[index + 1]) {\n            event.target.form.elements[i].focus();\n            break;\n          }\n        }\n\n        event.preventDefault();\n      }\n    };\n\n    this.onResultInputChange = (event, index, parameter) => {\n      //let ResultParameter = this.props.Login.masterData.ResultParameter ? this.props.Login.masterData.ResultParameter : [];\n      let selectedRecord = this.state.selectedRecord || [];\n      let ResultParameter = this.state.selectedRecord.ResultParameter ? this.state.selectedRecord.ResultParameter : [];\n      let sresult = \"\";\n      let value = -1;\n      let acceptedFile = [];\n      let ncalculatedresult;\n\n      if (parameter.nparametertypecode === parameterType.NUMERIC) {\n        if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\n          sresult = event.target.value;\n          ncalculatedresult = 4;\n        } else {\n          sresult = ResultParameter[index]['sresult'] === null ? \"\" : ResultParameter[index]['sresult'];\n          ncalculatedresult = ResultParameter[index]['ncalculatedresult'];\n        }\n      }\n\n      if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n        if (event != null) {\n          sresult = event.item.spredefinedname;\n          value = event.item.ngradecode;\n          ncalculatedresult = 4;\n        } else {\n          sresult = \"\";\n          value = -1;\n          ncalculatedresult = 4;\n        }\n      }\n\n      if (parameter.nparametertypecode === parameterType.CHARACTER) {\n        sresult = event.target.value;\n        ncalculatedresult = 4;\n      }\n\n      if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\n        sresult = event[0].name;\n        acceptedFile = event;\n        ncalculatedresult = 4;\n      }\n\n      ResultParameter[index]['sresult'] = sresult;\n      ResultParameter[index]['sfinal'] = sresult;\n      ResultParameter[index]['acceptedFile'] = acceptedFile;\n      ResultParameter[index]['editable'] = true;\n      ResultParameter[index]['ngradecode'] = value;\n      ResultParameter[index]['ncalculatedresult'] = ncalculatedresult; // this.props.Login.masterData.ResultParameter = ResultParameter;\n\n      selectedRecord.ResultParameter = ResultParameter;\n      this.setState({\n        selectedRecord: selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { masterData: this.props.Login.masterData }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveMean = saveType => {\n      const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n      const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n      let resultParameter = this.props.Login.selectedTestParameterMean || {}; //let resultParameter = { };\n\n      resultParameter[\"ncalculatedresult\"] = 4;\n      resultParameter[\"sresult\"] = this.state.testMean;\n      resultParameter[\"sfinal\"] = numberConversion(parseFloat(this.state.testMean), parseInt(resultParameter.nroundingdigit));\n      resultParameter[\"ngradecode\"] = numericGrade(resultParameter, parseInt(this.state.testMean));\n      resultParameter['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n      resultParameter['nenteredby'] = this.props.Login.userInfo.nusercode; // resultParameter['ntransactionresultcode'] = meanParameter.ntransactionresultcode;\n      // resultParameter['ntransactiontestcode'] = meanParameter.ntransactiontestcode;\n      // resultParameter['nparametertypecode'] = meanParameter.nparametertypecode;\n      //console.log(\"result:\", resultParameter);\n\n      const formData = new FormData();\n      formData.append(\"filecount\", 0);\n      formData.append(\"nregtypecode\", nregtypecode);\n      formData.append(\"nregsubtypecode\", nregsubtypecode);\n      formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\n      formData.append(\"transactiontestcode\", resultParameter.ntransactiontestcode); //formData.append(\"resultData\", JSON.stringify([resultParameter]));\n\n      formData.append(\"resultData\", resultParameter);\n      const inputParam = {\n        classUrl: \"resultentrybysample\",\n        methodUrl: \"TestParameterResult\",\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: \"update\",\n        displayName: this.props.Login.inputParam.displayName,\n        saveType\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveClick = saveType => {\n      if (this.props.Login.screenName === \"IDS_MEANPARAMETER\") {\n        this.onSaveMean(saveType);\n      } else {\n        let ResultParameter = this.state.selectedRecord.ResultParameter || [];\n        let selectedRecord = this.state.selectedRecord || {};\n        let selectedId = this.props.Login.selectedId || null;\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n        const classUrl = \"resultentrybysample\";\n        const formData = new FormData();\n        let neditable = 0;\n        let resultParameters = [];\n        let inputParam = {};\n        let inputData = [];\n        let i = 0; //const postParam = {inputListName: \"RESelectedTest\", selectedObject: \"RESelectedTest\", primaryKeyField: \"ntransactionstestcode\" };\n\n        if (this.props.Login.screenName === \"IDS_RESULTENTRY\") {\n          if (ResultParameter.length > 0 && ResultParameter !== undefined) {\n            ResultParameter.map((resultData, index) => {\n              let results = {};\n\n              if (resultData.editable === true) {\n                neditable = 1;\n\n                switch (resultData.nparametertypecode) {\n                  case 1:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: resultData[\"ncalculatedresult\"],\n                      sresult: resultData.sresult,\n                      sfinal: resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\"\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"sfinal\"] = resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\n                    results[\"ngradecode\"] = resultData.sresult !== \"\" ? numericGrade(resultData, results[\"sfinal\"]) : -1;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 2:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: 4,\n                      sresult: resultData.sresult,\n                      sfinal: resultData.sresult\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"ncalculatedresult\"] = 4;\n                    results[\"sfinal\"] = resultData.sresult;\n                    results[\"ngradecode\"] = resultData.ngradecode;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 3:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: 4,\n                      sresult: resultData.sresult,\n                      sfinal: resultData.sresult\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"ncalculatedresult\"] = 4;\n                    results[\"sfinal\"] = resultData.sresult;\n                    results[\"ngradecode\"] = grade.FIO;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 4:\n                    if (resultData.acceptedFile !== undefined) {\n                      const splittedFileName = resultData.acceptedFile ? resultData.acceptedFile[0].name.split('.') : \"\";\n                      const fileExtension = resultData.acceptedFile ? resultData.acceptedFile[0].name.split('.')[splittedFileName.length - 1] : \"\";\n                      const uniquefilename = create_UUID() + '.' + fileExtension;\n                      results[\"jsondata\"] = {\n                        ssystemfilename: uniquefilename,\n                        nfilesize: resultData.acceptedFile[0].size,\n                        ncalculatedresult: 4,\n                        sresult: resultData.sresult,\n                        sfinal: resultData.sresult\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"ncalculatedresult\"] = 4;\n                      results[\"sresult\"] = resultData.sresult;\n                      results[\"sfinal\"] = resultData.sresult;\n                      results[\"ngradecode\"] = grade.FIO;\n                      results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\n                      results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\n                      results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\n                      results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results[\"ssystemfilename\"] = uniquefilename;\n                      results[\"nfilesize\"] = resultData.acceptedFile[0].size;\n                      formData.append(\"uploadedFile\" + index, resultData.acceptedFile[0]);\n                      formData.append(\"uniquefilename\" + index, uniquefilename);\n                      formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\n                      i++;\n                    }\n\n                    break;\n\n                  default:\n                    break;\n                }\n\n                if (Object.values(results).length > 0) {\n                  resultParameters.push(results);\n                }\n              }\n\n              return null;\n            });\n\n            if (neditable === 0) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loading: false,\n                  openModal: false\n                }\n              };\n              return this.props.updateStore(updateInfo);\n            }\n\n            formData.append(\"filecount\", i);\n            formData.append(\"nregtypecode\", nregtypecode);\n            formData.append(\"nregsubtypecode\", nregsubtypecode);\n            formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\n            formData.append(\"ndesigntemplatemappingcode\", ndesigntemplatemappingcode);\n            formData.append(\"resultData\", JSON.stringify(resultParameters));\n            const tests = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\";\n            formData.append(\"transactiontestcode\", tests); //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\n\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"TestParameterResult\",\n              inputData: {\n                userinfo: this.props.Login.userInfo\n              },\n              formData: formData,\n              isFileupload: true,\n              operation: \"update\",\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //, postParam\n\n            };\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loading: false,\n                openModal: false\n              }\n            };\n            return this.props.updateStore(updateInfo);\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_TESTMETHODSOURCE\") {\n          inputData = {\n            ntype: 3,\n            nflag: 3,\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n            nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n            ntranscode: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString(),\n            ntestcode: this.props.Login.masterData.realTestcodeValue.ntestcode,\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n            nmethodcode: selectedRecord.nmethodcode.value,\n            nsourcecode: selectedRecord.nsourcecode.value,\n            ntransactiontestcode: selectedRecord.ntransactiontestcode,\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: \"IDS_RESULTS\",\n            ncontrolcode: this.props.Login.ncontrolcode\n          }; // inputParam = {\n          //     classUrl: classUrl,\n          //     methodUrl: \"TestMethodSource\",\n          //     inputData: inputData,\n          //     isFileupload: false,\n          //     operation: \"update\",\n          //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\n          // }\n\n          this.updateTestMethodSource(inputData, this.props.Login.masterData, this.props.Login.ncontrolcode);\n          return;\n        }\n\n        if (this.props.Login.screenName === \"IDS_INSTRUMENT\") {\n          let inputData = [];\n\n          if (this.props.Login.operation === \"update\") {\n            inputData = {\n              ResultUsedInstrument: {\n                nresultusedinstrumentcode: selectedRecord.nresultusedinstrumentcode,\n                npreregno: selectedRecord.npreregno,\n                ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\n                ninstrumentcode: selectedRecord.ninstrumentcode.value,\n                dfromdate: formatInputDate(selectedRecord.dfromdate, false),\n                dtodate: formatInputDate(selectedRecord.dtodate, false),\n                stzfromdate: selectedRecord.ntzfromdate.label,\n                stztodate: selectedRecord.ntztodate.label,\n                ntzfromdate: selectedRecord.ntzfromdate.value,\n                ntztodate: selectedRecord.ntztodate.value,\n                ntransactiontestcode: selectedRecord.ntransactiontestcode\n              },\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode,\n              ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n              ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\"\n            };\n          } else {\n            inputData = {\n              ResultUsedInstrument: {\n                ntransactiontestcode: selectedRecord.ntransactiontestcode,\n                npreregno: selectedRecord.npreregno,\n                ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\n                ninstrumentcode: selectedRecord.ninstrumentcode.value,\n                dfromdate: formatInputDate(selectedRecord.dfromdate, false),\n                dtodate: formatInputDate(selectedRecord.dtodate, false),\n                stzfromdate: selectedRecord.ntzfromdate.label,\n                stztodate: selectedRecord.ntztodate.label,\n                ntzfromdate: selectedRecord.ntzfromdate.value,\n                ntztodate: selectedRecord.ntztodate.value\n              },\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode,\n              ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n              transactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\"\n            };\n          }\n\n          inputParam = {\n            classUrl: classUrl,\n            methodUrl: \"ResultUsedInstrument\",\n            inputData: inputData,\n            selectedId,\n            isFileupload: false,\n            activeTestKey: \"IDS_INSTRUMENT\",\n            operation: this.props.Login.operation,\n            displayName: this.props.Login.inputParam.displayName,\n            saveType //postParam\n\n          };\n        }\n\n        if (this.props.Login.screenName === \"IDS_MATERIAL\") {\n          let inputData = [];\n\n          if (this.state.selectedRecord.nmaterialcode != \"\") {\n            if (this.state.selectedRecord.nmaterialinventorycode != \"\") {\n              if (parseFloat(this.state.selectedRecord.susedquantity) <= parseFloat(this.state.selectedRecord.savailablequantity)) {\n                if (this.props.Login.operation === \"update\") {\n                  inputData = {\n                    ResultUsedMaterial: {\n                      nresultusedmaterialcode: selectedRecord.nresultusedmaterialcode,\n                      ntransactiontestcode: selectedRecord.ntransactiontestcode,\n                      npreregno: selectedRecord.npreregno,\n                      nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\n                      nmaterialcategorycode: selectedRecord.nmaterialcategorycode.value,\n                      nmaterialcode: selectedRecord.nmaterialcode.value,\n                      ninventorycode: selectedRecord.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecord.nsectioncode,\n                      jsondata: {\n                        sarno: selectedRecord.sarno,\n                        ssamplearno: selectedRecord.ssamplearno,\n                        stestsynonym: selectedRecord.stestsynonym,\n                        smaterialcatname: selectedRecord.nmaterialcatcode.label,\n                        smaterialname: selectedRecord.nmaterialcode.label,\n                        sinventoryid: selectedRecord.nmaterialinventorycode.label,\n                        nqtyused: selectedRecord.susedquantity,\n                        scarriergas: selectedRecord.scarriergas,\n                        smobilephase: selectedRecord.smobilephase,\n                        sremarks: selectedRecord.sremarks,\n                        susername: this.props.Login.userInfo.susername,\n                        nsectioncode: selectedRecord.nsectioncode,\n                        ssectionname: selectedRecord.ssectionname\n                      }\n                    },\n                    MaterialInventoryTrans: {\n                      nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecord.nsectioncode,\n                      jsondata: {\n                        IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label,\n                        nqtyused: selectedRecord.susedquantity\n                      }\n                    },\n                    userinfo: this.props.Login.userInfo,\n                    nregtypecode: nregtypecode,\n                    nregsubtypecode: nregsubtypecode,\n                    ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n                    nresultusedmaterialcode: selectedRecord.nresultusedmaterialcode,\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\"\n                  };\n                } else {\n                  inputData = {\n                    ResultUsedMaterial: {\n                      ntransactiontestcode: selectedRecord.ntransactiontestcode,\n                      npreregno: selectedRecord.npreregno,\n                      nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\n                      nmaterialcategorycode: selectedRecord.nmaterialcatcode.value,\n                      nmaterialcode: selectedRecord.nmaterialcode.value,\n                      ninventorycode: selectedRecord.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecord.nsectioncode,\n                      jsondata: {\n                        sarno: selectedRecord.sarno,\n                        ssamplearno: selectedRecord.ssamplearno,\n                        stestsynonym: selectedRecord.stestsynonym,\n                        smaterialcatname: selectedRecord.nmaterialcatcode.label,\n                        smaterialname: selectedRecord.nmaterialcode.label,\n                        sinventoryid: selectedRecord.nmaterialinventorycode.label,\n                        nqtyused: selectedRecord.susedquantity,\n                        scarriergas: selectedRecord.scarriergas,\n                        smobilephase: selectedRecord.smobilephase,\n                        sremarks: selectedRecord.sremarks,\n                        smaterialtypename: selectedRecord.nmaterialtypecode.label,\n                        nsectioncode: selectedRecord.nsectioncode,\n                        ssectionname: selectedRecord.ssectionname\n                      }\n                    },\n                    MaterialInventoryTrans: {\n                      nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecord.nsectioncode,\n                      jsondata: {\n                        nqtyused: selectedRecord.susedquantity,\n                        IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label\n                      }\n                    },\n                    userinfo: this.props.Login.userInfo,\n                    nregtypecode: nregtypecode,\n                    nregsubtypecode: nregsubtypecode,\n                    ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n                    transactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\"\n                  };\n                }\n\n                inputParam = {\n                  classUrl: classUrl,\n                  methodUrl: \"ResultUsedMaterial\",\n                  inputData: inputData,\n                  selectedId,\n                  isFileupload: false,\n                  activeTestKey: \"IDS_MATERIAL\",\n                  operation: this.props.Login.operation,\n                  displayName: this.props.Login.inputParam.displayName,\n                  saveType //postParam\n\n                };\n              } else {\n                toast.warn(this.props.intl.formatMessage({\n                  id: \"Quantity Not available\"\n                }));\n                return null;\n              }\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"Select Material Inventory\"\n              }));\n              return null;\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"Select Material\"\n            }));\n            return null;\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_TASK\") {\n          if (selectedRecord.sanalysistime && selectedRecord.sanalysistime !== \"\" || selectedRecord.smisctime && selectedRecord.smisctime !== \"\" || selectedRecord.spreanalysistime && selectedRecord.spreanalysistime !== \"\" || selectedRecord.spreparationtime && selectedRecord.spreparationtime !== \"\" || selectedRecord.scomments && selectedRecord.scomments !== \"\") {\n            if (this.props.Login.operation === \"update\") {\n              inputData = {\n                ResultUsedTasks: {\n                  nresultusedtaskcode: selectedRecord.nresultusedtaskcode,\n                  jsondata: {\n                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                    sarno: this.props.Login.masterData.RESelectedTest[0].sarno,\n                    ssamplearno: this.props.Login.masterData.RESelectedTest[0].ssamplearno,\n                    stestsynonym: selectedRecord.stestsynonym,\n                    sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\n                    sanalyst: this.props.Login.userInfo.susername,\n                    smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\n                    spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\n                    spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\n                    scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\n                  }\n                },\n                userinfo: this.props.Login.userInfo,\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\n                nregtypecode: nregtypecode,\n                nregsubtypecode: nregsubtypecode,\n                ndesigntemplatemappingcode: ndesigntemplatemappingcode\n              };\n            } else {\n              let taskArry = [];\n              this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(test => taskArry.push({\n                //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                ntransactiontestcode: parseInt(test.ntransactiontestcode),\n                npreregno: parseInt(test.npreregno),\n                // sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\n                // sanalyst: this.props.Login.userInfo.susername,\n                // smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\n                // spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\n                // spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\n                // scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\",\n                // npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n                jsondata: {\n                  //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                  sarno: test.sarno,\n                  ssamplearno: test.ssamplearno,\n                  stestsynonym: test.stestsynonym,\n                  sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\n                  sanalyst: this.props.Login.userInfo.susername,\n                  smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\n                  spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\n                  spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\n                  scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\n                }\n              }));\n              inputData = {\n                ResultUsedTasks: taskArry,\n                userinfo: this.props.Login.userInfo,\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\n                nregtypecode: nregtypecode,\n                nregsubtypecode: nregsubtypecode,\n                ndesigntemplatemappingcode: ndesigntemplatemappingcode\n              };\n            }\n\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"ResultUsedTasks\",\n              inputData: inputData,\n              selectedId,\n              activeTestKey: \"IDS_TASK\",\n              isFileupload: false,\n              operation: this.props.Login.operation,\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //postParam\n\n            };\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_ENTERTASKTIME\"\n            }));\n            return;\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_PARAMETERCOMMENTS\") {\n          inputData = {\n            ntransactiontestcode: selectedRecord.ntransactiontestcode,\n            ntransactionresultcode: selectedRecord.ntransactionresultcode,\n            sresultcomment: selectedRecord.sresultcomment,\n            transactiontestcode: selectedRecord.transactiontestcode,\n            userinfo: this.props.Login.userInfo,\n            nregtypecode: nregtypecode,\n            nregsubtypecode: nregsubtypecode,\n            ncontrolcode: this.props.Login.ncontrolcode\n          }; // inputParam = {\n          //     classUrl: classUrl,\n          //     methodUrl: \"ParameterComments\",\n          //     inputData: inputData, selectedId,\n          //     isFileupload: false,\n          //     operation: this.props.Login.operation,\n          //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\n          // }\n\n          this.updateParameterComments(inputData, this.props.Login.masterData, selectedRecord.ncontrolcode);\n          return;\n        }\n\n        if (this.props.Login.screenName === \"IDS_CHECKLISTRESULT\") {\n          let lstResultCheckList = [];\n\n          if (selectedRecord && selectedRecord.editedQB) {\n            selectedRecord.editedQB.map(qbcode => lstResultCheckList.push(selectedRecord[qbcode]));\n            inputData = {\n              ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\n              ntransactionresultcode: selectedRecord.ntransactionresultcode,\n              transactiontestcode: selectedRecord.transactiontestcode,\n              ResultCheckList: lstResultCheckList,\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode\n            };\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"ResultEntryChecklist\",\n              inputData: inputData,\n              selectedId,\n              isFileupload: false,\n              operation: this.props.Login.operation,\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //postParam\n\n            };\n          }\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.state = {\n      // sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\n      // resultDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // instrumentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // materialDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // taskDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // documentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // resultChangeDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // testCommentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // historyDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'stestsynonym' }] },\n      // sampleHistoryDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // historyDataState: { skip: 0, take: 5, group: [{ field: 'ArNo' }, { field: 'stestsynonym' }] },\n      subSampleCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      subSampleAttachmentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      instrumentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      materialDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      taskDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      documentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }]\n\n      },\n      resultChangeDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }]\n\n      },\n      testCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'stestsynonym' }] \n\n      },\n      sampleHistoryDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      masterStatus: \"\",\n      error: \"\",\n      operation: \"\",\n      showSample: false,\n      showSubSample: false,\n      showTest: true,\n      tabPane: 0,\n      subsampleskip: 0,\n      sampleListColumns: [],\n      subSampleListColumns: [],\n      testListColumns: [],\n      TableExpandableItem: [],\n      SingleItem: [],\n      SampleGridItem: [],\n      SampleGridExpandableItem: [],\n      sampleListMainField: [],\n      subSampleListMainField: [],\n      testListMainField: [],\n      testMoreField: [],\n      selectedRecord: {},\n      validateFormulaMandyFields: [],\n      splitChangeWidthPercentage: 22,\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      subSampleSkip: 0,\n      subSampleTake: 5,\n      // subsampletake: this.props.Login.settings\n      // && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      testskip: 0,\n      testtake: this.props.Login.settings && this.props.Login.settings[12],\n      initialVerticalWidth: \"57vh\",\n      enablePin: false\n    };\n    this.formRef = React.createRef(); //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n  }\n\n  showRESampleInfo() {\n    this.setState({\n      showSample: true,\n      showTest: false\n    });\n  }\n\n  showRETestList() {\n    this.setState({\n      showTest: true,\n      showSample: false,\n      showSubSample: false\n    });\n  } // getMeanTestParameter =(meanParam)=>{\n  //     const inputData = {npreregno:meanParam.selectedRecord.npreregno,\n  //                        userinfo:this.props.Login.userInfo}\n  //     return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\n  //         .then(response => {\n  //            const list =  response.data || [];\n  //            const optionList = [];\n  //            list.map(item=>{optionList.push({item:item, label:item.stestsynonym+\"-\"+item.sparametername+\"-\"+item.sresult, value:item.ntransactiontestresultcode})})\n  //            this.setState({meanTestParameterList:optionList});                \n  //         })\n  //         .catch(error => {\n  //             if (error.response.status === 500) {\n  //                 toast.error(error.message);\n  //             } else {\n  //                 toast.warn(error.response.data);\n  //             }\n  //         })\n  // }\n\n\n  showRESubSampleinfo() {\n    this.setState({\n      showSample: false,\n      showTest: true,\n      showSubSample: !this.state.showSubSample\n    });\n  }\n\n  // sampleTabDetail = () => {\n  //     const tabMap = new Map();\n  //     {\n  //         this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\n  //             tabMap.set(\"IDS_SAMPLEINFO\", <SampleInfoView\n  //                 data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\n  //                 SingleItem={this.state.SingleItem}\n  //                 screenName=\"IDS_SAMPLEINFO\"\n  //             />) :\n  //             tabMap.set(\"IDS_SAMPLEGRID\", <SampleInfoGrid\n  //                 selectedSample={this.props.Login.masterData.RESelectedSample}\n  //                 dataState={this.state.dataState}\n  //                 dataStateChange={this.dataStateChange}\n  //                 detailedFieldList={this.state.SampleGridExpandableItem}\n  //                 extractedColumnList={this.state.SampleGridItem}\n  //                 userInfo={this.props.Login.userInfo}\n  //                 inputParam={this.props.Login.inputParam}\n  //                 screenName=\"IDS_SAMPLEGRID\"\n  //             />)\n  //         // tabMap.set(\"IDS_SAMPLEATTACHMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SAMPLECOMMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <></>)\n  //         return tabMap;\n  //     }\n  // }\n  sampleTabDetail() {\n    const tabMap = new Map();\n    let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n    tabMap.set(\"IDS_SAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n      screenName: \"IDS_SAMPLEATTACHMENTS\",\n      selectedMaster: this.props.Login.masterData.RESelectedSample,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      attachments: this.props.Login.masterData.RegistrationAttachment || [],\n      deleteRecord: this.props.deleteAttachment,\n      onSaveClick: this.onAttachmentSaveClick,\n      masterList: this.props.Login.masterData.RESelectedSample,\n      masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHEMENT\",\n      fetchRecord: this.props.getAttachmentCombo,\n      addName: \"AddSampleAttachment\",\n      editName: \"EditSampleAttachment\",\n      deleteName: \"DeleteSampleAttachment\",\n      viewName: \"ViewSampleAttachment\",\n      methodUrl: \"SampleAttachment\",\n      nsubsampleneed: this.props.Login.masterData.nneedsubsample,\n      userInfo: this.props.Login.userInfo,\n      deleteParam: {\n        methodUrl: \"SampleAttachment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: this.props.Login.screenName\n      },\n      editParam: {\n        methodUrl: \"SampleAttachment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        masterList: this.props.Login.masterData.RESelectedSample\n      },\n      selectedListName: \"IDS_ARNUMBER\",\n      displayName: \"sarno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974,\n        columnNumber: 13\n      }\n    }));\n    tabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n      screenName: \"IDS_SAMPLECOMMENTS\",\n      onSaveClick: this.onCommentsSaveClick,\n      selectedMaster: \"RESelectedSample\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      Comments: this.props.Login.masterData.RegistrationComment || [],\n      fetchRecord: this.props.getCommentsCombo,\n      masterData: this.props.Login.masterData,\n      addName: \"AddSampleComment\",\n      editName: \"EditSampleComment\",\n      deleteName: \"DeleteSampleComment\",\n      methodUrl: \"SampleComment\",\n      isTestComment: false,\n      masterList: this.props.Login.masterData.RESelectedSample,\n      masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n      primaryKeyField: \"nregcommentcode\",\n      dataState: this.state.testCommentDataState,\n      dataStateChange: this.testDataStateChange,\n      deleteParam: {\n        methodUrl: \"SampleComment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: \"IDS_SAMPLECOMMENTS\"\n      },\n      editParam: {\n        methodUrl: \"SampleComment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        operation: \"update\",\n        masterList: this.props.Login.masterData.RESelectedSample || [],\n        ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n      },\n      selectedListName: \"IDS_ARNUMBER\",\n      displayName: \"sarno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015,\n        columnNumber: 42\n      }\n    }));\n    tabMap.set(\"IDS_SAMPLEAPPROVALHISTORY\", /*#__PURE__*/React.createElement(SampleApprovalHistory, {\n      userInfo: this.props.Login.userInfo,\n      ApprovalHistory: this.props.Login.masterData.SampleApprovalHistory,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleHistoryDataState,\n      dataStateChange: this.sampleDataStateChange,\n      masterData: this.props.Login.masterData,\n      screenName: \"IDS_SAMPLEAPPROVALHISTORY\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      selectedId: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1061,\n        columnNumber: 13\n      }\n    }));\n    return tabMap;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height\n      });\n    }\n  }\n\n  getActiveTestURL() {\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (this.props.Login.activeTestKey) {\n      case \"IDS_RESULTS\":\n        url = \"resultentrybysample/getTestbasedParameter\";\n        break;\n\n      case \"IDS_INSTRUMENT\":\n        url = \"resultentrybysample/getResultUsedInstrument\";\n        break;\n\n      case \"IDS_MATERIAL\":\n        url = \"resultentrybysample/getResultUsedMaterial\";\n        break;\n\n      case \"IDS_TASK\":\n        url = \"resultentrybysample/getResultUsedTask\";\n        break;\n\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_RESULTCHANGEHISTORY\":\n        url = \"resultentrybysample/getResultChangeHistory\";\n        break;\n\n      case \"IDS_APPROVALHISTORY\":\n        url = \"resultentrybysample/getSampleApprovalHistory\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      default:\n        url = \"resultentrybysample/getTestbasedParameter\";\n        break;\n    }\n\n    return url;\n  }\n\n  render() {\n    let sampleListRE = this.props.Login.masterData.RE_SAMPLE ? sortData(this.props.Login.masterData.RE_SAMPLE, \"descending\", \"npreregno\") : []; //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\n    //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\n    //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ?  this.props.Login.masterData.RE_SUBSAMPLE : []\n    //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\n    //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\n\n    let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? this.props.Login.masterData.RE_SUBSAMPLE : []; //let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : []\n\n    let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : [];\n    const startDate = this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date();\n    const endDate = this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date(); // let obj = this.covertDatetoString(startDate, endDate)\n\n    let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\n    const fromDate = obj.fromDate;\n    const toDate = obj.toDate;\n    let subSampleGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n      fromdate: fromDate,\n      todate: toDate,\n      activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n      activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      sampleChangeDataState: this.state.sampleChangeDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      searchSubSampleRef: this.searchSubSampleRef,\n      searchTestRef: this.searchTestRef,\n      nneedtemplatebasedflow: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow || false,\n      //Aravindh\n      checkBoxOperation: 3\n    };\n    let testGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n      activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n      activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\n      activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      historyDataState: this.state.historyDataState,\n      samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\n      sampleHistoryDataState: this.state.sampleHistoryDataState,\n      activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined\n    };\n    let testChildGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n      ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n      activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n      fromdate: fromDate,\n      todate: toDate,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined\n    };\n    let sampleSearchField = [\"sarno\", \"ssamplearno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\", \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\", \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\", \"dregdate\"];\n\n    if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n      sampleSearchField = [\"sarno\", \"ssamplearno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\", \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\", \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"];\n    }\n\n    const filterSampleParam = {\n      inputListName: \"RE_SAMPLE\",\n      selectedObject: \"RESelectedSample\",\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      fecthInputObject: {\n        ntype: 2,\n        nflag: 2,\n        ntransactiontestcode: 0,\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n        fromdate: fromDate,\n        todate: toDate,\n        activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n        //nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n        nneedsubsample: this.props.Login.masterData.nneedsubsample == 3 ? true : false,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n      },\n      masterData: this.props.Login.masterData,\n      // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\n      searchFieldList: sampleSearchField,\n      changeList: [\"RE_SUBSAMPLE\", \"RE_TEST\", \"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedSample\", \"RESelectedSubSample\", \"RESelectedTest\"]\n    };\n    const filterSubSampleParam = {\n      inputListName: \"RE_SUBSAMPLE\",\n      selectedObject: \"RESelectedSubSample\",\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"resultentrybysample/getResultEntrySubSampleDetails\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      fecthInputObject: {\n        ntype: 2,\n        nflag: 2,\n        ntransactiontestcode: 0,\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n        fromdate: fromDate,\n        todate: toDate,\n        activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n        nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        checkBoxOperation: 3\n      },\n      masterData: this.props.Login.masterData,\n      // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\n      searchFieldList: ['ssamplearno', \"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\", \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\", \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"],\n      changeList: [\"RE_TEST\", \"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedSubSample\", \"RESelectedTest\"]\n    };\n    let filterTestParam = {\n      inputListName: \"RE_TEST\",\n      selectedObject: \"RESelectedTest\",\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      fecthInputObject: {\n        ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n        userinfo: this.props.Login.userInfo,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sarno\", \"ssamplearno\", \"stestsynonym\", \"dtransactiondate\", \"ssectionname\", \"ssourcename\", \"ntestrepeatno\", \"ntestretestno\", \"stransdisplaystatus\", \"stestsynonym\"],\n      changeList: [\"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedTest\"],\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      checkBoxOperation: 3\n    };\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      fecthInputObject: filterSampleParam,\n      selectedObject: \"RESelectedSample\",\n      inputListName: \"RE_SAMPLE\",\n      updatedListname: \"\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedSubSample\",\n      updatedListname: \"updatedSubSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSubSampleRef,\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      fecthInputObject: testGetREParam,\n      selectedObject: \"RESelectedSubSample\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      inputListName: \"RE_SUBSAMPLE\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedTest\",\n      clearFilter: \"yes\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchSampleRef,\n        childFilteredListName: \"\"\n      }],\n      fecthInputObject: testChildGetREParam,\n      selectedObject: \"RESelectedTest\",\n      inputListName: \"RE_TEST\",\n      updatedListname: \"updatedTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }];\n    this.breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto\n    }, {\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\n    }, {\n      \"label\": \"IDS_REGISTRATIONTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\" // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\n      // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\n\n    }, {\n      \"label\": \"IDS_REGISTRATIONSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\" // \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename || \"-\" :\n      // this.props.Login.masterData.RegistrationSubType ?\n      //     this.props.Login.masterData.RegistrationSubType[0].sregsubtypename : \"-\"\n\n    }, {\n      \"label\": \"IDS_CONFIGVERSION\",\n      \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\n    }, {\n      \"label\": \"IDS_FILTERSTATUS\",\n      \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus : \"NA\"\n    }, {\n      \"label\": \"IDS_TEST\",\n      \"value\": this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.stestsynonym ? this.props.Login.masterData.realTestcodeValue.stestsynonym : \"NA\"\n    }];\n    const testStartId = this.state.controlMap.has(\"TestStart\") && this.state.controlMap.get(\"TestStart\").ncontrolcode;\n    const resultEnterId = this.state.controlMap.has(\"ResultEnter\") && this.state.controlMap.get(\"ResultEnter\").ncontrolcode;\n    const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode;\n    const setDefaultId = this.state.controlMap.has(\"SetDefaultResult\") && this.state.controlMap.get(\"SetDefaultResult\").ncontrolcode;\n    const editSourceMethodId = this.state.controlMap.has(\"EditSourceMethod\") && this.state.controlMap.get(\"EditSourceMethod\").ncontrolcode;\n    const addResultUsedInstrumentId = this.state.controlMap.has(\"AddResultUsedInstrument\") && this.state.controlMap.get(\"AddResultUsedInstrument\").ncontrolcode;\n    const addResultUsedMaterailId = this.state.controlMap.has(\"AddResultUsedMaterial\") && this.state.controlMap.get(\"AddResultUsedMaterial\").ncontrolcode; //const addResultUsedTaskId = this.state.controlMap.has(\"AddResultUsedTask\") && this.state.controlMap.get(\"AddResultUsedTask\").ncontrolcode\n    //const parameterCommentsId = this.state.controlMap.has(\"AddParameterComments\") && this.state.controlMap.get(\"AddParameterComments\").ncontrolcode\n\n    const mandatoryFieldsInstrument = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n      \"dataField\": \"ninstrumentcatcode\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INSTRUMENT\",\n      \"dataField\": \"ninstrumentcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_FORMDATE\",\n      \"dataField\": \"dfromdate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TODATE\",\n      \"dataField\": \"dtodate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntzfromdate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntztodate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFieldsTask = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PREANALYSISTIME\",\n      \"dataField\": \"spreanalysistime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PREPARATIONTIME\",\n      \"dataField\": \"spreparationtime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_ANALYSISTIME\",\n      \"dataField\": \"sanalysistime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MISCTIME\",\n      \"dataField\": \"smisctime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    } //{ \"mandatory\": true, \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\" }\n    ];\n    const mandatoryFieldsTestMethodSource = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SOURCE\",\n      \"dataField\": \"nsourcecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_METHOD\",\n      \"dataField\": \"nmethodcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }]; // const mandatoryFieldsCheckList=[{\"mandatory\": true, \"idsName\": \"IDS_SOURCE\", \"dataField\": \"nsourcecode\" },\n    //    { \"mandatory\": true, \"idsName\": \"IDS_METHOD\", \"dataField\": \"nmethodcode\"}]\n\n    const mandatoryFieldsParameter = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PARAMETERCOMMENTS\",\n      \"dataField\": \"sresultcomment\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const validateFormulaMandyFields = this.state.validateFormulaMandyFields; // const mandatoryFieldsTask = [{ \"mandatory\": true, \"idsName\": \"IDS_PREANALYSISTIME\", \"dataField\": \"spreanalysistime\" },\n    // { \"mandatory\": true, \"idsName\": \"IDS_PREPARATIONTIME\", \"dataField\": \"spreparationtime\" },\n    // { \"mandatory\": true, \"idsName\": \"IDS_ANALYSISTIME\", \"dataField\": \"sanalysistime\" },\n    // { \"mandatory\": true, \"idsName\": \"IDS_MISCTIME\", \"dataField\": \"smisctime\" }]\n\n    const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode;\n    const testDesign = /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2535,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2536,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2537,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2538,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2539,\n        columnNumber: 25\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    })))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0 sm-pager\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2549,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      cardHead: 94 //paneHeight={this.state.initialVerticalWidth}\n      // paneHeight={`${testListRE && testListRE !== null && testListRE.length > 0 ? testListRE.length * 13 : 5}vh`}\n      ,\n      masterList: this.props.Login.masterData.searchedTest || testListRE,\n      selectedMaster: this.props.Login.masterData.RESelectedTest,\n      primaryKeyField: \"ntransactiontestcode\" //getMasterDetail={this.props.getTestChildTabREDetail}\n      ,\n      getMasterDetail: (event, status) => {\n        this.props.getTestChildTabREDetail(event, status);\n        this.changePropertyView(1, \"IDS_RESULTS\", event, \"click\");\n      },\n      inputParam: testChildGetREParam,\n      subFieldsLabel: true,\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"RESelectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      showStatusName: true,\n      selectionFieldName: \"sfilterstatus\",\n      childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\", \"RegistrationComment\"],\n      selectionList: this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.REFilterStatus : [],\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      handlePageChange: this.handleTestPageChange,\n      selectionColorField: \"scolorhexcode\",\n      showMoreResetList: true,\n      showMoreResetListName: \"RE_SAMPLE\",\n      buttonCount: 5,\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDITMETHODSSOURCE\"\n        }),\n        controlname: \"faPencilAlt\",\n        dataplace: \"left\",\n        hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1,\n        onClick: this.testMethodSourceEdit,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editSourceMethodId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDINSTRUMENT\"\n        }),\n        controlname: \"faMicroscope\",\n        hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1,\n        onClick: this.addREInstrument,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          addResultUsedInstrumentId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDMATERIAL\"\n        }),\n        controlname: \"faFlask\",\n        hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1,\n        onClick: this.props.addREMaterial,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          addResultUsedMaterailId\n        }\n      } // { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }\n      ],\n      commonActions:\n      /*#__PURE__*/\n      // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\n      React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2603,\n          columnNumber: 29\n        }\n      }, testListRE.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtestinitiate ? /*#__PURE__*/React.createElement(FontIconWrap //  data-for=\"tooltip-common-wrap\" \n      , {\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_TESTSTART\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(testStartId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2613,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2619,\n          columnNumber: 49\n        }\n      })) : \"\", /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\"\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ENTERRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(resultEnterId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.props.resultGetModule(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2624,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faAddressBook,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2627,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\" \n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_FILLDEFAULTRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(setDefaultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.defaultActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.masterData.RESelectedSample, setDefaultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2629,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilRuler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2632,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        //data-for=\"tooltip-common-wrap\" \n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_COMPLETE\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(completeResultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2634,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCheckCircle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2637,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        //data-for=\"tooltip-common-wrap\" \n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_IMPORTRESULT\"\n        }),\n        hidden: true,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.resultImport(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2639,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faFileImport,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2642,\n          columnNumber: 45\n        }\n      }))) : \"\") // </Tooltip>\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2550,\n        columnNumber: 21\n      }\n    }))));\n    let mainDesign = \"\";\n\n    if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) {\n      mainDesign = /*#__PURE__*/React.createElement(SplitterLayout, {\n        borderColor: \"#999\",\n        primaryIndex: 1,\n        percentage: true,\n        secondaryInitialSize: this.state.splitChangeWidthPercentage,\n        onSecondaryPaneSizeChange: this.paneSizeChange,\n        primaryMinSize: 40,\n        secondaryMinSize: 30,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2658,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2665,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        style: {\n          borderBottom: \"0px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2666,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          display: \"inline-block\",\n          marginTop: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2667,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"card-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2668,\n          columnNumber: 29\n        }\n      }, this.props.intl.formatMessage({\n        id: \"IDS_SUBSAMPLE\"\n      })))), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"p-0 sm-pager\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2671,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n        cardHead: 94 //paneHeight={this.state.initialVerticalWidth}\n        ,\n        masterList: this.props.Login.masterData.searchedSubSample || subSampleListRE,\n        selectedMaster: this.props.Login.masterData.RESelectedSubSample,\n        primaryKeyField: \"ntransactionsamplecode\",\n        getMasterDetail: this.props.getTestREDetail,\n        inputParam: testGetREParam,\n        additionalParam: [],\n        mainField: \"ssamplearno\",\n        selectedListName: \"RESelectedSubSample\",\n        objectName: \"subSample\",\n        listName: \"IDS_SUBSAMPLE\",\n        jsonField: 'jsondata',\n        jsonDesignFields: true,\n        subFields: this.state.DynamicSubSampleColumns,\n        moreField: this.state.subSampleMoreField,\n        needValidation: false,\n        needMultiSelect: true,\n        needFilter: false,\n        skip: this.state.subSampleSkip,\n        take: this.state.subSampleTake,\n        handlePageChange: this.handleSubSamplePageChange,\n        showStatusLink: true,\n        showStatusName: true,\n        selectionList: this.state.selectedFilter,\n        statusFieldName: \"stransdisplaystatus\",\n        statusField: \"ntransactionstatus\",\n        childTabsKey: [\"RE_TEST\", \"Registration\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"],\n        filterColumnData: this.props.filterTransactionList,\n        searchListName: \"searchedSubSample\",\n        searchRef: this.searchSubSampleRef,\n        filterParam: filterSubSampleParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2672,\n          columnNumber: 25\n        }\n      }))), testDesign);\n    } else {\n      mainDesign = testDesign;\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2718,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2719,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      bsPrefix: \"toolbar-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2720,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2722,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: `vertical-tab-top ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2723,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"} ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2724,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage //onSecondaryPaneSizeChange={this.paneSizeChange} \n      ,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2725,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolbar-top-inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2729,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      clickIconGroup: true // paneHeight={this.state.parentHeight}\n      ,\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedSample || sampleListRE,\n      selectedMaster: this.props.Login.masterData.RESelectedSample,\n      primaryKeyField: \"npreregno\",\n      getMasterDetail: this.props.getsubSampleREDetail,\n      inputParam: subSampleGetREParam,\n      additionalParam: ['napprovalversioncode'],\n      mainField: \"sarno\",\n      selectedListName: \"RESelectedSample\",\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      needValidation: false,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      subFields: this.state.DynamicSampleColumns || [],\n      moreField: this.state.sampleMoreField,\n      needFilter: true,\n      needMultiSelect: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onREFilterSubmit,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedSample\",\n      searchRef: this.searchSampleRef,\n      handlePageChange: this.handlePageChange,\n      filterParam: filterSampleParam,\n      skip: this.state.skip,\n      take: this.state.take,\n      hidePaging: false,\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      selectionFieldName: \"sfilterstatus\" //splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\n      ,\n      childTabsKey: [\"RegistrationAttachment\", \"RE_SUBSAMPLE\", \"RE_TEST\", \"SampleApprovalHistory\", \"RegistrationComment\"],\n      selectionList: this.state.selectedFilter,\n      selectionColorField: \"scolorhexcode\",\n      selectionField: \"ntransactionstatus\",\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(ResultEntryFilter, {\n          fromDate: this.props.Login.masterData.fromDate ? //new Date(this.props.Login.masterData.fromDate) \n          rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\n          toDate: this.props.Login.masterData.toDate ? //new Date(this.props.Login.masterData.toDate) \n          rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\n          SampleType: this.state.SampleType || [],\n          SampleTypeValue: this.props.Login.masterData.defaultSampleType || [],\n          RegType: this.state.RegistrationType || [],\n          RegTypeValue: this.props.Login.masterData.defaultRegistrationType || [],\n          RegSubType: this.state.RegistrationSubType || [],\n          RegSubTypeValue: this.props.Login.masterData.defaultRegistrationSubType || [],\n          DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue || [],\n          FilterStatus: this.state.REFilterStatus || [],\n          FilterStatusValue: this.props.Login.masterData.defaultFilterStatus || [],\n          ApprovalVersion: this.state.ApprovalConfigVersion || [],\n          ApprovalVersionValue: this.props.Login.masterData.defaultApprovalConfigVersion || [],\n          REJobStatus: this.state.REJobStatus || [],\n          JobStatusValue: this.props.Login.masterData.defaultjobstatus || [],\n          Test: this.state.Testvalues || [],\n          TestValue: this.props.Login.masterData.defaultTestvalues || [],\n          onFilterComboChange: this.onFilterComboChange,\n          handleDateChange: this.handleDateChange,\n          userInfo: this.props.Login.userInfo,\n          onDesignTemplateChange: this.onDesignTemplateChange,\n          DynamicDesignMapping: this.state.stateDynamicDesign || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2777,\n            columnNumber: 74\n          }\n        })\n      }],\n      actionIcons: [this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ? {\n        title: \"Report\",\n        controlname: \"reports\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\n        onClick: this.props.previewSampleReport,\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: reportPreviewId\n        }\n      } : {}],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2824,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.onReload(),\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2825,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2829,\n          columnNumber: 65\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2730,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2836,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2837,\n        columnNumber: 45\n      }\n    }, mainDesign)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2845,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      style: {\n        width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2846,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: ` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyViewClose(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2847,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faChevronRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2847,\n        columnNumber: 178\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common sm-view-v-t  ${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2848,\n        columnNumber: 41\n      }\n    }, this.state.activeTabIndex && this.state.activeTabIndex == 1 ? this.sideNavDetail(\"IDS_RESULTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid  ${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2851,\n        columnNumber: 41\n      }\n    }, this.state.activeTabIndex && this.state.activeTabIndex == 2 ? this.sideNavDetail(\"IDS_ATTACHMENTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid-tab  ${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2854,\n        columnNumber: 41\n      }\n    }, this.state.activeTabIndex && this.state.activeTabIndex == 3 ? this.sideNavDetail(\"IDS_COMMENTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid  ${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2857,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2858,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_INSTRUMENT\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 4 ? this.sideNavDetail(\"IDS_INSTRUMENT\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments  ${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2863,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2864,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MATERIAL\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 5 ? this.sideNavDetail(\"IDS_MATERIAL\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments  ${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2869,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2870,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TASK\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 6 ? this.sideNavDetail(\"IDS_TASK\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments  ${this.state.activeTabIndex && this.state.activeTabIndex == 7 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2875,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2876,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TESTAPPROVALHISTORY\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 7 ? this.sideNavDetail(\"IDS_TESTAPPROVALHISTORY\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments  ${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2881,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2882,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 8 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tab-head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2888,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2889,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(1, \"IDS_RESULTS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2890,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileInvoice,\n      \"data-for\": \"tooltip-common-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RESULT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2891,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2894,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_RESULT\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(2, \"IDS_ATTACHMENTS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2898,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2899,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2900,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_ATTACHMENTS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(3, \"IDS_COMMENTS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2904,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2905,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2906,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_COMMENTS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(4, \"IDS_INSTRUMENT\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2910,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faMicroscope,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2911,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2912,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_INSTRUMENT\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(5, \"IDS_MATERIAL\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2916,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFlask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2917,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2918,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MATERIAL\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(6, \"IDS_TASK\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2922,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCommentDots,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2923,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2924,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TASK\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(8, \"IDS_SAMPLEDETAILS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2934,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2935,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2936,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    })))), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tab-click-toggle-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2941,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      label: \"Auto Show\",\n      type: \"switch\",\n      name: \"Auto Click\",\n      onChange: event => this.onInputSwitchOnChange(event),\n      defaultValue: this.state.enableAutoClick,\n      isMandatory: false,\n      required: true,\n      checked: this.state.enableAutoClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2942,\n        columnNumber: 45\n      }\n    })))))))), /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: this.props.Login.screenName === 'IDS_MEANPARAMETER' ? \"xl\" : \"lg\",\n      closeModal: this.closeModal,\n      operation: this.props.Login.screenName === 'IDS_RESULTENTRY' ? \"\" : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      selectedRecord: this.props.Login.screenName === 'IDS_RESULTFORMULA' ? this.state.selectedRecord.selectedMandatory : this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === 'IDS_INSTRUMENT' ? mandatoryFieldsInstrument : this.props.Login.screenName === 'IDS_TASK' ? mandatoryFieldsTask : this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? mandatoryFieldsTestMethodSource : this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? mandatoryFieldsParameter : this.props.Login.screenName === 'IDS_RESULTFORMULA' ? validateFormulaMandyFields : [],\n      esign: this.props.Login.loadEsign,\n      innerPopup: this.props.Login.screenName,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.props.Login.showValidate ? this.calculateFormula : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? this.onSaveFileClick : this.onSaveClick,\n      showValidate: this.props.Login.showValidate,\n      modalEvent: this.state.modalEvent,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3005,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTENTRY' ? /*#__PURE__*/React.createElement(ResultEntryForm, {\n        predefinedValues: this.props.Login.masterData.PredefinedValues,\n        defaultPredefinedValues: this.props.Login.masterData.PredefinedValues,\n        gradeValues: this.props.Login.masterData.GradeValues || [],\n        selectedNumericData: this.props.Login.masterData.selectedNumericData,\n        selectedResultGrade: this.state.selectedRecord.selectedResultGrade || [],\n        paremterResultcode: this.props.Login.masterData.paremterResultcode || [],\n        parameterResults: this.state.selectedRecord.ResultParameter || [],\n        Login: this.props.Login,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        onResultInputChange: this.onResultInputChange,\n        onGradeEvent: this.onGradeEvent,\n        getFormula: this.getFormula,\n        onDropTestFile: this.onDropTestFile,\n        onKeyPress: this.onKeyPress,\n        needSubSample: this.props.Login.masterData.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3012,\n          columnNumber: 33\n        }\n      }) : this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? /*#__PURE__*/React.createElement(TestEditForm, {\n        methodValues: this.props.Login.masterData.MethodData,\n        sourceValues: this.props.Login.masterData.SourceData,\n        selecteRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3031,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenName === 'IDS_INSTRUMENT' ? /*#__PURE__*/React.createElement(ResultEntryInstrumentForm, {\n        instrumentcatValue: this.props.Login.masterData.InstrumentCategory,\n        instrumentValue: this.props.Login.masterData.Instrument,\n        selecteRecord: this.state.selectedRecord || {},\n        timeZoneListData: this.props.Login.timeZoneList || [],\n        onComboChange: this.onComboChange,\n        onComboCategoryChange: this.onComboCategoryChange,\n        onDateChange: this.onDateChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        userInfo: this.props.Login.userInfo,\n        needSubSample: this.props.Login.masterData.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3040,\n          columnNumber: 41\n        }\n      }) : this.props.Login.screenName === 'IDS_MATERIAL' ? /*#__PURE__*/React.createElement(ResultEntryMaterialForm, {\n        materialType: this.props.Login.materialType,\n        materialCategory: this.props.Login.materialCat,\n        material: this.props.Login.material,\n        materialInventory: this.props.Login.materialInventory,\n        selectedRecord: this.state.selectedRecord || {},\n        onMaterialComboChange: this.onMaterialComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onDateChange: this.onDateChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        userInfo: this.props.Login.userInfo,\n        needSubSample: this.props.Login.masterData.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3054,\n          columnNumber: 45\n        }\n      }) : this.props.Login.screenName === 'IDS_TASK' ? /*#__PURE__*/React.createElement(ResultEntryTaskForm, {\n        selecteRecord: this.state.selectedRecord || {},\n        onNumericChange: this.onNumericChange,\n        onInputChange: this.onInputChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3069,\n          columnNumber: 49\n        }\n      }) : this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? /*#__PURE__*/React.createElement(ResultEntryParamCommetsForm, {\n        selecteRecord: this.state.selectedRecord || {},\n        onInputChange: this.onInputChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3077,\n          columnNumber: 53\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTFORMULA' ? /*#__PURE__*/React.createElement(ResultEntryFormulaForm, {\n        DynamicFields: this.props.Login.masterData.DynamicFormulaFields // formRef={this.formRef}\n        ,\n        handleClose: this.handleClose,\n        screenName: this.props.Login.screenName,\n        selectedForumulaInput: this.state.selectedForumulaInput || [],\n        onFormulaInputChange: this.onFormulaInputChange,\n        Login: this.props.Login,\n        showValidate: this.props.Login.showValidate,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3083,\n          columnNumber: 57\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? /*#__PURE__*/React.createElement(ResultEntryImport, {\n        handleClose: this.handleClose,\n        screenName: this.props.Login.screenName,\n        onDropFile: this.onDropFile,\n        selectedImportFile: this.props.Login.masterData.selectedImportFile || {},\n        deleteAttachment: this.deleteAttachment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3095,\n          columnNumber: 61\n        }\n      }) : this.props.Login.screenName === 'IDS_MEANPARAMETER' ? /*#__PURE__*/React.createElement(ResultEntryMean // onInputOnChange={this.onMeanInputOnChange}\n      // onComboChange={this.onMeanComboChange}\n      , {\n        screenName: this.props.Login.screenName,\n        headerSelectionChange: this.headerSelectionChange,\n        selectionChange: this.selectionChange,\n        selectAll: this.state.selectAll,\n        testMean: this.state.testMean,\n        meanTestParameterList: this.state.meanTestParameterList || [],\n        selectedTestParam: this.state.selectedTestParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3103,\n          columnNumber: 65\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2973,\n        columnNumber: 17\n      }\n    }), this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ? /*#__PURE__*/React.createElement(TemplateForm, {\n      templateData: this.props.Login.masterData.ChecklistData,\n      nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode),\n      nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode),\n      needSaveButton: this.props.Login.needSaveButton,\n      formRef: this.formRef,\n      onTemplateInputChange: this.onTemplateInputChange,\n      handleClose: this.closeModal,\n      onTemplateComboChange: this.onTemplateComboChange,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveCheckList,\n      Login: this.props.Login,\n      viewScreen: this.props.Login.openTemplateModal,\n      selectedRecord: this.state.selectedRecord || [],\n      onTemplateDateChange: this.onTemplateDateChange,\n      needValidation: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3118,\n        columnNumber: 25\n      }\n    }) : \"\");\n  }\n\n  valiateCheckAll(data) {\n    let selectAll = true;\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false;\n        }\n      });\n    } else {\n      selectAll = false;\n    }\n\n    return selectAll;\n  }\n\n  updateTestMethodSource(inputData, masterData, ncontrolcode) {\n    let inputParam = {\n      inputData: { ...inputData,\n        'userinfo': this.props.Login.userInfo,\n        ncontrolcode\n      },\n      // formData: formData,\n      // isFileupload: true,\n      operation: \"createMethod\",\n      screenName: \"IDS_TESTMETHODSOURCE\",\n      displayName: this.props.Login.inputParam.displayName,\n      //, postParam,\n      //inputData1: inputData,\n      masterData: masterData\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          //screenName: \"completeaction\",\n          operation: \"createMethod\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateTestMethodSource(inputData, masterData);\n    }\n  }\n\n  updateParameterComments(inputData, masterData, ncontrolcode) {\n    // let inputData1 = { ...inputData, ncontrolcode }\n    const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n    inputData = { ...inputData,\n      ndesigntemplatemappingcode: ndesigntemplatemappingcode\n    };\n    let inputParam = {\n      inputData: { ...inputData,\n        ncontrolcode,\n        'userinfo': this.props.Login.userInfo\n      },\n      operation: this.props.Login.operation,\n      screenName: \"IDS_RESULT\",\n      displayName: this.props.Login.inputParam.displayName,\n      //, postParam,\n      //inputData: inputData1,\n      masterData: masterData\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          //screenName: \"completeaction\",\n          operation: \"updateParameterComments\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateParameterComments(inputData, masterData);\n    }\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  constructDesign(list) {\n    let newList = [];\n\n    if (list.length > 0) {\n      list.map(i => {\n        newList.push({\n          [designProperties.LABEL]: i,\n          [designProperties.VALUE]: i\n        });\n      });\n    }\n\n    return newList;\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      showTest,\n      showSample,\n      userRoleControlRights,\n      controlMap,\n      resultDataState,\n      instrumentDataState,\n      materialDataState,\n      taskDataState,\n      documentDataState,\n      resultChangeDataState,\n      testCommentDataState,\n      historyDataState,\n      sampleListColumns,\n      subSampleListColumns,\n      testListColumns,\n      SingleItem,\n      sampleListMainField,\n      subSampleListMainField,\n      testListMainField,\n      SampleGridItem,\n      SampleGridExpandableItem,\n      sampleMoreField,\n      subSampleMoreField,\n      testMoreField,\n      selectedRecord,\n      SampleType,\n      RegistrationType,\n      RegistrationSubType,\n      REFilterStatus,\n      REJobStatus,\n      Testvalues,\n      ApprovalConfigVersion,\n      DynamicSampleColumns,\n      DynamicSubSampleColumns,\n      DynamicTestColumns,\n      DynamicGridItem,\n      DynamicGridMoreField,\n      validateFormulaMandyFields,\n      skip,\n      take,\n      testskip,\n      testtake,\n      selectedFilter,\n      stateDynamicDesign,\n      activeTabIndex,\n      activeTabId,\n      sampleChangeDataState\n    } = this.state;\n    let bool = false;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        bool = true;\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n    }\n\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n      DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\n      DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n      DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n      DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n      SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\n      testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\n      testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n      let dataState = {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \n\n      };\n      bool = true;\n      resultDataState = dataState;\n      instrumentDataState = dataState;\n      materialDataState = dataState;\n      taskDataState = dataState;\n      documentDataState = dataState;\n      resultChangeDataState = dataState;\n      historyDataState = dataState;\n      testCommentDataState = dataState;\n      sampleChangeDataState = dataState;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      bool = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.validateFormulaMandyFields !== previousProps.Login.validateFormulaMandyFields) {\n      bool = true;\n      validateFormulaMandyFields = this.props.Login.validateFormulaMandyFields;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\n      RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      REFilterStatus = constructOptionList(this.props.Login.masterData.REFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", \"nsorter\", 'ascending', \"ntransactionstatus\", false);\n      REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\n      Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestsynonym', 'ascending', 'ntestcode', false);\n      ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname', 'ascending', 'napprovalconfigversioncode', false);\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\n        instrumentDataState = this.props.Login.instrumentDataState;\n      }\n\n      if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\n        taskDataState = this.props.Login.taskDataState;\n      }\n\n      if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\n        resultChangeDataState = this.props.Login.resultChangeDataState;\n      }\n\n      if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\n        historyDataState = this.props.Login.historyDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      }\n\n      if (this.props.Login.sampleChangeDataState && this.props.Login.sampleChangeDataState !== previousProps.Login.sampleChangeDataState) {\n        sampleChangeDataState = this.props.Login.sampleChangeDataState;\n      }\n\n      let selectFilterStatus = {\n        ntransactionstatus: transactionStatus.PARTIAL,\n        sfilterstatus: this.props.intl.formatMessage({\n          id: \"IDS_PARTIAL\"\n        }),\n        scolorhexcode: \"#800000\"\n      };\n      const selectedFilters = this.props.Login.masterData.REFilterStatus || [];\n      const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\n      const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL);\n\n      if (selectedFiltersNew.length > 0 && index === -1) {\n        selectedFiltersNew.push(selectFilterStatus);\n      }\n\n      selectedFilter = selectedFiltersNew; // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {masterData: this.props.Login.masterData,showTest,showSample }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      SampleType = SampleType.get(\"OptionList\");\n      RegistrationType = RegistrationType.get(\"OptionList\");\n      RegistrationSubType = RegistrationSubType.get(\"OptionList\");\n      REFilterStatus = REFilterStatus.get(\"OptionList\");\n      REJobStatus = REJobStatus.get(\"OptionList\");\n      Testvalues = Testvalues.get(\"OptionList\");\n      ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\");\n    }\n\n    if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\n      activeTabIndex = this.props.Login.activeTabIndex;\n      activeTabId = this.props.Login.activeTabId;\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\n      const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\", \"sregtemplatename\", undefined, undefined, false);\n      stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\");\n    }\n\n    if (bool) {\n      this.setState({\n        showTest,\n        showSample,\n        userRoleControlRights,\n        controlMap,\n        resultDataState,\n        instrumentDataState,\n        materialDataState,\n        taskDataState,\n        documentDataState,\n        resultChangeDataState,\n        testCommentDataState,\n        historyDataState,\n        sampleListColumns,\n        subSampleListColumns,\n        testListColumns,\n        SingleItem,\n        sampleListMainField,\n        subSampleListMainField,\n        testListMainField,\n        SampleGridItem,\n        SampleGridExpandableItem,\n        sampleMoreField,\n        subSampleMoreField,\n        testMoreField,\n        selectedRecord,\n        SampleType,\n        RegistrationType,\n        RegistrationSubType,\n        REFilterStatus,\n        REJobStatus,\n        Testvalues,\n        ApprovalConfigVersion,\n        validateFormulaMandyFields,\n        skip,\n        take,\n        testskip,\n        testtake,\n        selectedFilter,\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        stateDynamicDesign,\n        activeTabIndex,\n        activeTabId,\n        sampleChangeDataState\n      });\n    }\n\n    if (this.props.Login.meanTestParameterList !== previousProps.Login.meanTestParameterList) {\n      this.setState({\n        meanTestParameterList: this.props.Login.meanTestParameterList\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    } // if (props.Login.selectedRecord !== state.selectedRecord) {\n    //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\n    // }\n\n\n    return null;\n  }\n\n}\n\nconst mapStatetoProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStatetoProps, {\n  crudMaster,\n  updateStore,\n  getsubSampleREDetail,\n  getTestREDetail,\n  getTestChildTabREDetail,\n  resultGetModule,\n  completeTest,\n  testMethodSourceEdit,\n  addREInstrument,\n  addREMaterial,\n  deleteInstrumentRecord,\n  fetchInstrumentRecord,\n  deleteTaskRecord,\n  fetchTaskRecord,\n  parameterRecord,\n  checkListRecord,\n  onSaveCheckList,\n  defaultTest,\n  getFormula,\n  getRERegistrationType,\n  getRERegistrationSubType,\n  fetchMaterialRecord,\n  getREApprovalConfigVersion,\n  getResultEntryDetails,\n  calculateFormula,\n  getREFilterStatus,\n  getREFilterTestData,\n  getREJobStatus,\n  getSampleChildTabREDetail,\n  viewAttachment,\n  getAttachmentCombo,\n  deleteAttachment,\n  resultImportFile,\n  validateEsignCredentialComplete,\n  getCommentsCombo,\n  updateTestMethodSource,\n  filterTransactionList,\n  validateEsignCredential,\n  updateParameterComments,\n  previewSampleReport,\n  getMeanCalculationTestParameter,\n  getREMaterialCategoryByType,\n  getREMaterialByCategory,\n  getREMaterialInvertoryByMaterial,\n  getAvailableMaterialQuantity,\n  testStart,\n  getSubSampleChildTabDetail,\n  getSampleChildTabDetail,\n  getREFilterTemplate //,deleteResultUsedMaterial\n\n})(injectIntl(ResultEntry));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntry.jsx"],"names":["React","Component","faPlay","faAddressBook","faCheckCircle","faEye","faPencilRuler","faFileImport","faSync","faBorderAll","faLink","faComment","faComments","faPaperclip","faCommentDots","faChevronRight","faMicroscope","faFlask","faHistory","Card","Col","Row","Nav","Button","injectIntl","connect","ListWrapper","FontAwesomeIcon","faFileInvoice","SplitterLayout","ContentPanel","crudMaster","updateStore","getsubSampleREDetail","getTestREDetail","getTestChildTabREDetail","resultGetModule","fetchMaterialRecord","completeTest","testMethodSourceEdit","addREInstrument","addREMaterial","deleteInstrumentRecord","fetchInstrumentRecord","deleteTaskRecord","fetchTaskRecord","parameterRecord","checkListRecord","onSaveCheckList","defaultTest","getFormula","getRERegistrationType","getRERegistrationSubType","getREApprovalConfigVersion","getResultEntryDetails","calculateFormula","getREFilterStatus","getREFilterTestData","getREJobStatus","viewAttachment","validateEsignCredentialComplete","getAttachmentCombo","deleteAttachment","getCommentsCombo","updateTestMethodSource","resultImportFile","filterTransactionList","validateEsignCredential","getSampleChildTabREDetail","updateParameterComments","getREMaterialCategoryByType","getREMaterialByCategory","getREMaterialInvertoryByMaterial","previewSampleReport","getMeanCalculationTestParameter","getAvailableMaterialQuantity","testStart","getSubSampleChildTabDetail","getSampleChildTabDetail","getREFilterTemplate","sortData","create_UUID","getControlMap","listDataFromDynamicArray","formatInputDate","validateTwoDigitDate","showEsign","constructOptionList","deleteAttachmentDropZone","rsapi","toast","parameterType","grade","transactionStatus","RegistrationType","RegistrationSubType","FORMULAFIELDTYPE","designProperties","SideBarSeqno","SideBarTabIndex","TransactionListMasterJson","ProductList","CustomTabs","ResultEntryResultsTab","DEFAULT_RETURN","SlideOutModal","Esign","BreadcrumbComponent","ResultEntryFilter","ResultEntryInstrumentForm","ResultEntryForm","TestEditForm","SampleInfoView","SampleInfoGrid","ApprovalInstrumentTab","ResultEntryTaskTab","ResultEntryTaskForm","ResultEntryParamCommetsForm","TemplateForm","templateChangeHandler","numberConversion","numericGrade","PerfectScrollbar","ResultEntryFormulaForm","SampleApprovalHistory","ResultChangeHistoryTab","Attachments","Comments","onSaveSampleAttachment","onSaveTestAttachment","onSaveSubSampleAttachment","onSaveSampleComments","onSaveTestComments","onSaveSubSampleComments","ResultEntryImport","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","ResultEntryMean","ScrollBar","ResultEntryMaterialForm","ResultUsedMaterial","FontIconWrap","CustomSwitch","ResultEntry","constructor","props","paneSizeChange","d","setState","splitChangeWidthPercentage","event","file","fieldName","selectedRecord","Login","masterData","selectedImportFile","updateInfo","typeName","data","closeModal","loadEsign","openModal","openTemplateModal","screenName","operation","loadFile","showValidate","validateFormulaMandyFields","onFilterComboChange","fieldname","inputData","dateObj","toDate","userInfo","nflag","fromdate","fromDate","todate","nsampletypecode","parseInt","defaultSampleType","nregtypecode","defaultRegistrationType","nregsubtypecode","defaultRegistrationSubType","ntranscode","String","defaultFilterStatus","ntransactionstatus","userinfo","obj","state","value","item","inputParamData","napprovalversioncode","ApprovalConfigVersion","napprovalconfigversioncode","nneedsubsample","ndesigntemplatemappingcode","DesignTemplateMappingValue","defaultApprovalConfigVersion","njobstatuscode","defaultjobstatus","defaultTestvalues","OnDateConverstion","date","month","getMonth","day","getDate","getFullYear","onReload","realFromDate","realToDate","realSampleTypeValue","realRegTypeValue","realRegSubTypeValue","realApproveConfigVersion","realFilterStatusValue","realTestcodeValue","ntestcode","ntransactiontestcode","activeTestKey","showTest","showSample","checkBoxOperation","inpuParamData","refs","searchSampleRef","searchSubSampleRef","searchTestRef","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","warn","intl","formatMessage","id","onDesignTemplateChange","labelname","onREFilterSubmit","nneedtemplatebasedflow","undefined","onSecondaryPaneSizeChange","e","val","onComboCategoryChange","uRL","ninstrumentcatcode","ncalibrationRequired","ncalibrationreq","post","then","response","TagInstrument","Instrument","TagListInstrument","get","ninstrumentcode","catch","error","status","message","testRETabDetail","testTabMap","Map","RESelectedTest","map","test","join","testskip","testtake","testList","RE_TEST","slice","meanControlId","controlMap","has","ncontrolcode","selectedTestList","set","inputParam","dataStateChange","primaryKeyField","selectedId","userRoleControlRights","ncontrolCode","deleteMaterialRecord","addResultEntryTask","onAttachmentSaveClick","RegistrationTestAttachment","VALUE","methodUrl","esignRights","masterList","onCommentsSaveClick","RegistrationTestComment","ResultChangeHistory","sampleDataStateChange","activeSampleKey","sampleHistoryDataState","dataState","sampleGridDataState","sampleGridDataStateChange","sampleChangeDataState","subsampleTabDetail","ntransactionsamplecode","RESelectedSubSample","sample","tabMap","subsampleList","RE_SUBSAMPLE","subsampleskip","subsampletake","selectedSubSampleList","RegistrationSampleAttachment","attachmentskip","attachmenttake","settings","RegistrationSampleComment","subSampleCommentDataState","subSampledataStateChange","onSampleTabChange","tabProps","activeSampleTab","RESelectedSample","npreregno","onTestTabChange","length","toString","preregno","onSubSampleTabChange","activeSubSampleTab","selectedSubSample","subSampleAttachmentDataState","popUptestDataState","displayName","nformcode","screenData","classUrl","nresultusedmaterialcode","stestsynonym","addResultUsedTaskId","parameterData","index","modalEvent","currentTarget","selectedForumulaInput","lstDynamicFields","dynamicfields","push","selectedResultGrade","ResultParameter","resultImport","closeFilter","showFilter","handlePageChange","skip","take","setTimeout","_scrollBarRef","updateScroll","handleSubSamplePageChange","subSampleSkip","subSampleTake","handleTestPageChange","sampletakeDataState","verticalPaneSizeChange","enableAutoHeight","initialVerticalWidth","changeSplitterOption","sideNavDetail","searchedTests","editTestCommentsId","activeTestTab","resultTabDetail","onTabChange","attachmentTabDetail","commentTabDetail","SingleItem","gridfillingColumn","DynamicGridItem","DynamicGridMoreField","resultTabMap","TEST","attachmentTabMap","SUBSAMPLE","SAMPLE","RegistrationAttachment","commentTabMap","REselectedSample","testDataStateChange","RegistrationComment","onInputSwitchOnChange","target","name","enablePropertyPopup","enableAutoClick","changePropertyViewClose","activeTabIndex","activeTabId","changePropertyView","window","innerWidth","tabSequence","tabseqno","defaultActions","testChildGetREParam","setDefaultId","TestList","splice","acceptTestList","completeActions","completeResultId","postParamList","testStartActions","validateEsign","sreason","password","onEsignInputOnChange","type","checked","YES","NO","onInputOnChange","onSaveFileClick","saveType","formRef","acceptedFile","sfilename","formData","FormData","forEach","append","JSON","stringify","x","onDropFile","onFormulaInputChange","fields","selectedMandatory","dynamicformulafields","ndynamicformulafieldcode","INTEGER","replace","formulainput","svalues","sparameter","sdescription","onTemplateInputChange","control","onTemplateComboChange","comboData","onTemplateDateChange","dateData","handleDateChange","dateName","dateValue","Date","onInputChange","Data","onNumericChange","numericData","numericName","onDateChange","headerSelectionChange","syntheticEvent","meanTestParameterList","selectedMeanTestParam","selected","ntransactionresultcode","sresult","selectedTestParam","selectedTestParamMean","size","values","testMean","selectAll","selectionChange","dataItem","delete","valiateCheckAll","onMeanComboChange","comboName","onMaterialComboChange","nsectioncode","onComboChange","onGradeEvent","parameter","nparametertypecode","NUMERIC","ngradecode","parseFloat","nroundingdigits","PREDEFINED","CHARACTER","saveParam","isTestComment","sampleList","searchedSubSample","acceptList","searchedSample","RE_SAMPLE","selectedSampleList","selectedMaster","onKeyPress","paremterResultcode","keyCode","i","form","elements","focus","preventDefault","onResultInputChange","ncalculatedresult","spredefinedname","ATTACHMENT","onSaveMean","resultParameter","selectedTestParameterMean","nroundingdigit","nuserrole","nusercode","isFileupload","onSaveClick","neditable","resultParameters","resultData","results","editable","sfinal","FIO","splittedFileName","split","fileExtension","uniquefilename","ssystemfilename","nfilesize","Object","loading","tests","ntype","nmethodcode","nsourcecode","ResultUsedInstrument","nresultusedinstrumentcode","dfromdate","dtodate","stzfromdate","ntzfromdate","label","stztodate","ntztodate","transactiontestcode","nmaterialcode","nmaterialinventorycode","susedquantity","savailablequantity","nmaterialtypecode","nmaterialcategorycode","ninventorycode","jsondata","sarno","ssamplearno","smaterialcatname","nmaterialcatcode","smaterialname","sinventoryid","nqtyused","scarriergas","smobilephase","sremarks","susername","ssectionname","MaterialInventoryTrans","IDS_INVENTORYID","smaterialtypename","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","ResultUsedTasks","nresultusedtaskcode","sanalyst","taskArry","info","sresultcomment","lstResultCheckList","editedQB","qbcode","ResultCheckList","createRef","masterStatus","showSubSample","tabPane","sampleListColumns","subSampleListColumns","testListColumns","TableExpandableItem","SampleGridItem","SampleGridExpandableItem","sampleListMainField","subSampleListMainField","testListMainField","testMoreField","enablePin","showRESampleInfo","showRETestList","showRESubSampleinfo","sampleTabDetail","componentDidMount","parentHeight","height","clientHeight","firstPane","getActiveTestURL","url","render","sampleListRE","subSampleListRE","testListRE","startDate","endDate","subSampleGetREParam","testGetREParam","samplePrintHistoryDataState","sampleSearchField","ROUTINE","filterSampleParam","inputListName","selectedObject","fetchUrl","childRefs","ref","childFilteredListName","fecthInputObject","searchFieldList","changeList","filterSubSampleParam","filterTestParam","filteredListName","clearFilter","searchRef","updatedListname","unchangeList","breadCrumbData","breadCrumbFrom","breadCrumbto","ssampletypename","sregtypename","sregsubtypename","sversionname","sfilterstatus","testStartId","resultEnterId","editSourceMethodId","addResultUsedInstrumentId","addResultUsedMaterailId","mandatoryFieldsInstrument","mandatoryFieldsTask","mandatoryFieldsTestMethodSource","mandatoryFieldsParameter","reportPreviewId","testDesign","borderBottom","display","searchedTest","setting","REFilterStatus","ALL","title","controlname","dataplace","hidden","indexOf","onClick","objectName","nneedtestinitiate","mainDesign","marginTop","DynamicSubSampleColumns","subSampleMoreField","selectedFilter","DynamicSampleColumns","sampleMoreField","openFilter","SampleType","REJobStatus","Testvalues","stateDynamicDesign","PLASMA_POOL","background","width","propertyPopupWidth","PredefinedValues","GradeValues","selectedNumericData","handleClose","onDropTestFile","MethodData","SourceData","InstrumentCategory","timeZoneList","materialType","materialCat","material","materialInventory","DynamicFormulaFields","ChecklistData","needSaveButton","temparray","option","LABEL","slanguagetypecode","constructDesign","list","newList","componentDidUpdate","previousProps","DynamicTestColumns","bool","DynamicDesign","dynamicColumn","parse","samplelistitem","subsamplelistitem","testlistitem","samplegriditem","samplegridmoreitem","sampledisplayfields","testlistmoreitems","selectFilterStatus","PARTIAL","scolorhexcode","selectedFilters","selectedFiltersNew","findIndex","DesignTemplateMapping","DesignTemplateMappingMap","componentWillUnmount","getDerivedStateFromProps","errorCode","mapStatetoProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { faPlay, faAddressBook, faCheckCircle, faEye, faPencilRuler, faFileImport, faSync, faBorderAll, faLink, faComment, faComments, faPaperclip, faCommentDots, faChevronRight, faMicroscope, faFlask, faHistory } from '@fortawesome/free-solid-svg-icons';\r\nimport { Card, Col, Row, Nav, Button } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileInvoice } from '@fortawesome/free-solid-svg-icons';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport {\r\n    crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule, fetchMaterialRecord,\r\n    completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord,\r\n    fetchTaskRecord, parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType,\r\n    getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus,\r\n    viewAttachment, validateEsignCredentialComplete, getAttachmentCombo, deleteAttachment, getCommentsCombo, updateTestMethodSource, resultImportFile,\r\n    filterTransactionList, validateEsignCredential, getSampleChildTabREDetail, updateParameterComments, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial,\r\n    previewSampleReport, getMeanCalculationTestParameter, getAvailableMaterialQuantity, testStart, getSubSampleChildTabDetail, getSampleChildTabDetail, getREFilterTemplate//,deleteResultUsedMaterial\r\n} from '../../actions';\r\nimport { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone } from '../../components/CommonScript';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { parameterType, grade, transactionStatus, RegistrationType, RegistrationSubType, FORMULAFIELDTYPE, designProperties, SideBarSeqno, SideBarTabIndex } from '../../components/Enumeration';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport { ProductList } from '../product/product.styled';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ResultEntryResultsTab from './ResultEntryResultsTab';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ResultEntryFilter from './ResultEntryFilter';\r\nimport ResultEntryInstrumentForm from './ResultEntryInstrumentForm';\r\nimport ResultEntryForm from './ResultEntryForm';\r\nimport TestEditForm from './TestEditForm';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\nimport SampleInfoGrid from '../approval/SampleInfoGrid';\r\nimport ApprovalInstrumentTab from '../approval/ApprovalInstrumentTab';\r\nimport ResultEntryTaskTab from './ResultEntryTaskTab';\r\nimport ResultEntryTaskForm from './ResultEntryTaskForm';\r\nimport ResultEntryParamCommetsForm from './ResultEntryParamCommetsForm';\r\nimport TemplateForm from '../checklist/checklist/TemplateForm';\r\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\r\nimport { numberConversion, numericGrade } from './ResultEntryValidation';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport ResultEntryFormulaForm from './ResultEntryFormulaForm';\r\nimport SampleApprovalHistory from '../approval/SampleApprovalHistory';\r\nimport ResultChangeHistoryTab from '../approval/ResultChangeHistoryTab';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveSampleAttachment, onSaveTestAttachment, onSaveSubSampleAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport { onSaveSampleComments, onSaveTestComments, onSaveSubSampleComments } from '../attachmentscomments/comments/CommentFunctions';\r\nimport ResultEntryImport from './ResultEntryImport';\r\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'\r\n// import ReactTooltip from 'react-tooltip';\r\nimport ResultEntryMean from './ResultEntryMean';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport ResultEntryMaterialForm from './ResultEntryMaterialForm';\r\nimport ResultUsedMaterial from './UsedMaterial';\r\nimport { FontIconWrap } from '../../components/data-grid/data-grid.styles';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\n\r\nclass ResultEntry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef();\r\n        this.state = {\r\n\r\n\r\n            // sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            // resultDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // instrumentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // materialDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // taskDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // documentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // resultChangeDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // testCommentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // historyDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'stestsynonym' }] },\r\n            // sampleHistoryDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n\r\n\r\n            // historyDataState: { skip: 0, take: 5, group: [{ field: 'ArNo' }, { field: 'stestsynonym' }] },\r\n\r\n            subSampleCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            subSampleAttachmentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            resultDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            instrumentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            materialDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            taskDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            documentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }]\r\n            },\r\n            resultChangeDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }]\r\n            },\r\n            testCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            historyDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'stestsynonym' }] \r\n            },\r\n            sampleHistoryDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            operation: \"\",\r\n            showSample: false,\r\n            showSubSample: false,\r\n            showTest: true,\r\n            tabPane: 0,\r\n            subsampleskip: 0,\r\n            sampleListColumns: [],\r\n            subSampleListColumns: [],\r\n            testListColumns: [],\r\n            TableExpandableItem: [],\r\n            SingleItem: [],\r\n            SampleGridItem: [],\r\n            SampleGridExpandableItem: [],\r\n            sampleListMainField: [],\r\n            subSampleListMainField: [],\r\n            testListMainField: [],\r\n            testMoreField: [],\r\n            selectedRecord: {},\r\n            validateFormulaMandyFields: [],\r\n            splitChangeWidthPercentage: 22,\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            subSampleSkip: 0,\r\n            subSampleTake: 5,\r\n            // subsampletake: this.props.Login.settings\r\n            // && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            testskip: 0,\r\n            testtake: this.props.Login.settings && this.props.Login.settings[12],\r\n            initialVerticalWidth: \"57vh\",\r\n            enablePin: false\r\n        }\r\n        this.formRef = React.createRef();\r\n        //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n    }\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.props.Login.masterData.selectedImportFile\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData: { ...this.props.Login.masterData, selectedImportFile: selectedRecord } }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openTemplateModal = this.props.Login.openTemplateModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let screenName = this.props.Login.screenName;\r\n        let operation = this.props.Login.operation;\r\n        let loadFile = this.props.Login.loadFile;\r\n        let updateInfo = {};\r\n        if (screenName === \"IDS_RESULTFORMULA\") {\r\n            screenName = \"IDS_RESULTENTRY\";\r\n            operation = \"update\";\r\n            let showValidate = !this.props.Login.showValidate;\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { screenName, operation, showValidate, validateFormulaMandyFields: [] }\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.loadEsign) {\r\n                if (this.props.Login.operation === \"delete\"\r\n                    || this.props.Login.operation === \"complete\"\r\n                    || this.props.Login.operation === \"default\"\r\n                    || this.props.Login.operation === \"deleteTask\"\r\n                    || this.props.Login.operation === \"deleteInstrument\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                    selectedRecord = {};\r\n                }\r\n                else if (this.props.Login.operation === \"updatechecklist\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                }\r\n                else {\r\n                    loadEsign = false;\r\n                }\r\n            } else {\r\n                openModal = false;\r\n                openTemplateModal = false;\r\n                selectedRecord = {};\r\n                loadFile = false;\r\n            }\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModal, screenName, loadEsign, selectedRecord, openTemplateModal, loadFile }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onFilterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let inputData = [];\r\n\r\n            if (fieldname === \"fromDate\") {\r\n                let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n                inputData = {\r\n                    nflag: 2,\r\n                    fromdate: dateObj.fromDate,//this.OnDateConverstion(event, fieldname),\r\n                    todate: dateObj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n            if (fieldname === \"toDate\") {\r\n\r\n                let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo)\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    fromdate: dateObj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: dateObj.toDate,//this.OnDateConverstion(event, fieldname),\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \r\n            //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \r\n\r\n            if (fieldname === \"nsampletypecode\") {\r\n\r\n                let obj = convertDateValuetoString((this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    (this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    nsampletypecode: parseInt(event.value),\r\n                    fromdate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultSampleType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getRERegistrationType(inputData)\r\n            }\r\n            else if (fieldname === \"nregtypecode\") {\r\n\r\n                let obj = convertDateValuetoString((this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    (this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n\r\n                inputData = {\r\n                    nflag: 3,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    fromdate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    nregtypecode: parseInt(event.value),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultRegistrationType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getRERegistrationSubType(inputData)\r\n            }\r\n            else if (fieldname === \"nregsubtypecode\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 4,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultRegistrationSubType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            else if (fieldname === 'ndesigntemplatemappingcode') {\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                const inputParamData = {\r\n                    nflag: 3,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    //defaultFilterStatus: event.item,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                    // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                    //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\r\n                    ndesigntemplatemappingcode: event.value,\r\n                    DesignTemplateMappingValue: event.item\r\n                }\r\n                //this.props.getREFilterTestData(inputParamData)\r\n                this.props.getREFilterTemplate(inputParamData)\r\n\r\n            }\r\n\r\n            else if (fieldname === \"version\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 4,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultApprovalConfigVersion: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\r\n                }\r\n                this.props.getREJobStatus(inputData)\r\n            }\r\n            else if (fieldname === \"jobstatus\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultjobstatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREFilterStatus(inputData)\r\n            }\r\n            else if (fieldname === \"filter\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: 1,// parseInt(this.props.Login.masterData.defaultjobstatus.njobstatuscode),\r\n                    ntranscode: String(event.value),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultFilterStatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\r\n                }\r\n                this.props.getREFilterTestData(inputData)\r\n            }\r\n            else if (fieldname === \"test\") {\r\n\r\n                let defaultTestvalues = event.item;\r\n                this.props.Login.masterData.defaultTestvalues = defaultTestvalues;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData: { ...this.props.Login.masterData } }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n    }\r\n    OnDateConverstion = (date, fieldname) => {\r\n        const month = validateTwoDigitDate(String(date.getMonth() + 1));\r\n        const day = validateTwoDigitDate(String(date.getDate()));\r\n        if (fieldname === \"fromDate\") {\r\n            date = date.getFullYear() + '-' + month + '-' + day + \"T00:00:00\";\r\n        }\r\n        else {\r\n            date = date.getFullYear() + '-' + month + '-' + day + \"T23:59:00\";\r\n        }\r\n        return date;\r\n    }\r\n    onReload = () => {\r\n        let { realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realApproveConfigVersion,\r\n            realFilterStatusValue, realTestcodeValue } = this.props.Login.masterData\r\n        //let obj = this.covertDatetoString(realFromDate, realToDate)\r\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\r\n        let masterData = { ...this.props.Login.masterData, realFromDate: obj.fromDate, realToDate: obj.toDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApproveConfigVersion, realTestcodeValue }\r\n        let inputData = {\r\n            nsampletypecode: (realSampleTypeValue && realSampleTypeValue.nsampletypecode) || -1,\r\n            nregtypecode: (realRegTypeValue && realRegTypeValue.nregtypecode) || -1,\r\n            nregsubtypecode: (realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode) || -1,\r\n            napprovalversioncode: (realApproveConfigVersion && realApproveConfigVersion.napprovalconfigversioncode) || -1,\r\n            ntranscode: String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\r\n            ntestcode: realTestcodeValue ? realTestcodeValue.ntestcode : -1,\r\n            ntransactiontestcode: 0,\r\n            njobstatuscode: (this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode) || 1,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\r\n            showTest: true,\r\n            showSample: false,\r\n            checkBoxOperation: 3,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\r\n        }\r\n        const inpuParamData = {\r\n            inputData,\r\n            masterData,\r\n            refs: { searchSampleRef: this.searchSampleRef, searchSubSampleRef: this.searchSubSampleRef, searchTestRef: this.searchTestRef },\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n        }\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1\r\n            && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== -1) {\r\n            this.props.getResultEntryDetails(inpuParamData)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    onDesignTemplateChange = (event, fieldName, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onREFilterSubmit = (event) => {\r\n        // let realFromDate = new Date(this.props.Login.masterData.fromDate)\r\n        // let realToDate = new Date(this.props.Login.masterData.toDate)\r\n        let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n        let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n        let realSampleTypeValue = this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType\r\n        let realRegTypeValue = this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType\r\n        let realRegSubTypeValue = this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType\r\n        let realApproveConfigVersion = this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion\r\n        let realFilterStatusValue = this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus\r\n        let realTestcodeValue = this.props.Login.masterData.defaultTestvalues && this.props.Login.masterData.defaultTestvalues\r\n\r\n        //let obj = this.covertDatetoString(realFromDate, realToDate)\r\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\r\n        let masterData = { ...this.props.Login.masterData, realFromDate: obj.fromDate, realToDate: obj.toDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApproveConfigVersion, realTestcodeValue }\r\n        let inputData = {\r\n            nsampletypecode: (this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType.nsampletypecode) || -1,\r\n            nregtypecode: (this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType.nregtypecode) || -1,\r\n            nregsubtypecode: (this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode) || -1,\r\n            napprovalversioncode: (this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode) || -1,\r\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus ? this.props.Login.masterData.defaultFilterStatus.ntransactionstatus : -1),\r\n            ntestcode: this.props.Login.masterData.defaultTestvalues ? this.props.Login.masterData.defaultTestvalues.ntestcode : -1,\r\n            ntransactiontestcode: 0,\r\n            njobstatuscode: (this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode) || 1,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\r\n            showTest: true,\r\n            showSample: false,\r\n            nneedsubsample: this.props.Login.masterData.nneedsubsample || false,\r\n            checkBoxOperation: 3,\r\n            ndesigntemplatemappingcode: (this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode) || -1,\r\n            nneedtemplatebasedflow: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow) || false\r\n\r\n        }\r\n        const inpuParamData = {\r\n            inputData,\r\n            masterData,\r\n            refs: { searchSampleRef: this.searchSampleRef, searchSubSampleRef: this.searchSubSampleRef, searchTestRef: this.searchTestRef },\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState\r\n        }\r\n\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1\r\n            && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== undefined) {\r\n            this.props.getResultEntryDetails(inpuParamData)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    // covertDatetoString(startDateValue, endDateValue) {\r\n    //     const startDate = new Date(startDateValue);\r\n    //     const endDate = new Date(endDateValue);\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n\r\n    //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay;\r\n    //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay;\r\n\r\n    //     const fromDate = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay + \"T00:00:00\";\r\n    //     const toDate = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay + \"T23:59:59\";\r\n    //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    // }\r\n    onSecondaryPaneSizeChange = (e, val) => {\r\n\r\n        // let hGrand = this.state.grandparentheight\r\n        // let check = e - 400;\r\n        // if (check > 1) {\r\n        //     hGrand = this.state.parentHeight + check\r\n        // }\r\n        // this.setState({\r\n        //     paneHeight: e - val,\r\n        //     secondPaneHeight: hGrand - e - 70,\r\n        //     grandparentheight: hGrand\r\n        // })\r\n        // this.setState({\r\n        //     paneHeight: e - val,\r\n        //     secondPaneHeight: this.state.parentHeight - e - 70\r\n        // })\r\n    }\r\n\r\n    onComboCategoryChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let uRL = \"\";\r\n            let inputData = [];\r\n            uRL = 'resultentrybysample/getResultUsedInstrumentCombo';\r\n            if (fieldname === \"ninstrumentcatcode\") {\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 2,\r\n                    ninstrumentcatcode: event.value,\r\n                    ncalibrationRequired: event.item.ncalibrationreq\r\n                }\r\n            }\r\n            rsapi.post(uRL, inputData)\r\n                .then(response => {\r\n                    const TagInstrument = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                        \"sinstrumentid\", undefined, undefined, undefined);\r\n                    const TagListInstrument = TagInstrument.get(\"OptionList\")\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            masterData: { ...this.props.Login.masterData, Instrument: TagListInstrument },\r\n                            selectedRecord: {\r\n                                ...this.props.Login.selectedRecord,\r\n                                [fieldname]: event,\r\n                                ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n                    // const selectedRecord = this.state.selectedRecord || {};\r\n                    // selectedRecord[fieldname] = event;\r\n                    // this.setState({ selectedRecord });\r\n\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    showRESampleInfo() {\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n\r\n    showRETestList() {\r\n        this.setState({ showTest: true, showSample: false, showSubSample: false })\r\n    }\r\n\r\n    // getMeanTestParameter =(meanParam)=>{\r\n    //     const inputData = {npreregno:meanParam.selectedRecord.npreregno,\r\n    //                        userinfo:this.props.Login.userInfo}\r\n    //     return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n    //         .then(response => {\r\n    //            const list =  response.data || [];\r\n    //            const optionList = [];\r\n    //            list.map(item=>{optionList.push({item:item, label:item.stestsynonym+\"-\"+item.sparametername+\"-\"+item.sresult, value:item.ntransactiontestresultcode})})\r\n    //            this.setState({meanTestParameterList:optionList});                \r\n    //         })\r\n    //         .catch(error => {\r\n    //             if (error.response.status === 500) {\r\n    //                 toast.error(error.message);\r\n    //             } else {\r\n    //                 toast.warn(error.response.data);\r\n    //             }\r\n    //         })\r\n    // }\r\n\r\n    showRESubSampleinfo() {\r\n        this.setState({ showSample: false, showTest: true, showSubSample: !this.state.showSubSample })\r\n    }\r\n\r\n\r\n\r\n    testRETabDetail = () => {\r\n        const testTabMap = new Map();\r\n        //let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.RE_TEST || [];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n\r\n        const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode\r\n\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        testTabMap.set(\"IDS_RESULTS\", <ResultEntryResultsTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            fetchRecord={this.props.parameterRecord}\r\n            controlMap={this.state.controlMap}\r\n            parameterParam={{ primaryKeyField: \"ntransactionresultcode\", masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            checkListRecord={this.checkListRecord}\r\n            checklistParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            viewFile={this.props.viewAttachment}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_RESULTS\"\r\n            getMeanTestParameter={this.props.getMeanCalculationTestParameter}\r\n            meanParam={{ \"userInfo\": this.props.Login.userInfo, ncontrolCode: meanControlId }}\r\n        />)\r\n        testTabMap.set(\"IDS_INSTRUMENT\", <ApprovalInstrumentTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedInstrument\"}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            dataState={this.state.instrumentDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteInstrumentRecord}\r\n            fetchRecord={this.fetchInstrumentRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_INSTRUMENT\"\r\n        />)\r\n        testTabMap.set(\"IDS_MATERIAL\", <ResultUsedMaterial\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedMaterial\"}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            dataState={this.state.materialDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteMaterialRecord}\r\n            fetchRecord={this.props.fetchMaterialRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_MATERIAL\"\r\n        />)\r\n        testTabMap.set(\"IDS_TASK\", <ResultEntryTaskTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedTask\"}\r\n            addResultEntryTask={this.addResultEntryTask}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{\r\n                masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\r\n            }}\r\n            editParam={{\r\n                masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\r\n            }}\r\n            dataState={this.state.taskDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteTaskRecord}\r\n            fetchRecord={this.fetchTaskRecord}\r\n            //fetchRecord={this.fetchInstrumentRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_TASK\" />)\r\n        testTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.nneedsubsample}\r\n            subFields={[{ [designProperties.VALUE]: \"stestsynonym\" }, { [designProperties.VALUE]: \"dcreateddate\" }]}\r\n            userInfo={this.props.Login.userInfo}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: selectedTestList//this.props.Login.masterData.RESelectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDCOMMENTS\"}\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            masterData={this.props.Login.masterData}\r\n            isTestComment={true}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\",\r\n                    masterList: this.props.Login.masterData.RESelectedTest,\r\n                    ncontrolCode: this.state.controlMap.has(\"DeleteTestComment\") && this.state.controlMap.get(\"DeleteTestComment\").ncontrolcode\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedTest,\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n        testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", <ResultChangeHistoryTab\r\n            userInfo={this.props.Login.userInfo}\r\n            ApprovalResultChangeHistory={this.props.Login.masterData.ResultChangeHistory || []}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultChangeDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            screenName=\"IDS_RESULTCHANGEHISTORY\"\r\n            controlMap={this.state.controlMap}\r\n            masterData={this.props.Login.masterData}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            selectedId={null}\r\n\r\n        />)\r\n\r\n        return testTabMap;\r\n    }\r\n\r\n    sampleDataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleKey) {\r\n            case \"IDS_APPROVALHISTORY\":\r\n                this.setState({\r\n                    sampleHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sampleGridDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    sampleGridDataStateChange = (event) => {\r\n        this.setState({ sampleGridDataState: event.dataState })\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                this.setState({\r\n                    materialDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TASK\":\r\n                this.setState({\r\n                    taskDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                this.setState({\r\n                    documentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                this.setState({\r\n                    resultChangeDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SAMPLECOMMENTS\":\r\n                this.setState({\r\n                    sampleChangeDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    // sampleTabDetail = () => {\r\n    //     const tabMap = new Map();\r\n\r\n    //     {\r\n    //         this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\r\n    //             tabMap.set(\"IDS_SAMPLEINFO\", <SampleInfoView\r\n    //                 data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\r\n    //                 SingleItem={this.state.SingleItem}\r\n    //                 screenName=\"IDS_SAMPLEINFO\"\r\n    //             />) :\r\n    //             tabMap.set(\"IDS_SAMPLEGRID\", <SampleInfoGrid\r\n    //                 selectedSample={this.props.Login.masterData.RESelectedSample}\r\n    //                 dataState={this.state.dataState}\r\n    //                 dataStateChange={this.dataStateChange}\r\n    //                 detailedFieldList={this.state.SampleGridExpandableItem}\r\n    //                 extractedColumnList={this.state.SampleGridItem}\r\n    //                 userInfo={this.props.Login.userInfo}\r\n    //                 inputParam={this.props.Login.inputParam}\r\n    //                 screenName=\"IDS_SAMPLEGRID\"\r\n    //             />)\r\n    //         // tabMap.set(\"IDS_SAMPLEATTACHMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SAMPLECOMMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <></>)\r\n    //         return tabMap;\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n    sampleTabDetail() {\r\n        const tabMap = new Map();\r\n        let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        tabMap.set(\"IDS_SAMPLEATTACHMENTS\",\r\n            <Attachments\r\n                screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n                selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                masterList={this.props.Login.masterData.RESelectedSample}\r\n                masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHEMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                addName={\"AddSampleAttachment\"}\r\n                editName={\"EditSampleAttachment\"}\r\n                deleteName={\"DeleteSampleAttachment\"}\r\n                viewName={\"ViewSampleAttachment\"}\r\n                methodUrl={\"SampleAttachment\"}\r\n                nsubsampleneed={this.props.Login.masterData.nneedsubsample}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SampleAttachment\",\r\n                        npreregno,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: this.props.Login.screenName\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RESelectedSample\r\n\r\n                }}\r\n                selectedListName=\"IDS_ARNUMBER\"\r\n                displayName=\"sarno\"\r\n            />)\r\n        tabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"RESelectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            masterData={this.props.Login.masterData}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={this.props.Login.masterData.RESelectedSample}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_ARNUMBER\"\r\n            displayName=\"sarno\"\r\n        />)\r\n\r\n        tabMap.set(\"IDS_SAMPLEAPPROVALHISTORY\",\r\n            <SampleApprovalHistory\r\n                userInfo={this.props.Login.userInfo}\r\n                ApprovalHistory={this.props.Login.masterData.SampleApprovalHistory}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.sampleHistoryDataState}\r\n                dataStateChange={this.sampleDataStateChange}\r\n                masterData={this.props.Login.masterData}\r\n                screenName=\"IDS_SAMPLEAPPROVALHISTORY\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                selectedId={null}\r\n            />)\r\n\r\n\r\n        return tabMap;\r\n    }\r\n\r\n\r\n\r\n    subsampleTabDetail = () => {\r\n        let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ?\r\n            this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n        let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\r\n        let { subsampleskip, subsampletake } = this.state\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n\r\n        tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.RESelectedSubSample}\r\n            masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSubSampleAttachment\"}\r\n            editName={\"EditSubSampleAttachment\"}\r\n            deleteName={\"DeleteSubSampleAttachment\"}\r\n            viewName={\"ViewSubSampleAttachment\"}\r\n            methodUrl={\"SubSampleAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.nneedsubsample}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            userInfo={this.props.Login.userInfo}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleAttachment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLEARNO\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n        tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"RESelectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSubSampleComment\"}\r\n            editName={\"EditSubSampleComment\"}\r\n            deleteName={\"DeleteSubSampleComment\"}\r\n            methodUrl={\"SubSampleComment\"}\r\n            masterData={this.props.Login.masterData}\r\n            isTestComment={false}\r\n            masterList={this.props.Login.masterData.RESelectedSubSample}\r\n            masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nsamplecommentcode\"}\r\n            dataState={this.state.subSampleCommentDataState}\r\n            dataStateChange={this.subSampledataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleComment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLEARNO\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    onSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                RESelectedSample: this.props.Login.masterData.RESelectedSample,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab\r\n            }\r\n            this.props.getSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    onTestTabChange = (tabProps) => {\r\n        const activeTestKey = tabProps.screenName;\r\n        if (activeTestKey !== this.props.Login.activeTestKey) {\r\n            if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                    RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\r\n                    // ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                    //     this.props.Login.masterData.selectedTestCode : this.props.Login.masterData.RESelectedTest ?\r\n                    //         String(this.props.Login.masterData.RESelectedTest.ntransactiontestcode) : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: activeTestKey,\r\n                    screenName: activeTestKey,\r\n                    resultDataState: this.state.resultDataState,\r\n                    instrumentDataState: this.state.instrumentDataState,\r\n                    materialDataState: this.state.materialDataState,\r\n                    taskDataState: this.state.taskDataState,\r\n                    documentDataState: this.state.documentDataState,\r\n                    resultChangeDataState: this.state.resultChangeDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    sampleChangeDataState:this.state.sampleChangeDataState\r\n                }\r\n                this.props.getTestChildTabREDetail(inputData, true);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    onSubSampleTabChange = (tabProps) => {\r\n        const activeSubSampleTab = tabProps.screenName;\r\n        if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSubSampleTab,\r\n                activeSubSampleTab,\r\n                subSampleCommentDataState: this.state.subSampleCommentDataState,\r\n                subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\r\n            }\r\n            this.props.getSubSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    subSampledataStateChange = (event) => {\r\n        switch (this.props.Login.activeSubSampleTab) {\r\n            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                this.setState({\r\n                    subSampleCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                this.setState({\r\n                    subSampleAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    testMethodSourceEdit = (test) => {\r\n        this.props.testMethodSourceEdit(test)\r\n    }\r\n\r\n    addREInstrument = (test) => {\r\n        this.props.addREInstrument(test)\r\n    }\r\n    deleteInstrumentRecord = (test) => {\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode&&this.props.Login.masterData.ndesigntemplatemappingcode);\r\n        test={...test, 'ndesigntemplatemappingcode':ndesigntemplatemappingcode}\r\n        let inputParam = {\r\n            inputData: { ...test, 'ndesigntemplatemappingcode':ndesigntemplatemappingcode,'userinfo': this.props.Login.userInfo },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"deleteInstrument\",\r\n            screenName: \"deleteInstrumentAction\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteInstrumentAction\",\r\n                    operation: \"deleteInstrument\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.deleteInstrumentRecord(test)\r\n        }\r\n\r\n\r\n    }\r\n    fetchInstrumentRecord = (test) => {\r\n        this.props.fetchInstrumentRecord(test)\r\n    }\r\n    fetchMaterialRecord = (test) => {\r\n        this.props.fetchMaterialRecord(test)\r\n    }\r\n\r\n    //Aravindh\r\n    deleteMaterialRecord = (test) => {\r\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode&&this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        test={...test,nregtypecode:nregtypecode,nregsubtypecode:nregsubtypecode,ndesigntemplatemappingcode:ndesigntemplatemappingcode}\r\n        let inputParam = {\r\n            inputData: {\r\n                ...test.selectedRecord,\r\n                nregtypecode:nregtypecode,nregsubtypecode:nregsubtypecode,ndesigntemplatemappingcode:ndesigntemplatemappingcode,\r\n                ntransactiontestcode: test.masterData.RESelectedTest ?\r\n                    test.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n\r\n            classUrl: 'resultentrybysample',\r\n            methodUrl: \"ResultUsedMaterial\",\r\n            operation: \"delete\",\r\n            screenName: \"deleteMaterialAction\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n            nresultusedmaterialcode: test.selectedRecord.nresultusedmaterialcode,\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteMaterialAction\",\r\n                    operation: \"deleteMaterial\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            //this.props.deleteResultUsedMaterial(test)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    deleteTaskRecord = (test) => {\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode&&this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        test={...test,ndesigntemplatemappingcode:ndesigntemplatemappingcode}\r\n        let inputParam = {\r\n            inputData: { ...test, 'userinfo': this.props.Login.userInfo },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"deleteTask\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteTaskaction\",\r\n                    operation: \"deleteTask\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.deleteTaskRecord(test)\r\n        }\r\n\r\n    }\r\n    fetchTaskRecord = (test) => {\r\n        this.props.fetchTaskRecord(test)\r\n    }\r\n    addResultEntryTask = (inputData) => {\r\n        let selectedRecord = {}\r\n        selectedRecord = {\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            stestsynonym: inputData.stestsynonym\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: selectedRecord,\r\n                operation: \"create\",\r\n                screenName: \"IDS_TASK\",\r\n                openModal: true,\r\n                activeTestKey: \"IDS_TASK\",\r\n                ncontrolcode: inputData.addResultUsedTaskId,\r\n                selectedId: null\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    checkListRecord = (parameterData) => {\r\n        this.props.checkListRecord(parameterData, this.props.Login.userInfo)\r\n    }\r\n    getFormula = (parameterData, userInfo, masterData, index, event) => {\r\n        this.setState({\r\n            modalEvent: event.currentTarget\r\n        })\r\n        this.props.getFormula(parameterData, userInfo, masterData, index, this.state.selectedRecord)\r\n    }\r\n    calculateFormula = () => {\r\n        const selectedRecord = this.state.selectedRecord || []\r\n        const selectedForumulaInput = selectedRecord.selectedForumulaInput || []\r\n        let lstDynamicFields = [];\r\n\r\n        if (selectedForumulaInput) {\r\n            selectedForumulaInput.map(dynamicfields =>\r\n                lstDynamicFields.push(dynamicfields)\r\n            );\r\n            const inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                lstDynamicFields: lstDynamicFields,\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord: selectedRecord,\r\n                selectedResultGrade: this.state.selectedRecord.selectedResultGrade,\r\n                ResultParameter: this.state.selectedRecord.ResultParameter || {}\r\n            }\r\n            this.props.calculateFormula(inputData)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height\r\n            });\r\n        }\r\n    }\r\n    getActiveTestURL() {\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (this.props.Login.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n\r\n    resultImport = () => {\r\n        this.props.Login.masterData.selectedImportFile = []\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                operation: \"create\",\r\n                screenName: \"IDS_RESULTIMPORTFILE\",\r\n                openModal: true,\r\n                loadFile: true,\r\n                activeTestKey: \"IDS_RESULTS\",\r\n                masterData: this.props.Login.masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    }\r\n    handleSubSamplePageChange = e => {\r\n        this.setState({\r\n            subSampleSkip: e.skip,\r\n            subSampleTake: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    }\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take,\r\n            sampletakeDataState: e.take\r\n        });\r\n    };\r\n    verticalPaneSizeChange = (val) => {\r\n        if (this.state.enableAutoHeight) {\r\n            this.setState({\r\n                initialVerticalWidth: val - 150\r\n            })\r\n        }\r\n    }\r\n    changeSplitterOption = () => {\r\n        this.setState({\r\n            enableAutoHeight: !this.state.enableAutoHeight,\r\n            initialVerticalWidth: \"57vh\"\r\n\r\n        })\r\n    }\r\n    \r\n\r\n    sideNavDetail = (screenName) => {\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.RE_TEST || [];\r\n        const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        // let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n\r\n        return (\r\n            screenName == \"IDS_RESULTS\" ?\r\n                <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_RESULTS\"} tabDetail={this.resultTabDetail()} onTabChange={this.onTabChange} />\r\n                : screenName == \"IDS_ATTACHMENTS\" ?\r\n                    <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\"} tabDetail={this.attachmentTabDetail()} onTabChange={this.onTabChange} />\r\n                    : screenName == \"IDS_COMMENTS\" ?\r\n                        <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_TESTCOMMENTS\"} tabDetail={this.commentTabDetail()} onTabChange={this.onTabChange} />\r\n                        :\r\n                        screenName == \"IDS_INSTRUMENT\" ?\r\n                            <ApprovalInstrumentTab\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterData={this.props.Login.masterData}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                methodUrl={\"ResultUsedInstrument\"}\r\n                                controlMap={this.state.controlMap}\r\n                                deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                dataState={this.state.instrumentDataState}\r\n                                selectedId={this.props.Login.selectedId || null}\r\n                                isActionRequired={true}\r\n                                dataStateChange={this.dataStateChange}\r\n                                deleteRecord={this.deleteInstrumentRecord}\r\n                                fetchRecord={this.fetchInstrumentRecord}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                screenName=\"IDS_INSTRUMENT\"\r\n                            />\r\n                            :\r\n                            screenName == \"IDS_MATERIAL\" ?\r\n                                <ResultUsedMaterial\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    masterData={this.props.Login.masterData}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    methodUrl={\"ResultUsedMaterial\"}\r\n                                    controlMap={this.state.controlMap}\r\n                                    deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                    editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                    dataState={this.state.materialDataState}\r\n                                    selectedId={this.props.Login.selectedId || null}\r\n                                    isActionRequired={true}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    deleteRecord={this.deleteMaterialRecord}\r\n                                    fetchRecord={this.props.fetchMaterialRecord}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    screenName=\"IDS_MATERIAL\"\r\n                                />\r\n                                :\r\n                                screenName == \"IDS_TASK\" ?\r\n                                    <ResultEntryTaskTab\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        masterData={this.props.Login.masterData}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        methodUrl={\"ResultUsedTask\"}\r\n                                        addResultEntryTask={this.addResultEntryTask}\r\n                                        controlMap={this.state.controlMap}\r\n                                        deleteParam={{\r\n                                            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                                            ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\r\n                                        }}\r\n                                        editParam={{\r\n                                            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                                            ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\r\n                                        }}\r\n                                        dataState={this.state.taskDataState}\r\n                                        selectedId={this.props.Login.selectedId || null}\r\n                                        isActionRequired={true}\r\n                                        dataStateChange={this.dataStateChange}\r\n                                        deleteRecord={this.deleteTaskRecord}\r\n                                        fetchRecord={this.fetchTaskRecord}\r\n                                        //fetchRecord={this.fetchInstrumentRecord}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        screenName=\"IDS_TASK\" />\r\n                                        :\r\n                                        screenName == \"IDS_SAMPLEDETAILS\" ?\r\n                                        this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\r\n                                            <SampleInfoView\r\n                                                data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0\r\n                                                    ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\r\n                                                SingleItem={this.state.SingleItem}\r\n\r\n                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                            /> :\r\n                                            <SampleInfoGrid\r\n                                                selectedSample={this.props.Login.masterData.RESelectedSample}\r\n                                                dataState={this.state.sampleGridDataState}\r\n                                                dataStateChange={this.sampleGridDataStateChange}\r\n                                                extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                screenName=\"IDS_SAMPLEGRID\"\r\n                                                jsonField={\"jsondata\"}\r\n                                            />\r\n                                        \r\n                                    : \"\"\r\n        )\r\n    }\r\n\r\n\r\n    resultTabDetail = () => {\r\n        const resultTabMap = new Map();\r\n        //let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        // let { testskip, testtake } = this.state\r\n        // let testList = this.props.Login.masterData.RE_TEST || [];\r\n        // testList = testList.slice(testskip, testskip + testtake);\r\n        const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode\r\n        //let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n\r\n        resultTabMap.set(\"IDS_RESULTS\", <ResultEntryResultsTab\r\n            tabSequence={SideBarSeqno.TEST}\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            fetchRecord={this.props.parameterRecord}\r\n            controlMap={this.state.controlMap}\r\n            parameterParam={{ primaryKeyField: \"ntransactionresultcode\", masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            checkListRecord={this.checkListRecord}\r\n            checklistParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            viewFile={this.props.viewAttachment}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_RESULTS\"\r\n            getMeanTestParameter={this.props.getMeanCalculationTestParameter}\r\n            meanParam={{ \"userInfo\": this.props.Login.userInfo, ncontrolCode: meanControlId }}\r\n        />)\r\n\r\n        resultTabMap.set(\"IDS_RESULTCHANGEHISTORY\",\r\n            <ResultChangeHistoryTab\r\n                tabSequence={SideBarSeqno.TEST}\r\n                userInfo={this.props.Login.userInfo}\r\n                ApprovalResultChangeHistory={this.props.Login.masterData.ResultChangeHistory || []}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.resultChangeDataState}\r\n                dataStateChange={this.dataStateChange}\r\n                screenName=\"IDS_RESULTCHANGEHISTORY\"\r\n                controlMap={this.state.controlMap}\r\n                masterData={this.props.Login.masterData}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                selectedId={null}\r\n\r\n            />)\r\n\r\n        return resultTabMap;\r\n    }\r\n\r\n    attachmentTabDetail = () => {\r\n        const attachmentTabMap = new Map();\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let { testskip, testtake, subsampleskip, subsampletake } = this.state\r\n        let testList = this.props.Login.masterData.RE_TEST || [];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ?\r\n            this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n\r\n\r\n        attachmentTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            tabSequence={SideBarSeqno.TEST}\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.nneedsubsample}\r\n            subFields={[{ [designProperties.VALUE]: \"stestsynonym\" }, { [designProperties.VALUE]: \"dcreateddate\" }]}\r\n            userInfo={this.props.Login.userInfo}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: selectedTestList//this.props.Login.masterData.RESelectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n\r\n        this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample &&\r\n        attachmentTabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n            tabSequence={SideBarSeqno.SUBSAMPLE}\r\n            screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.RESelectedSubSample}\r\n            masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSubSampleAttachment\"}\r\n            editName={\"EditSubSampleAttachment\"}\r\n            deleteName={\"DeleteSubSampleAttachment\"}\r\n            viewName={\"ViewSubSampleAttachment\"}\r\n            methodUrl={\"SubSampleAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.nneedsubsample}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            userInfo={this.props.Login.userInfo}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleAttachment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLEARNO\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n        attachmentTabMap.set(\"IDS_SAMPLEATTACHMENTS\",\r\n            <Attachments\r\n                screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n                tabSequence={SideBarSeqno.SAMPLE}\r\n                selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                masterList={this.props.Login.masterData.RESelectedSample}\r\n                masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHEMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                addName={\"AddSampleAttachment\"}\r\n                editName={\"EditSampleAttachment\"}\r\n                deleteName={\"DeleteSampleAttachment\"}\r\n                viewName={\"ViewSampleAttachment\"}\r\n                methodUrl={\"SampleAttachment\"}\r\n                nsubsampleneed={this.props.Login.masterData.nneedsubsample}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SampleAttachment\",\r\n                        npreregno,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: this.props.Login.screenName\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RESelectedSample\r\n\r\n                }}\r\n                selectedListName=\"IDS_ARNUMBER\"\r\n                displayName=\"sarno\"\r\n            />)\r\n        return attachmentTabMap;\r\n    }\r\n\r\n    commentTabDetail = () => {\r\n        const commentTabMap = new Map();\r\n        let { testskip, testtake, subSampleSkip, subSampleTake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.RE_TEST || [];\r\n        const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let npreregno = this.props.Login.masterData.REselectedSample ? this.props.Login.masterData.REselectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        const ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\r\n        subsampleList = subsampleList.slice(subSampleSkip, subSampleSkip + subSampleTake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n\r\n\r\n        commentTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            tabSequence={SideBarSeqno.TEST}\r\n            selectedMaster={selectedTestList}\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDCOMMENTS\"}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            isTestComment={false}\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            masterData={this.props.Login.masterData}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: selectedTestList,\r\n                ncontrolCode: editTestCommentsId\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample &&\r\n        commentTabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n            tabSequence={SideBarSeqno.SUBSAMPLE}\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSubSampleComment\"}\r\n            editName={\"EditSubSampleComment\"}\r\n            deleteName={\"DeleteSubSampleComment\"}\r\n            methodUrl={\"SubSampleComment\"}\r\n            masterData={this.props.Login.masterData}\r\n            isTestComment={false}\r\n            masterList={this.props.Login.masterData.RESelectedSubSample}\r\n            masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nsamplecommentcode\"}\r\n            dataState={this.state.subSampleCommentDataState}\r\n            dataStateChange={this.subSampledataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleComment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLEARNO\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n        commentTabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n             tabSequence={SideBarSeqno.SAMPLE}\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"RESelectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            masterData={this.props.Login.masterData}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={this.props.Login.masterData.RESelectedSample}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_ARNUMBER\"\r\n            displayName=\"sarno\"\r\n        />)\r\n\r\n        return commentTabMap;\r\n    }\r\n\r\n\r\n    onInputSwitchOnChange = (event) => {\r\n        if (event.target.name == \"PopupNav\") {\r\n            this.setState({\r\n                enablePropertyPopup: !this.state.enablePropertyPopup\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                enableAutoClick: !this.state.enableAutoClick\r\n            })\r\n        }\r\n    }\r\n    changePropertyViewClose = (id) => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined,\r\n                activeTestTab: undefined,\r\n                activeTabId: id\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    changePropertyView = (index,screenName, event, status) => {\r\n\r\n        let id = false;\r\n        if (event && event.ntransactiontestcode) {\r\n            id = event.ntransactiontestcode\r\n        } else if (event && event.ntransactionsamplecode) {\r\n            id = event.ntransactionsamplecode\r\n        } else if (event && event.npreregno) {\r\n            id = event.npreregno\r\n        }\r\n        //console.log(this.state.activeTabId, id , \"=======>\")\r\n        let activeTabIndex\r\n        let activeTabId\r\n        if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n            activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\r\n            //activeTabId = this.state.activeTabIndex !== index ? true:false;\r\n        }\r\n        if (status != \"click\") {\r\n            if(index)\r\n            {\r\n                const tabProps = {\r\n                    tabSequence: SideBarSeqno.TEST,\r\n                    screenName: screenName == \"IDS_COMMENTS\" ? \"IDS_TESTCOMMENTS\": screenName === \"IDS_ATTACHMENTS\"?\"IDS_TESTATTACHMENTS\":screenName ,\r\n                    activeTabIndex,\r\n                    //activeTabId\r\n                }\r\n                this.onTabChange(tabProps);\r\n            }\r\n            // if (index == SideBarTabIndex.RESULT) {\r\n            //     const tabProps = {\r\n            //         tabSequence: SideBarSeqno.TEST,\r\n            //         screenName: \"IDS_RESULTS\",\r\n            //         activeTabIndex,\r\n            //         //activeTabId\r\n            //     }\r\n            //     this.onTabChange(tabProps);\r\n            // }\r\n\r\n            // else if (index == SideBarTabIndex.ATTACHMENTS) {\r\n            //     const tabProps = {\r\n            //         tabSequence: SideBarSeqno.TEST,\r\n            //         screenName: \"IDS_TESTATTACHMENTS\",\r\n            //         activeTabIndex,\r\n            //        // activeTabId\r\n            //     }\r\n            //     this.onTabChange(tabProps);\r\n            // }\r\n            // else if (index == SideBarTabIndex.COMMENTS) {\r\n            //     const tabProps = {\r\n            //         tabSequence: SideBarSeqno.TEST,\r\n            //         screenName: \"IDS_TESTCOMMENTS\",\r\n            //         activeTabIndex,\r\n            //         //activeTabId\r\n            //     }\r\n            //     this.onTabChange(tabProps);\r\n            // }\r\n            // else {\r\n            //     if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n\r\n            //         const updateInfo = {\r\n            //             typeName: DEFAULT_RETURN,\r\n            //             data: {\r\n            //                 activeTabIndex: this.state.activeTabIndex !== index ? index : id ? index : false,\r\n            //                 activeTabId: id\r\n            //             }\r\n            //         }\r\n            //         this.props.updateStore(updateInfo);\r\n            //     }\r\n            // }\r\n        }\r\n    }\r\n\r\n\r\n    onTabChange = (tabProps) => {\r\n        const activeTestTab = tabProps.screenName;\r\n        const tabseqno = tabProps.tabSequence;\r\n        // if (activeTestTab !== this.props.Login.activeTestTab) {\r\n        if (tabseqno == SideBarSeqno.TEST) {\r\n            if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                    RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    //activeTestTab,\r\n                    resultDataState: this.state.resultDataState,\r\n                    instrumentDataState: this.state.instrumentDataState,\r\n                    materialDataState: this.state.materialDataState,\r\n                    taskDataState: this.state.taskDataState,\r\n                    documentDataState: this.state.documentDataState,\r\n                    resultChangeDataState: this.state.resultChangeDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\r\n                    activeTabId: tabProps.activeTabId ? tabProps.activeTabId : this.state.activeTabId\r\n                }\r\n                this.props.getTestChildTabREDetail(inputData, true);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }));\r\n            }\r\n        }\r\n        else if (tabseqno == SideBarSeqno.SUBSAMPLE) {\r\n            if (activeTestTab !== this.props.Login.activeTestTab) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\r\n                    ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    screenName: activeTestTab,\r\n                    activeTestTab,\r\n                    activeSubSampleTab: activeTestTab,\r\n                    subSampleCommentDataState: this.state.subSampleCommentDataState,\r\n                    subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\r\n                }\r\n                this.props.getSubSampleChildTabDetail(inputData)\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }))\r\n            }\r\n        }\r\n        else {\r\n\r\n            if (activeTestTab !== this.props.Login.activeTestTab) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    RESelectedSample: this.props.Login.masterData.RESelectedSample,\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    screenName: activeTestTab,\r\n                    activeSampleTab: activeTestTab,\r\n                    activeTestTab,\r\n                    sampleChangeDataState:this.state.sampleChangeDataState\r\n                }\r\n                this.props.getSampleChildTabDetail(inputData)\r\n            }\r\n        }\r\n\r\n        //}\r\n    }\r\n\r\n    render() {\r\n        let sampleListRE = this.props.Login.masterData.RE_SAMPLE ? sortData(this.props.Login.masterData.RE_SAMPLE, \"descending\", \"npreregno\") : [];\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ?  this.props.Login.masterData.RE_SUBSAMPLE : []\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\r\n        let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? this.props.Login.masterData.RE_SUBSAMPLE : []\r\n\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : []\r\n        let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : []\r\n        const startDate = (this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date());\r\n        const endDate = (this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date());\r\n\r\n        // let obj = this.covertDatetoString(startDate, endDate)\r\n        let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\r\n\r\n        const fromDate = obj.fromDate;\r\n        const toDate = obj.toDate;\r\n\r\n\r\n        let subSampleGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            fromdate: fromDate,\r\n            todate: toDate,\r\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n            activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            sampleChangeDataState:this.state.sampleChangeDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            searchSubSampleRef: this.searchSubSampleRef,\r\n            searchTestRef: this.searchTestRef,\r\n            nneedtemplatebasedflow: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow) || false,\r\n            //Aravindh\r\n            checkBoxOperation: 3\r\n        }\r\n        let testGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n            activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\r\n            activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\r\n\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n            samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\r\n            sampleHistoryDataState: this.state.sampleHistoryDataState,\r\n            activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined\r\n\r\n        }\r\n        let testChildGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n            fromdate: fromDate,\r\n            todate: toDate,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined\r\n        }\r\n\r\n        let sampleSearchField = [\"sarno\", \"ssamplearno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\"\r\n            , \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\"\r\n            , \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\", \"dregdate\"];\r\n        if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n\r\n            sampleSearchField = [\"sarno\", \"ssamplearno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\",\r\n                \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\",\r\n                \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"\r\n            ]\r\n        }\r\n        const filterSampleParam = {\r\n            inputListName: \"RE_SAMPLE\",\r\n            selectedObject: \"RESelectedSample\",\r\n            primaryKeyField: \"npreregno\",\r\n            fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n            childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n            fecthInputObject: {\r\n                ntype: 2,\r\n                nflag: 2,\r\n                ntransactiontestcode: 0,\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                fromdate: fromDate,\r\n                todate: toDate,\r\n                activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n                //nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                nneedsubsample: this.props.Login.masterData.nneedsubsample == 3 ? true : false,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                checkBoxOperation: 3,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\r\n\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\r\n            searchFieldList: sampleSearchField,\r\n            changeList: [\"RE_SUBSAMPLE\", \"RE_TEST\", \"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedSample\", \"RESelectedSubSample\", \"RESelectedTest\"]\r\n        };\r\n\r\n        const filterSubSampleParam = {\r\n            inputListName: \"RE_SUBSAMPLE\",\r\n            selectedObject: \"RESelectedSubSample\",\r\n            primaryKeyField: \"ntransactionsamplecode\",\r\n            fetchUrl: \"resultentrybysample/getResultEntrySubSampleDetails\",\r\n            childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n            fecthInputObject: {\r\n                ntype: 2,\r\n                nflag: 2,\r\n                ntransactiontestcode: 0,\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                fromdate: fromDate,\r\n                todate: toDate,\r\n                activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n                nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                checkBoxOperation: 3\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\r\n            searchFieldList: ['ssamplearno', \"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\",\r\n                \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\",\r\n                \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"],\r\n            changeList: [\"RE_TEST\", \"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedSubSample\", \"RESelectedTest\"]\r\n        };\r\n        let filterTestParam = {\r\n            inputListName: \"RE_TEST\",\r\n            selectedObject: \"RESelectedTest\",\r\n            primaryKeyField: \"ntransactiontestcode\",\r\n            fetchUrl: this.getActiveTestURL(),\r\n            fecthInputObject: {\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\r\n\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sarno\", \"ssamplearno\", \"stestsynonym\", \"dtransactiondate\", \"ssectionname\", \"ssourcename\", \"ntestrepeatno\", \"ntestretestno\", \"stransdisplaystatus\", \"stestsynonym\"],\r\n            changeList: [\"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedTest\"],\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: 3\r\n\r\n        }\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n                fecthInputObject: filterSampleParam,\r\n                selectedObject: \"RESelectedSample\",\r\n                inputListName: \"RE_SAMPLE\",\r\n                updatedListname: \"\",\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }, {\r\n                filteredListName: \"searchedSubSample\",\r\n                updatedListname: \"updatedSubSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSubSampleRef,\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n                fecthInputObject: testGetREParam,\r\n                selectedObject: \"RESelectedSubSample\",\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                inputListName: \"RE_SUBSAMPLE\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }, {\r\n                filteredListName: \"searchedTest\",\r\n                clearFilter: \"yes\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: this.getActiveTestURL(),\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchSampleRef, childFilteredListName: \"\" }],\r\n                fecthInputObject: testChildGetREParam,\r\n                selectedObject: \"RESelectedTest\",\r\n                inputListName: \"RE_TEST\",\r\n                updatedListname: \"updatedTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }];\r\n\r\n\r\n        this.breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto\r\n            },\r\n            {\r\n                \"label\": \"IDS_SAMPLETYPE\",\r\n                \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\r\n            }, {\r\n                \"label\": \"IDS_REGISTRATIONTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\"\r\n                // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\r\n                // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_REGISTRATIONSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\r\n                // \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename || \"-\" :\r\n                // this.props.Login.masterData.RegistrationSubType ?\r\n                //     this.props.Login.masterData.RegistrationSubType[0].sregsubtypename : \"-\"\r\n            }, {\r\n                \"label\": \"IDS_CONFIGVERSION\",\r\n                \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_FILTERSTATUS\",\r\n                \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_TEST\",\r\n                \"value\": this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.stestsynonym ? this.props.Login.masterData.realTestcodeValue.stestsynonym : \"NA\"\r\n            }\r\n        ]\r\n\r\n\r\n        const testStartId = this.state.controlMap.has(\"TestStart\") && this.state.controlMap.get(\"TestStart\").ncontrolcode\r\n        const resultEnterId = this.state.controlMap.has(\"ResultEnter\") && this.state.controlMap.get(\"ResultEnter\").ncontrolcode\r\n        const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode\r\n        const setDefaultId = this.state.controlMap.has(\"SetDefaultResult\") && this.state.controlMap.get(\"SetDefaultResult\").ncontrolcode\r\n\r\n        const editSourceMethodId = this.state.controlMap.has(\"EditSourceMethod\") && this.state.controlMap.get(\"EditSourceMethod\").ncontrolcode\r\n        const addResultUsedInstrumentId = this.state.controlMap.has(\"AddResultUsedInstrument\") && this.state.controlMap.get(\"AddResultUsedInstrument\").ncontrolcode\r\n        const addResultUsedMaterailId = this.state.controlMap.has(\"AddResultUsedMaterial\") && this.state.controlMap.get(\"AddResultUsedMaterial\").ncontrolcode\r\n        //const addResultUsedTaskId = this.state.controlMap.has(\"AddResultUsedTask\") && this.state.controlMap.get(\"AddResultUsedTask\").ncontrolcode\r\n        //const parameterCommentsId = this.state.controlMap.has(\"AddParameterComments\") && this.state.controlMap.get(\"AddParameterComments\").ncontrolcode\r\n\r\n\r\n        const mandatoryFieldsInstrument = [{ \"mandatory\": true, \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"ninstrumentcatcode\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_INSTRUMENT\", \"dataField\": \"ninstrumentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_FORMDATE\", \"dataField\": \"dfromdate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TODATE\", \"dataField\": \"dtodate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzfromdate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntztodate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n\r\n        const mandatoryFieldsTask = [{ \"mandatory\": true, \"idsName\": \"IDS_PREANALYSISTIME\", \"dataField\": \"spreanalysistime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_PREPARATIONTIME\", \"dataField\": \"spreparationtime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_ANALYSISTIME\", \"dataField\": \"sanalysistime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_MISCTIME\", \"dataField\": \"smisctime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            //{ \"mandatory\": true, \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\" }\r\n        ]\r\n\r\n        const mandatoryFieldsTestMethodSource = [{ \"mandatory\": true, \"idsName\": \"IDS_SOURCE\", \"dataField\": \"nsourcecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_METHOD\", \"dataField\": \"nmethodcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n\r\n        // const mandatoryFieldsCheckList=[{\"mandatory\": true, \"idsName\": \"IDS_SOURCE\", \"dataField\": \"nsourcecode\" },\r\n        //    { \"mandatory\": true, \"idsName\": \"IDS_METHOD\", \"dataField\": \"nmethodcode\"}]\r\n        const mandatoryFieldsParameter = [{ \"mandatory\": true, \"idsName\": \"IDS_PARAMETERCOMMENTS\", \"dataField\": \"sresultcomment\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]\r\n        const validateFormulaMandyFields = this.state.validateFormulaMandyFields;\r\n\r\n        // const mandatoryFieldsTask = [{ \"mandatory\": true, \"idsName\": \"IDS_PREANALYSISTIME\", \"dataField\": \"spreanalysistime\" },\r\n        // { \"mandatory\": true, \"idsName\": \"IDS_PREPARATIONTIME\", \"dataField\": \"spreparationtime\" },\r\n        // { \"mandatory\": true, \"idsName\": \"IDS_ANALYSISTIME\", \"dataField\": \"sanalysistime\" },\r\n        // { \"mandatory\": true, \"idsName\": \"IDS_MISCTIME\", \"dataField\": \"smisctime\" }]\r\n\r\n        const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode\r\n\r\n\r\n\r\n\r\n\r\n        const testDesign = <ContentPanel>\r\n            <Card>\r\n                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                    <span style={{ display: \"inline-block\" }}>\r\n                        <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                    </span>\r\n                    {/* <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                        onClick={() => this.showRESampleInfo()}\r\n                    >\r\n                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                        {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                    </button> */}\r\n                    {/* </div> */}\r\n                </Card.Header>\r\n                <Card.Body className='p-0 sm-pager'>\r\n                    <TransactionListMasterJson\r\n                       cardHead={94}\r\n                        //paneHeight={this.state.initialVerticalWidth}\r\n                        // paneHeight={`${testListRE && testListRE !== null && testListRE.length > 0 ? testListRE.length * 13 : 5}vh`}\r\n                        masterList={this.props.Login.masterData.searchedTest || testListRE}\r\n                        selectedMaster={this.props.Login.masterData.RESelectedTest}\r\n                        primaryKeyField=\"ntransactiontestcode\"\r\n                        //getMasterDetail={this.props.getTestChildTabREDetail}\r\n                        getMasterDetail={(event, status) => { this.props.getTestChildTabREDetail(event, status);this.changePropertyView( 1 ,\"IDS_RESULTS\" ,event, \"click\") }}\r\n                        inputParam={testChildGetREParam}\r\n                        subFieldsLabel={true}\r\n                        additionalParam={[]}\r\n                        mainField=\"stestsynonym\"\r\n                        selectedListName=\"RESelectedTest\"\r\n                        objectName=\"test\"\r\n                        listName=\"IDS_TEST\"\r\n                        pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                        showStatusLink={true}\r\n                        statusFieldName=\"stransdisplaystatus\"\r\n                        statusField=\"ntransactionstatus\"\r\n                        needMultiSelect={true}\r\n                        subFields={this.state.testListColumns || []}\r\n                        moreField={this.state.testMoreField}\r\n                        needValidation={false}\r\n                        needFilter={false}\r\n                        filterColumnData={this.props.filterTransactionList}\r\n                        searchListName=\"searchedTest\"\r\n                        searchRef={this.searchTestRef}\r\n                        filterParam={filterTestParam}\r\n                        selectionField=\"ntransactionstatus\"\r\n                        showStatusName={true}\r\n                        selectionFieldName=\"sfilterstatus\"\r\n                        childTabsKey={[\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                            \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\",\"RegistrationComment\"]}\r\n                        selectionList={this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.REFilterStatus : []}\r\n                        skip={this.state.testskip}\r\n                        take={this.state.testtake}\r\n                        handlePageChange={this.handleTestPageChange}\r\n                        selectionColorField=\"scolorhexcode\"\r\n                        showMoreResetList={true}\r\n                        showMoreResetListName=\"RE_SAMPLE\"\r\n                        buttonCount={5}\r\n                        jsonField={'jsondata'}\r\n                        jsonDesignFields={true}\r\n                        actionIcons={\r\n                            [{ title: this.props.intl.formatMessage({ id: \"IDS_EDITMETHODSSOURCE\" }), controlname: \"faPencilAlt\", dataplace: \"left\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_ADDINSTRUMENT\" }), controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_ADDMATERIAL\" }), controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1, onClick: this.props.addREMaterial, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedMaterailId } }\r\n                                // { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }\r\n                            ]\r\n                        }\r\n                        commonActions={\r\n                            // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n                            <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                {testListRE.length > 0 ?\r\n                                    <>\r\n                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                        {/* <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_TESTSTART\" })} hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                <FontAwesomeIcon icon={faPlay} />\r\n                                                                                            </Nav.Link> */}\r\n\r\n                                        {this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtestinitiate ?\r\n\r\n                                            <FontIconWrap\r\n                                           //  data-for=\"tooltip-common-wrap\" \r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_TESTSTART\" })} hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1}\r\n                                                className=\"btn btn-circle outline-grey ml-2\" role=\"button\"\r\n                                                onClick={() => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest,\r\n                                                    this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake)} >\r\n                                                <FontAwesomeIcon icon={faPlay} />\r\n                                            </FontIconWrap> : \"\"}\r\n\r\n\r\n\r\n                                        <Nav.Link\r\n                                        // data-for=\"tooltip-common-wrap\"\r\n                                         data-tip={this.props.intl.formatMessage({ id: \"IDS_ENTERRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(resultEnterId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.props.resultGetModule(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake)} >\r\n                                            <FontAwesomeIcon icon={faAddressBook} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link\r\n                                        // data-for=\"tooltip-common-wrap\" \r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_FILLDEFAULTRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(setDefaultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.defaultActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.masterData.RESelectedSample, setDefaultId, this.state.testskip, this.state.testtake)}>\r\n                                            <FontAwesomeIcon icon={faPencilRuler} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link \r\n                                        //data-for=\"tooltip-common-wrap\" \r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })} hidden={this.state.userRoleControlRights.indexOf(completeResultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake)}>\r\n                                            <FontAwesomeIcon icon={faCheckCircle} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link \r\n                                        //data-for=\"tooltip-common-wrap\" \r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORTRESULT\" })} hidden={true} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.resultImport(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake)}>\r\n                                            <FontAwesomeIcon icon={faFileImport} />\r\n                                        </Nav.Link>\r\n                                    </>\r\n                                    : \"\"}\r\n                            </ProductList>\r\n\r\n                            // </Tooltip>\r\n                        }\r\n                    />\r\n                </Card.Body>\r\n            </Card>\r\n        </ContentPanel>\r\n\r\n        let mainDesign = \"\";\r\n        if (this.props.Login.masterData.realRegSubTypeValue &&\r\n            this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) {\r\n            mainDesign = <SplitterLayout borderColor=\"#999\"\r\n                primaryIndex={1} percentage={true}\r\n                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                primaryMinSize={40}\r\n                secondaryMinSize={30}\r\n            >\r\n                <Card>\r\n                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                            <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}</h4>\r\n                        </span>\r\n                    </Card.Header>\r\n                    <Card.Body className='p-0 sm-pager'>\r\n                        <TransactionListMasterJson\r\n                           cardHead={94}\r\n                            //paneHeight={this.state.initialVerticalWidth}\r\n                            masterList={this.props.Login.masterData.searchedSubSample || subSampleListRE}\r\n                            selectedMaster={this.props.Login.masterData.RESelectedSubSample}\r\n                            primaryKeyField=\"ntransactionsamplecode\"\r\n                            getMasterDetail={this.props.getTestREDetail}\r\n                            inputParam={testGetREParam}\r\n                            additionalParam={[]}\r\n                            mainField=\"ssamplearno\"\r\n                            selectedListName=\"RESelectedSubSample\"\r\n                            objectName=\"subSample\"\r\n                            listName=\"IDS_SUBSAMPLE\"\r\n                            jsonField={'jsondata'}\r\n                            jsonDesignFields={true}\r\n                            subFields={this.state.DynamicSubSampleColumns}\r\n                            moreField={this.state.subSampleMoreField}\r\n                            needValidation={false}\r\n                            needMultiSelect={true}\r\n                            needFilter={false}\r\n                            skip={this.state.subSampleSkip}\r\n                            take={this.state.subSampleTake}\r\n                            handlePageChange={this.handleSubSamplePageChange}\r\n                            showStatusLink={true}\r\n                            showStatusName={true}\r\n                            selectionList={this.state.selectedFilter}\r\n                            statusFieldName=\"stransdisplaystatus\"\r\n                            statusField=\"ntransactionstatus\"\r\n                            childTabsKey={[\"RE_TEST\",\"Registration\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"]}\r\n                            filterColumnData={this.props.filterTransactionList}\r\n                            searchListName=\"searchedSubSample\"\r\n                            searchRef={this.searchSubSampleRef}\r\n                            filterParam={filterSubSampleParam}\r\n                        />\r\n                    </Card.Body>\r\n                </Card>\r\n                {testDesign}\r\n            </SplitterLayout>\r\n        }\r\n        else {\r\n            mainDesign = testDesign\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {/* <PerfectScrollbar> */}\r\n                <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    <Row noGutters={true} bsPrefix=\"toolbar-top\">\r\n                        {/* sticky_head_parent ref={(parentHeight) => { this.parentHeight = parentHeight }} secondaryInitialSize={40}*/}\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            <ListWrapper className={`vertical-tab-top ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                <div className={`tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"} ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                    <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1}\r\n                                        secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                        //onSecondaryPaneSizeChange={this.paneSizeChange} \r\n                                        primaryMinSize={40} secondaryMinSize={20}>\r\n                                        <div className='toolbar-top-inner'>\r\n                                            <TransactionListMasterJson\r\n                                                clickIconGroup={true}\r\n                                                // paneHeight={this.state.parentHeight}\r\n                                                splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                                masterList={this.props.Login.masterData.searchedSample || sampleListRE}\r\n                                                selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                                                primaryKeyField=\"npreregno\"\r\n                                                getMasterDetail={this.props.getsubSampleREDetail}\r\n                                                inputParam={subSampleGetREParam}\r\n                                                additionalParam={['napprovalversioncode']}\r\n                                                mainField=\"sarno\"\r\n                                                selectedListName=\"RESelectedSample\"\r\n                                                objectName=\"sample\"\r\n                                                listName=\"IDS_SAMPLE\"\r\n                                                needValidation={false}\r\n                                                validationKey=\"napprovalversioncode\"\r\n                                                validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                                subFields={this.state.DynamicSampleColumns || []}\r\n                                                moreField={this.state.sampleMoreField}\r\n                                                needFilter={true}\r\n                                                needMultiSelect={true}\r\n                                                showFilter={this.props.Login.showFilter}\r\n                                                openFilter={this.openFilter}\r\n                                                closeFilter={this.closeFilter}\r\n                                                onFilterSubmit={this.onREFilterSubmit}\r\n                                                filterColumnData={this.props.filterTransactionList}\r\n                                                searchListName=\"searchedSample\"\r\n                                                searchRef={this.searchSampleRef}\r\n                                                handlePageChange={this.handlePageChange}\r\n                                                filterParam={filterSampleParam}\r\n                                                skip={this.state.skip}\r\n                                                take={this.state.take}\r\n                                                hidePaging={false}\r\n                                                showStatusLink={true}\r\n                                                showStatusName={true}\r\n                                                statusFieldName=\"stransdisplaystatus\"\r\n                                                statusField=\"ntransactionstatus\"\r\n                                                selectionFieldName=\"sfilterstatus\"\r\n                                                //splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                                childTabsKey={[\"RegistrationAttachment\", \"RE_SUBSAMPLE\", \"RE_TEST\", \"SampleApprovalHistory\",\"RegistrationComment\"]}\r\n                                                selectionList={this.state.selectedFilter}\r\n                                                selectionColorField=\"scolorhexcode\"\r\n                                                selectionField=\"ntransactionstatus\"\r\n                                                jsonField={'jsondata'}\r\n                                                jsonDesignFields={true}\r\n                                                filterComponent={[\r\n                                                    {\r\n                                                        \"Sample Filter\": <ResultEntryFilter\r\n                                                            fromDate={this.props.Login.masterData.fromDate ? //new Date(this.props.Login.masterData.fromDate) \r\n                                                                rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate)\r\n                                                                : new Date()}\r\n                                                            toDate={this.props.Login.masterData.toDate ? //new Date(this.props.Login.masterData.toDate) \r\n                                                                rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate)\r\n                                                                : new Date()}\r\n                                                            SampleType={this.state.SampleType || []}\r\n                                                            SampleTypeValue={this.props.Login.masterData.defaultSampleType || []}\r\n                                                            RegType={this.state.RegistrationType || []}\r\n                                                            RegTypeValue={this.props.Login.masterData.defaultRegistrationType || []}\r\n                                                            RegSubType={this.state.RegistrationSubType || []}\r\n                                                            RegSubTypeValue={this.props.Login.masterData.defaultRegistrationSubType || []}\r\n                                                            DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || []}\r\n                                                            FilterStatus={this.state.REFilterStatus || []}\r\n                                                            FilterStatusValue={this.props.Login.masterData.defaultFilterStatus || []}\r\n                                                            ApprovalVersion={this.state.ApprovalConfigVersion || []}\r\n                                                            ApprovalVersionValue={this.props.Login.masterData.defaultApprovalConfigVersion || []}\r\n                                                            REJobStatus={this.state.REJobStatus || []}\r\n                                                            JobStatusValue={this.props.Login.masterData.defaultjobstatus || []}\r\n                                                            Test={this.state.Testvalues || []}\r\n                                                            TestValue={this.props.Login.masterData.defaultTestvalues || []}\r\n                                                            onFilterComboChange={this.onFilterComboChange}\r\n                                                            handleDateChange={this.handleDateChange}\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                            onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                                            DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                                        />\r\n                                                    }\r\n                                                ]}\r\n                                                actionIcons={\r\n                                                    [this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ?\r\n                                                        {\r\n                                                            title: \"Report\",\r\n                                                            controlname: \"reports\",\r\n                                                            objectName: \"sample\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\r\n                                                            onClick: this.props.previewSampleReport,\r\n                                                            inputData: {\r\n                                                                userinfo: this.props.Login.userInfo,\r\n                                                                ncontrolcode: reportPreviewId\r\n                                                            },\r\n                                                        } : {}\r\n                                                    ]\r\n                                                }\r\n                                                commonActions={\r\n                                                    <>\r\n                                                        <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                            <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                                onClick={() => this.onReload()}\r\n                                                                data-for=\"tooltip-common-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                                <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                            </Button>\r\n                                                        </ProductList>\r\n                                                    </>\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                        <div>\r\n                                            <div style={this.state.showTest === true ? { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                {mainDesign}\r\n                                            </div>\r\n                                           \r\n                                        </div>\r\n                                    </SplitterLayout>\r\n                                </div>\r\n\r\n                                <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`} >\r\n                                    <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`} style={{ width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\" }}>\r\n                                        <span className={` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`} onClick={() => this.changePropertyViewClose(false)}><FontAwesomeIcon icon={faChevronRight} /> </span>\r\n                                        <div className={` vertical-tab-content-common sm-view-v-t  ${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`}>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 1 ? this.sideNavDetail(\"IDS_RESULTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid  ${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`}>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 2 ? this.sideNavDetail(\"IDS_ATTACHMENTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid-tab  ${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`}>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 3 ? this.sideNavDetail(\"IDS_COMMENTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid  ${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_INSTRUMENT\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 4 ? this.sideNavDetail(\"IDS_INSTRUMENT\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments  ${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_MATERIAL\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 5 ? this.sideNavDetail(\"IDS_MATERIAL\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments  ${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_TASK\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 6 ? this.sideNavDetail(\"IDS_TASK\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments  ${this.state.activeTabIndex && this.state.activeTabIndex == 7 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_TESTAPPROVALHISTORY\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 7 ? this.sideNavDetail(\"IDS_TESTAPPROVALHISTORY\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments  ${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 8 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\"}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className='tab-head'>\r\n                                        <ul>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(1,\"IDS_RESULTS\")}>\r\n                                                <FontAwesomeIcon icon={faFileInvoice}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_RESULT\" })} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_RESULT\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(2,\"IDS_ATTACHMENTS\")}>\r\n                                                <FontAwesomeIcon icon={faLink} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_ATTACHMENTS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(3,\"IDS_COMMENTS\")}>\r\n                                                <FontAwesomeIcon icon={faComments} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(4,\"IDS_INSTRUMENT\")}>\r\n                                                <FontAwesomeIcon icon={faMicroscope} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_INSTRUMENT\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(5,\"IDS_MATERIAL\")}>\r\n                                                <FontAwesomeIcon icon={faFlask} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_MATERIAL\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(6,\"IDS_TASK\")}>\r\n                                                <FontAwesomeIcon icon={faCommentDots} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_TASK\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            {/* <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 7 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(7)}>\r\n                                                <FontAwesomeIcon icon={faHistory} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_TESTAPPROVALHISTORY\" })}\r\n                                                </span>\r\n                                            </li> */}\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(8,\"IDS_SAMPLEDETAILS\")}>\r\n                                                <FontAwesomeIcon icon={faEye} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                        </ul>\r\n                                        <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                label={\"Auto Show\"}\r\n                                                type=\"switch\"\r\n                                                name={\"Auto Click\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enableAutoClick}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enableAutoClick}\r\n                                            />\r\n                                        </span>\r\n                                        {/* <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                label={\"Popup Nav\"}\r\n                                                type=\"switch\"\r\n                                                name={\"PopupNav\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enablePropertyPopup}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enablePropertyPopup}\r\n                                            />\r\n                                        </span> */}\r\n                                    </div>\r\n                                </div>\r\n                            </ListWrapper >\r\n                            {/* </PerfectScrollbar> */}\r\n                        </Col >\r\n                    </Row >\r\n                </ListWrapper >\r\n                {/* </PerfectScrollbar> */}\r\n                < SlideOutModal\r\n                    show={this.props.Login.openModal}\r\n                    size={this.props.Login.screenName === 'IDS_MEANPARAMETER' ? \"xl\" : \"lg\"}\r\n                    closeModal={this.closeModal}\r\n                    operation={\r\n                        this.props.Login.screenName === 'IDS_RESULTENTRY' ? \"\"\r\n                            : this.props.Login.operation\r\n                    }\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    selectedRecord={\r\n                        this.props.Login.screenName === 'IDS_RESULTFORMULA' ?\r\n                            this.state.selectedRecord.selectedMandatory : this.state.selectedRecord || {}\r\n                    }\r\n                    mandatoryFields={\r\n                        this.props.Login.screenName === 'IDS_INSTRUMENT' ? mandatoryFieldsInstrument :\r\n                            this.props.Login.screenName === 'IDS_TASK' ? mandatoryFieldsTask :\r\n                                this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? mandatoryFieldsTestMethodSource :\r\n                                    this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? mandatoryFieldsParameter :\r\n                                        this.props.Login.screenName === 'IDS_RESULTFORMULA' ? validateFormulaMandyFields : []\r\n                    }\r\n                    esign={this.props.Login.loadEsign}\r\n                    innerPopup={this.props.Login.screenName}\r\n                    validateEsign={this.validateEsign}\r\n                    onSaveClick={\r\n                        this.props.Login.showValidate ? this.calculateFormula\r\n                            : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? this.onSaveFileClick : this.onSaveClick\r\n                    }\r\n                    showValidate={this.props.Login.showValidate}\r\n                    modalEvent={this.state.modalEvent}\r\n                    addComponent={\r\n                        this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            this.props.Login.screenName === 'IDS_RESULTENTRY' ?\r\n                                <ResultEntryForm\r\n                                    predefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                    defaultPredefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                    gradeValues={this.props.Login.masterData.GradeValues || []}\r\n                                    selectedNumericData={this.props.Login.masterData.selectedNumericData}\r\n                                    selectedResultGrade={this.state.selectedRecord.selectedResultGrade || []}\r\n                                    paremterResultcode={this.props.Login.masterData.paremterResultcode || []}\r\n                                    parameterResults={this.state.selectedRecord.ResultParameter || []}\r\n                                    Login={this.props.Login}\r\n                                    handleClose={this.handleClose}\r\n                                    onSaveClick={this.onSaveClick}\r\n                                    onResultInputChange={this.onResultInputChange}\r\n                                    onGradeEvent={this.onGradeEvent}\r\n                                    getFormula={this.getFormula}\r\n                                    onDropTestFile={this.onDropTestFile}\r\n                                    onKeyPress={this.onKeyPress}\r\n                                    needSubSample={this.props.Login.masterData.nneedsubsample}\r\n                                /> :\r\n                                this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ?\r\n                                    <TestEditForm\r\n                                        methodValues={this.props.Login.masterData.MethodData}\r\n                                        sourceValues={this.props.Login.masterData.SourceData}\r\n                                        selecteRecord={this.state.selectedRecord || {}}\r\n                                        onComboChange={this.onComboChange}\r\n                                        handleClose={this.handleClose}\r\n                                        onSaveClick={this.onSaveClick}\r\n                                    /> :\r\n                                    this.props.Login.screenName === 'IDS_INSTRUMENT' ?\r\n                                        <ResultEntryInstrumentForm\r\n                                            instrumentcatValue={this.props.Login.masterData.InstrumentCategory}\r\n                                            instrumentValue={this.props.Login.masterData.Instrument}\r\n                                            selecteRecord={this.state.selectedRecord || {}}\r\n                                            timeZoneListData={this.props.Login.timeZoneList || []}\r\n                                            onComboChange={this.onComboChange}\r\n                                            onComboCategoryChange={this.onComboCategoryChange}\r\n                                            onDateChange={this.onDateChange}\r\n                                            handleClose={this.handleClose}\r\n                                            onSaveClick={this.onSaveClick}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            needSubSample={this.props.Login.masterData.nneedsubsample}\r\n                                        /> :\r\n                                        this.props.Login.screenName === 'IDS_MATERIAL' ?\r\n                                            <ResultEntryMaterialForm\r\n                                                materialType={this.props.Login.materialType}\r\n                                                materialCategory={this.props.Login.materialCat}\r\n                                                material={this.props.Login.material}\r\n                                                materialInventory={this.props.Login.materialInventory}\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                onMaterialComboChange={this.onMaterialComboChange}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                onDateChange={this.onDateChange}\r\n                                                handleClose={this.handleClose}\r\n                                                onSaveClick={this.onSaveClick}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                needSubSample={this.props.Login.masterData.nneedsubsample}\r\n                                            /> :\r\n                                            this.props.Login.screenName === 'IDS_TASK' ?\r\n                                                <ResultEntryTaskForm\r\n                                                    selecteRecord={this.state.selectedRecord || {}}\r\n                                                    onNumericChange={this.onNumericChange}\r\n                                                    onInputChange={this.onInputChange}\r\n                                                    handleClose={this.handleClose}\r\n                                                    onSaveClick={this.onSaveClick}\r\n                                                /> :\r\n                                                this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ?\r\n                                                    <ResultEntryParamCommetsForm\r\n                                                        selecteRecord={this.state.selectedRecord || {}}\r\n                                                        onInputChange={this.onInputChange}\r\n                                                        handleClose={this.handleClose}\r\n                                                        onSaveClick={this.onSaveClick}\r\n                                                    /> : this.props.Login.screenName === 'IDS_RESULTFORMULA' ?\r\n                                                        <ResultEntryFormulaForm\r\n                                                            DynamicFields={this.props.Login.masterData.DynamicFormulaFields}\r\n                                                            // formRef={this.formRef}\r\n                                                            handleClose={this.handleClose}\r\n                                                            screenName={this.props.Login.screenName}\r\n                                                            selectedForumulaInput={this.state.selectedForumulaInput || []}\r\n                                                            onFormulaInputChange={this.onFormulaInputChange}\r\n                                                            Login={this.props.Login}\r\n                                                            showValidate={this.props.Login.showValidate}\r\n                                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                                        />\r\n                                                        : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ?\r\n                                                            <ResultEntryImport\r\n                                                                handleClose={this.handleClose}\r\n                                                                screenName={this.props.Login.screenName}\r\n                                                                onDropFile={this.onDropFile}\r\n                                                                selectedImportFile={this.props.Login.masterData.selectedImportFile || {}}\r\n                                                                deleteAttachment={this.deleteAttachment}\r\n                                                            /> :\r\n                                                            this.props.Login.screenName === 'IDS_MEANPARAMETER' ?\r\n                                                                <ResultEntryMean\r\n                                                                    // onInputOnChange={this.onMeanInputOnChange}\r\n                                                                    // onComboChange={this.onMeanComboChange}\r\n                                                                    screenName={this.props.Login.screenName}\r\n                                                                    headerSelectionChange={this.headerSelectionChange}\r\n                                                                    selectionChange={this.selectionChange}\r\n                                                                    selectAll={this.state.selectAll}\r\n                                                                    testMean={this.state.testMean}\r\n                                                                    meanTestParameterList={this.state.meanTestParameterList || []}\r\n                                                                    selectedTestParam={this.state.selectedTestParam}\r\n                                                                /> : \"\"\r\n                    }\r\n                />\r\n                {\r\n                    this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ?\r\n                        <TemplateForm\r\n                            templateData={this.props.Login.masterData.ChecklistData}\r\n                            nregtypecode={parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode)}\r\n                            nregsubtypecode={parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode)}\r\n                            needSaveButton={this.props.Login.needSaveButton}\r\n                            formRef={this.formRef}\r\n                            onTemplateInputChange={this.onTemplateInputChange}\r\n                            handleClose={this.closeModal}\r\n                            onTemplateComboChange={this.onTemplateComboChange}\r\n                            screenName={this.props.Login.screenName}\r\n                            onSaveClick={this.onSaveCheckList}\r\n                            Login={this.props.Login}\r\n                            viewScreen={this.props.Login.openTemplateModal}\r\n                            selectedRecord={this.state.selectedRecord || []}\r\n                            onTemplateDateChange={this.onTemplateDateChange}\r\n                            needValidation={true}\r\n                        /> : \"\"\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    defaultActions = (testChildGetREParam, RESelectedTest, RESelectedSample, setDefaultId, testskip, testtake) => {\r\n        const nregtypecode = this.props.Login.masterData.realRegTypeValue.nregtypecode;\r\n        const nregsubtypecode = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode&&this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"completeTest\",\r\n                inputData: { 'userinfo': this.props.Login.userInfo, 'nregtypecode': nregtypecode, 'nregsubtypecode': nregsubtypecode, 'ncontrolcode': setDefaultId },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"default\",\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: { ...testChildGetREParam, ncontrolcode: setDefaultId },\r\n                RESelectedTest: acceptTestList,\r\n                RESelectedSample: RESelectedSample\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, setDefaultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"defaultaction\",\r\n                        operation: \"default\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.defaultTest(inputParam.testChildGetREParam, acceptTestList, RESelectedSample, nregtypecode, nregsubtypecode,ndesigntemplatemappingcode)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTTEST\" }));\r\n        }\r\n\r\n    }\r\n\r\n    completeActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"completeTest\",\r\n                inputData: { 'userinfo': this.props.Login.userInfo, 'ncontrolcode': completeResultId },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"complete\",\r\n                postParamList: this.postParamList,\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: testChildGetREParam,\r\n                RESelectedTest: acceptTestList,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"complete\",\r\n                        operation: \"complete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.completeTest(inputParam, acceptTestList, userInfo, completeResultId)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCOMPLETE\" }));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    testStartActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"completeTest\",\r\n                inputData: { 'userinfo': this.props.Login.userInfo, 'ncontrolcode': completeResultId },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"complete\",\r\n                postParamList: this.postParamList,\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: testChildGetREParam,\r\n                RESelectedTest: acceptTestList,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"complete\",\r\n                        operation: \"complete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.testStart(inputParam, acceptTestList, userInfo, completeResultId)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCOMPLETE\" }));\r\n        }\r\n    }\r\n\r\n    onSaveCheckList = (selectedRecord, userInfo, nregtypecode, nregsubtypecode) => {\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode&&this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            let inputParam = {\r\n                \"inputData\": { userinfo: userInfo }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { selectedRecord, userInfo, nregtypecode, nregsubtypecode, inputParam, operation: \"updatechecklist\" },\r\n                    openModal: true,\r\n                    operation: \"updatechecklist\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode,ndesigntemplatemappingcode)\r\n        }\r\n\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        if (this.props.Login.operation === 'complete' || this.props.Login.operation === 'default' || this.props.Login.operation === \"updatechecklist\" ||\r\n            this.props.Login.operation === 'deleteInstrument' || this.props.Login.operation === 'createMethod' || this.props.Login.operation === 'deleteTask' || this.props.Login.operation === 'updateParameterComments') {\r\n            this.props.validateEsignCredentialComplete(inputParam, \"openModal\");\r\n        }\r\n\r\n        else {\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n    onSaveFileClick = (saveType, formRef) => {\r\n        const selectedImportFile = this.props.Login.masterData.selectedImportFile;\r\n        const acceptedFile = selectedImportFile ? selectedImportFile.sfilename : [];\r\n        const formData = new FormData();\r\n\r\n        // if(nattachmenttypecode === attachmentType.FTP) {\r\n        if (acceptedFile && acceptedFile.length > 0) {\r\n            acceptedFile.forEach((file, index) => {\r\n                formData.append(\"uploadedFile\" + index, file);\r\n            });\r\n            formData.append(\"filecount\", acceptedFile.length);\r\n        } else {\r\n            return toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEFILETOSUBMIT\" }))\r\n        }\r\n\r\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.realRegTypeValue.nregtypecode));\r\n        formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode));\r\n        formData.append(\"stransactiontestcode\", JSON.stringify(this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"));\r\n        this.props.resultImportFile(formData, this.props.Login.masterData);\r\n    }\r\n\r\n    onDropFile = (acceptedFile) => {\r\n        // let selectedImportFile = this.props.Login.masterData.selectedImportFile || [];\r\n        // selectedImportFile['sfilename'] = acceptedFile;\r\n        this.props.Login.masterData.selectedImportFile['sfilename'] = acceptedFile\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData: this.props.Login.masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        // this.setState({selectedImportFile});\r\n    }\r\n\r\n    onFormulaInputChange = (event, index, fields) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        let selectedForumulaInput = this.state.selectedRecord.selectedForumulaInput || [];\r\n        let selectedMandatory = this.state.selectedRecord.selectedMandatory || [];\r\n        let dynamicformulafields = {};\r\n\r\n        if (event) {\r\n            if (fields.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER) {\r\n                const value = event.target.value.replace(/[^-^0-9]/g, '');\r\n                if (/^-?\\d*?$/.test(value) || value === \"\") {\r\n                    if (this.state.selectedRecord.formulainput) {\r\n                        dynamicformulafields.svalues = value;\r\n                        dynamicformulafields.sparameter = fields.sdescription;\r\n                        selectedForumulaInput[index] = dynamicformulafields;\r\n                        selectedMandatory[index] = event.target.value;\r\n                    }\r\n                }\r\n                selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\r\n                selectedRecord[\"selectedMandatory\"] = selectedMandatory;\r\n\r\n                this.setState({ selectedRecord: selectedRecord });\r\n            } else {\r\n                const value = event.target.value.replace(/[^-^0-9.]/g, '');\r\n                if (/^-?\\d*?\\.?\\d*?$/.test(value) || value === \"\") {\r\n                    if (this.state.selectedRecord.formulainput) {\r\n                        dynamicformulafields.svalues = value;\r\n                        dynamicformulafields.sparameter = fields.sdescription;\r\n                        selectedForumulaInput[index] = dynamicformulafields;\r\n                        selectedMandatory[index] = event.target.value;\r\n                    }\r\n                }\r\n                // else {\r\n                //     dynamicformulafields.svalues = selectedForumulaInput.length > 0 ? selectedForumulaInput[index].svalues : \"\";\r\n                //     selectedForumulaInput[index].svalues = selectedForumulaInput.length > 0 ? selectedForumulaInput[index].svalues : \"\";\r\n\r\n                // }\r\n                selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\r\n                selectedRecord[\"selectedMandatory\"] = selectedMandatory;\r\n\r\n                this.setState({ selectedRecord: selectedRecord });\r\n            }\r\n        }\r\n    }\r\n\r\n    onTemplateInputChange = (event, control) => {\r\n        let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control)\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n    onTemplateComboChange = (comboData, control) => {\r\n        let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control)\r\n        this.setState({ selectedRecord });\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n    onTemplateDateChange = (dateData, control) => {\r\n        let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control)\r\n        //this.setState({selectedRecord});\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputChange = (Data, name) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (Data) {\r\n            selectedRecord[name] = Data.target.value;\r\n            //this.setState({selectedRecord});\r\n        }\r\n        else {\r\n            selectedRecord[name] = [];\r\n            //this.setState({selectedRecord});\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onNumericChange = (numericData, numericName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (numericData) {\r\n            if (numericName !== \"scomments\") {\r\n                selectedRecord[numericName] = numericData;\r\n                //this.setState({selectedRecord});\r\n            } else {\r\n                selectedRecord[numericName] = numericData.target.value;\r\n                //this.setState({selectedRecord});\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[numericName] = \"\";\r\n            //this.setState({selectedRecord});\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onDateChange = (dateName, dateValue) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        selectedRecord[dateName] = dateValue;\r\n        if (dateName === \"dfromdate\" || dateName === \"dtodate\") {\r\n            this.setState({ selectedRecord });\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { selectedRecord: selectedRecord }\r\n            // }\r\n            //this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    headerSelectionChange = (event) => {\r\n        const checked = event.syntheticEvent.target.checked;\r\n        let meanTestParameterList = this.state.meanTestParameterList || [];\r\n        let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\r\n        if (checked) {\r\n            const data = meanTestParameterList.map(item => {\r\n                item.selected = checked;\r\n                selectedMeanTestParam.set(item.ntransactionresultcode, item.sresult);\r\n                return item;\r\n            });\r\n\r\n            let selectedTestParam = \"\";\r\n            let selectedTestParamMean = 0;\r\n            let size = 0;\r\n            if (selectedMeanTestParam.size > 0) {\r\n                [...selectedMeanTestParam.values()].forEach(item => (\r\n                    item !== null && item !== \"\" ?\r\n                        (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item,\r\n                            size = size + 1,\r\n                            selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\"\r\n                ));\r\n                selectedTestParamMean = selectedTestParamMean / size;\r\n            }\r\n\r\n            this.setState({\r\n                meanTestParameterList: data, selectedMeanTestParam, selectedTestParam,\r\n                testMean: selectedTestParamMean,\r\n                selectAll: checked\r\n            });\r\n        }\r\n        else {\r\n            const data = meanTestParameterList.map(item => {\r\n                item.selected = checked;\r\n                return item;\r\n            });\r\n\r\n            this.setState({\r\n                meanTestParameterList: data, selectedMeanTestParam: new Map(),\r\n                selectedTestParam: \"\",\r\n                testMean: \"\",\r\n                selectAll: checked\r\n            });\r\n        }\r\n    }\r\n\r\n    selectionChange = (event) => {\r\n        let meanTestParameterList = this.state.meanTestParameterList || [];\r\n        let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\r\n        meanTestParameterList.map(item => {\r\n            if (item.ntransactionresultcode === event.dataItem.ntransactionresultcode) {\r\n                item.selected = !event.dataItem.selected;\r\n            }\r\n            return item;\r\n        });\r\n        if (event.dataItem.selected) {\r\n            selectedMeanTestParam.set(event.dataItem.ntransactionresultcode, event.dataItem.sresult);\r\n        }\r\n        else {\r\n            if (selectedMeanTestParam.has(event.dataItem.ntransactionresultcode)) {\r\n                selectedMeanTestParam.delete(event.dataItem.ntransactionresultcode)\r\n            }\r\n        }\r\n        let selectedTestParam = \"\";\r\n        let selectedTestParamMean = 0;\r\n        let size = 0;\r\n        if (selectedMeanTestParam.size > 0) {\r\n            [...selectedMeanTestParam.values()].forEach(item => (\r\n                item !== null && item !== \"\" ?\r\n                    (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item,\r\n                        size = size + 1,\r\n                        selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\"\r\n            ));\r\n            selectedTestParamMean = selectedTestParamMean / size;\r\n        }\r\n\r\n        this.setState({\r\n            meanTestParameterList, selectedMeanTestParam, selectedTestParam, testMean: selectedTestParamMean,\r\n            selectAll: this.valiateCheckAll(meanTestParameterList)\r\n        });\r\n    }\r\n\r\n    valiateCheckAll(data) {\r\n        let selectAll = true;\r\n        if (data && data.length > 0) {\r\n            data.forEach(dataItem => {\r\n                if (dataItem.selected) {\r\n                    if (dataItem.selected === false) {\r\n                        selectAll = false;\r\n                    }\r\n                }\r\n                else {\r\n                    selectAll = false;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            selectAll = false;\r\n        }\r\n        return selectAll;\r\n    }\r\n\r\n    onMeanComboChange = (comboData, comboName) => {\r\n        const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\r\n        selectedMeanTestParam[comboName] = comboData[0];\r\n        let data = \"\";\r\n        if (selectedMeanTestParam[\"parametervalue\"] === undefined) {\r\n            data = comboData[0].value;\r\n        }\r\n        else {\r\n            data = selectedMeanTestParam[\"parametervalue\"] + \"+\" + comboData[0].value;\r\n        }\r\n        selectedMeanTestParam[\"parametervalue\"] = data;\r\n        this.setState({ selectedMeanTestParam });\r\n    }\r\n\r\n    // onMeanInputOnChange = (event) => {\r\n    //     const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\r\n    //     selectedMeanTestParam[event.target.name] = selectedMeanTestParam[event.target.name] + \"+\" + event.target.value;\r\n    //     this.setState({selectedMeanTestParam});\r\n    // }\r\n    onMaterialComboChange = (comboData, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n            //this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n            //this.setState({ selectedRecord });\r\n        }\r\n        switch (comboName) {\r\n            case 'nmaterialtypecode':\r\n                this.props.getREMaterialCategoryByType({ selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            case 'nmaterialcatcode':\r\n                selectedRecord['nsectioncode'] = this.props.Login.masterData.RESelectedTest[0].nsectioncode;\r\n                this.props.getREMaterialByCategory({ selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            case 'nmaterialcode':\r\n                this.props.getREMaterialInvertoryByMaterial({ selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            default:\r\n                this.props.getAvailableMaterialQuantity({ selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n\r\n        }\r\n    }\r\n    onComboChange = (comboData, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n            //this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n            //this.setState({ selectedRecord });\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onGradeEvent = (ResultParameter, index, parameter) => {\r\n        if (ResultParameter.length > 0 && ResultParameter[index] !== undefined && ResultParameter[index].sresult !== null) {\r\n            let selectedRecord = this.state.selectedRecord || [];\r\n            let selectedResultGrade = this.state.selectedRecord.selectedResultGrade || [];\r\n            if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n                selectedResultGrade[index] = {\r\n                    ngradecode: ResultParameter[index].sresult !== \"\" ?\r\n                        numericGrade(parameter, numberConversion(parseFloat(ResultParameter[index].sresult), parseInt(parameter.nroundingdigits))) : -1\r\n                };\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n                if (ResultParameter[index].sresult !== null) {\r\n                    selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: 0 };\r\n                }\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n                if (ResultParameter[index].sresult !== null) {\r\n                    //selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\r\n                    selectedResultGrade[index] = { ngradecode: 4 };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: 4 };\r\n                }\r\n            }\r\n            //this.props.Login.masterData[\"selectedResultGrade\"] = selectedResultGrade;\r\n            selectedRecord.selectedResultGrade = selectedResultGrade;\r\n\r\n            this.setState({\r\n                selectedRecord\r\n            });\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { masterData: this.props.Login.masterData }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let { testskip, testtake } = this.state\r\n        let testList = [...this.props.Login.masterData.RE_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, selectedTestList);\r\n        }\r\n         if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\r\n                let sampleList = [];\r\n                if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n                    sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake), \"npreregno\");\r\n                } else {\r\n                    sampleList = this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake);\r\n                }\r\n                let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n                // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n                let saveParam = {\r\n                    userInfo: this.props.Login.userInfo,\r\n                    isTestComment: this.props.isTestComment,\r\n                    selectedRecord,\r\n                    masterData: this.props.Login.masterData,\r\n                    saveType, formRef,\r\n                    operation: this.props.Login.operation,\r\n                    ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n                }\r\n                inputParam = onSaveSubSampleComments(saveParam, acceptList);\r\n            }\r\n\r\n        if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n\r\n\r\n        if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subSampleTake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        }\r\n    }\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let { testskip, testtake, skip, take } = this.state\r\n        let testList = [...this.props.Login.masterData.RE_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let sampleList = [...this.props.Login.masterData.RE_SAMPLE];\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestAttachment(saveParam, selectedTestList);\r\n        }\r\n\r\n        else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.RESelectedSubSample);\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n        }\r\n    }\r\n\r\n    onKeyPress = (event, index, paremterResultcode) => {\r\n        if (event.keyCode === 13) {\r\n            for (let i = 0; i < event.target.form.elements.length; i++) {\r\n                if (parseInt(event.target.form.elements[i].id) === paremterResultcode[index + 1]) {\r\n                    event.target.form.elements[i].focus();\r\n                    break;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n\r\n    onResultInputChange = (event, index, parameter) => {\r\n        //let ResultParameter = this.props.Login.masterData.ResultParameter ? this.props.Login.masterData.ResultParameter : [];\r\n        let selectedRecord = this.state.selectedRecord || [];\r\n        let ResultParameter = this.state.selectedRecord.ResultParameter ? this.state.selectedRecord.ResultParameter : [];\r\n        let sresult = \"\";\r\n        let value = -1;\r\n        let acceptedFile = [];\r\n        let ncalculatedresult;\r\n\r\n        if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n            if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\r\n                sresult = event.target.value;\r\n                ncalculatedresult = 4\r\n            } else {\r\n                sresult = ResultParameter[index]['sresult'] === null ? \"\" : ResultParameter[index]['sresult'];\r\n                ncalculatedresult = ResultParameter[index]['ncalculatedresult'];\r\n            }\r\n        }\r\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n            if (event != null) {\r\n                sresult = event.item.spredefinedname;\r\n                value = event.item.ngradecode;\r\n                ncalculatedresult = 4\r\n            }\r\n            else {\r\n                sresult = \"\";\r\n                value = -1;\r\n                ncalculatedresult = 4\r\n            }\r\n        }\r\n        if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n            sresult = event.target.value;\r\n            ncalculatedresult = 4\r\n        }\r\n        if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\r\n            sresult = event[0].name;\r\n            acceptedFile = event;\r\n            ncalculatedresult = 4\r\n        }\r\n        ResultParameter[index]['sresult'] = sresult\r\n        ResultParameter[index]['sfinal'] = sresult\r\n        ResultParameter[index]['acceptedFile'] = acceptedFile\r\n        ResultParameter[index]['editable'] = true\r\n        ResultParameter[index]['ngradecode'] = value\r\n        ResultParameter[index]['ncalculatedresult'] = ncalculatedresult\r\n\r\n        // this.props.Login.masterData.ResultParameter = ResultParameter;\r\n        selectedRecord.ResultParameter = ResultParameter\r\n        this.setState({\r\n            selectedRecord: selectedRecord\r\n        });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { masterData: this.props.Login.masterData }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    updateTestMethodSource(inputData, masterData, ncontrolcode) {\r\n        let inputParam = {\r\n\r\n            inputData: { ...inputData, 'userinfo': this.props.Login.userInfo, ncontrolcode },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"createMethod\",\r\n            screenName: \"IDS_TESTMETHODSOURCE\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //inputData1: inputData,\r\n            masterData: masterData\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    //screenName: \"completeaction\",\r\n                    operation: \"createMethod\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateTestMethodSource(inputData, masterData)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    updateParameterComments(inputData, masterData, ncontrolcode) {\r\n        // let inputData1 = { ...inputData, ncontrolcode }\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode&&this.props.Login.masterData.ndesigntemplatemappingcode);\r\n        inputData={...inputData,ndesigntemplatemappingcode:ndesigntemplatemappingcode}\r\n        let inputParam = {\r\n            inputData: { ...inputData, ncontrolcode, 'userinfo': this.props.Login.userInfo },\r\n            operation: this.props.Login.operation,\r\n            screenName: \"IDS_RESULT\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //inputData: inputData1,\r\n            masterData: masterData\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    //screenName: \"completeaction\",\r\n                    operation: \"updateParameterComments\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateParameterComments(inputData, masterData)\r\n        }\r\n    }\r\n\r\n    onSaveMean = (saveType) => {\r\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n\r\n        let resultParameter = this.props.Login.selectedTestParameterMean || {};\r\n        //let resultParameter = { };\r\n\r\n        resultParameter[\"ncalculatedresult\"] = 4;\r\n        resultParameter[\"sresult\"] = this.state.testMean;\r\n        resultParameter[\"sfinal\"] = numberConversion(parseFloat(this.state.testMean), parseInt(resultParameter.nroundingdigit));\r\n\r\n        resultParameter[\"ngradecode\"] = numericGrade(resultParameter, parseInt(this.state.testMean));\r\n        resultParameter['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n        resultParameter['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n        // resultParameter['ntransactionresultcode'] = meanParameter.ntransactionresultcode;\r\n        // resultParameter['ntransactiontestcode'] = meanParameter.ntransactiontestcode;\r\n        // resultParameter['nparametertypecode'] = meanParameter.nparametertypecode;\r\n        //console.log(\"result:\", resultParameter);\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"filecount\", 0);\r\n        formData.append(\"nregtypecode\", nregtypecode);\r\n        formData.append(\"nregsubtypecode\", nregsubtypecode);\r\n        formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\r\n        formData.append(\"transactiontestcode\", resultParameter.ntransactiontestcode);\r\n        //formData.append(\"resultData\", JSON.stringify([resultParameter]));\r\n        formData.append(\"resultData\", resultParameter);\r\n\r\n        const inputParam = {\r\n            classUrl: \"resultentrybysample\",\r\n            methodUrl: \"TestParameterResult\",\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: \"update\",\r\n            displayName: this.props.Login.inputParam.displayName, saveType\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onSaveClick = (saveType) => {\r\n        if (this.props.Login.screenName === \"IDS_MEANPARAMETER\") {\r\n            this.onSaveMean(saveType);\r\n        }\r\n        else {\r\n            let ResultParameter = this.state.selectedRecord.ResultParameter || [];\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            let selectedId = this.props.Login.selectedId || null;\r\n            const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n            const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n            const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode&&this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n            const classUrl = \"resultentrybysample\";\r\n            const formData = new FormData();\r\n            let neditable = 0;\r\n            let resultParameters = [];\r\n            let inputParam = {};\r\n            let inputData = [];\r\n            let i = 0;\r\n            //const postParam = {inputListName: \"RESelectedTest\", selectedObject: \"RESelectedTest\", primaryKeyField: \"ntransactionstestcode\" };\r\n            if (this.props.Login.screenName === \"IDS_RESULTENTRY\") {\r\n                if (ResultParameter.length > 0 && ResultParameter !== undefined) {\r\n                    ResultParameter.map((resultData, index) => {\r\n                        let results = {};\r\n                        if (resultData.editable === true) {\r\n                            neditable = 1;\r\n                            switch (resultData.nparametertypecode) {\r\n                                case 1:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: resultData[\"ncalculatedresult\"],\r\n                                        sresult: resultData.sresult,\r\n                                        sfinal: resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\"\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"sfinal\"] = resultData.sresult !== \"\" ?\r\n                                        numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\r\n                                    results[\"ngradecode\"] = resultData.sresult !== \"\" ?\r\n                                        numericGrade(resultData, results[\"sfinal\"]) : -1;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 2:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: 4,\r\n                                        sresult: resultData.sresult,\r\n                                        sfinal: resultData.sresult\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"ncalculatedresult\"] = 4;\r\n                                    results[\"sfinal\"] = resultData.sresult;\r\n                                    results[\"ngradecode\"] = resultData.ngradecode;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 3:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: 4,\r\n                                        sresult: resultData.sresult,\r\n                                        sfinal: resultData.sresult\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"ncalculatedresult\"] = 4;\r\n                                    results[\"sfinal\"] = resultData.sresult;\r\n                                    results[\"ngradecode\"] = grade.FIO;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 4:\r\n                                    if (resultData.acceptedFile !== undefined) {\r\n                                        const splittedFileName = resultData.acceptedFile ? resultData.acceptedFile[0].name.split('.') : \"\";\r\n                                        const fileExtension = resultData.acceptedFile ? resultData.acceptedFile[0].name.split('.')[splittedFileName.length - 1] : \"\";\r\n                                        const uniquefilename = create_UUID() + '.' + fileExtension;\r\n                                        results[\"jsondata\"] = {\r\n                                            ssystemfilename: uniquefilename,\r\n                                            nfilesize: resultData.acceptedFile[0].size,\r\n                                            ncalculatedresult: 4,\r\n                                            sresult: resultData.sresult,\r\n                                            sfinal: resultData.sresult\r\n                                        }\r\n                                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                        results[\"ncalculatedresult\"] = 4;\r\n                                        results[\"sresult\"] = resultData.sresult;\r\n                                        results[\"sfinal\"] = resultData.sresult;\r\n                                        results[\"ngradecode\"] = grade.FIO;\r\n                                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\r\n                                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\r\n                                        results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\r\n                                        results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\r\n                                        results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                        results[\"ssystemfilename\"] = uniquefilename;\r\n                                        results[\"nfilesize\"] = resultData.acceptedFile[0].size;\r\n                                        formData.append(\"uploadedFile\" + index, resultData.acceptedFile[0]);\r\n                                        formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                                        formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\r\n                                        i++;\r\n                                    }\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            if (Object.values(results).length > 0) {\r\n                                resultParameters.push(results);\r\n                            }\r\n                        }\r\n                        return null;\r\n                    });\r\n\r\n                    if (neditable === 0) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: { loading: false, openModal: false }\r\n                        }\r\n                        return this.props.updateStore(updateInfo);\r\n                    }\r\n\r\n                    formData.append(\"filecount\", i);\r\n                    formData.append(\"nregtypecode\", nregtypecode);\r\n                    formData.append(\"nregsubtypecode\", nregsubtypecode);\r\n                    formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\r\n                    formData.append(\"ndesigntemplatemappingcode\", ndesigntemplatemappingcode);\r\n\r\n                    formData.append(\"resultData\", JSON.stringify(resultParameters));\r\n                    const tests = this.props.Login.masterData.RESelectedTest ?\r\n                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                    formData.append(\"transactiontestcode\", tests);\r\n                    //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"TestParameterResult\",\r\n                        inputData: { userinfo: this.props.Login.userInfo },\r\n                        formData: formData,\r\n                        isFileupload: true,\r\n                        operation: \"update\",\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//, postParam\r\n                    }\r\n                }\r\n                else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { loading: false, openModal: false }\r\n                    }\r\n                    return this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n\r\n            if (this.props.Login.screenName === \"IDS_TESTMETHODSOURCE\") {\r\n                inputData = {\r\n                    ntype: 3,\r\n                    nflag: 3,\r\n                    nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                    ntranscode: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString(),\r\n                    ntestcode: this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                    npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                    ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                    nmethodcode: selectedRecord.nmethodcode.value,\r\n                    nsourcecode: selectedRecord.nsourcecode.value,\r\n                    ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: \"IDS_RESULTS\",\r\n                    ncontrolcode: this.props.Login.ncontrolcode\r\n                }\r\n                // inputParam = {\r\n                //     classUrl: classUrl,\r\n                //     methodUrl: \"TestMethodSource\",\r\n                //     inputData: inputData,\r\n                //     isFileupload: false,\r\n                //     operation: \"update\",\r\n                //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                // }\r\n\r\n                this.updateTestMethodSource(inputData, this.props.Login.masterData, this.props.Login.ncontrolcode);\r\n                return;\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_INSTRUMENT\") {\r\n                let inputData = [];\r\n                if (this.props.Login.operation === \"update\") {\r\n                    inputData = {\r\n                        ResultUsedInstrument: {\r\n                            nresultusedinstrumentcode: selectedRecord.nresultusedinstrumentcode,\r\n                            npreregno: selectedRecord.npreregno,\r\n                            ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\r\n                            ninstrumentcode: selectedRecord.ninstrumentcode.value,\r\n                            dfromdate: formatInputDate(selectedRecord.dfromdate, false),\r\n                            dtodate: formatInputDate(selectedRecord.dtodate, false),\r\n                            stzfromdate: selectedRecord.ntzfromdate.label,\r\n                            stztodate: selectedRecord.ntztodate.label,\r\n                            ntzfromdate: selectedRecord.ntzfromdate.value,\r\n                            ntztodate: selectedRecord.ntztodate.value,\r\n                            ntransactiontestcode: selectedRecord.ntransactiontestcode\r\n\r\n                        },\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode,\r\n                        ndesigntemplatemappingcode:ndesigntemplatemappingcode,\r\n                        ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                            this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    }\r\n                }\r\n                else {\r\n                    inputData = {\r\n                        ResultUsedInstrument: {\r\n                            ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                            npreregno: selectedRecord.npreregno,\r\n                            ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\r\n                            ninstrumentcode: selectedRecord.ninstrumentcode.value,\r\n                            dfromdate: formatInputDate(selectedRecord.dfromdate, false),\r\n                            dtodate: formatInputDate(selectedRecord.dtodate, false),\r\n                            stzfromdate: selectedRecord.ntzfromdate.label,\r\n                            stztodate: selectedRecord.ntztodate.label,\r\n                            ntzfromdate: selectedRecord.ntzfromdate.value,\r\n                            ntztodate: selectedRecord.ntztodate.value\r\n                        },\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode,\r\n                        ndesigntemplatemappingcode:ndesigntemplatemappingcode,\r\n                        transactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                            this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    }\r\n                }\r\n                inputParam = {\r\n                    classUrl: classUrl,\r\n                    methodUrl: \"ResultUsedInstrument\",\r\n                    \r\n                    inputData: inputData, selectedId,\r\n                    isFileupload: false,\r\n                    activeTestKey: \"IDS_INSTRUMENT\",\r\n                    operation: this.props.Login.operation,\r\n                    displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_MATERIAL\") {\r\n                let inputData = [];\r\n                if (this.state.selectedRecord.nmaterialcode != \"\") {\r\n                    if (this.state.selectedRecord.nmaterialinventorycode != \"\") {\r\n                        if (parseFloat(this.state.selectedRecord.susedquantity) <= parseFloat(this.state.selectedRecord.savailablequantity)) {\r\n                            if (this.props.Login.operation === \"update\") {\r\n                                inputData = {\r\n                                    ResultUsedMaterial: {\r\n                                        nresultusedmaterialcode: selectedRecord.nresultusedmaterialcode,\r\n                                        ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                                        npreregno: selectedRecord.npreregno,\r\n                                        nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\r\n                                        nmaterialcategorycode: selectedRecord.nmaterialcategorycode.value,\r\n                                        nmaterialcode: selectedRecord.nmaterialcode.value,\r\n                                        ninventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecord.nsectioncode,\r\n                                        jsondata: {\r\n                                            sarno: selectedRecord.sarno,\r\n                                            ssamplearno: selectedRecord.ssamplearno,\r\n                                            stestsynonym: selectedRecord.stestsynonym,\r\n                                            smaterialcatname: selectedRecord.nmaterialcatcode.label,\r\n                                            smaterialname: selectedRecord.nmaterialcode.label,\r\n                                            sinventoryid: selectedRecord.nmaterialinventorycode.label,\r\n                                            nqtyused: selectedRecord.susedquantity,\r\n                                            scarriergas: selectedRecord.scarriergas,\r\n                                            smobilephase: selectedRecord.smobilephase,\r\n                                            sremarks: selectedRecord.sremarks,\r\n                                            susername: this.props.Login.userInfo.susername,\r\n                                            nsectioncode: selectedRecord.nsectioncode,\r\n                                            ssectionname: selectedRecord.ssectionname\r\n                                        }\r\n                                    },\r\n                                    MaterialInventoryTrans: {\r\n                                        nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecord.nsectioncode,\r\n                                        jsondata: {\r\n                                            IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label,\r\n                                            nqtyused: selectedRecord.susedquantity,\r\n                                        }\r\n                                    },\r\n                                    userinfo: this.props.Login.userInfo,\r\n                                    nregtypecode: nregtypecode,\r\n                                    nregsubtypecode: nregsubtypecode,\r\n                                    ndesigntemplatemappingcode:ndesigntemplatemappingcode,\r\n                                    nresultusedmaterialcode: selectedRecord.nresultusedmaterialcode,\r\n                                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                                }\r\n                            }\r\n                            else {\r\n                                inputData = {\r\n                                    ResultUsedMaterial: {\r\n                                        ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                                        npreregno: selectedRecord.npreregno,\r\n                                        nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\r\n                                        nmaterialcategorycode: selectedRecord.nmaterialcatcode.value,\r\n                                        nmaterialcode: selectedRecord.nmaterialcode.value,\r\n                                        ninventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecord.nsectioncode,\r\n                                        jsondata: {\r\n                                            sarno: selectedRecord.sarno,\r\n                                            ssamplearno: selectedRecord.ssamplearno,\r\n                                            stestsynonym: selectedRecord.stestsynonym,\r\n                                            smaterialcatname: selectedRecord.nmaterialcatcode.label,\r\n                                            smaterialname: selectedRecord.nmaterialcode.label,\r\n                                            sinventoryid: selectedRecord.nmaterialinventorycode.label,\r\n                                            nqtyused: selectedRecord.susedquantity,\r\n                                            scarriergas: selectedRecord.scarriergas,\r\n                                            smobilephase: selectedRecord.smobilephase,\r\n                                            sremarks: selectedRecord.sremarks,\r\n                                            smaterialtypename: selectedRecord.nmaterialtypecode.label,\r\n                                            nsectioncode: selectedRecord.nsectioncode,\r\n                                            ssectionname: selectedRecord.ssectionname\r\n                                        }\r\n                                    },\r\n                                    MaterialInventoryTrans: {\r\n                                        nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecord.nsectioncode,\r\n                                        jsondata: {\r\n                                            nqtyused: selectedRecord.susedquantity,\r\n                                            IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label\r\n                                        }\r\n                                    },\r\n                                    userinfo: this.props.Login.userInfo,\r\n                                    nregtypecode: nregtypecode,\r\n                                    nregsubtypecode: nregsubtypecode,\r\n                                    ndesigntemplatemappingcode:ndesigntemplatemappingcode,\r\n                                    transactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                                }\r\n                            }\r\n                            inputParam = {\r\n                                classUrl: classUrl,\r\n                                methodUrl: \"ResultUsedMaterial\",\r\n                                inputData: inputData, selectedId,\r\n                                isFileupload: false,\r\n                                activeTestKey: \"IDS_MATERIAL\",\r\n                                operation: this.props.Login.operation,\r\n                                displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                            }\r\n                        } else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: \"Quantity Not available\" }))\r\n                            return null;\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"Select Material Inventory\" }))\r\n                        return null;\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"Select Material\" }))\r\n                    return null;\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_TASK\") {\r\n                if ((selectedRecord.sanalysistime && selectedRecord.sanalysistime !== \"\")\r\n                    || (selectedRecord.smisctime && selectedRecord.smisctime !== \"\")\r\n                    || (selectedRecord.spreanalysistime && selectedRecord.spreanalysistime !== \"\")\r\n                    || (selectedRecord.spreparationtime && selectedRecord.spreparationtime !== \"\")\r\n                    || (selectedRecord.scomments && selectedRecord.scomments !== \"\")) {\r\n                    if (this.props.Login.operation === \"update\") {\r\n                        inputData = {\r\n                            ResultUsedTasks: {\r\n                                nresultusedtaskcode: selectedRecord.nresultusedtaskcode,\r\n                                jsondata: {\r\n                                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                    sarno: this.props.Login.masterData.RESelectedTest[0].sarno,\r\n                                    ssamplearno: this.props.Login.masterData.RESelectedTest[0].ssamplearno,\r\n                                    stestsynonym: selectedRecord.stestsynonym,\r\n                                    sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\r\n                                    sanalyst: this.props.Login.userInfo.susername,\r\n                                    smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\r\n                                    spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\r\n                                    spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\r\n                                    scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\r\n                                }\r\n                            },\r\n                            userinfo: this.props.Login.userInfo,\r\n                            ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode,\r\n                            ndesigntemplatemappingcode:ndesigntemplatemappingcode,\r\n                        }\r\n                    }\r\n                    else {\r\n                        let taskArry = [];\r\n                        this.props.Login.masterData.RESelectedTest &&\r\n                            this.props.Login.masterData.RESelectedTest.map(test =>\r\n\r\n                                taskArry.push({\r\n                                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                    ntransactiontestcode: parseInt(test.ntransactiontestcode),\r\n                                    npreregno: parseInt(test.npreregno),\r\n                                    // sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\r\n                                    // sanalyst: this.props.Login.userInfo.susername,\r\n                                    // smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\r\n                                    // spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\r\n                                    // spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\r\n                                    // scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\",\r\n                                    // npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                                    jsondata: {\r\n                                        //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                        sarno: test.sarno,\r\n                                        ssamplearno: test.ssamplearno,\r\n                                        stestsynonym: test.stestsynonym,\r\n                                        sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\r\n                                        sanalyst: this.props.Login.userInfo.susername,\r\n                                        smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\r\n                                        spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\r\n                                        spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\r\n                                        scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\r\n                                    }\r\n                                })\r\n                            )\r\n                        inputData = {\r\n                            ResultUsedTasks: taskArry,\r\n                            userinfo: this.props.Login.userInfo,\r\n                            ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode,\r\n                            ndesigntemplatemappingcode:ndesigntemplatemappingcode\r\n                        }\r\n                    }\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"ResultUsedTasks\",\r\n                        inputData: inputData, selectedId,\r\n                        activeTestKey: \"IDS_TASK\",\r\n                        isFileupload: false,\r\n                        operation: this.props.Login.operation,\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                    }\r\n                } else {\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERTASKTIME\" }));\r\n                    return;\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_PARAMETERCOMMENTS\") {\r\n                inputData = {\r\n                    ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                    sresultcomment: selectedRecord.sresultcomment,\r\n                    transactiontestcode: selectedRecord.transactiontestcode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nregtypecode: nregtypecode,\r\n                    nregsubtypecode: nregsubtypecode,\r\n                    ncontrolcode: this.props.Login.ncontrolcode\r\n\r\n                }\r\n                // inputParam = {\r\n                //     classUrl: classUrl,\r\n                //     methodUrl: \"ParameterComments\",\r\n                //     inputData: inputData, selectedId,\r\n                //     isFileupload: false,\r\n                //     operation: this.props.Login.operation,\r\n                //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                // }\r\n                this.updateParameterComments(inputData, this.props.Login.masterData, selectedRecord.ncontrolcode);\r\n                return;\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_CHECKLISTRESULT\") {\r\n                let lstResultCheckList = [];\r\n                if (selectedRecord && selectedRecord.editedQB) {\r\n                    selectedRecord.editedQB.map(qbcode =>\r\n                        lstResultCheckList.push(selectedRecord[qbcode]));\r\n                    inputData = {\r\n                        ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                        ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                        transactiontestcode: selectedRecord.transactiontestcode,\r\n                        ResultCheckList: lstResultCheckList,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode\r\n                    }\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"ResultEntryChecklist\",\r\n                        inputData: inputData, selectedId,\r\n                        isFileupload: false,\r\n                        operation: this.props.Login.operation,\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                    }\r\n                }\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n        });\r\n        return temparray;\r\n    }\r\n    constructDesign(list) {\r\n\r\n        let newList = []\r\n        if (list.length > 0) {\r\n            list.map((i) => {\r\n                newList.push({ [designProperties.LABEL]: i, [designProperties.VALUE]: i })\r\n            })\r\n        }\r\n        return newList;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let { showTest, showSample, userRoleControlRights, controlMap, resultDataState, instrumentDataState,\r\n            materialDataState, taskDataState, documentDataState, resultChangeDataState, testCommentDataState,\r\n            historyDataState, sampleListColumns, subSampleListColumns, testListColumns,\r\n            SingleItem, sampleListMainField, subSampleListMainField, testListMainField,\r\n            SampleGridItem, SampleGridExpandableItem, sampleMoreField, subSampleMoreField,\r\n            testMoreField, selectedRecord, SampleType, RegistrationType, RegistrationSubType,\r\n            REFilterStatus, REJobStatus, Testvalues, ApprovalConfigVersion, DynamicSampleColumns,\r\n            DynamicSubSampleColumns, DynamicTestColumns, DynamicGridItem, DynamicGridMoreField,\r\n            validateFormulaMandyFields, skip, take, testskip, testtake, selectedFilter, stateDynamicDesign,\r\n            activeTabIndex, activeTabId, sampleChangeDataState } = this.state;\r\n        let bool = false;\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                bool = true;\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n        }\r\n        if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n            const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n            DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\r\n            DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n            DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n\r\n            DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n            DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n\r\n            SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\r\n            testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\r\n            testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n            bool = true;\r\n        }\r\n        if (this.props.Login.masterData.RegistrationSubType &&\r\n            this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n            let dataState = {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n                //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \r\n            }\r\n            bool = true;\r\n            resultDataState = dataState;\r\n            instrumentDataState = dataState;\r\n            materialDataState = dataState;\r\n            taskDataState = dataState;\r\n            documentDataState = dataState;\r\n            resultChangeDataState = dataState;\r\n            historyDataState = dataState;\r\n            testCommentDataState = dataState;\r\n            sampleChangeDataState = dataState;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            bool = true;\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n        }\r\n        if (this.props.Login.validateFormulaMandyFields !== previousProps.Login.validateFormulaMandyFields) {\r\n            bool = true;\r\n            validateFormulaMandyFields = this.props.Login.validateFormulaMandyFields;\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\r\n            RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n            RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n            REFilterStatus = constructOptionList(this.props.Login.masterData.REFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\",\"nsorter\", 'ascending', \"ntransactionstatus\", false);\r\n            REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\r\n            Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestsynonym', 'ascending', 'ntestcode', false);\r\n            ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname',\r\n                'ascending', 'napprovalconfigversioncode', false);\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\r\n                instrumentDataState = this.props.Login.instrumentDataState;\r\n            }\r\n            if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\r\n                taskDataState = this.props.Login.taskDataState;\r\n            }\r\n            if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\r\n                resultChangeDataState = this.props.Login.resultChangeDataState;\r\n            }\r\n            if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\r\n                historyDataState = this.props.Login.historyDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n            if (this.props.Login.sampleChangeDataState && this.props.Login.sampleChangeDataState !== previousProps.Login.sampleChangeDataState) {\r\n                sampleChangeDataState = this.props.Login.sampleChangeDataState;\r\n            }\r\n\r\n\r\n            let selectFilterStatus = { ntransactionstatus: transactionStatus.PARTIAL, sfilterstatus: this.props.intl.formatMessage({ id: \"IDS_PARTIAL\" }), scolorhexcode: \"#800000\" }\r\n            const selectedFilters = this.props.Login.masterData.REFilterStatus || [];\r\n\r\n            const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\r\n\r\n            const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL)\r\n            if (selectedFiltersNew.length > 0 && index === -1) {\r\n                selectedFiltersNew.push(selectFilterStatus)\r\n            }\r\n            selectedFilter = selectedFiltersNew;\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {masterData: this.props.Login.masterData,showTest,showSample }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            SampleType = SampleType.get(\"OptionList\")\r\n            RegistrationType = RegistrationType.get(\"OptionList\")\r\n            RegistrationSubType = RegistrationSubType.get(\"OptionList\")\r\n            REFilterStatus = REFilterStatus.get(\"OptionList\")\r\n            REJobStatus = REJobStatus.get(\"OptionList\")\r\n            Testvalues = Testvalues.get(\"OptionList\")\r\n            ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\")\r\n        }\r\n\r\n        if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\r\n            activeTabIndex = this.props.Login.activeTabIndex;\r\n            activeTabId = this.props.Login.activeTabId;\r\n            bool = true;\r\n        }\r\n\r\n        if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\r\n\r\n            const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\",\r\n                \"sregtemplatename\", undefined, undefined, false);\r\n\r\n            stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\")\r\n        }\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                showTest, showSample, userRoleControlRights, controlMap, resultDataState, instrumentDataState,\r\n                materialDataState, taskDataState, documentDataState, resultChangeDataState, testCommentDataState,\r\n                historyDataState, sampleListColumns, subSampleListColumns, testListColumns,\r\n                SingleItem, sampleListMainField, subSampleListMainField, testListMainField,\r\n                SampleGridItem, SampleGridExpandableItem, sampleMoreField, subSampleMoreField,\r\n                testMoreField, selectedRecord,\r\n                SampleType,\r\n                RegistrationType,\r\n                RegistrationSubType,\r\n                REFilterStatus,\r\n                REJobStatus,\r\n                Testvalues,\r\n                ApprovalConfigVersion,\r\n                validateFormulaMandyFields,\r\n                skip, take, testskip, testtake, selectedFilter,\r\n                DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns,\r\n                DynamicGridItem, DynamicGridMoreField, stateDynamicDesign, activeTabIndex, activeTabId, sampleChangeDataState\r\n            })\r\n        }\r\n\r\n        if (this.props.Login.meanTestParameterList !== previousProps.Login.meanTestParameterList) {\r\n            this.setState({ meanTestParameterList: this.props.Login.meanTestParameterList });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        // if (props.Login.selectedRecord !== state.selectedRecord) {\r\n        //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\r\n        // }\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nconst mapStatetoProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStatetoProps, {\r\n    crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule,\r\n    completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord, fetchTaskRecord,\r\n    parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType, fetchMaterialRecord,\r\n    getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus, getSampleChildTabREDetail,\r\n    viewAttachment, getAttachmentCombo, deleteAttachment, resultImportFile, validateEsignCredentialComplete, getCommentsCombo, updateTestMethodSource,\r\n    filterTransactionList, validateEsignCredential, updateParameterComments, previewSampleReport, getMeanCalculationTestParameter, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial, getAvailableMaterialQuantity, testStart, getSubSampleChildTabDetail, getSampleChildTabDetail, getREFilterTemplate//,deleteResultUsedMaterial\r\n\r\n})(injectIntl(ResultEntry));"]},"metadata":{},"sourceType":"module"}