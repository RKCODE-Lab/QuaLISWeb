{"ast":null,"code":"import React from'react';import{Row,Col}from'react-bootstrap';import{injectIntl}from'react-intl';import{transactionStatus,attachmentType}from'../../../components/Enumeration';import CustomSwitch from'../../../components/custom-switch/custom-switch.component';import DropZone from'../../../components/dropzone/dropzone.component';var AddReportDetail=function AddReportDetail(props){return/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(CustomSwitch,{name:\"nisplsqlquery\",type:\"switch\",label:props.intl.formatMessage({id:\"IDS_ISPLSQLQUERY\"}),placeholder:props.intl.formatMessage({id:\"IDS_ISPLSQLQUERY\"}),value:props.selectedRecord[\"nisplsqlquery\"]===transactionStatus.YES?true:false,isMandatory:false,required:false,checked:props.selectedRecord[\"nisplsqlquery\"]===transactionStatus.YES?true:false,onChange:function onChange(event){return props.onInputOnChange(event);}}),Object.keys(props.selectedRecord).length>0&&/*#__PURE__*/React.createElement(DropZone,{label:props.intl.formatMessage({id:\"IDS_FILE\"}),maxFiles:1,accept:\".jrxml\",minSize:0,maxSize:10,fileNameLength:150,onDrop:function onDrop(event){return props.onDropImage(event,\"sfilename\");},multiple:false,isMandatory:true,editFiles:props.selectedRecord?props.selectedRecord:{},attachmentTypeCode:props.operation===\"update\"?attachmentType.OTHERS:\"\",fileName:\"sfilename\",deleteAttachment:function deleteAttachment(){return props.deleteFile(\"sfilename\");},actionType:props.actionType})));};export default injectIntl(AddReportDetail);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/reports/reportsconfig/AddReportDetail.js"],"names":["React","Row","Col","injectIntl","transactionStatus","attachmentType","CustomSwitch","DropZone","AddReportDetail","props","intl","formatMessage","id","selectedRecord","YES","event","onInputOnChange","Object","keys","length","onDropImage","operation","OTHERS","deleteFile","actionType"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,GAAR,CAAaC,GAAb,KAAuB,iBAAvB,CACA,OAAQC,UAAR,KAA0B,YAA1B,CACA,OAAQC,iBAAR,CAA2BC,cAA3B,KAAgD,iCAAhD,CACA,MAAOC,CAAAA,YAAP,KAAyB,2DAAzB,CACA,MAAOC,CAAAA,QAAP,KAAqB,iDAArB,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAW,CAC3B,mBACS,oBAAC,GAAD,mBACO,oBAAC,GAAD,EAAK,EAAE,CAAE,EAAT,eA4FC,oBAAC,YAAD,EACO,IAAI,CAAE,eADb,CAEO,IAAI,CAAC,QAFZ,CAGO,KAAK,CAAGA,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAC,kBAAL,CAAzB,CAHf,CAIO,WAAW,CAAGH,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAC,kBAAL,CAAzB,CAJrB,CAKO,KAAK,CAAIH,KAAK,CAACI,cAAN,CAAqB,eAArB,IAA0CT,iBAAiB,CAACU,GAA5D,CAAkE,IAAlE,CAAwE,KALxF,CAMO,WAAW,CAAE,KANpB,CAOO,QAAQ,CAAE,KAPjB,CAQO,OAAO,CAAGL,KAAK,CAACI,cAAN,CAAqB,eAArB,IAA0CT,iBAAiB,CAACU,GAA5D,CAAkE,IAAlE,CAAwE,KARzF,CASO,QAAQ,CAAE,kBAACC,KAAD,QAAUN,CAAAA,KAAK,CAACO,eAAN,CAAsBD,KAAtB,CAAV,EATjB,EA5FD,CAwGCE,MAAM,CAACC,IAAP,CAAYT,KAAK,CAACI,cAAlB,EAAkCM,MAAlC,CAA0C,CAA1C,eACe,oBAAC,QAAD,EACA,KAAK,CAAGV,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAC,UAAL,CAAzB,CADR,CAEA,QAAQ,CAAE,CAFV,CAGA,MAAM,CAAC,QAHP,CAIA,OAAO,CAAE,CAJT,CAKA,OAAO,CAAE,EALT,CAMA,cAAc,CAAE,GANhB,CAOA,MAAM,CAAE,gBAACG,KAAD,QAASN,CAAAA,KAAK,CAACW,WAAN,CAAkBL,KAAlB,CAAyB,WAAzB,CAAT,EAPR,CAQA,QAAQ,CAAE,KARV,CASA,WAAW,CAAE,IATb,CAUA,SAAS,CAAEN,KAAK,CAACI,cAAN,CAAuBJ,KAAK,CAACI,cAA7B,CAA6C,EAVxD,CAWA,kBAAkB,CAAEJ,KAAK,CAACY,SAAN,GAAkB,QAAlB,CAA4BhB,cAAc,CAACiB,MAA3C,CAAkD,EAXtE,CAYA,QAAQ,CAAC,WAZT,CAaA,gBAAgB,CAAE,kCAAIb,CAAAA,KAAK,CAACc,UAAN,CAAiB,WAAjB,CAAJ,EAblB,CAcA,UAAU,CAAEd,KAAK,CAACe,UAdlB,EAzGhB,CADP,CADT,CAgIP,CAjID,CAmIA,cAAerB,CAAAA,UAAU,CAACK,eAAD,CAAzB","sourcesContent":["import React from 'react'\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport {injectIntl } from 'react-intl';\r\nimport {transactionStatus, attachmentType} from '../../../components/Enumeration';\r\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\r\nimport DropZone from '../../../components/dropzone/dropzone.component';\r\n\r\nconst AddReportDetail = (props) => {\r\n        return(\r\n                 <Row> \r\n                        <Col md={12}> \r\n                     {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"] !== reportTypeEnum.MIS && props.reportMaster[\"nreporttypecode\"] !== reportTypeEnum.SCREENWISE ? <>             \r\n                                            \r\n                            <FormSelectSearch\r\n                                        name={\"ncoareporttypecode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_COAREPORTTYPE\"})}                              \r\n                                        placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                              \r\n                                        options={ props.coaReportTypeList || []}\r\n                                        optionId={\"ncoareporttypecode\"}\r\n                                        optionValue={\"scoareporttypename\"}\r\n                                        value = { props.selectedRecord ? props.selectedRecord[\"ncoareporttypecode\"]:\"\"}\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isClearable={false}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"ncoareporttypecode\")}                               \r\n                                />                             */}\r\n                        {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"] === reportTypeEnum.SAMPLE ?<>\r\n                                <FormSelectSearch\r\n                                        name={\"nreportdecisiontypecode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_DECISIONTYPE\"})}                              \r\n                                        placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                              \r\n                                        options={ props.decisionTypeList || []}\r\n                                        value = { props.selectedRecord ? props.selectedRecord[\"nreportdecisiontypecode\"]:\"\"}\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isClearable={false}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"nreportdecisiontypecode\")}                               \r\n                                />   */}\r\n                        {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"].isneedsection === transactionStatus.YES ? \r\n                                <FormSelectSearch\r\n                                        name={\"nsectioncode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_LAB\"})}                              \r\n                                        placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                               \r\n                                        options={ props.sectionList || []}\r\n                                        optionId={\"nsectioncode\"}\r\n                                        optionValue={\"ssectionname\"}\r\n                                        value = { props.selectedRecord ? props.selectedRecord[\"nsectioncode\"]:\"\"}\r\n                                        isMandatory={false}\r\n                                        isMulti={false}\r\n                                        isClearable={true}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"nsectioncode\")}                               \r\n                                />  \r\n                                : \"\"}  */}\r\n                                 {/* </> \r\n                                 :\"\"}      */}\r\n\r\n                        {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"] === reportTypeEnum.BATCH ? \r\n                            <><FormSelectSearch\r\n                                                name={\"ncertificatetypecode\"}\r\n                                                formLabel={ props.intl.formatMessage({ id:\"IDS_CERTIFICATETYPE\"})}                              \r\n                                                placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                               \r\n                                                options={ props.certificateTypeList || []}\r\n                                                value = { props.selectedRecord ? props.selectedRecord[\"ncertificatetypecode\"]:\"\"}\r\n                                                isMandatory={true}\r\n                                                isMulti={false}\r\n                                                isClearable={false}\r\n                                                isSearchable={true}                                \r\n                                                isDisabled={false}\r\n                                                closeMenuOnSelect={true}\r\n                                                onChange = {(event)=> props.onComboChange(event, \"ncertificatetypecode\")}                               \r\n                                        /> \r\n                                <FormInput\r\n                                        label={props.intl.formatMessage({ id:\"IDS_REPORTBATCHTYPE\"})}\r\n                                        name={\"sbatchdisplayname\"}\r\n                                        type=\"text\"\r\n                                        placeholder={props.intl.formatMessage({ id:\"sbatchdisplayname\"})}\r\n                                        value ={props.selectedRecord ? props.selectedRecord[\"sbatchdisplayname\"] : \"\"}\r\n                                        isMandatory = {false}\r\n                                        required={false}\r\n                                        readOnly={true}\r\n                                        onChange={(event)=> props.onInputOnChange(event)}\r\n                                />  </>  \r\n                                         :\"\"}                   \r\n                       \r\n                       </>\r\n                    :\"\"} */}\r\n                        \r\n                         <CustomSwitch\r\n                                name={\"nisplsqlquery\"}\r\n                                type=\"switch\"\r\n                                label={ props.intl.formatMessage({ id:\"IDS_ISPLSQLQUERY\"})}\r\n                                placeholder={ props.intl.formatMessage({ id:\"IDS_ISPLSQLQUERY\"})}                            \r\n                                value ={ props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true :false }  \r\n                                isMandatory={false}                       \r\n                                required={false}\r\n                                checked={ props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true :false}\r\n                                onChange={(event)=> props.onInputOnChange(event)}\r\n                                />\r\n                      \r\n                        {Object.keys(props.selectedRecord).length >0 &&                              \r\n                                        <DropZone \r\n                                        label={ props.intl.formatMessage({ id:\"IDS_FILE\"})} \r\n                                        maxFiles={1}\r\n                                        accept=\".jrxml\"\r\n                                        minSize={0}\r\n                                        maxSize={10}\r\n                                        fileNameLength={150}\r\n                                        onDrop={(event)=>props.onDropImage(event, \"sfilename\")}\r\n                                        multiple={false}\r\n                                        isMandatory={true}\r\n                                        editFiles={props.selectedRecord ? props.selectedRecord :{}}\r\n                                        attachmentTypeCode={props.operation===\"update\"? attachmentType.OTHERS:\"\"}            \r\n                                        fileName=\"sfilename\"\r\n                                        deleteAttachment={()=>props.deleteFile(\"sfilename\")}\r\n                                        actionType={props.actionType}\r\n                                        />\r\n                                \r\n                                }                    \r\n                   </Col>\r\n                </Row>\r\n            )   \r\n}\r\n\r\nexport default injectIntl(AddReportDetail);"]},"metadata":{},"sourceType":"module"}