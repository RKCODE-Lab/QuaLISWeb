{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\DynamicSlideout.jsx\";\nimport React from 'react';\nimport { Row, Col, Button, Form, InputGroup, Nav } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { toast } from 'react-toastify';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormEmail from '../../components/form-email/form-email.component';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport DropZone from '../../components/dropzone/dropzone.component';\nimport { faPlus, faSearch, faSleigh, faFilter, faEye } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass DynamicSlideout extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderSwitch = (control, selectedRecord, componentLength, componentRowLength) => {\n      //console.log(\"control:\", control, selectedRecord,  this.props.editfield);\n      //const editfield = this.props.editfield && this.props.editfield\n      const index = this.props.editfield ? this.props.editfield.findIndex(x => x.label === control.label) : -1;\n      let checkReadOnly = false;\n\n      if (index !== -1) {\n        const listdata = this.props.editfield[index] && this.props.editfield[index].editableuntill || [];\n        checkReadOnly = listdata ? this.props.selectedSample && this.props.selectedSample.ntransactionstatus ? !listdata.includes(this.props.selectedSample.ntransactionstatus) : false : false;\n      }\n\n      switch (control.inputtype) {\n        case 'frontendsearchfilter':\n          {\n            return /*#__PURE__*/React.createElement(Row, {\n              style: {\n                height: '50px'\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(\"button\", {\n              className: \"btn btn-primary btn-padd-custom\",\n              disabled: control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : false // style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\n              ,\n              onClick: e => this.props.custombuttonclick(e, control),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faFilter,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 33\n              }\n            }), \" \", this.props.intl.formatMessage({\n              id: control.label\n            }))));\n          }\n\n        case 'backendsearchfilter':\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, control.table.item.masterAdd && control.isAddMaster && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] && this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.addControlCode) !== -1 ? /*#__PURE__*/React.createElement(Row, {\n              style: {\n                height: '50px'\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(Col, {\n              md: componentLength === 1 ? componentRowLength > 1 ? 10 : 11 : componentRowLength > 1 ? 8 : 10,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(\"button\", {\n              className: \"btn btn-primary btn-padd-custom\",\n              disabled: control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : false // style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\n              ,\n              onClick: e => this.props.custombuttonclick(e, control),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 41\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faSearch,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 45\n              }\n            }), \" \", this.props.intl.formatMessage({\n              id: control.label\n            }))), /*#__PURE__*/React.createElement(Col, {\n              md: 1,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(Nav.Link, {\n              \"data-tip\": this.props.intl.formatMessage({\n                id: \"IDS_ADD\"\n              }),\n              className: \"btn btn-circle outline-grey mr-2\",\n              onClick: e => this.props.addMasterRecord(control),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 41\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faPlus,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 45\n              }\n            })))) : /*#__PURE__*/React.createElement(Row, {\n              style: {\n                height: '50px'\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 42\n              }\n            }, /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(\"button\", {\n              className: \"btn btn-primary btn-padd-custom\",\n              disabled: control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : false // style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\n              ,\n              onClick: e => this.props.custombuttonclick(e, control),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 41\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faSearch,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 45\n              }\n            }), \" \", this.props.intl.formatMessage({\n              id: control.label\n            })))));\n          }\n\n        case 'combo':\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, control.table.item.masterAdd && control.isAddMaster && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] && this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.addControlCode) !== -1 ? /*#__PURE__*/React.createElement(Row, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(Col, {\n              md: componentLength === 1 ? componentRowLength > 1 ? 10 : 11 : componentRowLength > 1 ? 8 : 10,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n              name: control.label,\n              as: \"select\",\n              onChange: event => this.props.onComboChange(event, control),\n              formLabel: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              placeholder: this.props.intl.formatMessage({\n                id: \"IDS_SELECTRECORD\"\n              }),\n              isMandatory: control.mandatory,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              options: this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : [],\n              optionId: \"value\",\n              optionValue: \"label\",\n              isMulti: false,\n              isClearable: control.mandatory ? false : true,\n              isDisabled: control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              isSearchable: false,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 41\n              }\n            })), /*#__PURE__*/React.createElement(Col, {\n              md: 1,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(Nav.Link, {\n              \"data-tip\": this.props.intl.formatMessage({\n                id: \"IDS_ADD\"\n              }),\n              className: \"btn btn-circle outline-grey mr-2\",\n              onClick: e => this.props.addMasterRecord(control),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 41\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faPlus,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 45\n              }\n            })))) : control.isView ? /*#__PURE__*/React.createElement(Row, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(Col, {\n              md: componentLength === 1 ? componentRowLength > 1 ? 10 : 11 : componentRowLength > 1 ? 8 : 10,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n              name: control.label,\n              as: \"select\",\n              onChange: event => this.props.onComboChange(event, control),\n              formLabel: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              placeholder: this.props.intl.formatMessage({\n                id: \"IDS_SELECTRECORD\"\n              }),\n              isMandatory: control.mandatory,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              options: this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : [],\n              optionId: \"value\",\n              optionValue: \"label\",\n              isMulti: false,\n              isClearable: control.mandatory ? false : true,\n              isDisabled: control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              isSearchable: false,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 41\n              }\n            })), /*#__PURE__*/React.createElement(Col, {\n              md: 1,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(Nav.Link, {\n              \"data-tip\": this.props.intl.formatMessage({\n                id: \"IDS_VIEW\"\n              }),\n              className: \"btn btn-circle outline-grey mr-2\",\n              onClick: e => this.props.onClickView(control),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 41\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              icon: faEye,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 45\n              }\n            })))) : /*#__PURE__*/React.createElement(FormSelectSearch, {\n              name: control.label,\n              as: \"select\",\n              onChange: event => this.props.onComboChange(event, control),\n              formLabel: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              placeholder: this.props.intl.formatMessage({\n                id: \"IDS_SELECTRECORD\"\n              }),\n              isMandatory: control.mandatory,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              options: this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : [],\n              optionId: \"value\",\n              optionValue: \"label\",\n              isMulti: false,\n              isClearable: control.mandatory ? false : true,\n              isDisabled: control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              isSearchable: false,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 34\n              }\n            }));\n          }\n\n        case 'textinput':\n          {\n            return /*#__PURE__*/React.createElement(FormInput, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              type: \"text\",\n              placeholder: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              maxLength: control.sfieldlength,\n              isDisabled: control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              onChange: event => this.props.onInputOnChange(event, control.label),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'email':\n          {\n            return /*#__PURE__*/React.createElement(FormEmail, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              type: \"email\",\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              placeholder: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              maxLength: control.sfieldlength,\n              isDisabled: control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              onChange: event => this.props.onInputOnChange(event, control.label),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'textarea':\n          {\n            return /*#__PURE__*/React.createElement(FormTextarea, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              type: \"text\",\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              placeholder: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              onChange: event => this.props.onInputOnChange(event, control.label),\n              rows: \"2\",\n              maxLength: control.sfieldlength,\n              isDisabled: control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'toggle':\n          return /*#__PURE__*/React.createElement(CustomSwitch, {\n            label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n            type: \"switch\",\n            name: control.label,\n            onChange: event => this.props.onInputOnChange(event),\n            placeholder: control.label,\n            defaultValue: this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false,\n            checked: this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false,\n            disabled: control.readonly ? control.readonly : checkReadOnly,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 21\n            }\n          });\n\n        case 5:\n          {\n            return /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 25\n              }\n            }, control.isMultiLingualLabel ? this.props.intl.formatMessage({\n              id: control.squestion\n            }) : control.squestion, control.mandatory && /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 70\n              }\n            }, \"*\")));\n          }\n\n        case 6:\n          {\n            return /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              htmlFor: control.squestion,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 25\n              }\n            }, control.squestion, control.mandatory && /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 106\n              }\n            }, \"*\")), /*#__PURE__*/React.createElement(Button, {\n              className: \"btn\",\n              name: control.squestion,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 25\n              }\n            }, control.squestion));\n          }\n\n        case 'Numeric':\n          {\n            return /*#__PURE__*/React.createElement(FormNumericInput, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              className: \"form-control\",\n              type: \"text\",\n              strict: true,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              maxLength: control.sfieldlength,\n              isDisabled: control.recordbasedreadonly ? this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              onChange: event => this.props.onNumericInputChange(event, control.label),\n              precision: control.precision || 0,\n              onBlur: event => this.props.onNumericBlur(event, control) // max={control.max}\n              //min={control.min}\n              ,\n              noStyle: true,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'date':\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, control.timezone ? /*#__PURE__*/React.createElement(Row, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(Col, {\n              md: 6,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(DateTimePicker, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              className: \"form-control\",\n              placeholderText: this.props.intl.formatMessage({\n                id: \"IDS_SELECTDATE\"\n              }),\n              selected: selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : control.loadcurrentdate ? new Date() : null,\n              dateFormat: control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"],\n              timeInputLabel: this.props.intl.formatMessage({\n                id: \"IDS_TIME\"\n              }),\n              showTimeInput: control.dateonly === true ? false : true,\n              showTimeSelectOnly: control.timeonly,\n              isDisabled: control.recordbasedreadonly ? this.props.selectedRecord[control.parentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly // isClearable={false}\n              ,\n              isMandatory: control.mandatory,\n              maxDate: control.maxdate ? new Date(control.maxdate) : this.props.CurrentTime,\n              maxTime: control.maxdate ? new Date(control.maxdate) : this.props.CurrentTime,\n              minDate: control.mindate ? new Date(control.mindate) : this.props.CurrentTime,\n              minTime: control.mindate ? new Date(control.mindate) : this.props.CurrentTime,\n              onChange: date => this.props.handleDateChange(date, control.label),\n              value: this.props.selectedRecord[control.label + \"value\"] ? new Date(this.props.selectedRecord[control.label + \"value\"]) : new Date(),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 37\n              }\n            })), /*#__PURE__*/React.createElement(Col, {\n              md: 6,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n              name: `tz${control.label}`,\n              as: \"select\",\n              onChange: event => this.props.onComboChange(event, control, `tz${control.label}`),\n              formLabel: this.props.intl.formatMessage({\n                id: \"IDS_TIMEZONE\"\n              }),\n              placeholder: this.props.intl.formatMessage({\n                id: \"IDS_SELECTRECORD\"\n              }),\n              isMandatory: true // defaultValue={this.props.defaultTimeZone}\n              ,\n              value: this.props.selectedRecord[`tz${control.label}`] ? this.props.selectedRecord[`tz${control.label}`] : this.props.defaultTimeZone,\n              options: this.props.timeZoneList,\n              optionId: \"value\",\n              optionValue: \"label\",\n              isMulti: false,\n              isDisabled: control.readonly ? control.readonly : checkReadOnly,\n              isSearchable: false,\n              isClearable: false,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 37\n              }\n            }))) : /*#__PURE__*/React.createElement(DateTimePicker, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              className: \"form-control\",\n              placeholderText: this.props.intl.formatMessage({\n                id: \"IDS_SELECTDATE\"\n              }),\n              selected: selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : null,\n              dateFormat: control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"],\n              timeInputLabel: this.props.intl.formatMessage({\n                id: \"IDS_TIME\"\n              }),\n              showTimeInput: control.dateonly === true ? false : true,\n              showTimeSelectOnly: control.timeonly // isClearable={false}\n              ,\n              isDisabled: control.recordbasedreadonly ? this.props.selectedRecord[control.parentLabel] === control.recordbasedhide : control.readonly ? control.readonly : checkReadOnly,\n              isMandatory: control.mandatory,\n              maxDate: control.hideafterdate ? this.props.selectedRecord[control.label + \"max\"] ? this.props.selectedRecord[control.label + \"max\"] : this.props.CurrentTime : this.props.CurrentTime,\n              maxTime: control.hideafterdate ? this.props.selectedRecord[control.label + \"max\"] ? this.props.selectedRecord[control.label + \"max\"] : this.props.CurrentTime : this.props.CurrentTime,\n              minDate: control.hidebeforedate ? this.props.selectedRecord[control.label + \"min\"] ? this.props.selectedRecord[control.label + \"min\"] : this.props.CurrentTime : this.props.CurrentTime,\n              minTime: control.hidebeforedate ? this.props.selectedRecord[control.label + \"min\"] ? this.props.selectedRecord[control.label + \"min\"] : this.props.CurrentTime : this.props.CurrentTime,\n              onChange: date => this.props.handleDateChange(date, control.label),\n              value: this.props.selectedRecord[control.label + \"value\"] ? this.props.selectedRecord[control.label + \"value\"] : new Date(),\n              openToDate: this.props.selectedRecord[control.label + \"value\"] ? this.props.selectedRecord[control.label + \"value\"] : new Date(),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 29\n              }\n            }));\n          }\n\n        case 'checkbox':\n          {\n            let checkboxes = control.radioOptions ? control.radioOptions.tags : [];\n            const data = this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label].toLowerCase().split(\",\") : [];\n            return /*#__PURE__*/React.createElement(InputGroup, {\n              size: 'lg',\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              as: \"legend\",\n              htmlFor: control.label,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 29\n              }\n            }, control.displayname[this.props.userInfo.slanguagetypecode] || control.label, control.mandatory ? /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 130\n              }\n            }, \"*\") : \"\"), checkboxes.map(checkbox => /*#__PURE__*/React.createElement(Form.Check, {\n              inline: true,\n              type: \"checkbox\",\n              name: control.label,\n              label: control.isMultiLingualLabel ? this.props.intl.formatMessage({\n                id: checkbox.text\n              }) : checkbox.text // label={checkbox.text}\n              ,\n              onChange: event => this.props.onInputOnChange(event, checkbox.text),\n              id: checkbox.id,\n              checked: this.props.selectedRecord[control.label] ? data.includes(checkbox.text.toLowerCase().trim()) ? true : false : false,\n              defaultChecked: this.props.selectedRecord[control.label] ? data.includes(checkbox.text.toLowerCase().trim()) ? true : false : false,\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              size: 'lg',\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 33\n              }\n            }))));\n          }\n\n        case 'radio':\n          {\n            let radioButtons = control.radioOptions ? control.radioOptions.tags : [];\n            return /*#__PURE__*/React.createElement(\"fieldset\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              as: \"legend\",\n              htmlFor: control.label,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 29\n              }\n            }, control.displayname[this.props.userInfo.slanguagetypecode] || control.label, control.mandatory ? /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 175\n              }\n            }, \"*\") : \"\"), radioButtons.map(radioButton => /*#__PURE__*/React.createElement(Form.Check, {\n              inline: true,\n              type: \"radio\",\n              name: control.label,\n              label: radioButton.text,\n              onChange: event => this.props.onInputOnChange(event, radioButton.text),\n              id: radioButton.id,\n              checked: selectedRecord[control.label] ? radioButton.text.toLowerCase().trim() === selectedRecord[control.label].toLowerCase().trim() ? true : false : false,\n              defaultChecked: selectedRecord[control.label] ? radioButton.text.toLowerCase().trim() === selectedRecord[control.label].toLowerCase().trim() ? true : false : false,\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              disabled: control.readonly ? control.readonly : checkReadOnly,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 33\n              }\n            }))));\n          }\n\n        case 'files':\n          {\n            return /*#__PURE__*/React.createElement(DropZone, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              maxFiles: control.maxFiles || 1,\n              accept: control.accept && control.accept.value,\n              minSize: 0,\n              maxSize: 1,\n              onDrop: event => this.props.onDropFile(event, control.label, 1),\n              multiple: control.maxFiles > 1 ? true : false,\n              editFiles: this.props.selectedRecord ? this.props.selectedRecord : {} // attachmentTypeCode={this.props.operation === \"update\" ? attachmentType.PRN : \"\"}\n              // fileSizeName=\"nfilesize\"\n              ,\n              fileName: control.label,\n              deleteAttachment: this.props.deleteAttachment,\n              actionType: this.props.actionType,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 468,\n                columnNumber: 21\n              }\n            });\n          }\n\n        default:\n          return \"\";\n      }\n    };\n\n    this.onSaveClick = () => {\n      if (this.props.needValidation) {\n        const failedControls = [];\n        const mandatoryFields = [];\n        this.props.templateData.map(control => control.nmandatoryfield === transactionStatus.YES ? mandatoryFields.push(control) : '');\n        mandatoryFields.forEach(item => {\n          if (this.props.selectedRecord && this.props.selectedRecord[item.nchecklistversionqbcode] && this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue) {\n            if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"object\") {\n              //to validate FormSelectSearch component\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            } else if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"string\") {\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.trim().length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            } else {\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            }\n          } else {\n            const alertMessage = item.squestion;\n            failedControls.push(alertMessage);\n          }\n        }); // console.log(\"validationPassed:\", failedControls);\n\n        if (failedControls.length === 0) {\n          this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode);\n        } else {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${failedControls[0]}`);\n        }\n      } else {\n        this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode);\n      }\n    };\n\n    this.formElement = React.createRef();\n  }\n\n  componentDidMount() {\n    if (this.props.triggerCallback !== undefined && this.props.enableCallback) setTimeout(() => {\n      this.props.triggerCallback(this.formElement.current.clientHeight + 30);\n    }, 200);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.formElement,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 13\n      }\n    }, this.props.templateData ? this.props.templateData.map(item => /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 29\n      }\n    }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n      md: 12 / item.children.length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 41\n      }\n    }, column.children.map(component => {\n      return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 61\n        }\n      }, component.children.map(componentrow => /*#__PURE__*/React.createElement(Col, {\n        md: 12 / component.children.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 69\n        }\n      }, componentrow.recordbasedshowhide ? this.props.selectedRecord[componentrow.radioparentLabel] === componentrow.recordbasedhide ? \"\" : this.renderSwitch(componentrow, this.props.selectedRecord, item.children.length, component.children.length) : this.renderSwitch(componentrow, this.props.selectedRecord, item.children.length, component.children.length)))) : /*#__PURE__*/React.createElement(React.Fragment, null, component.recordbasedshowhide ? this.props.selectedRecord[component.radioparentLabel] === component.recordbasedhide ? \"\" : this.renderSwitch(component, this.props.selectedRecord, item.children.length) : this.renderSwitch(component, this.props.selectedRecord, item.children.length));\n    }))) : \"\")) : \"\");\n  }\n\n}\n\nexport default injectIntl(DynamicSlideout);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dynamicpreregdesign/DynamicSlideout.jsx"],"names":["React","Row","Col","Button","Form","InputGroup","Nav","injectIntl","FormTextarea","FormInput","FormSelectSearch","DateTimePicker","transactionStatus","toast","CustomSwitch","FormEmail","FormNumericInput","DropZone","faPlus","faSearch","faSleigh","faFilter","faEye","FontAwesomeIcon","DynamicSlideout","Component","constructor","props","renderSwitch","control","selectedRecord","componentLength","componentRowLength","index","editfield","findIndex","x","label","checkReadOnly","listdata","editableuntill","selectedSample","ntransactionstatus","includes","inputtype","height","recordbasedreadonly","radioparentLabel","recordbasedhide","e","custombuttonclick","intl","formatMessage","id","table","item","masterAdd","isAddMaster","userRoleControlRights","nformcode","ncontrolcode","addControlCode","addMasterRecord","event","onComboChange","displayname","userInfo","slanguagetypecode","mandatory","comboData","readonly","isView","onClickView","sfieldlength","onInputOnChange","isMultiLingualLabel","squestion","onNumericInputChange","precision","onNumericBlur","timezone","Date","loadcurrentdate","dateonly","timeonly","parentLabel","maxdate","CurrentTime","mindate","date","handleDateChange","defaultTimeZone","timeZoneList","hideafterdate","hidebeforedate","checkboxes","radioOptions","tags","data","toLowerCase","split","map","checkbox","text","trim","radioButtons","radioButton","maxFiles","accept","value","onDropFile","deleteAttachment","actionType","onSaveClick","needValidation","failedControls","mandatoryFields","templateData","nmandatoryfield","YES","push","forEach","nchecklistversionqbcode","sdefaultvalue","length","alertMessage","Login","nregtypecode","nregsubtypecode","info","formElement","createRef","componentDidMount","triggerCallback","undefined","enableCallback","setTimeout","current","clientHeight","render","children","column","component","hasOwnProperty","componentrow","recordbasedshowhide"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,IAA3B,EAAiCC,UAAjC,EAA6CC,GAA7C,QAAwD,iBAAxD;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAOC,YAAP,MAAyB,wDAAzB;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,OAAOC,cAAP,MAA2B,8DAA3B;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,YAAP,MAAyB,wDAAzB;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,OAAOC,QAAP,MAAqB,8CAArB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,QAA3B,EAAqCC,QAArC,EAA+CC,KAA/C,QAA2D,mCAA3D;AACA,SAASC,eAAT,QAAgC,gCAAhC;;AACA,MAAMC,eAAN,SAA8BxB,KAAK,CAACyB,SAApC,CAA8C;AAC1CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAInBC,YAJmB,GAIJ,CAACC,OAAD,EAAUC,cAAV,EAA0BC,eAA1B,EAA2CC,kBAA3C,KAAkE;AAC7E;AACA;AACA,YAAMC,KAAK,GAAG,KAAKN,KAAL,CAAWO,SAAX,GACV,KAAKP,KAAL,CAAWO,SAAX,CAAqBC,SAArB,CAA+BC,CAAC,IAAIA,CAAC,CAACC,KAAF,KAAYR,OAAO,CAACQ,KAAxD,CADU,GACuD,CAAC,CADtE;AAEA,UAAIC,aAAa,GAAG,KAApB;;AACA,UAAIL,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,cAAMM,QAAQ,GAAI,KAAKZ,KAAL,CAAWO,SAAX,CAAqBD,KAArB,KAA+B,KAAKN,KAAL,CAAWO,SAAX,CAAqBD,KAArB,EAA4BO,cAA5D,IAA+E,EAAhG;AACAF,QAAAA,aAAa,GAAGC,QAAQ,GAAG,KAAKZ,KAAL,CAAWc,cAAX,IAA6B,KAAKd,KAAL,CAAWc,cAAX,CAA0BC,kBAAvD,GACvB,CAACH,QAAQ,CAACI,QAAT,CAAkB,KAAKhB,KAAL,CAAWc,cAAX,CAA0BC,kBAA5C,CADsB,GAErB,KAFkB,GAEV,KAFd;AAGH;;AAED,cAAQb,OAAO,CAACe,SAAhB;AACI,aAAK,sBAAL;AAA6B;AACzB,gCACI,oBAAC,GAAD;AAAK,cAAA,KAAK,EAAE;AAAEC,gBAAAA,MAAM,EAAE;AAAV,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEI;AAAQ,cAAA,SAAS,EAAC,iCAAlB;AACI,cAAA,QAAQ,EAAEhB,OAAO,CAACiB,mBAAR,GACN,KAAKnB,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACkB,gBAAlC,MAAwDlB,OAAO,CAACmB,eAD1D,GAC4E,KAF1F,CAGI;AAHJ;AAII,cAAA,OAAO,EAAGC,CAAD,IAAO,KAAKtB,KAAL,CAAWuB,iBAAX,CAA6BD,CAA7B,EAAgCpB,OAAhC,CAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAMI,oBAAC,eAAD;AAAiB,cAAA,IAAI,EAAER,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,OAOK,KAAKM,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAExB,OAAO,CAACQ;AAAd,aAA9B,CAPL,CAFJ,CADJ,CADJ;AAgBH;;AACD,aAAK,qBAAL;AAA4B;AACxB,gCACI,0CAEQR,OAAO,CAACyB,KAAR,CAAcC,IAAd,CAAmBC,SAAnB,IAAgC3B,OAAO,CAAC4B,WAAxC,IACO,KAAK9B,KAAL,CAAW+B,qBADlB,IAC2C,KAAK/B,KAAL,CAAW+B,qBAAX,CAAiC7B,OAAO,CAACyB,KAAR,CAAcC,IAAd,CAAmBI,SAApD,CAD3C,IAEK,KAAKhC,KAAL,CAAW+B,qBAAX,CAAiC7B,OAAO,CAACyB,KAAR,CAAcC,IAAd,CAAmBI,SAApD,EAA+DxB,SAA/D,CAAyEC,CAAC,IAAIA,CAAC,CAACwB,YAAF,KAAmB/B,OAAO,CAACyB,KAAR,CAAcC,IAAd,CAAmBM,cAApH,MAAwI,CAAC,CAF9I,gBAGI,oBAAC,GAAD;AAAK,cAAA,KAAK,EAAE;AAAEhB,gBAAAA,MAAM,EAAE;AAAV,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAEd,eAAe,KAAK,CAApB,GAAwBC,kBAAkB,GAAG,CAArB,GAAyB,EAAzB,GAA8B,EAAtD,GAA2DA,kBAAkB,GAAG,CAArB,GAAyB,CAAzB,GAA6B,EAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI;AAAQ,cAAA,SAAS,EAAC,iCAAlB;AACI,cAAA,QAAQ,EAAEH,OAAO,CAACiB,mBAAR,GACN,KAAKnB,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACkB,gBAAlC,MAAwDlB,OAAO,CAACmB,eAD1D,GAC4E,KAF1F,CAGI;AAHJ;AAII,cAAA,OAAO,EAAGC,CAAD,IAAO,KAAKtB,KAAL,CAAWuB,iBAAX,CAA6BD,CAA7B,EAAgCpB,OAAhC,CAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAMI,oBAAC,eAAD;AAAiB,cAAA,IAAI,EAAEV,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,OAOK,KAAKQ,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAExB,OAAO,CAACQ;AAAd,aAA9B,CAPL,CADJ,CADJ,eAYI,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,GAAD,CAAK,IAAL;AACI,0BAAU,KAAKV,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CADd;AAEI,cAAA,SAAS,EAAC,kCAFd;AAGI,cAAA,OAAO,EAAGJ,CAAD,IAAO,KAAKtB,KAAL,CAAWmC,eAAX,CAA2BjC,OAA3B,CAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAKI,oBAAC,eAAD;AAAiB,cAAA,IAAI,EAAEX,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,CADJ,CAZJ,CAHJ,gBAwBa,oBAAC,GAAD;AAAK,cAAA,KAAK,EAAE;AAAE2B,gBAAAA,MAAM,EAAE;AAAV,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACL,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI;AAAQ,cAAA,SAAS,EAAC,iCAAlB;AACI,cAAA,QAAQ,EAAEhB,OAAO,CAACiB,mBAAR,GACN,KAAKnB,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACkB,gBAAlC,MAAwDlB,OAAO,CAACmB,eAD1D,GAC4E,KAF1F,CAGI;AAHJ;AAII,cAAA,OAAO,EAAGC,CAAD,IAAO,KAAKtB,KAAL,CAAWuB,iBAAX,CAA6BD,CAA7B,EAAgCpB,OAAhC,CAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAMI,oBAAC,eAAD;AAAiB,cAAA,IAAI,EAAEV,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,OAOK,KAAKQ,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAExB,OAAO,CAACQ;AAAd,aAA9B,CAPL,CADJ,CADK,CA1BrB,CADJ;AAyCH;;AACD,aAAK,OAAL;AAAc;AACV,gCACI,0CAEQR,OAAO,CAACyB,KAAR,CAAcC,IAAd,CAAmBC,SAAnB,IAAgC3B,OAAO,CAAC4B,WAAxC,IACO,KAAK9B,KAAL,CAAW+B,qBADlB,IAC2C,KAAK/B,KAAL,CAAW+B,qBAAX,CAAiC7B,OAAO,CAACyB,KAAR,CAAcC,IAAd,CAAmBI,SAApD,CAD3C,IAEK,KAAKhC,KAAL,CAAW+B,qBAAX,CAAiC7B,OAAO,CAACyB,KAAR,CAAcC,IAAd,CAAmBI,SAApD,EAA+DxB,SAA/D,CAAyEC,CAAC,IAAIA,CAAC,CAACwB,YAAF,KAAmB/B,OAAO,CAACyB,KAAR,CAAcC,IAAd,CAAmBM,cAApH,MAAwI,CAAC,CAF9I,gBAGI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAE9B,eAAe,KAAK,CAApB,GAAwBC,kBAAkB,GAAG,CAArB,GAAyB,EAAzB,GAA8B,EAAtD,GAA2DA,kBAAkB,GAAG,CAArB,GAAyB,CAAzB,GAA6B,EAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,gBAAD;AACI,cAAA,IAAI,EAAEH,OAAO,CAACQ,KADlB;AAEI,cAAA,EAAE,EAAE,QAFR;AAGI,cAAA,QAAQ,EAAG0B,KAAD,IAAW,KAAKpC,KAAL,CAAWqC,aAAX,CAAyBD,KAAzB,EAAgClC,OAAhC,CAHzB;AAII,cAAA,SAAS,EAAEA,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KAJrF;AAKI,cAAA,WAAW,EAAE,KAAKV,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CALjB;AAMI,cAAA,WAAW,EAAExB,OAAO,CAACuC,SANzB;AAOI,cAAA,KAAK,EAAE,KAAKzC,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,IAA2C,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,CAA3C,GAAsF,EAPjG;AAQI,cAAA,OAAO,EAAE,KAAKV,KAAL,CAAW0C,SAAX,IAAwB,KAAK1C,KAAL,CAAW0C,SAAX,CAAqBxC,OAAO,CAACQ,KAA7B,CAAxB,GAA8D,KAAKV,KAAL,CAAW0C,SAAX,CAAqBxC,OAAO,CAACQ,KAA7B,CAA9D,GAAoG,EARjH;AASI,cAAA,QAAQ,EAAE,OATd;AAUI,cAAA,WAAW,EAAE,OAVjB;AAWI,cAAA,OAAO,EAAE,KAXb;AAYI,cAAA,WAAW,EAAER,OAAO,CAACuC,SAAR,GAAoB,KAApB,GAA4B,IAZ7C;AAaI,cAAA,UAAU,EAAEvC,OAAO,CAACiB,mBAAR,GACR,KAAKnB,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACkB,gBAAlC,MAAwDlB,OAAO,CAACmB,eADxD,GAC0EnB,OAAO,CAACyC,QAAR,GAC9EzC,OAAO,CAACyC,QADsE,GAC3DhC,aAf/B;AAgBI,cAAA,YAAY,EAAE,KAhBlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ,eAqBI,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAOI,oBAAC,GAAD,CAAK,IAAL;AACI,0BAAU,KAAKX,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CADd;AAEI,cAAA,SAAS,EAAC,kCAFd;AAGI,cAAA,OAAO,EAAGJ,CAAD,IAAO,KAAKtB,KAAL,CAAWmC,eAAX,CAA2BjC,OAA3B,CAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAKI,oBAAC,eAAD;AAAiB,cAAA,IAAI,EAAEX,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,CAPJ,CArBJ,CAHJ,GAyCKW,OAAO,CAAC0C,MAAR,gBACD,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAExC,eAAe,KAAK,CAApB,GAAwBC,kBAAkB,GAAG,CAArB,GAAyB,EAAzB,GAA8B,EAAtD,GAA2DA,kBAAkB,GAAG,CAArB,GAAyB,CAAzB,GAA6B,EAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,gBAAD;AACI,cAAA,IAAI,EAAEH,OAAO,CAACQ,KADlB;AAEI,cAAA,EAAE,EAAE,QAFR;AAGI,cAAA,QAAQ,EAAG0B,KAAD,IAAW,KAAKpC,KAAL,CAAWqC,aAAX,CAAyBD,KAAzB,EAAgClC,OAAhC,CAHzB;AAII,cAAA,SAAS,EAAEA,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KAJrF;AAKI,cAAA,WAAW,EAAE,KAAKV,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CALjB;AAMI,cAAA,WAAW,EAAExB,OAAO,CAACuC,SANzB;AAOI,cAAA,KAAK,EAAE,KAAKzC,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,IAA2C,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,CAA3C,GAAsF,EAPjG;AAQI,cAAA,OAAO,EAAE,KAAKV,KAAL,CAAW0C,SAAX,IAAwB,KAAK1C,KAAL,CAAW0C,SAAX,CAAqBxC,OAAO,CAACQ,KAA7B,CAAxB,GAA8D,KAAKV,KAAL,CAAW0C,SAAX,CAAqBxC,OAAO,CAACQ,KAA7B,CAA9D,GAAoG,EARjH;AASI,cAAA,QAAQ,EAAE,OATd;AAUI,cAAA,WAAW,EAAE,OAVjB;AAWI,cAAA,OAAO,EAAE,KAXb;AAYI,cAAA,WAAW,EAAER,OAAO,CAACuC,SAAR,GAAoB,KAApB,GAA4B,IAZ7C;AAaI,cAAA,UAAU,EAAEvC,OAAO,CAACiB,mBAAR,GACR,KAAKnB,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACkB,gBAAlC,MAAwDlB,OAAO,CAACmB,eADxD,GAC0EnB,OAAO,CAACyC,QAAR,GAC9EzC,OAAO,CAACyC,QADsE,GAC3DhC,aAf/B;AAgBI,cAAA,YAAY,EAAE,KAhBlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ,eAqBI,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,GAAD,CAAK,IAAL;AACI,0BAAU,KAAKX,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CADd;AAEI,cAAA,SAAS,EAAC,kCAFd;AAGI,cAAA,OAAO,EAAGJ,CAAD,IAAO,KAAKtB,KAAL,CAAW6C,WAAX,CAAuB3C,OAAvB,CAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAKI,oBAAC,eAAD;AAAiB,cAAA,IAAI,EAAEP,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,CADJ,CArBJ,CADC,gBAiCA,oBAAC,gBAAD;AACG,cAAA,IAAI,EAAEO,OAAO,CAACQ,KADjB;AAEG,cAAA,EAAE,EAAE,QAFP;AAGG,cAAA,QAAQ,EAAG0B,KAAD,IAAW,KAAKpC,KAAL,CAAWqC,aAAX,CAAyBD,KAAzB,EAAgClC,OAAhC,CAHxB;AAIG,cAAA,SAAS,EAAEA,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KAJpF;AAKG,cAAA,WAAW,EAAE,KAAKV,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CALhB;AAMG,cAAA,WAAW,EAAExB,OAAO,CAACuC,SANxB;AAOG,cAAA,KAAK,EAAE,KAAKzC,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,IAA2C,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,CAA3C,GAAsF,EAPhG;AAQG,cAAA,OAAO,EAAE,KAAKV,KAAL,CAAW0C,SAAX,IAAwB,KAAK1C,KAAL,CAAW0C,SAAX,CAAqBxC,OAAO,CAACQ,KAA7B,CAAxB,GAA8D,KAAKV,KAAL,CAAW0C,SAAX,CAAqBxC,OAAO,CAACQ,KAA7B,CAA9D,GAAoG,EARhH;AASG,cAAA,QAAQ,EAAE,OATb;AAUG,cAAA,WAAW,EAAE,OAVhB;AAWG,cAAA,OAAO,EAAE,KAXZ;AAYG,cAAA,WAAW,EAAER,OAAO,CAACuC,SAAR,GAAoB,KAApB,GAA4B,IAZ5C;AAaG,cAAA,UAAU,EAAEvC,OAAO,CAACiB,mBAAR,GACR,KAAKnB,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACkB,gBAAlC,MAAwDlB,OAAO,CAACmB,eADxD,GAC0EnB,OAAO,CAACyC,QAAR,GAC9EzC,OAAO,CAACyC,QADsE,GAC3DhC,aAf9B;AAgBG,cAAA,YAAY,EAAE,KAhBjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5Eb,CADJ;AAkGH;;AACD,aAAK,WAAL;AAAkB;AACd,gCACI,oBAAC,SAAD;AACI,cAAA,IAAI,EAAET,OAAO,CAACQ,KADlB;AAEI,cAAA,KAAK,EAAER,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KAFjF;AAGI,cAAA,IAAI,EAAC,MAHT;AAII,cAAA,WAAW,EAAER,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KAJvF;AAKI,cAAA,KAAK,EAAE,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,IAA2C,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,CAA3C,GAAsF,EALjG;AAMI,cAAA,WAAW,EAAER,OAAO,CAACuC,SANzB;AAOI,cAAA,QAAQ,EAAEvC,OAAO,CAACuC,SAPtB;AAQI,cAAA,SAAS,EAAEvC,OAAO,CAAC4C,YARvB;AASI,cAAA,UAAU,EAAE5C,OAAO,CAACiB,mBAAR,GACR,KAAKnB,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACkB,gBAAlC,MAAwDlB,OAAO,CAACmB,eADxD,GAC0EnB,OAAO,CAACyC,QAAR,GAC9EzC,OAAO,CAACyC,QADsE,GAC3DhC,aAX/B;AAYI,cAAA,QAAQ,EAAGyB,KAAD,IAAW,KAAKpC,KAAL,CAAW+C,eAAX,CAA2BX,KAA3B,EAAkClC,OAAO,CAACQ,KAA1C,CAZzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAiBH;;AACD,aAAK,OAAL;AAAc;AACV,gCACI,oBAAC,SAAD;AACI,cAAA,IAAI,EAAER,OAAO,CAACQ,KADlB;AAEI,cAAA,KAAK,EAAER,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KAFjF;AAGI,cAAA,IAAI,EAAC,OAHT;AAII,cAAA,KAAK,EAAE,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,IAA2C,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,CAA3C,GAAsF,EAJjG;AAKI,cAAA,WAAW,EAAER,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KALvF;AAMI,cAAA,WAAW,EAAER,OAAO,CAACuC,SANzB;AAOI,cAAA,QAAQ,EAAEvC,OAAO,CAACuC,SAPtB;AAQI,cAAA,SAAS,EAAEvC,OAAO,CAAC4C,YARvB;AASI,cAAA,UAAU,EAAE5C,OAAO,CAACiB,mBAAR,GACR,KAAKnB,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACkB,gBAAlC,MAAwDlB,OAAO,CAACmB,eADxD,GAC0EnB,OAAO,CAACyC,QAAR,GAC9EzC,OAAO,CAACyC,QADsE,GAC3DhC,aAX/B;AAYI,cAAA,QAAQ,EAAGyB,KAAD,IAAW,KAAKpC,KAAL,CAAW+C,eAAX,CAA2BX,KAA3B,EAAkClC,OAAO,CAACQ,KAA1C,CAZzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAgBH;;AACD,aAAK,UAAL;AAAiB;AACb,gCACI,oBAAC,YAAD;AACI,cAAA,IAAI,EAAER,OAAO,CAACQ,KADlB;AAEI,cAAA,KAAK,EAAER,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KAFjF;AAGI,cAAA,IAAI,EAAC,MAHT;AAII,cAAA,KAAK,EAAE,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,IAA2C,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,CAA3C,GAAsF,EAJjG;AAKI,cAAA,WAAW,EAAER,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KALvF;AAMI,cAAA,WAAW,EAAER,OAAO,CAACuC,SANzB;AAOI,cAAA,QAAQ,EAAEvC,OAAO,CAACuC,SAPtB;AAQI,cAAA,QAAQ,EAAGL,KAAD,IAAW,KAAKpC,KAAL,CAAW+C,eAAX,CAA2BX,KAA3B,EAAkClC,OAAO,CAACQ,KAA1C,CARzB;AASI,cAAA,IAAI,EAAC,GATT;AAUI,cAAA,SAAS,EAAER,OAAO,CAAC4C,YAVvB;AAWI,cAAA,UAAU,EAAE5C,OAAO,CAACiB,mBAAR,GACR,KAAKnB,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACkB,gBAAlC,MAAwDlB,OAAO,CAACmB,eADxD,GAC0EnB,OAAO,CAACyC,QAAR,GAC9EzC,OAAO,CAACyC,QADsE,GAC3DhC,aAb/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAiBH;;AACD,aAAK,QAAL;AACI,8BACI,oBAAC,YAAD;AACI,YAAA,KAAK,EAAET,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KADjF;AAEI,YAAA,IAAI,EAAC,QAFT;AAGI,YAAA,IAAI,EAAER,OAAO,CAACQ,KAHlB;AAII,YAAA,QAAQ,EAAG0B,KAAD,IAAW,KAAKpC,KAAL,CAAW+C,eAAX,CAA2BX,KAA3B,CAJzB;AAKI,YAAA,WAAW,EAAElC,OAAO,CAACQ,KALzB;AAMI,YAAA,YAAY,EAAE,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,KAA4C,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,MAA6C,CAAzF,GAA6F,IAA7F,GAAoG,KANtH;AAOI,YAAA,OAAO,EAAE,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,KAA4C,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,MAA6C,CAAzF,GAA6F,IAA7F,GAAoG,KAPjH;AAQI,YAAA,QAAQ,EAAER,OAAO,CAACyC,QAAR,GACNzC,OAAO,CAACyC,QADF,GACahC,aAT3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;;AAaJ,aAAK,CAAL;AAAQ;AACJ,gCACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAaT,OAAO,CAAC8C,mBAAR,GAA8B,KAAKhD,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AACrEC,cAAAA,EAAE,EAAExB,OAAO,CAAC+C;AADyD,aAA9B,CAA9B,GAER/C,OAAO,CAAC+C,SAFb,EAEwB/C,OAAO,CAACuC,SAAR,iBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAF7C,CADJ,CADJ;AAOH;;AACD,aAAK,CAAL;AAAQ;AACJ,gCACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,IAAD,CAAM,KAAN;AAAY,cAAA,OAAO,EAAEvC,OAAO,CAAC+C,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAyC/C,OAAO,CAAC+C,SAAjD,EAA4D/C,OAAO,CAACuC,SAAR,iBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAjF,CADJ,eAEI,oBAAC,MAAD;AAAQ,cAAA,SAAS,EAAC,KAAlB;AAAwB,cAAA,IAAI,EAAEvC,OAAO,CAAC+C,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACK/C,OAAO,CAAC+C,SADb,CAFJ,CADJ;AAQH;;AACD,aAAK,SAAL;AAAgB;AACZ,gCACI,oBAAC,gBAAD;AACI,cAAA,IAAI,EAAE/C,OAAO,CAACQ,KADlB;AAEI,cAAA,KAAK,EAAER,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KAFjF;AAGI,cAAA,SAAS,EAAC,cAHd;AAII,cAAA,IAAI,EAAC,MAJT;AAKI,cAAA,MAAM,EAAE,IALZ;AAMI,cAAA,KAAK,EAAE,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,IAA2C,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,CAA3C,GAAsF,EANjG;AAOI,cAAA,WAAW,EAAER,OAAO,CAACuC,SAPzB;AAQI,cAAA,QAAQ,EACJvC,OAAO,CAACuC,SAThB;AAUI,cAAA,SAAS,EAAEvC,OAAO,CAAC4C,YAVvB;AAWI,cAAA,UAAU,EAAE5C,OAAO,CAACiB,mBAAR,GACR,KAAKnB,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACkB,gBAAlC,MAAwDlB,OAAO,CAACmB,eADxD,GAC0EnB,OAAO,CAACyC,QAAR,GAC9EzC,OAAO,CAACyC,QADsE,GAC3DhC,aAb/B;AAcI,cAAA,QAAQ,EAAGyB,KAAD,IAAW,KAAKpC,KAAL,CAAWkD,oBAAX,CAAgCd,KAAhC,EAAuClC,OAAO,CAACQ,KAA/C,CAdzB;AAeI,cAAA,SAAS,EAAER,OAAO,CAACiD,SAAR,IAAqB,CAfpC;AAgBI,cAAA,MAAM,EAAGf,KAAD,IAAW,KAAKpC,KAAL,CAAWoD,aAAX,CAAyBhB,KAAzB,EAAgClC,OAAhC,CAhBvB,CAiBI;AACA;AAlBJ;AAmBI,cAAA,OAAO,EAAE,IAnBb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAuBH;;AACD,aAAK,MAAL;AAAa;AACT,gCACI,0CACKA,OAAO,CAACmD,QAAR,gBACG,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,cAAD;AACI,cAAA,IAAI,EAAEnD,OAAO,CAACQ,KADlB;AAEI,cAAA,KAAK,EAAER,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KAFjF;AAGI,cAAA,SAAS,EAAC,cAHd;AAII,cAAA,eAAe,EAAE,KAAKV,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CAJrB;AAKI,cAAA,QAAQ,EAAEvB,cAAc,IAAI,KAAKH,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,CAAlB,GACN,IAAI4C,IAAJ,CAAS,KAAKtD,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,CAAT,CADM,GAC+CR,OAAO,CAACqD,eAAR,GAA0B,IAAID,IAAJ,EAA1B,GAAuC,IANpG;AAOI,cAAA,UAAU,EAAEpD,OAAO,CAACsD,QAAR,KAAqB,IAArB,GAA4B,KAAKxD,KAAL,CAAWuC,QAAX,CAAoB,WAApB,CAA5B,GAA+DrC,OAAO,CAACuD,QAAR,GAAmB,OAAnB,GAA6B,KAAKzD,KAAL,CAAWuC,QAAX,CAAoB,eAApB,CAP5G;AAQI,cAAA,cAAc,EAAE,KAAKvC,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CARpB;AASI,cAAA,aAAa,EAAExB,OAAO,CAACsD,QAAR,KAAqB,IAArB,GAA4B,KAA5B,GAAoC,IATvD;AAUI,cAAA,kBAAkB,EAAEtD,OAAO,CAACuD,QAVhC;AAWI,cAAA,UAAU,EAAEvD,OAAO,CAACiB,mBAAR,GACR,KAAKnB,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACwD,WAAlC,MAAmDxD,OAAO,CAACmB,eADnD,GACqEnB,OAAO,CAACyC,QAAR,GACzEzC,OAAO,CAACyC,QADiE,GACtDhC,aAb/B,CAcI;AAdJ;AAeI,cAAA,WAAW,EAAET,OAAO,CAACuC,SAfzB;AAgBI,cAAA,OAAO,EAAEvC,OAAO,CAACyD,OAAR,GAAkB,IAAIL,IAAJ,CAASpD,OAAO,CAACyD,OAAjB,CAAlB,GAA8C,KAAK3D,KAAL,CAAW4D,WAhBtE;AAiBI,cAAA,OAAO,EAAE1D,OAAO,CAACyD,OAAR,GAAkB,IAAIL,IAAJ,CAASpD,OAAO,CAACyD,OAAjB,CAAlB,GAA8C,KAAK3D,KAAL,CAAW4D,WAjBtE;AAkBI,cAAA,OAAO,EAAE1D,OAAO,CAAC2D,OAAR,GAAkB,IAAIP,IAAJ,CAASpD,OAAO,CAAC2D,OAAjB,CAAlB,GAA8C,KAAK7D,KAAL,CAAW4D,WAlBtE;AAmBI,cAAA,OAAO,EAAE1D,OAAO,CAAC2D,OAAR,GAAkB,IAAIP,IAAJ,CAASpD,OAAO,CAAC2D,OAAjB,CAAlB,GAA8C,KAAK7D,KAAL,CAAW4D,WAnBtE;AAoBI,cAAA,QAAQ,EAAGE,IAAD,IAAU,KAAK9D,KAAL,CAAW+D,gBAAX,CAA4BD,IAA5B,EAAkC5D,OAAO,CAACQ,KAA1C,CApBxB;AAqBI,cAAA,KAAK,EAAE,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAR,GAAgB,OAA1C,IACH,IAAI4C,IAAJ,CAAS,KAAKtD,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAR,GAAgB,OAA1C,CAAT,CADG,GAC4D,IAAI4C,IAAJ,EAtBvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ,eA2BI,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,gBAAD;AACI,cAAA,IAAI,EAAG,KAAIpD,OAAO,CAACQ,KAAM,EAD7B;AAEI,cAAA,EAAE,EAAE,QAFR;AAGI,cAAA,QAAQ,EAAG0B,KAAD,IAAW,KAAKpC,KAAL,CAAWqC,aAAX,CAAyBD,KAAzB,EAAgClC,OAAhC,EAA0C,KAAIA,OAAO,CAACQ,KAAM,EAA5D,CAHzB;AAII,cAAA,SAAS,EAAE,KAAKV,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CAJf;AAKI,cAAA,WAAW,EAAE,KAAK1B,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CALjB;AAMI,cAAA,WAAW,EAAE,IANjB,CAOI;AAPJ;AAQI,cAAA,KAAK,EAAE,KAAK1B,KAAL,CAAWG,cAAX,CAA2B,KAAID,OAAO,CAACQ,KAAM,EAA7C,IAAkD,KAAKV,KAAL,CAAWG,cAAX,CAA2B,KAAID,OAAO,CAACQ,KAAM,EAA7C,CAAlD,GAAoG,KAAKV,KAAL,CAAWgE,eAR1H;AASI,cAAA,OAAO,EAAE,KAAKhE,KAAL,CAAWiE,YATxB;AAUI,cAAA,QAAQ,EAAE,OAVd;AAWI,cAAA,WAAW,EAAE,OAXjB;AAYI,cAAA,OAAO,EAAE,KAZb;AAcI,cAAA,UAAU,EAAE/D,OAAO,CAACyC,QAAR,GACRzC,OAAO,CAACyC,QADA,GACWhC,aAf3B;AAgBI,cAAA,YAAY,EAAE,KAhBlB;AAiBI,cAAA,WAAW,EAAE,KAjBjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CA3BJ,CADH,gBAkDG,oBAAC,cAAD;AACI,cAAA,IAAI,EAAET,OAAO,CAACQ,KADlB;AAEI,cAAA,KAAK,EAAER,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KAFjF;AAGI,cAAA,SAAS,EAAC,cAHd;AAII,cAAA,eAAe,EAAE,KAAKV,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CAJrB;AAKI,cAAA,QAAQ,EAAEvB,cAAc,IAAI,KAAKH,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,CAAlB,GACN,IAAI4C,IAAJ,CAAS,KAAKtD,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,CAAT,CADM,GAC+C,IAN7D;AAOI,cAAA,UAAU,EAAER,OAAO,CAACsD,QAAR,KAAqB,IAArB,GAA4B,KAAKxD,KAAL,CAAWuC,QAAX,CAAoB,WAApB,CAA5B,GAA+DrC,OAAO,CAACuD,QAAR,GAAmB,OAAnB,GAA6B,KAAKzD,KAAL,CAAWuC,QAAX,CAAoB,eAApB,CAP5G;AAQI,cAAA,cAAc,EAAE,KAAKvC,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CARpB;AASI,cAAA,aAAa,EAAExB,OAAO,CAACsD,QAAR,KAAqB,IAArB,GAA4B,KAA5B,GAAoC,IATvD;AAUI,cAAA,kBAAkB,EAAEtD,OAAO,CAACuD,QAVhC,CAWI;AAXJ;AAYI,cAAA,UAAU,EAAEvD,OAAO,CAACiB,mBAAR,GACR,KAAKnB,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACwD,WAAlC,MAAmDxD,OAAO,CAACmB,eADnD,GACqEnB,OAAO,CAACyC,QAAR,GACzEzC,OAAO,CAACyC,QADiE,GACtDhC,aAd/B;AAeI,cAAA,WAAW,EAAET,OAAO,CAACuC,SAfzB;AAgBI,cAAA,OAAO,EAAEvC,OAAO,CAACgE,aAAR,GAAwB,KAAKlE,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAR,GAAgB,KAA1C,IAC7B,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAR,GAAgB,KAA1C,CAD6B,GACsB,KAAKV,KAAL,CAAW4D,WADzD,GACuE,KAAK5D,KAAL,CAAW4D,WAjB/F;AAkBI,cAAA,OAAO,EAAE1D,OAAO,CAACgE,aAAR,GAAwB,KAAKlE,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAR,GAAgB,KAA1C,IAC7B,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAR,GAAgB,KAA1C,CAD6B,GACsB,KAAKV,KAAL,CAAW4D,WADzD,GACuE,KAAK5D,KAAL,CAAW4D,WAnB/F;AAoBI,cAAA,OAAO,EAAE1D,OAAO,CAACiE,cAAR,GAAyB,KAAKnE,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAR,GAAgB,KAA1C,IAC9B,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAR,GAAgB,KAA1C,CAD8B,GACqB,KAAKV,KAAL,CAAW4D,WADzD,GACuE,KAAK5D,KAAL,CAAW4D,WArB/F;AAsBI,cAAA,OAAO,EAAE1D,OAAO,CAACiE,cAAR,GAAyB,KAAKnE,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAR,GAAgB,KAA1C,IAC9B,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAR,GAAgB,KAA1C,CAD8B,GACqB,KAAKV,KAAL,CAAW4D,WADzD,GACuE,KAAK5D,KAAL,CAAW4D,WAvB/F;AAwBI,cAAA,QAAQ,EAAGE,IAAD,IAAU,KAAK9D,KAAL,CAAW+D,gBAAX,CAA4BD,IAA5B,EAAkC5D,OAAO,CAACQ,KAA1C,CAxBxB;AAyBI,cAAA,KAAK,EAAE,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAR,GAAgB,OAA1C,IACH,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAR,GAAgB,OAA1C,CADG,GACkD,IAAI4C,IAAJ,EA1B7D;AA2BI,cAAA,UAAU,EAAE,KAAKtD,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAR,GAAgB,OAA1C,IACR,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAR,GAAgB,OAA1C,CADQ,GAC6C,IAAI4C,IAAJ,EA5B7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnDR,CADJ;AAuFH;;AACD,aAAK,UAAL;AAAiB;AACb,gBAAIc,UAAU,GAAGlE,OAAO,CAACmE,YAAR,GAAuBnE,OAAO,CAACmE,YAAR,CAAqBC,IAA5C,GAAmD,EAApE;AACA,kBAAMC,IAAI,GAAG,KAAKvE,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,IACT,KAAKV,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,EAAyC8D,WAAzC,GAAuDC,KAAvD,CAA6D,GAA7D,CADS,GAC2D,EADxE;AAGA,gCACI,oBAAC,UAAD;AAAY,cAAA,IAAI,EAAE,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,IAAD,CAAM,KAAN;AAAY,cAAA,EAAE,EAAC,QAAf;AAAwB,cAAA,OAAO,EAAEvE,OAAO,CAACQ,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACIR,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KAD1E,EACiFR,OAAO,CAACuC,SAAR,gBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAApB,GAAmC,EADpH,CADJ,EAGK2B,UAAU,CAACM,GAAX,CAAeC,QAAQ,iBAEpB,oBAAC,IAAD,CAAM,KAAN;AACI,cAAA,MAAM,EAAE,IADZ;AAEI,cAAA,IAAI,EAAC,UAFT;AAGI,cAAA,IAAI,EAAEzE,OAAO,CAACQ,KAHlB;AAII,cAAA,KAAK,EAAER,OAAO,CAAC8C,mBAAR,GAA8B,KAAKhD,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAEiD,QAAQ,CAACC;AAAf,eAA9B,CAA9B,GAAqFD,QAAQ,CAACC,IAJzG,CAKI;AALJ;AAMI,cAAA,QAAQ,EAAGxC,KAAD,IAAW,KAAKpC,KAAL,CAAW+C,eAAX,CAA2BX,KAA3B,EAAkCuC,QAAQ,CAACC,IAA3C,CANzB;AAOI,cAAA,EAAE,EAAED,QAAQ,CAACjD,EAPjB;AASI,cAAA,OAAO,EAAE,KAAK1B,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,IACL6D,IAAI,CAACvD,QAAL,CAAc2D,QAAQ,CAACC,IAAT,CAAcJ,WAAd,GAA4BK,IAA5B,EAAd,IAAoD,IAApD,GAA2D,KADtD,GAC8D,KAV3E;AAYI,cAAA,cAAc,EAAE,KAAK7E,KAAL,CAAWG,cAAX,CAA0BD,OAAO,CAACQ,KAAlC,IACZ6D,IAAI,CAACvD,QAAL,CAAc2D,QAAQ,CAACC,IAAT,CAAcJ,WAAd,GAA4BK,IAA5B,EAAd,IAAoD,IAApD,GAA2D,KAD/C,GACuD,KAb3E;AAcI,cAAA,WAAW,EAAE3E,OAAO,CAACuC,SAdzB;AAeI,cAAA,QAAQ,EAAEvC,OAAO,CAACuC,SAftB;AAgBI,cAAA,IAAI,EAAE,IAhBV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFH,CAHL,CADJ,CADJ;AA+BH;;AACD,aAAK,OAAL;AAAc;AACV,gBAAIqC,YAAY,GAAG5E,OAAO,CAACmE,YAAR,GAAuBnE,OAAO,CAACmE,YAAR,CAAqBC,IAA5C,GAAmD,EAAtE;AACA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,IAAD,CAAM,KAAN;AAAY,cAAA,EAAE,EAAC,QAAf;AAAwB,cAAA,OAAO,EAAEpE,OAAO,CAACQ,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAiDR,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KAAvH,EAA8HR,OAAO,CAACuC,SAAR,gBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAApB,GAAmC,EAAjK,CADJ,EAEKqC,YAAY,CAACJ,GAAb,CAAiBK,WAAW,iBAEzB,oBAAC,IAAD,CAAM,KAAN;AACI,cAAA,MAAM,EAAE,IADZ;AAEI,cAAA,IAAI,EAAC,OAFT;AAGI,cAAA,IAAI,EAAE7E,OAAO,CAACQ,KAHlB;AAII,cAAA,KAAK,EAAEqE,WAAW,CAACH,IAJvB;AAKI,cAAA,QAAQ,EAAGxC,KAAD,IAAW,KAAKpC,KAAL,CAAW+C,eAAX,CAA2BX,KAA3B,EAAkC2C,WAAW,CAACH,IAA9C,CALzB;AAMI,cAAA,EAAE,EAAEG,WAAW,CAACrD,EANpB;AAOI,cAAA,OAAO,EAAEvB,cAAc,CAACD,OAAO,CAACQ,KAAT,CAAd,GACLqE,WAAW,CAACH,IAAZ,CAAiBJ,WAAjB,GAA+BK,IAA/B,OAA0C1E,cAAc,CAACD,OAAO,CAACQ,KAAT,CAAd,CAA8B8D,WAA9B,GAA4CK,IAA5C,EAA1C,GAA+F,IAA/F,GAAsG,KADjG,GACyG,KARtH;AASI,cAAA,cAAc,EAAE1E,cAAc,CAACD,OAAO,CAACQ,KAAT,CAAd,GACZqE,WAAW,CAACH,IAAZ,CAAiBJ,WAAjB,GAA+BK,IAA/B,OAA0C1E,cAAc,CAACD,OAAO,CAACQ,KAAT,CAAd,CAA8B8D,WAA9B,GAA4CK,IAA5C,EAA1C,GAA+F,IAA/F,GAAsG,KAD1F,GACkG,KAVtH;AAWI,cAAA,WAAW,EAAE3E,OAAO,CAACuC,SAXzB;AAYI,cAAA,QAAQ,EAAEvC,OAAO,CAACuC,SAZtB;AAaI,cAAA,QAAQ,EAAEvC,OAAO,CAACyC,QAAR,GACNzC,OAAO,CAACyC,QADF,GACahC,aAd3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFH,CAFL,CADJ,CADJ;AA2BH;;AACD,aAAK,OAAL;AAAc;AACV,gCACI,oBAAC,QAAD;AACI,cAAA,IAAI,EAAET,OAAO,CAACQ,KADlB;AAEI,cAAA,KAAK,EAAER,OAAO,CAACoC,WAAR,CAAoB,KAAKtC,KAAL,CAAWuC,QAAX,CAAoBC,iBAAxC,KAA8DtC,OAAO,CAACQ,KAFjF;AAGI,cAAA,QAAQ,EAAER,OAAO,CAAC8E,QAAR,IAAoB,CAHlC;AAII,cAAA,MAAM,EAAE9E,OAAO,CAAC+E,MAAR,IAAkB/E,OAAO,CAAC+E,MAAR,CAAeC,KAJ7C;AAKI,cAAA,OAAO,EAAE,CALb;AAMI,cAAA,OAAO,EAAE,CANb;AAOI,cAAA,MAAM,EAAG9C,KAAD,IAAW,KAAKpC,KAAL,CAAWmF,UAAX,CAAsB/C,KAAtB,EAA6BlC,OAAO,CAACQ,KAArC,EAA4C,CAA5C,CAPvB;AAQI,cAAA,QAAQ,EAAER,OAAO,CAAC8E,QAAR,GAAmB,CAAnB,GAAuB,IAAvB,GAA8B,KAR5C;AASI,cAAA,SAAS,EAAE,KAAKhF,KAAL,CAAWG,cAAX,GAA4B,KAAKH,KAAL,CAAWG,cAAvC,GAAwD,EATvE,CAUI;AACA;AAXJ;AAYI,cAAA,QAAQ,EAAED,OAAO,CAACQ,KAZtB;AAaI,cAAA,gBAAgB,EAAE,KAAKV,KAAL,CAAWoF,gBAbjC;AAcI,cAAA,UAAU,EAAE,KAAKpF,KAAL,CAAWqF,UAd3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAkBH;;AACD;AACI,iBAAQ,EAAR;AArcR;AAucH,KAxdkB;;AAAA,SAydnBC,WAzdmB,GAydL,MAAM;AAChB,UAAI,KAAKtF,KAAL,CAAWuF,cAAf,EAA+B;AAC3B,cAAMC,cAAc,GAAG,EAAvB;AACA,cAAMC,eAAe,GAAG,EAAxB;AACA,aAAKzF,KAAL,CAAW0F,YAAX,CAAwBhB,GAAxB,CAA4BxE,OAAO,IAC/BA,OAAO,CAACyF,eAAR,KAA4B1G,iBAAiB,CAAC2G,GAA9C,GAAoDH,eAAe,CAACI,IAAhB,CAAqB3F,OAArB,CAApD,GAAoF,EADxF;AAIAuF,QAAAA,eAAe,CAACK,OAAhB,CAAwBlE,IAAI,IAAI;AAE5B,cAAI,KAAK5B,KAAL,CAAWG,cAAX,IAA6B,KAAKH,KAAL,CAAWG,cAAX,CAA0ByB,IAAI,CAACmE,uBAA/B,CAA7B,IAAwF,KAAK/F,KAAL,CAAWG,cAAX,CAA0ByB,IAAI,CAACmE,uBAA/B,EAAwDC,aAApJ,EAAmK;AAC/J,gBAAI,OAAO,KAAKhG,KAAL,CAAWG,cAAX,CAA0ByB,IAAI,CAACmE,uBAA/B,EAAwDC,aAA/D,KAAiF,QAArF,EAA+F;AAC3F;AACA,kBAAI,KAAKhG,KAAL,CAAWG,cAAX,CAA0ByB,IAAI,CAACmE,uBAA/B,EAAwDC,aAAxD,CAAsEC,MAAtE,KAAiF,CAArF,EAAwF;AACpF,sBAAMC,YAAY,GAAGtE,IAAI,CAACqB,SAA1B;AACAuC,gBAAAA,cAAc,CAACK,IAAf,CAAoBK,YAApB;AACH;AACJ,aAND,MAOK,IAAI,OAAO,KAAKlG,KAAL,CAAWG,cAAX,CAA0ByB,IAAI,CAACmE,uBAA/B,EAAwDC,aAA/D,KAAiF,QAArF,EAA+F;AAChG,kBAAI,KAAKhG,KAAL,CAAWG,cAAX,CAA0ByB,IAAI,CAACmE,uBAA/B,EAAwDC,aAAxD,CAAsEnB,IAAtE,GAA6EoB,MAA7E,KAAwF,CAA5F,EAA+F;AAC3F,sBAAMC,YAAY,GAAGtE,IAAI,CAACqB,SAA1B;AACAuC,gBAAAA,cAAc,CAACK,IAAf,CAAoBK,YAApB;AACH;AACJ,aALI,MAMA;AACD,kBAAI,KAAKlG,KAAL,CAAWG,cAAX,CAA0ByB,IAAI,CAACmE,uBAA/B,EAAwDC,aAAxD,CAAsEC,MAAtE,KAAiF,CAArF,EAAwF;AACpF,sBAAMC,YAAY,GAAGtE,IAAI,CAACqB,SAA1B;AACAuC,gBAAAA,cAAc,CAACK,IAAf,CAAoBK,YAApB;AACH;AACJ;AACJ,WApBD,MAqBK;AACD,kBAAMA,YAAY,GAAGtE,IAAI,CAACqB,SAA1B;AACAuC,YAAAA,cAAc,CAACK,IAAf,CAAoBK,YAApB;AACH;AACJ,SA3BD,EAP2B,CAmC3B;;AAEA,YAAIV,cAAc,CAACS,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,eAAKjG,KAAL,CAAWsF,WAAX,CAAuB,KAAKtF,KAAL,CAAWG,cAAlC,EAAkD,KAAKH,KAAL,CAAWmG,KAAX,CAAiB5D,QAAnE,EAA6E,KAAKvC,KAAL,CAAWoG,YAAxF,EAAsG,KAAKpG,KAAL,CAAWqG,eAAjH;AACH,SAFD,MAGK;AAEDnH,UAAAA,KAAK,CAACoH,IAAN,CAAY,GAAE,KAAKtG,KAAL,CAAWwB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAmD,IAAG8D,cAAc,CAAC,CAAD,CAAI,EAAtF;AAGH;AACJ,OA9CD,MA8CO;AACH,aAAKxF,KAAL,CAAWsF,WAAX,CAAuB,KAAKtF,KAAL,CAAWG,cAAlC,EAAkD,KAAKH,KAAL,CAAWmG,KAAX,CAAiB5D,QAAnE,EAA6E,KAAKvC,KAAL,CAAWoG,YAAxF,EAAsG,KAAKpG,KAAL,CAAWqG,eAAjH;AACH;AACJ,KA3gBkB;;AAEf,SAAKE,WAAL,GAAmBlI,KAAK,CAACmI,SAAN,EAAnB;AACH;;AAygBDC,EAAAA,iBAAiB,GAAG;AAEhB,QAAI,KAAKzG,KAAL,CAAW0G,eAAX,KAA+BC,SAA/B,IAA4C,KAAK3G,KAAL,CAAW4G,cAA3D,EACIC,UAAU,CAAC,MAAM;AACb,WAAK7G,KAAL,CAAW0G,eAAX,CAA2B,KAAKH,WAAL,CAAiBO,OAAjB,CAAyBC,YAAzB,GAAwC,EAAnE;AACH,KAFS,EAEP,GAFO,CAAV;AAKP;;AACDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,GAAG,EAAE,KAAKT,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,KAAKvG,KAAL,CAAW0F,YAAX,GACI,KAAK1F,KAAL,CAAW0F,YAAX,CAAwBhB,GAAxB,CAA6B9C,IAAD,iBACxB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,IAAI,CAACqF,QAAL,CAAchB,MAAd,GAAuB,CAAvB,GACGrE,IAAI,CAACqF,QAAL,CAAcvC,GAAd,CAAmBwC,MAAD,iBACd,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,KAAKtF,IAAI,CAACqF,QAAL,CAAchB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQiB,MAAM,CAACD,QAAP,CAAgBvC,GAAhB,CAAqByC,SAAD,IAAe;AAC/B,aACIA,SAAS,CAACC,cAAV,CAAyB,UAAzB,iBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKD,SAAS,CAACF,QAAV,CAAmBvC,GAAnB,CAAuB2C,YAAY,iBAChC,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,KAAKF,SAAS,CAACF,QAAV,CAAmBhB,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKoB,YAAY,CAACC,mBAAb,GACG,KAAKtH,KAAL,CAAWG,cAAX,CAA0BkH,YAAY,CAACjG,gBAAvC,MAA6DiG,YAAY,CAAChG,eAA1E,GACI,EADJ,GACS,KAAKpB,YAAL,CAAkBoH,YAAlB,EAAgC,KAAKrH,KAAL,CAAWG,cAA3C,EAA2DyB,IAAI,CAACqF,QAAL,CAAchB,MAAzE,EAAiFkB,SAAS,CAACF,QAAV,CAAmBhB,MAApG,CAFZ,GAGG,KAAKhG,YAAL,CAAkBoH,YAAlB,EAAgC,KAAKrH,KAAL,CAAWG,cAA3C,EAA2DyB,IAAI,CAACqF,QAAL,CAAchB,MAAzE,EAAiFkB,SAAS,CAACF,QAAV,CAAmBhB,MAApG,CAJR,CADH,CADL,CADJ,gBAYM,0CACGkB,SAAS,CAACG,mBAAV,GACG,KAAKtH,KAAL,CAAWG,cAAX,CAA0BgH,SAAS,CAAC/F,gBAApC,MAA0D+F,SAAS,CAAC9F,eAApE,GACI,EADJ,GACS,KAAKpB,YAAL,CAAkBkH,SAAlB,EAA6B,KAAKnH,KAAL,CAAWG,cAAxC,EAAwDyB,IAAI,CAACqF,QAAL,CAAchB,MAAtE,CAFZ,GAGG,KAAKhG,YAAL,CAAkBkH,SAAlB,EAA6B,KAAKnH,KAAL,CAAWG,cAAxC,EAAwDyB,IAAI,CAACqF,QAAL,CAAchB,MAAtE,CAJN,CAbV;AAoBH,KArBD,CAFR,CADJ,CADH,GA8BK,EA/BV,CADJ,CADJ,GAqCI,EAvCZ,CADJ;AA+CH;;AAtkByC;;AAykB9C,eAAerH,UAAU,CAACiB,eAAD,CAAzB","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Button, Form, InputGroup, Nav } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport { transactionStatus } from '../../components/Enumeration'\r\nimport { toast } from 'react-toastify';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormEmail from '../../components/form-email/form-email.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport DropZone from '../../components/dropzone/dropzone.component';\r\nimport { faPlus, faSearch, faSleigh ,faFilter, faEye} from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nclass DynamicSlideout extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formElement = React.createRef();\r\n    }\r\n    renderSwitch = (control, selectedRecord, componentLength, componentRowLength) => {\r\n        //console.log(\"control:\", control, selectedRecord,  this.props.editfield);\r\n        //const editfield = this.props.editfield && this.props.editfield\r\n        const index = this.props.editfield ?\r\n            this.props.editfield.findIndex(x => x.label === control.label) : -1\r\n        let checkReadOnly = false;\r\n        if (index !== -1) {\r\n            const listdata = (this.props.editfield[index] && this.props.editfield[index].editableuntill) || []\r\n            checkReadOnly = listdata ? this.props.selectedSample && this.props.selectedSample.ntransactionstatus ?\r\n                !listdata.includes(this.props.selectedSample.ntransactionstatus)\r\n                : false : false\r\n        }\r\n\r\n        switch (control.inputtype) {\r\n            case 'frontendsearchfilter': {\r\n                return (\r\n                    <Row style={{ height: '50px' }}>\r\n                        <Col md={12}>\r\n\r\n                            <button className=\"btn btn-primary btn-padd-custom\"\r\n                                disabled={control.recordbasedreadonly ?\r\n                                    this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : false}\r\n                                // style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                onClick={(e) => this.props.custombuttonclick(e, control)}\r\n                            >\r\n                                <FontAwesomeIcon icon={faFilter}></FontAwesomeIcon> { }\r\n                                {this.props.intl.formatMessage({ id: control.label })}\r\n                            </button>\r\n                        </Col>\r\n                    </Row>\r\n                );\r\n            }\r\n            case 'backendsearchfilter': {\r\n                return (\r\n                    <>\r\n                        {\r\n                            control.table.item.masterAdd && control.isAddMaster\r\n                                && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] &&\r\n                                (this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.addControlCode) !== -1) ?\r\n                                <Row style={{ height: '50px' }}>\r\n                                    <Col md={componentLength === 1 ? componentRowLength > 1 ? 10 : 11 : componentRowLength > 1 ? 8 : 10}>\r\n                                        <button className=\"btn btn-primary btn-padd-custom\"\r\n                                            disabled={control.recordbasedreadonly ?\r\n                                                this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : false}\r\n                                            // style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                            onClick={(e) => this.props.custombuttonclick(e, control)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faSearch}></FontAwesomeIcon> { }\r\n                                            {this.props.intl.formatMessage({ id: control.label })}\r\n                                        </button>\r\n                                    </Col>\r\n                                    <Col md={1}>\r\n                                        <Nav.Link\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                            onClick={(e) => this.props.addMasterRecord(control)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPlus} />\r\n                                        </Nav.Link>\r\n                                    </Col>\r\n                                </Row> : <Row style={{ height: '50px' }}>\r\n                                    <Col md={12}>\r\n                                        <button className=\"btn btn-primary btn-padd-custom\"\r\n                                            disabled={control.recordbasedreadonly ?\r\n                                                this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : false}\r\n                                            // style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                            onClick={(e) => this.props.custombuttonclick(e, control)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faSearch}></FontAwesomeIcon> { }\r\n                                            {this.props.intl.formatMessage({ id: control.label })}\r\n                                        </button>\r\n                                    </Col></Row>}\r\n                    </>\r\n                );\r\n            }\r\n            case 'combo': {\r\n                return (\r\n                    <>\r\n                        {\r\n                            control.table.item.masterAdd && control.isAddMaster\r\n                                && this.props.userRoleControlRights && this.props.userRoleControlRights[control.table.item.nformcode] &&\r\n                                (this.props.userRoleControlRights[control.table.item.nformcode].findIndex(x => x.ncontrolcode === control.table.item.addControlCode) !== -1) ?\r\n                                <Row>\r\n                                    <Col md={componentLength === 1 ? componentRowLength > 1 ? 10 : 11 : componentRowLength > 1 ? 8 : 10}>\r\n                                        <FormSelectSearch\r\n                                            name={control.label}\r\n                                            as={\"select\"}\r\n                                            onChange={(event) => this.props.onComboChange(event, control)}\r\n                                            formLabel={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                            isMandatory={control.mandatory}\r\n                                            value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                                            options={this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : []}\r\n                                            optionId={\"value\"}\r\n                                            optionValue={\"label\"}\r\n                                            isMulti={false}\r\n                                            isClearable={control.mandatory ? false : true}\r\n                                            isDisabled={control.recordbasedreadonly ?\r\n                                                this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ?\r\n                                                    control.readonly : checkReadOnly}\r\n                                            isSearchable={false}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col md={1}>\r\n                                        {/* <Button className=\"btn btn-circle outline-grey ml-2\" role=\"button\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                            onClick={() => this.props.addMasterRecord(control)}>\r\n                                            <FontAwesomeIcon icon={faPlus} />\r\n                                        </Button> */}\r\n\r\n                                        <Nav.Link\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                            onClick={(e) => this.props.addMasterRecord(control)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPlus} />\r\n                                        </Nav.Link>\r\n                                    </Col>\r\n                                </Row>\r\n                                : \r\n                                 control.isView ?\r\n                                <Row>\r\n                                    <Col md={componentLength === 1 ? componentRowLength > 1 ? 10 : 11 : componentRowLength > 1 ? 8 : 10}>\r\n                                        <FormSelectSearch\r\n                                            name={control.label}\r\n                                            as={\"select\"}\r\n                                            onChange={(event) => this.props.onComboChange(event, control)}\r\n                                            formLabel={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                            isMandatory={control.mandatory}\r\n                                            value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                                            options={this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : []}\r\n                                            optionId={\"value\"}\r\n                                            optionValue={\"label\"}\r\n                                            isMulti={false}\r\n                                            isClearable={control.mandatory ? false : true}\r\n                                            isDisabled={control.recordbasedreadonly ?\r\n                                                this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ?\r\n                                                    control.readonly : checkReadOnly}\r\n                                            isSearchable={false}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col md={1}>\r\n                                        <Nav.Link\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEW\" })}\r\n                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                            onClick={(e) => this.props.onClickView(control)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faEye} />\r\n                                        </Nav.Link>\r\n                                    </Col>\r\n                                </Row>\r\n                                \r\n                                :<FormSelectSearch\r\n                                    name={control.label}\r\n                                    as={\"select\"}\r\n                                    onChange={(event) => this.props.onComboChange(event, control)}\r\n                                    formLabel={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    isMandatory={control.mandatory}\r\n                                    value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                                    options={this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : []}\r\n                                    optionId={\"value\"}\r\n                                    optionValue={\"label\"}\r\n                                    isMulti={false}\r\n                                    isClearable={control.mandatory ? false : true}\r\n                                    isDisabled={control.recordbasedreadonly ?\r\n                                        this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ?\r\n                                            control.readonly : checkReadOnly}\r\n                                    isSearchable={false}\r\n                                />\r\n                        }\r\n                    </>\r\n                );\r\n            }\r\n            case 'textinput': {\r\n                return (\r\n                    <FormInput\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        type=\"text\"\r\n                        placeholder={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        isMandatory={control.mandatory}\r\n                        required={control.mandatory}\r\n                        maxLength={control.sfieldlength}\r\n                        isDisabled={control.recordbasedreadonly ?\r\n                            this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ?\r\n                                control.readonly : checkReadOnly}\r\n                        onChange={(event) => this.props.onInputOnChange(event, control.label)}\r\n                    />\r\n\r\n                );\r\n            }\r\n            case 'email': {\r\n                return (\r\n                    <FormEmail\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        type=\"email\"\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        placeholder={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        isMandatory={control.mandatory}\r\n                        required={control.mandatory}\r\n                        maxLength={control.sfieldlength}\r\n                        isDisabled={control.recordbasedreadonly ?\r\n                            this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ?\r\n                                control.readonly : checkReadOnly}\r\n                        onChange={(event) => this.props.onInputOnChange(event, control.label)}\r\n                    />\r\n                );\r\n            }\r\n            case 'textarea': {\r\n                return (\r\n                    <FormTextarea\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        type=\"text\"\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        placeholder={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        isMandatory={control.mandatory}\r\n                        required={control.mandatory}\r\n                        onChange={(event) => this.props.onInputOnChange(event, control.label)}\r\n                        rows=\"2\"\r\n                        maxLength={control.sfieldlength}\r\n                        isDisabled={control.recordbasedreadonly ?\r\n                            this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ?\r\n                                control.readonly : checkReadOnly}\r\n                    />\r\n                );\r\n            }\r\n            case 'toggle':\r\n                return (\r\n                    <CustomSwitch\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        type=\"switch\"\r\n                        name={control.label}\r\n                        onChange={(event) => this.props.onInputOnChange(event)}\r\n                        placeholder={control.label}\r\n                        defaultValue={this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false}\r\n                        checked={this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false}\r\n                        disabled={control.readonly ?\r\n                            control.readonly : checkReadOnly}\r\n                    />\r\n                );\r\n            case 5: {\r\n                return (\r\n                    <Form.Group>\r\n                        <Form.Label>{control.isMultiLingualLabel ? this.props.intl.formatMessage({\r\n                            id: control.squestion\r\n                        }) : control.squestion}{control.mandatory && <sup>*</sup>}</Form.Label>{ }\r\n                    </Form.Group>\r\n                );\r\n            }\r\n            case 6: {\r\n                return (\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor={control.squestion}>{control.squestion}{control.mandatory && <sup>*</sup>}</Form.Label>\r\n                        <Button className=\"btn\" name={control.squestion}>\r\n                            {control.squestion}\r\n                        </Button>\r\n                    </Form.Group>\r\n                );\r\n            }\r\n            case 'Numeric': {\r\n                return (\r\n                    <FormNumericInput\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        strict={true}\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        isMandatory={control.mandatory}\r\n                        required={\r\n                            control.mandatory}\r\n                        maxLength={control.sfieldlength}\r\n                        isDisabled={control.recordbasedreadonly ?\r\n                            this.props.selectedRecord[control.radioparentLabel] === control.recordbasedhide : control.readonly ?\r\n                                control.readonly : checkReadOnly}\r\n                        onChange={(event) => this.props.onNumericInputChange(event, control.label)}\r\n                        precision={control.precision || 0}\r\n                        onBlur={(event) => this.props.onNumericBlur(event, control)}\r\n                        // max={control.max}\r\n                        //min={control.min}\r\n                        noStyle={true}\r\n                    />\r\n                )\r\n            }\r\n            case 'date': {\r\n                return (\r\n                    <>\r\n                        {control.timezone ?\r\n                            <Row>\r\n                                <Col md={6}>\r\n                                    <DateTimePicker\r\n                                        name={control.label}\r\n                                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                                        className='form-control'\r\n                                        placeholderText={this.props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                                        selected={selectedRecord && this.props.selectedRecord[control.label] ?\r\n                                            new Date(this.props.selectedRecord[control.label]) : control.loadcurrentdate ? new Date() : null}\r\n                                        dateFormat={control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"]}\r\n                                        timeInputLabel={this.props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                                        showTimeInput={control.dateonly === true ? false : true}\r\n                                        showTimeSelectOnly={control.timeonly}\r\n                                        isDisabled={control.recordbasedreadonly ?\r\n                                            this.props.selectedRecord[control.parentLabel] === control.recordbasedhide : control.readonly ?\r\n                                                control.readonly : checkReadOnly}\r\n                                        // isClearable={false}\r\n                                        isMandatory={control.mandatory}\r\n                                        maxDate={control.maxdate ? new Date(control.maxdate) : this.props.CurrentTime}\r\n                                        maxTime={control.maxdate ? new Date(control.maxdate) : this.props.CurrentTime}\r\n                                        minDate={control.mindate ? new Date(control.mindate) : this.props.CurrentTime}\r\n                                        minTime={control.mindate ? new Date(control.mindate) : this.props.CurrentTime}\r\n                                        onChange={(date) => this.props.handleDateChange(date, control.label)}\r\n                                        value={this.props.selectedRecord[control.label + \"value\"] ?\r\n                                            new Date(this.props.selectedRecord[control.label + \"value\"]) : new Date()}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    <FormSelectSearch\r\n                                        name={`tz${control.label}`}\r\n                                        as={\"select\"}\r\n                                        onChange={(event) => this.props.onComboChange(event, control, `tz${control.label}`)}\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_TIMEZONE\" })}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={true}\r\n                                        // defaultValue={this.props.defaultTimeZone}\r\n                                        value={this.props.selectedRecord[`tz${control.label}`] ? this.props.selectedRecord[`tz${control.label}`] : this.props.defaultTimeZone}\r\n                                        options={this.props.timeZoneList}\r\n                                        optionId={\"value\"}\r\n                                        optionValue={\"label\"}\r\n                                        isMulti={false}\r\n\r\n                                        isDisabled={control.readonly ?\r\n                                            control.readonly : checkReadOnly}\r\n                                        isSearchable={false}\r\n                                        isClearable={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row> :\r\n                            <DateTimePicker\r\n                                name={control.label}\r\n                                label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                                className='form-control'\r\n                                placeholderText={this.props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                                selected={selectedRecord && this.props.selectedRecord[control.label] ?\r\n                                    new Date(this.props.selectedRecord[control.label]) : null}\r\n                                dateFormat={control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"]}\r\n                                timeInputLabel={this.props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                                showTimeInput={control.dateonly === true ? false : true}\r\n                                showTimeSelectOnly={control.timeonly}\r\n                                // isClearable={false}\r\n                                isDisabled={control.recordbasedreadonly ?\r\n                                    this.props.selectedRecord[control.parentLabel] === control.recordbasedhide : control.readonly ?\r\n                                        control.readonly : checkReadOnly}\r\n                                isMandatory={control.mandatory}\r\n                                maxDate={control.hideafterdate ? this.props.selectedRecord[control.label + \"max\"] ?\r\n                                    this.props.selectedRecord[control.label + \"max\"] : this.props.CurrentTime : this.props.CurrentTime}\r\n                                maxTime={control.hideafterdate ? this.props.selectedRecord[control.label + \"max\"] ?\r\n                                    this.props.selectedRecord[control.label + \"max\"] : this.props.CurrentTime : this.props.CurrentTime}\r\n                                minDate={control.hidebeforedate ? this.props.selectedRecord[control.label + \"min\"] ?\r\n                                    this.props.selectedRecord[control.label + \"min\"] : this.props.CurrentTime : this.props.CurrentTime}\r\n                                minTime={control.hidebeforedate ? this.props.selectedRecord[control.label + \"min\"] ?\r\n                                    this.props.selectedRecord[control.label + \"min\"] : this.props.CurrentTime : this.props.CurrentTime}\r\n                                onChange={(date) => this.props.handleDateChange(date, control.label)}\r\n                                value={this.props.selectedRecord[control.label + \"value\"] ?\r\n                                    this.props.selectedRecord[control.label + \"value\"] : new Date()}\r\n                                openToDate={this.props.selectedRecord[control.label + \"value\"] ?\r\n                                    this.props.selectedRecord[control.label + \"value\"] : new Date()}\r\n\r\n                            />\r\n                        }\r\n\r\n                    </>\r\n                );\r\n            }\r\n            case 'checkbox': {\r\n                let checkboxes = control.radioOptions ? control.radioOptions.tags : []\r\n                const data = this.props.selectedRecord[control.label] ?\r\n                    this.props.selectedRecord[control.label].toLowerCase().split(\",\") : [];\r\n                   \r\n                return (\r\n                    <InputGroup size={'lg'}>\r\n                        <Form.Group>\r\n                            <Form.Label as=\"legend\" htmlFor={control.label}>{\r\n                                control.displayname[this.props.userInfo.slanguagetypecode] || control.label}{control.mandatory ? <sup>*</sup> : \"\"}</Form.Label>\r\n                            {checkboxes.map(checkbox =>\r\n\r\n                                <Form.Check\r\n                                    inline={true}\r\n                                    type=\"checkbox\"\r\n                                    name={control.label}\r\n                                    label={control.isMultiLingualLabel ? this.props.intl.formatMessage({ id: checkbox.text }) : checkbox.text}\r\n                                    // label={checkbox.text}\r\n                                    onChange={(event) => this.props.onInputOnChange(event, checkbox.text)}\r\n                                    id={checkbox.id}\r\n\r\n                                    checked={this.props.selectedRecord[control.label] ?\r\n                                        data.includes(checkbox.text.toLowerCase().trim()) ? true : false : false}\r\n\r\n                                    defaultChecked={this.props.selectedRecord[control.label] ?\r\n                                        data.includes(checkbox.text.toLowerCase().trim()) ? true : false : false}\r\n                                    isMandatory={control.mandatory}\r\n                                    required={control.mandatory}\r\n                                    size={'lg'}\r\n                                />\r\n\r\n                            )}\r\n                        </Form.Group>\r\n                    </InputGroup >\r\n\r\n                );\r\n            }\r\n            case 'radio': {\r\n                let radioButtons = control.radioOptions ? control.radioOptions.tags : []\r\n                return (\r\n                    <fieldset>\r\n                        <Form.Group>\r\n                            <Form.Label as=\"legend\" htmlFor={control.label}>{control.displayname[this.props.userInfo.slanguagetypecode] || control.label}{control.mandatory ? <sup>*</sup> : \"\"}</Form.Label>\r\n                            {radioButtons.map(radioButton =>\r\n\r\n                                <Form.Check\r\n                                    inline={true}\r\n                                    type=\"radio\"\r\n                                    name={control.label}\r\n                                    label={radioButton.text}\r\n                                    onChange={(event) => this.props.onInputOnChange(event, radioButton.text)}\r\n                                    id={radioButton.id}\r\n                                    checked={selectedRecord[control.label] ?\r\n                                        radioButton.text.toLowerCase().trim() === selectedRecord[control.label].toLowerCase().trim() ? true : false : false}\r\n                                    defaultChecked={selectedRecord[control.label] ?\r\n                                        radioButton.text.toLowerCase().trim() === selectedRecord[control.label].toLowerCase().trim() ? true : false : false}\r\n                                    isMandatory={control.mandatory}\r\n                                    required={control.mandatory}\r\n                                    disabled={control.readonly ?\r\n                                        control.readonly : checkReadOnly}\r\n                                />\r\n\r\n                            )}\r\n                        </Form.Group>\r\n                    </fieldset>\r\n                );\r\n            }\r\n            case 'files': {\r\n                return (\r\n                    <DropZone\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        maxFiles={control.maxFiles || 1}\r\n                        accept={control.accept && control.accept.value}\r\n                        minSize={0}\r\n                        maxSize={1}\r\n                        onDrop={(event) => this.props.onDropFile(event, control.label, 1)}\r\n                        multiple={control.maxFiles > 1 ? true : false}\r\n                        editFiles={this.props.selectedRecord ? this.props.selectedRecord : {}}\r\n                        // attachmentTypeCode={this.props.operation === \"update\" ? attachmentType.PRN : \"\"}\r\n                        // fileSizeName=\"nfilesize\"\r\n                        fileName={control.label}\r\n                        deleteAttachment={this.props.deleteAttachment}\r\n                        actionType={this.props.actionType}\r\n                    />\r\n                )\r\n            }\r\n            default:\r\n                return (\"\");\r\n        }\r\n    }\r\n    onSaveClick = () => {\r\n        if (this.props.needValidation) {\r\n            const failedControls = [];\r\n            const mandatoryFields = [];\r\n            this.props.templateData.map(control =>\r\n                control.nmandatoryfield === transactionStatus.YES ? mandatoryFields.push(control) : ''\r\n\r\n            )\r\n            mandatoryFields.forEach(item => {\r\n\r\n                if (this.props.selectedRecord && this.props.selectedRecord[item.nchecklistversionqbcode] && this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue) {\r\n                    if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\r\n                            const alertMessage = item.squestion\r\n                            failedControls.push(alertMessage);\r\n                        }\r\n                    }\r\n                    else if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"string\") {\r\n                        if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.trim().length === 0) {\r\n                            const alertMessage = item.squestion\r\n                            failedControls.push(alertMessage);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\r\n                            const alertMessage = item.squestion\r\n                            failedControls.push(alertMessage);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const alertMessage = item.squestion\r\n                    failedControls.push(alertMessage);\r\n                }\r\n            });\r\n            // console.log(\"validationPassed:\", failedControls);\r\n\r\n            if (failedControls.length === 0) {\r\n                this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode)\r\n            }\r\n            else {\r\n\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${failedControls[0]}`);\r\n\r\n\r\n            }\r\n        } else {\r\n            this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode)\r\n        }\r\n    }\r\n    componentDidMount() {\r\n\r\n        if (this.props.triggerCallback !== undefined && this.props.enableCallback)\r\n            setTimeout(() => {\r\n                this.props.triggerCallback(this.formElement.current.clientHeight + 30);\r\n            }, 200)\r\n\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div ref={this.formElement}>\r\n                {\r\n                    this.props.templateData ?\r\n                        this.props.templateData.map((item) =>\r\n                            <Row>\r\n                                {item.children.length > 0 ?\r\n                                    item.children.map((column) =>\r\n                                        <Col md={12 / item.children.length}>\r\n                                            {\r\n                                                column.children.map((component) => {\r\n                                                    return (\r\n                                                        component.hasOwnProperty(\"children\") ?\r\n                                                            <Row>\r\n                                                                {component.children.map(componentrow =>\r\n                                                                    <Col md={12 / component.children.length}>\r\n                                                                        {componentrow.recordbasedshowhide ?\r\n                                                                            this.props.selectedRecord[componentrow.radioparentLabel] === componentrow.recordbasedhide ?\r\n                                                                                \"\" : this.renderSwitch(componentrow, this.props.selectedRecord, item.children.length, component.children.length) :\r\n                                                                            this.renderSwitch(componentrow, this.props.selectedRecord, item.children.length, component.children.length)}\r\n                                                                    </Col>\r\n                                                                )\r\n                                                                }\r\n                                                            </Row>\r\n                                                            : <>\r\n                                                                {component.recordbasedshowhide ?\r\n                                                                    this.props.selectedRecord[component.radioparentLabel] === component.recordbasedhide ?\r\n                                                                        \"\" : this.renderSwitch(component, this.props.selectedRecord, item.children.length) :\r\n                                                                    this.renderSwitch(component, this.props.selectedRecord, item.children.length)}\r\n                                                            </>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n\r\n                                        </Col>\r\n                                    )\r\n                                    : \"\"}\r\n                            </Row>\r\n                        )\r\n                        :\r\n                        \"\"\r\n                }\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default injectIntl(DynamicSlideout);"]},"metadata":{},"sourceType":"module"}