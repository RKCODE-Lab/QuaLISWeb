{"ast":null,"code":"'use strict';\n\nvar _ = require('underscore');\n\nvar templateChecks = require('../../utils/templateChecks');\n\nmodule.exports = function (dialect) {\n  var availableJoinTypes = ['natural', 'cross', 'inner', 'outer', 'left', 'right', 'full', 'self'];\n  var orRegExp = /^(rollback|abort|replace|fail|ignore)$/i; // private templates\n\n  dialect.templates.add('query', {\n    pattern: '{queryBody}',\n    validate: function (type, params) {\n      templateChecks.requiredProp(type, params, 'queryBody');\n      templateChecks.propType(type, params, 'queryBody', 'object');\n    }\n  });\n  dialect.templates.add('subQuery', {\n    pattern: '({queryBody}) {alias}',\n    validate: function (type, params) {\n      templateChecks.requiredProp(type, params, 'queryBody');\n      templateChecks.propType(type, params, 'queryBody', 'object');\n      templateChecks.propType(type, params, 'alias', ['string', 'object']);\n    }\n  });\n  dialect.templates.add('queriesCombination', {\n    pattern: '{with} {withRecursive} {queries} {sort} {limit} {offset}',\n    validate: function (type, params) {\n      templateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n      templateChecks.propType(type, params, 'with', 'object');\n      templateChecks.propType(type, params, 'withRecursive', 'object');\n      templateChecks.requiredProp(type, params, 'queries');\n      templateChecks.propType(type, params, 'queries', 'array');\n      templateChecks.minPropLength(type, params, 'queries', 2);\n      templateChecks.propType(type, params, 'sort', ['string', 'array', 'object']);\n      templateChecks.propType(type, params, 'limit', ['number', 'string']);\n      templateChecks.propType(type, params, 'offset', ['number', 'string']);\n    }\n  });\n  dialect.templates.add('insertValues', {\n    pattern: '({fields}) values {values}',\n    validate: function (type, params) {\n      templateChecks.requiredProp('values', params, 'fields');\n      templateChecks.propType('values', params, 'fields', 'array');\n      templateChecks.minPropLength('values', params, 'fields', 1);\n      templateChecks.requiredProp('values', params, 'values');\n      templateChecks.propType('values', params, 'values', 'array');\n      templateChecks.minPropLength('values', params, 'values', 1);\n    }\n  });\n  dialect.templates.add('joinItem', {\n    pattern: '{type} join {table} {query} {select} {expression} {alias} {on}',\n    validate: function (type, params) {\n      templateChecks.propType('join', params, 'type', 'string');\n      templateChecks.customProp('join', params, 'type', function (value) {\n        var splitType = _(value.toLowerCase().split(' ')).compact();\n\n        return !_.difference(splitType, availableJoinTypes).length;\n      });\n      templateChecks.atLeastOneOfProps('join', params, ['table', 'query', 'select', 'expression']);\n      templateChecks.onlyOneOfProps('join', params, ['table', 'query', 'select', 'expression']);\n      templateChecks.propType('join', params, 'table', 'string');\n      templateChecks.propType('join', params, 'query', 'object');\n      templateChecks.propType('join', params, 'select', 'object');\n      templateChecks.propType('join', params, 'expression', ['string', 'object']);\n      templateChecks.propType('join', params, 'alias', ['string', 'object']);\n      templateChecks.propType('join', params, 'on', ['array', 'object']);\n    }\n  });\n  dialect.templates.add('withItem', {\n    pattern: '{name} {fields} as {query} {select} {expression}',\n    validate: function (type, params) {\n      templateChecks.requiredProp('with', params, 'name');\n      templateChecks.propType('with', params, 'name', 'string');\n      templateChecks.propType(type, params, 'fields', ['array', 'object']);\n      templateChecks.atLeastOneOfProps('with', params, ['query', 'select', 'expression']);\n      templateChecks.onlyOneOfProps('with', params, ['query', 'select', 'expression']);\n      templateChecks.propType('with', params, 'query', 'object');\n      templateChecks.propType('with', params, 'select', 'object');\n      templateChecks.propType('with', params, 'expression', ['string', 'object']);\n    }\n  });\n  dialect.templates.add('fromItem', {\n    pattern: '{table} {query} {select} {expression} {alias}',\n    validate: function (type, params) {\n      templateChecks.atLeastOneOfProps('from', params, ['table', 'query', 'select', 'expression']);\n      templateChecks.onlyOneOfProps('from', params, ['table', 'query', 'select', 'expression']);\n      templateChecks.propType('from', params, 'table', 'string');\n      templateChecks.propType('from', params, 'query', 'object');\n      templateChecks.propType('from', params, 'select', 'object');\n      templateChecks.propType('from', params, 'expression', ['string', 'object']);\n      templateChecks.propType('from', params, 'alias', ['string', 'object']);\n    }\n  }); // public templates\n\n  dialect.templates.add('select', {\n    pattern: '{with} {withRecursive} select {distinct} {fields} ' + 'from {from} {table} {query} {select} {expression} {alias} ' + '{join} {condition} {group} {having} {sort} {limit} {offset}',\n    defaults: {\n      fields: {}\n    },\n    validate: function (type, params) {\n      templateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n      templateChecks.propType(type, params, 'with', 'object');\n      templateChecks.propType(type, params, 'withRecursive', 'object');\n      templateChecks.propType(type, params, 'distinct', 'boolean');\n      templateChecks.propType(type, params, 'fields', ['array', 'object']);\n      templateChecks.propType(type, params, 'from', ['string', 'array', 'object']);\n      templateChecks.atLeastOneOfProps(type, params, ['table', 'query', 'select', 'expression']);\n      templateChecks.onlyOneOfProps(type, params, ['table', 'query', 'select', 'expression']);\n      templateChecks.propType(type, params, 'table', 'string');\n      templateChecks.propType(type, params, 'query', 'object');\n      templateChecks.propType(type, params, 'select', 'object');\n      templateChecks.propType(type, params, 'expression', ['string', 'object']);\n      templateChecks.propType(type, params, 'alias', ['string', 'object']);\n      templateChecks.propType(type, params, 'join', ['array', 'object']);\n      templateChecks.propType(type, params, 'condition', ['array', 'object']);\n      templateChecks.propType(type, params, 'having', ['array', 'object']);\n      templateChecks.propType(type, params, 'group', ['string', 'array']);\n      templateChecks.propType(type, params, 'sort', ['string', 'array', 'object']);\n      templateChecks.propType(type, params, 'limit', ['number', 'string']);\n      templateChecks.propType(type, params, 'offset', ['number', 'string']);\n    }\n  });\n  dialect.templates.add('insert', {\n    pattern: '{with} {withRecursive} insert {or} into {table} {values} {condition} ' + '{returning}',\n    validate: function (type, params) {\n      templateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n      templateChecks.propType(type, params, 'with', 'object');\n      templateChecks.propType(type, params, 'withRecursive', 'object');\n      templateChecks.propType(type, params, 'or', 'string');\n      templateChecks.propMatch(type, params, 'or', orRegExp);\n      templateChecks.requiredProp(type, params, 'table');\n      templateChecks.propType(type, params, 'table', 'string');\n      templateChecks.requiredProp(type, params, 'values');\n      templateChecks.propType(type, params, 'values', ['array', 'object']);\n      templateChecks.propType(type, params, 'condition', ['array', 'object']);\n      templateChecks.propType(type, params, 'returning', ['array', 'object']);\n    }\n  });\n  dialect.templates.add('update', {\n    pattern: '{with} {withRecursive} update {or} {table} {alias} {modifier} {condition} {returning}',\n    validate: function (type, params) {\n      templateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n      templateChecks.propType(type, params, 'with', 'object');\n      templateChecks.propType(type, params, 'withRecursive', 'object');\n      templateChecks.propType(type, params, 'or', 'string');\n      templateChecks.propMatch(type, params, 'or', orRegExp);\n      templateChecks.requiredProp(type, params, 'table');\n      templateChecks.propType(type, params, 'table', 'string');\n      templateChecks.propType(type, params, 'alias', 'string');\n      templateChecks.requiredProp(type, params, 'modifier');\n      templateChecks.propType(type, params, 'modifier', 'object');\n      templateChecks.propType(type, params, 'condition', ['array', 'object']);\n      templateChecks.propType(type, params, 'returning', ['array', 'object']);\n    }\n  });\n  dialect.templates.add('remove', {\n    pattern: '{with} {withRecursive} delete from {table} {alias} {condition} {returning}',\n    validate: function (type, params) {\n      templateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n      templateChecks.propType(type, params, 'with', 'object');\n      templateChecks.propType(type, params, 'withRecursive', 'object');\n      templateChecks.requiredProp(type, params, 'table');\n      templateChecks.propType(type, params, 'table', 'string');\n      templateChecks.propType(type, params, 'alias', 'string');\n      templateChecks.propType(type, params, 'condition', ['array', 'object']);\n      templateChecks.propType(type, params, 'returning', ['array', 'object']);\n    }\n  });\n  dialect.templates.add('union', dialect.templates.get('queriesCombination'));\n  dialect.templates.add('intersect', dialect.templates.get('queriesCombination'));\n  dialect.templates.add('except', dialect.templates.get('queriesCombination'));\n};","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/node_modules/json-sql/lib/dialects/base/templates.js"],"names":["_","require","templateChecks","module","exports","dialect","availableJoinTypes","orRegExp","templates","add","pattern","validate","type","params","requiredProp","propType","onlyOneOfProps","minPropLength","customProp","value","splitType","toLowerCase","split","compact","difference","length","atLeastOneOfProps","defaults","fields","propMatch","get"],"mappings":"AAAA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,4BAAD,CAA5B;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AAClC,MAAIC,kBAAkB,GAAG,CAAC,SAAD,EAAY,OAAZ,EAAqB,OAArB,EAA8B,OAA9B,EAAuC,MAAvC,EAA+C,OAA/C,EAAwD,MAAxD,EAAgE,MAAhE,CAAzB;AACA,MAAIC,QAAQ,GAAG,yCAAf,CAFkC,CAIlC;;AAEAF,EAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,OAAtB,EAA+B;AAC9BC,IAAAA,OAAO,EAAE,aADqB;AAE9BC,IAAAA,QAAQ,EAAE,UAASC,IAAT,EAAeC,MAAf,EAAuB;AAChCX,MAAAA,cAAc,CAACY,YAAf,CAA4BF,IAA5B,EAAkCC,MAAlC,EAA0C,WAA1C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,WAAtC,EAAmD,QAAnD;AACA;AAL6B,GAA/B;AASAR,EAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,UAAtB,EAAkC;AACjCC,IAAAA,OAAO,EAAE,uBADwB;AAEjCC,IAAAA,QAAQ,EAAE,UAASC,IAAT,EAAeC,MAAf,EAAuB;AAChCX,MAAAA,cAAc,CAACY,YAAf,CAA4BF,IAA5B,EAAkCC,MAAlC,EAA0C,WAA1C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,WAAtC,EAAmD,QAAnD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,OAAtC,EAA+C,CAAC,QAAD,EAAW,QAAX,CAA/C;AACA;AAPgC,GAAlC;AAWAR,EAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,oBAAtB,EAA4C;AAC3CC,IAAAA,OAAO,EAAE,0DADkC;AAE3CC,IAAAA,QAAQ,EAAE,UAASC,IAAT,EAAeC,MAAf,EAAuB;AAChCX,MAAAA,cAAc,CAACc,cAAf,CAA8BJ,IAA9B,EAAoCC,MAApC,EAA4C,CAAC,MAAD,EAAS,eAAT,CAA5C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,MAAtC,EAA8C,QAA9C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,eAAtC,EAAuD,QAAvD;AAEAX,MAAAA,cAAc,CAACY,YAAf,CAA4BF,IAA5B,EAAkCC,MAAlC,EAA0C,SAA1C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,SAAtC,EAAiD,OAAjD;AACAX,MAAAA,cAAc,CAACe,aAAf,CAA6BL,IAA7B,EAAmCC,MAAnC,EAA2C,SAA3C,EAAsD,CAAtD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,MAAtC,EAA8C,CAAC,QAAD,EAAW,OAAX,EAAoB,QAApB,CAA9C;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,OAAtC,EAA+C,CAAC,QAAD,EAAW,QAAX,CAA/C;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,QAAtC,EAAgD,CAAC,QAAD,EAAW,QAAX,CAAhD;AACA;AAhB0C,GAA5C;AAoBAR,EAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,cAAtB,EAAsC;AACrCC,IAAAA,OAAO,EAAE,4BAD4B;AAErCC,IAAAA,QAAQ,EAAE,UAASC,IAAT,EAAeC,MAAf,EAAuB;AAChCX,MAAAA,cAAc,CAACY,YAAf,CAA4B,QAA5B,EAAsCD,MAAtC,EAA8C,QAA9C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,QAAxB,EAAkCF,MAAlC,EAA0C,QAA1C,EAAoD,OAApD;AACAX,MAAAA,cAAc,CAACe,aAAf,CAA6B,QAA7B,EAAuCJ,MAAvC,EAA+C,QAA/C,EAAyD,CAAzD;AAEAX,MAAAA,cAAc,CAACY,YAAf,CAA4B,QAA5B,EAAsCD,MAAtC,EAA8C,QAA9C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,QAAxB,EAAkCF,MAAlC,EAA0C,QAA1C,EAAoD,OAApD;AACAX,MAAAA,cAAc,CAACe,aAAf,CAA6B,QAA7B,EAAuCJ,MAAvC,EAA+C,QAA/C,EAAyD,CAAzD;AACA;AAVoC,GAAtC;AAcAR,EAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,UAAtB,EAAkC;AACjCC,IAAAA,OAAO,EAAE,gEADwB;AAEjCC,IAAAA,QAAQ,EAAE,UAASC,IAAT,EAAeC,MAAf,EAAuB;AAChCX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,MAAxC,EAAgD,QAAhD;AACAX,MAAAA,cAAc,CAACgB,UAAf,CAA0B,MAA1B,EAAkCL,MAAlC,EAA0C,MAA1C,EAAkD,UAASM,KAAT,EAAgB;AACjE,YAAIC,SAAS,GAAGpB,CAAC,CAACmB,KAAK,CAACE,WAAN,GAAoBC,KAApB,CAA0B,GAA1B,CAAD,CAAD,CAAkCC,OAAlC,EAAhB;;AACA,eAAO,CAACvB,CAAC,CAACwB,UAAF,CAAaJ,SAAb,EAAwBd,kBAAxB,EAA4CmB,MAApD;AACA,OAHD;AAKAvB,MAAAA,cAAc,CAACwB,iBAAf,CAAiC,MAAjC,EAAyCb,MAAzC,EAAiD,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,YAA7B,CAAjD;AACAX,MAAAA,cAAc,CAACc,cAAf,CAA8B,MAA9B,EAAsCH,MAAtC,EAA8C,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,YAA7B,CAA9C;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,OAAxC,EAAiD,QAAjD;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,OAAxC,EAAiD,QAAjD;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,QAAxC,EAAkD,QAAlD;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,YAAxC,EAAsD,CAAC,QAAD,EAAW,QAAX,CAAtD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,OAAxC,EAAiD,CAAC,QAAD,EAAW,QAAX,CAAjD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,IAAxC,EAA8C,CAAC,OAAD,EAAU,QAAV,CAA9C;AACA;AApBgC,GAAlC;AAwBAR,EAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,UAAtB,EAAkC;AACjCC,IAAAA,OAAO,EAAE,kDADwB;AAEjCC,IAAAA,QAAQ,EAAE,UAASC,IAAT,EAAeC,MAAf,EAAuB;AAChCX,MAAAA,cAAc,CAACY,YAAf,CAA4B,MAA5B,EAAoCD,MAApC,EAA4C,MAA5C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,MAAxC,EAAgD,QAAhD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,QAAtC,EAAgD,CAAC,OAAD,EAAU,QAAV,CAAhD;AAEAX,MAAAA,cAAc,CAACwB,iBAAf,CAAiC,MAAjC,EAAyCb,MAAzC,EAAiD,CAAC,OAAD,EAAU,QAAV,EAAoB,YAApB,CAAjD;AACAX,MAAAA,cAAc,CAACc,cAAf,CAA8B,MAA9B,EAAsCH,MAAtC,EAA8C,CAAC,OAAD,EAAU,QAAV,EAAoB,YAApB,CAA9C;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,OAAxC,EAAiD,QAAjD;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,QAAxC,EAAkD,QAAlD;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,YAAxC,EAAsD,CAAC,QAAD,EAAW,QAAX,CAAtD;AACA;AAdgC,GAAlC;AAkBAR,EAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,UAAtB,EAAkC;AACjCC,IAAAA,OAAO,EAAE,+CADwB;AAEjCC,IAAAA,QAAQ,EAAE,UAASC,IAAT,EAAeC,MAAf,EAAuB;AAChCX,MAAAA,cAAc,CAACwB,iBAAf,CAAiC,MAAjC,EAAyCb,MAAzC,EAAiD,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,YAA7B,CAAjD;AACAX,MAAAA,cAAc,CAACc,cAAf,CAA8B,MAA9B,EAAsCH,MAAtC,EAA8C,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,YAA7B,CAA9C;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,OAAxC,EAAiD,QAAjD;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,OAAxC,EAAiD,QAAjD;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,QAAxC,EAAkD,QAAlD;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,YAAxC,EAAsD,CAAC,QAAD,EAAW,QAAX,CAAtD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwB,MAAxB,EAAgCF,MAAhC,EAAwC,OAAxC,EAAiD,CAAC,QAAD,EAAW,QAAX,CAAjD;AACA;AAZgC,GAAlC,EAtGkC,CAsHlC;;AAEAR,EAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,QAAtB,EAAgC;AAC/BC,IAAAA,OAAO,EAAE,uDACR,4DADQ,GAER,6DAH8B;AAI/BiB,IAAAA,QAAQ,EAAE;AACTC,MAAAA,MAAM,EAAE;AADC,KAJqB;AAO/BjB,IAAAA,QAAQ,EAAE,UAASC,IAAT,EAAeC,MAAf,EAAuB;AAChCX,MAAAA,cAAc,CAACc,cAAf,CAA8BJ,IAA9B,EAAoCC,MAApC,EAA4C,CAAC,MAAD,EAAS,eAAT,CAA5C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,MAAtC,EAA8C,QAA9C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,eAAtC,EAAuD,QAAvD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,UAAtC,EAAkD,SAAlD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,QAAtC,EAAgD,CAAC,OAAD,EAAU,QAAV,CAAhD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,MAAtC,EAA8C,CAAC,QAAD,EAAW,OAAX,EAAoB,QAApB,CAA9C;AAEAX,MAAAA,cAAc,CAACwB,iBAAf,CAAiCd,IAAjC,EAAuCC,MAAvC,EAA+C,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,YAA7B,CAA/C;AACAX,MAAAA,cAAc,CAACc,cAAf,CAA8BJ,IAA9B,EAAoCC,MAApC,EAA4C,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,YAA7B,CAA5C;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,OAAtC,EAA+C,QAA/C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,OAAtC,EAA+C,QAA/C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,QAAtC,EAAgD,QAAhD;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,YAAtC,EAAoD,CAAC,QAAD,EAAW,QAAX,CAApD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,OAAtC,EAA+C,CAAC,QAAD,EAAW,QAAX,CAA/C;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,MAAtC,EAA8C,CAAC,OAAD,EAAU,QAAV,CAA9C;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,WAAtC,EAAmD,CAAC,OAAD,EAAU,QAAV,CAAnD;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,QAAtC,EAAgD,CAAC,OAAD,EAAU,QAAV,CAAhD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,OAAtC,EAA+C,CAAC,QAAD,EAAW,OAAX,CAA/C;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,MAAtC,EAA8C,CAAC,QAAD,EAAW,OAAX,EAAoB,QAApB,CAA9C;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,OAAtC,EAA+C,CAAC,QAAD,EAAW,QAAX,CAA/C;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,QAAtC,EAAgD,CAAC,QAAD,EAAW,QAAX,CAAhD;AACA;AAxC8B,GAAhC;AA4CAR,EAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,QAAtB,EAAgC;AAC/BC,IAAAA,OAAO,EAAE,0EACR,aAF8B;AAG/BC,IAAAA,QAAQ,EAAE,UAASC,IAAT,EAAeC,MAAf,EAAuB;AAChCX,MAAAA,cAAc,CAACc,cAAf,CAA8BJ,IAA9B,EAAoCC,MAApC,EAA4C,CAAC,MAAD,EAAS,eAAT,CAA5C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,MAAtC,EAA8C,QAA9C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,eAAtC,EAAuD,QAAvD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,IAAtC,EAA4C,QAA5C;AACAX,MAAAA,cAAc,CAAC2B,SAAf,CAAyBjB,IAAzB,EAA+BC,MAA/B,EAAuC,IAAvC,EAA6CN,QAA7C;AAEAL,MAAAA,cAAc,CAACY,YAAf,CAA4BF,IAA5B,EAAkCC,MAAlC,EAA0C,OAA1C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,OAAtC,EAA+C,QAA/C;AAEAX,MAAAA,cAAc,CAACY,YAAf,CAA4BF,IAA5B,EAAkCC,MAAlC,EAA0C,QAA1C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,QAAtC,EAAgD,CAAC,OAAD,EAAU,QAAV,CAAhD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,WAAtC,EAAmD,CAAC,OAAD,EAAU,QAAV,CAAnD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,WAAtC,EAAmD,CAAC,OAAD,EAAU,QAAV,CAAnD;AACA;AApB8B,GAAhC;AAwBAR,EAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,QAAtB,EAAgC;AAC/BC,IAAAA,OAAO,EAAE,uFADsB;AAE/BC,IAAAA,QAAQ,EAAE,UAASC,IAAT,EAAeC,MAAf,EAAuB;AAChCX,MAAAA,cAAc,CAACc,cAAf,CAA8BJ,IAA9B,EAAoCC,MAApC,EAA4C,CAAC,MAAD,EAAS,eAAT,CAA5C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,MAAtC,EAA8C,QAA9C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,eAAtC,EAAuD,QAAvD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,IAAtC,EAA4C,QAA5C;AACAX,MAAAA,cAAc,CAAC2B,SAAf,CAAyBjB,IAAzB,EAA+BC,MAA/B,EAAuC,IAAvC,EAA6CN,QAA7C;AAEAL,MAAAA,cAAc,CAACY,YAAf,CAA4BF,IAA5B,EAAkCC,MAAlC,EAA0C,OAA1C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,OAAtC,EAA+C,QAA/C;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,OAAtC,EAA+C,QAA/C;AAEAX,MAAAA,cAAc,CAACY,YAAf,CAA4BF,IAA5B,EAAkCC,MAAlC,EAA0C,UAA1C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,UAAtC,EAAkD,QAAlD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,WAAtC,EAAmD,CAAC,OAAD,EAAU,QAAV,CAAnD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,WAAtC,EAAmD,CAAC,OAAD,EAAU,QAAV,CAAnD;AACA;AArB8B,GAAhC;AAyBAR,EAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,QAAtB,EAAgC;AAC/BC,IAAAA,OAAO,EAAE,4EADsB;AAE/BC,IAAAA,QAAQ,EAAE,UAASC,IAAT,EAAeC,MAAf,EAAuB;AAChCX,MAAAA,cAAc,CAACc,cAAf,CAA8BJ,IAA9B,EAAoCC,MAApC,EAA4C,CAAC,MAAD,EAAS,eAAT,CAA5C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,MAAtC,EAA8C,QAA9C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,eAAtC,EAAuD,QAAvD;AAEAX,MAAAA,cAAc,CAACY,YAAf,CAA4BF,IAA5B,EAAkCC,MAAlC,EAA0C,OAA1C;AACAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,OAAtC,EAA+C,QAA/C;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,OAAtC,EAA+C,QAA/C;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,WAAtC,EAAmD,CAAC,OAAD,EAAU,QAAV,CAAnD;AAEAX,MAAAA,cAAc,CAACa,QAAf,CAAwBH,IAAxB,EAA8BC,MAA9B,EAAsC,WAAtC,EAAmD,CAAC,OAAD,EAAU,QAAV,CAAnD;AACA;AAf8B,GAAhC;AAmBAR,EAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,OAAtB,EAA+BJ,OAAO,CAACG,SAAR,CAAkBsB,GAAlB,CAAsB,oBAAtB,CAA/B;AAGAzB,EAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,WAAtB,EAAmCJ,OAAO,CAACG,SAAR,CAAkBsB,GAAlB,CAAsB,oBAAtB,CAAnC;AAGAzB,EAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,QAAtB,EAAgCJ,OAAO,CAACG,SAAR,CAAkBsB,GAAlB,CAAsB,oBAAtB,CAAhC;AACA,CA/OD","sourcesContent":["'use strict';\n\nvar _ = require('underscore');\nvar templateChecks = require('../../utils/templateChecks');\n\nmodule.exports = function(dialect) {\n\tvar availableJoinTypes = ['natural', 'cross', 'inner', 'outer', 'left', 'right', 'full', 'self'];\n\tvar orRegExp = /^(rollback|abort|replace|fail|ignore)$/i;\n\n\t// private templates\n\n\tdialect.templates.add('query', {\n\t\tpattern: '{queryBody}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.requiredProp(type, params, 'queryBody');\n\t\t\ttemplateChecks.propType(type, params, 'queryBody', 'object');\n\t\t}\n\t});\n\n\n\tdialect.templates.add('subQuery', {\n\t\tpattern: '({queryBody}) {alias}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.requiredProp(type, params, 'queryBody');\n\t\t\ttemplateChecks.propType(type, params, 'queryBody', 'object');\n\n\t\t\ttemplateChecks.propType(type, params, 'alias', ['string', 'object']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('queriesCombination', {\n\t\tpattern: '{with} {withRecursive} {queries} {sort} {limit} {offset}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n\t\t\ttemplateChecks.propType(type, params, 'with', 'object');\n\t\t\ttemplateChecks.propType(type, params, 'withRecursive', 'object');\n\n\t\t\ttemplateChecks.requiredProp(type, params, 'queries');\n\t\t\ttemplateChecks.propType(type, params, 'queries', 'array');\n\t\t\ttemplateChecks.minPropLength(type, params, 'queries', 2);\n\n\t\t\ttemplateChecks.propType(type, params, 'sort', ['string', 'array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'limit', ['number', 'string']);\n\n\t\t\ttemplateChecks.propType(type, params, 'offset', ['number', 'string']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('insertValues', {\n\t\tpattern: '({fields}) values {values}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.requiredProp('values', params, 'fields');\n\t\t\ttemplateChecks.propType('values', params, 'fields', 'array');\n\t\t\ttemplateChecks.minPropLength('values', params, 'fields', 1);\n\n\t\t\ttemplateChecks.requiredProp('values', params, 'values');\n\t\t\ttemplateChecks.propType('values', params, 'values', 'array');\n\t\t\ttemplateChecks.minPropLength('values', params, 'values', 1);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('joinItem', {\n\t\tpattern: '{type} join {table} {query} {select} {expression} {alias} {on}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.propType('join', params, 'type', 'string');\n\t\t\ttemplateChecks.customProp('join', params, 'type', function(value) {\n\t\t\t\tvar splitType = _(value.toLowerCase().split(' ')).compact();\n\t\t\t\treturn !_.difference(splitType, availableJoinTypes).length;\n\t\t\t});\n\n\t\t\ttemplateChecks.atLeastOneOfProps('join', params, ['table', 'query', 'select', 'expression']);\n\t\t\ttemplateChecks.onlyOneOfProps('join', params, ['table', 'query', 'select', 'expression']);\n\n\t\t\ttemplateChecks.propType('join', params, 'table', 'string');\n\t\t\ttemplateChecks.propType('join', params, 'query', 'object');\n\t\t\ttemplateChecks.propType('join', params, 'select', 'object');\n\t\t\ttemplateChecks.propType('join', params, 'expression', ['string', 'object']);\n\n\t\t\ttemplateChecks.propType('join', params, 'alias', ['string', 'object']);\n\n\t\t\ttemplateChecks.propType('join', params, 'on', ['array', 'object']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('withItem', {\n\t\tpattern: '{name} {fields} as {query} {select} {expression}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.requiredProp('with', params, 'name');\n\t\t\ttemplateChecks.propType('with', params, 'name', 'string');\n\n\t\t\ttemplateChecks.propType(type, params, 'fields', ['array', 'object']);\n\n\t\t\ttemplateChecks.atLeastOneOfProps('with', params, ['query', 'select', 'expression']);\n\t\t\ttemplateChecks.onlyOneOfProps('with', params, ['query', 'select', 'expression']);\n\n\t\t\ttemplateChecks.propType('with', params, 'query', 'object');\n\t\t\ttemplateChecks.propType('with', params, 'select', 'object');\n\t\t\ttemplateChecks.propType('with', params, 'expression', ['string', 'object']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('fromItem', {\n\t\tpattern: '{table} {query} {select} {expression} {alias}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.atLeastOneOfProps('from', params, ['table', 'query', 'select', 'expression']);\n\t\t\ttemplateChecks.onlyOneOfProps('from', params, ['table', 'query', 'select', 'expression']);\n\n\t\t\ttemplateChecks.propType('from', params, 'table', 'string');\n\t\t\ttemplateChecks.propType('from', params, 'query', 'object');\n\t\t\ttemplateChecks.propType('from', params, 'select', 'object');\n\t\t\ttemplateChecks.propType('from', params, 'expression', ['string', 'object']);\n\n\t\t\ttemplateChecks.propType('from', params, 'alias', ['string', 'object']);\n\t\t}\n\t});\n\n\n\t// public templates\n\n\tdialect.templates.add('select', {\n\t\tpattern: '{with} {withRecursive} select {distinct} {fields} ' +\n\t\t\t'from {from} {table} {query} {select} {expression} {alias} ' +\n\t\t\t'{join} {condition} {group} {having} {sort} {limit} {offset}',\n\t\tdefaults: {\n\t\t\tfields: {}\n\t\t},\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n\t\t\ttemplateChecks.propType(type, params, 'with', 'object');\n\t\t\ttemplateChecks.propType(type, params, 'withRecursive', 'object');\n\n\t\t\ttemplateChecks.propType(type, params, 'distinct', 'boolean');\n\n\t\t\ttemplateChecks.propType(type, params, 'fields', ['array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'from', ['string', 'array', 'object']);\n\n\t\t\ttemplateChecks.atLeastOneOfProps(type, params, ['table', 'query', 'select', 'expression']);\n\t\t\ttemplateChecks.onlyOneOfProps(type, params, ['table', 'query', 'select', 'expression']);\n\n\t\t\ttemplateChecks.propType(type, params, 'table', 'string');\n\t\t\ttemplateChecks.propType(type, params, 'query', 'object');\n\t\t\ttemplateChecks.propType(type, params, 'select', 'object');\n\t\t\ttemplateChecks.propType(type, params, 'expression', ['string', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'alias', ['string', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'join', ['array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'condition', ['array', 'object']);\n\t\t\ttemplateChecks.propType(type, params, 'having', ['array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'group', ['string', 'array']);\n\n\t\t\ttemplateChecks.propType(type, params, 'sort', ['string', 'array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'limit', ['number', 'string']);\n\n\t\t\ttemplateChecks.propType(type, params, 'offset', ['number', 'string']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('insert', {\n\t\tpattern: '{with} {withRecursive} insert {or} into {table} {values} {condition} ' +\n\t\t\t'{returning}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n\t\t\ttemplateChecks.propType(type, params, 'with', 'object');\n\t\t\ttemplateChecks.propType(type, params, 'withRecursive', 'object');\n\n\t\t\ttemplateChecks.propType(type, params, 'or', 'string');\n\t\t\ttemplateChecks.propMatch(type, params, 'or', orRegExp);\n\n\t\t\ttemplateChecks.requiredProp(type, params, 'table');\n\t\t\ttemplateChecks.propType(type, params, 'table', 'string');\n\n\t\t\ttemplateChecks.requiredProp(type, params, 'values');\n\t\t\ttemplateChecks.propType(type, params, 'values', ['array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'condition', ['array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'returning', ['array', 'object']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('update', {\n\t\tpattern: '{with} {withRecursive} update {or} {table} {alias} {modifier} {condition} {returning}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n\t\t\ttemplateChecks.propType(type, params, 'with', 'object');\n\t\t\ttemplateChecks.propType(type, params, 'withRecursive', 'object');\n\n\t\t\ttemplateChecks.propType(type, params, 'or', 'string');\n\t\t\ttemplateChecks.propMatch(type, params, 'or', orRegExp);\n\n\t\t\ttemplateChecks.requiredProp(type, params, 'table');\n\t\t\ttemplateChecks.propType(type, params, 'table', 'string');\n\n\t\t\ttemplateChecks.propType(type, params, 'alias', 'string');\n\n\t\t\ttemplateChecks.requiredProp(type, params, 'modifier');\n\t\t\ttemplateChecks.propType(type, params, 'modifier', 'object');\n\n\t\t\ttemplateChecks.propType(type, params, 'condition', ['array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'returning', ['array', 'object']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('remove', {\n\t\tpattern: '{with} {withRecursive} delete from {table} {alias} {condition} {returning}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n\t\t\ttemplateChecks.propType(type, params, 'with', 'object');\n\t\t\ttemplateChecks.propType(type, params, 'withRecursive', 'object');\n\n\t\t\ttemplateChecks.requiredProp(type, params, 'table');\n\t\t\ttemplateChecks.propType(type, params, 'table', 'string');\n\n\t\t\ttemplateChecks.propType(type, params, 'alias', 'string');\n\n\t\t\ttemplateChecks.propType(type, params, 'condition', ['array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'returning', ['array', 'object']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('union', dialect.templates.get('queriesCombination'));\n\n\n\tdialect.templates.add('intersect', dialect.templates.get('queriesCombination'));\n\n\n\tdialect.templates.add('except', dialect.templates.get('queriesCombination'));\n};\n"]},"metadata":{},"sourceType":"script"}