{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, replaceUpdatedObject, sortData, fillRecordBasedOnCheckBoxSelection, getSameRecordFromTwoArrays, getRecordBasedOnPrimaryKeyName, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, rearrangeDateFormat, convertDateTimetoStringDBFormat } from '../components/CommonScript';\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\nimport Axios from 'axios';\nimport { checkBoxOperation, transactionStatus } from '../components/Enumeration';\nimport { intl } from '../components/App';\nexport function getRegTypeJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getRegistrationTypeBySampleType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultSampleTypeValue: inputData.defaultSampleTypeValue,\n            realDesignTemplateMappingValue: inputData.realDesignTemplateMappingValue,\n            realDynamicDesignMappingList: inputData.realDynamicDesignMappingList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegSubTypeJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultRegTypeValue: inputData.defaultRegTypeValue,\n            realDesignTemplateMappingValue: inputData.realDesignTemplateMappingValue,\n            realDynamicDesignMappingList: inputData.realDynamicDesignMappingList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAppConfigVersionJobAllocation(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\n            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue,\n            realDesignTemplateMappingValue: inputParam.inputData.realDesignTemplateMappingValue,\n            realDynamicDesignMappingList: inputParam.inputData.realDynamicDesignMappingList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getTestComboBySection\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatusJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getTestComboBySection\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatusSectionJobAllocation(inputData) {\n  return function (dispatch) {\n    const testStatusService = rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData);\n    const sectionService = rsapi.post(\"joballocation/getSectionByApproveVersion\", inputData);\n    let urlArray = [];\n    urlArray = [testStatusService, sectionService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getDesignTemplateJobAllocation(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getDesignTemplateByApprovalConfigVersion\", inputParam).then(response => {\n      if (response.data[\"Success\"]) {\n        toast.warn(response.data.Success);\n      }\n\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            defaultApprovalVersionValue: inputParam.masterData.defaultApprovalVersionValue,\n            ApprovalVersionValue: inputParam.masterData.realApprovalVersionValue,\n            realDesignTemplateMappingValue: inputParam.realDesignTemplateMappingValue,\n            realDynamicDesignMappingList: inputParam.realDynamicDesignMappingList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestStatusJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} //ALPD-4755-To get previously save filter details when click the filter name,done by Dhanushya RI\n\nexport function getJobAllcationFilterSubmit(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getJobAllocationDetails\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showTest: inputParam.inputData.showTest,\n          activeTestTab: inputParam.inputData.activeTestTab,\n          showFilter: false,\n          sampleskip: 0,\n          sampletake: inputParam.sampletake,\n          subsampleskip: 0,\n          subsampletake: inputParam.subsampletake,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function ReceiveinLabStatusWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/CreateReceiveinLab\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_SAMPLE\"], inputParam.inputData.masterData.JA_SAMPLE, \"nregistrationsectioncode\");\n        replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"], inputParam.inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_SAMPLE\"];\n        delete response.data[\"JA_SUBSAMPLE\"];\n        delete response.data[\"JA_TEST\"];\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedSample: replaceUpdatedObject(response.data[\"JASelectedSample\"], inputParam.inputData.masterData.JASelectedSample, \"nregistrationsectioncode\"),\n          JASelectedSubSample: replaceUpdatedObject(response.data[\"JASelectedSubSample\"], inputParam.inputData.masterData.JASelectedSubSample, \"ntransactionsamplecode\"),\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      //toast.error(error.message); \n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAllottedTestWise(inputParam, type) {\n  return function (dispatch) {\n    let urlArray = [];\n    const AllotDetails = rsapi.post(\"joballocation/getAllotDetails\", { ...inputParam.inputData,\n      calenderViewAfterAllot: type\n    });\n\n    if (inputParam.inputData.nselecttype === 1) {\n      const RescheduleEditById = rsapi.post(\"joballocation/getRescheduleEdit\", {\n        \"npreregno\": inputParam.inputData.npreregno,\n        \"ntransactionsamplecode\": inputParam.inputData.ntransactionsamplecode,\n        \"transactiontestcode\": inputParam.inputData.transactiontestcode,\n        ...inputParam.inputData\n      });\n      urlArray = [AllotDetails, RescheduleEditById];\n    } else {\n      if (type === 2) {\n        const calenderProperties = rsapi.post(\"joballocation/calenderProperties\", { ...inputParam.inputData,\n          startDate: convertDateTimetoStringDBFormat(new Date(), inputParam.inputData.userinfo)\n        });\n        urlArray = [AllotDetails, calenderProperties];\n      } else {\n        urlArray = [AllotDetails];\n      }\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      const TechniqueMap = constructOptionList(response[0].data.Technique || [], \"ntechniquecode\", \"stechniquename\", undefined, undefined, false);\n      const Technique = TechniqueMap.get(\"OptionList\");\n      const UsersPeriodMap = constructOptionList(response[0].data.Period || [], \"nuserperiodcode\", \"speriodname\", undefined, undefined, false);\n      const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\n      const InstrumentCategoryMap = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, false);\n      const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\n      const InstrumentNameMap = constructOptionList(response[0].data.InstrumentName || [], \"ninstrumentnamecode\", \"sinstrumentname\", undefined, undefined, false);\n      const InstrumentName = InstrumentNameMap.get(\"OptionList\");\n      const InstrumentIdMap = constructOptionList(response[0].data.InstrumentId || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\n      const InstrumentId = InstrumentIdMap.get(\"OptionList\");\n      const InstrumentPeriodMap = constructOptionList(response[0].data.Period || [], \"ninstrumentperiodcode\", \"speriodname\", undefined, undefined, false);\n      const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\n      const SectionPeriodMap = constructOptionList(response[0].data.RescheduleSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      const RescheduleSection = SectionPeriodMap.get(\"OptionList\");\n      const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response[0].data.CurrentTime.body);\n      let UsersMap = [];\n      let Users = [];\n\n      if (inputParam.inputData.nselecttype == 1 && response[0] && response[0].data && response[0].data.Users === undefined) {\n        UsersMap = constructOptionList(response[1].data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n        Users = UsersMap.get(\"OptionList\");\n      } else {\n        UsersMap = constructOptionList(response[0].data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n        Users = UsersMap.get(\"OptionList\");\n      }\n\n      if (inputParam.inputData.nselecttype === 1) {\n        const editData = response[1].data.JobAllocation;\n        selectedRecord[\"ninstrumentcatcode\"] = {\n          \"value\": editData[\"ninstrumentcategorycode\"],\n          \"label\": editData[\"sinstrumentcatname\"]\n        };\n        editData[\"ninstrumentcategorycode\"] !== -1 ? selectedRecord[\"ninstrumentnamecode\"] = {\n          \"value\": editData[\"ninstrumentnamecode\"],\n          \"label\": editData[\"sinstrumentname\"]\n        } : selectedRecord[\"ninstrumentnamecode\"] = \"\";\n        editData[\"ninstrumentcategorycode\"] !== -1 ? selectedRecord[\"ninstrumentcode\"] = {\n          \"value\": editData[\"ninstrumentcode\"],\n          \"label\": editData[\"sinstrumentid\"]\n        } : selectedRecord[\"ninstrumentcode\"] = \"\";\n        editData[\"ninstrumentcategorycode\"] !== -1 ? selectedRecord[\"ninstrumentperiodcode\"] = {\n          \"value\": editData[\"ninstrumentperiodcode\"],\n          \"label\": editData[\"sinstrumentperiodname\"]\n        } : selectedRecord[\"ninstrumentperiodcode\"] = \"\";\n        editData[\"ninstrumentcategorycode\"] !== -1 ? selectedRecord[\"dinstblockfromdatetime\"] = rearrangeDateFormat(inputParam.inputData.userinfo, editData.instrumentstartdate) : selectedRecord[\"dinstblockfromdatetime\"] = \"\";\n        editData[\"ninstrumentcategorycode\"] !== -1 ? selectedRecord[\"sinstrumentholdduration\"] = editData.sinstrumentholdduration : selectedRecord[\"sinstrumentholdduration\"] = \"\";\n        selectedRecord[\"scomments\"] = editData.comments;\n        selectedRecord[\"suserholdduration\"] = editData.suserholdduration;\n        selectedRecord[\"duserblockfromdatetime\"] = rearrangeDateFormat(inputParam.inputData.userinfo, editData.userstartdate);\n        editData[\"ntechniquecode\"] !== -1 ? selectedRecord[\"ntechniquecode\"] = {\n          \"value\": editData[\"ntechniquecode\"],\n          \"label\": editData[\"stechniquename\"]\n        } : selectedRecord[\"ntechniquecode\"] = \"\";\n        selectedRecord[\"nusercode\"] = {\n          \"value\": editData[\"nusercode\"],\n          \"label\": editData[\"susername\"]\n        };\n        selectedRecord[\"nuserperiodcode\"] = {\n          \"value\": editData[\"nuserperiodcode\"],\n          \"label\": editData[\"suserperiodname\"]\n        };\n        selectedRecord[\"nsectioncode\"] = {\n          \"value\": editData[\"nsectioncode\"],\n          \"label\": editData[\"ssectionname\"]\n        };\n        selectedRecord = { ...selectedRecord\n        };\n      } else if (type !== 2) {\n        selectedRecord[\"scomments\"] = \"\";\n        selectedRecord[\"suserholdduration\"] = \"\";\n        selectedRecord[\"sinstrumentholdduration\"] = \"\";\n        selectedRecord[\"duserblockfromdatetime\"] = new Date();\n      } //Added by sonia on 8th Aug 2024 for JIRA ID:ALPD-4563\n      //if(inputParam.inputData.controlAction ===3){\n\n\n      if (inputParam.inputData.operation === \"Reschedule\" && inputParam.inputData.nselecttype === 2) {\n        selectedRecord[\"nsectioncode\"] = {\n          \"value\": response[0].data.RescheduleSection[0][\"nsectioncode\"],\n          \"label\": response[0].data.RescheduleSection[0][\"ssectionname\"]\n        };\n      } //}\n\n\n      let calenderProperties = [];\n      let calenderColor = [];\n      let calenderCommonHolidays1 = {};\n      let calenderPublicHolidays = [];\n      let calenderUserHolidays = [];\n\n      if (type === 2) {\n        calenderProperties = response[1].data.calenderSettings;\n        calenderColor = response[1].data.calenderColor;\n        calenderPublicHolidays = response[1].data.calenderPublicHolidays || [];\n        calenderCommonHolidays1 = response[1].data.calenderCommonHolidays.length > 0 ? response[1].data.calenderCommonHolidays[0] : {};\n        calenderPublicHolidays = calenderPublicHolidays.map((dataItem, i) => {\n          return {\n            start: new Date(dataItem.dcalenderholidaystartdate),\n            end: new Date(dataItem.dcalenderholidayenddate),\n            title: dataItem.sdescription,\n            id: dataItem.id ? dataItem.id : i,\n            startTimezone: dataItem.startTimezone,\n            endTimezone: dataItem.endTimezone,\n            description: dataItem.sdescription,\n            Instrument: dataItem.ninstrumentcode && dataItem.ninstrumentcode,\n            InstrumentCategory: dataItem.ninstrumentcatcode && dataItem.ninstrumentcatcode,\n            isCalenderHolidays: true,\n            color: \"#babaff\",\n            startDateor: convertDateTimetoStringDBFormat(new Date(dataItem.dcalenderholidaystartdate), inputParam.inputData.userinfo),\n            endDateor: convertDateTimetoStringDBFormat(new Date(dataItem.dcalenderholidayenddate), inputParam.inputData.userinfo),\n            stestsynonym: \"-\",\n            ntransactionstatus: -1,\n            stransdisplaystatus: \"-\"\n          };\n        }); //     calenderUserHolidays = calenderUserHolidays.map((dataItem, i) => {\n        //         return {\n        //             start: new Date(dataItem.dcalenderholidaystartdate),\n        //             end: new Date(dataItem.dcalenderholidayenddate),\n        //             title: dataItem.sdescription,\n        //             id: dataItem.id ? dataItem.id : i,\n        //             startTimezone: dataItem.startTimezone,\n        //             endTimezone: dataItem.endTimezone,\n        //             description:  dataItem.sdescription,\n        //             Instrument: dataItem.ninstrumentcode && dataItem.ninstrumentcode,\n        //             InstrumentCategory: dataItem.ninstrumentcatcode && dataItem.ninstrumentcatcode,\n        //             isCalenderHolidays: true,\n        //             color: \"#babaff\",\n        //             startDateor: convertDateTimetoStringDBFormat(new Date(dataItem.dcalenderholidaystartdate), inputParam.inputData.userinfo),\n        //             endDateor: convertDateTimetoStringDBFormat(new Date(dataItem.dcalenderholidayenddate), inputParam.inputData.userinfo),\n        //             stestsynonym: \"-\",\n        //             ntransactionstatus: -1,\n        //             stransdisplaystatus:\"-\",\n        //         }\n        //     });\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Technique,\n          Users,\n          UsersPeriod,\n          InstrumentCategory,\n          InstrumentName,\n          InstrumentId,\n          InstrumentPeriod,\n          currentTime,\n          selectedRecord,\n          openModal: true,\n          isOpen: true,\n          operation: inputParam.inputData.operation,\n          screenName: inputParam.inputData.screenName,\n          ncontrolCode: inputParam.inputData.ncontrolcode,\n          loading: false,\n          calenderProperties,\n          calenderColor,\n          calenderPublicHolidays: calenderPublicHolidays,\n          holidaydateRestrict: calenderProperties.filter(x => x.ncalendersettingcode === 65).length > 0 ? calenderProperties.filter(x => x.ncalendersettingcode === 65)[0][\"scalendersettingvalue\"] === \"3\" ? true : false : true,\n          personalLeaveRestrict: calenderProperties.filter(x => x.ncalendersettingcode === 66).length > 0 ? calenderProperties.filter(x => x.ncalendersettingcode === 66)[0][\"scalendersettingvalue\"] === \"3\" ? true : false : true,\n          calenderUserHolidays: calenderUserHolidays,\n          calenderCommonHolidays1,\n          commonHolidaydateRestrict: calenderProperties.filter(x => x.ncalendersettingcode === 67).length > 0 ? calenderProperties.filter(x => x.ncalendersettingcode === 67)[0][\"scalendersettingvalue\"] === \"3\" ? true : false : true,\n          RescheduleSection\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAllotAnotherUserTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getAllotAnotherUserDetails\", inputParam.inputData).then(response => {\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\", \"speriodname\", undefined, undefined, false);\n      const Users = UsersMap.get(\"OptionList\");\n      const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\n      const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\n      const Technique = response.data.Technique && response.data.Technique[0].stechniquename;\n      const TechniqueCode = response.data.Technique && response.data.Technique[0].ntechniquecode;\n      let selectedRecord = {};\n      selectedRecord[\"scomments\"] = \"\";\n      selectedRecord[\"suserholdduration\"] = \"\";\n      selectedRecord[\"sinstrumentholdduration\"] = \"\";\n      selectedRecord[\"duserblockfromdatetime\"] = new Date();\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Technique,\n          TechniqueCode,\n          Users,\n          UsersPeriod,\n          currentTime,\n          selectedRecord,\n          isOpen: true,\n          operation: inputParam.inputData.operation,\n          screenName: inputParam.inputData.screenName,\n          openModal: true,\n          ncontrolCode: inputParam.inputData.ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getInstrumentName(ninstrumentcatcode, ncalibrationreq, userInfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getInstrumentNameBasedCategory\", {\n      \"ninstrumentcatcode\": ninstrumentcatcode,\n      \"ncalibrationreq\": ncalibrationreq,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let InstrumentName = [];\n      const InstrumentNameMap = constructOptionList(response.data.InstrumentName || [], \"ninstrumentnamecode\", \"sinstrumentname\", undefined, undefined, false);\n      InstrumentName = InstrumentNameMap.get(\"OptionList\");\n      selectedRecord[\"ninstrumentnamecode\"] = \"\";\n\n      if (ninstrumentcatcode !== transactionStatus.NA) {\n        selectedRecord[\"dinstblockfromdatetime\"] = new Date();\n      } else {\n        selectedRecord[\"dinstblockfromdatetime\"] = \"\";\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          InstrumentName,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getInstrumentId(ninstrumentcatcode, ninstrumentnamecode, ncalibrationreq, userInfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getInstrumentIdBasedCategory\", {\n      \"ninstrumentcatcode\": ninstrumentcatcode,\n      \"ninstrumentnamecode\": ninstrumentnamecode,\n      \"ncalibrationreq\": ncalibrationreq,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let InstrumentId = [];\n      const InstrumentIdMap = constructOptionList(response.data.InstrumentId || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\n      InstrumentId = InstrumentIdMap.get(\"OptionList\");\n      selectedRecord[\"ninstrumentcode\"] = \"\"; // if (ninstrumentcatcode !== transactionStatus.NA) {\n      //     selectedRecord[\"dinstblockfromdatetime\"] = new Date();\n      // } else {\n      //     selectedRecord[\"dinstblockfromdatetime\"] = \"\";\n      // }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          InstrumentId,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getUsers(ntechniquecode, JASelectedTest, userInfo, selectedRecord, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getUsersBasedTechnique\", {\n      \"ntechniquecode\": ntechniquecode,\n      //  \"ssectioncode\": JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample => sample.nsectioncode).join(\",\") : \"\",\n      \"ssectioncode\": selectedRecord[\"nsectioncode\"] ? selectedRecord[\"nsectioncode\"].value.toString() : JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample => sample.nsectioncode).join(\",\") : \"\",\n      \"nregtypecode\": JASelectedTest.realRegTypeValue.nregtypecode,\n      \"nregsubtypecode\": JASelectedTest.realRegSubTypeValue.nregsubtypecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let Users = [];\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      Users = UsersMap.get(\"OptionList\");\n      selectedRecord[\"nusercode\"] = \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // masterData:{...masterData},\n          Users,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function ViewAnalystCalendar(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/viewAnalystCalendar\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.inputData.masterData,\n        ...response.data\n      };\n      let Users = [];\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      Users = UsersMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Users,\n          screenName: inputParam.inputData.screenName,\n          loading: false,\n          openModal: true,\n          masterData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function CancelTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/cancelTest\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_TEST\"];\n        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\n          TestView: inputParam.inputData.masterData.TestView\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function AllotJobAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/AllotJobCreate\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_TEST\"];\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\n          TestView: replaceUpdatedObject(response.data[\"TestView\"], inputParam.inputData.masterData.TestView, \"ntransactiontestcode\")\n        };\n        let respObject = { ...inputParam.inputData,\n          masterData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function AllotAnotherUserAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/AllotAnotherUserCreate\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_TEST\"];\n        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\n          TestView: inputParam.inputData.masterData.TestView\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function RescheduleJobAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/RescheduleCreate\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n\n        if (parseInt(inputParam.inputData.nsectioncode) === parseInt(inputParam.inputData.nfiltersectioncode)) {\n          delete response.data[\"JA_TEST\"];\n        }\n\n        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          TestView: inputParam.inputData.masterData.TestView\n        };\n        let UserSection = [];\n        const UserSectionMap = constructOptionList(response.data.UserSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n        UserSection = UserSectionMap.get(\"OptionList\");\n\n        if (parseInt(inputParam.inputData.nsectioncode) === parseInt(inputParam.inputData.nfiltersectioncode)) {\n          masterData = { ...masterData,\n            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\")\n          };\n        }\n\n        let respObject = {\n          UserSection,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        respObject = { ...respObject,\n          masterData\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function getJobAllocationSubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    //console.log(\"response :\");\n    let arr = []; // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\n    // (item,index) => \n    // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\n    // );\n\n    inputData.JASelectedSample && inputData.JASelectedSample.map(item => {\n      if (!arr.includes(item.nsectioncode)) {\n        arr.push(item.nsectioncode);\n      }\n    });\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(\",\"),\n      nregistrationsectioncode: inputData.nregistrationsectioncode,\n      // ssectioncode : inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\n      nsectioncode: arr.map(item => item).join(\",\"),\n      ntransactionstatus: String(inputData.ntransactionstatus),\n      ntransactiontestcode: \"0\",\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      fromdate: inputData.fromdate,\n      todate: inputData.todate,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      activeSubSampleTab: inputData.activeSubSampleTab,\n      nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedtemplatebasedflow: inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,\n      checkBoxOperation: inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\", { ...inputParamData,\n        checkBoxOperation: inputData.checkBoxOperation\n      }).then(response => {\n        if (response.data['JA_TEST'] && response.data['JA_TEST'].length === 0) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n          toast.warn(intl.formatMessage({\n            id: \"IDS_TESTISNOTAVAILABLE\"\n          }));\n        } else {\n          let responseData = { ...response.data\n          };\n          responseData = sortData(responseData, 'descending', 'ntransactionsamplecode'); // sortData(response.data);\n\n          let oldSelectedTest = inputData.masterData.JASelectedTest;\n          let oldSelectedSubSample = inputData.masterData.JASelectedSubSample;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray); // inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;  \n          // inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;\n          // inputData.masterData.JA_TEST = response.data.JA_TEST;  \n          // inputData.masterData.JASelectedTest=response.data.JASelectedTest;\n          // inputData.masterData.RegistrationAttachment =response.data.RegistrationAttachment;\n          // inputData.masterData.RegistrationSampleAttachment =response.data.RegistrationSampleAttachment;\n          // inputData.masterData.RegistrationComment =response.data.RegistrationComment;\n          // inputData.masterData.RegistrationSampleComment =response.data.RegistrationSampleComment;\n\n          let masterData = { ...inputData.masterData,\n            JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n            JASelectedSample: inputData.JASelectedSample\n          };\n\n          if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n            inputData.searchSubSampleRef.current.value = \"\";\n            masterData['searchedSubSample'] = undefined;\n          }\n\n          if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n            inputData.searchTestRef.current.value = \"\";\n            masterData['searchedTest'] = undefined;\n          }\n\n          let {\n            testskip,\n            testtake,\n            subsampleskip,\n            subsampletake,\n            sampleskip,\n            sampletake\n          } = inputData; // let bool = false;\n          // Commented bool value because no need to check bool condition to update skipInfo value.\n\n          let skipInfo = {}; // if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n\n          testskip = 0; //     bool = true\n          // }\n\n          subsampleskip = 0; // bool = true\n          // if (bool) {\n\n          skipInfo = {\n            testskip,\n            testtake,\n            subsampleskip,\n            subsampletake,\n            sampleskip,\n            sampletake\n          }; // }\n\n          let RegistrationTestAttachment = [];\n          let RegistrationTestComment = [];\n          let TestView = [];\n          let RegistrationComment = [];\n          let RegistrationSampleAttachment = []; //if (inputData.checkBoxOperation === 1) {\n\n          if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\n            let wholeSubSampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample = oldSelectedSubSample.filter(item => wholeSubSampleList.includes(item.ntransactionsamplecode)); //ALPD-3398\n            // oldSelectedSubSample.forEach((subsample, index) => {\n            //     if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n            //         oldSelectedSubSample.splice(index, 1)\n            //     }\n            // })\n\n            if (oldSelectedSubSample.length > 0) {\n              masterData = { ...masterData,\n                JASelectedSubSample: oldSelectedSubSample\n              };\n            }\n\n            let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n            oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.ntransactiontestcode)); //ALPD-3398\n            // oldSelectedTest.map((test, index) => {\n            //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            //         oldSelectedTest.splice(index, 1)\n            //     }\n            //     return null;\n            // })\n\n            let keepOld = false;\n            let ntransactiontestcode;\n            let npreregno;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                JASelectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\n              npreregno = masterData.JASelectedSample[0].npreregno;\n            }\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTATTACHMENTS\":\n                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                dataStateName = \"testAttachmentDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTVIEW\":\n                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"TestView\";\n                dataStateName = \"testViewDataState\";\n                break;\n\n              default:\n                RegistrationComment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"npreregno\");\n                activeName = \"RegistrationTestAttachment\";\n                dataStateName = \" testAttachmentDataState\";\n                break;\n            } // } else if (inputData.checkBoxOperation === 5) {\n\n          } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\n            let list = [];\n            let dbData = [];\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTATTACHMENTS\":\n                dbData = response.data.RegistrationTestAttachment || [];\n                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                dbData = response.data.RegistrationTestComment || [];\n                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTVIEW\":\n                dbData = response.data.TestView || [];\n                list = [...inputData.masterData.TestView, ...dbData];\n                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                dbData = response.data.RegistrationComment || [];\n                list = [...inputData.masterData.RegistrationComment, ...dbData];\n                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\");\n                break;\n\n              default:\n                dbData = response.data.RegistrationTestAttachment || [];\n                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n            }\n          } //else if (inputData.checkBoxOperation === 7) {\n          else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\n            let list = [];\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTATTACHMENTS\":\n                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                dataStateName = \"testAttachmentDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTVIEW\":\n                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\n                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"TestView\";\n                dataStateName = \"testViewDataState\";\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n                activeName = \"RegistrationComment\";\n                dataStateName = \"sampleCommentsDataState\";\n                break;\n\n              default:\n                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                dataStateName = \"testAttachmentDataState\";\n                break;\n            }\n          } else {\n            let list = [];\n\n            if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\n              let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n              oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.ntransactiontestcode)); //ALPD-3398\n              // oldSelectedTest.map((test, index) => {\n              //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              //         oldSelectedTest.splice(index, 1)\n              //     }\n              //     return null;\n              // })\n\n              let keepOld = false;\n              let ntransactiontestcode;\n\n              if (oldSelectedTest.length > 0) {\n                keepOld = true;\n                masterData = { ...masterData,\n                  JASelectedTest: oldSelectedTest\n                };\n              } else {\n                ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\n              }\n            }\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTATTACHMENTS\":\n                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                dataStateName = \"testAttachmentDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTVIEW\":\n                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\n                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"TestView\";\n                dataStateName = \"testViewDataState\";\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\n                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\");\n                activeName = \"RegistrationComment\";\n                dataStateName = \"sampleChangeDataState\";\n                break;\n\n              case \"IDS_SUBSAMPLEATTACHMENTS\":\n                list = response.data.RegistrationSampleAttachment ? sortData(response.data.RegistrationSampleAttachment, 'descending', 'nsampleattachmentcode') : [];\n                RegistrationSampleAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JASelectedSubSample.length > 0 ? inputData.masterData.JASelectedSubSample[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\");\n                activeName = \"RegistrationSampleAttachment\";\n                dataStateName = \"subsampleAttachmentDataState\";\n                break;\n\n              default:\n                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                dataStateName = \"testAttachmentDataState\";\n                break;\n            }\n          }\n\n          masterData = { ...masterData,\n            RegistrationTestAttachment,\n            RegistrationTestComment,\n            TestView,\n            RegistrationComment,\n            RegistrationSampleAttachment\n          };\n\n          if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              secondarySelection: inputData[\"secondarySelection\"],\n              loading: false,\n              // sampleskip: undefined,\n              // sampletake: undefined,\n              ...skipInfo,\n              activeTabIndex: inputData.activeTabIndex\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.JASelectedTest;\n      let oldSelectedSubSample = inputData.masterData.JASelectedSubSample;\n      let {\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let skipInfo = {};\n      let TestSelected = [];\n      let subSampleSelected = [];\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\n      }\n\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\n        let JASelectedSample = inputData.JASelectedSample;\n        let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\n        let JASelectedSubSample = inputData.masterData.JA_SUBSAMPLE;\n\n        if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\n          JASelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.JA_SUBSAMPLE[0]];\n\n          if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let ntransactionsamplecode = JASelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\n        let npreregno = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(',');\n        let nsectioncode = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(',');\n        let masterData = { ...inputData.masterData,\n          JASelectedSample,\n          JASelectedSubSample,\n          JASelectedTest\n        };\n        inputData = { ...inputData,\n          ntransactiontestcode,\n          npreregno,\n          nsectioncode,\n          ntransactionsamplecode,\n          JASelectedSample,\n          JASelectedTest,\n          JASelectedSubSample,\n          //  checkBoxOperation: 3,\n          checkBoxOperation: checkBoxOperation.SINGLESELECT,\n          activeTestTab: inputData.activeTestTab,\n          masterData\n        };\n\n        if (JASelectedTest.length > 0) {\n          inputData = { ...inputData,\n            childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"TestView\"]\n          };\n          dispatch(getTestChildTabDetailJobAllocation(inputData, true));\n        } else {\n          inputData = { ...inputData,\n            masterData,\n            childTabsKey: [\"JA_TEST\"]\n          };\n          dispatch(getJobAllocationTestDetail(inputData, true));\n        }\n      } else {\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: TestSelected ? TestSelected : inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSample: inputData.JASelectedSample,\n          JASelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.JA_SUBSAMPLE.length > 0 ? [inputData.masterData.JA_SUBSAMPLE[0]] : []\n        };\n        let subsamplecheck = true;\n\n        if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\n          let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n          if (SubSampleSelected.length > 0) {\n            let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\n\n            if (filterSelectedSubSample.length === 0) {\n              let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n              oldSelectedSubSample = oldSelectedSubSample.filter(item => wholeSubSample.includes(item.ntransactionsamplecode)); //ALPD-3398\n              // oldSelectedSubSample.forEach((test, index) => {\n              //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n              //         oldSelectedSubSample.splice(index, 1)\n              //     }\n              //     return null;\n              // })\n\n              if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0 && masterData.selectedTest.length === 0) {\n                const selectedSubSample1 = [inputData.masterData.JA_SUBSAMPLE[0]];\n                masterData = { ...masterData,\n                  JASelectedSubSample: selectedSubSample1,\n                  selectedTest: []\n                };\n                inputData = { ...inputData,\n                  ...masterData\n                };\n                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\");\n                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\"); //inputData[\"checkBoxOperation\"] = 3\n\n                inputData[\" checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n                inputData[\"childTabsKey\"] = [\"JA_TEST\"];\n                subsamplecheck = false;\n                dispatch(getJobAllocationTestDetail(inputData, true));\n              }\n            } else {\n              oldSelectedSubSample = filterSelectedSubSample;\n            }\n          } else {\n            let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample = oldSelectedSubSample.filter(item => wholeSubSample.includes(item.ntransactionsamplecode)); //ALPD-3398\n            // oldSelectedSubSample.forEach((test, index) => {\n            //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n            //         oldSelectedSubSample.splice(index, 1)\n            //     }\n            //     return null;\n            // })\n          }\n\n          if (subsamplecheck) {\n            masterData = { ...masterData,\n              JASelectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampleskip,\n              subsampletake\n            };\n          }\n        }\n\n        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.ntransactiontestcode)); //ALPD-3398         \n        // oldSelectedTest.map((test, index) => {\n        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n        //         oldSelectedTest.splice(index, 1)\n        //     }\n        //     return null;\n        // })\n\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            JASelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.JA_TEST[0].ntransactiontestcode;\n        }\n\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              JASelectedSample: inputData.JASelectedSample,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              TestView\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getJobAllocationTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    //console.log(\"response :\");\n    let arr = [];\n    let arr1 = []; // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\n    // (item,index) => \n    // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\n    // );\n    //   const myArray = inputData.nsectioncode.split(\",\");\n    //   myArray.map((item) => {\n    //         if(!arr.includes(item)) {\n    //             arr.push(item)\n    //           }\n    //         }\n    //     )\n\n    let JASelectedSubSample = inputData.JASelectedSubSample;\n    JASelectedSubSample && JASelectedSubSample.map(item => {\n      if (!arr.includes(item.nsectioncode)) {\n        arr.push(item.nsectioncode);\n      }\n    });\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let inputParamData = {\n      nflag: 3,\n      ntype: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      nsectioncode: arr.map(nsectioncode => nsectioncode).join(\",\"),\n      ntransactiontestcode: \"0\",\n      ntransactionstatus: inputData.ntransactionstatus.toString(),\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      activeTestTab: inputData.activeTestTab,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation,\n      nneedsubsample: inputData.nneedsubsample\n    };\n    const subSample = inputData.nneedsubsample;\n\n    if (isServiceRequired) {\n      dispatch(initRequest(true));\n      rsapi.post(\"joballocation/getJobAllocationTestDetails\", inputParamData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData, 'descending', 'ntransactionsamplecode');\n        let oldSelectedTest = inputData.masterData.JASelectedTest;\n        let oldSelectedSubSample = inputData.masterData.JASelectedSubSample || [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray); //inputData.masterData.JA_TEST = response.data.JA_TEST;\n\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSample: inputData.masterData.JASelectedSample,\n          JASelectedSubSample: inputData.JASelectedSubSample || inputData.masterData.JASelectedSubSample\n        };\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData; // let bool = false;\n        // Commented bool value because no need to check bool condition to update skipInfo value.\n\n        let skipInfo = {}; // if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n\n        testskip = 0; // bool = true\n        // }\n        // if (bool) {\n\n        skipInfo = {\n          testskip,\n          testtake\n        }; // }\n\n        let RegistrationTestAttachment = [];\n        let RegistrationTestComment = [];\n        let TestView = [];\n        let RegistrationSampleComment = [];\n        let RegistrationSampleAttachment = []; //if (inputData.checkBoxOperation === 1) {\n\n        if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\n          let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.ntransactiontestcode)); //ALPD-3398\n          // oldSelectedTest.map((test, index) => {\n          //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n          //         oldSelectedTest.splice(index, 1)\n          //     }\n          //     return null;\n          // })\n\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              JASelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTVIEW\":\n              TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestView\";\n              dataStateName = \"testViewDataState\";\n              break;\n\n            default:\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n          } //} else if (inputData.checkBoxOperation === 5) {\n\n        } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTVIEW\":\n              dbData = response.data.TestView || [];\n              list = [...inputData.masterData.TestView, ...dbData];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          } // } else if (inputData.checkBoxOperation === 7) {\n\n        } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\n          let list = [];\n          let dbData = [];\n          let testList = reArrangeArrays(inputData.masterData.JA_SUBSAMPLE, responseData.JA_TEST, \"ntransactionsamplecode\");\n          masterData = { ...masterData,\n            JASelectedTest: [testList[0]],\n            JA_TEST: testList\n          };\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTVIEW\":\n              dbData = response.data.TestView || [];\n              list = [...inputData.masterData.TestView, ...dbData];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else {\n          let list = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTVIEW\":\n              list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestView\";\n              dataStateName = \"testViewDataState\";\n              break;\n\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\n              list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_SUBSAMPLE.length > 0 ? inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentState\";\n              break;\n          }\n        }\n\n        if (subSample) {\n          let wholeSubsampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n          oldSelectedSubSample = oldSelectedSubSample.filter(item => wholeSubsampleList.includes(item.ntransactionsamplecode)); //ALPD-3398\n          // oldSelectedSubSample.map((test, index) => {\n          //     if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n          //         oldSelectedSubSample.splice(index, 1)\n          //     }\n          //     return null;\n          // })\n\n          let keepOld = false;\n          let ntransactionsamplecode;\n\n          if (oldSelectedSubSample.length > 0) {\n            keepOld = true;\n          } else {\n            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode;\n          }\n\n          switch (inputData.activeSubSampleTab) {\n            case \"IDS_SUBSAMPLECOMMENTS\":\n              RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"subSampleCommentDataState\";\n              break;\n\n            default:\n              RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleAttachment\";\n              dataStateName = \"subSampleAttachmentDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          RegistrationTestAttachment,\n          RegistrationTestComment,\n          TestView,\n          RegistrationSampleComment,\n          RegistrationSampleAttachment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab,\n            // activeTestTab: inputData.activeTestTab,\n            screenName: inputData.activeTestTab,\n            subsampleskip: undefined,\n            subsampletake: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        //console.log(\"error:\", error);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.JASelectedTest;\n      let TestSelected = inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\n        let JASelectedSubSample = inputData.RESelectedSubSample;\n        let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\n        inputData = { ...inputData,\n          childTabsKey: [\"TestView\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          JASelectedSample: inputData.masterData.JASelectedSample,\n          JASelectedTest,\n          JASelectedSubSample,\n          //  checkBoxOperation: 3,\n          checkBoxOperation: checkBoxOperation.SINGLESELECT,\n          activeTestTab: inputData.activeTestTab\n        };\n        dispatch(getTestChildTabDetailJobAllocation(inputData, true));\n      } else {\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSubSample: inputData.JASelectedSubSample\n        };\n        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.ntransactiontestcode)); //ALPD-3398\n        // oldSelectedTest.map((test, index) => {\n        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n        //         oldSelectedTest.splice(index, 1)\n        //     }\n        //     return null;\n        // })\n\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            JASelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = masterData.JA_TEST[0].ntransactiontestcode;\n        }\n\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              JASelectedSubSample: inputData.JASelectedSubSample,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              TestView\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            // activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getTestChildTabDetailJobAllocation(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let arr = [];\n    inputData.JASelectedTest && inputData.JASelectedTest.map(item => {\n      if (!arr.includes(item.nsectioncode)) {\n        arr.push(item.nsectioncode);\n      }\n    });\n    let inputParamData = {\n      ntransactiontestcode: inputData.JASelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\n      npreregno: inputData.npreregno,\n      nsectioncode: arr.map(nsectioncode => nsectioncode).join(\",\"),\n      //ssectioncode :inputData.JASelectedTest.map(sample => sample.nsectioncode).join(\",\"),\n      ntransactionsamplecode: inputData.JASelectedTest.map(test => test.ntransactionsamplecode).join(\",\"),\n      ndesigntemplatemappingcode: inputData.masterData.realDesignTemplateMappingValue && inputData.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      userinfo: inputData.userinfo\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let url = \"\";\n\n    switch (inputData.activeTestTab) {\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        activeName = \"RegistrationTestAttachment\";\n        dataStateName = \"testAttachmentDataState\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        activeName = \"RegistrationTestComment\";\n        dataStateName = \"testCommentDataState\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        activeName = \"RegistrationSampleAttachment\";\n        dataStateName = \"sampleAttachmentDataState\";\n        break;\n\n      case \"IDS_TESTVIEW\":\n        url = \"joballocation/getTestView\";\n        activeName = \"TestView\";\n        dataStateName = \"testViewDataState\";\n        break;\n\n      default:\n        url = \"attachment/getTestAttachment\";\n        activeName = \"RegistrationTestAttachment\";\n        dataStateName = \"testAttachmentDataState\";\n        break;\n    }\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(url, inputParamData).then(response => {\n        let responseData = { ...response.data,\n          JASelectedSample: inputData.JASelectedSample || inputData.masterData.JASelectedSample,\n          JASelectedTest: inputData.JASelectedTest,\n          activeTabIndex: inputData.activeTabIndex,\n          activeTabId: inputData.activeTabId\n        };\n        let skipInfo = {};\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          ...responseData,\n          JASelectedTest: inputData.JASelectedTest\n        };\n\n        if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = {\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            activeTabIndex: inputData.activeTabIndex,\n            activeTabId: inputData.activeTabId,\n            activeTestTab: inputData.activeTestTab,\n            loading: false,\n            activeTestTab: inputData.activeTestTab,\n            screenName: inputData.activeTestTab,\n            testskip: undefined,\n            testtake: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n      let skipInfo = {};\n      let masterData = { ...inputData.masterData,\n        JASelectedTest: inputData.JASelectedTest\n      };\n\n      if (masterData[activeName].length <= inputData.skip) {\n        skipInfo = {\n          [dataStateName]: { ...inputData[dataStateName],\n            skip: 0,\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      } else {\n        skipInfo = { ...skipInfo,\n          [dataStateName]: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          activeTestTab: inputData.activeTestTab,\n          screenName: inputData.screenName,\n          ...skipInfo\n        }\n      });\n    }\n  };\n}\nexport function validateEsignforJobAllocation(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = inputParam.screenData.inputParam.methodUrl;\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        dispatch(dispatchMethods(inputParam[\"screenData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\n\nfunction dispatchMethods(screenData) {\n  return dispatch => {\n    let action = screenData.inputParam.action;\n\n    switch (action) {\n      case \"receiveinlab\":\n        dispatch(ReceiveinLabStatusWise(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"allotjob\":\n        dispatch(AllotJobAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"allotanotheruser\":\n        dispatch(AllotAnotherUserAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"reschedule\":\n        dispatch(RescheduleJobAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"canceltest\":\n        dispatch(CancelTestWise(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"AllotJobCalendar\":\n        // ALPD-5263 Added AllotJobCalendar condition by Vishakh due to not added this got loader issue\n        dispatch(AllotJobActionCalendar(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"updateSection\":\n        dispatch(updateSectionJobAllocation(screenData.inputParam));\n        break;\n\n      default:\n        break;\n    }\n  };\n}\n\nexport function updatedObjectWithNewElement1(oldList, newList) {\n  oldList = [...newList, ...oldList];\n  return oldList;\n}\nexport function getAnalystCalenderBasedOnUser(nusercode, masterData, userInfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getAnalystCalendarBasedOnUser\", {\n      \"nusercode\": nusercode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            analystCalenderData: response.data.UserData\n          },\n          loading: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getInstrumentNameForSchedule(ninstrumentcatcode, userInfo, edit, ninstrumentnamecode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getInstrumentNameBasedCategoryForSchedule\", {\n      \"ninstrumentcatcode\": ninstrumentcatcode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let InstrumentName = [];\n      const InstrumentMap = constructOptionList(response.data.InstrumentName || [], \"ninstrumentnamecode\", \"sinstrumentname\", undefined, undefined, false);\n      InstrumentName = InstrumentMap.get(\"OptionList\");\n\n      if (edit && ninstrumentnamecode) {\n        let obj = {\n          InstrumentName,\n          selectedInstrumentCatCode: ninstrumentcatcode\n        };\n        dispatch(getInstrumentForSchedule(ninstrumentcatcode, ninstrumentnamecode, userInfo, edit, obj));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            selectedInstrumentCatCode: ninstrumentcatcode,\n            InstrumentName,\n            Instrument: [],\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getInstrumentForSchedule(ninstrumentcatcode, ninstrumentnamecode, userInfo, edit, obj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getInstrumentBasedCategoryForSchedule\", {\n      \"ninstrumentcatcode\": ninstrumentcatcode,\n      \"ninstrumentnamecode\": ninstrumentnamecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let Instrument = [];\n      const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\n      Instrument = InstrumentMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Instrument,\n          loading: false,\n          ...obj\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function AllotJobActionCalendar(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/AllotJobCreateCalendar\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_TEST\"];\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\n          TestView: replaceUpdatedObject(response.data[\"TestView\"], inputParam.inputData.masterData.TestView, \"ntransactiontestcode\")\n        };\n        let respObject = { ...inputParam.inputData,\n          masterData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function clearInstrumentLoginData() {\n  return function (dispatch) {\n    //  dispatch(initRequest(true));\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: {\n        //Instrument\n        Instrument: [],\n        selectedInstrumentCatCode: undefined,\n        InstrumentName: [] //  loading: false,\n\n      }\n    });\n  };\n} //ALPD-3781\n\nexport function getSectionTest(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getSectionChange\", inputParam.inputData).then(response => {\n      let Section = []; //ALPD-4050\n\n      let selectedRecord = { ...inputParam.selectedRecord,\n        nsectioncode: \"\"\n      };\n      const SectionMap = constructOptionList(response.data.Section || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      Section = SectionMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Section,\n          loading: false,\n          loadEsign: false,\n          openModal: true,\n          operation: inputParam.inputData.operation,\n          screenName: inputParam.inputData.screenName,\n          ncontrolcode: inputParam.inputData.ncontrolcode,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} //ALPD-3781\n\nexport function updateSectionJobAllocation(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/updateSectionJobAllocation\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        let UserSection = [];\n        const UserSectionMap = constructOptionList(response.data.UserSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n        UserSection = UserSectionMap.get(\"OptionList\");\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data\n        };\n        let selectedRecord = { ...inputParam.selectedRecord,\n          \"nsectioncode\": \"\"\n        };\n        let respObject = { ...inputParam.inputData,\n          masterData,\n          UserSection,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined,\n          selectedRecord\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} //ALPD-3781\n\nexport function getUsersSection(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getUsersBySection\", {\n      \"userinfo\": inputParam.userInfo,\n      \"nsectioncode\": inputParam.nsectioncode,\n      \"nregtypecode\": inputParam.nregtypecode,\n      \"nregsubtypecode\": inputParam.nregsubtypecode\n    }).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        let Users = [];\n        const SectionUsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n        Users = SectionUsersMap.get(\"OptionList\");\n        let selectedRecord = { ...inputParam.selectedRecord,\n          \"nusercode\": \"\",\n          \"ntechniquecode\": \"\"\n        };\n        let masterData = { ...inputParam.masterData,\n          ...response.data\n        };\n        let respObject = {\n          selectedRecord,\n          masterData,\n          Users,\n          loading: false,\n          loadEsign: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getJobAllcationFilterDetail(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getJobAllocationFilter\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          nfilternamecode: inputParam.inputData.nfilternamecode,\n          modalShow: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/JobAllocationAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","replaceUpdatedObject","sortData","fillRecordBasedOnCheckBoxSelection","getSameRecordFromTwoArrays","getRecordBasedOnPrimaryKeyName","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","rearrangeDateFormat","convertDateTimetoStringDBFormat","postCRUDOrganiseTransSearch","Axios","checkBoxOperation","transactionStatus","intl","getRegTypeJobAllocation","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","defaultSampleTypeValue","realDesignTemplateMappingValue","realDynamicDesignMappingList","loading","catch","error","status","message","warn","getRegSubTypeJobAllocation","defaultRegTypeValue","getAppConfigVersionJobAllocation","inputParam","defaultRegSubTypeValue","RegSubTypeValue","realRegSubTypeValue","getSectionJobAllocation","defaultUserSectionValue","getFilterStatusJobAllocation","defaultFilterStatusValue","getFilterStatusSectionJobAllocation","testStatusService","sectionService","urlArray","all","defaultApprovalVersionValue","getDesignTemplateJobAllocation","Success","ApprovalVersionValue","realApprovalVersionValue","getTestStatusJobAllocation","getJobAllcationFilterSubmit","searchSampleRef","undefined","current","value","searchSubSampleRef","searchTestRef","showTest","activeTestTab","showFilter","sampleskip","sampletake","subsampleskip","subsampletake","testskip","testtake","documentDataState","sort","filter","testCommentDataState","ReceiveinLabStatusWise","rtn","JA_SAMPLE","JA_SUBSAMPLE","JA_TEST","JASelectedSample","JASelectedSubSample","JASelectedTest","respObject","loadEsign","openModal","showSample","postParamList","getAllottedTestWise","AllotDetails","calenderViewAfterAllot","nselecttype","RescheduleEditById","npreregno","ntransactionsamplecode","transactiontestcode","calenderProperties","startDate","Date","userinfo","selectedRecord","TechniqueMap","Technique","get","UsersPeriodMap","Period","UsersPeriod","InstrumentCategoryMap","InstrumentCategory","InstrumentNameMap","InstrumentName","InstrumentIdMap","InstrumentId","InstrumentPeriodMap","InstrumentPeriod","SectionPeriodMap","RescheduleSection","currentTime","CurrentTime","body","UsersMap","Users","editData","JobAllocation","instrumentstartdate","sinstrumentholdduration","comments","suserholdduration","userstartdate","operation","calenderColor","calenderCommonHolidays1","calenderPublicHolidays","calenderUserHolidays","calenderSettings","calenderCommonHolidays","length","map","dataItem","i","start","dcalenderholidaystartdate","end","dcalenderholidayenddate","title","sdescription","id","startTimezone","endTimezone","description","Instrument","ninstrumentcode","ninstrumentcatcode","isCalenderHolidays","color","startDateor","endDateor","stestsynonym","ntransactionstatus","stransdisplaystatus","isOpen","screenName","ncontrolCode","ncontrolcode","holidaydateRestrict","x","ncalendersettingcode","personalLeaveRestrict","commonHolidaydateRestrict","getAllotAnotherUserTestWise","stechniquename","TechniqueCode","ntechniquecode","getInstrumentName","ncalibrationreq","userInfo","NA","getInstrumentId","ninstrumentnamecode","getUsers","toString","sample","nsectioncode","join","realRegTypeValue","nregtypecode","nregsubtypecode","ViewAnalystCalendar","CancelTestWise","TestView","info","AllotJobAction","AllotAnotherUserAction","RescheduleJobAction","parseInt","nfiltersectioncode","UserSection","UserSectionMap","getJobAllocationSubSampleDetail","isServiceRequired","arr","item","includes","push","inputParamData","nsampletypecode","nregistrationsectioncode","String","ntransactiontestcode","ntestcode","napprovalversioncode","fromdate","todate","activeSampleTab","activeSubSampleTab","nneedsubsample","ndesigntemplatemappingcode","nneedtemplatebasedflow","activeName","dataStateName","formatMessage","oldSelectedTest","oldSelectedSubSample","childTabsKey","removeElementFromArray","skipInfo","RegistrationTestAttachment","RegistrationTestComment","RegistrationComment","RegistrationSampleAttachment","MULTISELECT","wholeSubSampleList","b","wholeTestList","keepOld","QUICKSELECTSTATUS","list","dbData","QUICKSELECTALL","skip","secondarySelection","activeTabIndex","TestSelected","subSampleSelected","isGrandChildGetRequired","filterSelectedSubSample","subsample","SINGLESELECT","getTestChildTabDetailJobAllocation","getJobAllocationTestDetail","subsamplecheck","SubSampleSelected","wholeSubSample","selectedTest","selectedSubSample1","bool","arr1","nflag","ntype","subSample","RegistrationSampleComment","testList","wholeSubsampleList","selectedSubSample","RESelectedSubSample","test","url","activeTabId","validateEsignforJobAllocation","methodUrl","screenData","toLowerCase","dispatchMethods","action","AllotJobActionCalendar","updateSectionJobAllocation","updatedObjectWithNewElement1","oldList","newList","getAnalystCalenderBasedOnUser","nusercode","analystCalenderData","UserData","getInstrumentNameForSchedule","edit","InstrumentMap","obj","selectedInstrumentCatCode","getInstrumentForSchedule","clearInstrumentLoginData","getSectionTest","Section","SectionMap","getUsersSection","SectionUsersMap","getJobAllcationFilterDetail","nfilternamecode","modalShow"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport {\r\n    constructOptionList, replaceUpdatedObject, sortData, fillRecordBasedOnCheckBoxSelection, getSameRecordFromTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, rearrangeDateFormat, convertDateTimetoStringDBFormat\r\n} from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport Axios from 'axios';\r\nimport { checkBoxOperation, transactionStatus } from '../components/Enumeration';\r\nimport {\r\n    intl\r\n} from '../components/App'\r\nexport function getRegTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationTypeBySampleType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultSampleTypeValue: inputData.defaultSampleTypeValue,\r\n                            realDesignTemplateMappingValue: inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList: inputData.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultRegTypeValue: inputData.defaultRegTypeValue,\r\n                            realDesignTemplateMappingValue: inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList: inputData.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAppConfigVersionJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\r\n                            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue,\r\n                            realDesignTemplateMappingValue: inputParam.inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList: inputParam.inputData.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        const testStatusService = rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData);\r\n        const sectionService = rsapi.post(\"joballocation/getSectionByApproveVersion\", inputData);\r\n        let urlArray = [];\r\n        urlArray = [testStatusService, sectionService];\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDesignTemplateJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getDesignTemplateByApprovalConfigVersion\", inputParam)\r\n            .then(response => {\r\n\r\n                if (response.data[\"Success\"]) {\r\n                    toast.warn(response.data.Success);\r\n                }\r\n\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputParam.masterData.defaultApprovalVersionValue,\r\n                            ApprovalVersionValue: inputParam.masterData.realApprovalVersionValue,\r\n                            realDesignTemplateMappingValue: inputParam.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList: inputParam.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n//ALPD-4755-To get previously save filter details when click the filter name,done by Dhanushya RI\r\nexport function getJobAllcationFilterSubmit(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getJobAllocationDetails\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                \r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showTest: inputParam.inputData.showTest,\r\n                        activeTestTab: inputParam.inputData.activeTestTab,\r\n                        showFilter: false,\r\n                        sampleskip: 0,\r\n                        sampletake: inputParam.sampletake,\r\n                        subsampleskip: 0,\r\n                        subsampletake: inputParam.subsampletake,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function ReceiveinLabStatusWise(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/CreateReceiveinLab\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    replaceUpdatedObject(response.data[\"JA_SAMPLE\"], inputParam.inputData.masterData.JA_SAMPLE, \"nregistrationsectioncode\");\r\n                    replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"], inputParam.inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n\r\n                    delete response.data[\"JA_SAMPLE\"];\r\n                    delete response.data[\"JA_SUBSAMPLE\"];\r\n                    delete response.data[\"JA_TEST\"];\r\n                    let masterData = {\r\n                        ...inputParam.inputData.masterData,\r\n                        ...response.data,\r\n                        JASelectedSample: replaceUpdatedObject(response.data[\"JASelectedSample\"], inputParam.inputData.masterData.JASelectedSample, \"nregistrationsectioncode\"),\r\n                        JASelectedSubSample: replaceUpdatedObject(response.data[\"JASelectedSubSample\"], inputParam.inputData.masterData.JASelectedSubSample, \"ntransactionsamplecode\"),\r\n                        JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                //toast.error(error.message); \r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAllottedTestWise(inputParam, type) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n\r\n        const AllotDetails = rsapi.post(\"joballocation/getAllotDetails\", { ...inputParam.inputData, calenderViewAfterAllot: type });\r\n\r\n\r\n\r\n        if (inputParam.inputData.nselecttype === 1) {\r\n            const RescheduleEditById = rsapi.post(\"joballocation/getRescheduleEdit\",\r\n                {\r\n                    \"npreregno\": inputParam.inputData.npreregno, \"ntransactionsamplecode\": inputParam.inputData.ntransactionsamplecode,\r\n                    \"transactiontestcode\": inputParam.inputData.transactiontestcode, ...inputParam.inputData\r\n                });\r\n\r\n            urlArray = [AllotDetails, RescheduleEditById];\r\n\r\n        } else {\r\n            if (type === 2) {\r\n                const calenderProperties = rsapi.post(\"joballocation/calenderProperties\", {...inputParam.inputData,startDate:convertDateTimetoStringDBFormat(new Date(), inputParam.inputData.userinfo)});\r\n                urlArray = [AllotDetails, calenderProperties];\r\n            } else {\r\n                urlArray = [AllotDetails];\r\n            }\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n\r\n                const TechniqueMap = constructOptionList(response[0].data.Technique || [], \"ntechniquecode\", \"stechniquename\", undefined, undefined, false);\r\n                const Technique = TechniqueMap.get(\"OptionList\");\r\n\r\n        \r\n\r\n                const UsersPeriodMap = constructOptionList(response[0].data.Period || [], \"nuserperiodcode\", \"speriodname\", undefined, undefined, false);\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n\r\n                const InstrumentCategoryMap = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, false);\r\n                const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\r\n\r\n                const InstrumentNameMap = constructOptionList(response[0].data.InstrumentName || [], \"ninstrumentnamecode\", \"sinstrumentname\", undefined, undefined, false);\r\n                const InstrumentName = InstrumentNameMap.get(\"OptionList\");\r\n\r\n                const InstrumentIdMap = constructOptionList(response[0].data.InstrumentId || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\r\n                const InstrumentId = InstrumentIdMap.get(\"OptionList\");\r\n\r\n                const InstrumentPeriodMap = constructOptionList(response[0].data.Period || [], \"ninstrumentperiodcode\", \"speriodname\", undefined, undefined, false);\r\n                const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\r\n              \r\n                const SectionPeriodMap = constructOptionList(response[0].data.RescheduleSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\r\n                const RescheduleSection = SectionPeriodMap.get(\"OptionList\");\r\n\r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response[0].data.CurrentTime.body);\r\n                let UsersMap =[];\r\n                let Users =[];\r\n                \r\n               \r\n               \r\n                \r\n\r\n                 if(inputParam.inputData.nselecttype==1&&response[0]&&response[0].data&&response[0].data.Users===undefined){\r\n                    UsersMap=constructOptionList(response[1].data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\r\n                    Users = UsersMap.get(\"OptionList\");\r\n                }else{\r\n                    UsersMap=constructOptionList(response[0].data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\r\n                    Users = UsersMap.get(\"OptionList\");\r\n                }\r\n\r\n                if (inputParam.inputData.nselecttype === 1) {\r\n                    const editData = response[1].data.JobAllocation;\r\n\r\n                    selectedRecord[\"ninstrumentcatcode\"] = {\r\n                        \"value\": editData[\"ninstrumentcategorycode\"],\r\n                        \"label\": editData[\"sinstrumentcatname\"]\r\n                    };\r\n\r\n                    editData[\"ninstrumentcategorycode\"] !== -1 ?\r\n                        selectedRecord[\"ninstrumentnamecode\"] = {\r\n                            \"value\": editData[\"ninstrumentnamecode\"],\r\n                            \"label\": editData[\"sinstrumentname\"]\r\n                        } : selectedRecord[\"ninstrumentnamecode\"] = \"\";\r\n\r\n\r\n                    editData[\"ninstrumentcategorycode\"] !== -1 ?\r\n                        selectedRecord[\"ninstrumentcode\"] = {\r\n                            \"value\": editData[\"ninstrumentcode\"],\r\n                            \"label\": editData[\"sinstrumentid\"]\r\n                        } : selectedRecord[\"ninstrumentcode\"] = \"\";\r\n\r\n                    editData[\"ninstrumentcategorycode\"] !== -1 ?\r\n                        selectedRecord[\"ninstrumentperiodcode\"] = {\r\n                            \"value\": editData[\"ninstrumentperiodcode\"],\r\n                            \"label\": editData[\"sinstrumentperiodname\"]\r\n                        } : selectedRecord[\"ninstrumentperiodcode\"] = \"\";\r\n\r\n                    editData[\"ninstrumentcategorycode\"] !== -1 ?\r\n                        selectedRecord[\"dinstblockfromdatetime\"] = rearrangeDateFormat(inputParam.inputData.userinfo, editData.instrumentstartdate) :\r\n                        selectedRecord[\"dinstblockfromdatetime\"] = \"\";\r\n\r\n                    editData[\"ninstrumentcategorycode\"] !== -1 ?\r\n                        selectedRecord[\"sinstrumentholdduration\"] = editData.sinstrumentholdduration : selectedRecord[\"sinstrumentholdduration\"] = \"\";\r\n\r\n                    selectedRecord[\"scomments\"] = editData.comments;\r\n                    selectedRecord[\"suserholdduration\"] = editData.suserholdduration;\r\n                    selectedRecord[\"duserblockfromdatetime\"] = rearrangeDateFormat(inputParam.inputData.userinfo, editData.userstartdate);\r\n\r\n                    editData[\"ntechniquecode\"] !== -1 ?\r\n                        selectedRecord[\"ntechniquecode\"] = {\r\n                            \"value\": editData[\"ntechniquecode\"],\r\n                            \"label\": editData[\"stechniquename\"]\r\n                        } : selectedRecord[\"ntechniquecode\"] = \"\";\r\n\r\n                    selectedRecord[\"nusercode\"] = {\r\n                        \"value\": editData[\"nusercode\"],\r\n                        \"label\": editData[\"susername\"]\r\n                    };\r\n                    selectedRecord[\"nuserperiodcode\"] = {\r\n                        \"value\": editData[\"nuserperiodcode\"],\r\n                        \"label\": editData[\"suserperiodname\"]\r\n                    };\r\n                    selectedRecord[\"nsectioncode\"] = {\r\n                        \"value\": editData[\"nsectioncode\"],\r\n                        \"label\": editData[\"ssectionname\"]\r\n                    };\r\n\r\n                    selectedRecord = { ...selectedRecord }\r\n                } else if (type !== 2) {\r\n                    selectedRecord[\"scomments\"] = \"\";\r\n                    selectedRecord[\"suserholdduration\"] = \"\";\r\n                    selectedRecord[\"sinstrumentholdduration\"] = \"\";\r\n                    selectedRecord[\"duserblockfromdatetime\"] = new Date();\r\n                }\r\n                //Added by sonia on 8th Aug 2024 for JIRA ID:ALPD-4563\r\n                //if(inputParam.inputData.controlAction ===3){\r\n                    if(inputParam.inputData.operation===\"Reschedule\" && inputParam.inputData.nselecttype===2 ){\r\n                        selectedRecord[\"nsectioncode\"] = {\r\n                            \"value\": response[0].data.RescheduleSection[0][\"nsectioncode\"],\r\n                            \"label\": response[0].data.RescheduleSection[0][\"ssectionname\"]\r\n                        };\r\n                    }\r\n                //}\r\n                \r\n                \r\n\r\n                let calenderProperties = []\r\n                let calenderColor = []\r\n                let calenderCommonHolidays1 = {}\r\n                let calenderPublicHolidays = []\r\n                let calenderUserHolidays = []\r\n                if (type === 2) {\r\n                    calenderProperties = response[1].data.calenderSettings\r\n                    calenderColor = response[1].data.calenderColor\r\n                    calenderPublicHolidays= response[1].data.calenderPublicHolidays||[]\r\n                    calenderCommonHolidays1 = response[1].data.calenderCommonHolidays.length>0?response[1].data.calenderCommonHolidays[0]:{};\r\n\r\n                    calenderPublicHolidays = calenderPublicHolidays.map((dataItem, i) => {\r\n                        return {\r\n                            start: new Date(dataItem.dcalenderholidaystartdate),\r\n                            end: new Date(dataItem.dcalenderholidayenddate),\r\n                            title: dataItem.sdescription,\r\n                            id: dataItem.id ? dataItem.id : i,\r\n                            startTimezone: dataItem.startTimezone,\r\n                            endTimezone: dataItem.endTimezone,\r\n                            description:  dataItem.sdescription,\r\n                            Instrument: dataItem.ninstrumentcode && dataItem.ninstrumentcode,\r\n                            InstrumentCategory: dataItem.ninstrumentcatcode && dataItem.ninstrumentcatcode,\r\n                            isCalenderHolidays: true,\r\n                            color: \"#babaff\",\r\n                            startDateor: convertDateTimetoStringDBFormat(new Date(dataItem.dcalenderholidaystartdate), inputParam.inputData.userinfo),\r\n                            endDateor: convertDateTimetoStringDBFormat(new Date(dataItem.dcalenderholidayenddate), inputParam.inputData.userinfo),\r\n                            stestsynonym: \"-\",\r\n                            ntransactionstatus: -1,\r\n                            stransdisplaystatus:\"-\",\r\n                        }\r\n                    });\r\n\r\n                //     calenderUserHolidays = calenderUserHolidays.map((dataItem, i) => {\r\n                //         return {\r\n                //             start: new Date(dataItem.dcalenderholidaystartdate),\r\n                //             end: new Date(dataItem.dcalenderholidayenddate),\r\n                //             title: dataItem.sdescription,\r\n                //             id: dataItem.id ? dataItem.id : i,\r\n                //             startTimezone: dataItem.startTimezone,\r\n                //             endTimezone: dataItem.endTimezone,\r\n                //             description:  dataItem.sdescription,\r\n                //             Instrument: dataItem.ninstrumentcode && dataItem.ninstrumentcode,\r\n                //             InstrumentCategory: dataItem.ninstrumentcatcode && dataItem.ninstrumentcatcode,\r\n                //             isCalenderHolidays: true,\r\n                //             color: \"#babaff\",\r\n                //             startDateor: convertDateTimetoStringDBFormat(new Date(dataItem.dcalenderholidaystartdate), inputParam.inputData.userinfo),\r\n                //             endDateor: convertDateTimetoStringDBFormat(new Date(dataItem.dcalenderholidayenddate), inputParam.inputData.userinfo),\r\n                //             stestsynonym: \"-\",\r\n                //             ntransactionstatus: -1,\r\n                //             stransdisplaystatus:\"-\",\r\n                //         }\r\n                //     });\r\n\r\n                 }\r\n\r\n        \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        Technique,\r\n                        Users,\r\n                        UsersPeriod,\r\n                        InstrumentCategory,\r\n                        InstrumentName,\r\n                        InstrumentId,\r\n                        InstrumentPeriod,\r\n                        currentTime,\r\n                        selectedRecord,\r\n                        openModal: true,\r\n                        isOpen: true,\r\n                        operation: inputParam.inputData.operation,\r\n                        screenName: inputParam.inputData.screenName,\r\n                        ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                        loading: false,\r\n                        calenderProperties,\r\n                        calenderColor,\r\n                        calenderPublicHolidays: calenderPublicHolidays,\r\n                        holidaydateRestrict:calenderProperties.filter(x => x.ncalendersettingcode === 65).length > 0 ? calenderProperties.filter(x => x.ncalendersettingcode === 65)[0][\"scalendersettingvalue\"] === \"3\" ? true : false : true,\r\n                        personalLeaveRestrict: calenderProperties.filter(x => x.ncalendersettingcode === 66).length > 0 ? calenderProperties.filter(x => x.ncalendersettingcode === 66)[0][\"scalendersettingvalue\"] === \"3\" ? true : false : true,\r\n                        calenderUserHolidays:calenderUserHolidays,\r\n                        calenderCommonHolidays1,\r\n                        commonHolidaydateRestrict:calenderProperties.filter(x => x.ncalendersettingcode === 67).length > 0 ? calenderProperties.filter(x => x.ncalendersettingcode === 67)[0][\"scalendersettingvalue\"] === \"3\" ? true : false : true,   \r\n                        RescheduleSection\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAllotAnotherUserTestWise(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getAllotAnotherUserDetails\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                    \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                    \"speriodname\", undefined, undefined, false);\r\n\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n\r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n                const Technique = response.data.Technique && response.data.Technique[0].stechniquename;\r\n                const TechniqueCode = response.data.Technique && response.data.Technique[0].ntechniquecode;\r\n                let selectedRecord = {};\r\n                selectedRecord[\"scomments\"] = \"\";\r\n                selectedRecord[\"suserholdduration\"] = \"\";\r\n                selectedRecord[\"sinstrumentholdduration\"] = \"\";\r\n                selectedRecord[\"duserblockfromdatetime\"] = new Date();\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Technique,\r\n                        TechniqueCode,\r\n                        Users,\r\n                        UsersPeriod,\r\n                        currentTime,\r\n                        selectedRecord,\r\n                        isOpen: true,\r\n                        operation: inputParam.inputData.operation,\r\n                        screenName: inputParam.inputData.screenName,\r\n                        openModal: true,\r\n                        ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getInstrumentName(ninstrumentcatcode, ncalibrationreq, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentNameBasedCategory\", {\r\n            \"ninstrumentcatcode\": ninstrumentcatcode, \"ncalibrationreq\": ncalibrationreq, \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let InstrumentName = [];\r\n\r\n                const InstrumentNameMap = constructOptionList(response.data.InstrumentName || [], \"ninstrumentnamecode\", \"sinstrumentname\", undefined, undefined, false);\r\n                InstrumentName = InstrumentNameMap.get(\"OptionList\");\r\n\r\n                selectedRecord[\"ninstrumentnamecode\"] =\"\";\r\n                if (ninstrumentcatcode !== transactionStatus.NA) {\r\n                    selectedRecord[\"dinstblockfromdatetime\"] = new Date();\r\n                } else {\r\n                    selectedRecord[\"dinstblockfromdatetime\"] = \"\";\r\n                }\r\n\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        InstrumentName,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getInstrumentId(ninstrumentcatcode, ninstrumentnamecode, ncalibrationreq, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentIdBasedCategory\", {\r\n            \"ninstrumentcatcode\": ninstrumentcatcode, \"ninstrumentnamecode\": ninstrumentnamecode, \"ncalibrationreq\": ncalibrationreq, \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let InstrumentId = [];\r\n                const InstrumentIdMap = constructOptionList(response.data.InstrumentId || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\r\n                InstrumentId = InstrumentIdMap.get(\"OptionList\");\r\n\r\n                selectedRecord[\"ninstrumentcode\"] =\"\";\r\n                // if (ninstrumentcatcode !== transactionStatus.NA) {\r\n                //     selectedRecord[\"dinstblockfromdatetime\"] = new Date();\r\n                // } else {\r\n                //     selectedRecord[\"dinstblockfromdatetime\"] = \"\";\r\n                // }\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        InstrumentId,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getUsers(ntechniquecode, JASelectedTest, userInfo, selectedRecord, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getUsersBasedTechnique\", {\r\n            \"ntechniquecode\": ntechniquecode,\r\n          //  \"ssectioncode\": JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample => sample.nsectioncode).join(\",\") : \"\",\r\n          \"ssectioncode\":selectedRecord[\"nsectioncode\"]?selectedRecord[\"nsectioncode\"].value.toString():JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample => sample.nsectioncode).join(\",\") : \"\",\r\n          \"nregtypecode\": JASelectedTest.realRegTypeValue.nregtypecode,\r\n            \"nregsubtypecode\": JASelectedTest.realRegSubTypeValue.nregsubtypecode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let Users = [];\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n                selectedRecord[\"nusercode\"] = \"\";\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        // masterData:{...masterData},\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function ViewAnalystCalendar(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/viewAnalystCalendar\", (inputParam.inputData))\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.inputData.masterData,\r\n                    ...response.data,\r\n                }\r\n                let Users = [];\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        Users,\r\n                        screenName: inputParam.inputData.screenName,\r\n                        loading: false,\r\n                        openModal: true,\r\n                        masterData,\r\n\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function CancelTestWise(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/cancelTest\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                    delete response.data[\"JA_TEST\"];\r\n                    fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                    let masterData = {\r\n                        ...inputParam.inputData.masterData,\r\n                       \r\n                        ...response.data,\r\n                        JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        TestView: inputParam.inputData.masterData.TestView\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function AllotJobAction(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/AllotJobCreate\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                    delete response.data[\"JA_TEST\"];\r\n                    let masterData = {\r\n                        ...inputParam.inputData.masterData,\r\n                        ...response.data,\r\n                        JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        TestView: replaceUpdatedObject(response.data[\"TestView\"], inputParam.inputData.masterData.TestView, \"ntransactiontestcode\")\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParam.inputData,\r\n                        masterData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function AllotAnotherUserAction(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/AllotAnotherUserCreate\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                    delete response.data[\"JA_TEST\"];\r\n                    fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                    let masterData = {\r\n                        ...inputParam.inputData.masterData,\r\n                        ...response.data,\r\n                        JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        TestView: inputParam.inputData.masterData.TestView\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function RescheduleJobAction(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/RescheduleCreate\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        if(parseInt(inputParam.inputData.nsectioncode)===parseInt(inputParam.inputData.nfiltersectioncode)){\r\n \t\t\t\t\t\tdelete response.data[\"JA_TEST\"];\r\n\t\t\t\t\t\t}\r\n                    fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                    let masterData = {\r\n                        ...inputParam.inputData.masterData,\r\n                        ...response.data,\r\n                        \r\n                        TestView: inputParam.inputData.masterData.TestView\r\n                    }\r\n                    let UserSection = [];\r\n                    const UserSectionMap = constructOptionList(response.data.UserSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\r\n                    UserSection = UserSectionMap.get(\"OptionList\");\r\n\r\n                    if(parseInt(inputParam.inputData.nsectioncode)===parseInt(inputParam.inputData.nfiltersectioncode)){\r\n                        masterData={...masterData,JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\")}\r\n                    }\r\n                    let respObject = {\r\n                        UserSection,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                     respObject={...respObject,    masterData}\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getJobAllocationSubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        //console.log(\"response :\");\r\n        let arr = [];\r\n        // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\r\n        // (item,index) => \r\n        // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\r\n        // );\r\n\r\n        inputData.JASelectedSample && inputData.JASelectedSample.map((item) => {\r\n            if (!arr.includes(item.nsectioncode)) {\r\n                arr.push(item.nsectioncode)\r\n            }\r\n        }\r\n        )\r\n\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            nregistrationsectioncode: inputData.nregistrationsectioncode,\r\n            // ssectioncode : inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\r\n            nsectioncode: arr.map(item => item).join(\",\"),\r\n            ntransactionstatus: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: \"0\",\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            activeSubSampleTab: inputData.activeSubSampleTab,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,\r\n            checkBoxOperation: inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation })\r\n                .then(response => {\r\n                    if(response.data['JA_TEST']&&response.data['JA_TEST'].length===0){\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        toast.warn(intl.formatMessage({\r\n                            id: \"IDS_TESTISNOTAVAILABLE\"\r\n                        }));\r\n                    }\r\n                    else{\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'ntransactionsamplecode')\r\n                    // sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest;\r\n                    let oldSelectedSubSample = inputData.masterData.JASelectedSubSample;\r\n\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray);\r\n\r\n                    // inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;  \r\n                    // inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;\r\n                    // inputData.masterData.JA_TEST = response.data.JA_TEST;  \r\n                    // inputData.masterData.JASelectedTest=response.data.JASelectedTest;\r\n                    // inputData.masterData.RegistrationAttachment =response.data.RegistrationAttachment;\r\n                    // inputData.masterData.RegistrationSampleAttachment =response.data.RegistrationSampleAttachment;\r\n                    // inputData.masterData.RegistrationComment =response.data.RegistrationComment;\r\n                    // inputData.masterData.RegistrationSampleComment =response.data.RegistrationSampleComment;\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.JASelectedSample\r\n                    }\r\n\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake,\r\n                        subsampleskip, subsampletake,\r\n                        sampleskip, sampletake\r\n                    } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    //     bool = true\r\n                    // }\r\n                    subsampleskip = 0;\r\n                    // bool = true\r\n                    // if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake,\r\n                        subsampleskip, subsampletake,\r\n                        sampleskip, sampletake\r\n                    }\r\n                    // }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let TestView = [];\r\n                    let RegistrationComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    //if (inputData.checkBoxOperation === 1) {\r\n                    if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\r\n\r\n\r\n                        let wholeSubSampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                            wholeSubSampleList.includes(item.ntransactionsamplecode)\r\n                        );\r\n                        //ALPD-3398\r\n                        // oldSelectedSubSample.forEach((subsample, index) => {\r\n                        //     if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                        //         oldSelectedSubSample.splice(index, 1)\r\n                        //     }\r\n\r\n                        // })\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedSubSample: oldSelectedSubSample\r\n                            }\r\n                        }\r\n\r\n\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest = oldSelectedTest.filter(item =>\r\n                            wholeTestList.includes(item.ntransactiontestcode)\r\n                        );\r\n                        //ALPD-3398\r\n                        // oldSelectedTest.map((test, index) => {\r\n                        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        //         oldSelectedTest.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        let npreregno;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\r\n                            npreregno = masterData.JASelectedSample[0].npreregno;\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName = \"testViewDataState\"\r\n                                break;\r\n\r\n                            default:\r\n                                RegistrationComment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"npreregno\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \" testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n                        // } else if (inputData.checkBoxOperation === 5) {\r\n                    } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                dbData = response.data.RegistrationComment || []\r\n                                list = [...inputData.masterData.RegistrationComment, ...dbData];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    }\r\n                    //else if (inputData.checkBoxOperation === 7) {\r\n                    else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\r\n                        let list = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName = \"testViewDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n\r\n                                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleCommentsDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentDataState\"\r\n                                break;\r\n\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        let list = []\r\n                        if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                            let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest = oldSelectedTest.filter(item =>\r\n                                wholeTestList.includes(item.ntransactiontestcode)\r\n                            );\r\n                            //ALPD-3398\r\n                            // oldSelectedTest.map((test, index) => {\r\n                            //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                            //         oldSelectedTest.splice(index, 1)\r\n                            //     }\r\n                            //     return null;\r\n                            // })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                            }\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName = \"testViewDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleChangeDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleAttachment ? sortData(response.data.RegistrationSampleAttachment, 'descending', 'nsampleattachmentcode') : [];\r\n                                RegistrationSampleAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JASelectedSubSample.length > 0 ? inputData.masterData.JASelectedSubSample[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subsampleAttachmentDataState\"\r\n                                break;\r\n\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        TestView,\r\n                        RegistrationComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            secondarySelection: inputData[\"secondarySelection\"],\r\n                            loading: false,\r\n                            // sampleskip: undefined,\r\n                            // sampletake: undefined,\r\n                            ...skipInfo,\r\n                            activeTabIndex: inputData.activeTabIndex\r\n                        }\r\n                    })\r\n                }\r\n                })\r\n               \r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.JASelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n            }\r\n\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSample = inputData.JASelectedSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                let JASelectedSubSample = inputData.masterData.JA_SUBSAMPLE\r\n\r\n\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    JASelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = JASelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                let npreregno = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(',');\r\n                let nsectioncode = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(',');\r\n                let masterData = { ...inputData.masterData, JASelectedSample, JASelectedSubSample, JASelectedTest }\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    npreregno,\r\n                    nsectioncode,\r\n                    ntransactionsamplecode,\r\n                    JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    //  checkBoxOperation: 3,\r\n                    checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n                    activeTestTab: inputData.activeTestTab, masterData\r\n                }\r\n\r\n                if (JASelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"TestView\"]\r\n                    }\r\n                    dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData, masterData,\r\n                        childTabsKey: [\"JA_TEST\"]\r\n                    }\r\n                    dispatch(getJobAllocationTestDetail(inputData, true));\r\n                }\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: TestSelected ? TestSelected : inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSample: inputData.JASelectedSample,\r\n                    JASelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.JA_SUBSAMPLE.length > 0 ? [inputData.masterData.JA_SUBSAMPLE[0]] : []\r\n\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                                wholeSubSample.includes(item.ntransactionsamplecode)\r\n                            );\r\n                            //ALPD-3398\r\n                            // oldSelectedSubSample.forEach((test, index) => {\r\n                            //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                            //         oldSelectedSubSample.splice(index, 1)\r\n                            //     }\r\n                            //     return null;\r\n                            // })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                //inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\" checkBoxOperation\"] = checkBoxOperation.SINGLESELECT\r\n                                inputData[\"childTabsKey\"] = [\"JA_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getJobAllocationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                            wholeSubSample.includes(item.ntransactionsamplecode)\r\n                        );\r\n                        //ALPD-3398\r\n                        // oldSelectedSubSample.forEach((test, index) => {\r\n                        //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                        //         oldSelectedSubSample.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n\r\n                oldSelectedTest = oldSelectedTest.filter(item =>\r\n                    wholeTestList.includes(item.ntransactiontestcode)\r\n                );\r\n                //ALPD-3398         \r\n                // oldSelectedTest.map((test, index) => {\r\n                //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                //         oldSelectedTest.splice(index, 1)\r\n                //     }\r\n                //     return null;\r\n                // })\r\n\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.JA_TEST[0].ntransactiontestcode\r\n                }\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSample: inputData.JASelectedSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            TestView,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getJobAllocationTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n\r\n        //console.log(\"response :\");\r\n        let arr = [];\r\n        let arr1 = [];\r\n        // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\r\n        // (item,index) => \r\n        // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\r\n        // );\r\n        //   const myArray = inputData.nsectioncode.split(\",\");\r\n        //   myArray.map((item) => {\r\n        //         if(!arr.includes(item)) {\r\n        //             arr.push(item)\r\n        //           }\r\n        //         }\r\n        //     )\r\n\r\n        let JASelectedSubSample = inputData.JASelectedSubSample;\r\n        JASelectedSubSample && JASelectedSubSample.map((item) => {\r\n            if (!arr.includes(item.nsectioncode)) {\r\n                arr.push(item.nsectioncode)\r\n            }\r\n        }\r\n        )\r\n\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            nsectioncode: arr.map(nsectioncode => nsectioncode).join(\",\"),\r\n            ntransactiontestcode: \"0\",\r\n            ntransactionstatus: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getJobAllocationTestDetails\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'ntransactionsamplecode')\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest\r\n                    let oldSelectedSubSample = inputData.masterData.JASelectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n                    //inputData.masterData.JA_TEST = response.data.JA_TEST;\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.masterData.JASelectedSample,\r\n                        JASelectedSubSample: inputData.JASelectedSubSample || inputData.masterData.JASelectedSubSample,\r\n                    }\r\n\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    // bool = true\r\n                    // }\r\n                    // if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                    // }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let TestView = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    //if (inputData.checkBoxOperation === 1) {\r\n                    if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest = oldSelectedTest.filter(item =>\r\n                            wholeTestList.includes(item.ntransactiontestcode)\r\n                        );\r\n                        //ALPD-3398\r\n                        // oldSelectedTest.map((test, index) => {\r\n                        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        //         oldSelectedTest.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName = \"testViewDataState\"\r\n                                break;\r\n\r\n                            default:\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n                        //} else if (inputData.checkBoxOperation === 5) {\r\n                    } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                        // } else if (inputData.checkBoxOperation === 7) {\r\n                    } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        let testList = reArrangeArrays(inputData.masterData.JA_SUBSAMPLE, responseData.JA_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedTest: [testList[0]],\r\n                            JA_TEST: testList,\r\n                        }\r\n\r\n                        switch (inputData.activeTestTab) {\r\n\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName = \"testViewDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_SUBSAMPLE.length > 0 ? inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testAttachmentState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                            wholeSubsampleList.includes(item.ntransactionsamplecode)\r\n                        );\r\n                        //ALPD-3398\r\n                        // oldSelectedSubSample.map((test, index) => {\r\n                        //     if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                        //         oldSelectedSubSample.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n\r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        TestView,\r\n                        RegistrationSampleComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            // activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.activeTestTab,\r\n                            subsampleskip: undefined,\r\n                            subsampletake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    //console.log(\"error:\", error);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let TestSelected =\r\n                inputData[\"statusNone\"] ?\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") :\r\n                    filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSubSample = inputData.RESelectedSubSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestView\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\r\n                    ntransactiontestcode,\r\n                    JASelectedSample: inputData.masterData.JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    //  checkBoxOperation: 3,\r\n                    checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n                    activeTestTab: inputData.activeTestTab\r\n                }\r\n                dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSubSample: inputData.JASelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest = oldSelectedTest.filter(item =>\r\n                    wholeTestList.includes(item.ntransactiontestcode)\r\n                );\r\n                //ALPD-3398\r\n                // oldSelectedTest.map((test, index) => {\r\n                //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                //         oldSelectedTest.splice(index, 1)\r\n                //     }\r\n                //     return null;\r\n                // })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.JA_TEST[0].ntransactiontestcode\r\n                }\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSubSample: inputData.JASelectedSubSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            TestView,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        // activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailJobAllocation(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let arr = [];\r\n        inputData.JASelectedTest && inputData.JASelectedTest.map((item) => {\r\n            if (!arr.includes(item.nsectioncode)) {\r\n                arr.push(item.nsectioncode)\r\n            }\r\n        }\r\n        )\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.JASelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            nsectioncode: arr.map(nsectioncode => nsectioncode).join(\",\"),\r\n            //ssectioncode :inputData.JASelectedTest.map(sample => sample.nsectioncode).join(\",\"),\r\n            ntransactionsamplecode: inputData.JASelectedTest.map(test => test.ntransactionsamplecode).join(\",\"),\r\n            ndesigntemplatemappingcode: inputData.masterData.realDesignTemplateMappingValue && inputData.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let url = \"\";\r\n\r\n        switch (inputData.activeTestTab) {\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName = \"testAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"RegistrationSampleAttachment\"\r\n                dataStateName = \"sampleAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTVIEW\":\r\n                url = \"joballocation/getTestView\"\r\n                activeName = \"TestView\"\r\n                dataStateName = \"testViewDataState\"\r\n                break;\r\n            default:\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName = \"testAttachmentDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        JASelectedSample: inputData.JASelectedSample || inputData.masterData.JASelectedSample,\r\n                        JASelectedTest: inputData.JASelectedTest,\r\n                        activeTabIndex: inputData.activeTabIndex,\r\n                        activeTabId: inputData.activeTabId\r\n                    }\r\n                    let skipInfo = {};\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        JASelectedTest: inputData.JASelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            activeTabId: inputData.activeTabId,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            loading: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.activeTestTab,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                JASelectedTest: inputData.JASelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData.skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestTab: inputData.activeTestTab,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function validateEsignforJobAllocation(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = inputParam.screenData.inputParam.methodUrl;\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let action = screenData.inputParam.action\r\n        switch (action) {\r\n            case \"receiveinlab\":\r\n                dispatch(ReceiveinLabStatusWise(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"allotjob\":\r\n                dispatch(AllotJobAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"allotanotheruser\":\r\n                dispatch(AllotAnotherUserAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"reschedule\":\r\n                dispatch(RescheduleJobAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"canceltest\":\r\n                dispatch(CancelTestWise(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"AllotJobCalendar\":    // ALPD-5263 Added AllotJobCalendar condition by Vishakh due to not added this got loader issue\r\n                dispatch(AllotJobActionCalendar(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"updateSection\":\r\n                dispatch(updateSectionJobAllocation(screenData.inputParam));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function updatedObjectWithNewElement1(oldList, newList) {\r\n    oldList = [...newList, ...oldList];\r\n    return oldList;\r\n}\r\n\r\n\r\n\r\nexport function getAnalystCalenderBasedOnUser(nusercode, masterData, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getAnalystCalendarBasedOnUser\", {\r\n            \"nusercode\": nusercode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: { ...masterData, analystCalenderData: response.data.UserData },\r\n                        loading: false,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getInstrumentNameForSchedule(ninstrumentcatcode, userInfo, edit, ninstrumentnamecode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentNameBasedCategoryForSchedule\", {\r\n            \"ninstrumentcatcode\": ninstrumentcatcode, \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let InstrumentName = [];\r\n                const InstrumentMap = constructOptionList(response.data.InstrumentName || [], \"ninstrumentnamecode\", \"sinstrumentname\", undefined, undefined, false);\r\n                InstrumentName = InstrumentMap.get(\"OptionList\");\r\n                if (edit && ninstrumentnamecode) {\r\n\r\n                    let obj = { InstrumentName, selectedInstrumentCatCode: ninstrumentcatcode }\r\n\r\n                    dispatch(getInstrumentForSchedule(ninstrumentcatcode, ninstrumentnamecode, userInfo, edit, obj))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedInstrumentCatCode: ninstrumentcatcode,\r\n                            InstrumentName,\r\n                            Instrument: [],\r\n                            loading: false\r\n                        }\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getInstrumentForSchedule(ninstrumentcatcode, ninstrumentnamecode, userInfo, edit, obj) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentBasedCategoryForSchedule\", {\r\n            \"ninstrumentcatcode\": ninstrumentcatcode, \"ninstrumentnamecode\": ninstrumentnamecode, \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let Instrument = [];\r\n                const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\r\n                Instrument = InstrumentMap.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Instrument,\r\n                        loading: false,\r\n                        ...obj\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function AllotJobActionCalendar(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/AllotJobCreateCalendar\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                    delete response.data[\"JA_TEST\"];\r\n                    let masterData = {\r\n                        ...inputParam.inputData.masterData,\r\n                        ...response.data,\r\n                        JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        TestView: replaceUpdatedObject(response.data[\"TestView\"], inputParam.inputData.masterData.TestView, \"ntransactiontestcode\")\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParam.inputData,\r\n                        masterData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function clearInstrumentLoginData() {\r\n    return function (dispatch) {\r\n        //  dispatch(initRequest(true));\r\n\r\n        dispatch({\r\n            type: DEFAULT_RETURN,\r\n            payload: {\r\n                //Instrument\r\n                Instrument: [],\r\n                selectedInstrumentCatCode: undefined,\r\n                InstrumentName: [],\r\n                //  loading: false,\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n}\r\n//ALPD-3781\r\nexport function getSectionTest(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getSectionChange\", inputParam.inputData\r\n        )\r\n            .then(response => {\r\n                let Section = [];\r\n                //ALPD-4050\r\n                let selectedRecord={...inputParam.selectedRecord,nsectioncode:\"\"}\r\n                const SectionMap = constructOptionList(response.data.Section || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\r\n                Section = SectionMap.get(\"OptionList\");\r\n           \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Section,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: true,operation:inputParam.inputData.operation,\r\n                        screenName:inputParam.inputData.screenName,\r\n                        ncontrolcode:inputParam.inputData.ncontrolcode,\r\n                        selectedRecord\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n//ALPD-3781\r\nexport function updateSectionJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/updateSectionJobAllocation\", inputParam.inputData\r\n        )\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    let UserSection = [];\r\n                    const UserSectionMap = constructOptionList(response.data.UserSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\r\n                    UserSection = UserSectionMap.get(\"OptionList\");\r\n                    let masterData = {\r\n                        ...inputParam.inputData.masterData,\r\n                        ...response.data\r\n                        \r\n                    }\r\n                    let selectedRecord={...inputParam.selectedRecord,\"nsectioncode\":\"\"}\r\n\r\n                    let respObject = {\r\n                        ...inputParam.inputData,\r\n                        masterData,\r\n                        UserSection,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined,\r\n                        selectedRecord\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n//ALPD-3781\r\nexport function getUsersSection(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getUsersBySection\", {\"userinfo\":inputParam.userInfo,\"nsectioncode\":inputParam.nsectioncode,\"nregtypecode\":inputParam.nregtypecode,\"nregsubtypecode\":inputParam.nregsubtypecode}\r\n        )\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\r\n                    let Users = [];\r\n                    const SectionUsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\r\n                    Users =SectionUsersMap.get(\"OptionList\");\r\n                    let selectedRecord={...inputParam.selectedRecord,\"nusercode\":\"\",\"ntechniquecode\":\"\"}\r\n                    let masterData = {\r\n                        ...inputParam.masterData,\r\n                        ...response.data\r\n                        \r\n                    }\r\n                    let respObject = {\r\n                        selectedRecord,\r\n                        masterData,\r\n                        Users,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                     \r\n                        showSample: undefined\r\n                    }\r\n                   \r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\nexport function getJobAllcationFilterDetail(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getJobAllocationFilter\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                \r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,                    \r\n                        showFilter: false,\r\n                        nfilternamecode:inputParam.inputData.nfilternamecode,\r\n                        modalShow:false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}