{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PreRegisterSlideOutModal.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Card, Col, Form, FormGroup, FormLabel, Modal, Nav, Row } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ModalInner, ReadOnlyText } from '../../components/App.styles';\nimport { RegistrationType, transactionStatus } from '../../components/Enumeration';\nimport { faCalculator, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { comboChild, getSameRecordFromTwoArrays } from '../../components/CommonScript';\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout';\nimport { HeaderSpan } from './registration.styled';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { process } from '@progress/kendo-data-query';\nimport AdvFilter from '../../components/AdvFilter';\nimport SpecFilter from './SpecFilter';\nimport RegistrationAdvanceFilter from './RegistrationAdvanceFilter';\nimport RegisterSlideOut from './RegisterSlideOut';\nimport AddSpecification from './AddSpecification';\nimport AddTest from './AddTest';\nimport { connect } from 'react-redux';\nimport { getPreviewTemplate, getChildValues, getNewRegSpecification, AddComponents, updateStore } from '../../actions';\nimport AddComponentPopUp from './AddComponentPopUp';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegisterSlideOutModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formRef = React.createRef();\n    this.state = {\n      masterStatus: \"\",\n      failedControls: [],\n      selectedRecord: this.props.Login.selectedRecord,\n      selectedSpec: this.props.Login.selectedSpec,\n      popUptestDataState: {\n        skip: 0,\n        take: 10\n      },\n      showFilter: false,\n      selectComponent: this.props.Login.selectComponent\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n\n      if (!this.state.loadSpec) {\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n              }) : component.mandatory === true ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\";\n            });\n          });\n        });\n      }\n\n      if (this.state.loadSpec) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIFICATION\",\n          \"dataField\": \"nallottedspeccode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      }\n\n      if (this.props.esign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n\n      mandatoryFields.forEach(item => {\n        if (this.state.selectedRecord[item.dataField] === undefined || this.state.selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(this.state.selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof this.state.selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (this.props.selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof this.state.selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (this.state.selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (this.state.selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        } // else{\n        //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\n        //     failedControls.push(alertMessage);\n        // }\n\n      }); // console.log(\"validationPassed:\", failedControls);\n\n      if (failedControls.length === 0) {\n        if (saveType === 4) {\n          this.props.onExecuteClick(this.formRef);\n        } else if (saveType === 3) {\n          if (this.props.selectedRecord.agree && this.props.selectedRecord.agree === transactionStatus.NO) {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_CHECKAGREE\"\n            }));\n          } else {\n            this.props.validateEsign();\n          }\n        } else {\n          if (this.state.loadSpec) {\n            let selectedSpec = this.state.selectedSpec;\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\n            this.setState({\n              selectedSpec,\n              loadSpec: false\n            });\n          } else {\n            this.props.onSaveClick(saveType, this.formRef);\n          }\n        }\n      } else {\n        //toast.info(`${this.props.intl.formatMessage({id:\"IDS_ENTER\"})} ${failedControls.join(\",\")}`);\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      let parentList = [];\n      let childComboList = [];\n      let childColumnList = {};\n      let inputParem = {};\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n      let product = false;\n      let productCategory = false;\n      let nproductcatcode = -1;\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.name === 'Product') {\n        const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n        const ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['ncategorybasedflow'];\n        nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value;\n\n        if (ncategorybasedflow !== 3) {\n          product = true;\n        }\n      } else if (control.name === 'Product Category') {\n        // const ProductCategory=comboComponents.filetr(x=>x.name===\"Product Category\");\n        const ncategorybasedflow = comboData && comboData['item']['ncategorybasedflow'];\n\n        if (ncategorybasedflow === 3) {\n          productCategory = true;\n        }\n      }\n\n      if (control.child && control.child.length > 0) {\n        childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\");\n        childColumnList = {};\n        childComboList.map(columnList => {\n          const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\");\n        inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData.value,\n          item: comboData.item,\n          label: comboName\n        };\n        let nproductcode = -1;\n\n        if (product) {\n          nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n        }\n\n        const mapOfFilter = {\n          nproductcode,\n          nproductcatcode,\n          nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n        };\n        this.props.getChildValues(inputParem, this.props.userInfo, selectedRecord, this.props.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter);\n      } else {\n        if (productCategory) {\n          const ncategorybasedflow = selectedRecord[comboName] && selectedRecord[comboName].value;\n        } else if (product) {\n          const nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          const mapOfFilter = {\n            nproductcode,\n            nproductcatcode,\n            nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n          };\n          this.props.getChildValues(inputParem, this.props.userInfo, selectedRecord, this.props.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateValue, dateName, screenName) => {\n      const {\n        selectedRecord,\n        selectComponent\n      } = this.state;\n\n      if (screenName === 'component') {\n        selectComponent[dateName] = dateValue;\n        this.setState({\n          selectComponent\n        });\n      } else {\n        selectedRecord[dateName] = dateValue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.testdataStateChange = event => {\n      this.setState({\n        popUptestDataState: event.dataState\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.state.showFilter;\n      this.setState({\n        showFilter\n      });\n    };\n\n    this.closeFilter = () => {\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.AddSpec = e => {\n      this.setState({\n        loadSpec: true\n      });\n    };\n\n    this.addTestslide = e => {\n      this.setState({\n        loadTest: true\n      });\n    };\n\n    this.closeSpec = e => {\n      this.setState({\n        loadSpec: false,\n        loadTest: false,\n        selectedRecord: { ...this.state.selectedRecord,\n          ...this.state.selectedSpec\n        }\n      });\n    };\n\n    this.closeComponent = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadComponent: false,\n          selectComponent: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onspecChange = (event, fieldName) => {\n      if (event !== null) {\n        const selectedRecord = this.state.selectedRecord;\n        const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ? this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n        selectedRecord[\"nallottedspeccode\"] = event; //  if(this.props.Login.Component.length=== 0 ){\n\n        this.setState({\n          selectedRecord\n        }); // }else{\n        //     if(event.value!== oldpromarycode ){\n        //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n        //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\n        //     }\n        // }\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n      this.props.getNewRegSpecification(inputParam, this.props.Login.masterData); // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\n      //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\n      // } else {\n      //     // if(event.key!== this.props.Login.ActiveKey ){\n      //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n      //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\n      //     // }\n      // }\n    };\n\n    this.selectSubSample = event => {\n      let selectedSubSample = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedSubSample.ssamplename] ? this.props.Login.Test[selectedSubSample.ssamplename] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedSubSample,\n          popUptestDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.selectComponent = event => {\n      let selectedComponent = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedComponent,\n          popUptestDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddComponent = () => {\n      let Map = {};\n      let booleanFlag = true;\n\n      if (this.state.selectedRecord.nallottedspeccode !== undefined && this.state.selectedRecord.nallottedspeccode !== \"\") {\n        if (this.props.Login.masterData.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL) {\n          if (this.state.selectedRecord.nmanufcode === undefined || this.state.selectedRecord.nmanufcode === \"\") {\n            booleanFlag = false;\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTMANUFACTURER\"\n            }));\n          }\n        }\n\n        if (booleanFlag) {\n          if (this.state.selectedRecord.nallottedspeccode !== undefined && this.state.selectedRecord.nallottedspeccode !== \"\") {\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedRecord.ntemplatemanipulationcode;\n            Map[\"nallottedspeccode\"] = this.state.selectedRecord.nallottedspeccode.value;\n            Map[\"nmanufcode\"] = this.state.selectedRecord.nmanufcode;\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n            Map[\"testrequired\"] = false;\n            Map[\"userinfo\"] = this.props.Login.userInfo;\n            this.props.AddComponents(Map);\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTSPECIFICATION\"\n            }));\n          }\n        }\n      }\n    };\n\n    this.onComponentChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectComponent = this.state.selectComponent || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectComponent[\"ntzdreceivedate\"] = comboData;\n        } else {\n          const oldspecsampletypecode = selectComponent.nspecsampletypecode;\n\n          if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n            selectComponent[\"nneedservice\"] = true;\n          }\n\n          selectComponent[\"ncomponentcode\"] = comboData;\n          selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\n        }\n\n        this.setState({\n          selectComponent\n        });\n      }\n    };\n\n    this.myRef = React.createRef();\n    this.componentColumnList = [{\n      \"idsName\": \"IDS_COMPONENTNAME\",\n      \"dataField\": \"scomponentname\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_MANUFLOTNO\",\n      \"dataField\": \"smanuflotno\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_STORAGECONDITION\",\n      \"dataField\": \"sstorageconditionname\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_STORAGELOCATION\",\n      \"dataField\": \"sstoragelocationname\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_NOOFCONTAINER\",\n      \"dataField\": \"nnoofcontainer\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_DATERECEIVED\",\n      \"dataField\": \"sreceiveddate\",\n      width: \"250px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      width: \"200px\"\n    }];\n  }\n\n  componentDidUpdate(previousProps) {\n    let masterStatus = this.props.masterStatus;\n\n    if (masterStatus !== \"\" && masterStatus !== undefined) {\n      toast.warn(masterStatus);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n      masterStatus = \"\";\n    }\n\n    if (this.props.innerPopup !== this.state.innerTop) {\n      setTimeout(() => {\n        let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\n\n        if (this.myRef && this.myRef.current) {\n          this.myRef.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n\n        if (scrollDoc) {\n          scrollDoc.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      }, 100);\n      this.setState({\n        innerTop: this.props.innerPopup\n      });\n    } //     else if (this.state.seletedSpec !== this.props.Login.selectedRecord) {\n    //         this.setState({ \n    //            // selectedRecord: this.props.Login.selectedRecord,\n    //             seletedSpec:this.props.Login.selectedRecord });\n    // }\n\n  }\n\n  render() {\n    let saveType = 1;\n\n    if (this.props.ignoreFormValidation) {\n      saveType = 5;\n    }\n\n    let buttonLabel = \"Save\";\n    let idsLabel = \"IDS_SAVE\";\n\n    if (this.props.buttonLabel) {\n      buttonLabel = this.props.buttonLabel;\n      idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\n    }\n\n    const testColumnList = [{\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"stestsynonym\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_SECTION\",\n      \"dataField\": \"ssectionname\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_SOURCE\",\n      \"dataField\": \"ssourcename\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_METHOD\",\n      \"dataField\": \"smethodname\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n      \"dataField\": \"sinstrumentcatname\",\n      width: \"200px\"\n    }];\n    const filterComponent = [{\n      \"specFIlter\": /*#__PURE__*/React.createElement(SpecFilter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 27\n        }\n      })\n    }];\n    return /*#__PURE__*/React.createElement(Modal, {\n      size: this.props.Login.loadComponent ? 'lg' : this.state.loadSpec ? 'lg' : this.state.loadTest ? 'lg' : 'xl' // size={this.props.templateData[0] ?\n      //     this.props.templateData[0].children ?\n      //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\n      ,\n      backdrop: \"static\",\n      className: this.props.className || \"\",\n      show: this.props.show,\n      onHide: this.props.closeModal,\n      enforceFocus: false,\n      dialogClassName: \"modal-dialog-slideout freakerstop\",\n      \"aria-labelledby\": \"add-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add-user\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 21\n      }\n    }, this.props.graphView === true ? \"\" : this.props.inputParam ? this.props.esign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 33\n      }\n    }) : this.props.loginoperation ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 37\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.operation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.operation && \"IDS_\".concat(this.props.operation.toUpperCase()),\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 49\n      }\n    }), \" \", this.props.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 57\n      }\n    }) : \"\") : this.props.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 49\n      }\n    }) : \"\") : \"\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.state.loadSpec ? this.closeSpec : this.state.loadTest ? this.closeSpec : this.props.Login.loadComponent ? this.closeComponent : this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 25\n      }\n    })), this.props.esign === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 29\n      }\n    })) : (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VALIDATE\",\n      defaultMessage: \"Validate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 33\n      }\n    })) : this.props.showCalculate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CALCULATE\",\n      defaultMessage: \"Calculate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 37\n      }\n    })) : this.props.showParam === true && this.props.showExecute ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXECUTE\",\n      defaultMessage: \"Execute\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 41\n      }\n    })) : this.props.noSave || this.props.graphView ? this.props.operation === \"view\" ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-user btn-primary-blue\",\n      role: \"button\",\n      onClick: this.props.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RESET\",\n      defaultMessage: \"Reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 49\n      }\n    })) : this.props.hideSave ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 49\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 49\n      }\n    })), this.props.operation === \"create\" && this.props.showSaveContinue ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVECONTINUE\",\n      defaultMessage: \"Save & Continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 29\n      }\n    })) : \"\", (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 29\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 33\n      }\n    }, this.state.loadSpec ? /*#__PURE__*/React.createElement(AddSpecification, {\n      AgaramTree: this.props.Login.AgaramTree,\n      openNodes: this.props.Login.OpenNodes,\n      handleTreeClick: this.onTreeClick,\n      focusKey: this.props.Login.FocusKey,\n      activeKey: this.props.Login.ActiveKey,\n      Specification: this.props.Login.Specification,\n      selectedRecord: this.state.selectedRecord,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      onSpecChange: this.onspecChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 45\n      }\n    }) : this.state.loadTest ? /*#__PURE__*/React.createElement(AddTest, {\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.state.selectedTestData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 49\n      }\n    }) : this.props.Login.loadComponent ? /*#__PURE__*/React.createElement(AddComponentPopUp, {\n      ref: this.myScrollRef,\n      selectComponent: this.state.selectComponent || {},\n      RealSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n      RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n      RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n      RealFilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n      formatMessage: this.props.intl.formatMessage,\n      handleDateChange: this.handleDateChange,\n      Component: this.props.Login.lstComponent || [],\n      onInputComponentOnChange: this.onInputComponentOnChange // onComboChange={this.onComponentComboChange}\n      ,\n      timeZoneList: this.props.Login.timeZoneList,\n      onComponentChange: this.onComponentChange,\n      userInfo: this.props.Login.userInfo,\n      sreceiveddate: this.props.Login.sreceiveddate || [],\n      CurrentTime: this.props.Login.CurrentTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(RegisterSlideOut, {\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      templateData: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata,\n      handleChange: this.props.handleChange,\n      handleDateChange: this.props.handleDateChange,\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      comboData: this.props.Login.comboData,\n      onComboChange: this.onComboChange,\n      userInfo: this.props.userInfo,\n      timeZoneList: this.props.timeZoneList,\n      defaultTimeZone: this.props.defaultTimeZone,\n      popUptestDataState: this.state.popUptestDataState,\n      dataState: this.state.popUptestDataState,\n      dataStateChange: this.state.testdataStateChange,\n      AddSpec: this.AddSpec,\n      addTest: this.addTestslide,\n      selectSubSample: this.selectSubSample,\n      selectComponent: this.selectComponent,\n      subSample: 4,\n      AddComponent: this.AddComponent,\n      componentColumnList: this.componentColumnList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 59\n      }\n    })))))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getChildValues,\n  getPreviewTemplate,\n  getNewRegSpecification,\n  AddComponents,\n  updateStore\n})(injectIntl(PreRegisterSlideOutModal));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/PreRegisterSlideOutModal.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Card","Col","Form","FormGroup","FormLabel","Modal","Nav","Row","FontAwesomeIcon","faSave","toast","DEFAULT_RETURN","ModalInner","ReadOnlyText","RegistrationType","transactionStatus","faCalculator","faPlus","comboChild","getSameRecordFromTwoArrays","DynamicSlideout","HeaderSpan","DataGrid","process","AdvFilter","SpecFilter","RegistrationAdvanceFilter","RegisterSlideOut","AddSpecification","AddTest","connect","getPreviewTemplate","getChildValues","getNewRegSpecification","AddComponents","updateStore","AddComponentPopUp","mapStateToProps","state","Login","PreRegisterSlideOutModal","Component","constructor","props","formRef","createRef","masterStatus","failedControls","selectedRecord","selectedSpec","popUptestDataState","skip","take","showFilter","selectComponent","handleSaveClick","saveType","startLabel","label","mandatoryFields","loadSpec","masterData","registrationTemplate","jsondata","map","row","children","column","component","hasOwnProperty","componentrow","mandatory","push","inputtype","esign","forEach","item","dataField","undefined","alertMessage","alertPreFix","intl","formatMessage","id","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","length","trim","onExecuteClick","agree","NO","info","validateEsign","setState","onSaveClick","onComboChange","comboData","control","customName","parentList","childComboList","childColumnList","inputParem","comboName","product","productCategory","nproductcatcode","name","ProductCategory","comboComponents","filter","x","ncategorybasedflow","value","child","columnList","val","withoutCombocomponent","source","primarykeyField","valuemember","nproductcode","mapOfFilter","nsampletypecode","parseInt","RealSampleTypeValue","userInfo","updateInfo","typeName","data","onInputOnChange","event","target","type","checked","onNumericInputChange","handleDateChange","dateValue","dateName","screenName","testdataStateChange","dataState","openFilter","closeFilter","AddSpec","e","addTestslide","loadTest","closeSpec","closeComponent","loadComponent","onspecChange","fieldName","oldpromarycode","sversion","onTreeClick","inputParam","methodUrl","operation","activeKey","key","focusKey","keyName","userinfo","selectedNode","primaryKey","selectSubSample","selectedSubSample","dataItem","SelectedTest","Test","ssamplename","settings","selectedComponent","slno","AddComponent","Map","booleanFlag","nallottedspeccode","RealRegTypeValue","nregtypecode","PLASMA_POOL","nmanufcode","warn","ntemplatemanipulationcode","onComponentChange","oldspecsampletypecode","nspecsampletypecode","myRef","componentColumnList","width","componentDidUpdate","previousProps","innerPopup","innerTop","setTimeout","scrollDoc","modalEvent","document","getElementById","current","scrollIntoView","behavior","render","ignoreFormValidation","buttonLabel","idsLabel","concat","toUpperCase","testColumnList","filterComponent","className","show","closeModal","graphView","loginoperation","showValidate","showCalculate","showParam","showExecute","noSave","resetView","hideSave","showSaveContinue","showSave","AgaramTree","OpenNodes","FocusKey","ActiveKey","Specification","TestCombined","TestChange","selectedTestData","myScrollRef","RealRegSubTypeValue","RealFilterStatusValue","lstComponent","onInputComponentOnChange","timeZoneList","sreceiveddate","CurrentTime","handleChange","defaultTimeZone"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Card, Col, Form, FormGroup, FormLabel, Modal, Nav, Row } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ModalInner, ReadOnlyText } from '../../components/App.styles';\r\nimport { RegistrationType, transactionStatus } from '../../components/Enumeration';\r\nimport { faCalculator, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { comboChild, getSameRecordFromTwoArrays } from '../../components/CommonScript';\r\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout';\r\nimport { HeaderSpan } from './registration.styled';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport AdvFilter from '../../components/AdvFilter';\r\nimport SpecFilter from './SpecFilter';\r\nimport RegistrationAdvanceFilter from './RegistrationAdvanceFilter';\r\nimport RegisterSlideOut from './RegisterSlideOut';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddTest from './AddTest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getPreviewTemplate, getChildValues, getNewRegSpecification, AddComponents,updateStore\r\n} from '../../actions'\r\nimport AddComponentPopUp from './AddComponentPopUp';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nclass PreRegisterSlideOutModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.myRef = React.createRef()\r\n        this.componentColumnList=[\r\n            { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_STORAGECONDITION\", \"dataField\": \"sstorageconditionname\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_STORAGELOCATION\", \"dataField\": \"sstoragelocationname\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        ];\r\n    }\r\n    formRef = React.createRef();\r\n    state = {\r\n        masterStatus: \"\",\r\n        failedControls: [],\r\n        selectedRecord: this.props.Login.selectedRecord,\r\n        selectedSpec: this.props.Login.selectedSpec,\r\n        popUptestDataState: { skip: 0, take: 10 },\r\n        showFilter: false,\r\n        selectComponent:this.props.Login.selectComponent\r\n    }\r\n    \r\n\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n\r\n        if (!this.state.loadSpec) {\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                                if (componentrow.mandatory === true) {\r\n                                    mandatoryFields.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" })\r\n\r\n                                }\r\n                            })\r\n                                : component.mandatory === true ? mandatoryFields.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" }) : \"\"\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n        if (this.state.loadSpec) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n        }\r\n        if (this.props.esign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        mandatoryFields.forEach(item => {\r\n            if (this.state.selectedRecord[item.dataField] === undefined || this.state.selectedRecord[item.dataField] === null) {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(this.state.selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof this.state.selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (this.props.selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof this.state.selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (this.state.selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (this.state.selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // else{\r\n            //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\r\n            //     failedControls.push(alertMessage);\r\n            // }\r\n        });\r\n        // console.log(\"validationPassed:\", failedControls);\r\n\r\n        if (failedControls.length === 0) {\r\n            if (saveType === 4) {\r\n                this.props.onExecuteClick(this.formRef);\r\n            }\r\n            else if (saveType === 3) {\r\n                if (this.props.selectedRecord.agree && this.props.selectedRecord.agree === transactionStatus.NO) {\r\n\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_CHECKAGREE\" }));\r\n\r\n                } else {\r\n\r\n                    this.props.validateEsign();\r\n                }\r\n            }\r\n            else {\r\n                if (this.state.loadSpec) {\r\n                    let selectedSpec = this.state.selectedSpec\r\n                    selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"]\r\n                    selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"]\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]\r\n                    this.setState({\r\n                        selectedSpec, loadSpec: false\r\n                    })\r\n                } else {\r\n                    this.props.onSaveClick(saveType, this.formRef);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            //toast.info(`${this.props.intl.formatMessage({id:\"IDS_ENTER\"})} ${failedControls.join(\",\")}`);\r\n            label = startLabel[0] === undefined ? label : startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);\r\n        }\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n        let parentList = []\r\n        let childComboList = []\r\n        let childColumnList = {}\r\n        let inputParem = {}\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let product = false;\r\n        let productCategory = false;\r\n        let nproductcatcode = -1\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        if (control.name === 'Product') {\r\n            const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n            const ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                selectedRecord[ProductCategory[0].label]['item']['ncategorybasedflow'];\r\n            nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                selectedRecord[ProductCategory[0].label].value\r\n            if (ncategorybasedflow !== 3) {\r\n                product = true\r\n            }\r\n\r\n        }\r\n        else if (control.name === 'Product Category') {\r\n            // const ProductCategory=comboComponents.filetr(x=>x.name===\"Product Category\");\r\n            const ncategorybasedflow = comboData &&\r\n                comboData['item']['ncategorybasedflow'];\r\n            if (ncategorybasedflow === 3) {\r\n                productCategory = true\r\n            }\r\n        }\r\n\r\n        if (control.child && control.child.length > 0) {\r\n            childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\")\r\n            childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n\r\n            inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData.value,\r\n                item: comboData.item,\r\n                label: comboName\r\n            }\r\n            let nproductcode = -1\r\n            if (product) {\r\n                nproductcode = selectedRecord[comboName] &&\r\n                    selectedRecord[comboName].value;\r\n            }\r\n\r\n            const mapOfFilter = {\r\n                nproductcode, nproductcatcode,\r\n                nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode),\r\n            }\r\n            this.props.getChildValues(inputParem,\r\n                this.props.userInfo, selectedRecord, this.props.comboData,\r\n                childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                [...childComboList, ...parentList], productCategory, product, mapOfFilter)\r\n        } else {\r\n\r\n            if (productCategory) {\r\n                const ncategorybasedflow = selectedRecord[comboName] &&\r\n                    selectedRecord[comboName].value;\r\n\r\n            } else if (product) {\r\n                const nproductcode = selectedRecord[comboName] &&\r\n                    selectedRecord[comboName].value;\r\n                const mapOfFilter = {\r\n                    nproductcode, nproductcatcode,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode),\r\n                }\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.userInfo, selectedRecord, this.props.comboData,\r\n                    childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                    [...childComboList, ...parentList], productCategory, product, mapOfFilter)\r\n            } else {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    // onInputOnChange = (event, value) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     if (event.target.type === 'toggle') {\r\n    //         selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n    //     } else if (event.target.type === 'numeric') {\r\n    //         if (/\\D/.test(event.target.value))\r\n    //             selectedRecord[event.target.name] = event.target.value;\r\n    //     } else if (event.target.type === 'checkbox') {\r\n    //         selectedRecord[event.target.name] = value;\r\n    //     } else if (event.target.type === 'radio') {\r\n    //         selectedRecord[event.target.name] = value\r\n    //     } else {\r\n    //         selectedRecord[event.target.name] = event.target.value;\r\n    //     }\r\n    //     this.setState({ selectedRecord });\r\n    //     // this.saveComponentProperties()\r\n    // }\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    handleDateChange = (dateValue, dateName,screenName) => {\r\n        const { selectedRecord,selectComponent } = this.state;\r\n        if(screenName==='component'){\r\n            selectComponent[dateName] = dateValue;\r\n            this.setState({ selectComponent });\r\n        }else{\r\n            selectedRecord[dateName] = dateValue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n       \r\n    }\r\n    testdataStateChange = (event) => {\r\n        this.setState({\r\n            popUptestDataState: event.dataState\r\n        });\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let masterStatus = this.props.masterStatus;\r\n        if (masterStatus !== \"\" && masterStatus !== undefined) {\r\n            toast.warn(masterStatus);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterStatus: \"\" }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            masterStatus = \"\";\r\n        }\r\n        if (this.props.innerPopup !== this.state.innerTop) {\r\n            setTimeout(() => {\r\n                let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\r\n                if (this.myRef && this.myRef.current) {\r\n                    this.myRef.current.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n                if (scrollDoc) {\r\n                    scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n            }, 100)\r\n            this.setState({\r\n                innerTop: this.props.innerPopup\r\n            })\r\n        }\r\n        //     else if (this.state.seletedSpec !== this.props.Login.selectedRecord) {\r\n        //         this.setState({ \r\n        //            // selectedRecord: this.props.Login.selectedRecord,\r\n        //             seletedSpec:this.props.Login.selectedRecord });\r\n        // }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.state.showFilter\r\n        this.setState({\r\n            showFilter\r\n        })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        this.setState({\r\n            showFilter: false\r\n        })\r\n    }\r\n    AddSpec = (e) => {\r\n        this.setState({\r\n            loadSpec: true\r\n        })\r\n    }\r\n    addTestslide = (e) => {\r\n        this.setState({\r\n            loadTest: true\r\n        })\r\n    }\r\n    closeSpec = (e) => {\r\n        this.setState({\r\n            loadSpec: false, loadTest: false, selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec }\r\n        })\r\n    }\r\n\r\n    closeComponent = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n               loadComponent:false,\r\n               selectComponent:{}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onspecChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\r\n                this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\r\n            selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n            selectedRecord[\"nallottedspeccode\"] = event;\r\n            //  if(this.props.Login.Component.length=== 0 ){\r\n            this.setState({ selectedRecord });\r\n            // }else{\r\n            //     if(event.value!== oldpromarycode ){\r\n            //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n\r\n        // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\r\n        //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\r\n        // } else {\r\n        //     // if(event.key!== this.props.Login.ActiveKey ){\r\n        //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n        //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\r\n        //     // }\r\n        // }\r\n    }\r\n    selectSubSample = (event) => {\r\n        let selectedSubSample = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test &&\r\n            this.props.Login.Test[selectedSubSample.ssamplename] ?\r\n            this.props.Login.Test[selectedSubSample.ssamplename] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedSubSample,\r\n                popUptestDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n\r\n    selectComponent = (event) => {\r\n        let selectedComponent = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedComponent,\r\n                popUptestDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n\r\n    AddComponent = () => {\r\n        let Map = {};\r\n        let booleanFlag = true;\r\n        if (this.state.selectedRecord.nallottedspeccode !== undefined\r\n            && this.state.selectedRecord.nallottedspeccode !== \"\") {\r\n            if (this.props.Login.masterData.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL) {\r\n                if (this.state.selectedRecord.nmanufcode === undefined || this.state.selectedRecord.nmanufcode === \"\") {\r\n                    booleanFlag = false;\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMANUFACTURER\" }));\r\n                }\r\n            }\r\n            if (booleanFlag) {\r\n                if (this.state.selectedRecord.nallottedspeccode !== undefined && this.state.selectedRecord.nallottedspeccode !== \"\") {\r\n                    Map[\"ntemplatemanipulationcode\"] = this.state.selectedRecord.ntemplatemanipulationcode;\r\n                    Map[\"nallottedspeccode\"] = this.state.selectedRecord.nallottedspeccode.value;\r\n                    Map[\"nmanufcode\"] = this.state.selectedRecord.nmanufcode;\r\n                    Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                    Map[\"testrequired\"] = false;\r\n                    Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                    this.props.AddComponents(Map);\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectComponent = this.state.selectComponent || {};\r\n            if(fieldName==='ntzdreceivedate'){\r\n                selectComponent[\"ntzdreceivedate\"] = comboData;\r\n            }else{\r\n                const oldspecsampletypecode=selectComponent.nspecsampletypecode\r\n                if(oldspecsampletypecode!==comboData.item.nspecsampletypecode){\r\n                    selectComponent[\"nneedservice\"] = true;\r\n                }\r\n                selectComponent[\"ncomponentcode\"] = comboData;\r\n                selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n                \r\n            }\r\n            this.setState({ selectComponent });\r\n          \r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let saveType = 1;\r\n        if (this.props.ignoreFormValidation) {\r\n            saveType = 5;\r\n        }\r\n        let buttonLabel = \"Save\";\r\n        let idsLabel = \"IDS_SAVE\";\r\n        if (this.props.buttonLabel) {\r\n            buttonLabel = this.props.buttonLabel;\r\n            idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\r\n        }\r\n        const testColumnList = [\r\n            { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\r\n\r\n        const filterComponent = [{\r\n            \"specFIlter\": <SpecFilter\r\n\r\n            />\r\n        }]\r\n        return (\r\n            <Modal\r\n                size={this.props.Login.loadComponent?\r\n                    'lg':this.state.loadSpec?'lg':\r\n                    this.state.loadTest?'lg':'xl'}\r\n                // size={this.props.templateData[0] ?\r\n                //     this.props.templateData[0].children ?\r\n                //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\r\n                backdrop=\"static\"\r\n                className={this.props.className || \"\"}\r\n                show={this.props.show}\r\n                onHide={this.props.closeModal}\r\n                enforceFocus={false}\r\n                dialogClassName=\"modal-dialog-slideout freakerstop\"\r\n                aria-labelledby=\"add-user\">\r\n                <Modal.Header className=\"d-flex align-items-center\">\r\n                    <Modal.Title id=\"add-user\" className=\"header-primary flex-grow-1\">\r\n                        {this.props.graphView === true ? \"\" : this.props.inputParam ?\r\n                            this.props.esign === true ?\r\n                                <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                : this.props.loginoperation ?\r\n                                    <FormattedMessage id={this.props.screenName} />\r\n                                    : <>\r\n                                        {this.props.operation ?\r\n                                            <>\r\n                                                <FormattedMessage id={this.props.operation && \"IDS_\".concat(this.props.operation.toUpperCase())}\r\n                                                    defaultMessage='Add' />\r\n                                                {\" \"}\r\n                                                {\r\n                                                    this.props.screenName ?\r\n                                                        <FormattedMessage id={this.props.screenName} />\r\n                                                        : \"\"\r\n                                                }\r\n                                            </>\r\n                                            :\r\n                                            this.props.screenName ?\r\n                                                <FormattedMessage id={this.props.screenName} />\r\n                                                : \"\"}\r\n                                    </>\r\n                            : \"\"}\r\n                    </Modal.Title>\r\n                    <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.state.loadSpec ? \r\n                        this.closeSpec : this.state.loadTest ? this.closeSpec :this.props.Login.loadComponent?\r\n                        this.closeComponent:\r\n                         this.props.closeModal}>\r\n                        <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                    </Button>\r\n                    {this.props.esign === true ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                        </Button>\r\n                        :\r\n                        (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ?\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_VALIDATE' defaultMessage='Validate' />\r\n                            </Button> :\r\n                            this.props.showCalculate ?\r\n                                <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                    <FormattedMessage id='IDS_CALCULATE' defaultMessage='Calculate' />\r\n                                </Button> :\r\n                                this.props.showParam === true && this.props.showExecute ?\r\n                                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                        <FontAwesomeIcon icon={faCalculator} /> { }\r\n                                        <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n                                    </Button> :\r\n                                    this.props.noSave || this.props.graphView ?\r\n                                        this.props.operation === \"view\" ? \"\"\r\n                                            : <Button className=\"btn btn-user btn-primary-blue\" role=\"button\"\r\n                                                onClick={this.props.resetView}\r\n                                            >\r\n                                                <FormattedMessage id={\"IDS_RESET\"} defaultMessage='Reset' />\r\n                                            </Button>\r\n                                        : this.props.hideSave ? \"\" :\r\n                                            <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                                <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                            </Button>\r\n                    }\r\n                    {this.props.operation === \"create\" && this.props.showSaveContinue ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(2)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVECONTINUE' defaultMessage='Save & Continue' />\r\n                        </Button>\r\n                        : \"\"\r\n                    }\r\n                    {(this.props.operation === \"create\" || this.props.operation === \"update\")\r\n                        && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(1)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVE' defaultMessage='Save' />\r\n                        </Button>\r\n                        : \"\"}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <ModalInner ref={this.myRef}>\r\n                        <Card.Body>\r\n                            <React.Fragment>\r\n                                <Form ref={this.formRef}>\r\n                                    {\r\n                                        this.state.loadSpec ?\r\n                                            <AddSpecification\r\n                                                AgaramTree={this.props.Login.AgaramTree}\r\n                                                openNodes={this.props.Login.OpenNodes}\r\n                                                handleTreeClick={this.onTreeClick}\r\n                                                focusKey={this.props.Login.FocusKey}\r\n                                                activeKey={this.props.Login.ActiveKey}\r\n                                                Specification={this.props.Login.Specification}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                selectedSpec={this.state.selectedSpec}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                onSpecChange={this.onspecChange}\r\n                                            />\r\n                                            : this.state.loadTest ?\r\n                                                <AddTest\r\n                                                    TestCombined={this.props.Login.TestCombined || []}\r\n                                                    TestChange={this.TestChange}\r\n                                                    selectedTestData={this.state.selectedTestData}\r\n                                                /> : this.props.Login.loadComponent ?\r\n                                                    <AddComponentPopUp\r\n                                                        ref={this.myScrollRef}\r\n                                                        selectComponent={this.state.selectComponent || {}}\r\n                                                        RealSampleTypeValue={this.props.Login.masterData.RealSampleTypeValue || {}}\r\n                                                        RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                        RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                        RealFilterStatusValue={this.props.Login.masterData.RealFilterStatusValue || {}}\r\n                                                        formatMessage={this.props.intl.formatMessage}\r\n                                                        handleDateChange={this.handleDateChange}\r\n                                                        Component={this.props.Login.lstComponent || []}\r\n                                                        onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                    // onComboChange={this.onComponentComboChange}\r\n                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                        onComponentChange={this.onComponentChange}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        sreceiveddate={this.props.Login.sreceiveddate || []}\r\n                                                        CurrentTime={this.props.Login.CurrentTime}\r\n                                                    /> \r\n                                                        : <RegisterSlideOut\r\n                                                            selectedSpec={this.state.selectedSpec}\r\n                                                            selectedRecord={this.state.selectedRecord}\r\n                                                            templateData={this.props.Login.masterData.registrationTemplate &&\r\n                                                                this.props.Login.masterData.registrationTemplate.jsondata}\r\n                                                            handleChange={this.props.handleChange}\r\n                                                            handleDateChange={this.props.handleDateChange}\r\n                                                            onInputOnChange={this.onInputOnChange}\r\n                                                            onNumericInputChange={this.onNumericInputChange}\r\n                                                            comboData={this.props.Login.comboData}\r\n                                                            onComboChange={this.onComboChange}\r\n                                                            userInfo={this.props.userInfo}\r\n                                                            timeZoneList={this.props.timeZoneList}\r\n                                                            defaultTimeZone={this.props.defaultTimeZone}\r\n                                                            popUptestDataState={this.state.popUptestDataState}\r\n                                                            dataState={this.state.popUptestDataState}\r\n                                                            dataStateChange={this.state.testdataStateChange}\r\n                                                            AddSpec={this.AddSpec}\r\n                                                            addTest={this.addTestslide}\r\n                                                            selectSubSample={this.selectSubSample}\r\n                                                            selectComponent={this.selectComponent}\r\n                                                            subSample={4}\r\n                                                            AddComponent={this.AddComponent}\r\n                                                            componentColumnList={this.componentColumnList}\r\n                                                        />\r\n                                    }\r\n                                </Form>\r\n                            </React.Fragment>\r\n                        </Card.Body>\r\n                    </ModalInner>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { getChildValues,\r\n     getPreviewTemplate, getNewRegSpecification, AddComponents,updateStore }\r\n)(injectIntl(PreRegisterSlideOutModal));"]},"metadata":{},"sourceType":"module"}