{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\components\\\\FilterQueryBuilder.jsx\";\nimport React, { Component } from \"react\";\nimport merge from \"lodash/merge\";\nimport { Query, Builder, BasicConfig, BasicFuncs, Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport \"@react-awesome-query-builder/ui/css/styles.css\";\nimport { FormattedMessage, injectIntl } from \"react-intl\";\nimport { Pager } from \"@progress/kendo-react-data-tools\";\nimport { Grid, GridColumn } from \"@progress/kendo-react-grid\";\nimport { Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCalculator } from \"@fortawesome/free-solid-svg-icons\";\nimport { LocalizationProvider } from \"@progress/kendo-react-intl\";\nconst {\n  checkTree,\n  loadTree,\n  uuid\n} = QbUtils;\nconst InitialConfig = BasicConfig;\nconst conjunctions = {\n  AND: InitialConfig.conjunctions.AND,\n  OR: InitialConfig.conjunctions.OR\n}; // Object.keys(conjunctions).map(x=>{\n//   conjunctions[x]['label']=\"IDS_\"+conjunctions[x]['label'].toUpperCase()\n// })\n\nconst operators1 = { ...InitialConfig.operators\n};\nObject.keys(operators1).map(x => {\n  operators1[x]['label'] = \"IDS_\" + operators1[x]['label'].toUpperCase();\n});\ndelete operators1.proximity;\nconst operators = { ...operators1,\n  between: { ...operators1.between,\n    textSeparators: [\"from\", \"to\"]\n  }\n};\nconst widgets = { ...InitialConfig.widgets,\n  date: { ...InitialConfig.widgets.date,\n    dateFormat: \"DD.MM.YYYY\",\n    valueFormat: \"YYYY-MM-DD\"\n  }\n};\nconst types = { ...InitialConfig.types,\n  boolean: merge(InitialConfig.types.boolean, {\n    widgets: {\n      boolean: {\n        widgetProps: {\n          hideOperator: true,\n          operatorInlineLabel: \"is\"\n        }\n      }\n    }\n  })\n};\nconst localeSettings = {\n  locale: {\n    moment: \"ru\" //  antd:messages['en-US']\n\n  },\n  valueLabel: \"Values\",\n  valuePlaceholder: \"Values\",\n  operatorLabel: \"Operator\",\n  fieldPlaceholder: \"Select field\",\n  operatorPlaceholder: \"Select operator\",\n  deleteLabel: null,\n  addGroupLabel: \"Add group\",\n  addRuleLabel: \"Add rule\",\n  addSubRuleLabel: \"Add sub rule\",\n  delGroupLabel: null,\n  notLabel: \"Not\",\n  funcLabel: \"Function\",\n  valueSourcesPopupTitle: \"Select value source\" // removeRuleConfirmOptions: {\n  //   title: \"Are you sure delete this rule?\",\n  //   okText: \"Yes\",\n  //   okType: \"danger\",\n  // },\n  // removeGroupConfirmOptions: {\n  //   title: \"Are you sure delete this group?\",\n  //   okText: \"Yes\",\n  //   okType: \"danger\",\n  // },\n\n};\nconst settings1 = { ...InitialConfig.settings\n};\ndelete settings1.field;\nconst settings = { ...settings1,\n  ...localeSettings,\n  valueSourcesInfo: {\n    value: {\n      label: \"Value\"\n    },\n    field: {\n      label: \"Field\",\n      widget: \"field\"\n    },\n    func: {\n      label: \"Function\",\n      widget: \"func\"\n    }\n  },\n  // canReorder: false,\n  // canRegroup: false,\n  // showNot: false,\n  // showLabels: true,\n  maxNesting: 5,\n  canLeaveEmptyGroup: true,\n  shouldCreateEmptyGroup: false,\n  showErrorMessage: true,\n  customFieldSelectProps: {\n    showSearch: true\n  } //after deletion\n  // renderField: (props) => <FieldCascader {...props} />,\n  // renderOperator: (props) => <FieldDropdown {...props} />,\n  // renderFunc: (props) => <FieldSelect {...props} />,\n\n};\nconst funcs = { ...BasicFuncs\n}; // delete funcs.valueSourcesInfo.field\n\nconst config = { ...InitialConfig,\n  conjunctions,\n  operators,\n  widgets,\n  types,\n  settings,\n  funcs,\n  fields: {}\n};\nlet functionValues = [];\nObject.keys(config['funcs']).map(x => {\n  functionValues.push(config['funcs'][x]['label'].toUpperCase());\n  config['funcs'][x]['label'] = \"IDS_\" + config['funcs'][x]['label'].toUpperCase();\n});\n\nclass FilterQueryBuilder extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.renderBuilder = props => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"query-builder-wrap kendo-theme\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Builder, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 7\n      }\n    })));\n\n    Object.keys(config.operators).map(x => {\n      if (x === 'select_any_in' || x === 'select_not_any_in') {\n        delete config.operators[x];\n      } else {\n        config.operators[x]['label'] = this.props.intl.formatMessage({\n          id: \"IDS_\" + config.operators[x]['labelForFormat'].toUpperCase()\n        });\n      } //  return  {[x]:config.operators[x]};\n\n    });\n    Object.keys(config['funcs']).map((x, i) => {\n      config['funcs'][x]['label'] = this.props.intl.formatMessage({\n        id: \"IDS_\" + functionValues[i]\n      }); // config['funcs'][x]['label'] = this.props.intl.formatMessage({ id: config['funcs'][x]['label'] })\n    });\n    this.state = {\n      config: { ...config,\n        settings: { ...config.settings,\n          notLabel: this.props.intl.formatMessage({\n            id: \"IDS_NOT\"\n          }),\n          valueLabel: this.props.intl.formatMessage({\n            id: \"IDS_VALUE\"\n          }),\n          valuePlaceholder: this.props.intl.formatMessage({\n            id: \"IDS_VALUE\"\n          }),\n          operatorLabel: this.props.intl.formatMessage({\n            id: \"IDS_OPERATOR\"\n          }),\n          fieldPlaceholder: this.props.intl.formatMessage({\n            id: \"IDS_SELECTFIELD\"\n          }),\n          operatorPlaceholder: this.props.intl.formatMessage({\n            id: \"IDS_SELECTOPERATOR\"\n          }),\n          // deleteLabel: this.props.intl.formatMessage({id: \"\" }),\n          addGroupLabel: this.props.intl.formatMessage({\n            id: \"IDS_ADDGROUP\"\n          }),\n          addRuleLabel: this.props.intl.formatMessage({\n            id: \"IDS_ADDRULE\"\n          }),\n          addSubRuleLabel: this.props.intl.formatMessage({\n            id: \"IDS_ADDSUBRULE\"\n          }),\n          //delGroupLabel: this.props.intl.formatMessage({id: \"\" }),\n          valueSourcesPopupTitle: this.props.intl.formatMessage({\n            id: \"IDS_SELECTVALUESOURCE\"\n          }),\n          funcLabel: this.props.intl.formatMessage({\n            id: \"IDS_FUNCTION\"\n          }),\n          valueSourcesInfo: {\n            field: {\n              label: this.props.intl.formatMessage({\n                id: \"IDS_FIELD\"\n              }),\n              widget: 'field'\n            },\n            func: {\n              label: this.props.intl.formatMessage({\n                id: \"IDS_FUNCTION\"\n              }),\n              widget: 'func'\n            },\n            value: {\n              label: this.props.intl.formatMessage({\n                id: \"IDS_VALUE\"\n              })\n            }\n          } //delete alert\n          // removeRuleConfirmOptions: {\n          //   title: this.props.intl.formatMessage({ id: \"IDS_AREYOUSUREDELETETHISRULE\" }),\n          //   okText: this.props.intl.formatMessage({ id: \"IDS_YES\" }),\n          //   okType: \"danger\",\n          // },\n          // removeGroupConfirmOptions: {\n          //   title: this.props.intl.formatMessage({ id: \"IDS_AREYOUSUREDELETETHISGROUP\" }),\n          //   okText: this.props.intl.formatMessage({ id: \"IDS_YES\" }),\n          //   okType: \"danger\",\n          // }\n\n        },\n        conjunctions: {\n          AND: { ...config['conjunctions']['AND'],\n            label: this.props.intl.formatMessage({\n              id: \"IDS_AND\"\n            })\n          },\n          OR: { ...config['conjunctions']['OR'],\n            label: this.props.intl.formatMessage({\n              id: \"IDS_OR\"\n            })\n          }\n        },\n        //  operators: { ...Object.keys(config.operators).map(x =>) }\n        fields: this.props.fields //,settings:{...config.settings,notLabel:this.props.intl.formatMessage({id: \"NOT\"})}\n\n      }\n    };\n  }\n\n  componentDidUpdate(prevops) {\n    if (this.props.isRender) {\n      if (this.props.fields !== this.state.config.fields) {\n        let config = this.state.config;\n        config['fields'] = this.props.fields;\n        this.setState({\n          config: config\n        });\n      }\n    }\n  }\n\n  render() {\n    const emptyInitValue = {\n      \"id\": uuid(),\n      \"type\": \"group\"\n    };\n    let conf = this.props.config ? this.props.config : this.state.config;\n    let tree = checkTree(loadTree(emptyInitValue), conf);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Query, Object.assign({}, this.state.config, {\n      value: this.props.tree || tree // value={checkTree(loadTree(tree),conf)}\n      ,\n      onChange: this.props.onChange,\n      renderBuilder: this.renderBuilder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }\n    })), !this.props.static ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end mt-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.props.handleExecuteClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXECUTE\",\n      defaultMessage: \"Execute\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }\n    }))) : \"\", !this.props.static ? /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }\n    }) : \"\", !this.props.static ? /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: this.props.userInfo.slanguagetypecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      style: {\n        maxHeight: \"400px\"\n      },\n      onRowClick: this.props.onRowClick,\n      data: this.props.filterData.slice(this.props.skip, this.props.skip + this.props.take),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 15\n      }\n    }, this.props.gridColumns.map(x => {\n      return /*#__PURE__*/React.createElement(GridColumn, {\n        field: x.field,\n        title: x.title,\n        width: x.width,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 26\n        }\n      });\n    }))) : \"\", !this.props.static ? /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 13\n      }\n    }) : \"\", !this.props.static ? /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: this.props.userInfo.slanguagetypecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Pager, {\n      skip: this.props.skip,\n      take: this.props.take,\n      type: \"input\",\n      previousNext: true,\n      total: this.props.filterData.length,\n      onPageChange: this.props.handlePageChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 15\n      }\n    })) : \"\"));\n  } // onChange = (immutableTree, config) => {\n  //   this.setState({ tree: immutableTree, config: config });\n  //   const jsonTree = QbUtils.getTree(immutableTree);\n  //   console.log(jsonTree);\n  // };\n\n\n}\n\nexport default injectIntl(FilterQueryBuilder);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/components/FilterQueryBuilder.jsx"],"names":["React","Component","merge","Query","Builder","BasicConfig","BasicFuncs","Utils","QbUtils","FormattedMessage","injectIntl","Pager","Grid","GridColumn","Button","FontAwesomeIcon","faCalculator","LocalizationProvider","checkTree","loadTree","uuid","InitialConfig","conjunctions","AND","OR","operators1","operators","Object","keys","map","x","toUpperCase","proximity","between","textSeparators","widgets","date","dateFormat","valueFormat","types","boolean","widgetProps","hideOperator","operatorInlineLabel","localeSettings","locale","moment","valueLabel","valuePlaceholder","operatorLabel","fieldPlaceholder","operatorPlaceholder","deleteLabel","addGroupLabel","addRuleLabel","addSubRuleLabel","delGroupLabel","notLabel","funcLabel","valueSourcesPopupTitle","settings1","settings","field","valueSourcesInfo","value","label","widget","func","maxNesting","canLeaveEmptyGroup","shouldCreateEmptyGroup","showErrorMessage","customFieldSelectProps","showSearch","funcs","config","fields","functionValues","push","FilterQueryBuilder","constructor","props","renderBuilder","intl","formatMessage","id","i","state","componentDidUpdate","prevops","isRender","setState","render","emptyInitValue","conf","tree","onChange","static","handleExecuteClick","userInfo","slanguagetypecode","maxHeight","onRowClick","filterData","slice","skip","take","gridColumns","title","width","length","handlePageChange"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SACEC,KADF,EAEEC,OAFF,EAGEC,WAHF,EAGeC,UAHf,EAIEC,KAAK,IAAIC,OAJX,QAKO,iCALP;AAMA,OAAO,gDAAP;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,SAASC,KAAT,QAAsB,kCAAtB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,4BAAjC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,YAAT,QAA6B,mCAA7B;AACA,SAASC,oBAAT,QAAqC,4BAArC;AACA,MAAM;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,QAAb;AAAuBC,EAAAA;AAAvB,IAAgCZ,OAAtC;AAEA,MAAMa,aAAa,GAAGhB,WAAtB;AAEA,MAAMiB,YAAY,GAAG;AACnBC,EAAAA,GAAG,EAAEF,aAAa,CAACC,YAAd,CAA2BC,GADb;AAEnBC,EAAAA,EAAE,EAAEH,aAAa,CAACC,YAAd,CAA2BE;AAFZ,CAArB,C,CAKA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAG,EACjB,GAAGJ,aAAa,CAACK;AADA,CAAnB;AAIAC,MAAM,CAACC,IAAP,CAAYH,UAAZ,EAAwBI,GAAxB,CAA4BC,CAAC,IAAI;AAC/BL,EAAAA,UAAU,CAACK,CAAD,CAAV,CAAc,OAAd,IAAyB,SAASL,UAAU,CAACK,CAAD,CAAV,CAAc,OAAd,EAAuBC,WAAvB,EAAlC;AACD,CAFD;AAGA,OAAON,UAAU,CAACO,SAAlB;AACA,MAAMN,SAAS,GAAG,EAChB,GAAGD,UADa;AAEhBQ,EAAAA,OAAO,EAAE,EACP,GAAGR,UAAU,CAACQ,OADP;AAEPC,IAAAA,cAAc,EAAE,CACd,MADc,EAEd,IAFc;AAFT;AAFO,CAAlB;AAYA,MAAMC,OAAO,GAAG,EACd,GAAGd,aAAa,CAACc,OADH;AAEdC,EAAAA,IAAI,EAAE,EACJ,GAAGf,aAAa,CAACc,OAAd,CAAsBC,IADrB;AAEJC,IAAAA,UAAU,EAAE,YAFR;AAGJC,IAAAA,WAAW,EAAE;AAHT;AAFQ,CAAhB;AAUA,MAAMC,KAAK,GAAG,EACZ,GAAGlB,aAAa,CAACkB,KADL;AAEZC,EAAAA,OAAO,EAAEtC,KAAK,CAACmB,aAAa,CAACkB,KAAd,CAAoBC,OAArB,EAA8B;AAC1CL,IAAAA,OAAO,EAAE;AACPK,MAAAA,OAAO,EAAE;AACPC,QAAAA,WAAW,EAAE;AACXC,UAAAA,YAAY,EAAE,IADH;AAEXC,UAAAA,mBAAmB,EAAE;AAFV;AADN;AADF;AADiC,GAA9B;AAFF,CAAd;AAiBA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAE,IADF,CAEN;;AAFM,GADa;AAMrBC,EAAAA,UAAU,EAAE,QANS;AAOrBC,EAAAA,gBAAgB,EAAE,QAPG;AAQrBC,EAAAA,aAAa,EAAE,UARM;AASrBC,EAAAA,gBAAgB,EAAE,cATG;AAUrBC,EAAAA,mBAAmB,EAAE,iBAVA;AAWrBC,EAAAA,WAAW,EAAE,IAXQ;AAYrBC,EAAAA,aAAa,EAAE,WAZM;AAarBC,EAAAA,YAAY,EAAE,UAbO;AAcrBC,EAAAA,eAAe,EAAE,cAdI;AAerBC,EAAAA,aAAa,EAAE,IAfM;AAgBrBC,EAAAA,QAAQ,EAAE,KAhBW;AAiBrBC,EAAAA,SAAS,EAAE,UAjBU;AAkBrBC,EAAAA,sBAAsB,EAAE,qBAlBH,CAmBrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5BqB,CAAvB;AA8BA,MAAMC,SAAS,GAAG,EAAE,GAAGvC,aAAa,CAACwC;AAAnB,CAAlB;AACA,OAAOD,SAAS,CAACE,KAAjB;AACA,MAAMD,QAAQ,GAAG,EACf,GAAGD,SADY;AAEf,KAAGhB,cAFY;AAIfmB,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE;AADF,KADS;AAKhBH,IAAAA,KAAK,EAAE;AACLG,MAAAA,KAAK,EAAE,OADF;AAELC,MAAAA,MAAM,EAAE;AAFH,KALS;AAShBC,IAAAA,IAAI,EAAE;AACJF,MAAAA,KAAK,EAAE,UADH;AAEJC,MAAAA,MAAM,EAAE;AAFJ;AATU,GAJH;AAkBf;AACA;AACA;AACA;AACAE,EAAAA,UAAU,EAAE,CAtBG;AAuBfC,EAAAA,kBAAkB,EAAE,IAvBL;AAwBfC,EAAAA,sBAAsB,EAAE,KAxBT;AAyBfC,EAAAA,gBAAgB,EAAE,IAzBH;AA0BfC,EAAAA,sBAAsB,EAAE;AACtBC,IAAAA,UAAU,EAAE;AADU,GA1BT,CA4BZ;AAEH;AACA;AACA;;AAhCe,CAAjB;AAmCA,MAAMC,KAAK,GAAG,EACZ,GAAGpE;AADS,CAAd,C,CAGA;;AACA,MAAMqE,MAAM,GAAG,EACb,GAAGtD,aADU;AACKC,EAAAA,YADL;AAEbI,EAAAA,SAFa;AAGbS,EAAAA,OAHa;AAIbI,EAAAA,KAJa;AAKbsB,EAAAA,QALa;AAMba,EAAAA,KANa;AAObE,EAAAA,MAAM,EAAE;AAPK,CAAf;AAWA,IAAIC,cAAc,GAAG,EAArB;AAEAlD,MAAM,CAACC,IAAP,CAAY+C,MAAM,CAAC,OAAD,CAAlB,EAA6B9C,GAA7B,CAAiCC,CAAC,IAAI;AACpC+C,EAAAA,cAAc,CAACC,IAAf,CAAoBH,MAAM,CAAC,OAAD,CAAN,CAAgB7C,CAAhB,EAAmB,OAAnB,EAA4BC,WAA5B,EAApB;AACA4C,EAAAA,MAAM,CAAC,OAAD,CAAN,CAAgB7C,CAAhB,EAAmB,OAAnB,IAA8B,SAAS6C,MAAM,CAAC,OAAD,CAAN,CAAgB7C,CAAhB,EAAmB,OAAnB,EAA4BC,WAA5B,EAAvC;AACD,CAHD;;AAKA,MAAMgD,kBAAN,SAAiC9E,SAAjC,CAA2C;AACzC+E,EAAAA,WAAW,CAACC,MAAD,EAAQ;AAEjB,UAAMA,MAAN;;AAFiB,SAuJnBC,aAvJmB,GAuJFD,KAAD,iBACd;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,OAAD,oBAAaA,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CAxJiB;;AAGjBtD,IAAAA,MAAM,CAACC,IAAP,CAAY+C,MAAM,CAACjD,SAAnB,EAA8BG,GAA9B,CAAkCC,CAAC,IAAI;AAEnC,UAAGA,CAAC,KAAG,eAAJ,IAAqBA,CAAC,KAAG,mBAA5B,EAAgD;AAC5C,eAAO6C,MAAM,CAACjD,SAAP,CAAiBI,CAAjB,CAAP;AACH,OAFD,MAEK;AACL6C,QAAAA,MAAM,CAACjD,SAAP,CAAiBI,CAAjB,EAAoB,OAApB,IAA+B,KAAKmD,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE,SAASV,MAAM,CAACjD,SAAP,CAAiBI,CAAjB,EAAoB,gBAApB,EAAsCC,WAAtC;AAAf,SAA9B,CAA/B;AACD,OANoC,CAOrC;;AACD,KARD;AAUAJ,IAAAA,MAAM,CAACC,IAAP,CAAY+C,MAAM,CAAC,OAAD,CAAlB,EAA6B9C,GAA7B,CAAiC,CAACC,CAAD,EAAIwD,CAAJ,KAAU;AACzCX,MAAAA,MAAM,CAAC,OAAD,CAAN,CAAgB7C,CAAhB,EAAmB,OAAnB,IAA8B,KAAKmD,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE,SAASR,cAAc,CAACS,CAAD;AAA7B,OAA9B,CAA9B,CADyC,CAEzC;AACD,KAHD;AAKA,SAAKC,KAAL,GAAa;AACXZ,MAAAA,MAAM,EAAE,EACN,GAAGA,MADG;AACKd,QAAAA,QAAQ,EAAE,EACnB,GAAGc,MAAM,CAACd,QADS;AACCJ,UAAAA,QAAQ,EAAE,KAAKwB,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CADX;AAEnBtC,UAAAA,UAAU,EAAE,KAAKkC,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAFO;AAGnBrC,UAAAA,gBAAgB,EAAE,KAAKiC,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAHC;AAInBpC,UAAAA,aAAa,EAAE,KAAKgC,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAJI;AAKnBnC,UAAAA,gBAAgB,EAAE,KAAK+B,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CALC;AAMnBlC,UAAAA,mBAAmB,EAAE,KAAK8B,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CANF;AAOnB;AACAhC,UAAAA,aAAa,EAAE,KAAK4B,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CARI;AASnB/B,UAAAA,YAAY,EAAE,KAAK2B,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CATK;AAUnB9B,UAAAA,eAAe,EAAE,KAAK0B,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAVE;AAWnB;AACA1B,UAAAA,sBAAsB,EAAE,KAAKsB,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAZL;AAanB3B,UAAAA,SAAS,EAAE,KAAKuB,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAbQ;AAcnBtB,UAAAA,gBAAgB,EAAE;AAChBD,YAAAA,KAAK,EAAE;AAAEG,cAAAA,KAAK,EAAE,KAAKgB,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CAAT;AAA6DnB,cAAAA,MAAM,EAAE;AAArE,aADS;AAEhBC,YAAAA,IAAI,EAAE;AAAEF,cAAAA,KAAK,EAAE,KAAKgB,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CAAT;AAAgEnB,cAAAA,MAAM,EAAE;AAAxE,aAFU;AAGhBF,YAAAA,KAAK,EAAE;AAAEC,cAAAA,KAAK,EAAE,KAAKgB,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B;AAAT;AAHS,WAdC,CAoBnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA9BmB,SADf;AAkCH/D,QAAAA,YAAY,EAAE;AACfC,UAAAA,GAAG,EAAE,EAAE,GAAGoD,MAAM,CAAC,cAAD,CAAN,CAAuB,KAAvB,CAAL;AAAoCV,YAAAA,KAAK,EAAE,KAAKgB,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAA9B;AAA3C,WADU;AAEf7D,UAAAA,EAAE,EAAE,EAAE,GAAGmD,MAAM,CAAC,cAAD,CAAN,CAAuB,IAAvB,CAAL;AAAmCV,YAAAA,KAAK,EAAE,KAAKgB,KAAL,CAAWE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAA9B;AAA1C;AAFW,SAlCX;AAsCN;AACAT,QAAAA,MAAM,EAAE,KAAKK,KAAL,CAAWL,MAvCb,CAuCmB;;AAvCnB;AADG,KAAb;AA2CD;;AAGDY,EAAAA,kBAAkB,CAACC,OAAD,EAAU;AAC1B,QAAG,KAAKR,KAAL,CAAWS,QAAd,EAAuB;AACvB,UAAI,KAAKT,KAAL,CAAWL,MAAX,KAAsB,KAAKW,KAAL,CAAWZ,MAAX,CAAkBC,MAA5C,EAAoD;AAClD,YAAID,MAAM,GAAG,KAAKY,KAAL,CAAWZ,MAAxB;AACAA,QAAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,KAAKM,KAAL,CAAWL,MAA9B;AACA,aAAKe,QAAL,CAAc;AAAEhB,UAAAA,MAAM,EAAEA;AAAV,SAAd;AACD;AACF;AACA;;AAEDiB,EAAAA,MAAM,GAAG;AACP,UAAMC,cAAc,GAAG;AAAE,YAAMzE,IAAI,EAAZ;AAAgB,cAAQ;AAAxB,KAAvB;AACA,QAAI0E,IAAI,GAAG,KAAKb,KAAL,CAAWN,MAAX,GAAoB,KAAKM,KAAL,CAAWN,MAA/B,GAAwC,KAAKY,KAAL,CAAWZ,MAA9D;AACA,QAAIoB,IAAI,GAAG7E,SAAS,CAACC,QAAQ,CAAC0E,cAAD,CAAT,EAA2BC,IAA3B,CAApB;AACA,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD,oBACM,KAAKP,KAAL,CAAWZ,MADjB;AAEE,MAAA,KAAK,EAAE,KAAKM,KAAL,CAAWc,IAAX,IAAmBA,IAF5B,CAGE;AAHF;AAIE,MAAA,QAAQ,EAAE,KAAKd,KAAL,CAAWe,QAJvB;AAKE,MAAA,aAAa,EAAE,KAAKd,aALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,EASG,CAAC,KAAKD,KAAL,CAAWgB,MAAZ,gBACC;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,2BAAlB;AAA8C,MAAA,OAAO,EAAE,MAAM,KAAKhB,KAAL,CAAWiB,kBAAX,EAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAElF,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,oBAEE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,aAArB;AAAmC,MAAA,cAAc,EAAC,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CADD,GAOG,EAhBN,EAiBG,CAAC,KAAKiE,KAAL,CAAWgB,MAAZ,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GACU,EAlBb,EAmBG,CAAC,KAAKhB,KAAL,CAAWgB,MAAZ,gBACC,oBAAC,oBAAD;AAAsB,MAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWkB,QAAX,CAAoBC,iBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,SAAS,EAAE;AADN,OADT;AAIE,MAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWqB,UAJzB;AAKE,MAAA,IAAI,EAAE,KAAKrB,KAAL,CAAWsB,UAAX,CAAsBC,KAAtB,CAA4B,KAAKvB,KAAL,CAAWwB,IAAvC,EAA6C,KAAKxB,KAAL,CAAWwB,IAAX,GAAkB,KAAKxB,KAAL,CAAWyB,IAA1E,CALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOG,KAAKzB,KAAL,CAAW0B,WAAX,CAAuB9E,GAAvB,CAA2BC,CAAC,IAAI;AAE/B,0BAAO,oBAAC,UAAD;AAAY,QAAA,KAAK,EAAEA,CAAC,CAACgC,KAArB;AAA4B,QAAA,KAAK,EAAEhC,CAAC,CAAC8E,KAArC;AAA4C,QAAA,KAAK,EAAE9E,CAAC,CAAC+E,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAED,KAJA,CAPH,CADF,CADD,GAmBG,EAtCN,EAuCG,CAAC,KAAK5B,KAAL,CAAWgB,MAAZ,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAEG,EAzCN,EA0CG,CAAC,KAAKhB,KAAL,CAAWgB,MAAZ,gBACC,oBAAC,oBAAD;AAAsB,MAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWkB,QAAX,CAAoBC,iBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAE,KAAKnB,KAAL,CAAWwB,IADnB;AAEE,MAAA,IAAI,EAAE,KAAKxB,KAAL,CAAWyB,IAFnB;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,YAAY,EAAE,IAJhB;AAKE,MAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWsB,UAAX,CAAsBO,MAL/B;AAME,MAAA,YAAY,EAAE,KAAK7B,KAAL,CAAW8B,gBAN3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADD,GAWG,EArDN,CAFF,CADF;AAuED,GAtJwC,CA+JzC;AACA;AAEA;AACA;AACA;;;AApKyC;;AAuK3C,eAAerG,UAAU,CAACqE,kBAAD,CAAzB","sourcesContent":["import React, { Component } from \"react\";\r\nimport merge from \"lodash/merge\";\r\nimport {\r\n  Query,\r\n  Builder,\r\n  BasicConfig, BasicFuncs,\r\n  Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\nimport \"@react-awesome-query-builder/ui/css/styles.css\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport { Pager } from \"@progress/kendo-react-data-tools\";\r\nimport { Grid, GridColumn } from \"@progress/kendo-react-grid\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCalculator } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { LocalizationProvider } from \"@progress/kendo-react-intl\";\r\nconst { checkTree, loadTree, uuid } = QbUtils;\r\n\r\nconst InitialConfig = BasicConfig;\r\n\r\nconst conjunctions = {\r\n  AND: InitialConfig.conjunctions.AND,\r\n  OR: InitialConfig.conjunctions.OR,\r\n};\r\n\r\n// Object.keys(conjunctions).map(x=>{\r\n//   conjunctions[x]['label']=\"IDS_\"+conjunctions[x]['label'].toUpperCase()\r\n// })\r\n\r\nconst operators1 = {\r\n  ...InitialConfig.operators\r\n}\r\n\r\nObject.keys(operators1).map(x => {\r\n  operators1[x]['label'] = \"IDS_\" + operators1[x]['label'].toUpperCase()\r\n})\r\ndelete operators1.proximity\r\nconst operators = {\r\n  ...operators1,\r\n  between: {\r\n    ...operators1.between,\r\n    textSeparators: [\r\n      \"from\",\r\n      \"to\"\r\n    ],\r\n  }\r\n};\r\n\r\n\r\nconst widgets = {\r\n  ...InitialConfig.widgets,\r\n  date: {\r\n    ...InitialConfig.widgets.date,\r\n    dateFormat: \"DD.MM.YYYY\",\r\n    valueFormat: \"YYYY-MM-DD\",\r\n  }\r\n};\r\n\r\n\r\nconst types = {\r\n  ...InitialConfig.types,\r\n  boolean: merge(InitialConfig.types.boolean, {\r\n    widgets: {\r\n      boolean: {\r\n        widgetProps: {\r\n          hideOperator: true,\r\n          operatorInlineLabel: \"is\",\r\n        }\r\n      },\r\n    },\r\n  }),\r\n};\r\n\r\n\r\n\r\n\r\nconst localeSettings = {\r\n  locale: {\r\n    moment: \"ru\",\r\n    //  antd:messages['en-US']\r\n\r\n  },\r\n  valueLabel: \"Values\",\r\n  valuePlaceholder: \"Values\",\r\n  operatorLabel: \"Operator\",\r\n  fieldPlaceholder: \"Select field\",\r\n  operatorPlaceholder: \"Select operator\",\r\n  deleteLabel: null,\r\n  addGroupLabel: \"Add group\",\r\n  addRuleLabel: \"Add rule\",\r\n  addSubRuleLabel: \"Add sub rule\",\r\n  delGroupLabel: null,\r\n  notLabel: \"Not\",\r\n  funcLabel: \"Function\",\r\n  valueSourcesPopupTitle: \"Select value source\",\r\n  // removeRuleConfirmOptions: {\r\n  //   title: \"Are you sure delete this rule?\",\r\n  //   okText: \"Yes\",\r\n  //   okType: \"danger\",\r\n  // },\r\n  // removeGroupConfirmOptions: {\r\n  //   title: \"Are you sure delete this group?\",\r\n  //   okText: \"Yes\",\r\n  //   okType: \"danger\",\r\n  // },\r\n};\r\nconst settings1 = { ...InitialConfig.settings }\r\ndelete settings1.field\r\nconst settings = {\r\n  ...settings1,\r\n  ...localeSettings,\r\n\r\n  valueSourcesInfo: {\r\n    value: {\r\n      label: \"Value\"\r\n    }\r\n    ,\r\n    field: {\r\n      label: \"Field\",\r\n      widget: \"field\",\r\n    },\r\n    func: {\r\n      label: \"Function\",\r\n      widget: \"func\",\r\n    }\r\n  },\r\n  // canReorder: false,\r\n  // canRegroup: false,\r\n  // showNot: false,\r\n  // showLabels: true,\r\n  maxNesting: 5,\r\n  canLeaveEmptyGroup: true,\r\n  shouldCreateEmptyGroup: false,\r\n  showErrorMessage: true,\r\n  customFieldSelectProps: {\r\n    showSearch: true\r\n  }, //after deletion\r\n\r\n  // renderField: (props) => <FieldCascader {...props} />,\r\n  // renderOperator: (props) => <FieldDropdown {...props} />,\r\n  // renderFunc: (props) => <FieldSelect {...props} />,\r\n};\r\n\r\nconst funcs = {\r\n  ...BasicFuncs\r\n};\r\n// delete funcs.valueSourcesInfo.field\r\nconst config = {\r\n  ...InitialConfig, conjunctions,\r\n  operators,\r\n  widgets,\r\n  types,\r\n  settings,\r\n  funcs,\r\n  fields: {}\r\n\r\n};\r\n\r\nlet functionValues = [];\r\n\r\nObject.keys(config['funcs']).map(x => {\r\n  functionValues.push(config['funcs'][x]['label'].toUpperCase());\r\n  config['funcs'][x]['label'] = \"IDS_\" + config['funcs'][x]['label'].toUpperCase()\r\n})\r\n\r\nclass FilterQueryBuilder extends Component {\r\n  constructor(props) {\r\n\r\n    super(props);\r\n    Object.keys(config.operators).map(x => {\r\n  \r\n        if(x==='select_any_in'||x==='select_not_any_in'){\r\n            delete config.operators[x];\r\n        }else{\r\n        config.operators[x]['label'] = this.props.intl.formatMessage({ id: \"IDS_\" + config.operators[x]['labelForFormat'].toUpperCase() }) \r\n      } \r\n      //  return  {[x]:config.operators[x]};\r\n    })\r\n\r\n    Object.keys(config['funcs']).map((x, i) => {\r\n      config['funcs'][x]['label'] = this.props.intl.formatMessage({ id: \"IDS_\" + functionValues[i] })\r\n      // config['funcs'][x]['label'] = this.props.intl.formatMessage({ id: config['funcs'][x]['label'] })\r\n    })\r\n\r\n    this.state = {\r\n      config: {\r\n        ...config, settings: {\r\n          ...config.settings, notLabel: this.props.intl.formatMessage({ id: \"IDS_NOT\" }),\r\n          valueLabel: this.props.intl.formatMessage({ id: \"IDS_VALUE\" }),\r\n          valuePlaceholder: this.props.intl.formatMessage({ id: \"IDS_VALUE\" }),\r\n          operatorLabel: this.props.intl.formatMessage({ id: \"IDS_OPERATOR\" }),\r\n          fieldPlaceholder: this.props.intl.formatMessage({ id: \"IDS_SELECTFIELD\" }),\r\n          operatorPlaceholder: this.props.intl.formatMessage({ id: \"IDS_SELECTOPERATOR\" }),\r\n          // deleteLabel: this.props.intl.formatMessage({id: \"\" }),\r\n          addGroupLabel: this.props.intl.formatMessage({ id: \"IDS_ADDGROUP\" }),\r\n          addRuleLabel: this.props.intl.formatMessage({ id: \"IDS_ADDRULE\" }),\r\n          addSubRuleLabel: this.props.intl.formatMessage({ id: \"IDS_ADDSUBRULE\" }),\r\n          //delGroupLabel: this.props.intl.formatMessage({id: \"\" }),\r\n          valueSourcesPopupTitle: this.props.intl.formatMessage({ id: \"IDS_SELECTVALUESOURCE\" }),\r\n          funcLabel: this.props.intl.formatMessage({ id: \"IDS_FUNCTION\" }),\r\n          valueSourcesInfo: {\r\n            field: { label: this.props.intl.formatMessage({ id: \"IDS_FIELD\" }), widget: 'field' },\r\n            func: { label: this.props.intl.formatMessage({ id: \"IDS_FUNCTION\" }), widget: 'func' },\r\n            value: { label: this.props.intl.formatMessage({ id: \"IDS_VALUE\" }) }\r\n          },\r\n\r\n          //delete alert\r\n          // removeRuleConfirmOptions: {\r\n          //   title: this.props.intl.formatMessage({ id: \"IDS_AREYOUSUREDELETETHISRULE\" }),\r\n          //   okText: this.props.intl.formatMessage({ id: \"IDS_YES\" }),\r\n          //   okType: \"danger\",\r\n          // },\r\n          // removeGroupConfirmOptions: {\r\n          //   title: this.props.intl.formatMessage({ id: \"IDS_AREYOUSUREDELETETHISGROUP\" }),\r\n          //   okText: this.props.intl.formatMessage({ id: \"IDS_YES\" }),\r\n          //   okType: \"danger\",\r\n          // }\r\n\r\n\r\n        }, conjunctions: {\r\n          AND: { ...config['conjunctions']['AND'], label: this.props.intl.formatMessage({ id: \"IDS_AND\" }) },\r\n          OR: { ...config['conjunctions']['OR'], label: this.props.intl.formatMessage({ id: \"IDS_OR\" }) }\r\n        },\r\n        //  operators: { ...Object.keys(config.operators).map(x =>) }\r\n        fields: this.props.fields//,settings:{...config.settings,notLabel:this.props.intl.formatMessage({id: \"NOT\"})}\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  componentDidUpdate(prevops) {\r\n    if(this.props.isRender){\r\n    if (this.props.fields !== this.state.config.fields) {      \r\n      let config = this.state.config;\r\n      config['fields'] = this.props.fields\r\n      this.setState({ config: config })\r\n    }\r\n  }\r\n  }\r\n\r\n  render() {\r\n    const emptyInitValue = { \"id\": uuid(), \"type\": \"group\" };\r\n    let conf = this.props.config ? this.props.config : this.state.config\r\n    let tree = checkTree(loadTree(emptyInitValue), conf)\r\n    return (\r\n      <React.Fragment>\r\n\r\n        <div >\r\n          <Query\r\n            {...this.state.config}\r\n            value={this.props.tree || tree}\r\n            // value={checkTree(loadTree(tree),conf)}\r\n            onChange={this.props.onChange}\r\n            renderBuilder={this.renderBuilder}\r\n\r\n          />\r\n          {!this.props.static  ?\r\n            <div className=\"d-flex justify-content-end mt-3\">\r\n              <Button className=\"btn-user btn-primary-blue\" onClick={() => this.props.handleExecuteClick()}>\r\n                <FontAwesomeIcon icon={faCalculator} /> { }\r\n                <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n              </Button>\r\n            </div>\r\n            : \"\"}\r\n          {!this.props.static ?\r\n            <hr /> : \"\"}\r\n          {!this.props.static ?\r\n            <LocalizationProvider language={this.props.userInfo.slanguagetypecode}>\r\n              <Grid\r\n                style={{\r\n                  maxHeight: \"400px\",\r\n                }}\r\n                onRowClick={this.props.onRowClick}\r\n                data={this.props.filterData.slice(this.props.skip, this.props.skip + this.props.take)}\r\n              >\r\n                {this.props.gridColumns.map(x => {\r\n\r\n                  return <GridColumn field={x.field} title={x.title} width={x.width} />\r\n\r\n                })}\r\n\r\n                {/* <GridColumn field=\"UnitPrice\" title=\"Price\" />\r\n              <GridColumn field=\"Discontinued\" title=\"Discontinued\" /> */}\r\n              </Grid>\r\n            </LocalizationProvider>\r\n            : \"\"}\r\n          {!this.props.static ?\r\n            <hr />\r\n            : \"\"}\r\n          {!this.props.static ?\r\n            <LocalizationProvider language={this.props.userInfo.slanguagetypecode}>\r\n              <Pager\r\n                skip={this.props.skip}\r\n                take={this.props.take}\r\n                type=\"input\"\r\n                previousNext={true}\r\n                total={this.props.filterData.length}\r\n                onPageChange={this.props.handlePageChange}\r\n              />\r\n            </LocalizationProvider>\r\n            : \"\"}\r\n          {/* {this.props.slideResult && this.props.slideResult.length > 0 ?\r\n          <AddFilteredPatient\r\n            slideList={this.props.slideList}\r\n            slideResult={this.props.slideResult}\r\n            controlMap={this.props.controlMap}\r\n            dataState={this.props.dataState}\r\n            dataStateChange={this.props.dataStateChange}\r\n          />\r\n\r\n          : \"\"} */}\r\n        </div>\r\n      </React.Fragment>\r\n\r\n    );\r\n  }\r\n\r\n  renderBuilder = (props) => (\r\n    <div className=\"query-builder-wrap kendo-theme\">\r\n      <Builder {...props}\r\n      />\r\n    </div>\r\n\r\n  );\r\n  // onChange = (immutableTree, config) => {\r\n  //   this.setState({ tree: immutableTree, config: config });\r\n\r\n  //   const jsonTree = QbUtils.getTree(immutableTree);\r\n  //   console.log(jsonTree);\r\n  // };\r\n\r\n}\r\nexport default injectIntl(FilterQueryBuilder);\r\n"]},"metadata":{},"sourceType":"module"}