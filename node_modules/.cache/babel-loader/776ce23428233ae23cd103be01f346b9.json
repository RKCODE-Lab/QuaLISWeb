{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { transactionStatus } from '../components/Enumeration';\nexport function openFTPConfigModal(userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"site/getSiteForFTP\", {\n      \"userinfo\": userInfo\n    }).then(response => {\n      const selectedRecord = {};\n      selectedRecord['nsitecode'] = response.data.length > 0 ? response.data[0].ndefaultstatus === transactionStatus.YES ? response.data[0].nsitecode : -1 : -1;\n      selectedRecord['siteValue'] = response.data.length > 0 ? response.data[0].ndefaultstatus === transactionStatus.YES ? [{\n        value: response.data[0].nsitecode,\n        label: response.data[0].ssitename,\n        item: response.data[0]\n      }] : [] : [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          operation: \"create\",\n          siteOptions: response.data,\n          selectedRecord,\n          ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n;\nexport function fetchFTPConfigByID(editParam) {\n  return function (dispatch) {\n    const url1 = rsapi.post(\"site/getSiteForFTP\", {\n      \"userinfo\": editParam.userInfo\n    });\n    const url2 = rsapi.post(\"ftpconfig/getActiveFTPConfigById\", {\n      [editParam.primaryKeyField]: editParam.primaryKeyValue,\n      \"userinfo\": editParam.userInfo\n    });\n    dispatch(initRequest(true));\n    Axios.all([url1, url2]).then(response => {\n      let selectedId = editParam.primaryKeyValue;\n      let selectedRecord = response[1].data;\n      selectedRecord['siteValue'] = {\n        value: response[1].data.nsitecode,\n        label: response[1].data.ssitename\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          selectedRecord,\n          operation: editParam.operation,\n          screenName: editParam.screenName,\n          siteOptions: response[0].data,\n          ncontrolcode: editParam.ncontrolCode,\n          inputparam: editParam.inputparam,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/FTPConfigAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","transactionStatus","openFTPConfigModal","userInfo","ncontrolcode","dispatch","post","then","response","selectedRecord","data","length","ndefaultstatus","YES","nsitecode","value","label","ssitename","item","type","payload","openModal","operation","siteOptions","loading","catch","error","status","message","warn","fetchFTPConfigByID","editParam","url1","url2","primaryKeyField","primaryKeyValue","all","selectedId","screenName","ncontrolCode","inputparam"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAAQC,cAAR,QAA6B,cAA7B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AAEA,OAAO,SAASC,kBAAT,CAA8BC,QAA9B,EAAuCC,YAAvC,EAAsD;AAEzD,SAAO,UAASC,QAAT,EAAkB;AACzBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAJ,IAAAA,KAAK,CAACU,IAAN,CAAW,oBAAX,EAAgC;AAAC,kBAAYH;AAAb,KAAhC,EACCI,IADD,CACMC,QAAQ,IAAG;AACb,YAAMC,cAAc,GAAC,EAArB;AACAA,MAAAA,cAAc,CAAC,WAAD,CAAd,GAA4BD,QAAQ,CAACE,IAAT,CAAcC,MAAd,GAAqB,CAArB,GACAH,QAAQ,CAACE,IAAT,CAAc,CAAd,EAAiBE,cAAjB,KAAkCX,iBAAiB,CAACY,GAApD,GACAL,QAAQ,CAACE,IAAT,CAAc,CAAd,EAAiBI,SADjB,GAEC,CAAC,CAHF,GAGI,CAAC,CAHjC;AAIAL,MAAAA,cAAc,CAAC,WAAD,CAAd,GAA4BD,QAAQ,CAACE,IAAT,CAAcC,MAAd,GAAqB,CAArB,GAAwBH,QAAQ,CAACE,IAAT,CAAc,CAAd,EAAiBE,cAAjB,KAAkCX,iBAAiB,CAACY,GAApD,GACxB,CAAC;AAACE,QAAAA,KAAK,EAACP,QAAQ,CAACE,IAAT,CAAc,CAAd,EAAiBI,SAAxB;AAAkCE,QAAAA,KAAK,EAACR,QAAQ,CAACE,IAAT,CAAc,CAAd,EAAiBO,SAAzD;AAAmEC,QAAAA,IAAI,EAACV,QAAQ,CAACE,IAAT,CAAc,CAAd;AAAxE,OAAD,CADwB,GAEvB,EAFD,GAEI,EAFhC;AAGAL,MAAAA,QAAQ,CAAC;AACLc,QAAAA,IAAI,EAAEtB,cADD;AACiBuB,QAAAA,OAAO,EAAC;AAC1BC,UAAAA,SAAS,EAAC,IADgB;AAE1BC,UAAAA,SAAS,EAAC,QAFgB;AAG1BC,UAAAA,WAAW,EAACf,QAAQ,CAACE,IAHK;AAI1BD,UAAAA,cAJ0B;AAIXL,UAAAA,YAJW;AAKzBoB,UAAAA,OAAO,EAAC;AALiB;AADzB,OAAD,CAAR;AASH,KAnBD,EAoBCC,KApBD,CAoBOC,KAAK,IAAI;AACZrB,MAAAA,QAAQ,CAAC;AAACc,QAAAA,IAAI,EAAEtB,cAAP;AAAuBuB,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAClB,QAAN,CAAemB,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7B,QAAAA,KAAK,CAAC4B,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGI;AACA9B,QAAAA,KAAK,CAAC+B,IAAN,CAAWH,KAAK,CAAClB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA5BD;AA6BH,GA/BG;AAgCH;AAAA;AAED,OAAO,SAASoB,kBAAT,CAA4BC,SAA5B,EAAsC;AAEzC,SAAO,UAAS1B,QAAT,EAAkB;AACzB,UAAM2B,IAAI,GAACpC,KAAK,CAACU,IAAN,CAAW,oBAAX,EAAgC;AAAC,kBAAYyB,SAAS,CAAC5B;AAAvB,KAAhC,CAAX;AACA,UAAM8B,IAAI,GAACrC,KAAK,CAACU,IAAN,CAAW,kCAAX,EACH;AAAE,OAACyB,SAAS,CAACG,eAAX,GAA6BH,SAAS,CAACI,eAAzC;AAAyD,kBAAWJ,SAAS,CAAC5B;AAA9E,KADG,CAAX;AAEAE,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACqC,GAAN,CAAU,CAACJ,IAAD,EAAMC,IAAN,CAAV,EACC1B,IADD,CACMC,QAAQ,IAAG;AACb,UAAI6B,UAAU,GAACN,SAAS,CAACI,eAAzB;AACA,UAAI1B,cAAc,GAACD,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAA/B;AACAD,MAAAA,cAAc,CAAC,WAAD,CAAd,GAA4B;AAACM,QAAAA,KAAK,EAACP,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBI,SAAxB;AAAkCE,QAAAA,KAAK,EAACR,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBO;AAAzD,OAA5B;AAEAZ,MAAAA,QAAQ,CAAC;AACLc,QAAAA,IAAI,EAAEtB,cADD;AACiBuB,QAAAA,OAAO,EAAC;AAC9BC,UAAAA,SAAS,EAAC,IADoB;AAE9BZ,UAAAA,cAF8B;AAG9Ba,UAAAA,SAAS,EAACS,SAAS,CAACT,SAHU;AAI9BgB,UAAAA,UAAU,EAACP,SAAS,CAACO,UAJS;AAK9Bf,UAAAA,WAAW,EAACf,QAAQ,CAAC,CAAD,CAAR,CAAYE,IALM;AAM9BN,UAAAA,YAAY,EAAC2B,SAAS,CAACQ,YANO;AAO9BC,UAAAA,UAAU,EAACT,SAAS,CAACS,UAPS;AAQ9BhB,UAAAA,OAAO,EAAC,KARsB;AAQhBa,UAAAA;AARgB;AADzB,OAAD,CAAR;AAWH,KAjBD,EAkBCZ,KAlBD,CAkBOC,KAAK,IAAI;AACZrB,MAAAA,QAAQ,CAAC;AAACc,QAAAA,IAAI,EAAEtB,cAAP;AAAuBuB,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAClB,QAAN,CAAemB,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7B,QAAAA,KAAK,CAAC4B,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGI;AACA9B,QAAAA,KAAK,CAAC+B,IAAN,CAAWH,KAAK,CAAClB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA1BD;AA2BH,GAhCG;AAiCH","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios'\r\nimport { initRequest } from './LoginAction';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function openFTPConfigModal  (userInfo,ncontrolcode)  {\r\n\r\n    return function(dispatch){\r\n    dispatch(initRequest(true));\r\n    rsapi.post(\"site/getSiteForFTP\",{\"userinfo\": userInfo})\r\n    .then(response=> { \r\n        const selectedRecord={};\r\n        selectedRecord['nsitecode']=response.data.length>0?\r\n                                    response.data[0].ndefaultstatus===transactionStatus.YES?\r\n                                    response.data[0].nsitecode\r\n                                    :-1:-1\r\n        selectedRecord['siteValue']=response.data.length>0? response.data[0].ndefaultstatus===transactionStatus.YES?  \r\n                                    [{value:response.data[0].nsitecode,label:response.data[0].ssitename,item:response.data[0]}]\r\n                                    :[]:[]\r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload:{\r\n                openModal:true,\r\n                operation:\"create\",\r\n                siteOptions:response.data,\r\n                selectedRecord,ncontrolcode    \r\n                ,loading:false           \r\n                }\r\n            }) \r\n    })\r\n    .catch(error => {\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n        if (error.response.status === 500){\r\n            toast.error(error.message);\r\n        } \r\n        else{               \r\n            toast.warn(error.response.data);\r\n        }         \r\n    })\r\n}\r\n};\r\n\r\nexport function fetchFTPConfigByID(editParam){\r\n\r\n    return function(dispatch){\r\n    const url1=rsapi.post(\"site/getSiteForFTP\",{\"userinfo\": editParam.userInfo})\r\n    const url2=rsapi.post(\"ftpconfig/getActiveFTPConfigById\",\r\n            { [editParam.primaryKeyField] :editParam.primaryKeyValue,\"userinfo\":editParam.userInfo} )\r\n    dispatch(initRequest(true));\r\n    Axios.all([url1,url2])\r\n    .then(response=> { \r\n        let selectedId=editParam.primaryKeyValue\r\n        let selectedRecord=response[1].data\r\n        selectedRecord['siteValue']={value:response[1].data.nsitecode,label:response[1].data.ssitename}\r\n        \r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload:{\r\n            openModal:true, \r\n            selectedRecord , \r\n            operation:editParam.operation,\r\n            screenName:editParam.screenName,\r\n            siteOptions:response[0].data,\r\n            ncontrolcode:editParam.ncontrolCode,\r\n            inputparam:editParam.inputparam,\r\n            loading:false,selectedId\r\n        }}) \r\n    })\r\n    .catch(error => {\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n        if (error.response.status === 500){\r\n            toast.error(error.message);\r\n        } \r\n        else{               \r\n            toast.warn(error.response.data);\r\n        }         \r\n    })\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}