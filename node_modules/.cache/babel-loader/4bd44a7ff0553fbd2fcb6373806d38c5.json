{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\data-grid\\\\SimpleGridWithSelection.jsx\";\nimport React from 'react';\nimport { AtTableWrap } from '../client-group.styles';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Grid, GridColumn as Column, GridNoRecords } from '@progress/kendo-react-grid';\nimport { process } from '@progress/kendo-data-query'; // import ReactTooltip from 'react-tooltip';\n\nimport { Card, Col, FormGroup, FormLabel, Row } from 'react-bootstrap';\nimport { FormControlStatic } from './data-grid.styles';\nimport { parse } from '@fortawesome/fontawesome-svg-core';\nimport SingleSelectionDataGrid from './SingleSelectionDataGrid';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { updateStore } from '../../actions';\nimport { connect } from 'react-redux';\n\nclass SimpleGridWithSelection extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n\n      if (this.props.hasSubChild && event.value === true) {\n        event.dataItem.expanded = !isExpanded;\n        this.setState({\n          showChild: false\n        });\n        this.detailBand(event);\n      } else {\n        event.dataItem.expanded = !isExpanded;\n        this.setState({\n          isExpanded\n        });\n      }\n\n      let childfalsearray = [];\n      childfalsearray.push(event.dataItem);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          change: false,\n          childfalsearray: childfalsearray,\n          checkFlag: \"2\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.detailBand = props => {\n      return /*#__PURE__*/React.createElement(Row, {\n        bsPrefix: \"margin_class\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }\n      }, this.props.hasSubChild ? /*#__PURE__*/React.createElement(SingleSelectionDataGrid, {\n        hasSubChild: this.props.hasSubChild,\n        subChildDataResult: this.props.subChildDataResult && this.props.subChildDataResult || [],\n        extractedColumnList: this.props.subChildColumnList,\n        subChildSelectionChange: this.props.subChildSelectionChange,\n        subChildList: props.dataItem ? this.props.subChildList[props.dataItem[this.props.subChildMappingField]] || [] : this.props.subChildList[props[this.props.subChildMappingField]] || [],\n        subChildHeaderSelectionChange: this.props.subChildHeaderSelectionChange,\n        subChildSelectAll: this.props.subChildSelectAll,\n        selectedsubcild: this.props.selectedsubcild,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }\n      }) : \"\"), \" \");\n    };\n\n    console.log('--->---1');\n    this.subChildColumnList = [{\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"ssamplearno\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    } // { \"idsName\": \"IDS_SAMPLENAME\", \"dataField\": \"Sample Name\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\n    //  { \"idsName\": \"IDS_CONTAINERTYPE\", \"dataField\": \"Container Type\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\n    ];\n    this.state = {\n      status: false\n    };\n    this.setState({\n      status: false\n    });\n  } // expandChange = (event) => {\n  //      const isExpanded =true\n  //     //     event.dataItem.expanded === undefined ?\n  //     //         event.dataItem.aggregates : event.dataItem.expanded;\n  //     // if (this.props.hasSubChild && event.value === true) {\n  //         event.dataItem.expanded = true;\n  //         this.props.childHandleExpandChange(event, this.props.dataState)\n  //     // }\n  //     // else {\n  //     //     event.dataItem.expanded = !isExpanded;\n  //          this.setState({ isExpanded });\n  //     // }\n  // }\n  // componentDidMount() {\n  //     // this.expandData1.bind(this);\n  //     this.expandData1=() => {\n  //         console.log(\"dash-->>\", this.foo12._data[0].expanded)\n  //         //this.foo.onExpandChange();\n  //         let expanded = this.foo12._data[0].dataItem.expanded\n  //         this.setState({ expanded: true })\n  //         this.foo12._data.map((item, i) => {\n  //             this.foo12._data[i].dataItem['expanded'] = {}\n  //             this.foo12._data[i].dataItem['expanded'] = true\n  //             this.detailBand(this.foo12._data[i]);\n  //         })\n  //     }\n  //  }      \n\n\n  componentDidMount() {\n    // this.expandData1.bind(this);\n    console.log('--->---2'); // this.expandData1();\n  }\n\n  expandData1() {\n    this.setState({\n      expanded: true\n    });\n\n    this.foo12._data.map((item, i) => {\n      if (this.foo12._data[i].dataItem['expanded'] === undefined || this.foo12._data[i].dataItem['expanded'] !== true) {\n        this.foo12._data[i].dataItem['expanded'] = true;\n      } else {\n        this.foo12._data[i].dataItem['expanded'] = false;\n      }\n\n      this.detailBand(this.foo12._data[i]);\n    });\n\n    if (this.props.Login.childfalsearray && this.props.Login.childfalsearray.length !== 0) {\n      this.props.Login.childfalsearray.map(item => {\n        item['expanded'] = true;\n        this.detailBand(item);\n      });\n    }\n  }\n\n  render() {\n    console.log(\"detailband\", \"14\");\n    return /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid //    data={this.props.childDataResult}\n    // ref={this.props.foo1}\n    , {\n      ref: foo12 => this.foo12 = foo12,\n      data: process(this.props.childList, {\n        skip: 0,\n        take: this.props.childList.length\n      }),\n      selectedField: \"selected\",\n      expandField: this.props.expandField ? this.props.expandField : false,\n      detail: this.props.hideDetailBand ? false : this.detailBand,\n      onExpandChange: this.expandChange,\n      onSelectionChange: this.props.childSelectionChange,\n      onHeaderSelectionChange: this.props.headerSelectionChange,\n      scrollable: this.props.scrollable,\n      selectable: {\n        enabled: true,\n        drag: false,\n        cell: false,\n        mode: 'multiple'\n      },\n      onRowClick: this.props.rowClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Column, {\n      field: \"selected\",\n      width: \"50px\",\n      title: this.props.title //   headerSelectionValue={this.props.selectAll}\n      ,\n      headerSelectionValue: Object.values(this.props.childList).every(dd => {\n        return dd.selected === true;\n      }) ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }\n    }), this.props.extractedColumnList.map((item, index) => /*#__PURE__*/React.createElement(Column, {\n      key: index,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        //data-for=\"tooltip-samplegrid-wrap\"\n        \"data-tip\": row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 33\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 56\n        }\n      }) : row[\"dataItem\"][item.dataField]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateStore\n})(injectIntl(SimpleGridWithSelection));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/data-grid/SimpleGridWithSelection.jsx"],"names":["React","AtTableWrap","FormattedMessage","injectIntl","Grid","GridColumn","Column","GridNoRecords","process","Card","Col","FormGroup","FormLabel","Row","FormControlStatic","parse","SingleSelectionDataGrid","DEFAULT_RETURN","updateStore","connect","SimpleGridWithSelection","Component","constructor","props","expandChange","event","isExpanded","dataItem","expanded","undefined","aggregates","hasSubChild","value","setState","showChild","detailBand","childfalsearray","push","updateInfo","typeName","data","change","checkFlag","subChildDataResult","subChildColumnList","subChildSelectionChange","subChildList","subChildMappingField","subChildHeaderSelectionChange","subChildSelectAll","selectedsubcild","console","log","state","status","componentDidMount","expandData1","foo12","_data","map","item","i","Login","length","render","childList","skip","take","expandField","hideDetailBand","childSelectionChange","headerSelectionChange","scrollable","enabled","drag","cell","mode","rowClick","title","Object","values","every","dd","selected","extractedColumnList","index","intl","formatMessage","id","idsName","row","dataField","isIdsField","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { AtTableWrap } from '../client-group.styles';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Grid, GridColumn as Column, GridNoRecords } from '@progress/kendo-react-grid';\r\nimport { process } from '@progress/kendo-data-query';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { Card, Col, FormGroup, FormLabel, Row } from 'react-bootstrap';\r\nimport { FormControlStatic } from './data-grid.styles';\r\nimport { parse } from '@fortawesome/fontawesome-svg-core';\r\nimport SingleSelectionDataGrid from './SingleSelectionDataGrid';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {\r\n    updateStore\r\n } from '../../actions';\r\nimport { connect } from 'react-redux';\r\n \r\nclass SimpleGridWithSelection extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log('--->---1')\r\n\r\n        this.subChildColumnList = [{ \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ssamplearno\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            // { \"idsName\": \"IDS_SAMPLENAME\", \"dataField\": \"Sample Name\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n            //  { \"idsName\": \"IDS_CONTAINERTYPE\", \"dataField\": \"Container Type\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n        ];\r\n        this.state = {\r\n            status: false\r\n        }\r\n            \r\n        this.setState({status:false})\r\n    }\r\n    // expandChange = (event) => {\r\n    //      const isExpanded =true\r\n    //     //     event.dataItem.expanded === undefined ?\r\n    //     //         event.dataItem.aggregates : event.dataItem.expanded;\r\n\r\n    //     // if (this.props.hasSubChild && event.value === true) {\r\n    //         event.dataItem.expanded = true;\r\n    //         this.props.childHandleExpandChange(event, this.props.dataState)\r\n    //     // }\r\n    //     // else {\r\n    //     //     event.dataItem.expanded = !isExpanded;\r\n    //          this.setState({ isExpanded });\r\n    //     // }\r\n    // }\r\n    // componentDidMount() {\r\n    //     // this.expandData1.bind(this);\r\n    //     this.expandData1=() => {\r\n    //         console.log(\"dash-->>\", this.foo12._data[0].expanded)\r\n    //         //this.foo.onExpandChange();\r\n    //         let expanded = this.foo12._data[0].dataItem.expanded\r\n    //         this.setState({ expanded: true })\r\n    //         this.foo12._data.map((item, i) => {\r\n    //             this.foo12._data[i].dataItem['expanded'] = {}\r\n    //             this.foo12._data[i].dataItem['expanded'] = true\r\n    //             this.detailBand(this.foo12._data[i]);\r\n             \r\n         \r\n    //         })\r\n    //     }\r\n \r\n    //  }      \r\n    componentDidMount() {\r\n        // this.expandData1.bind(this);\r\n        console.log('--->---2')\r\n       // this.expandData1();\r\n \r\n     }   \r\n    expandChange = (event) => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined ?\r\n                event.dataItem.aggregates : event.dataItem.expanded;\r\n\r\n        if (this.props.hasSubChild && event.value === true) {\r\n            event.dataItem.expanded = !isExpanded;\r\n            this.setState({showChild: false})\r\n\r\n            this.detailBand(event);\r\n\r\n\r\n        }\r\n        else {\r\n            event.dataItem.expanded = !isExpanded;\r\n            this.setState({ isExpanded });\r\n        }\r\n        let childfalsearray=[]\r\n         childfalsearray.push(event.dataItem)\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                change: false,\r\n                childfalsearray: childfalsearray,\r\n                checkFlag:\"2\"\r\n                \r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    expandData1() {\r\n       \r\n        this.setState({ expanded: true })\r\n            this.foo12._data.map((item, i) => {\r\n        \r\n                if ((this.foo12._data[i].dataItem['expanded'] === undefined) || (this.foo12._data[i].dataItem['expanded'] !== true)) {\r\n                    this.foo12._data[i].dataItem['expanded'] = true\r\n\r\n                }\r\n                else {\r\n                    this.foo12._data[i].dataItem['expanded'] = false\r\n\r\n                }\r\n                this.detailBand(this.foo12._data[i]);\r\n            \r\n                \r\n            \r\n        \r\n            })\r\n        \r\n            if (this.props.Login.childfalsearray&&this.props.Login.childfalsearray.length!==0) {\r\n                \r\n            this.props.Login.childfalsearray.map(item =>{\r\n                item['expanded'] = true \r\n                this.detailBand(item)})\r\n\r\n    }\r\n\r\n    }\r\n    detailBand = (props) => {\r\n        return (\r\n            <Row bsPrefix=\"margin_class\">\r\n                <Col md={12}>\r\n                    { this.props.hasSubChild ?\r\n                        <SingleSelectionDataGrid \r\n                                hasSubChild={this.props.hasSubChild}\r\n                                subChildDataResult={this.props.subChildDataResult && this.props.subChildDataResult || []}\r\n                                extractedColumnList={this.props.subChildColumnList}\r\n                                subChildSelectionChange={this.props.subChildSelectionChange}\r\n                            subChildList={props.dataItem ? this.props.subChildList[(props.dataItem[this.props.subChildMappingField])] || []\r\n                                : this.props.subChildList[(props[this.props.subChildMappingField])] || []}\r\n                                subChildHeaderSelectionChange={this.props.subChildHeaderSelectionChange}\r\n                            subChildSelectAll={this.props.subChildSelectAll}\r\n                            selectedsubcild={this.props.selectedsubcild}\r\n\r\n                            />\r\n                            \r\n                           :\"\" }\r\n                </Col> </Row>\r\n        )\r\n    }\r\n    render() {\r\n        console.log(\"detailband\",\"14\")\r\n        return (\r\n\r\n            <AtTableWrap className=\"at-list-table\">\r\n                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip-samplegrid-wrap\" /> */}\r\n                {/* <Tooltip openDelay={100} position=\"auto\" tooltipClassName=\"ad-tooltip\" anchorElement=\"element\" parentTitle={true}> */}\r\n                <Grid\r\n                //    data={this.props.childDataResult}\r\n                    // ref={this.props.foo1}\r\n                    ref={foo12 => this.foo12 = foo12}\r\n                    data={process(this.props.childList, { skip: 0, take: this.props.childList.length })}\r\n                    selectedField=\"selected\"\r\n                    expandField={this.props.expandField ? this.props.expandField : false}\r\n                    detail={this.props.hideDetailBand ? false : this.detailBand}\r\n                    onExpandChange={this.expandChange}\r\n                    onSelectionChange={this.props.childSelectionChange}\r\n                    onHeaderSelectionChange={this.props.headerSelectionChange}\r\n                    scrollable={this.props.scrollable}\r\n                    selectable={{\r\n                        enabled: true,\r\n                        drag: false,\r\n                        cell: false,\r\n                        mode: 'multiple'\r\n                      }} \r\n                     onRowClick={this.props.rowClick}>\r\n                    <Column\r\n                        field=\"selected\"\r\n                        width=\"50px\"\r\n                        title={this.props.title}\r\n                        //   headerSelectionValue={this.props.selectAll}\r\n                        headerSelectionValue={Object.values(this.props.childList).every((dd) => {\r\n                            return dd.selected === true\r\n                        }) ? true : false\r\n                        }\r\n                    />\r\n                    {/* <Column type='checkbox' width='50'></Column> */}\r\n\r\n                    {this.props.extractedColumnList.map((item, index) =>\r\n                        <Column key={index}\r\n                            title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                            cell={(row) => (\r\n                                <td \r\n                                //data-for=\"tooltip-samplegrid-wrap\"\r\n                                    data-tip={row[\"dataItem\"][item.dataField]}>\r\n                                    {/* title={row[\"dataItem\"][item.dataField]}> */}\r\n                                    {item.isIdsField ? <FormattedMessage id={row[\"dataItem\"][item.dataField]} defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                        : row[\"dataItem\"][item.dataField]}\r\n                                </td>)}\r\n                        />\r\n                    )}\r\n                </Grid>\r\n                {/* </Tooltip>           */}\r\n            </AtTableWrap>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps,{updateStore})(injectIntl(SimpleGridWithSelection));\r\n"]},"metadata":{},"sourceType":"module"}