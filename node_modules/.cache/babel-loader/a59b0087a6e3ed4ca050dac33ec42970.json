{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\nimport { sortData, searchData, constructOptionList, fillRecordBasedOnCheckBoxSelection } from '../components/CommonScript'; //getComboLabelValue,, searchData\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nexport function initialcombochangeget(nuserrolecode, data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/userscreenhide/getUserScreenhidecomboo\", {\n      nuserrolecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      const masterData = { ...data,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getUserScreenhideComboService(screenName, operation, userInfo, selectedcombo, selectedcombouser, ncontrolCode) {\n  return function (dispatch) {\n    if (operation === \"create\") {\n      let urlArray = [];\n      let AvaliableScreen = [];\n      const ScreenRightsAvaliablescreen = rsapi.post(\"userscreenhide/getAvailableUserScreenhide\", {\n        \"nuserrolecode\": selectedcombo[\"nuserrolecode\"] ? selectedcombo[\"nuserrolecode\"].value : null,\n        \"nusercode\": selectedcombouser[\"nusercode\"] ? selectedcombouser[\"nusercode\"].value : null,\n        \"userinfo\": userInfo\n      });\n      urlArray = [ScreenRightsAvaliablescreen];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        // selectedRecord = response[0].data;\n        AvaliableScreen = response[0].data;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation,\n            screenName,\n            AvaliableScreen,\n            openModal: true,\n            selectedcombo,\n            ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function comboChangeUserRoleScreenRightsHide(selectedcombo, selectedcombouser, data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/userscreenhide/createUserScreenhide\", {\n      nuserrolecode: selectedcombo['nuserrolecode'].value,\n      nusercode: selectedcombouser[\"nusercode\"].value,\n      \"userinfo\": userInfo\n    }).then(response => {\n      const masterData = { ...data,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          skip: 0,\n          take: 20\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getUserScreenhideDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    //console.log(\"inputData:\", inputData, isServiceRequired);\n    if (isServiceRequired) {\n      dispatch(initRequest(true));\n      console.log('rrfggg', inputData);\n      return rsapi.post(\"userscreenhide/getSingleSelectUserScreenhide\", {\n        \"screenrights\": inputData.SelectedScreenRights,\n        \"SelectedUserName\": inputData.masterData.SelectedUserName.nusercode,\n        \"userinfo\": inputData.userinfo,\n        \"nuserrolescreencode\": inputData.nusersrolehidescreencode\n      }).then(response => {\n        let dataState = inputData.dataState;\n\n        if (response.data.ControlRights.length < dataState.skip) {\n          dataState['skip'] = 0;\n        }\n\n        let masterData = inputData.masterData; // sortData(masterData);\n\n        let controlRights = [];\n        controlRights.push(...response.data.ControlRights);\n        sortData(controlRights); // if ( inputData[\"checkBoxOperation\"] === 1 || inputData[\"checkBoxOperation\"] === 6){\n        //     controlRights.push(...masterData[\"ControlRights\"]);\n        // }\n\n        masterData[\"ControlRights\"] = controlRights;\n        masterData[\"SelectedScreenRights\"] = inputData.SelectedScreenRights; //sortData(masterData);\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            dataState,\n            skip: inputData.skip,\n            take: inputData.take\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response\n          }));\n        }\n      });\n    } else {\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.SelectedScreenRights, inputData.childTabsKey, inputData.checkBoxOperation, \"nformcode\", inputData.removeElementFromArray);\n      let masterData = { ...inputData.masterData,\n        SelectedScreenRights: inputData.SelectedScreenRights\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }\n  };\n}\nexport function ListSwitchUpdate(inputParam, data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let Avaliabledate = [];\n    rsapi.post(\"/userscreenhide/updateListControlRights\", {\n      \"needrights\": inputParam.needrights,\n      \"nusersrolehidescreencode\": inputParam.nusersrolehidescreencode,\n      'nuserrolecode': inputParam.nuserrolecode,\n      \"nusercode\": inputParam.nusercodemain,\n      \"userinfo\": userInfo,\n      \"SelectedScreenRights\": data.SelectedScreenRights\n    }).then(response => {\n      //   let masterData = inputData.masterData;\n      const masterData = { ...data,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData); // sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/actions/UserRoleScreenHideAction.js"],"names":["rsapi","DEFAULT_RETURN","REQUEST_FAILURE","sortData","searchData","constructOptionList","fillRecordBasedOnCheckBoxSelection","toast","Axios","initRequest","intl","initialcombochangeget","nuserrolecode","data","userInfo","dispatch","post","then","response","masterData","searchedData","undefined","type","payload","loading","catch","error","formatMessage","id","message","getUserScreenhideComboService","screenName","operation","selectedcombo","selectedcombouser","ncontrolCode","urlArray","AvaliableScreen","ScreenRightsAvaliablescreen","value","all","openModal","status","warn","comboChangeUserRoleScreenRightsHide","nusercode","skip","take","getUserScreenhideDetail","inputData","isServiceRequired","console","log","SelectedScreenRights","SelectedUserName","userinfo","nusersrolehidescreencode","dataState","ControlRights","length","controlRights","push","childTabsKey","checkBoxOperation","removeElementFromArray","ListSwitchUpdate","inputParam","Avaliabledate","needrights","nusercodemain"],"mappings":"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","sourcesContent":["\r\nimport rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\r\nimport { sortData, searchData, constructOptionList, fillRecordBasedOnCheckBoxSelection } from '../components/CommonScript'//getComboLabelValue,, searchData\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nexport function initialcombochangeget(nuserrolecode,data,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/userscreenhide/getUserScreenhidecomboo\", { nuserrolecode,\"userinfo\": userInfo})\r\n            .then(response => {\r\n                const masterData = {...data,...response.data ,searchedData: undefined}\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,loading:false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\nexport function getUserScreenhideComboService(screenName, operation, userInfo, selectedcombo,selectedcombouser, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if (operation === \"create\") {\r\n            let urlArray = [];\r\n            let AvaliableScreen = [];\r\n            const ScreenRightsAvaliablescreen = rsapi.post(\"userscreenhide/getAvailableUserScreenhide\",\r\n             { \"nuserrolecode\": selectedcombo[\"nuserrolecode\"] ?\r\n              selectedcombo[\"nuserrolecode\"].value : null, \"nusercode\": selectedcombouser[\"nusercode\"] ?\r\n              selectedcombouser[\"nusercode\"].value : null, \"userinfo\": userInfo });\r\n            urlArray = [ScreenRightsAvaliablescreen];\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    // selectedRecord = response[0].data;\r\n                    AvaliableScreen = response[0].data;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            operation, screenName, AvaliableScreen, openModal: true, selectedcombo,\r\n                            ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function comboChangeUserRoleScreenRightsHide(selectedcombo,selectedcombouser, data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/userscreenhide/createUserScreenhide\", { nuserrolecode: selectedcombo['nuserrolecode'].value,nusercode: selectedcombouser[\"nusercode\"].value, \"userinfo\": userInfo })\r\n            .then(response => {\r\n                const masterData = { ...data, ...response.data ,searchedData: undefined}\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false,skip:0,take:20\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function getUserScreenhideDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        //console.log(\"inputData:\", inputData, isServiceRequired);\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            console.log('rrfggg',inputData)\r\n            return rsapi.post(\"userscreenhide/getSingleSelectUserScreenhide\", {\r\n                \"screenrights\": inputData.SelectedScreenRights,\r\n              \"SelectedUserName\":inputData.masterData.SelectedUserName.nusercode,\r\n                \"userinfo\": inputData.userinfo,\r\n                \"nuserrolescreencode\":inputData.nusersrolehidescreencode\r\n            })\r\n                .then(response => {\r\n                    let dataState = inputData.dataState\r\n                    if (response.data.ControlRights.length < dataState.skip) {\r\n                        dataState['skip']=0\r\n                    }\r\n                    let masterData = inputData.masterData;\r\n                   // sortData(masterData);\r\n                    let controlRights = [];\r\n                  \r\n                    controlRights.push(...response.data.ControlRights);\r\n                    sortData(controlRights);\r\n                    // if ( inputData[\"checkBoxOperation\"] === 1 || inputData[\"checkBoxOperation\"] === 6){\r\n                    //     controlRights.push(...masterData[\"ControlRights\"]);\r\n                    // }\r\n                    masterData[\"ControlRights\"] = controlRights;\r\n                    masterData[\"SelectedScreenRights\"] = inputData.SelectedScreenRights;\r\n                    //sortData(masterData);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, dataState,skip:inputData.skip,take:inputData.take } });\r\n                }).catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response }));\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.SelectedScreenRights, inputData.childTabsKey, inputData.checkBoxOperation, \"nformcode\",inputData.removeElementFromArray);\r\n            let masterData={...inputData.masterData,SelectedScreenRights:inputData.SelectedScreenRights}\r\n            dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, dataState: undefined } });\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function ListSwitchUpdate(inputParam,data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let Avaliabledate = [];\r\n        rsapi.post(\"/userscreenhide/updateListControlRights\", {\"needrights\":inputParam.needrights,\r\n        \"nusersrolehidescreencode\":inputParam.nusersrolehidescreencode,'nuserrolecode': inputParam.nuserrolecode,\r\n        \"nusercode\": inputParam.nusercodemain,\"userinfo\": userInfo,\"SelectedScreenRights\":data.SelectedScreenRights  })\r\n            .then(response => {\r\n             //   let masterData = inputData.masterData;\r\n             const masterData = { ...data, ...response.data ,searchedData: undefined}\r\n            \r\n             sortData(masterData);\r\n               // sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}