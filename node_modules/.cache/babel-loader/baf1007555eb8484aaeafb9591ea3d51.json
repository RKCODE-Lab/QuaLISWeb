{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboard\\\\SqlBuilder.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faPencilAlt, faTasks } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport AddQuery from './AddQuery';\nimport AddParameter from './AddParameter';\nimport QueryTypeFilter from './QueryTypeFilter';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail, getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery, comboColumnValues, getColumnNamesByTableName, getTablesName, getModuleFormName } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus, queryTypeFilter, tableType } from '../../components/Enumeration';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport rsapi from '../../rsapi';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { Affix } from 'rsuite';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport ReactTooltip from 'react-tooltip';\n\nclass SQLBuilder extends Component {\n  constructor(props) {\n    super(props);\n\n    this.userQueryDataStateChange = event => {\n      this.setState({\n        dataStateUserQuery: event.dataState\n      });\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(\"SQLQuery\", this.props.Login.masterData.SelectedSQLQuery, \"delete\", deleteId));\n    };\n\n    this.getValidationForEdit = (screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode) => {\n      rsapi.post(\"sqlquery/getValidationForEdit\", {\n        [primaryKeyName]: primaryKeyValue,\n        \"userinfo\": userInfo\n      }).then(response => {\n        if (response.data === \"IDS_SUCCESS\") {\n          this.props.getSQLQueryComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode);\n        } else if (response.data === \"IDS_QUERYUSEDINDASHBOARD\") {\n          this.confirmAlertForEdit(ncontrolCode);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: response.data\n          }));\n        }\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(this.props.intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    };\n\n    this.confirmAlertForEdit = editId => {\n      this.confirmMessage.confirm(this.props.intl.formatMessage({\n        id: \"IDS_CONFIRMATION\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CONFIRMATION\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_QUERYUSEDINDASHBOARD\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), // () => this.performBatchAction(), \n      () => this.props.getSQLQueryComboService(this.state.queryTypeName, \"update\", \"nsqlquerycode\", this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode, this.props.Login.masterData, this.props.Login.userInfo, //this.state.selectedcombo[\"nquerytypecode\"].value, \n      this.props.Login.masterData.SelectedQueryType.nquerytypecode, editId), undefined, () => this.closeAlert());\n    };\n\n    this.closeAlert = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlertForEdit: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\"; //    const inputParam = {\n      //        inputData: { \"userinfo\": this.props.Login.userInfo, \n      //                    nquerytypecode:this.state.selectedRecord[\"nquerytypecode\"] ? \n      //                                   this.state.selectedRecord[\"nquerytypecode\"].value : 0\n      //                 },        \n      //        userInfo: this.props.Login.userInfo,\n      //        classUrl: \"sqlquery\",\n      //        methodUrl: \"SQLQuery\",\n      //        displayName: \"IDS_SQLBUILDER\",\n      //    };\n      //this.props.callService(inputParam);\n\n      const nquerytypecode = this.state.selectedRecord[\"nquerytypecode\"] ? this.state.selectedRecord[\"nquerytypecode\"].value : this.props.Login.masterData.SelectedQueryType.nquerytypecode;\n      this.props.comboChangeQueryType(nquerytypecode, this.props.Login.masterData, this.props.Login.userInfo);\n    };\n\n    this.handlePageChange = event => {\n      this.setState({\n        skip: event.skip,\n        take: event.take\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        if (fieldName === \"ncharttypecode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        }\n\n        if (fieldName === \"ntabletypecode\" || fieldName === \"nformcode\") {\n          const selectedTableType = this.state.selectedTableType || {};\n          selectedTableType[fieldName] = comboData;\n          this.setState({\n            selectedTableType\n          });\n          const selectedRecord = this.state.selectedRecord || {}; //  this.state.ntableTypeCode=comboData.value;\n\n          if (fieldName === \"ntabletypecode\") {\n            if (comboData.value === tableType.ALL) {\n              selectedRecord[\"nformcode\"] = \"\";\n              this.props.getTablesName(selectedTableType[\"ntabletypecode\"].value, 0);\n            } else {\n              const updateInfor = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  tableName: []\n                }\n              };\n              this.props.updateStore(updateInfor);\n              this.setState({\n                moduleFormName: []\n              });\n              selectedRecord[\"nformcode\"] = \"\";\n              this.props.getModuleFormName(comboData.value, this.props.Login.userInfo);\n            }\n          }\n\n          if (fieldName === \"nformcode\") {\n            selectedRecord[fieldName] = comboData;\n            this.setState({\n              selectedRecord\n            }); //this.state.nFormCode=comboData.value;\n            //this.getTablesName(selectedRecord[\"ntabletypecode\"].value ,selectedRecord[\"nformcode\"].value)\n\n            this.props.getTablesName(selectedTableType[\"ntabletypecode\"].value, selectedRecord[\"nformcode\"].value);\n          }\n        } else {\n          const selectedcombo = this.state.selectedcombo || {};\n          selectedcombo[fieldName] = comboData;\n          this.setState({\n            selectedcombo\n          });\n        }\n\n        if (fieldName === \"nquerytypecode\") {\n          this.searchRef.current.value = \"\"; // this.props.comboChangeQueryType(comboData.value, this.props.Login.masterData, this.props.Login.userInfo);\n\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[fieldName] = comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord: selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      // const selectedRecord = this.state.selectedRecord || {};\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let showExecute = this.props.Login.showExecute;\n      let showParam = this.props.Login.showParam;\n      let showValidate = this.props.Login.showValidate;\n      let showSave = this.props.Login.showSave;\n      let screenName = this.props.Login.screenName;\n      let operation = this.props.Login.operation;\n      let slideOperation = this.props.Login.slideOperation;\n      let parentPopUpSize = this.props.Login.parentPopUpSize;\n      let resultStatus = this.props.Login.resultStatus;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord[\"agree\"] = transactionStatus.NO;\n\n          if (this.state.param.size > 0) {\n            showExecute = true;\n            showSave = true;\n          } else {\n            showExecute = false;\n            showSave = false;\n          }\n\n          parentPopUpSize = \"xl\";\n        }\n      } else {\n        if (this.props.Login.screenName === \"Parameter for Results\" || this.props.Login.screenName === \"Results\") {\n          if (this.props.Login.screenFlag === \"showQuery\") {\n            openModal = true;\n            let queryTypeCode = this.props.Login.masterData.SelectedQueryType.nquerytypecode;\n\n            if (queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY) {\n              screenName = this.props.intl.formatMessage({\n                id: \"IDS_LIMSDASHBOARDQUERY\"\n              });\n            } else if (queryTypeCode === queryTypeFilter.LIMSALERTQUERY) {\n              screenName = this.props.intl.formatMessage({\n                id: \"IDS_LIMSALERTQUERY\"\n              });\n            } else if (queryTypeCode === queryTypeFilter.LIMSBARCODEQUERY) {\n              screenName = this.props.intl.formatMessage({\n                id: \"IDS_LIMSBARCODEQUERY\"\n              });\n            } else if (queryTypeCode === queryTypeFilter.LIMSGENERALQUERY) {\n              screenName = this.props.intl.formatMessage({\n                id: \"IDS_LIMSGENERALQUERY\"\n              });\n            } else {\n              screenName = this.props.intl.formatMessage({\n                id: \"IDS_LIMSFILTERQUERY\"\n              });\n            }\n\n            showSave = false;\n          } else {\n            selectedRecord = {};\n            openModal = false;\n            showExecute = false;\n          }\n\n          showParam = false;\n          showValidate = true;\n          operation = slideOperation;\n          slideOperation = \"\";\n          resultStatus = \"\";\n        } else {\n          openModal = false;\n          selectedRecord = {};\n          showExecute = false;\n        }\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          showExecute,\n          showParam,\n          operation,\n          screenName,\n          showSave,\n          showValidate,\n          parentPopUpSize,\n          resultStatus,\n          showConfirmAlertForEdit: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.upDateComboboxValue = i => Value => {\n      if (Value != null) {\n        // let parameters = [...this.state.parameters]\n        // parameters[i].textValue = Value\n        // this.setState({\n        //     parameters: parameters\n        // })\n        const paramMap = this.state.param || new Map();\n        paramMap.get(i).textValue = Value;\n        this.setState({\n          param: paramMap\n        });\n      }\n    };\n\n    this.handleDateChange = i => date => {\n      // let parameters = [...this.state.parameters]\n      // parameters[i].Datetime = date\n      // this.setState({\n      //     parameters: parameters\n      // })\n      const paramMap = this.state.param || new Map();\n      paramMap.get(i).Datetime = date;\n      this.setState({\n        param: paramMap\n      });\n    };\n\n    this.handleText = i => event => {\n      //let parameters = [...this.state.parameters];\n      //parameters[i].textValue = e.target.value;\n      //this.setState({parameters: parameters});\n      // console.log(parameters)\n      const paramMap = this.state.param || new Map();\n      paramMap.get(event.target.name).textValue = event.target.value;\n      this.setState({\n        param: paramMap\n      });\n    };\n\n    this.executeQuery = (methodUrl, selectedRecord, operation, ncontrolCode) => {\n      const sqlQuery = selectedRecord.ssqlquery;\n\n      if (sqlQuery.length > 10) {\n        if (sqlQuery.toUpperCase().indexOf('INSERT') >= 0 || sqlQuery.toUpperCase().indexOf('UPDATE') >= 0 || sqlQuery.toUpperCase().indexOf('DELETE') >= 0 || sqlQuery.toUpperCase().indexOf('TRUNCATE') >= 0 || sqlQuery.toUpperCase().indexOf('CREATE') >= 0 || sqlQuery.toUpperCase().indexOf('ALTER') >= 0 || sqlQuery.toUpperCase().indexOf('DROP') >= 0) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CANNOTDATAMANIPULATION\"\n          }));\n        } else {\n          if (sqlQuery.indexOf('P$') > 0) {\n            let newQuery = sqlQuery;\n            const paramMap = new Map();\n\n            while (newQuery.indexOf(\"P$\") !== -1) {\n              const paramLabelStartIndex = newQuery.indexOf(\"P$\");\n              const paramLabelEndIndex = newQuery.indexOf(\"$P\");\n              const paramLabel = newQuery.substring(paramLabelStartIndex + 2, paramLabelEndIndex);\n\n              if (paramLabel.indexOf(\"T$\") !== -1) {\n                let displayName = \"\";\n                let localParam = \"\";\n                let tableName = \"\";\n                newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\n\n                if (paramLabel.indexOf(\"D$\") !== -1) {\n                  localParam = paramLabel.substring(0, paramLabel.indexOf('D$'));\n                  displayName = paramLabel.substring(paramLabel.indexOf('D$') + 2, paramLabel.indexOf('T$')); //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\n\n                  tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\n                } else {\n                  localParam = paramLabel.substring(0, paramLabel.indexOf('T$')); // tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\n\n                  tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\n                }\n\n                if (localParam.startsWith('d') || localParam.startsWith('D')) {\n                  paramMap.set(\"P$\" + localParam + \"$P\", {\n                    value: 'DateTimePicker',\n                    lableName: localParam,\n                    //ID: param.length, \n                    Datetime: new Date(),\n                    textValue: '',\n                    TableName: tableName,\n                    DisplayParam: displayName,\n                    actuallableName: localParam.substring(1, localParam.length)\n                  });\n                } else {\n                  paramMap.set(\"P$\" + localParam + \"$P\", {\n                    value: 'TextBox1',\n                    lableName: localParam,\n                    //ID: param.length, \n                    textValue: '',\n                    TableName: tableName,\n                    DisplayParam: displayName,\n                    actuallableName: localParam.substring(1, localParam.length)\n                  });\n                }\n              } else {\n                newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\n\n                if (paramLabel.startsWith('d') || paramLabel.startsWith('D')) {\n                  paramMap.set(\"P$\" + paramLabel + \"$P\", {\n                    value: 'DateTimePicker',\n                    lableName: paramLabel,\n                    actuallableName: paramLabel.substring(1, paramLabel.length),\n                    //ID: param.length, \n                    Datetime: new Date()\n                  });\n                } else {\n                  paramMap.set(\"P$\" + paramLabel + \"$P\", {\n                    value: 'TextBox1',\n                    lableName: paramLabel,\n                    //ID: param.length, \n                    textValue: '',\n                    TableName: \"\",\n                    DisplayParam: \"\",\n                    actuallableName: paramLabel.substring(1, paramLabel.length)\n                  });\n                }\n              }\n            }\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                screenName: \"Parameter for Results\",\n                openModal: true,\n                showExecute: true,\n                showParam: true,\n                showValidate: false,\n                showSave: false,\n                operation: \"create\",\n                slideOperation: \"\",\n                slideResult: [],\n                slideList: [],\n                screenFlag: \"showParam\",\n                param: paramMap,\n                //param: param, Dparam: Dparam, TBLName: TBLName,\n                parentPopUpSize: \"xl\"\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            //query without parameters      \n            const inputParam = {\n              query: selectedRecord.ssqlquery.trim(),\n              screenName: \"Results\",\n              openModal: true,\n              showExecute: false,\n              showParam: true,\n              showValidate: false,\n              showSave: false,\n              noSave: true,\n              operation: \"view\",\n              slideOperation: \"\",\n              slideResult: [],\n              slideList: [],\n              //screenFlag: \"showParam\",\n              screenFlag: \"NoParam\",\n              parentPopUpSize: \"xl\",\n              param: new Map()\n            };\n            this.props.executeUserQuery(inputParam);\n          }\n        }\n      }\n    };\n\n    this.deleteRecord = (methodUrl, selectedRecord, operation, ncontrolCode) => {\n      const postParam = {\n        inputListName: \"SQLQuery\",\n        selectedObject: \"SelectedSQLQuery\",\n        primaryKeyField: \"nsqlquerycode\",\n        primaryKeyValue: this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode,\n        fetchUrl: \"sqlquery/getSQLQuery\",\n        fecthInputObject: {\n          userInfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl,\n        postParam,\n        inputData: {\n          [methodUrl.toLowerCase()]: selectedRecord,\n          \"userinfo\": this.props.Login.userInfo,\n          \"sqlquery\": this.props.Login.masterData.SelectedSQLQuery\n        },\n        operation\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"sqlquery\",\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onExecuteClick = () => {\n      // let paramVal;\n      let tempQuery = \"\";\n      let paramFlag = true;\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (this.props.Login.screenName === \"Parameter for Results\" && this.state.param.size > 0) {\n        if (selectedRecord != null && selectedRecord.ssqlquery != null && selectedRecord.ssqlquery.length > 0) {\n          tempQuery = selectedRecord.ssqlquery;\n        } else {\n          tempQuery = this.props.Login.masterData.SelectedSQLQuery.ssqlquery;\n        }\n\n        const paramMap = this.state.param || new Map();\n\n        for (let parameterMap of paramMap.entries()) {\n          const parameter = parameterMap[0];\n          const parameterDetail = parameterMap[1];\n          let paramVal = \"\"; //console.log(\"para detail:\", parameterDetail);\n\n          if (parameterDetail.lableName.toUpperCase().startsWith('D')) {\n            if (parameterDetail.Datetime !== null) {\n              paramVal = parameterDetail.Datetime.getFullYear() + \"-\";\n\n              if (parameterDetail.Datetime.getMonth().toString().length > 1) {\n                paramVal = paramVal + parseInt(parameterDetail.Datetime.getMonth() + 1) + \"-\";\n              } else {\n                paramVal = paramVal + \"0\" + parseInt(parameterDetail.Datetime.getMonth() + 1) + \"-\";\n              }\n\n              if (parameterDetail.Datetime.getDate().toString().length > 1) {\n                paramVal = paramVal + parameterDetail.Datetime.getDate();\n              } else {\n                paramVal = paramVal + \"0\" + parameterDetail.Datetime.getDate();\n              }\n            }\n\n            if (paramVal === undefined) {\n              paramFlag = false;\n              tempQuery = tempQuery.replaceAll(parameter, null);\n            } else if (paramVal.trim().length > 0) {\n              //tempQuery = tempQuery.replace(parameter, \"P#\" + paramVal + \"$P\");\n              tempQuery = tempQuery.replaceAll(parameter, \"'\" + paramVal + \"'\");\n            } else {\n              paramFlag = false;\n            }\n          } else {\n            paramVal = parameterDetail.textValue;\n\n            if (paramVal !== \"\") {\n              if (parameterDetail.lableName.toUpperCase().startsWith('S')) {\n                if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'D$') > 0) {\n                  tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim() + 'D$' + parameterDetail.DisplayParam + 'T$' + parameterDetail.TableName + '$P', \"'\" + paramVal + \"'\");\n                } else if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'T$') > 0) {\n                  tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim() + 'T$' + parameterDetail.TableName + '$P', \"'\" + paramVal + \"'\");\n                } else {\n                  tempQuery = tempQuery.replaceAll(parameter, \"'\" + paramVal + \"'\");\n                }\n              } else {\n                if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'D$') > 0) {\n                  tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim() + 'D$' + parameterDetail.DisplayParam.trim() + 'T$' + parameterDetail.TableName + '$P', paramVal);\n                } else if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'T$') > 0) {\n                  tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim() + 'T$' + parameterDetail.TableName + '$P', paramVal);\n                } else {\n                  tempQuery = tempQuery.replaceAll(parameter, paramVal);\n                }\n              }\n            } else {\n              paramFlag = false;\n            }\n          }\n        }\n\n        if (paramFlag === true) {\n          //console.log(\"temp:\", tempQuery);\n          const inputParam = {\n            slideOperation: this.props.Login.slideOperation,\n            screenFlag: this.props.Login.screenFlag,\n            query: tempQuery.trim(),\n            userInfo: this.props.Login.userInfo,\n            data: {}\n          };\n          this.props.executeUserQuery(inputParam); //this.props.executeUserQuery(tempQuery.trim(), this.props.Login.screenFlag, this.props.Login.slideOperation, this.props.Login.userInfo);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_ENTERPAREMETRS\"\n          }));\n        }\n      } else {\n        if (selectedRecord.ssqlquery !== null && selectedRecord.ssqlquery.length > 0) {\n          const sqlQuery = selectedRecord.ssqlquery;\n\n          if (sqlQuery.toUpperCase().indexOf('INSERT') >= 0 || sqlQuery.toUpperCase().indexOf('UPDATE') >= 0 || sqlQuery.toUpperCase().indexOf('DELETE') >= 0 || sqlQuery.toUpperCase().indexOf('TRUNCATE') >= 0 || sqlQuery.toUpperCase().indexOf('CREATE') >= 0 || sqlQuery.toUpperCase().indexOf('ALTER') >= 0 || sqlQuery.toUpperCase().indexOf('DROP') >= 0) {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_CANNOTDATAMANIPULATION\"\n            }));\n          } else {\n            if (sqlQuery.indexOf('P$') > 0) {\n              let newQuery = sqlQuery;\n              const paramMap = new Map();\n\n              while (newQuery.indexOf(\"P$\") !== -1) {\n                const paramLabelStartIndex = newQuery.indexOf(\"P$\");\n                const paramLabelEndIndex = newQuery.indexOf(\"$P\");\n                const paramLabel = newQuery.substring(paramLabelStartIndex + 2, paramLabelEndIndex);\n\n                if (paramLabel.indexOf(\"T$\") !== -1) {\n                  let displayName = \"\";\n                  let localParam = \"\";\n                  let tableName = \"\";\n                  newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\n\n                  if (paramLabel.indexOf(\"D$\") !== -1) {\n                    localParam = paramLabel.substring(0, paramLabel.indexOf('D$'));\n                    displayName = paramLabel.substring(paramLabel.indexOf('D$') + 2, paramLabel.indexOf('T$')); //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\n\n                    tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\n                  } else {\n                    localParam = paramLabel.substring(0, paramLabel.indexOf('T$')); //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\n\n                    tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\n                  }\n\n                  if (localParam.startsWith('d') || localParam.startsWith('D')) {\n                    paramMap.set(\"P$\" + localParam + \"$P\", {\n                      value: 'DateTimePicker',\n                      lableName: localParam,\n                      //ID: param.length, \n                      Datetime: new Date(),\n                      textValue: '',\n                      TableName: tableName,\n                      DisplayParam: displayName,\n                      actuallableName: localParam.substring(1, localParam.length)\n                    });\n                  } else {\n                    paramMap.set(\"P$\" + localParam + \"$P\", {\n                      value: 'TextBox1',\n                      lableName: localParam,\n                      //ID: param.length, \n                      textValue: '',\n                      TableName: tableName,\n                      DisplayParam: displayName,\n                      actuallableName: localParam.substring(1, localParam.length)\n                    });\n                  }\n                } else {\n                  newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\n\n                  if (paramLabel.startsWith('d') || paramLabel.startsWith('D')) {\n                    paramMap.set(\"P$\" + paramLabel + \"$P\", {\n                      value: 'DateTimePicker',\n                      lableName: paramLabel,\n                      actuallableName: paramLabel.substring(1, paramLabel.length),\n                      //ID: param.length, \n                      Datetime: new Date()\n                    });\n                  } else {\n                    paramMap.set(\"P$\" + paramLabel + \"$P\", {\n                      value: 'TextBox1',\n                      lableName: paramLabel,\n                      //ID: param.length, \n                      textValue: '',\n                      TableName: \"\",\n                      DisplayParam: \"\",\n                      actuallableName: paramLabel.substring(1, paramLabel.length)\n                    });\n                  }\n                }\n              }\n\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  screenName: \"Parameter for Results\",\n                  showExecute: true,\n                  showSave: true,\n                  showParam: true,\n                  showValidate: false,\n                  slideOperation: this.props.Login.operation,\n                  slideResult: [],\n                  slideList: [],\n                  screenFlag: \"showQuery\",\n                  param: paramMap // Dparam: Dparam, TBLName: TBLName\n\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              //query without parameters      \n              const inputParam = {\n                screenName: \"Results\",\n                query: selectedRecord.ssqlquery.trim(),\n                userInfo: this.props.Login.userInfo,\n                slideOperation: this.props.Login.operation,\n                screenFlag: \"showQuery\",\n                data: {\n                  showExecute: false,\n                  showSave: false,\n                  showParam: true,\n                  showValidate: false,\n                  noSave: false,\n                  operation: \"view\",\n                  param: new Map(),\n                  screenName: \"Results\",\n                  slideOperation: this.props.Login.operation,\n                  screenFlag: \"showQuery\"\n                }\n              };\n              this.props.executeUserQuery(inputParam);\n            }\n          }\n        }\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.resultStatus === \"Success\") {\n        let operation = this.props.Login.operation;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n\n        if (operation === \"update\" || operation === \"view\" && this.props.Login.slideOperation !== \"create\") {\n          // edit\n          operation = \"update\";\n          postParam = {\n            inputListName: \"SQLQuery\",\n            selectedObject: \"SelectedSQLQuery\",\n            primaryKeyField: \"nsqlquerycode\"\n          };\n          let selectedRecord = { ...this.state.selectedRecord\n          };\n          delete selectedRecord.nformcode;\n          inputData[\"sqlquery\"] = selectedRecord;\n          this.queryFieldList.map(item => {\n            return inputData[\"sqlquery\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n          });\n        } else {\n          //add               \n          inputData[\"sqlquery\"] = {\n            \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n          };\n          operation = \"create\";\n          this.queryFieldList.map(item => {\n            return inputData[\"sqlquery\"][item] = this.state.selectedRecord[item];\n          });\n        }\n\n        if (inputData[\"sqlquery\"].hasOwnProperty('esignpassword')) {\n          if (inputData[\"sqlquery\"]['esignpassword'] === '') {\n            delete inputData[\"sqlquery\"]['esigncomments'];\n            delete inputData[\"sqlquery\"]['esignpassword'];\n            delete inputData[\"sqlquery\"]['agree'];\n          }\n        }\n\n        inputData[\"sqlquery\"][\"ncharttypecode\"] = this.state.selectedRecord[\"ncharttypecode\"] ? this.state.selectedRecord[\"ncharttypecode\"].value : \"-1\";\n        inputData[\"sqlquery\"][\"nquerytypecode\"] = this.props.Login.masterData.SelectedQueryType.nquerytypecode; ///code removed\n\n        const inputParam = {\n          classUrl: \"sqlquery\",\n          methodUrl: \"SQLQuery\",\n          inputData: inputData,\n          operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              parentPopUpSize: \"lg\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_INAVLIDDATA\"\n        }));\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\"; // const inputParam = {\n      //     inputData: { \"userinfo\": this.props.Login.userInfo },\n      //     classUrl: \"sqlquery\",\n      //     methodUrl: \"SQLQuery\",\n      //     displayName: \"IDS_SQLBUILDER\",\n      //     userInfo: this.props.Login.userInfo\n      // };\n      // this.props.callService(inputParam);\n\n      let nquerytypecode = this.props.Login.masterData.SelectedQueryType ? this.props.Login.masterData.SelectedQueryType.nquerytypecode : 0;\n      this.props.comboChangeQueryType(nquerytypecode, this.props.Login.masterData, this.props.Login.userInfo);\n    };\n\n    const dataStateUserQuery = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      modalIsOpen: false,\n      parameters: [],\n      objparam: [],\n      objDparam: [],\n      queryName: '',\n      queryResult: [],\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      dataStateUserQuery: dataStateUserQuery,\n      queryTypeName: '',\n      selectedcombo: [],\n      selectedTableType: [],\n      moduleFormName: [],\n      ntableTypeCode: -1,\n      nFormCode: -1,\n      queryType: [],\n      tableType: [],\n      chartList: [],\n      skip: 0,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25 //tableName : undefined,tableList:[]\n\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage(); // this.dropItemRef = React.createRef(); \n\n    this.queryFieldList = ['nquerytypecode', 'ssqlqueryname', 'ssqlquery', 'sscreenrecordquery', 'sscreenheader', 'svaluemember', 'sdisplaymember', 'ncharttypecode'];\n    this.queryList = [];\n    this.searchFieldList = [\"ssqlqueryname\", \"ssqlquery\", \"sscreenheader\", \"svaluemember\", \"sdisplaymember\", \"squerytypename\", \"schartname\"];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const {\n      masterData,\n      userInfo\n    } = this.props.Login;\n    const addId = this.state.controlMap.has(\"AddSQLQuery\") && this.state.controlMap.get(\"AddSQLQuery\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditSQLQuery\") && this.state.controlMap.get(\"EditSQLQuery\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteSQLQuery\") && this.state.controlMap.get(\"DeleteSQLQuery\").ncontrolcode;\n    const executeId = this.state.controlMap.has(\"ExecuteSQLQuery\") && this.state.controlMap.get(\"ExecuteSQLQuery\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"SQLQuery\",\n      selectedObject: \"SelectedSQLQuery\",\n      primaryKeyField: \"nsqlquerycode\",\n      fetchUrl: \"sqlquery/getSQLQuery\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    this.validationColumnList = [{\n      \"idsName\": \"IDS_SQLQUERYNAME\",\n      \"dataField\": \"ssqlqueryname\",\n      \"width\": \"200px\",\n      \"mandatory\": true\n    }, {\n      \"idsName\": \"IDS_SQLQUERY\",\n      \"dataField\": \"ssqlquery\",\n      \"width\": \"200px\",\n      \"mandatory\": true\n    } // { \"idsName\": \"IDS_SCREENHEADER\", \"dataField\": \"sscreenheader\", \"width\": \"200px\",\"mandatory\": true }, \n    // { \"idsName\": \"IDS_SVALUEMEMBER\", \"dataField\": \"svaluemember\", \"width\": \"200px\",\"mandatory\": true },\n    // { \"idsName\": \"IDS_SDISPLAYMEMBER\", \"dataField\": \"sdisplaymember\", \"width\": \"200px\",\"mandatory\": true },\n    // { \"idsName\": \"IDS_CHARTTYPE\", \"dataField\": \"ncharttypecode\", \"width\": \"200px\",\"mandatory\": true },\n    ];\n\n    if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 2) {\n      this.validationColumnList = [{\n        \"idsName\": \"IDS_SQLQUERYNAME\",\n        \"dataField\": \"ssqlqueryname\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }, {\n        \"idsName\": \"IDS_SQLQUERY\",\n        \"dataField\": \"ssqlquery\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }, {\n        \"idsName\": \"IDS_SCREENHEADER\",\n        \"dataField\": \"sscreenheader\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }];\n    }\n\n    if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 5) {\n      this.validationColumnList = [{\n        \"idsName\": \"IDS_SQLQUERYNAME\",\n        \"dataField\": \"ssqlqueryname\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }, {\n        \"idsName\": \"IDS_SQLQUERY\",\n        \"dataField\": \"ssqlquery\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }, {\n        \"idsName\": \"IDS_SVALUEMEMBER\",\n        \"dataField\": \"svaluemember\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }, {\n        \"idsName\": \"IDS_SDISPLAYMEMBER\",\n        \"dataField\": \"sdisplaymember\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }];\n    }\n\n    if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 1) {\n      this.validationColumnList = [{\n        \"idsName\": \"IDS_SQLQUERYNAME\",\n        \"dataField\": \"ssqlqueryname\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_SQLQUERY\",\n        \"dataField\": \"ssqlquery\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_CHARTTYPE\",\n        \"dataField\": \"ncharttypecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    }\n\n    const mandatoryFields = [];\n    this.validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterData: this.props.Login.masterData,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_SQLBUILDER\"\n      }),\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.SQLQuery,\n      getMasterDetail: sqlQuery => this.props.getSQLQueryDetail(sqlQuery, userInfo, masterData),\n      selectedMaster: this.props.Login.masterData.SelectedSQLQuery,\n      primaryKeyField: \"nsqlquerycode\",\n      mainField: \"ssqlqueryname\",\n      firstField: \"squerytypename\",\n      secondField: this.state.selectedcombo[\"nquerytypecode\"] && this.state.selectedcombo[\"nquerytypecode\"].value === queryTypeFilter.LIMSDASHBOARDQUERY ? \"schartname\" : \"\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: () => this.props.getSQLQueryComboService(\"\", \"create\", \"nsqlquerycode\", null, this.props.Login.masterData, this.props.Login.userInfo, this.props.Login.masterData.SelectedQueryType.nquerytypecode, //this.state.selectedcombo[\"nquerytypecode\"].value, \n      addId) //{() => this.props.addTest(\"create\", selectedTest, userInfo, addId, this.state.nfilterTestCategory)}\n      ,\n      needAccordianFilter: false // skip={this.state.skip}\n      // take={this.state.take}\n      ,\n      handlePageChange: this.handlePageChange,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_QUERYTYPEFILTER\": /*#__PURE__*/React.createElement(QueryTypeFilter, {\n          queryType: this.state.queryType || [] //{this.props.Login.masterData.QueryType || []}\n          ,\n          selectedRecord: this.state.selectedcombo || {},\n          onComboChange: this.onComboChange,\n          filterQueryType: this.props.Login.masterData.SelectedQueryType,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 41\n      }\n    }, this.props.Login.masterData.SQLQuery && this.props.Login.masterData.SQLQuery.length > 0 && this.props.Login.masterData.SelectedSQLQuery && Object.values(this.props.Login.masterData.SelectedSQLQuery).length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedSQLQuery.ssqlqueryname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined outline-secondary btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.masterData.SelectedSQLQuery.squerytypename,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 73\n      }\n    }))), /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 65\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      name: \"editsqlqueryname\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      onClick: () => this.getValidationForEdit(this.state.queryTypeName, \"update\", \"nsqlquerycode\", this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode, this.props.Login.masterData, this.props.Login.userInfo, //this.state.selectedcombo[\"nquerytypecode\"].value, \n      this.props.Login.masterData.SelectedQueryType.nquerytypecode, editId),\n      \"data-for\": \"tooltip_list_wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      name: \"deletesqlqueryname\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      name: \"executequery\",\n      hidden: this.state.userRoleControlRights.indexOf(executeId) === -1,\n      onClick: () => this.executeQuery(\"SQLQuery\", this.props.Login.masterData.SelectedSQLQuery, \"execute\", executeId),\n      \"data-for\": \"tooltip_list_wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EXECUTEQUERY\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTasks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 73\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSALERTQUERY && /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 73\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SCREENHEADER\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedSQLQuery.sscreenheader))), this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSFILTERQUERY && /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 73\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SVALUEMEMBER\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedSQLQuery.svaluemember))), this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSFILTERQUERY && /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 73\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SDISPLAYMEMBER\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedSQLQuery.sdisplaymember))), /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 69\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SQLQUERY\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.SelectedSQLQuery.ssqlquery)))))) : \"\"))))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal //size={this.props.Login.parentPopUpSize}\n      ,\n      size: this.props.Login.loadEsign ? \"lg\" : \"xl\",\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      onExecuteClick: this.onExecuteClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      showExecute: this.props.Login.showExecute,\n      showParam: this.props.Login.showParam,\n      noSave: this.props.Login.noSave,\n      showValidate: this.props.Login.showValidate //graphView={this.props.Login.graphView}\n      ,\n      showSave: this.props.Login.showSave,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === \"Parameter for Results\" ? [] : mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 29\n        }\n      }) : (this.props.Login.screenName === \"Parameter for Results\" || this.props.Login.screenName === \"Results\") && this.props.Login.showParam ? /*#__PURE__*/React.createElement(AddParameter, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.handleText,\n        onComboChange: this.upDateComboboxValue,\n        onChange: this.handleDateChange //parameters={this.state.parameters || []}\n        ,\n        parameters: this.state.param || new Map(),\n        queryTypeCode: this.props.Login.masterData.SelectedQueryType.nquerytypecode // queryTypeCode={this.state.selectedcombo[\"nquerytypecode\"].value}\n        ,\n        sscreenheader: this.props.Login.masterData.SelectedSQLQuery === null ? \"\" : this.props.Login.masterData.SelectedSQLQuery.sscreenheader,\n        slideResult: this.props.Login.slideResult,\n        slideList: this.props.Login.slideList,\n        resultStatus: this.props.Login.resultStatus,\n        dataStateUserQuery: this.state.dataStateUserQuery,\n        userQueryDataStateChange: this.userQueryDataStateChange,\n        controlMap: this.state.controlMap,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(AddQuery, {\n        selectedRecord: this.state.selectedRecord || {},\n        selectedTableType: this.state.selectedTableType || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        chartList: this.state.chartList || [],\n        tableList: this.props.Login.tableList || [],\n        tableName: this.props.Login.tableName || [] //tableList={}\n        ,\n        tableType: this.state.tableType || [],\n        moduleFormName: this.state.moduleFormName || [],\n        tableTypeCode: this.state.selectedTableType[\"ntabletypecode\"] ? this.state.selectedTableType[\"ntabletypecode\"].value : 0 // onColumnNameDrop={this.onColumnNameDrop}\n        ,\n        onDrop: this.onDrop.bind(this) //queryTypeCode={this.state.selectedcombo[\"nquerytypecode\"].value}\n        ,\n        queryTypeCode: this.props.Login.masterData.SelectedQueryType.nquerytypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 33\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  getTablesName(selectedRecord) {\n    return function (dispatch) {\n      const url = \"sqlquery/getTablesFromSchema\";\n      rsapi.post(url, {\n        \"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value),\n        \"moduleformcode\": parseInt(selectedRecord[\"nformcode\"].value),\n        \"userinfo\": this.props.Login.userInfo\n      }).then(response => {\n        let tableName = undefined;\n        let tableNameOnly = [];\n        Object.values(response[1].data[0]).forEach(p => {\n          if (p.stable !== tableName) {\n            tableName = p.stable;\n            tableNameOnly.push({\n              tableName\n            });\n          }\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            tableList: response[0].data[0] || [],\n            tableName: tableNameOnly || []\n          }\n        }); //this.setState({ tableList: response[0].data[0] || [], tableName: tableNameOnly || []})\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  }\n\n  getModuleFormName(TableTypeCode) {\n    const url = \"sqlquery/getModuleFormName\";\n    rsapi.post(url, {\n      \"tabletypecode\": parseInt(TableTypeCode),\n      \"userinfo\": this.props.Login.userInfo\n    }).then(response => {\n      this.setState({\n        moduleFormName: response.data[0]\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  }\n\n  onDrop(data) {\n    let {\n      selectedRecord\n    } = this.state;\n    let sqlquery = selectedRecord.ssqlquery ? selectedRecord.ssqlquery : \"\";\n    selectedRecord.ssqlquery = data.dragtable ? `${sqlquery} ${data.dragtable}` : `${sqlquery} ${data.dragcolumn}`;\n    this.setState({\n      selectedRecord\n    });\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      selectedRecord,\n      dataStateUserQuery,\n      userRoleControlRights,\n      controlMap,\n      filterData,\n      queryType,\n      chartList,\n      moduleFormName,\n      tableType,\n      selectedTableType,\n      param\n    } = this.state;\n    let updateState = false; // const masterData = this.props.Login.masterData;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.slideResult !== previousProps.Login.slideResult) {\n      dataStateUserQuery = {\n        skip: 0,\n        take: 10\n      };\n      updateState = true;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRight = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRight.push(item.ncontrolcode));\n      }\n\n      const controlMap1 = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode); // if (this.props.Login.masterData.QueryType !== previousProps.Login.masterData.QueryType) {\n\n      const queryTypeMap = constructOptionList(this.props.Login.masterData.QueryType || [], \"nquerytypecode\", \"squerytypename\", \"nsorter\", \"ascending\", false);\n      const QueryTypeList = queryTypeMap.get(\"OptionList\"); // const selectedcombo = {\n      //     nquerytypecode: QueryTypeList.length > 0 ? {\n      //         \"value\": QueryTypeList[0].item.nquerytypecode,\n      //         \"label\": QueryTypeList[0].item.squerytypename\n      //     } : this.state.selectedcombo[\"nquerytypecode\"]\n      // }\n      // }\n\n      updateState = true;\n      userRoleControlRights = userRoleControlRight;\n      controlMap = controlMap1;\n      filterData = this.generateBreadCrumData();\n      queryType = QueryTypeList;\n    } else {\n      filterData = this.generateBreadCrumData();\n\n      if (this.props.Login.chartList !== previousProps.Login.chartList || this.props.Login.moduleFormName !== previousProps.Login.moduleFormName) {\n        const chartListMap = constructOptionList(this.props.Login.chartList || [], \"ncharttypecode\", \"schartname\", undefined, undefined, undefined);\n        const chartTypeList = chartListMap.get(\"OptionList\");\n        const moduleFormNameMap = constructOptionList(this.props.Login.moduleFormName || [], \"nformcode\", \"sformname\", undefined, undefined, undefined);\n        const moduleFormNameList = moduleFormNameMap.get(\"OptionList\");\n        updateState = true;\n        chartList = chartTypeList;\n        moduleFormName = moduleFormNameList;\n      }\n\n      if (this.props.Login.masterData.QueryType !== previousProps.Login.masterData.QueryType) {\n        const queryTypeMap = constructOptionList(this.props.Login.masterData.QueryType || [], \"nquerytypecode\", \"squerytypename\", \"nsorter\", \"ascending\", false);\n        const QueryTypeList = queryTypeMap.get(\"OptionList\"); // const selectedcombo = {\n        //                         nquerytypecode: QueryTypeList.length > 0 ? {\n        //                             \"value\": QueryTypeList[0].item.nquerytypecode,\n        //                             \"label\": QueryTypeList[0].item.squerytypename\n        //                         } : this.state.selectedcombo[\"nquerytypecode\"]\n        //}\n\n        updateState = true;\n        queryType = QueryTypeList; //selectedcombo , \n      }\n\n      if (this.props.Login.tableType !== previousProps.Login.tableType) {\n        const tableTypeMap = constructOptionList(this.props.Login.tableType || [], \"ntabletypecode\", \"stabletype\", undefined, undefined, undefined);\n        const tableTypeList = tableTypeMap.get(\"OptionList\");\n        selectedTableType = {\n          ntabletypecode: tableTypeList.length > 0 ? {\n            \"value\": tableTypeList[0].item.ntabletypecode,\n            \"label\": tableTypeList[0].item.stabletype\n          } : this.state.selectedTableType[\"ntabletypecode\"]\n        };\n        updateState = true;\n        tableType = tableTypeList;\n      }\n\n      if (this.props.Login.masterData.SelectedQueryType !== previousProps.Login.masterData.SelectedQueryType) {\n        updateState = true;\n      }\n\n      if (this.props.Login.param !== previousProps.Login.param) {\n        updateState = true;\n        param = this.props.Login.param;\n      }\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        dataStateUserQuery,\n        userRoleControlRights,\n        controlMap,\n        filterData,\n        queryType,\n        chartList,\n        moduleFormName,\n        tableType,\n        selectedTableType,\n        param\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.SelectedQueryType) {\n      breadCrumbData.push({\n        \"label\": \"IDS_QUERYTYPE\",\n        \"value\": this.props.Login.masterData.SelectedQueryType ? this.props.Login.masterData.SelectedQueryType.squerytypename : \"\" //this.props.intl.formatMessage({ id: this.props.Login.masterData.SelectedQueryType.squerytypename}) : \"\"\n\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined,\n        testData: {},\n        parameterData: {},\n        otherTestData: {},\n        formulaData: {}\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  filterColumnData,\n  validateEsignCredential,\n  getSQLQueryDetail,\n  getSQLQueryComboService,\n  comboChangeQueryType,\n  executeUserQuery,\n  comboColumnValues,\n  getColumnNamesByTableName,\n  getTablesName,\n  getModuleFormName\n})(injectIntl(SQLBuilder));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/dashboard/SqlBuilder.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faTrashAlt","faPencilAlt","faTasks","toast","ListMaster","SlideOutModal","Esign","AddQuery","AddParameter","QueryTypeFilter","callService","crudMaster","validateEsignCredential","updateStore","getSQLQueryDetail","getSQLQueryComboService","filterColumnData","comboChangeQueryType","executeUserQuery","comboColumnValues","getColumnNamesByTableName","getTablesName","getModuleFormName","DEFAULT_RETURN","transactionStatus","queryTypeFilter","tableType","constructOptionList","getControlMap","showEsign","ReadOnlyText","ContentPanel","rsapi","ConfirmMessage","Affix","BreadcrumbComponent","ListWrapper","ReactTooltip","SQLBuilder","constructor","props","userQueryDataStateChange","event","setState","dataStateUserQuery","dataState","ConfirmDelete","deleteId","confirmMessage","confirm","intl","formatMessage","id","deleteRecord","Login","masterData","SelectedSQLQuery","getValidationForEdit","screenName","operation","primaryKeyName","primaryKeyValue","userInfo","queryTypeCode","ncontrolCode","post","then","response","data","confirmAlertForEdit","warn","catch","error","status","message","editId","state","queryTypeName","nsqlquerycode","SelectedQueryType","nquerytypecode","undefined","closeAlert","updateInfo","typeName","showConfirmAlertForEdit","openFilter","showFilter","closeFilter","onFilterSubmit","searchRef","current","value","selectedRecord","handlePageChange","skip","take","onComboChange","comboData","fieldName","selectedTableType","ALL","updateInfor","tableName","moduleFormName","selectedcombo","onEsignInputOnChange","target","type","name","checked","YES","NO","onInputOnChange","ACTIVE","DEACTIVE","onNumericInputChange","closeModal","loadEsign","openModal","showExecute","showParam","showValidate","showSave","slideOperation","parentPopUpSize","resultStatus","param","size","screenFlag","LIMSDASHBOARDQUERY","LIMSALERTQUERY","LIMSBARCODEQUERY","LIMSGENERALQUERY","upDateComboboxValue","i","Value","paramMap","Map","get","textValue","handleDateChange","date","Datetime","handleText","executeQuery","methodUrl","sqlQuery","ssqlquery","length","toUpperCase","indexOf","newQuery","paramLabelStartIndex","paramLabelEndIndex","paramLabel","substring","displayName","localParam","startsWith","set","lableName","Date","TableName","DisplayParam","actuallableName","slideResult","slideList","inputParam","query","trim","noSave","postParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","classUrl","inputData","toLowerCase","userRoleControlRights","nformcode","screenData","onExecuteClick","tempQuery","paramFlag","parameterMap","entries","parameter","parameterDetail","paramVal","getFullYear","getMonth","toString","parseInt","getDate","replaceAll","info","onSaveClick","saveType","formRef","queryFieldList","map","item","nmastersitecode","hasOwnProperty","validateEsign","sreason","password","reloadData","modalIsOpen","parameters","objparam","objDparam","queryName","queryResult","controlMap","ntableTypeCode","nFormCode","queryType","chartList","settings","createRef","queryList","searchFieldList","getDerivedStateFromProps","masterStatus","errorCode","render","addId","has","ncontrolcode","executeId","filterParam","userinfo","validationColumnList","mandatoryFields","forEach","mandatory","push","breadCrumbData","filterData","searchedData","SQLQuery","Object","values","ssqlqueryname","squerytypename","sscreenheader","LIMSFILTERQUERY","svaluemember","sdisplaymember","tableList","onDrop","bind","dispatch","url","tableNameOnly","p","stable","payload","TableTypeCode","sqlquery","dragtable","dragcolumn","componentDidUpdate","previousProps","updateState","userRoleControlRight","controlMap1","queryTypeMap","QueryType","QueryTypeList","generateBreadCrumData","chartListMap","chartTypeList","moduleFormNameMap","moduleFormNameList","tableTypeMap","tableTypeList","ntabletypecode","stabletype","componentWillUnmount","modalName","testData","parameterData","otherTestData","formulaData","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faPencilAlt, faTasks } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddQuery from './AddQuery';\r\nimport AddParameter from './AddParameter';\r\nimport QueryTypeFilter from './QueryTypeFilter';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail,\r\n    getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery, \r\n    comboColumnValues, getColumnNamesByTableName, getTablesName, getModuleFormName\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus, queryTypeFilter, tableType } from '../../components/Enumeration';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport rsapi from '../../rsapi';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { Affix } from 'rsuite';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nclass SQLBuilder extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataStateUserQuery = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            error: \"\",\r\n            modalIsOpen: false,\r\n            parameters: [],\r\n            objparam: [],\r\n            objDparam: [],\r\n            queryName: '',\r\n            queryResult: [],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            dataStateUserQuery: dataStateUserQuery,\r\n            queryTypeName: '',\r\n            selectedcombo: [], \r\n            selectedTableType: [],\r\n            moduleFormName: [], \r\n            ntableTypeCode: -1,\r\n            nFormCode: -1,\r\n            queryType: [], \r\n            tableType: [], \r\n            chartList: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings ? \r\n            this.props.Login.settings[3] : 25 //tableName : undefined,tableList:[]\r\n        });\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        // this.dropItemRef = React.createRef(); \r\n\r\n        this.queryFieldList = ['nquerytypecode', 'ssqlqueryname', 'ssqlquery',\r\n            'sscreenrecordquery', 'sscreenheader', 'svaluemember', 'sdisplaymember', 'ncharttypecode'];\r\n        this.queryList = [];\r\n\r\n        this.searchFieldList = [\"ssqlqueryname\", \"ssqlquery\", \"sscreenheader\", \"svaluemember\", \"sdisplaymember\",\r\n            \"squerytypename\", \"schartname\"];\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    userQueryDataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateUserQuery: event.dataState\r\n        });\r\n    }\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), \r\n        this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n        this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n        () => this.deleteRecord(\"SQLQuery\", this.props.Login.masterData.SelectedSQLQuery, \"delete\", deleteId));\r\n    }\r\n\r\n\r\n    render() {\r\n        const { masterData, userInfo } = this.props.Login;\r\n        const addId = this.state.controlMap.has(\"AddSQLQuery\") && this.state.controlMap.get(\"AddSQLQuery\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditSQLQuery\") && this.state.controlMap.get(\"EditSQLQuery\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteSQLQuery\") && this.state.controlMap.get(\"DeleteSQLQuery\").ncontrolcode;\r\n        const executeId = this.state.controlMap.has(\"ExecuteSQLQuery\") && this.state.controlMap.get(\"ExecuteSQLQuery\").ncontrolcode;\r\n\r\n        const filterParam = {\r\n            inputListName: \"SQLQuery\", selectedObject: \"SelectedSQLQuery\", primaryKeyField: \"nsqlquerycode\",\r\n            fetchUrl: \"sqlquery/getSQLQuery\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList\r\n        };\r\n        this.validationColumnList = [\r\n            { \"idsName\": \"IDS_SQLQUERYNAME\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\", \"mandatory\": true },\r\n            { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlquery\", \"width\": \"200px\", \"mandatory\": true },\r\n            // { \"idsName\": \"IDS_SCREENHEADER\", \"dataField\": \"sscreenheader\", \"width\": \"200px\",\"mandatory\": true }, \r\n            // { \"idsName\": \"IDS_SVALUEMEMBER\", \"dataField\": \"svaluemember\", \"width\": \"200px\",\"mandatory\": true },\r\n            // { \"idsName\": \"IDS_SDISPLAYMEMBER\", \"dataField\": \"sdisplaymember\", \"width\": \"200px\",\"mandatory\": true },\r\n            // { \"idsName\": \"IDS_CHARTTYPE\", \"dataField\": \"ncharttypecode\", \"width\": \"200px\",\"mandatory\": true },\r\n        ]\r\n        if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 2) {\r\n            this.validationColumnList = [\r\n                { \"idsName\": \"IDS_SQLQUERYNAME\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlquery\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SCREENHEADER\", \"dataField\": \"sscreenheader\", \"width\": \"200px\", \"mandatory\": true },\r\n            ]\r\n        }\r\n        if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 5) {\r\n            this.validationColumnList = [\r\n                { \"idsName\": \"IDS_SQLQUERYNAME\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlquery\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SVALUEMEMBER\", \"dataField\": \"svaluemember\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SDISPLAYMEMBER\", \"dataField\": \"sdisplaymember\", \"width\": \"200px\", \"mandatory\": true },\r\n            ]\r\n        }\r\n        if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 1) {\r\n            this.validationColumnList = [\r\n                { \"idsName\": \"IDS_SQLQUERYNAME\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\", \"mandatory\": true  , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlquery\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_CHARTTYPE\", \"dataField\": \"ncharttypecode\", \"width\": \"200px\", \"mandatory\": true  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n\r\n            ]\r\n        }\r\n        const mandatoryFields = [];\r\n        this.validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    {/* <div className=\"client-listing-wrap mtop-4\"> */}\r\n                    {/* Start of get display*/}\r\n                    <Row noGutters={true}>\r\n                        <Col md=\"4\">\r\n                            <ListMaster\r\n                                masterData={this.props.Login.masterData}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_SQLBUILDER\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.SQLQuery}\r\n                                getMasterDetail={(sqlQuery) => this.props.getSQLQueryDetail(sqlQuery, userInfo, masterData)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedSQLQuery}\r\n                                primaryKeyField=\"nsqlquerycode\"\r\n                                mainField=\"ssqlqueryname\"\r\n                                firstField=\"squerytypename\"\r\n                                secondField={this.state.selectedcombo[\"nquerytypecode\"] && this.state.selectedcombo[\"nquerytypecode\"].value === queryTypeFilter.LIMSDASHBOARDQUERY ? \"schartname\" : \"\"}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                openModal={() => this.props.getSQLQueryComboService(\"\", \"create\", \"nsqlquerycode\", null,\r\n                                    this.props.Login.masterData, this.props.Login.userInfo,\r\n                                    this.props.Login.masterData.SelectedQueryType.nquerytypecode,\r\n                                    //this.state.selectedcombo[\"nquerytypecode\"].value, \r\n                                    addId)} //{() => this.props.addTest(\"create\", selectedTest, userInfo, addId, this.state.nfilterTestCategory)}\r\n                                needAccordianFilter={false}\r\n                                // skip={this.state.skip}\r\n                                // take={this.state.take}\r\n                                handlePageChange={this.handlePageChange}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_QUERYTYPEFILTER\":\r\n                                            <QueryTypeFilter\r\n                                                queryType={this.state.queryType || []}//{this.props.Login.masterData.QueryType || []}\r\n                                                selectedRecord={this.state.selectedcombo || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                                filterQueryType={this.props.Login.masterData.SelectedQueryType}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md=\"8\">\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <ContentPanel className=\"panel-main-content\">\r\n                                        <Card className=\"border-0\">\r\n                                            {this.props.Login.masterData.SQLQuery && this.props.Login.masterData.SQLQuery.length > 0 && this.props.Login.masterData.SelectedSQLQuery && Object.values(this.props.Login.masterData.SelectedSQLQuery).length > 0 ?\r\n                                                <>\r\n                                                    <Card.Header>\r\n                                                        <Card.Title className=\"product-title-main\">\r\n                                                            {this.props.Login.masterData.SelectedSQLQuery.ssqlqueryname}\r\n                                                        </Card.Title>\r\n                                                        <Card.Subtitle>\r\n                                                            <div className=\"d-flex product-category\">\r\n                                                                <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                    <span className={`btn btn-outlined outline-secondary btn-sm ml-3`}>\r\n                                                                        <FormattedMessage id={this.props.Login.masterData.SelectedSQLQuery.squerytypename} />\r\n                                                                    </span>\r\n                                                                </h2>\r\n                                                                <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                                                                <div className=\"d-inline\">\r\n                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"editsqlqueryname\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                        onClick={() => this.getValidationForEdit(this.state.queryTypeName,\r\n                                                                            \"update\", \"nsqlquerycode\",\r\n                                                                            this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode,\r\n                                                                            this.props.Login.masterData, this.props.Login.userInfo,\r\n                                                                            //this.state.selectedcombo[\"nquerytypecode\"].value, \r\n                                                                            this.props.Login.masterData.SelectedQueryType.nquerytypecode,\r\n                                                                            editId)}\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}>\r\n\r\n                                                                        <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                                    </Nav.Link>\r\n                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"deletesqlqueryname\"\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                        onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                                        <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                    </Nav.Link>\r\n                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"executequery\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(executeId) === -1}\r\n                                                                        onClick={() => this.executeQuery(\"SQLQuery\", this.props.Login.masterData.SelectedSQLQuery, \"execute\", executeId)}\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EXECUTEQUERY\" })}>\r\n                                                                        <FontAwesomeIcon icon={faTasks} />\r\n                                                                    </Nav.Link>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </Card.Subtitle>\r\n                                                    </Card.Header>\r\n                                                    <Card.Body>\r\n                                                        <Row>\r\n                                                            {this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSALERTQUERY &&\r\n                                                                <Col md=\"6\">\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SCREENHEADER\" })}</FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedSQLQuery.sscreenheader}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            }\r\n                                                            {this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSFILTERQUERY &&\r\n                                                                <Col md=\"6\">\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SVALUEMEMBER\" })}</FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedSQLQuery.svaluemember}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            }\r\n                                                            {this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSFILTERQUERY &&\r\n                                                                <Col md=\"6\">\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SDISPLAYMEMBER\" })}</FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedSQLQuery.sdisplaymember}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            }\r\n                                                            <Col md=\"12\">\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SQLQUERY\" })}</FormLabel>\r\n                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedSQLQuery.ssqlquery}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </Card.Body>\r\n                                                </>\r\n                                               : \"\"\r\n                                            }\r\n                                        </Card>\r\n                                    </ContentPanel>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {/* </div> */}\r\n                {/* End of get display */}\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        //size={this.props.Login.parentPopUpSize}\r\n                        size={this.props.Login.loadEsign ? \"lg\" : \"xl\"}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        onExecuteClick={this.onExecuteClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        showExecute={this.props.Login.showExecute}\r\n                        showParam={this.props.Login.showParam}\r\n                        noSave={this.props.Login.noSave}\r\n                        showValidate={this.props.Login.showValidate}\r\n                        //graphView={this.props.Login.graphView}\r\n                        showSave={this.props.Login.showSave}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.screenName === \"Parameter for Results\" ? [] : mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : (this.props.Login.screenName === \"Parameter for Results\" || this.props.Login.screenName === \"Results\") && this.props.Login.showParam ?\r\n                                <AddParameter\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.handleText}\r\n                                    onComboChange={this.upDateComboboxValue}\r\n                                    onChange={this.handleDateChange}\r\n                                    //parameters={this.state.parameters || []}\r\n                                    parameters={this.state.param || new Map()}\r\n                                    queryTypeCode={this.props.Login.masterData.SelectedQueryType.nquerytypecode}\r\n                                    // queryTypeCode={this.state.selectedcombo[\"nquerytypecode\"].value}\r\n                                    sscreenheader={this.props.Login.masterData.SelectedSQLQuery === null ? \"\" : this.props.Login.masterData.SelectedSQLQuery.sscreenheader}\r\n                                    slideResult={this.props.Login.slideResult}\r\n                                    slideList={this.props.Login.slideList}\r\n                                    resultStatus={this.props.Login.resultStatus}\r\n                                    dataStateUserQuery={this.state.dataStateUserQuery}\r\n                                    userQueryDataStateChange={this.userQueryDataStateChange}\r\n                                    controlMap={this.state.controlMap}\r\n                                />\r\n\r\n                                :\r\n                                <AddQuery\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    selectedTableType={this.state.selectedTableType || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    chartList={this.state.chartList || []}\r\n                                    tableList={this.props.Login.tableList || []}\r\n                                    tableName={this.props.Login.tableName || []}\r\n                                    //tableList={}\r\n                                    tableType={this.state.tableType || []}\r\n                                    moduleFormName={this.state.moduleFormName || []}\r\n                                    tableTypeCode={this.state.selectedTableType[\"ntabletypecode\"] ? this.state.selectedTableType[\"ntabletypecode\"].value : 0}\r\n                                    // onColumnNameDrop={this.onColumnNameDrop}\r\n                                    onDrop={this.onDrop.bind(this)}\r\n                                    //queryTypeCode={this.state.selectedcombo[\"nquerytypecode\"].value}\r\n                                    queryTypeCode={this.props.Login.masterData.SelectedQueryType.nquerytypecode}\r\n                                />\r\n                        }\r\n\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    getValidationForEdit=(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode)=>{\r\n    rsapi.post(\"sqlquery/getValidationForEdit\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": userInfo })\r\n    .then(response => {\r\n         if(response.data===\"IDS_SUCCESS\"){\r\n            this.props.getSQLQueryComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode)\r\n         }\r\n         else if(response.data===\"IDS_QUERYUSEDINDASHBOARD\" )  {\r\n            this.confirmAlertForEdit(ncontrolCode) \r\n          }\r\n         else{\r\n            toast.warn(this.props.intl.formatMessage({ id: response.data }));\r\n         }\r\n    })\r\n     .catch(error => {\r\n            if (error.response.status === 500) {\r\n                toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: error.response.data }));\r\n            }\r\n        })\r\n    }\r\n\r\n    confirmAlertForEdit = (editId) => {\r\n            this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_QUERYUSEDINDASHBOARD\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                // () => this.performBatchAction(), \r\n                () => this.props.getSQLQueryComboService(this.state.queryTypeName,\r\n                    \"update\", \"nsqlquerycode\",\r\n                    this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode,\r\n                    this.props.Login.masterData, this.props.Login.userInfo,\r\n                    //this.state.selectedcombo[\"nquerytypecode\"].value, \r\n                    this.props.Login.masterData.SelectedQueryType.nquerytypecode,editId),\r\n                undefined,\r\n                () => this.closeAlert()\r\n            );\r\n    }\r\n\r\n    closeAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlertForEdit: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        this.searchRef.current.value = \"\";\r\n        //    const inputParam = {\r\n        //        inputData: { \"userinfo\": this.props.Login.userInfo, \r\n        //                    nquerytypecode:this.state.selectedRecord[\"nquerytypecode\"] ? \r\n        //                                   this.state.selectedRecord[\"nquerytypecode\"].value : 0\r\n        //                 },        \r\n        //        userInfo: this.props.Login.userInfo,\r\n        //        classUrl: \"sqlquery\",\r\n        //        methodUrl: \"SQLQuery\",\r\n        //        displayName: \"IDS_SQLBUILDER\",\r\n        //    };\r\n        //this.props.callService(inputParam);\r\n        const nquerytypecode = this.state.selectedRecord[\"nquerytypecode\"] ?\r\n            this.state.selectedRecord[\"nquerytypecode\"].value : this.props.Login.masterData.SelectedQueryType.nquerytypecode;\r\n\r\n        this.props.comboChangeQueryType(nquerytypecode, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n\r\n    }\r\n\r\n    handlePageChange = (event) => {\r\n        this.setState({\r\n            skip: event.skip,\r\n            take: event.take\r\n        });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            if (fieldName === \"ncharttypecode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[fieldName] = comboData;\r\n\r\n                this.setState({ selectedRecord });\r\n            }\r\n\r\n            if (fieldName === \"ntabletypecode\" || fieldName === \"nformcode\") {\r\n                const selectedTableType = this.state.selectedTableType || {};\r\n                selectedTableType[fieldName] = comboData;\r\n\r\n                this.setState({ selectedTableType });\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                //  this.state.ntableTypeCode=comboData.value;\r\n                if (fieldName === \"ntabletypecode\") {\r\n                    if (comboData.value === tableType.ALL) {\r\n                        selectedRecord[\"nformcode\"] = \"\";\r\n                        this.props.getTablesName(selectedTableType[\"ntabletypecode\"].value, 0)\r\n                    }\r\n                    else {\r\n                        const updateInfor = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                tableName: []\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfor);\r\n                        this.setState({ moduleFormName: [] })\r\n                        selectedRecord[\"nformcode\"] = \"\";\r\n                        this.props.getModuleFormName(comboData.value, this.props.Login.userInfo)\r\n                    }\r\n\r\n                }\r\n                if (fieldName === \"nformcode\") {\r\n\r\n                    selectedRecord[fieldName] = comboData;\r\n\r\n                    this.setState({ selectedRecord });\r\n                    //this.state.nFormCode=comboData.value;\r\n                    //this.getTablesName(selectedRecord[\"ntabletypecode\"].value ,selectedRecord[\"nformcode\"].value)\r\n                    this.props.getTablesName(selectedTableType[\"ntabletypecode\"].value, selectedRecord[\"nformcode\"].value)\r\n                }\r\n            }\r\n            else {\r\n                const selectedcombo = this.state.selectedcombo || {};\r\n                selectedcombo[fieldName] = comboData;\r\n\r\n                this.setState({ selectedcombo });\r\n            }\r\n            if (fieldName === \"nquerytypecode\") {\r\n                this.searchRef.current.value = \"\";\r\n                // this.props.comboChangeQueryType(comboData.value, this.props.Login.masterData, this.props.Login.userInfo);\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[fieldName] = comboData;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord: selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getTablesName(selectedRecord) {\r\n        return function (dispatch) {\r\n            const url = \"sqlquery/getTablesFromSchema\";\r\n\r\n            rsapi.post(url, { \"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value), \"moduleformcode\": parseInt(selectedRecord[\"nformcode\"].value), \"userinfo\": this.props.Login.userInfo })\r\n                .then(response => {\r\n\r\n                    let tableName = undefined;\r\n                    let tableNameOnly = [];\r\n                    Object.values(response[1].data[0]).forEach(p => {\r\n                        if (p.stable !== tableName) {\r\n                            tableName = p.stable;\r\n                            tableNameOnly.push({ tableName });\r\n                        }\r\n                    })\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            tableList: response[0].data[0] || [],\r\n                            tableName: tableNameOnly || []\r\n\r\n                        }\r\n                    });\r\n                    //this.setState({ tableList: response[0].data[0] || [], tableName: tableNameOnly || []})\r\n\r\n                })\r\n                .catch(error => {\r\n\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    getModuleFormName(TableTypeCode) {\r\n\r\n        const url = \"sqlquery/getModuleFormName\";\r\n\r\n        rsapi.post(url, { \"tabletypecode\": parseInt(TableTypeCode), \"userinfo\": this.props.Login.userInfo })\r\n            .then(response => {\r\n                this.setState({ moduleFormName: response.data[0] });\r\n            })\r\n            .catch(error => {\r\n\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange=(event)=> {\r\n        // const selectedRecord = this.state.selectedRecord || {};\r\n        let  selectedRecord  = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let showExecute = this.props.Login.showExecute;\r\n        let showParam = this.props.Login.showParam;\r\n        let showValidate = this.props.Login.showValidate;\r\n        let showSave = this.props.Login.showSave;\r\n        let screenName = this.props.Login.screenName;\r\n        let operation = this.props.Login.operation;\r\n        let slideOperation = this.props.Login.slideOperation;\r\n        let parentPopUpSize = this.props.Login.parentPopUpSize;\r\n        let resultStatus = this.props.Login.resultStatus;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord[\"agree\"] = transactionStatus.NO;\r\n                if (this.state.param.size > 0) {\r\n                    showExecute = true;\r\n                    showSave = true;\r\n                }\r\n                else {\r\n                    showExecute = false;\r\n                    showSave = false;\r\n                }\r\n                parentPopUpSize = \"xl\"\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.screenName === \"Parameter for Results\" || this.props.Login.screenName === \"Results\") {\r\n                if (this.props.Login.screenFlag === \"showQuery\") {\r\n                    openModal = true;\r\n\r\n                    let queryTypeCode = this.props.Login.masterData.SelectedQueryType.nquerytypecode;\r\n                    if (queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY) {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSDASHBOARDQUERY\" });\r\n                    }\r\n                    else if (queryTypeCode === queryTypeFilter.LIMSALERTQUERY) {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSALERTQUERY\" });\r\n                    }\r\n                    else if (queryTypeCode === queryTypeFilter.LIMSBARCODEQUERY) {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSBARCODEQUERY\" });\r\n                    }\r\n                    else if (queryTypeCode === queryTypeFilter.LIMSGENERALQUERY) {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSGENERALQUERY\" });\r\n                    }\r\n                    else {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSFILTERQUERY\" });\r\n                    }\r\n                    showSave = false;\r\n                }\r\n                else {\r\n                    selectedRecord = {};\r\n                    openModal = false;\r\n                    showExecute = false;\r\n                }\r\n\r\n                showParam = false;\r\n                showValidate = true;\r\n                operation = slideOperation;\r\n                slideOperation = \"\";\r\n                resultStatus = \"\";\r\n            }\r\n            else {\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                showExecute = false;\r\n            }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, showExecute,\r\n                 showParam, operation, screenName, showSave, showValidate,\r\n                  parentPopUpSize, resultStatus ,showConfirmAlertForEdit:false}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    upDateComboboxValue = i => Value => {\r\n        if (Value != null) {\r\n\r\n            // let parameters = [...this.state.parameters]\r\n            // parameters[i].textValue = Value\r\n            // this.setState({\r\n            //     parameters: parameters\r\n            // })\r\n\r\n            const paramMap = this.state.param || new Map();\r\n            paramMap.get(i).textValue = Value;\r\n            this.setState({ param: paramMap })\r\n\r\n        }\r\n    }\r\n\r\n    handleDateChange = i => date => {\r\n\r\n        // let parameters = [...this.state.parameters]\r\n        // parameters[i].Datetime = date\r\n\r\n        // this.setState({\r\n        //     parameters: parameters\r\n        // })\r\n        const paramMap = this.state.param || new Map();\r\n        paramMap.get(i).Datetime = date;\r\n        this.setState({ param: paramMap })\r\n    }\r\n\r\n    handleText = i => event => {\r\n        //let parameters = [...this.state.parameters];\r\n        //parameters[i].textValue = e.target.value;\r\n        //this.setState({parameters: parameters});\r\n        // console.log(parameters)\r\n        const paramMap = this.state.param || new Map();\r\n        paramMap.get(event.target.name).textValue = event.target.value;\r\n        this.setState({ param: paramMap })\r\n\r\n    }\r\n\r\n    onDrop(data) {\r\n        let { selectedRecord } = this.state;\r\n        let sqlquery = selectedRecord.ssqlquery ? selectedRecord.ssqlquery : \"\";\r\n\r\n        selectedRecord.ssqlquery = data.dragtable ? `${sqlquery} ${data.dragtable}` : `${sqlquery} ${data.dragcolumn}`\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    executeQuery = (methodUrl, selectedRecord, operation, ncontrolCode) => {\r\n\r\n        const sqlQuery = selectedRecord.ssqlquery;\r\n        if (sqlQuery.length > 10) {\r\n            if (sqlQuery.toUpperCase().indexOf('INSERT') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('UPDATE') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('DELETE') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('TRUNCATE') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('CREATE') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('ALTER') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('DROP') >= 0) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTDATAMANIPULATION\" }));\r\n            }\r\n            else {\r\n                if (sqlQuery.indexOf('P$') > 0) {\r\n                    let newQuery = sqlQuery;\r\n\r\n                    const paramMap = new Map();\r\n                    while (newQuery.indexOf(\"P$\") !== -1) {\r\n                        const paramLabelStartIndex = newQuery.indexOf(\"P$\");\r\n                        const paramLabelEndIndex = newQuery.indexOf(\"$P\");\r\n\r\n                        const paramLabel = newQuery.substring(paramLabelStartIndex + 2, paramLabelEndIndex);\r\n\r\n                        if (paramLabel.indexOf(\"T$\") !== -1) {\r\n                            let displayName = \"\";\r\n                            let localParam = \"\";\r\n                            let tableName = \"\";\r\n\r\n                            newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\r\n\r\n                            if (paramLabel.indexOf(\"D$\") !== -1) {\r\n                                localParam = paramLabel.substring(0, paramLabel.indexOf('D$'));\r\n                                displayName = paramLabel.substring(paramLabel.indexOf('D$') + 2, paramLabel.indexOf('T$'));\r\n                                //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\r\n                                tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\r\n                            }\r\n                            else {\r\n                                localParam = paramLabel.substring(0, paramLabel.indexOf('T$'));\r\n                                // tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\r\n                                tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\r\n                            }\r\n\r\n                            if (localParam.startsWith('d') || localParam.startsWith('D')) {\r\n                                paramMap.set(\"P$\" + localParam + \"$P\", {\r\n                                    value: 'DateTimePicker',\r\n                                    lableName: localParam,\r\n                                    //ID: param.length, \r\n                                    Datetime: new Date(),\r\n                                    textValue: '',\r\n                                    TableName: tableName,\r\n                                    DisplayParam: displayName,\r\n                                    actuallableName: localParam.substring(1, localParam.length)\r\n                                })\r\n                            }\r\n                            else {\r\n                                paramMap.set(\"P$\" + localParam + \"$P\", {\r\n                                    value: 'TextBox1', lableName: localParam,\r\n                                    //ID: param.length, \r\n                                    textValue: '',\r\n                                    TableName: tableName,\r\n                                    DisplayParam: displayName,\r\n                                    actuallableName: localParam.substring(1, localParam.length)\r\n                                });\r\n                            }\r\n                        }\r\n                        else {\r\n                            newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\r\n\r\n                            if (paramLabel.startsWith('d') || paramLabel.startsWith('D')) {\r\n                                paramMap.set(\"P$\" + paramLabel + \"$P\", {\r\n                                    value: 'DateTimePicker',\r\n                                    lableName: paramLabel,\r\n                                    actuallableName: paramLabel.substring(1, paramLabel.length),\r\n                                    //ID: param.length, \r\n                                    Datetime: new Date()\r\n                                })\r\n                            }\r\n                            else {\r\n                                paramMap.set(\"P$\" + paramLabel + \"$P\", {\r\n                                    value: 'TextBox1', lableName: paramLabel,\r\n                                    //ID: param.length, \r\n                                    textValue: '',\r\n                                    TableName: \"\",\r\n                                    DisplayParam: \"\",\r\n                                    actuallableName: paramLabel.substring(1, paramLabel.length)\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN, data: {\r\n\r\n                            screenName: \"Parameter for Results\",\r\n                            openModal: true,\r\n                            showExecute: true,\r\n                            showParam: true,\r\n                            showValidate: false,\r\n                            showSave: false,\r\n                            operation: \"create\",\r\n                            slideOperation: \"\",\r\n                            slideResult: [],\r\n                            slideList: [],\r\n                            screenFlag: \"showParam\",\r\n                            param: paramMap,\r\n                            //param: param, Dparam: Dparam, TBLName: TBLName,\r\n                            parentPopUpSize: \"xl\"\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    //query without parameters      \r\n                    const inputParam = {\r\n\r\n                        query: selectedRecord.ssqlquery.trim(),\r\n                        screenName: \"Results\",\r\n                        openModal: true,\r\n                        showExecute: false,\r\n                        showParam: true,\r\n                        showValidate: false,\r\n                        showSave: false,\r\n                        noSave: true,\r\n                        operation: \"view\",\r\n                        slideOperation: \"\",\r\n                        slideResult: [],\r\n                        slideList: [],\r\n                        //screenFlag: \"showParam\",\r\n                        screenFlag: \"NoParam\",\r\n                        parentPopUpSize: \"xl\",\r\n\r\n                        param: new Map(),\r\n\r\n                    }\r\n                    this.props.executeUserQuery(inputParam);\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteRecord = (methodUrl, selectedRecord, operation, ncontrolCode) => {\r\n\r\n        const postParam = {\r\n            inputListName: \"SQLQuery\", selectedObject: \"SelectedSQLQuery\",\r\n            primaryKeyField: \"nsqlquerycode\",\r\n            primaryKeyValue: this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode,\r\n            fetchUrl: \"sqlquery/getSQLQuery\",\r\n            fecthInputObject: { userInfo: this.props.Login.userInfo },\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl, postParam,\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"sqlquery\": this.props.Login.masterData.SelectedSQLQuery\r\n            },\r\n            operation\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"sqlquery\", operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    onExecuteClick = () => {\r\n        // let paramVal;\r\n        let tempQuery = \"\";\r\n        let paramFlag = true;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.screenName === \"Parameter for Results\" && this.state.param.size > 0) {\r\n            if (selectedRecord != null && selectedRecord.ssqlquery != null && selectedRecord.ssqlquery.length > 0) {\r\n                tempQuery = selectedRecord.ssqlquery;\r\n            }\r\n            else {\r\n                tempQuery = this.props.Login.masterData.SelectedSQLQuery.ssqlquery;\r\n            }\r\n\r\n            const paramMap = this.state.param || new Map();\r\n            for (let parameterMap of paramMap.entries()) {\r\n                const parameter = parameterMap[0];\r\n                const parameterDetail = parameterMap[1];\r\n                let paramVal = \"\";\r\n                //console.log(\"para detail:\", parameterDetail);\r\n\r\n                if (parameterDetail.lableName.toUpperCase().startsWith('D')) {\r\n                    if (parameterDetail.Datetime !== null){\r\n                        paramVal = parameterDetail.Datetime.getFullYear() + \"-\";\r\n                        if (parameterDetail.Datetime.getMonth().toString().length > 1) {\r\n                            paramVal = paramVal + parseInt(parameterDetail.Datetime.getMonth() + 1) + \"-\";\r\n                        }\r\n                        else {\r\n                            paramVal = paramVal + \"0\" + parseInt(parameterDetail.Datetime.getMonth() + 1) + \"-\";\r\n                        }\r\n                        if (parameterDetail.Datetime.getDate().toString().length > 1) {\r\n                            paramVal = paramVal + parameterDetail.Datetime.getDate();\r\n                        }\r\n                        else {\r\n                            paramVal = paramVal + \"0\" + parameterDetail.Datetime.getDate();\r\n                        }\r\n                    }\r\n                    if (paramVal === undefined ){\r\n                        paramFlag = false;\r\n                        tempQuery = tempQuery.replaceAll(parameter,  null);\r\n                    }\r\n                    else if(paramVal.trim().length > 0) {\r\n                        //tempQuery = tempQuery.replace(parameter, \"P#\" + paramVal + \"$P\");\r\n                        tempQuery = tempQuery.replaceAll(parameter, \"'\" + paramVal + \"'\");\r\n                    }\r\n                    else {\r\n                        paramFlag = false;\r\n                    }\r\n                  \r\n                }\r\n                else {\r\n                    paramVal = parameterDetail.textValue;\r\n                    if (paramVal !== \"\") {\r\n                        if (parameterDetail.lableName.toUpperCase().startsWith('S')) {\r\n\r\n                            if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'D$') > 0) {\r\n                                tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim()\r\n                                    + 'D$' + parameterDetail.DisplayParam\r\n                                    + 'T$' + parameterDetail.TableName\r\n                                    + '$P', \"'\" + paramVal + \"'\");\r\n                            }\r\n                            else if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'T$') > 0) {\r\n                                tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim()\r\n                                    + 'T$' + parameterDetail.TableName\r\n                                    + '$P', \"'\" + paramVal + \"'\");\r\n                            }\r\n                            else {\r\n                                tempQuery = tempQuery.replaceAll(parameter, \"'\" + paramVal + \"'\");\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'D$') > 0) {\r\n                                tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim()\r\n                                    + 'D$' + parameterDetail.DisplayParam.trim()\r\n                                    + 'T$' + parameterDetail.TableName + '$P', paramVal);\r\n                            }\r\n                            else if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'T$') > 0) {\r\n                                tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim()\r\n                                    + 'T$' + parameterDetail.TableName + '$P', paramVal);\r\n                            }\r\n                            else {\r\n                                tempQuery = tempQuery.replaceAll(parameter, paramVal);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        paramFlag = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (paramFlag === true) {\r\n                //console.log(\"temp:\", tempQuery);\r\n                const inputParam = {\r\n                    slideOperation: this.props.Login.slideOperation,\r\n                    screenFlag: this.props.Login.screenFlag,\r\n                    query: tempQuery.trim(),\r\n                    userInfo: this.props.Login.userInfo,\r\n                    data: {}\r\n                }\r\n                this.props.executeUserQuery(inputParam);\r\n\r\n                //this.props.executeUserQuery(tempQuery.trim(), this.props.Login.screenFlag, this.props.Login.slideOperation, this.props.Login.userInfo);\r\n            }\r\n            else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERPAREMETRS\" }));\r\n            }\r\n        }\r\n        else {\r\n\r\n            if (selectedRecord.ssqlquery !== null && selectedRecord.ssqlquery.length > 0) {\r\n                const sqlQuery = selectedRecord.ssqlquery;\r\n                if (sqlQuery.toUpperCase().indexOf('INSERT') >= 0 || sqlQuery.toUpperCase().indexOf('UPDATE') >= 0\r\n                    || sqlQuery.toUpperCase().indexOf('DELETE') >= 0 || sqlQuery.toUpperCase().indexOf('TRUNCATE') >= 0\r\n                    || sqlQuery.toUpperCase().indexOf('CREATE') >= 0 || sqlQuery.toUpperCase().indexOf('ALTER') >= 0\r\n                    || sqlQuery.toUpperCase().indexOf('DROP') >= 0) {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTDATAMANIPULATION\" }));\r\n                }\r\n                else {\r\n                    if (sqlQuery.indexOf('P$') > 0) {\r\n                        let newQuery = sqlQuery;\r\n\r\n                        const paramMap = new Map();\r\n                        while (newQuery.indexOf(\"P$\") !== -1) {\r\n                            const paramLabelStartIndex = newQuery.indexOf(\"P$\");\r\n                            const paramLabelEndIndex = newQuery.indexOf(\"$P\");\r\n\r\n                            const paramLabel = newQuery.substring(paramLabelStartIndex + 2, paramLabelEndIndex);\r\n\r\n                            if (paramLabel.indexOf(\"T$\") !== -1) {\r\n                                let displayName = \"\";\r\n                                let localParam = \"\";\r\n                                let tableName = \"\";\r\n\r\n                                newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\r\n\r\n                                if (paramLabel.indexOf(\"D$\") !== -1) {\r\n                                    localParam = paramLabel.substring(0, paramLabel.indexOf('D$'));\r\n                                    displayName = paramLabel.substring(paramLabel.indexOf('D$') + 2, paramLabel.indexOf('T$'));\r\n                                    //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\r\n                                    tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\r\n                                }\r\n                                else {\r\n                                    localParam = paramLabel.substring(0, paramLabel.indexOf('T$'));\r\n                                    //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\r\n                                    tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\r\n                                }\r\n\r\n                                if (localParam.startsWith('d') || localParam.startsWith('D')) {\r\n                                    paramMap.set(\"P$\" + localParam + \"$P\", {\r\n                                        value: 'DateTimePicker',\r\n                                        lableName: localParam,\r\n                                        //ID: param.length, \r\n                                        Datetime: new Date(),\r\n                                        textValue: '',\r\n                                        TableName: tableName,\r\n                                        DisplayParam: displayName,\r\n                                        actuallableName: localParam.substring(1, localParam.length)\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    paramMap.set(\"P$\" + localParam + \"$P\", {\r\n                                        value: 'TextBox1', lableName: localParam,\r\n                                        //ID: param.length, \r\n                                        textValue: '',\r\n                                        TableName: tableName,\r\n                                        DisplayParam: displayName,\r\n                                        actuallableName: localParam.substring(1, localParam.length)\r\n                                    });\r\n                                }\r\n                            }\r\n                            else {\r\n                                newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\r\n\r\n                                if (paramLabel.startsWith('d') || paramLabel.startsWith('D')) {\r\n                                    paramMap.set(\"P$\" + paramLabel + \"$P\", {\r\n                                        value: 'DateTimePicker',\r\n                                        lableName: paramLabel,\r\n                                        actuallableName: paramLabel.substring(1, paramLabel.length),\r\n                                        //ID: param.length, \r\n                                        Datetime: new Date()\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    paramMap.set(\"P$\" + paramLabel + \"$P\", {\r\n                                        value: 'TextBox1', lableName: paramLabel,\r\n                                        //ID: param.length, \r\n                                        textValue: '',\r\n                                        TableName: \"\",\r\n                                        DisplayParam: \"\",\r\n                                        actuallableName: paramLabel.substring(1, paramLabel.length)\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN, data: {\r\n                                screenName: \"Parameter for Results\",\r\n                                showExecute: true,\r\n                                showSave: true,\r\n                                showParam: true,\r\n                                showValidate: false,\r\n                                slideOperation: this.props.Login.operation,\r\n                                slideResult: [],\r\n                                slideList: [],\r\n                                screenFlag: \"showQuery\",\r\n                                param: paramMap,\r\n                                // Dparam: Dparam, TBLName: TBLName\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }\r\n                    else {\r\n                        //query without parameters      \r\n                        const inputParam = {\r\n                            screenName: \"Results\",\r\n                            query: selectedRecord.ssqlquery.trim(),\r\n                            userInfo: this.props.Login.userInfo,\r\n                            slideOperation: this.props.Login.operation,\r\n                            screenFlag: \"showQuery\",\r\n                            data: {\r\n                                showExecute: false,\r\n                                showSave: false,\r\n                                showParam: true,\r\n                                showValidate: false,\r\n                                noSave: false,\r\n                                operation: \"view\",\r\n                                param: new Map(),\r\n                                screenName: \"Results\",\r\n                                slideOperation: this.props.Login.operation,\r\n                                screenFlag: \"showQuery\"\r\n                            }\r\n\r\n                        }\r\n                        this.props.executeUserQuery(inputParam);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.resultStatus === \"Success\") {\r\n            let operation = this.props.Login.operation;\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let postParam = undefined;\r\n            if (operation === \"update\"\r\n                || (operation === \"view\" && this.props.Login.slideOperation !== \"create\")) {\r\n                // edit\r\n                operation = \"update\";\r\n                postParam = { inputListName: \"SQLQuery\", selectedObject: \"SelectedSQLQuery\", primaryKeyField: \"nsqlquerycode\" };\r\n                let  selectedRecord = {...this.state.selectedRecord};\r\n                delete selectedRecord.nformcode;\r\n                 inputData[\"sqlquery\"] = selectedRecord\r\n                this.queryFieldList.map(item => {\r\n                    return inputData[\"sqlquery\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n                })\r\n            }\r\n            else {\r\n                //add               \r\n                inputData[\"sqlquery\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n                operation = \"create\";\r\n                this.queryFieldList.map(item => {\r\n                    return inputData[\"sqlquery\"][item] = this.state.selectedRecord[item]\r\n                });\r\n            }\r\n            if (inputData[\"sqlquery\"].hasOwnProperty('esignpassword')) {\r\n                if (inputData[\"sqlquery\"]['esignpassword'] === '') {\r\n                    delete inputData[\"sqlquery\"]['esigncomments']\r\n                    delete inputData[\"sqlquery\"]['esignpassword']\r\n                    delete inputData[\"sqlquery\"]['agree']\r\n                }\r\n            }\r\n            inputData[\"sqlquery\"][\"ncharttypecode\"] = this.state.selectedRecord[\"ncharttypecode\"] ? this.state.selectedRecord[\"ncharttypecode\"].value : \"-1\";\r\n            inputData[\"sqlquery\"][\"nquerytypecode\"] = this.props.Login.masterData.SelectedQueryType.nquerytypecode;\r\n            ///code removed\r\n            const inputParam = {\r\n                classUrl: \"sqlquery\",\r\n                methodUrl: \"SQLQuery\",\r\n                inputData: inputData,\r\n                operation,\r\n                saveType, formRef, postParam, searchRef: this.searchRef\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (\r\n                showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, parentPopUpSize: \"lg\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_INAVLIDDATA\" }));\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        // const inputParam = {\r\n        //     inputData: { \"userinfo\": this.props.Login.userInfo },\r\n        //     classUrl: \"sqlquery\",\r\n        //     methodUrl: \"SQLQuery\",\r\n        //     displayName: \"IDS_SQLBUILDER\",\r\n        //     userInfo: this.props.Login.userInfo\r\n        // };\r\n        // this.props.callService(inputParam);\r\n\r\n        let nquerytypecode = this.props.Login.masterData.SelectedQueryType ?\r\n            this.props.Login.masterData.SelectedQueryType.nquerytypecode : 0;\r\n        this.props.comboChangeQueryType(nquerytypecode, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let {selectedRecord,dataStateUserQuery,userRoleControlRights, controlMap, filterData, queryType,\r\n            chartList, moduleFormName, tableType, selectedTableType, param} =this.state;\r\n        let updateState = false;\r\n        // const masterData = this.props.Login.masterData;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n        }\r\n        if (this.props.Login.slideResult !== previousProps.Login.slideResult) { \r\n            dataStateUserQuery = {\r\n                skip: 0,\r\n                take: 10,\r\n            };\r\n            updateState = true;\r\n        }\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRight = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRight.push(item.ncontrolcode))\r\n            }\r\n            const controlMap1 = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            // if (this.props.Login.masterData.QueryType !== previousProps.Login.masterData.QueryType) {\r\n            const queryTypeMap = constructOptionList(this.props.Login.masterData.QueryType || [], \"nquerytypecode\",\r\n                \"squerytypename\", \"nsorter\", \"ascending\", false);\r\n            const QueryTypeList = queryTypeMap.get(\"OptionList\");\r\n\r\n            // const selectedcombo = {\r\n            //     nquerytypecode: QueryTypeList.length > 0 ? {\r\n            //         \"value\": QueryTypeList[0].item.nquerytypecode,\r\n            //         \"label\": QueryTypeList[0].item.squerytypename\r\n            //     } : this.state.selectedcombo[\"nquerytypecode\"]\r\n\r\n            // }\r\n\r\n            // }\r\n            updateState = true;\r\n            userRoleControlRights = userRoleControlRight ;\r\n            controlMap = controlMap1;\r\n            filterData = this.generateBreadCrumData();\r\n            queryType = QueryTypeList;\r\n        }\r\n        else {\r\n            filterData = this.generateBreadCrumData();\r\n            if (this.props.Login.chartList !== previousProps.Login.chartList || this.props.Login.moduleFormName !== previousProps.Login.moduleFormName) {\r\n\r\n                const chartListMap = constructOptionList(this.props.Login.chartList || [], \"ncharttypecode\",\r\n                    \"schartname\", undefined, undefined, undefined);\r\n                const chartTypeList = chartListMap.get(\"OptionList\");\r\n\r\n                const moduleFormNameMap = constructOptionList(this.props.Login.moduleFormName || [], \"nformcode\",\r\n                    \"sformname\", undefined, undefined, undefined);\r\n                const moduleFormNameList = moduleFormNameMap.get(\"OptionList\");\r\n                updateState = true;\r\n                chartList = chartTypeList\r\n                moduleFormName = moduleFormNameList\r\n            }\r\n            if (this.props.Login.masterData.QueryType !== previousProps.Login.masterData.QueryType) {\r\n                const queryTypeMap = constructOptionList(this.props.Login.masterData.QueryType || [], \"nquerytypecode\",\r\n                    \"squerytypename\", \"nsorter\", \"ascending\", false);\r\n                const QueryTypeList = queryTypeMap.get(\"OptionList\");\r\n\r\n                // const selectedcombo = {\r\n                //                         nquerytypecode: QueryTypeList.length > 0 ? {\r\n                //                             \"value\": QueryTypeList[0].item.nquerytypecode,\r\n                //                             \"label\": QueryTypeList[0].item.squerytypename\r\n                //                         } : this.state.selectedcombo[\"nquerytypecode\"]\r\n\r\n                //}\r\n\r\n                updateState = true;\r\n                queryType = QueryTypeList //selectedcombo , \r\n                \r\n                \r\n            }\r\n            if (this.props.Login.tableType !== previousProps.Login.tableType) {\r\n                const tableTypeMap = constructOptionList(this.props.Login.tableType || [], \"ntabletypecode\",\r\n                    \"stabletype\", undefined, undefined, undefined);\r\n                const tableTypeList = tableTypeMap.get(\"OptionList\");\r\n\r\n                selectedTableType = {\r\n                    ntabletypecode: tableTypeList.length > 0 ? {\r\n                        \"value\": tableTypeList[0].item.ntabletypecode,\r\n                        \"label\": tableTypeList[0].item.stabletype\r\n                    } : this.state.selectedTableType[\"ntabletypecode\"]\r\n\r\n                }\r\n                updateState = true;\r\n                tableType = tableTypeList\r\n                \r\n            }\r\n            if (this.props.Login.masterData.SelectedQueryType !== previousProps.Login.masterData.SelectedQueryType) {\r\n                updateState = true;\r\n            }\r\n            if (this.props.Login.param !== previousProps.Login.param) {\r\n                updateState = true;\r\n                param = this.props.Login.param\r\n            }\r\n        }\r\n        if(updateState){\r\n            this.setState({\r\n                selectedRecord,dataStateUserQuery,userRoleControlRights, controlMap, filterData, queryType,\r\n                chartList, moduleFormName, tableType, selectedTableType, param\r\n            })\r\n        }\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.SelectedQueryType) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_QUERYTYPE\",\r\n                    \"value\": this.props.Login.masterData.SelectedQueryType ?\r\n                        this.props.Login.masterData.SelectedQueryType.squerytypename : \"\"\r\n                    //this.props.intl.formatMessage({ id: this.props.Login.masterData.SelectedQueryType.squerytypename}) : \"\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined,\r\n                testData: {}, parameterData: {}, otherTestData: {}, formulaData: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, filterColumnData,\r\n    validateEsignCredential, getSQLQueryDetail, getSQLQueryComboService, comboChangeQueryType,\r\n    executeUserQuery, comboColumnValues, getColumnNamesByTableName,\r\n    getTablesName, getModuleFormName\r\n})(injectIntl(SQLBuilder));"]},"metadata":{},"sourceType":"module"}