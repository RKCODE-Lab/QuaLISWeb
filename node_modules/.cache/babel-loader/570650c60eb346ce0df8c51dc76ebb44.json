{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\ConfigureScreenFields.jsx\";\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport React from 'react';\nimport { injectIntl } from 'react-intl'; // import ReactTooltip from 'react-tooltip';\n\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport Tabs, { TabPane } from \"rc-tabs\";\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport { formCode, TemplateType, transactionStatus } from '../../components/Enumeration';\nimport 'rc-tabs/assets/index.css';\n\nclass ConfigureScreenFields extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTabChange = tab => {\n      this.setState({\n        selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\n      });\n    };\n\n    const screens = [{\n      eventKey: 'registration',\n      name: \"IDS_SAMPLEREGISTRATION\",\n      formcode: formCode.SAMPLEREGISTRATION\n    }];\n\n    if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedjoballocation === true) {\n      screens.push({\n        eventKey: 'joballocation',\n        name: \"IDS_JOBALLOCATION\",\n        formcode: formCode.JOBALLOCATION\n      });\n    }\n\n    if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedmyjob === true) {\n      screens.push({\n        eventKey: 'myjobs',\n        name: \"IDS_MYJOBS\",\n        formcode: formCode.MYJOBS\n      });\n      screens.push({\n        eventKey: 'testwisemyjobs',\n        name: \"IDS_TESTWISEMYJOBS\",\n        formcode: formCode.TESTWISEMYJOBS\n      });\n    }\n\n    screens.push({\n      eventKey: 'resultentry',\n      name: \"IDS_RESULTENTRY\",\n      formcode: formCode.RESULTENTRY\n    }, {\n      eventKey: 'approval',\n      name: \"IDS_APPROVAL\",\n      formcode: formCode.APPROVAL\n    });\n    let extractedColumnList = [];\n\n    if (this.props.selectedTemplateType === TemplateType.Masters) {\n      extractedColumnList.push({\n        \"title\": \"IDS_GRIDITEM\",\n        \"field\": \"griditem\",\n        \"width\": \"600px\"\n      }, {\n        \"title\": \"IDS_GRIDMOREITEM\",\n        \"field\": \"gridmoreitem\",\n        \"width\": \"600px\"\n      });\n    } else {\n      if (this.props.operation === 'configuresubsample') {\n        //if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedsubsample === true) {\n        extractedColumnList.push({\n          \"title\": \"IDS_LISTITEM\",\n          \"field\": \"subsamplelistitem\",\n          \"width\": \"600px\"\n        });\n      } else {\n        extractedColumnList.push({\n          \"title\": \"IDS_DISPLAYFIELDS\",\n          \"field\": \"sampledisplayfields\",\n          \"width\": \"600px\"\n        }, {\n          \"title\": \"IDS_LISTITEM\",\n          \"field\": \"samplelistitem\",\n          \"width\": \"600px\"\n        }, // { \"title\": \"IDS_LISTMOREITEM\", \"field\": \"samplelistmoreitems\", \"width\": \"600px\" },\n        {\n          \"title\": \"IDS_GRIDITEM\",\n          \"field\": \"samplegriditem\",\n          \"width\": \"600px\"\n        }, {\n          \"title\": \"IDS_GRIDMOREITEM\",\n          \"field\": \"samplegridmoreitem\",\n          \"width\": \"600px\"\n        });\n      }\n    }\n\n    this.state = {\n      screens,\n      extractedColumnList,\n      selectedScreen: {\n        eventKey: 'registration',\n        name: \"IDS_SAMPLEREGISTRATION\",\n        formcode: 43\n      }\n    };\n  }\n\n  render() {\n    console.log(\"props:\", this.props);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.selectedTemplateType === TemplateType.Masters ? /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      className: \"active-paging\",\n      style: {\n        height: '550px'\n      },\n      resizable: true,\n      reorderable: true,\n      scrollable: \"scrollable\" // pageable={{ buttonCount: 5, pageSizes: 4, previousNext: false }}\n      ,\n      data: this.props.dataResult\n    }, this.state.dataState, {\n      onDataStateChange: this.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"label\" // columnMenu={ColumnMenu}\n      ,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_FIELDS\"\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"]['label'] //data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 49\n        }\n      }, row[\"dataItem\"]['label']),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 41\n      }\n    }), this.state.extractedColumnList.map(column => /*#__PURE__*/React.createElement(GridColumn, {\n      field: column.field,\n      title: this.props.intl.formatMessage({\n        id: column.title\n      }),\n      headerClassName: \"text-center\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        \"data-tip\": this.props.intl.formatMessage({\n          id: column.title\n        }) //data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][column.field],\n        onChange: event => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex),\n        checked: row[\"dataItem\"][column.field] || false,\n        name: row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 57\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 45\n      }\n    }))))))) : /*#__PURE__*/React.createElement(AtTabs, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      activeKey: this.state.selectedScreen.eventKey,\n      moreIcon: \"...\",\n      onChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, this.state.screens.map(screen => /*#__PURE__*/React.createElement(TabPane, {\n      name: screen.eventKey,\n      tab: this.props.intl.formatMessage({\n        id: screen.name\n      }),\n      key: screen.eventKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      className: \"active-paging\" //style={{ height: '550px' }}\n      ,\n      resizable: true,\n      reorderable: true,\n      scrollable: \"scrollable\" // pageable={{ buttonCount: 5, pageSizes: 4, previousNext: false }}\n      ,\n      data: this.props.dataResult[this.state.selectedScreen.formcode]\n    }, this.state.dataState, {\n      onDataStateChange: this.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"label\" // columnMenu={ColumnMenu}\n      ,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_FIELDS\"\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"]['label'] // data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 61\n        }\n      }, row[\"dataItem\"]['label']),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 53\n      }\n    }), this.state.extractedColumnList.map(column => /*#__PURE__*/React.createElement(GridColumn, {\n      field: column.field,\n      title: this.props.intl.formatMessage({\n        id: column.title\n      }),\n      headerClassName: \"text-center\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        \"data-tip\": this.props.intl.formatMessage({\n          id: column.title\n        }),\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][column.field],\n        onChange: event => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex, this.state.selectedScreen.formcode, this.props.operation),\n        checked: row[\"dataItem\"][column.field] || false //checked={column.field === \"samplelistitem\" ? (row[\"dataItem\"][column.field] === \"none\" ? false :row[\"dataItem\"][column.field]) : (row[\"dataItem\"][column.field] || false)}\n        //disabled={column.field === \"samplelistitem\" ? (row[\"dataItem\"][column.field] === \"none\" ? true : false):false}\n        ,\n        name: row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 68\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 57\n      }\n    }))))))))))));\n  }\n\n}\n\nexport default injectIntl(ConfigureScreenFields);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/designtemplatemapping/ConfigureScreenFields.jsx"],"names":["Grid","GridColumn","LocalizationProvider","React","injectIntl","AtTabs","CustomSwitch","DataGrid","PerfectScrollbar","Tabs","TabPane","AtTableWrap","formCode","TemplateType","transactionStatus","ConfigureScreenFields","Component","constructor","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","name","formcode","SAMPLEREGISTRATION","approvedRegSubTypeVersion","jsondata","nneedjoballocation","push","JOBALLOCATION","nneedmyjob","MYJOBS","TESTWISEMYJOBS","RESULTENTRY","APPROVAL","extractedColumnList","selectedTemplateType","Masters","operation","render","console","log","height","dataResult","dataState","dataStateChange","intl","formatMessage","id","row","map","column","field","title","textAlign","event","onChangeToggle","dataIndex","columnIndex"],"mappings":"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","sourcesContent":["import { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport React from 'react'\r\nimport { injectIntl } from 'react-intl'\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Tabs, { TabPane } from \"rc-tabs\";\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { formCode, TemplateType, transactionStatus } from '../../components/Enumeration';\r\nimport 'rc-tabs/assets/index.css';\r\nclass ConfigureScreenFields extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const  screens = [{ eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: formCode.SAMPLEREGISTRATION }];\r\n        if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedjoballocation === true)  {\r\n            screens.push({ eventKey: 'joballocation', name: \"IDS_JOBALLOCATION\", formcode: formCode.JOBALLOCATION });\r\n        }\r\n\r\n        if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedmyjob === true) {\r\n            screens.push({ eventKey: 'myjobs', name: \"IDS_MYJOBS\", formcode: formCode.MYJOBS });\r\n            screens.push({ eventKey: 'testwisemyjobs', name: \"IDS_TESTWISEMYJOBS\", formcode: formCode.TESTWISEMYJOBS });\r\n        }\r\n\r\n        screens.push({ eventKey: 'resultentry', name: \"IDS_RESULTENTRY\", formcode: formCode.RESULTENTRY },\r\n                    { eventKey: 'approval', name: \"IDS_APPROVAL\", formcode: formCode.APPROVAL });\r\n\r\n        let extractedColumnList =[];\r\n        if (this.props.selectedTemplateType === TemplateType.Masters){\r\n            extractedColumnList.push(              \r\n                { \"title\": \"IDS_GRIDITEM\", \"field\": \"griditem\", \"width\": \"600px\" },\r\n                { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"gridmoreitem\", \"width\": \"600px\" }\r\n            );\r\n        }\r\n        else{\r\n            if(this.props.operation === 'configuresubsample'){\r\n            //if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedsubsample === true) {\r\n                extractedColumnList.push(\r\n                    { \"title\": \"IDS_LISTITEM\", \"field\": \"subsamplelistitem\", \"width\": \"600px\" },\r\n                );\r\n            }\r\n            else\r\n            {\r\n                extractedColumnList.push(\r\n                    { \"title\": \"IDS_DISPLAYFIELDS\", \"field\": \"sampledisplayfields\", \"width\": \"600px\" },\r\n                    { \"title\": \"IDS_LISTITEM\", \"field\": \"samplelistitem\", \"width\": \"600px\" },\r\n                    // { \"title\": \"IDS_LISTMOREITEM\", \"field\": \"samplelistmoreitems\", \"width\": \"600px\" },\r\n                    { \"title\": \"IDS_GRIDITEM\", \"field\": \"samplegriditem\", \"width\": \"600px\" },\r\n                    { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"samplegridmoreitem\", \"width\": \"600px\" }\r\n                );\r\n            }\r\n        }\r\n        this.state = {\r\n            screens,\r\n            extractedColumnList,\r\n            selectedScreen: { eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: 43 }\r\n        }\r\n    }\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\r\n        })\r\n    }\r\n    render() {\r\n        console.log(\"props:\",this.props)\r\n      \r\n        return (\r\n            <>\r\n            {this.props.selectedTemplateType === TemplateType.Masters ?\r\n                    <PerfectScrollbar>\r\n                        {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                        <AtTableWrap className=\"at-list-table\">\r\n                            <LocalizationProvider language=\"lang\">\r\n                                <>\r\n                                    <Grid\r\n                                        className={\"active-paging\"}\r\n                                        style={{ height: '550px' }}\r\n                                        resizable\r\n                                        reorderable\r\n                                        scrollable={\"scrollable\"}\r\n                                        // pageable={{ buttonCount: 5, pageSizes: 4, previousNext: false }}\r\n                                        data={this.props.dataResult}\r\n                                        {...this.state.dataState}\r\n                                        onDataStateChange={this.dataStateChange}>\r\n                                        <GridColumn\r\n                                            field=\"label\"\r\n                                            // columnMenu={ColumnMenu}\r\n                                            title={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                            cell={(row) => (\r\n                                                <td data-tip={row[\"dataItem\"]['label']} \r\n                                                //data-for=\"tooltip-grid-wrap\"\r\n                                                >\r\n                                                    {row[\"dataItem\"]['label']}\r\n                                                </td>\r\n                                            )}\r\n                                        />\r\n                                        {this.state.extractedColumnList.map(column =>\r\n                                            <GridColumn\r\n                                                field={column.field}\r\n                                                title={this.props.intl.formatMessage({ id: column.title })}\r\n                                                headerClassName=\"text-center\"\r\n                                                cell={(row) => (\r\n                                                    <td style={{ textAlign: \"center\" }} data-tip={this.props.intl.formatMessage({ id: column.title })} \r\n                                                    //data-for=\"tooltip-grid-wrap\"\r\n                                                    >\r\n                                                        <CustomSwitch type=\"switch\" id={row[\"dataItem\"][column.field]}\r\n                                                            onChange={(event) => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex)}\r\n                                                            checked={row[\"dataItem\"][column.field] || false}\r\n                                                            name={row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                    </td>)}\r\n                                            />\r\n                                        )}\r\n\r\n                                    </Grid>\r\n                                </>\r\n                            </LocalizationProvider>\r\n                        </AtTableWrap>\r\n                        {/* <ReactTooltip /> */}\r\n                    </PerfectScrollbar>        \r\n\r\n                :\r\n                <AtTabs>\r\n                    <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                        {this.state.screens.map(screen =>\r\n                            <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n                                <PerfectScrollbar>\r\n                                    {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                                    <AtTableWrap className=\"at-list-table\">\r\n                                        <LocalizationProvider language=\"lang\">\r\n                                            <>\r\n                                                <Grid\r\n                                                    className={\"active-paging\"}\r\n                                                    //style={{ height: '550px' }}\r\n                                                    resizable\r\n                                                    reorderable\r\n                                                    scrollable={\"scrollable\"}\r\n                                                    // pageable={{ buttonCount: 5, pageSizes: 4, previousNext: false }}\r\n                                                    data={this.props.dataResult[this.state.selectedScreen.formcode]}\r\n                                                    {...this.state.dataState}\r\n                                                    onDataStateChange={this.dataStateChange}>\r\n                                                    <GridColumn\r\n                                                        field=\"label\"\r\n                                                        // columnMenu={ColumnMenu}\r\n                                                        title={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                        cell={(row) => (\r\n                                                            <td data-tip={row[\"dataItem\"]['label']}\r\n                                                            // data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                {row[\"dataItem\"]['label']}\r\n                                                            </td>\r\n                                                        )}\r\n                                                    />\r\n                                                    {this.state.extractedColumnList.map(column =>\r\n                                                        <GridColumn\r\n                                                            field={column.field}\r\n                                                            title={this.props.intl.formatMessage({ id: column.title })}\r\n                                                            headerClassName=\"text-center\"\r\n                                                            cell={(row) => (\r\n                                                                <td style={{ textAlign: \"center\" }} data-tip={this.props.intl.formatMessage({ id: column.title })} data-for=\"tooltip-grid-wrap\">\r\n                                                                   <CustomSwitch type=\"switch\" id={row[\"dataItem\"][column.field]}\r\n                                                                        onChange={(event) => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex, this.state.selectedScreen.formcode,this.props.operation)}\r\n                                                                        checked={row[\"dataItem\"][column.field] || false}\r\n                                                                        //checked={column.field === \"samplelistitem\" ? (row[\"dataItem\"][column.field] === \"none\" ? false :row[\"dataItem\"][column.field]) : (row[\"dataItem\"][column.field] || false)}\r\n                                                                        //disabled={column.field === \"samplelistitem\" ? (row[\"dataItem\"][column.field] === \"none\" ? true : false):false}\r\n                                                                        name={row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                                       \r\n                                                                </td>)}\r\n                                                        />\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n                                            </>\r\n                                        </LocalizationProvider>\r\n                                    </AtTableWrap>\r\n                                    {/* <ReactTooltip /> */}\r\n                                </PerfectScrollbar>\r\n                            </TabPane>\r\n                        )}\r\n                    </Tabs>\r\n                </AtTabs>\r\n            }\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(ConfigureScreenFields)"]},"metadata":{},"sourceType":"module"}