{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\mail\\\\emailconfig\\\\EmailConfig.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport AddEmailConfig from './AddEmailConfig';\nimport EmailConfigTab from './EmailConfigTab';\nimport AddUsersEmailConfig from './AddUsersEmailConfig';\nimport Esign from '../../audittrail/Esign';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { getEmailConfigDetail, callService, crudMaster, fetchEmailConfigById, getUserEmailConfig, filterColumnData, validateEsignCredential, openEmailConfigModal, getFormControls, updateStore } from '../../../actions';\nimport { constructOptionList, getControlMap, showEsign } from '../../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { transactionStatus } from '../../../components/Enumeration';\nimport { ContentPanel, ReadOnlyText } from '../../../components/App.styles';\nimport { faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'; // import ConfirmDialog from '../../../components/confirm-alert/confirm-alert.component';\n\nimport ListMaster from '../../../components/list-master/list-master.component'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\nimport ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass EmailConfig extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.ConfirmDelete = (screenname, SelectedEmailConfig, operation, ncontrolcode) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord( //screenname, SelectedEmailConfig, \n      operation, ncontrolcode));\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === 'nusercode') {\n        selectedRecord[\"nusercode\"] = comboData;\n        let availableDatas = \"\";\n        let availableList = [];\n        this.state.selectedRecord.nusercode.map(data => {\n          availableDatas = availableDatas + \",\" + data.value;\n          availableList.push(data.item);\n          return availableDatas;\n        });\n        this.setState({\n          selectedRecord,\n          availableDatas,\n          availableList\n        });\n      } else if (fieldName === 'nemailscreencode') {\n        selectedRecord[fieldName] = comboData;\n        this.props.getFormControls(selectedRecord, this.props.Login.userInfo);\n      } else {\n        //  const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } //     //const selectedRecord = this.state.selectedRecord || {};\n      //     selectedRecord[\"nusercode\"] = comboData;\n      //     let availableDatas =\"\";\n      //     let availableList= [];\n      //     this.state.selectedRecord.nusercode.map(data=> {\n      //         availableDatas=availableDatas+\",\"+data.value;\n      //         availableList.push(data.item);\n      //     return availableDatas;\n      //      });\n      //     this.setState({ selectedRecord,availableDatas,availableList });\n      // }\n      // else if(fieldName==='nuserrolecode'){\n      //     selectedRecord[\"nuserrolecode\"] = comboData;\n      // }\n      // else {\n      //    // const selectedRecord = this.state.selectedRecord || {};\n      //     selectedRecord[fieldName] = comboData;\n      //     this.setState({ selectedRecord });\n      // }\n      // if(fieldName==='nuserrolecode'){\n      //     this.props.onuseroleChange(this.props.Login.masterData,comboData.value,this.props.Login.userInfo,selectedRecord,this.state.availableList)\n      // }\n\n    };\n\n    this.deleteUsersRecord = inputData => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"Users\",\n        inputData: {\n          \"emailuserconfig\": inputData.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: 'delete',\n        displayName: \"IDS_USERS\",\n        dataState: this.state.dataState,\n        isChild: true,\n        postParam: {\n          inputListName: \"EmailConfig\",\n          selectedObject: \"SelectedEmailConfig\",\n          primaryKeyField: \"nemailconfigcode\",\n          fetchUrl: \"emailconfig/getEmailConfig\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        }\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: 'IDS_USERS',\n            operation: 'delete'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = ( //screenname, SelectedEmailConfig, \n    operation, ncontrolcode) => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"EmailConfig\",\n        inputData: {\n          \"emailuserconfig\": this.props.Login.masterData.SelectedEmailConfig,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: operation,\n        displayName: this.props.Login.inputParam.displayName,\n        dataState: this.state.dataState,\n        postParam: {\n          inputListName: \"EmailConfig\",\n          selectedObject: \"SelectedEmailConfig\",\n          primaryKeyField: \"nemailconfigcode\",\n          fetchUrl: \"emailconfig/getEmailConfig\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        }\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"EmailConfig\",\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n      const selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"EmailConfig\",\n          selectedObject: \"SelectedEmailConfig\",\n          primaryKeyField: \"nemailconfigcode\"\n        };\n        inputData[\"emailconfig\"] = JSON.parse(JSON.stringify(selectedRecord)); //inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n      } else {\n        inputData[\"emailconfig\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        inputData[\"emailuserconfig\"] = this.state.availableDatas.length > 0 ? this.state.availableDatas.slice(1, this.state.availableDatas.length) : null;\n      } //inputData[\"emailconfig\"][\"ntranscode\"] = this.state.selectedRecord[\"ntranscode\"] ? this.state.selectedRecord[\"ntranscode\"] : 14;\n\n\n      inputData[\"emailconfig\"][\"nneedattachment\"] = selectedRecord[\"nneedattachment\"] ? selectedRecord[\"nneedattachment\"] : 4;\n      inputData[\"emailconfig\"][\"nenableemail\"] = selectedRecord[\"nenableemail\"] ? selectedRecord[\"nenableemail\"] : transactionStatus.NO; //inputData[\"emailconfig\"][\"nactiontype\"] = selectedRecord[\"nactiontype\"] ? selectedRecord[\"nactiontype\"].value : -1;\n\n      inputData[\"emailconfig\"][\"ncontrolcode\"] = selectedRecord[\"ncontrolcode\"] ? selectedRecord[\"ncontrolcode\"].value : -1;\n      inputData[\"emailconfig\"][\"nformcode\"] = selectedRecord[\"nemailscreencode\"] ? selectedRecord.nemailscreencode.item.nformcode : -1;\n      inputData[\"emailconfig\"][\"nemailtemplatecode\"] = selectedRecord[\"nemailtemplatecode\"] ? selectedRecord[\"nemailtemplatecode\"].value : -1;\n      inputData[\"emailconfig\"][\"nemailscreencode\"] = selectedRecord[\"nemailscreencode\"] ? selectedRecord[\"nemailscreencode\"].value : -1;\n      inputData[\"emailconfig\"][\"nemailhostcode\"] = selectedRecord[\"nemailhostcode\"] ? selectedRecord[\"nemailhostcode\"].value : -1;\n      inputData[\"emailconfig\"][\"nemailuserquerycode\"] = selectedRecord[\"nemailuserquerycode\"] ? selectedRecord[\"nemailuserquerycode\"].value : -1;\n      inputData[\"emailconfig\"][\"nstatus\"] = transactionStatus.ACTIVE;\n\n      if (inputData[\"emailconfig\"][\"nemailuserquerycode\"] === undefined) {\n        inputData[\"emailconfig\"][\"nemailuserquerycode\"] = -1;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"EmailConfig\",\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      } // this.props.crudMaster(inputParam, this.props.Login.masterData,\"openModal\");\n\n    };\n\n    this.onUserSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n      let selectedId = null;\n      inputData[\"emailconfiguser\"] = this.state.selectedRecord;\n      inputData[\"nusercode\"] = this.state.availableDatas.length > 0 ? this.state.availableDatas.slice(1, this.state.availableDatas.length) : null;\n      inputData[\"nemailconfigcode\"] = this.props.Login.masterData.SelectedEmailConfig.nemailconfigcode ? this.props.Login.masterData.SelectedEmailConfig.nemailconfigcode : -1;\n      inputData[\"nstatus\"] = transactionStatus.ACTIVE;\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"Users\",\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        isChild: true,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        selectedId\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      } // this.props.crudMaster(inputParam, this.props.Login.masterData,\"openModal\");\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef(); // this.closeModal = this.closeModal.bind(this);\n\n    this.extractedColumnList = [];\n    this.userColumnList = [];\n    this.fieldList = [];\n    this.state = {\n      availableDatas: \"\",\n      availableList: \"\",\n      dataSource: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      isOpen: false,\n      EmailHost: [],\n      EmailScreen: [],\n      ActionType: [],\n      EmailTemplate: [],\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"shostname\", \"sscreenname\", \"scontrolids\", \"sformname\", \"stemplatename\"];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    this.extractedColumnList = [{\n      \"controlType\": \"textbox\",\n      \"idsName\": \"IDS_USERS\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\"\n    }, {\n      \"controlType\": \"textbox\",\n      \"idsName\": \"IDS_EMAILID\",\n      \"dataField\": \"semail\",\n      \"width\": \"200px\"\n    }];\n    const mandatoryFieldsEmailConfig = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_HOSTNAME\",\n      \"dataField\": \"nemailhostcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SCREENNAME\",\n      \"dataField\": \"nemailscreencode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TEMPLATENAME\",\n      \"dataField\": \"nemailtemplatecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_CONTROLNAME\",\n      \"dataField\": \"ncontrolcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFieldsUsers = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_USERS\",\n      \"dataField\": \"nusercode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"AddEmailConfig\") && this.state.controlMap.get(\"AddEmailConfig\").ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"EditEmailConfig\") && this.state.controlMap.get(\"EditEmailConfig\").ncontrolcode;\n    const deleteID = this.props.Login.inputParam && this.state.controlMap.has(\"DeleteEmailConfig\") && this.state.controlMap.get(\"DeleteEmailConfig\").ncontrolcode;\n    const addUserId = this.props.Login.inputParam && this.state.controlMap.has(\"AddEmailConfigUsers\") && this.state.controlMap.get(\"AddEmailConfigUsers\").ncontrolcode;\n    const editParam = {\n      SelectedEmailConfig: this.props.Login.masterData.SelectedEmailConfig,\n      screenName: \"IDS_MAILCONFIG\",\n      primaryKeyField: \"nemailconfigcode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    const filterParam = {\n      inputListName: \"EmailConfig\",\n      selectedObject: \"SelectedEmailConfig\",\n      primaryKeyField: \"nemailconfigcode\",\n      fetchUrl: \"emailconfig/getEmailConfig\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"list-fixed-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_MAILCONFIG\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.EmailConfig,\n      getMasterDetail: emailconfig => this.props.getEmailConfigDetail(emailconfig, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.SelectedEmailConfig,\n      primaryKeyField: \"nemailconfigcode\",\n      mainField: \"stemplatename\",\n      firstField: \"sscreenname\",\n      secondField: \"scontrolids\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: () => this.props.openEmailConfigModal(\"IDS_MAILCONFIG\", \"create\", this.props.Login.userInfo, addId),\n      isMultiSelecct: false,\n      hidePaging: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 33\n      }\n    }))))), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 30\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.EmailConfig && this.props.Login.masterData.EmailConfig.length > 0 && this.props.Login.masterData.SelectedEmailConfig ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.SelectedEmailConfig.stemplatename), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category title-grid-wrap-width-md\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"title-grid-width-md product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedEmailConfig.shostname, ' | ', this.props.Login.masterData.SelectedEmailConfig.senablestatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"product-category\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editUser\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(editID) === -1,\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      onClick: () => this.props.fetchEmailConfigById(editParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteUser\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteID) === -1,\n      onClick: () => this.ConfirmDelete(\"IDS_MAILCONFIG\", this.props.Login.masterData.SelectedEmailConfig, \"delete\", deleteID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 65\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_HOSTNAME\",\n      message: \"Host Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 76\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.SelectedEmailConfig.shostname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SCREENNAME\",\n      message: \"Screen Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 76\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.SelectedEmailConfig.sscreenname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MAILENABLE\",\n      message: \"Mail Enable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 76\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.SelectedEmailConfig.senablestatus))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_FORMNAME\",\n      message: \"Form Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 76\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.SelectedEmailConfig.sformname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CONTROLNAME\",\n      message: \"Control Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 76\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.SelectedEmailConfig.scontrolids))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EMAILQUERY\",\n      message: \"Email Query\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 76\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.SelectedEmailConfig.sdisplayname === null || this.props.Login.masterData.SelectedEmailConfig.sdisplayname.length === 0 || this.props.Login.masterData.SelectedEmailConfig.sdisplayname === 'NA' ? '-' : this.props.Login.masterData.SelectedEmailConfig.sdisplayname))))), /*#__PURE__*/React.createElement(EmailConfigTab, {\n      getUserEmailConfig: this.props.getUserEmailConfig,\n      addUserId: addUserId,\n      userInfo: this.props.Login.userInfo,\n      inputParam: this.props.Login.inputParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      controlMap: this.state.controlMap,\n      masterData: {\n        \"users\": this.props.Login.masterData.users || []\n      } //  crudMaster={this.props.crudMaster}\n      ,\n      methodUrl: \"EmailConfigUsers\",\n      deleteRecord: this.deleteUsersRecord,\n      deleteParam: deleteParam,\n      SelectedEmailConfig: this.props.Login.masterData.SelectedEmailConfig,\n      masterdata: this.props.Login.masterData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 49\n      }\n    }))) : \"\"))))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.props.Login.screenName === \"IDS_USERS\" ? this.onUserSaveClick : this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === \"IDS_USERS\" ? mandatoryFieldsUsers : mandatoryFieldsEmailConfig,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 25\n        }\n      }) : this.props.Login.screenName === \"IDS_MAILCONFIG\" ? /*#__PURE__*/React.createElement(AddEmailConfig, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        emailHost: this.state.EmailHost || [],\n        emailTemplate: this.state.EmailTemplate || [],\n        emailScreen: this.state.EmailScreen || [] //actionType={this.state.ActionType || []}\n        ,\n        formName: this.state.FormName,\n        formControls: this.state.FormControls,\n        emailQueryList: this.state.emailQueryList,\n        users: this.props.Login.AvailableUsers || [],\n        operation: this.props.Login.operation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 78\n        }\n      }) : /*#__PURE__*/React.createElement(AddUsersEmailConfig, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        users: this.props.Login.users || [],\n        operation: this.props.Login.operation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 30\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.EmailHost !== previousProps.Login.EmailHost || this.props.Login.EmailTemplate !== previousProps.Login.EmailTemplate || this.props.Login.EmailScreen !== previousProps.Login.EmailScreen || this.props.Login.FormControls !== previousProps.Login.FormControls || this.props.Login.FormName !== previousProps.Login.FormName || this.props.Login.EmailUserQuery !== previousProps.Login.EmailUserQuery) {\n      const EmailHost = constructOptionList(this.props.Login.EmailHost || [], \"nemailhostcode\", \"shostname\", undefined, undefined, undefined);\n      const EmailHostList = EmailHost.get(\"OptionList\");\n      const EmailTemplate = constructOptionList(this.props.Login.EmailTemplate || [], \"nemailtemplatecode\", \"stemplatename\", undefined, undefined, undefined);\n      const EmailTemplateList = EmailTemplate.get(\"OptionList\");\n      const EmailScreen = constructOptionList(this.props.Login.EmailScreen || [], \"nemailscreencode\", \"sscreenname\", undefined, undefined, undefined);\n      const EmailScreenList = EmailScreen.get(\"OptionList\"); // const ActionType = constructOptionList(this.props.Login.ActionType || [], \"nactiontype\",\n      //     \"stransdisplaystatus\", undefined, undefined, undefined);\n      // const ActionTypeList = ActionType.get(\"OptionList\");\n\n      const FormName = constructOptionList(this.props.Login.FormName || [], \"nformcode\", \"sformname\", undefined, undefined, undefined);\n      const FormNameList = FormName.get(\"OptionList\");\n      const FormControls = constructOptionList(this.props.Login.FormControls || [], \"ncontrolcode\", \"scontrolids\", undefined, undefined, undefined);\n      const FormControlList = FormControls.get(\"OptionList\");\n      const EmailQuery = constructOptionList(this.props.Login.EmailUserQuery || [], \"nemailuserquerycode\", \"sdisplayname\", undefined, undefined, undefined);\n      const EmailQueryList = EmailQuery.get(\"OptionList\");\n      this.setState({\n        EmailHost: EmailHostList,\n        EmailTemplate: EmailTemplateList,\n        EmailScreen: EmailScreenList,\n        FormName: FormNameList,\n        FormControls: FormControlList,\n        emailQueryList: EmailQueryList\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getEmailConfigDetail,\n  callService,\n  filterColumnData,\n  getUserEmailConfig,\n  crudMaster,\n  fetchEmailConfigById,\n  validateEsignCredential,\n  openEmailConfigModal,\n  getFormControls,\n  updateStore\n})(injectIntl(EmailConfig));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/mail/emailconfig/EmailConfig.jsx"],"names":["React","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","toast","AddEmailConfig","EmailConfigTab","AddUsersEmailConfig","Esign","SlideOutModal","getEmailConfigDetail","callService","crudMaster","fetchEmailConfigById","getUserEmailConfig","filterColumnData","validateEsignCredential","openEmailConfigModal","getFormControls","updateStore","constructOptionList","getControlMap","showEsign","DEFAULT_RETURN","transactionStatus","ContentPanel","ReadOnlyText","faPencilAlt","faTrashAlt","FontAwesomeIcon","ListMaster","ConfirmMessage","ReactTooltip","mapStateToProps","state","Login","EmailConfig","Component","constructor","props","ConfirmDelete","screenname","SelectedEmailConfig","operation","ncontrolcode","confirmMessage","confirm","intl","formatMessage","id","deleteRecord","closeModal","loadEsign","openModal","selectedRecord","updateInfo","typeName","data","selectedId","onInputOnChange","event","target","type","name","checked","YES","NO","value","setState","onComboChange","comboData","fieldName","availableDatas","availableList","nusercode","map","push","item","userInfo","deleteUsersRecord","inputData","inputParam","classUrl","methodUrl","displayName","dataState","isChild","postParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","userinfo","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","reloadData","searchRef","current","onSaveClick","saveType","formRef","undefined","JSON","parse","stringify","nmastersitecode","length","slice","nemailscreencode","ACTIVE","onUserSaveClick","nemailconfigcode","validateEsign","sreason","password","createRef","extractedColumnList","userColumnList","fieldList","dataSource","masterStatus","error","isOpen","EmailHost","EmailScreen","ActionType","EmailTemplate","controlMap","Map","searchFieldList","getDerivedStateFromProps","warn","render","mandatoryFieldsEmailConfig","mandatoryFieldsUsers","addId","has","get","editID","deleteID","addUserId","editParam","deleteParam","filterParam","searchedData","emailconfig","stemplatename","shostname","senablestatus","float","indexOf","sscreenname","sformname","scontrolids","sdisplayname","users","FormName","FormControls","emailQueryList","AvailableUsers","componentDidUpdate","previousProps","Object","values","EmailUserQuery","EmailHostList","EmailTemplateList","EmailScreenList","FormNameList","FormControlList","EmailQuery","EmailQueryList","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport AddEmailConfig from './AddEmailConfig';\r\nimport EmailConfigTab from './EmailConfigTab';\r\nimport AddUsersEmailConfig from './AddUsersEmailConfig';\r\nimport Esign from '../../audittrail/Esign';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { getEmailConfigDetail, callService, crudMaster, fetchEmailConfigById, getUserEmailConfig, filterColumnData, validateEsignCredential, openEmailConfigModal, getFormControls, updateStore } from '../../../actions';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\nimport { ContentPanel, ReadOnlyText, } from '../../../components/App.styles';\r\nimport { faPencilAlt, faTrashAlt, } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import ConfirmDialog from '../../../components/confirm-alert/confirm-alert.component';\r\nimport ListMaster from '../../../components/list-master/list-master.component';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\nimport ReactTooltip from 'react-tooltip';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass EmailConfig extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        // this.closeModal = this.closeModal.bind(this);\r\n        this.extractedColumnList = [];\r\n        this.userColumnList = [];\r\n        this.fieldList = [];\r\n\r\n\r\n\r\n        this.state = {\r\n            availableDatas: \"\",\r\n            availableList: \"\",\r\n            dataSource: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            isOpen: false,\r\n            EmailHost: [],\r\n            EmailScreen: [],\r\n            ActionType: [],\r\n            EmailTemplate: [],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.searchFieldList = [\"shostname\", \"sscreenname\", \"scontrolids\", \"sformname\", \"stemplatename\"];\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    };\r\n\r\n    ConfirmDelete = (screenname, SelectedEmailConfig, operation, ncontrolcode) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(//screenname, SelectedEmailConfig, \r\n                operation, ncontrolcode));\r\n    };\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    render() {\r\n        this.extractedColumnList = [\r\n                                    { \"controlType\": \"textbox\", \"idsName\": \"IDS_USERS\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n                                    { \"controlType\": \"textbox\", \"idsName\": \"IDS_EMAILID\", \"dataField\": \"semail\", \"width\": \"200px\" },\r\n                                ];\r\n\r\n        const mandatoryFieldsEmailConfig = [\r\n                                            { \"mandatory\": true, \"idsName\": \"IDS_HOSTNAME\", \"dataField\": \"nemailhostcode\"  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                                            { \"mandatory\": true, \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"nemailscreencode\"  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                                            { \"mandatory\": true, \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"nemailtemplatecode\"  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                                            { \"mandatory\": true, \"idsName\": \"IDS_CONTROLNAME\", \"dataField\": \"ncontrolcode\"  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n                                        ];\r\n\r\n        const mandatoryFieldsUsers = [{ \"mandatory\": true, \"idsName\": \"IDS_USERS\", \"dataField\": \"nusercode\"  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}];\r\n        \r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"AddEmailConfig\")\r\n            && this.state.controlMap.get(\"AddEmailConfig\").ncontrolcode;\r\n\r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"EditEmailConfig\")\r\n            && this.state.controlMap.get(\"EditEmailConfig\").ncontrolcode;\r\n\r\n        const deleteID = this.props.Login.inputParam && this.state.controlMap.has(\"DeleteEmailConfig\")\r\n            && this.state.controlMap.get(\"DeleteEmailConfig\").ncontrolcode;\r\n\r\n\r\n        const addUserId = this.props.Login.inputParam && this.state.controlMap.has(\"AddEmailConfigUsers\")\r\n            && this.state.controlMap.get(\"AddEmailConfigUsers\").ncontrolcode;\r\n\r\n        const editParam = {\r\n            SelectedEmailConfig: this.props.Login.masterData.SelectedEmailConfig,\r\n            screenName: \"IDS_MAILCONFIG\", primaryKeyField: \"nemailconfigcode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editID\r\n        };\r\n\r\n        const deleteParam = { operation: \"delete\" };\r\n\r\n        const filterParam = {  inputListName: \"EmailConfig\", selectedObject: \"SelectedEmailConfig\", primaryKeyField: \"nemailconfigcode\",\r\n                                fetchUrl: \"emailconfig/getEmailConfig\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                                masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList\r\n                            };\r\n        return (<>\r\n            {/* Start of get display*/}\r\n            <div className=\"client-listing-wrap mtop-4\">\r\n                <Row noGutters={true}>\r\n                    <Col md={4}>\r\n                        <Row noGutters={true}><Col md={12}>\r\n                            <div className=\"list-fixed-wrap\">\r\n                                <ListMaster\r\n                                    screenName={this.props.intl.formatMessage({ id: \"IDS_MAILCONFIG\" })}\r\n                                    masterData={this.props.Login.masterData}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.EmailConfig}\r\n                                    getMasterDetail={(emailconfig) => this.props.getEmailConfigDetail(emailconfig, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                    selectedMaster={this.props.Login.masterData.SelectedEmailConfig}\r\n                                    primaryKeyField=\"nemailconfigcode\"\r\n                                    mainField=\"stemplatename\"\r\n                                    firstField= \"sscreenname\"\r\n                                    secondField= \"scontrolids\"\r\n                                    filterColumnData={this.props.filterColumnData}\r\n                                    filterParam={filterParam}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    addId={addId}\r\n                                    searchRef={this.searchRef}\r\n                                    reloadData={this.reloadData}\r\n                                    openModal={() => this.props.openEmailConfigModal(\"IDS_MAILCONFIG\", \"create\", this.props.Login.userInfo, addId)}\r\n                                    isMultiSelecct={false}\r\n                                    hidePaging={true}\r\n                                />\r\n                            </div>\r\n                        </Col></Row>\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <Row><Col md={12}>\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.EmailConfig && this.props.Login.masterData.EmailConfig.length > 0 && this.props.Login.masterData.SelectedEmailConfig ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                                                <Card.Title className=\"product-title-main\">\r\n                                                    {this.props.Login.masterData.SelectedEmailConfig.stemplatename}\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle>\r\n                                                    <div className=\"d-flex product-category title-grid-wrap-width-md\">\r\n                                                        <div>\r\n                                                        <h6 className=\"title-grid-width-md product-title-sub flex-grow-1\">\r\n                                                            {this.props.Login.masterData.SelectedEmailConfig.shostname}{' | '}{this.props.Login.masterData.SelectedEmailConfig.senablestatus}\r\n                                                            {/* <FormattedMessage id= {this.props.Login.masterData.SelectedUser.sactivestatus}/> */}\r\n                                                        </h6>\r\n                                                        </div>\r\n                                                       \r\n                                                        {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                        <div className=\"product-category\" style={{ float: \"right\" }}>\r\n                                                            <Nav.Link name=\"editUser\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(editID) === -1}\r\n                                                                className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                onClick={() => this.props.fetchEmailConfigById(editParam)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link name=\"deleteUser\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(deleteID) === -1}\r\n                                                                onClick={() => this.ConfirmDelete(\"IDS_MAILCONFIG\", this.props.Login.masterData.SelectedEmailConfig, \"delete\", deleteID)}>\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                {/* <ConfirmDialog \r\n                                                                name=\"deleteMessage\" \r\n                                                                message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\"})}\r\n                                                                doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}  \r\n                                                                doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                icon={faTrashAlt}\r\n                                                               // title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                //hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                handleClickDelete={() => this.deleteRecord(\"IDS_MAILCONFIG\", this.props.Login.masterData.SelectedEmailConfig, \r\n                                                                \"delete\", deleteID)} \r\n                                                            /> */}\r\n                                                            </Nav.Link>\r\n                                                        </div>\r\n                                                        {/* </Tooltip> */}\r\n                                                    </div>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Card.Text>\r\n                                                    <Row>\r\n                                                        <Col md={4}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id=\"IDS_HOSTNAME\" message=\"Host Name\" /></FormLabel>\r\n                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedEmailConfig.shostname}</ReadOnlyText>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n                                                        <Col md={4}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id=\"IDS_SCREENNAME\" message=\"Screen Name\" /></FormLabel>\r\n                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedEmailConfig.sscreenname}</ReadOnlyText>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n\r\n                                                        <Col md={4}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id=\"IDS_MAILENABLE\" message=\"Mail Enable\" /></FormLabel>\r\n                                                                <ReadOnlyText>\r\n                                                                    {this.props.Login.masterData.SelectedEmailConfig.senablestatus}\r\n                                                                </ReadOnlyText>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n                                                        <Col md={4}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id=\"IDS_FORMNAME\" message=\"Form Name\" /></FormLabel>\r\n                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedEmailConfig.sformname}</ReadOnlyText>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n                                                        <Col md={4}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id=\"IDS_CONTROLNAME\" message=\"Control Name\" /></FormLabel>\r\n                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedEmailConfig.scontrolids}</ReadOnlyText>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n\r\n                                                        <Col md={4}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id=\"IDS_EMAILQUERY\" message=\"Email Query\" /></FormLabel>\r\n                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedEmailConfig.sdisplayname === null || \r\n                                                                this.props.Login.masterData.SelectedEmailConfig.sdisplayname.length === 0 ||\r\n                                                                this.props.Login.masterData.SelectedEmailConfig.sdisplayname === 'NA' ? '-' :\r\n                                                                    this.props.Login.masterData.SelectedEmailConfig.sdisplayname}\r\n                                                                </ReadOnlyText>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n\r\n                                                        {/* <Col md={4}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id=\"IDS_ACTIONTYPE\" message=\"Action Type\" /></FormLabel>\r\n                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedEmailConfig.sactiontype}</ReadOnlyText>\r\n                                                            </FormGroup>\r\n                                                        </Col> */}\r\n                                                    </Row>\r\n                                                </Card.Text>\r\n                                                <EmailConfigTab\r\n                                                    getUserEmailConfig={this.props.getUserEmailConfig}\r\n                                                    addUserId={addUserId}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    inputParam={this.props.Login.inputParam}\r\n                                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                                    controlMap={this.state.controlMap}\r\n                                                    masterData={{\r\n                                                        \"users\": this.props.Login.masterData.users || [],\r\n                                                    }}\r\n                                                    //  crudMaster={this.props.crudMaster}\r\n                                                    methodUrl=\"EmailConfigUsers\"\r\n                                                    deleteRecord={this.deleteUsersRecord}\r\n                                                    deleteParam={deleteParam}\r\n                                                    SelectedEmailConfig={this.props.Login.masterData.SelectedEmailConfig}\r\n                                                    masterdata={this.props.Login.masterData}\r\n                                                />\r\n                                            </Card.Body>\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col></Row>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n            {this.props.Login.openModal &&\r\n                <SlideOutModal\r\n                    show={this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={this.props.Login.screenName === \"IDS_USERS\" ? this.onUserSaveClick : this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    mandatoryFields={this.props.Login.screenName === \"IDS_USERS\" ? mandatoryFieldsUsers : mandatoryFieldsEmailConfig}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    updateStore={this.props.updateStore}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign\r\n                            operation={this.props.Login.operation}\r\n                            formatMessage={this.props.intl.formatMessage}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                        : this.props.Login.screenName === \"IDS_MAILCONFIG\" ? <AddEmailConfig\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            onComboChange={this.onComboChange}\r\n                            emailHost={this.state.EmailHost || []}\r\n                            emailTemplate={this.state.EmailTemplate || []}\r\n                            emailScreen={this.state.EmailScreen || []}\r\n                            //actionType={this.state.ActionType || []}\r\n                            formName={this.state.FormName}\r\n                            formControls={this.state.FormControls}\r\n                            emailQueryList={this.state.emailQueryList}\r\n                            users={this.props.Login.AvailableUsers || []}\r\n                            operation={this.props.Login.operation}\r\n                        /> : <AddUsersEmailConfig\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            onComboChange={this.onComboChange}\r\n                            users={this.props.Login.users || []}\r\n                            operation={this.props.Login.operation}\r\n                        />\r\n                    }\r\n                />\r\n            }\r\n        </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({userRoleControlRights, controlMap});\r\n            }\r\n        } \r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n        if (this.props.Login.EmailHost !== previousProps.Login.EmailHost\r\n             || this.props.Login.EmailTemplate !== previousProps.Login.EmailTemplate \r\n             || this.props.Login.EmailScreen !== previousProps.Login.EmailScreen\r\n            || this.props.Login.FormControls !== previousProps.Login.FormControls \r\n            || this.props.Login.FormName !== previousProps.Login.FormName\r\n            || this.props.Login.EmailUserQuery  !== previousProps.Login.EmailUserQuery) {\r\n\r\n            const EmailHost = constructOptionList(this.props.Login.EmailHost || [], \"nemailhostcode\",\r\n                \"shostname\", undefined, undefined, undefined);\r\n            const EmailHostList = EmailHost.get(\"OptionList\");\r\n\r\n            const EmailTemplate = constructOptionList(this.props.Login.EmailTemplate || [], \"nemailtemplatecode\",\r\n                \"stemplatename\", undefined, undefined, undefined);\r\n            const EmailTemplateList = EmailTemplate.get(\"OptionList\");\r\n\r\n            const EmailScreen = constructOptionList(this.props.Login.EmailScreen || [], \"nemailscreencode\",\r\n                \"sscreenname\", undefined, undefined, undefined);\r\n            const EmailScreenList = EmailScreen.get(\"OptionList\");\r\n\r\n            // const ActionType = constructOptionList(this.props.Login.ActionType || [], \"nactiontype\",\r\n            //     \"stransdisplaystatus\", undefined, undefined, undefined);\r\n            // const ActionTypeList = ActionType.get(\"OptionList\");\r\n\r\n            const FormName = constructOptionList(this.props.Login.FormName || [], \"nformcode\",\r\n                \"sformname\", undefined, undefined, undefined);\r\n            const FormNameList = FormName.get(\"OptionList\");\r\n\r\n            const FormControls = constructOptionList(this.props.Login.FormControls || [], \"ncontrolcode\",\r\n                \"scontrolids\", undefined, undefined, undefined);\r\n            const FormControlList = FormControls.get(\"OptionList\");\r\n\r\n            const EmailQuery = constructOptionList(this.props.Login.EmailUserQuery || [], \"nemailuserquerycode\",\r\n                \"sdisplayname\", undefined, undefined, undefined);\r\n            const EmailQueryList = EmailQuery.get(\"OptionList\");\r\n\r\n            this.setState({ EmailHost: EmailHostList, EmailTemplate: EmailTemplateList,\r\n                 EmailScreen: EmailScreenList, FormName: FormNameList, FormControls: FormControlList,emailQueryList:EmailQueryList });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (fieldName === 'nusercode') {\r\n\r\n            selectedRecord[\"nusercode\"] = comboData;\r\n            let availableDatas = \"\";\r\n            let availableList = [];\r\n            this.state.selectedRecord.nusercode.map(data => {\r\n                availableDatas = availableDatas + \",\" + data.value;\r\n                availableList.push(data.item);\r\n                return availableDatas;\r\n            });\r\n            this.setState({ selectedRecord, availableDatas, availableList });\r\n        }\r\n        else if (fieldName === 'nemailscreencode') {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.getFormControls(selectedRecord, this.props.Login.userInfo);\r\n        }\r\n        else {\r\n            //  const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n        //     //const selectedRecord = this.state.selectedRecord || {};\r\n        //     selectedRecord[\"nusercode\"] = comboData;\r\n        //     let availableDatas =\"\";\r\n        //     let availableList= [];\r\n        //     this.state.selectedRecord.nusercode.map(data=> {\r\n        //         availableDatas=availableDatas+\",\"+data.value;\r\n        //         availableList.push(data.item);\r\n        //     return availableDatas;\r\n        //      });\r\n        //     this.setState({ selectedRecord,availableDatas,availableList });\r\n        // }\r\n        // else if(fieldName==='nuserrolecode'){\r\n        //     selectedRecord[\"nuserrolecode\"] = comboData;\r\n        // }\r\n        // else {\r\n        //    // const selectedRecord = this.state.selectedRecord || {};\r\n        //     selectedRecord[fieldName] = comboData;\r\n        //     this.setState({ selectedRecord });\r\n\r\n        // }\r\n        // if(fieldName==='nuserrolecode'){\r\n        //     this.props.onuseroleChange(this.props.Login.masterData,comboData.value,this.props.Login.userInfo,selectedRecord,this.state.availableList)\r\n\r\n        // }\r\n\r\n    }\r\n\r\n    deleteUsersRecord = (inputData) => {\r\n        const inputParam = {\r\n                            classUrl: this.props.Login.inputParam.classUrl,\r\n                            methodUrl: \"Users\",\r\n\r\n                            inputData: {\r\n                                \"emailuserconfig\": inputData.selectedRecord,\r\n                                \"userinfo\": this.props.Login.userInfo\r\n                            },\r\n                            operation: 'delete',\r\n                            displayName: \"IDS_USERS\",\r\n                            dataState: this.state.dataState, isChild:true,\r\n                            postParam :{ inputListName: \"EmailConfig\", selectedObject: \"SelectedEmailConfig\", \r\n                                          primaryKeyField: \"nemailconfigcode\",\r\n                                          fetchUrl:\"emailconfig/getEmailConfig\",\r\n                                          fecthInputObject: { userinfo: this.props.Login.userInfo } }\r\n                        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: 'IDS_USERS',\r\n                    operation: 'delete'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    deleteRecord = (//screenname, SelectedEmailConfig, \r\n        operation, ncontrolcode) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"EmailConfig\",\r\n\r\n            inputData: {\r\n                \"emailuserconfig\": this.props.Login.masterData.SelectedEmailConfig,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: operation,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            dataState: this.state.dataState,\r\n            postParam :{ inputListName: \"EmailConfig\", selectedObject: \"SelectedEmailConfig\", \r\n                            primaryKeyField: \"nemailconfigcode\",\r\n                            fetchUrl:\"emailconfig/getEmailConfig\",\r\n                            fecthInputObject: { userinfo: this.props.Login.userInfo } }\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"EmailConfig\",\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n\r\n        const selectedRecord = this.state.selectedRecord;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"EmailConfig\", selectedObject: \"SelectedEmailConfig\", \r\n                            primaryKeyField: \"nemailconfigcode\" }\r\n            inputData[\"emailconfig\"] = JSON.parse(JSON.stringify(selectedRecord));\r\n            //inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n\r\n        } else {\r\n            inputData[\"emailconfig\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            inputData[\"emailuserconfig\"] = this.state.availableDatas.length > 0 ? this.state.availableDatas.slice(1, this.state.availableDatas.length) : null;\r\n\r\n        }\r\n        //inputData[\"emailconfig\"][\"ntranscode\"] = this.state.selectedRecord[\"ntranscode\"] ? this.state.selectedRecord[\"ntranscode\"] : 14;\r\n        inputData[\"emailconfig\"][\"nneedattachment\"] = selectedRecord[\"nneedattachment\"] ? selectedRecord[\"nneedattachment\"] : 4;\r\n        inputData[\"emailconfig\"][\"nenableemail\"] = selectedRecord[\"nenableemail\"] ? selectedRecord[\"nenableemail\"] : transactionStatus.NO;\r\n        //inputData[\"emailconfig\"][\"nactiontype\"] = selectedRecord[\"nactiontype\"] ? selectedRecord[\"nactiontype\"].value : -1;\r\n        inputData[\"emailconfig\"][\"ncontrolcode\"] = selectedRecord[\"ncontrolcode\"] ? selectedRecord[\"ncontrolcode\"].value : -1;\r\n        inputData[\"emailconfig\"][\"nformcode\"] = selectedRecord[\"nemailscreencode\"] ? selectedRecord.nemailscreencode.item.nformcode  : -1;\r\n        inputData[\"emailconfig\"][\"nemailtemplatecode\"] = selectedRecord[\"nemailtemplatecode\"] ? selectedRecord[\"nemailtemplatecode\"].value : -1;\r\n        inputData[\"emailconfig\"][\"nemailscreencode\"] = selectedRecord[\"nemailscreencode\"] ? selectedRecord[\"nemailscreencode\"].value : -1;\r\n        inputData[\"emailconfig\"][\"nemailhostcode\"] = selectedRecord[\"nemailhostcode\"] ? selectedRecord[\"nemailhostcode\"].value : -1;\r\n        inputData[\"emailconfig\"][\"nemailuserquerycode\"] = selectedRecord[\"nemailuserquerycode\"] ? selectedRecord[\"nemailuserquerycode\"].value : -1;\r\n        inputData[\"emailconfig\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n\r\n        if (inputData[\"emailconfig\"][\"nemailuserquerycode\"] === undefined){\r\n            inputData[\"emailconfig\"][\"nemailuserquerycode\"] = -1;\r\n        }\r\n\r\n            const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"EmailConfig\",\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n        // this.props.crudMaster(inputParam, this.props.Login.masterData,\"openModal\");\r\n    }\r\n\r\n    onUserSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        let selectedId = null;\r\n        inputData[\"emailconfiguser\"] = this.state.selectedRecord;\r\n        inputData[\"nusercode\"] = this.state.availableDatas.length > 0 ? this.state.availableDatas.slice(1, this.state.availableDatas.length) : null;\r\n        inputData[\"nemailconfigcode\"] = this.props.Login.masterData.SelectedEmailConfig.nemailconfigcode ? this.props.Login.masterData.SelectedEmailConfig.nemailconfigcode : -1;\r\n        inputData[\"nstatus\"] = transactionStatus.ACTIVE;\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"Users\",\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,isChild:true,\r\n            saveType, formRef, postParam, searchRef: this.searchRef, selectedId\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n        // this.props.crudMaster(inputParam, this.props.Login.masterData,\"openModal\");\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, { getEmailConfigDetail, callService, filterColumnData, getUserEmailConfig, crudMaster, fetchEmailConfigById, validateEsignCredential, openEmailConfigModal, getFormControls, updateStore })(injectIntl(EmailConfig));"]},"metadata":{},"sourceType":"module"}