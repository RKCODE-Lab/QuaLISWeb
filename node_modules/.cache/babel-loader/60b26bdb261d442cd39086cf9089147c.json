{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * Process the data collection/s based on the clicked ListBoxToolbar tool.\n *\n * @param {T[]} listBoxOneData - The first data collection.\n * @param {T[]} listBoxTwoData - The second data collection. Pass an empty array if there is only one ListBox.\n * @param {string} toolName - The tool that was clicked.\n * @param {string} selectedField - The field that contains the selected information in the data object.\n * @returns {{listBoxOneData: T[], listBoxTwoData: t[]}} - The object that contains the new data collections.\n */\n// tslint:disable-next-line: max-line-length\n\n\nexport var processListBoxData = function processListBoxData(listBoxOneData, listBoxTwoData, toolName, selectedField) {\n  if (listBoxOneData === void 0) {\n    listBoxOneData = [];\n  }\n\n  if (listBoxTwoData === void 0) {\n    listBoxTwoData = [];\n  }\n\n  var newFirstData = [];\n  var itemsForTransfer = [];\n  var newSecondData = [];\n  var result = {\n    listBoxOneData: listBoxOneData,\n    listBoxTwoData: listBoxTwoData\n  };\n\n  switch (toolName) {\n    case 'moveUp':\n      newFirstData = __spreadArray([], listBoxOneData, true);\n      newFirstData.forEach(function (item, index) {\n        if (item[selectedField]) {\n          newFirstData = moveItem(index, index - 1, newFirstData);\n        }\n      });\n      newSecondData = __spreadArray([], listBoxTwoData, true);\n      newSecondData.forEach(function (item, index) {\n        if (item[selectedField]) {\n          newSecondData = moveItem(index, index - 1, newSecondData);\n        }\n      });\n      result.listBoxOneData = newFirstData;\n      result.listBoxTwoData = newSecondData;\n      break;\n\n    case 'moveDown':\n      newFirstData = listBoxOneData.reverse();\n      newFirstData.forEach(function (item, index) {\n        if (item[selectedField]) {\n          newFirstData = moveItem(index, index - 1, newFirstData);\n        }\n      });\n      newSecondData = listBoxTwoData.reverse();\n      newSecondData.forEach(function (item, index) {\n        if (item[selectedField]) {\n          newSecondData = moveItem(index, index - 1, newSecondData);\n        }\n      });\n      result.listBoxOneData = __spreadArray([], newFirstData, true).reverse();\n      result.listBoxTwoData = __spreadArray([], newSecondData, true).reverse();\n      break;\n\n    case 'transferTo':\n      newFirstData = listBoxOneData.filter(function (item) {\n        return !item[selectedField];\n      });\n      itemsForTransfer = listBoxOneData.filter(function (item) {\n        return item[selectedField];\n      });\n      newSecondData = listBoxTwoData.concat(itemsForTransfer);\n      result.listBoxOneData = newFirstData;\n      result.listBoxTwoData = newSecondData;\n      break;\n\n    case 'transferFrom':\n      newSecondData = listBoxTwoData.filter(function (item) {\n        return !item[selectedField];\n      });\n      itemsForTransfer = listBoxTwoData.filter(function (item) {\n        return item[selectedField];\n      });\n      newFirstData = listBoxOneData.concat(itemsForTransfer);\n      result.listBoxOneData = newFirstData;\n      result.listBoxTwoData = newSecondData;\n      break;\n\n    case 'transferAllTo':\n      result.listBoxOneData = [];\n      result.listBoxTwoData = listBoxTwoData.concat(listBoxOneData);\n      break;\n\n    case 'transferAllFrom':\n      result.listBoxOneData = listBoxTwoData.concat(listBoxOneData);\n      result.listBoxTwoData = [];\n      break;\n\n    case 'remove':\n      newSecondData = listBoxTwoData.filter(function (item) {\n        return !item[selectedField];\n      });\n      newFirstData = listBoxOneData.filter(function (item) {\n        return !item[selectedField];\n      });\n      result.listBoxOneData = newFirstData;\n      result.listBoxTwoData = newSecondData;\n      break;\n\n    default:\n  }\n\n  return result;\n};\n/**\n * @hidden\n */\n\nexport var moveItem = function moveItem(from, to, data) {\n  var f = data.splice(from, 1)[0];\n  data.splice(to, 0, f);\n  return data;\n};\n/**\n * Process the data collection/s based on the dragged and drop item.\n *\n * @param {T[]} listBoxOneData - The first data collection.\n * @param {T[]} listBoxTwoData - The second data collection. Pass an empty array if there is only one ListBox.\n * @param {any} dragItem - The item that was dragged.\n * @param {any} dropItem - The drop target item.\n * @param {string} valueField - The field which points to the unique value of each data item.\n * @returns {{listBoxOneData: T[], listBoxTwoData: t[]}} - The object that contains the new data collections.\n */\n// tslint:disable-next-line: max-line-length\n\nexport var processListBoxDragAndDrop = function processListBoxDragAndDrop(listBoxOneData, listBoxTwoData, dragItem, dropItem, valueField) {\n  if (listBoxOneData === void 0) {\n    listBoxOneData = [];\n  }\n\n  if (listBoxTwoData === void 0) {\n    listBoxTwoData = [];\n  }\n\n  var dragItemIndexInFirstList = listBoxOneData.findIndex(function (item) {\n    return item[valueField] === dragItem[valueField];\n  });\n  var dragItemIndexInSecondList = listBoxTwoData.findIndex(function (item) {\n    return item[valueField] === dragItem[valueField];\n  });\n  var dropItemIndexInFirstList = dropItem !== null ? listBoxOneData.findIndex(function (item) {\n    return item[valueField] === dropItem[valueField];\n  }) : -1;\n  var dropItemIndexInSecondList = dropItem !== null ? listBoxTwoData.findIndex(function (item) {\n    return item[valueField] === dropItem[valueField];\n  }) : -1;\n  var isDragItemInFirstList = dragItemIndexInFirstList >= 0 ? true : false;\n  var isDragItemInSecondList = dragItemIndexInSecondList >= 0 ? true : false;\n  var isDropItemInFirstList = dropItemIndexInFirstList >= 0 ? true : false;\n  var isDropItemInSecondList = dropItemIndexInSecondList >= 0 ? true : false;\n\n  var firstDataSet = __spreadArray([], listBoxOneData, true);\n\n  var secondDataSet = __spreadArray([], listBoxTwoData, true);\n\n  if (isDragItemInFirstList && isDropItemInFirstList) {\n    return {\n      listBoxOneData: moveItem(dragItemIndexInFirstList, dropItemIndexInFirstList, listBoxOneData),\n      listBoxTwoData: listBoxTwoData\n    };\n  }\n\n  if (isDragItemInSecondList && isDropItemInSecondList) {\n    return {\n      listBoxOneData: listBoxOneData,\n      listBoxTwoData: moveItem(dragItemIndexInSecondList, dropItemIndexInSecondList, listBoxTwoData)\n    };\n  }\n\n  if (isDragItemInFirstList && (isDropItemInSecondList || dropItem === null)) {\n    if (dropItem === null) {\n      secondDataSet.push(listBoxOneData[dragItemIndexInFirstList]);\n    } else {\n      secondDataSet.splice(dropItemIndexInSecondList + 1, 0, listBoxOneData[dragItemIndexInFirstList]);\n    }\n\n    firstDataSet.splice(dragItemIndexInFirstList, 1);\n    return {\n      listBoxOneData: firstDataSet,\n      listBoxTwoData: secondDataSet\n    };\n  }\n\n  if (isDragItemInSecondList && (isDropItemInFirstList || dropItem === null)) {\n    if (dropItem === null) {\n      firstDataSet.push(listBoxTwoData[dragItemIndexInSecondList]);\n    } else {\n      firstDataSet.splice(dropItemIndexInFirstList + 1, 0, listBoxTwoData[dragItemIndexInSecondList]);\n    }\n\n    secondDataSet.splice(dragItemIndexInSecondList, 1);\n    return {\n      listBoxOneData: firstDataSet,\n      listBoxTwoData: secondDataSet\n    };\n  }\n\n  return {\n    listBoxOneData: listBoxOneData,\n    listBoxTwoData: listBoxTwoData\n  };\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/node_modules/@progress/kendo-react-listbox/dist/es/utils.js"],"names":["__spreadArray","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","processListBoxData","listBoxOneData","listBoxTwoData","toolName","selectedField","newFirstData","itemsForTransfer","newSecondData","result","forEach","item","index","moveItem","reverse","filter","data","f","splice","processListBoxDragAndDrop","dragItem","dropItem","valueField","dragItemIndexInFirstList","findIndex","dragItemIndexInSecondList","dropItemIndexInFirstList","dropItemIndexInSecondList","isDragItemInFirstList","isDragItemInSecondList","isDropItemInFirstList","isDropItemInSecondList","firstDataSet","secondDataSet","push"],"mappings":"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","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * Process the data collection/s based on the clicked ListBoxToolbar tool.\n *\n * @param {T[]} listBoxOneData - The first data collection.\n * @param {T[]} listBoxTwoData - The second data collection. Pass an empty array if there is only one ListBox.\n * @param {string} toolName - The tool that was clicked.\n * @param {string} selectedField - The field that contains the selected information in the data object.\n * @returns {{listBoxOneData: T[], listBoxTwoData: t[]}} - The object that contains the new data collections.\n */\n// tslint:disable-next-line: max-line-length\nexport var processListBoxData = function (listBoxOneData, listBoxTwoData, toolName, selectedField) {\n    if (listBoxOneData === void 0) { listBoxOneData = []; }\n    if (listBoxTwoData === void 0) { listBoxTwoData = []; }\n    var newFirstData = [];\n    var itemsForTransfer = [];\n    var newSecondData = [];\n    var result = {\n        listBoxOneData: listBoxOneData,\n        listBoxTwoData: listBoxTwoData\n    };\n    switch (toolName) {\n        case 'moveUp':\n            newFirstData = __spreadArray([], listBoxOneData, true);\n            newFirstData.forEach(function (item, index) {\n                if (item[selectedField]) {\n                    newFirstData = moveItem(index, index - 1, newFirstData);\n                }\n            });\n            newSecondData = __spreadArray([], listBoxTwoData, true);\n            newSecondData.forEach(function (item, index) {\n                if (item[selectedField]) {\n                    newSecondData = moveItem(index, index - 1, newSecondData);\n                }\n            });\n            result.listBoxOneData = newFirstData;\n            result.listBoxTwoData = newSecondData;\n            break;\n        case 'moveDown':\n            newFirstData = listBoxOneData.reverse();\n            newFirstData.forEach(function (item, index) {\n                if (item[selectedField]) {\n                    newFirstData = moveItem(index, index - 1, newFirstData);\n                }\n            });\n            newSecondData = listBoxTwoData.reverse();\n            newSecondData.forEach(function (item, index) {\n                if (item[selectedField]) {\n                    newSecondData = moveItem(index, index - 1, newSecondData);\n                }\n            });\n            result.listBoxOneData = __spreadArray([], newFirstData, true).reverse();\n            result.listBoxTwoData = __spreadArray([], newSecondData, true).reverse();\n            break;\n        case 'transferTo':\n            newFirstData = listBoxOneData.filter(function (item) { return !item[selectedField]; });\n            itemsForTransfer = listBoxOneData.filter(function (item) { return item[selectedField]; });\n            newSecondData = listBoxTwoData.concat(itemsForTransfer);\n            result.listBoxOneData = newFirstData;\n            result.listBoxTwoData = newSecondData;\n            break;\n        case 'transferFrom':\n            newSecondData = listBoxTwoData.filter(function (item) { return !item[selectedField]; });\n            itemsForTransfer = listBoxTwoData.filter(function (item) { return item[selectedField]; });\n            newFirstData = listBoxOneData.concat(itemsForTransfer);\n            result.listBoxOneData = newFirstData;\n            result.listBoxTwoData = newSecondData;\n            break;\n        case 'transferAllTo':\n            result.listBoxOneData = [];\n            result.listBoxTwoData = listBoxTwoData.concat(listBoxOneData);\n            break;\n        case 'transferAllFrom':\n            result.listBoxOneData = listBoxTwoData.concat(listBoxOneData);\n            result.listBoxTwoData = [];\n            break;\n        case 'remove':\n            newSecondData = listBoxTwoData.filter(function (item) { return !item[selectedField]; });\n            newFirstData = listBoxOneData.filter(function (item) { return !item[selectedField]; });\n            result.listBoxOneData = newFirstData;\n            result.listBoxTwoData = newSecondData;\n            break;\n        default:\n    }\n    return result;\n};\n/**\n * @hidden\n */\nexport var moveItem = function (from, to, data) {\n    var f = data.splice(from, 1)[0];\n    data.splice(to, 0, f);\n    return data;\n};\n/**\n * Process the data collection/s based on the dragged and drop item.\n *\n * @param {T[]} listBoxOneData - The first data collection.\n * @param {T[]} listBoxTwoData - The second data collection. Pass an empty array if there is only one ListBox.\n * @param {any} dragItem - The item that was dragged.\n * @param {any} dropItem - The drop target item.\n * @param {string} valueField - The field which points to the unique value of each data item.\n * @returns {{listBoxOneData: T[], listBoxTwoData: t[]}} - The object that contains the new data collections.\n */\n// tslint:disable-next-line: max-line-length\nexport var processListBoxDragAndDrop = function (listBoxOneData, listBoxTwoData, dragItem, dropItem, valueField) {\n    if (listBoxOneData === void 0) { listBoxOneData = []; }\n    if (listBoxTwoData === void 0) { listBoxTwoData = []; }\n    var dragItemIndexInFirstList = listBoxOneData.findIndex(function (item) { return item[valueField] === dragItem[valueField]; });\n    var dragItemIndexInSecondList = listBoxTwoData.findIndex(function (item) { return item[valueField] === dragItem[valueField]; });\n    var dropItemIndexInFirstList = dropItem !== null ? listBoxOneData.findIndex(function (item) { return item[valueField] === dropItem[valueField]; }) : -1;\n    var dropItemIndexInSecondList = dropItem !== null ? listBoxTwoData.findIndex(function (item) { return item[valueField] === dropItem[valueField]; }) : -1;\n    var isDragItemInFirstList = dragItemIndexInFirstList >= 0 ? true : false;\n    var isDragItemInSecondList = dragItemIndexInSecondList >= 0 ? true : false;\n    var isDropItemInFirstList = dropItemIndexInFirstList >= 0 ? true : false;\n    var isDropItemInSecondList = dropItemIndexInSecondList >= 0 ? true : false;\n    var firstDataSet = __spreadArray([], listBoxOneData, true);\n    var secondDataSet = __spreadArray([], listBoxTwoData, true);\n    if (isDragItemInFirstList && isDropItemInFirstList) {\n        return {\n            listBoxOneData: moveItem(dragItemIndexInFirstList, dropItemIndexInFirstList, listBoxOneData),\n            listBoxTwoData: listBoxTwoData\n        };\n    }\n    if (isDragItemInSecondList && isDropItemInSecondList) {\n        return {\n            listBoxOneData: listBoxOneData,\n            listBoxTwoData: moveItem(dragItemIndexInSecondList, dropItemIndexInSecondList, listBoxTwoData)\n        };\n    }\n    if (isDragItemInFirstList && (isDropItemInSecondList || dropItem === null)) {\n        if (dropItem === null) {\n            secondDataSet.push(listBoxOneData[dragItemIndexInFirstList]);\n        }\n        else {\n            secondDataSet.splice(dropItemIndexInSecondList + 1, 0, listBoxOneData[dragItemIndexInFirstList]);\n        }\n        firstDataSet.splice(dragItemIndexInFirstList, 1);\n        return {\n            listBoxOneData: firstDataSet,\n            listBoxTwoData: secondDataSet\n        };\n    }\n    if (isDragItemInSecondList && (isDropItemInFirstList || dropItem === null)) {\n        if (dropItem === null) {\n            firstDataSet.push(listBoxTwoData[dragItemIndexInSecondList]);\n        }\n        else {\n            firstDataSet.splice(dropItemIndexInFirstList + 1, 0, listBoxTwoData[dragItemIndexInSecondList]);\n        }\n        secondDataSet.splice(dragItemIndexInSecondList, 1);\n        return {\n            listBoxOneData: firstDataSet,\n            listBoxTwoData: secondDataSet\n        };\n    }\n    return {\n        listBoxOneData: listBoxOneData,\n        listBoxTwoData: listBoxTwoData\n    };\n};\n"]},"metadata":{},"sourceType":"module"}