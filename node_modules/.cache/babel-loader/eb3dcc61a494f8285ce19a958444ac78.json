{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\reports\\\\reportsconfig\\\\AddReportDetail.js\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { transactionStatus, attachmentType } from '../../../components/Enumeration';\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\nimport DropZone from '../../../components/dropzone/dropzone.component';\n\nconst AddReportDetail = props => {\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"nisplsqlquery\",\n    type: \"switch\",\n    label: props.intl.formatMessage({\n      id: \"IDS_ISPLSQLQUERY\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_ISPLSQLQUERY\"\n    }),\n    value: props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true : false,\n    isMandatory: false,\n    required: false,\n    checked: props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true : false,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 26\n    }\n  }), Object.keys(props.selectedRecord).length > 0 && /*#__PURE__*/React.createElement(DropZone, {\n    label: props.intl.formatMessage({\n      id: \"IDS_FILE\"\n    }),\n    maxFiles: 1,\n    accept: \".jrxml,.mrt\",\n    minSize: 0,\n    maxSize: 10,\n    fileNameLength: 150,\n    onDrop: event => props.onDropImage(event, \"sfilename\"),\n    multiple: false,\n    isMandatory: true,\n    editFiles: props.selectedRecord ? props.selectedRecord : {},\n    attachmentTypeCode: props.operation === \"update\" ? attachmentType.OTHERS : \"\",\n    fileName: \"sfilename\",\n    deleteAttachment: () => props.deleteFile(\"sfilename\"),\n    actionType: props.actionType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 41\n    }\n  })));\n};\n\nexport default injectIntl(AddReportDetail);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/reports/reportsconfig/AddReportDetail.js"],"names":["React","Row","Col","injectIntl","transactionStatus","attachmentType","CustomSwitch","DropZone","AddReportDetail","props","intl","formatMessage","id","selectedRecord","YES","event","onInputOnChange","Object","keys","length","onDropImage","operation","OTHERS","deleteFile","actionType"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,GAAb,QAAuB,iBAAvB;AACA,SAAQC,UAAR,QAA0B,YAA1B;AACA,SAAQC,iBAAR,EAA2BC,cAA3B,QAAgD,iCAAhD;AACA,OAAOC,YAAP,MAAyB,2DAAzB;AACA,OAAOC,QAAP,MAAqB,iDAArB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC3B,sBACS,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACO,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA4FC,oBAAC,YAAD;AACO,IAAA,IAAI,EAAE,eADb;AAEO,IAAA,IAAI,EAAC,QAFZ;AAGO,IAAA,KAAK,EAAGA,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAC;AAAL,KAAzB,CAHf;AAIO,IAAA,WAAW,EAAGH,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAC;AAAL,KAAzB,CAJrB;AAKO,IAAA,KAAK,EAAIH,KAAK,CAACI,cAAN,CAAqB,eAArB,MAA0CT,iBAAiB,CAACU,GAA5D,GAAkE,IAAlE,GAAwE,KALxF;AAMO,IAAA,WAAW,EAAE,KANpB;AAOO,IAAA,QAAQ,EAAE,KAPjB;AAQO,IAAA,OAAO,EAAGL,KAAK,CAACI,cAAN,CAAqB,eAArB,MAA0CT,iBAAiB,CAACU,GAA5D,GAAkE,IAAlE,GAAwE,KARzF;AASO,IAAA,QAAQ,EAAGC,KAAD,IAAUN,KAAK,CAACO,eAAN,CAAsBD,KAAtB,CAT3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5FD,EAwGCE,MAAM,CAACC,IAAP,CAAYT,KAAK,CAACI,cAAlB,EAAkCM,MAAlC,GAA0C,CAA1C,iBACe,oBAAC,QAAD;AACA,IAAA,KAAK,EAAGV,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAC;AAAL,KAAzB,CADR;AAEA,IAAA,QAAQ,EAAE,CAFV;AAGA,IAAA,MAAM,EAAC,aAHP;AAIA,IAAA,OAAO,EAAE,CAJT;AAKA,IAAA,OAAO,EAAE,EALT;AAMA,IAAA,cAAc,EAAE,GANhB;AAOA,IAAA,MAAM,EAAGG,KAAD,IAASN,KAAK,CAACW,WAAN,CAAkBL,KAAlB,EAAyB,WAAzB,CAPjB;AAQA,IAAA,QAAQ,EAAE,KARV;AASA,IAAA,WAAW,EAAE,IATb;AAUA,IAAA,SAAS,EAAEN,KAAK,CAACI,cAAN,GAAuBJ,KAAK,CAACI,cAA7B,GAA6C,EAVxD;AAWA,IAAA,kBAAkB,EAAEJ,KAAK,CAACY,SAAN,KAAkB,QAAlB,GAA4BhB,cAAc,CAACiB,MAA3C,GAAkD,EAXtE;AAYA,IAAA,QAAQ,EAAC,WAZT;AAaA,IAAA,gBAAgB,EAAE,MAAIb,KAAK,CAACc,UAAN,CAAiB,WAAjB,CAbtB;AAcA,IAAA,UAAU,EAAEd,KAAK,CAACe,UAdlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzGhB,CADP,CADT;AAgIP,CAjID;;AAmIA,eAAerB,UAAU,CAACK,eAAD,CAAzB","sourcesContent":["import React from 'react'\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport {injectIntl } from 'react-intl';\r\nimport {transactionStatus, attachmentType} from '../../../components/Enumeration';\r\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\r\nimport DropZone from '../../../components/dropzone/dropzone.component';\r\n\r\nconst AddReportDetail = (props) => {\r\n        return(\r\n                 <Row> \r\n                        <Col md={12}> \r\n                     {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"] !== reportTypeEnum.MIS && props.reportMaster[\"nreporttypecode\"] !== reportTypeEnum.SCREENWISE ? <>             \r\n                                            \r\n                            <FormSelectSearch\r\n                                        name={\"ncoareporttypecode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_COAREPORTTYPE\"})}                              \r\n                                        placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                              \r\n                                        options={ props.coaReportTypeList || []}\r\n                                        optionId={\"ncoareporttypecode\"}\r\n                                        optionValue={\"scoareporttypename\"}\r\n                                        value = { props.selectedRecord ? props.selectedRecord[\"ncoareporttypecode\"]:\"\"}\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isClearable={false}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"ncoareporttypecode\")}                               \r\n                                />                             */}\r\n                        {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"] === reportTypeEnum.SAMPLE ?<>\r\n                                <FormSelectSearch\r\n                                        name={\"nreportdecisiontypecode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_DECISIONTYPE\"})}                              \r\n                                        placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                              \r\n                                        options={ props.decisionTypeList || []}\r\n                                        value = { props.selectedRecord ? props.selectedRecord[\"nreportdecisiontypecode\"]:\"\"}\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isClearable={false}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"nreportdecisiontypecode\")}                               \r\n                                />   */}\r\n                        {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"].isneedsection === transactionStatus.YES ? \r\n                                <FormSelectSearch\r\n                                        name={\"nsectioncode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_LAB\"})}                              \r\n                                        placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                               \r\n                                        options={ props.sectionList || []}\r\n                                        optionId={\"nsectioncode\"}\r\n                                        optionValue={\"ssectionname\"}\r\n                                        value = { props.selectedRecord ? props.selectedRecord[\"nsectioncode\"]:\"\"}\r\n                                        isMandatory={false}\r\n                                        isMulti={false}\r\n                                        isClearable={true}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"nsectioncode\")}                               \r\n                                />  \r\n                                : \"\"}  */}\r\n                                 {/* </> \r\n                                 :\"\"}      */}\r\n\r\n                        {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"] === reportTypeEnum.BATCH ? \r\n                            <><FormSelectSearch\r\n                                                name={\"ncertificatetypecode\"}\r\n                                                formLabel={ props.intl.formatMessage({ id:\"IDS_CERTIFICATETYPE\"})}                              \r\n                                                placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                               \r\n                                                options={ props.certificateTypeList || []}\r\n                                                value = { props.selectedRecord ? props.selectedRecord[\"ncertificatetypecode\"]:\"\"}\r\n                                                isMandatory={true}\r\n                                                isMulti={false}\r\n                                                isClearable={false}\r\n                                                isSearchable={true}                                \r\n                                                isDisabled={false}\r\n                                                closeMenuOnSelect={true}\r\n                                                onChange = {(event)=> props.onComboChange(event, \"ncertificatetypecode\")}                               \r\n                                        /> \r\n                                <FormInput\r\n                                        label={props.intl.formatMessage({ id:\"IDS_REPORTBATCHTYPE\"})}\r\n                                        name={\"sbatchdisplayname\"}\r\n                                        type=\"text\"\r\n                                        placeholder={props.intl.formatMessage({ id:\"sbatchdisplayname\"})}\r\n                                        value ={props.selectedRecord ? props.selectedRecord[\"sbatchdisplayname\"] : \"\"}\r\n                                        isMandatory = {false}\r\n                                        required={false}\r\n                                        readOnly={true}\r\n                                        onChange={(event)=> props.onInputOnChange(event)}\r\n                                />  </>  \r\n                                         :\"\"}                   \r\n                       \r\n                       </>\r\n                    :\"\"} */}\r\n                        \r\n                         <CustomSwitch\r\n                                name={\"nisplsqlquery\"}\r\n                                type=\"switch\"\r\n                                label={ props.intl.formatMessage({ id:\"IDS_ISPLSQLQUERY\"})}\r\n                                placeholder={ props.intl.formatMessage({ id:\"IDS_ISPLSQLQUERY\"})}                            \r\n                                value ={ props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true :false }  \r\n                                isMandatory={false}                       \r\n                                required={false}\r\n                                checked={ props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true :false}\r\n                                onChange={(event)=> props.onInputOnChange(event)}\r\n                                />\r\n                      \r\n                        {Object.keys(props.selectedRecord).length >0 &&                              \r\n                                        <DropZone \r\n                                        label={ props.intl.formatMessage({ id:\"IDS_FILE\"})} \r\n                                        maxFiles={1}\r\n                                        accept=\".jrxml,.mrt\"\r\n                                        minSize={0}\r\n                                        maxSize={10}\r\n                                        fileNameLength={150}\r\n                                        onDrop={(event)=>props.onDropImage(event, \"sfilename\")}\r\n                                        multiple={false}\r\n                                        isMandatory={true}\r\n                                        editFiles={props.selectedRecord ? props.selectedRecord :{}}\r\n                                        attachmentTypeCode={props.operation===\"update\"? attachmentType.OTHERS:\"\"}            \r\n                                        fileName=\"sfilename\"\r\n                                        deleteAttachment={()=>props.deleteFile(\"sfilename\")}\r\n                                        actionType={props.actionType}\r\n                                        />\r\n                                \r\n                                }                    \r\n                   </Col>\r\n                </Row>\r\n            )   \r\n}\r\n\r\nexport default injectIntl(AddReportDetail);"]},"metadata":{},"sourceType":"module"}