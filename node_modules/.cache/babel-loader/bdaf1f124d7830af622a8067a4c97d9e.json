{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\nimport { sortData, searchData, constructOptionList, fillRecordBasedOnCheckBoxSelection, constructjsonOptionList, parentChildComboLoad, getSameRecordFromTwoArrays } from '../components/CommonScript'; //getComboLabelValue,, searchData\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { attachmentType, transactionStatus } from '../components/Enumeration';\nexport function initialcombochangeget(nmaterialtypecode, data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/material/getMaterialcombo\", {\n      nmaterialtypecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      const masterData = { ...data,\n        ...response.data,\n        searchedData: undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getAddMaterialPopup(screenName, operation, userInfo, selectedcombo, selectedcombouser, ncontrolCode, masterData, selectedRecord) {\n  return function (dispatch) {\n    if (operation === \"create\") {\n      let urlArray = [];\n      let templateData = [];\n      let templateData1 = [];\n      let data = [];\n      let dataparent = [];\n      const withoutCombocomponent = [];\n      const Layout = masterData.selectedTemplate[0].sjsonobjstr;\n      Layout.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"parent\")) {\n              dataparent.push(component);\n            }\n\n            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n              if (componentrow.inputtype === \"combo\" && !component.hasOwnProperty(\"parent\")) {\n                if (componentrow.hasOwnProperty(\"parent\")) {\n                  dataparent.push(componentrow);\n                } else {\n                  data.push(componentrow);\n                }\n              }\n            }) : component.inputtype === \"combo\" && !component.hasOwnProperty(\"parent\") ? data.push(component) : withoutCombocomponent.push(component);\n          });\n        });\n      });\n      const comboComponents = data;\n      dataparent[0] = {\n        displaymember: dataparent[0].displaymember,\n        inputtype: dataparent[0].inputtype,\n        label: dataparent[0].label,\n        source: dataparent[0].source,\n        type: dataparent[0].type,\n        valuemember: dataparent[0].valuemember\n      };\n      const ScreenRightsAvaliablescreen = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n        \"nmaterialtypecode\": selectedcombo[\"nmaterialtypecode\"].value,\n        \"userinfo\": userInfo,\n        \"parentcolumnlist\": comboComponents\n      });\n      const childComboList = getSameRecordFromTwoArrays(Layout, Layout, \"label\");\n      const ScreenRightsAvaliablescreen1 = rsapi.post('dynamicpreregdesign/getChildValues', {\n        child: Layout[0].children[0].children[0].childValue,\n        parentdata: {\n          nmaterialtypecode: selectedcombo['nmaterialtypecode'].value\n        },\n        parentsource: 'materialcategory',\n        'nmaterialtypecode': selectedcombo.nmaterialtypecode.value,\n        valuemember: 'nmaterialtypecode',\n        userInfo,\n        parentcolumnlist: dataparent\n      });\n      urlArray = [ScreenRightsAvaliablescreen, ScreenRightsAvaliablescreen1];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        templateData = response[0].data;\n        data.splice(1, 0, dataparent[0]);\n        let temp1 = [];\n        const temp2 = { ...response[0].data,\n          ...response[1].data\n        };\n        templateData = parentChildComboLoad(data, temp2, selectedRecord, null, withoutCombocomponent, undefined, userInfo.slanguagetypecode);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation,\n            screenname: 'IDS_MATERIAL',\n            showMaterialSection: false,\n            templateData,\n            openModal: true,\n            selectedcombo,\n            ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      let urlArray = [];\n      let templateData = [];\n      let templateData1 = [];\n      let data = [];\n      let dataparent = [];\n      const withoutCombocomponent = [];\n      const Layout = masterData.selectedTemplate[0].sjsonobjstr;\n      Layout.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"parent\")) {\n              dataparent.push(component);\n            }\n\n            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n              if (componentrow.inputtype === \"combo\" && !component.hasOwnProperty(\"parent\")) {\n                if (componentrow.hasOwnProperty(\"parent\")) {\n                  dataparent.push(componentrow);\n                } else {\n                  data.push(componentrow);\n                }\n              }\n            }) : component.inputtype === \"combo\" && !component.hasOwnProperty(\"parent\") ? data.push(component) : withoutCombocomponent.push(component);\n          });\n        });\n      });\n      const comboComponents = data;\n      const Material = rsapi.post(\"/material/getMaterialEdit\", {\n        'nmaterialcode': masterData.SelectedMaterial.jsondata.nmaterialcode,\n        \"userinfo\": userInfo\n      });\n      dataparent[0] = {\n        displaymember: dataparent[0].displaymember,\n        inputtype: dataparent[0].inputtype,\n        label: dataparent[0].label,\n        source: dataparent[0].source,\n        type: dataparent[0].type,\n        valuemember: dataparent[0].valuemember\n      };\n      const ScreenRightsAvaliablescreen = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n        \"nmaterialtypecode\": selectedcombo[\"nmaterialtypecode\"].value,\n        \"userinfo\": userInfo,\n        \"parentcolumnlist\": comboComponents\n      });\n      const childComboList = getSameRecordFromTwoArrays(Layout, Layout, \"label\");\n      const ScreenRightsAvaliablescreen1 = rsapi.post('dynamicpreregdesign/getChildValues', {\n        child: Layout[0].children[0].children[0].childValue,\n        parentdata: {\n          nmaterialtypecode: selectedcombo['nmaterialtypecode'].value\n        },\n        parentsource: 'materialcategory',\n        'nmaterialtypecode': selectedcombo.nmaterialtypecode.value,\n        valuemember: 'nmaterialtypecode',\n        userInfo,\n        parentcolumnlist: dataparent\n      });\n      urlArray = [ScreenRightsAvaliablescreen, ScreenRightsAvaliablescreen1, Material];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        templateData = response[0].data;\n        data = [...data, ...dataparent];\n        templateData = parentChildComboLoad(data, { ...response[0].data,\n          ...response[1].data\n        }, selectedRecord, null, withoutCombocomponent, undefined, userInfo.slanguagetypecode);\n        selectedRecord = response[2].data.EditedMaterial[0].jsondata;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation,\n            screenname: 'IDS_MATERIAL',\n            isSelectedRecordChange: false,\n            showMaterialSection: false,\n            templateData,\n            openModal: true,\n            selectedcombo,\n            selectedRecord,\n            ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function getMaterialDetails(inputData, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"material/getMaterialDetails\", {\n      \"nmaterialcode\": inputData.nmaterialcode,\n      \"nmaterialtypecode\": inputData.nmaterialtypecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let dataState = inputData.dataState;\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function getMaterialEdit(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n\n    if (operation === \"create\") {\n      const EDQMManufacturer = rsapi.post(\"/edqmmanufacturer/getEDQMManufacturer\", {\n        \"userinfo\": userInfo\n      });\n      urlArray = [EDQMManufacturer];\n    } else {\n      const Material = rsapi.post(\"/material/getMaterialEdit\", {\n        [primaryKeyName]: masterData.SelectedMaterial.jsondata.nmaterialcode,\n        \"userinfo\": userInfo\n      });\n      urlArray = [Material];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let edqmManufacturer = [];\n      let selectedRecord = {};\n\n      if (operation === \"update\") {\n        selectedRecord = response[2].data.EditedMaterial[0].jsondata;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          isOpen: true,\n          selectedRecord: operation === \"update\" ? selectedRecord : {\n            \"ntransactionstatus\": 1\n          },\n          operation: operation,\n          screenName: screenName,\n          openModal: true,\n          ncontrolCode: ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getMaterialByTypeCode(inputParam, selectedcombo, selectedcombouser, Data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/material/getMaterialByTypeCode\", selectedcombouser !== undefined ? {\n      nmaterialtypecode: selectedcombo['nmaterialtypecode'].value,\n      nmaterialcatcode: selectedcombouser['nmaterialcatcode'].value,\n      \"userinfo\": userInfo\n    } : {\n      nmaterialtypecode: selectedcombo['nmaterialtypecode'].value,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let masterData = {};\n      masterData = { ...Data,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          skip: 0,\n          take: 20\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getAddMaterialSectionPopup(Data, userInfo, updateInfo, ncontrolCode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/material/getMaterialSection\", {\n      \"userinfo\": userInfo,\n      'nmaterialcode': Data[\"SelectedMaterial\"][\"nmaterialcode\"]\n    }).then(response => {\n      let masterData = {};\n\n      if (Array.isArray(response.data)) {\n        let MaterialSectionOptions = [];\n        MaterialSectionOptions = response.data;\n        const productCatMap = constructOptionList(response.data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n        const productCategoryList = {\n          productCategoryList: productCatMap.get(\"OptionList\")\n        };\n        const MaterialSection = {\n          \"MaterialSection\": {\n            item: response.data[0],\n            label: response.data[0].ssectionname,\n            value: response.data[0].nsectioncode\n          }\n        };\n        const MaterialSectionOptionsobj = {\n          MaterialSectionOptions: MaterialSectionOptions\n        };\n        masterData = { ...Data,\n          ...productCategoryList,\n          searchedData: undefined\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: \"create\",\n            masterData,\n            updateInfo,\n            ncontrolCode,\n            openModal: true,\n            ismaterialsectionEdit: false,\n            isneedcombomulti: false,\n            screenname: \"IDS_MATERIALSECTION\",\n            showMaterialSection: true,\n            loading: false,\n            skip: 0,\n            take: 20\n          }\n        });\n      } else {\n        toast.warn(response.data);\n        masterData = { ...Data,\n          searchedData: undefined\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: \"create\",\n            masterData,\n            updateInfo,\n            openModal: false,\n            ismaterialsectionEdit: false,\n            isneedcombomulti: false,\n            screenname: \"IDS_MATERIALSECTION\",\n            showMaterialSection: true,\n            loading: false,\n            skip: 0,\n            take: 20\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error);\n    });\n  };\n}\nexport function getMaterialSectionEdit(inputparam, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedRecord = { ...inputparam.selectedRecord\n    };\n    const inputparampayload = {\n      editRow: inputparam[\"editRow\"],\n      ncontrolCode: inputparam.ncontrolCode,\n      operation: inputparam.operation,\n      primaryKeyField: \"nmaterialsectioncode\",\n      primaryKeyValue: inputparam.primaryKeyValue,\n      \"userinfo\": inputparam.userInfo\n    };\n    dispatch(initRequest(true));\n    const url1 = rsapi.post(\"/material/getActiveMaterialSectionById\", {\n      editRow: inputparam[\"editRow\"],\n      ncontrolCode: inputparam.ncontrolCode,\n      operation: inputparam.operation,\n      primaryKeyField: \"nmaterialsectioncode\",\n      primaryKeyValue: inputparam.primaryKeyValue,\n      \"userinfo\": inputparam.userInfo\n    });\n    const url2 = rsapi.post(\"/material/getMaterialSection\", {\n      \"userinfo\": inputparam.userInfo,\n      nmaterialcode: inputparam[\"editRow\"].nmaterialcode,\n      primaryKeyValue: inputparam.primaryKeyValue\n    });\n    urlArray = [url1, url2];\n    Axios.all(urlArray).then(response => {\n      const productCatMap = constructOptionList(response[0].data.MaterialSectionEditData || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n      const productCategoryList = {\n        productCategoryList: productCatMap.get(\"OptionList\"),\n        nmaterialsectioncode: inputparam.primaryKeyValue\n      };\n      selectedRecord[\"nmaterialsectioncode\"] = productCatMap.get(\"OptionList\");\n      selectedRecord[\"nreorderlevel\"] = inputparam[\"editRow\"].nreorderlevel;\n      selectedRecord[\"nmaterialsectioncodeprimaryKeyValue\"] = inputparam.primaryKeyValue;\n\n      if (!Array.isArray(response[1].data)) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            isOpen: true,\n            selectedRecord,\n            operation: \"update\",\n            isneedcombomulti: true,\n            openModal: true,\n            showMaterialSection: true,\n            ismaterialsectionEdit: true,\n            screenname: \"IDS_MATERIALSECTION\",\n            ncontrolCode: inputparam.ncontrolCode,\n            loading: false\n          }\n        });\n      }\n\n      const productCatMap1 = constructOptionList(response[1].data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n      const productCategoryList2 = {\n        productCategoryList: productCatMap1.get(\"OptionList\")\n      };\n      let masterData = {};\n      masterData = { ...inputparam.masterData,\n        ...productCategoryList2,\n        searchedData: undefined\n      };\n\n      if (Array.isArray(response[1].data)) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            isOpen: true,\n            selectedRecord,\n            masterData,\n            operation: \"update\",\n            isneedcombomulti: true,\n            openModal: true,\n            showMaterialSection: true,\n            ismaterialsectionEdit: true,\n            screenname: \"IDS_MATERIALSECTION\",\n            ncontrolCode: inputparam.ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function addSafetyInstructions(Data, userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/material/getMaterialSafetyInstructions\", {\n      'nmaterialcode': Data[\"SelectedMaterial\"][\"jsondata\"].nmaterialcode,\n      \"userinfo\": userInfo,\n      nflag: 1\n    }).then(response => {\n      if (Array.isArray(response.data[\"selectedTemplateSafetyInstructions\"])) {\n        let selectedRecord = response.data[\"MaterialSafetyInstructions\"].length > 0 ? response.data[\"MaterialSafetyInstructions\"][0].jsondata : [];\n        let masterData = {};\n        const MaterialSafetyInstructions = {\n          MaterialSafetyInstructions: response.data[\"MaterialSafetyInstructions\"]\n        };\n        masterData = { ...Data,\n          ...MaterialSafetyInstructions,\n          searchedData: undefined\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            loadEsign: false,\n            selectedRecord,\n            ncontrolCode: ncontrolcode,\n            openModal: true,\n            screenname: \"IDS_MATERIALSAFETYINSTRUCTIONS\"\n          }\n        });\n      } else {\n        toast.warn(response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function addMaterialProperty(Data, userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/material/getMaterialSafetyInstructions\", {\n      'nmaterialcode': Data[\"SelectedMaterial\"][\"jsondata\"].nmaterialcode,\n      \"userinfo\": userInfo,\n      nflag: 2\n    }).then(response => {\n      if (Array.isArray(response.data[\"selectedTemplateProperties\"])) {\n        let selectedRecord = response.data[\"MaterialProperties\"].length > 0 ? response.data[\"MaterialProperties\"][0].jsondata : [];\n        let masterData = {};\n        const MaterialProperties = {\n          MaterialProperties: response.data[\"MaterialProperties\"]\n        };\n        masterData = { ...Data,\n          ...MaterialProperties,\n          searchedData: undefined\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            loadEsign: false,\n            selectedRecord,\n            ncontrolCode: ncontrolcode,\n            openModal: true,\n            screenname: \"IDS_MATERIALPROPERTY\"\n          }\n        });\n      } else {\n        toast.warn(response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function addMaterialFile(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\n      userinfo: inputParam.userInfo\n    })];\n\n    if (inputParam.operation === \"update\") {\n      urlArray.push(rsapi.post(\"/material/editMaterialFile\", {\n        userinfo: inputParam.userInfo,\n        nmaterialfilecode: inputParam.selectedRecord.nmaterialfilecode\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\n      const linkmaster = linkMap.get(\"OptionList\");\n      let selectedRecord = {};\n      const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\n      let disabled = false;\n      let editObject = {};\n\n      if (inputParam.operation === \"update\") {\n        editObject = response[1].data;\n        let nlinkcode = {};\n        let link = {};\n\n        if (editObject[\"jsondata\"].nattachmenttypecode === attachmentType.LINK) {\n          nlinkcode = {\n            \"label\": editObject[\"jsondata\"].slinkname,\n            \"value\": editObject[\"jsondata\"].nlinkcode\n          };\n          link = {\n            slinkfilename: editObject[\"jsondata\"].sfilename,\n            slinkdescription: editObject[\"jsondata\"].sdescription,\n            nlinkdefaultstatus: editObject[\"jsondata\"].ndefaultstatus,\n            sfilesize: '',\n            nfilesize: 0,\n            ndefaultstatus: 4,\n            sfilename: ''\n          };\n        } else {\n          nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\";\n          link = {\n            slinkfilename: '',\n            slinkdescription: '',\n            nlinkdefaultstatus: 4,\n            sfilesize: editObject[\"jsondata\"].sfilesize,\n            nfilesize: editObject[\"jsondata\"].nfilesize,\n            ndefaultstatus: editObject[\"jsondata\"].ndefaultstatus,\n            ssystemfilename: editObject[\"jsondata\"].ssystemfilename,\n            sfilename: editObject[\"jsondata\"].sfilename\n          };\n        }\n\n        selectedRecord = { ...link,\n          sdescription: editObject[\"jsondata\"].sdescription,\n          nmaterialfilecode: editObject[\"jsondata\"].nmaterialfilecode,\n          nattachmenttypecode: editObject[\"jsondata\"].nattachmenttypecode,\n          nlinkcode\n        };\n      } else {\n        selectedRecord = {\n          nattachmenttypecode: response[0].data.AttachmentType.length > 0 ? response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\n          nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\",\n          disabled\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          operation: inputParam.operation,\n          screenname: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord,\n          loading: false,\n          linkMaster: linkmaster,\n          showSaveContinue: false,\n          editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/MaterialAction.js"],"names":["rsapi","DEFAULT_RETURN","REQUEST_FAILURE","sortData","searchData","constructOptionList","fillRecordBasedOnCheckBoxSelection","constructjsonOptionList","parentChildComboLoad","getSameRecordFromTwoArrays","toast","Axios","initRequest","intl","attachmentType","transactionStatus","initialcombochangeget","nmaterialtypecode","data","userInfo","dispatch","post","then","response","masterData","searchedData","undefined","type","payload","loading","catch","error","formatMessage","id","message","getAddMaterialPopup","screenName","operation","selectedcombo","selectedcombouser","ncontrolCode","selectedRecord","urlArray","templateData","templateData1","dataparent","withoutCombocomponent","Layout","selectedTemplate","sjsonobjstr","map","row","children","column","component","hasOwnProperty","push","componentrow","inputtype","comboComponents","displaymember","label","source","valuemember","ScreenRightsAvaliablescreen","value","childComboList","ScreenRightsAvaliablescreen1","child","childValue","parentdata","parentsource","parentcolumnlist","all","splice","temp1","temp2","slanguagetypecode","screenname","showMaterialSection","openModal","status","warn","Material","SelectedMaterial","jsondata","nmaterialcode","EditedMaterial","isSelectedRecordChange","getMaterialDetails","inputData","dataState","getMaterialEdit","primaryKeyName","EDQMManufacturer","edqmManufacturer","isOpen","getMaterialByTypeCode","inputParam","Data","nmaterialcatcode","skip","take","getAddMaterialSectionPopup","updateInfo","Array","isArray","MaterialSectionOptions","productCatMap","productCategoryList","get","MaterialSection","item","ssectionname","nsectioncode","MaterialSectionOptionsobj","ismaterialsectionEdit","isneedcombomulti","getMaterialSectionEdit","inputparam","inputparampayload","editRow","primaryKeyField","primaryKeyValue","url1","url2","MaterialSectionEditData","nmaterialsectioncode","nreorderlevel","productCatMap1","productCategoryList2","addSafetyInstructions","ncontrolcode","nflag","length","MaterialSafetyInstructions","loadEsign","addMaterialProperty","MaterialProperties","addMaterialFile","userinfo","nmaterialfilecode","linkMap","LinkMaster","linkmaster","defaultLink","filter","items","ndefaultlink","YES","disabled","editObject","nlinkcode","link","nattachmenttypecode","LINK","slinkname","slinkfilename","sfilename","slinkdescription","sdescription","nlinkdefaultstatus","ndefaultstatus","sfilesize","nfilesize","ssystemfilename","AttachmentType","FTP","linkMaster","showSaveContinue","editFiles"],"mappings":"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","sourcesContent":["\r\n\r\nimport rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\r\nimport { sortData, searchData, constructOptionList, fillRecordBasedOnCheckBoxSelection, constructjsonOptionList, parentChildComboLoad, getSameRecordFromTwoArrays } from '../components/CommonScript'//getComboLabelValue,, searchData\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { attachmentType, transactionStatus } from '../components/Enumeration';\r\n\r\n\r\nexport function initialcombochangeget(nmaterialtypecode, data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/material/getMaterialcombo\", { nmaterialtypecode, \"userinfo\": userInfo })\r\n            .then(response => {\r\n                const masterData = { ...data, ...response.data, searchedData: undefined }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function getAddMaterialPopup(screenName, operation, userInfo, selectedcombo, selectedcombouser, ncontrolCode, masterData, selectedRecord) {\r\n    return function (dispatch) {\r\n        if (operation === \"create\") {\r\n            let urlArray = [];\r\n            let templateData = [];\r\n            let templateData1 = [];\r\n            let data = [];\r\n            let dataparent = [];\r\n            const withoutCombocomponent = []\r\n            const Layout = masterData.selectedTemplate[0].sjsonobjstr\r\n            Layout.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"parent\")) {\r\n                            dataparent.push(component)\r\n                        }\r\n                        return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"combo\" && !(component.hasOwnProperty(\"parent\"))) {\r\n                                if (componentrow.hasOwnProperty(\"parent\")) {\r\n                                    dataparent.push(componentrow)\r\n                                }\r\n                                else {\r\n                                    data.push(componentrow)\r\n                                }\r\n                            }\r\n\r\n\r\n\r\n                        })\r\n                            : component.inputtype === \"combo\" && !(component.hasOwnProperty(\"parent\")) ? data.push(component) : withoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n            })\r\n            const comboComponents = data\r\n\r\n            dataparent[0] = {\r\n                displaymember: dataparent[0].displaymember,\r\n                inputtype: dataparent[0].inputtype,\r\n                label: dataparent[0].label,\r\n                source: dataparent[0].source,\r\n                type: dataparent[0].type,\r\n                valuemember: dataparent[0].valuemember\r\n            }\r\n\r\n            const ScreenRightsAvaliablescreen = rsapi.post(\"dynamicpreregdesign/getComboValues\",\r\n                {\r\n                    \"nmaterialtypecode\": selectedcombo[\"nmaterialtypecode\"].value\r\n                    , \"userinfo\": userInfo, \"parentcolumnlist\": comboComponents\r\n                });\r\n\r\n            const childComboList = getSameRecordFromTwoArrays(Layout, Layout, \"label\")\r\n\r\n            const ScreenRightsAvaliablescreen1 = rsapi.post('dynamicpreregdesign/getChildValues', {\r\n                child: Layout[0].children[0].children[0].childValue,\r\n                parentdata: { nmaterialtypecode: selectedcombo['nmaterialtypecode'].value },\r\n                parentsource: 'materialcategory',\r\n                'nmaterialtypecode': selectedcombo.nmaterialtypecode.value,\r\n                valuemember: 'nmaterialtypecode',\r\n                userInfo,\r\n                parentcolumnlist: dataparent\r\n            });\r\n\r\n\r\n\r\n            urlArray = [ScreenRightsAvaliablescreen, ScreenRightsAvaliablescreen1];\r\n\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    templateData = response[0].data;\r\n                    data.splice(1, 0, dataparent[0])\r\n                    let temp1 = []\r\n                    const temp2 = { ...response[0].data, ...response[1].data }\r\n                    templateData = parentChildComboLoad(data, temp2, selectedRecord, null, withoutCombocomponent, undefined, userInfo.slanguagetypecode)\r\n\r\n                    dispatch({\r\n\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            operation, screenname: 'IDS_MATERIAL', showMaterialSection: false, templateData, openModal: true, selectedcombo,\r\n                            ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            let urlArray = [];\r\n            let templateData = [];\r\n            let templateData1 = [];\r\n            let data = [];\r\n            let dataparent = [];\r\n            const withoutCombocomponent = []\r\n            const Layout = masterData.selectedTemplate[0].sjsonobjstr\r\n            Layout.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"parent\")) {\r\n                            dataparent.push(component)\r\n                        }\r\n                        return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"combo\" && !(component.hasOwnProperty(\"parent\"))) {\r\n                                if (componentrow.hasOwnProperty(\"parent\")) {\r\n                                    dataparent.push(componentrow)\r\n                                }\r\n                                else {\r\n                                    data.push(componentrow)\r\n                                }\r\n                            }\r\n\r\n\r\n\r\n                        })\r\n                            : component.inputtype === \"combo\" && !(component.hasOwnProperty(\"parent\")) ? data.push(component) : withoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n            })\r\n            const comboComponents = data\r\n\r\n            const Material = rsapi.post(\"/material/getMaterialEdit\", { 'nmaterialcode': masterData.SelectedMaterial.jsondata.nmaterialcode, \"userinfo\": userInfo });\r\n\r\n            dataparent[0] = {\r\n                displaymember: dataparent[0].displaymember,\r\n                inputtype: dataparent[0].inputtype,\r\n                label: dataparent[0].label,\r\n                source: dataparent[0].source,\r\n                type: dataparent[0].type,\r\n                valuemember: dataparent[0].valuemember\r\n            }\r\n\r\n            const ScreenRightsAvaliablescreen = rsapi.post(\"dynamicpreregdesign/getComboValues\",\r\n                {\r\n                    \"nmaterialtypecode\": selectedcombo[\"nmaterialtypecode\"].value\r\n                    , \"userinfo\": userInfo, \"parentcolumnlist\": comboComponents\r\n                });\r\n\r\n            const childComboList = getSameRecordFromTwoArrays(Layout, Layout, \"label\")\r\n\r\n            const ScreenRightsAvaliablescreen1 = rsapi.post('dynamicpreregdesign/getChildValues', {\r\n                child: Layout[0].children[0].children[0].childValue,\r\n                parentdata: { nmaterialtypecode: selectedcombo['nmaterialtypecode'].value },\r\n                parentsource: 'materialcategory',\r\n                'nmaterialtypecode': selectedcombo.nmaterialtypecode.value,\r\n                valuemember: 'nmaterialtypecode',\r\n                userInfo,\r\n                parentcolumnlist: dataparent\r\n            });\r\n            urlArray = [ScreenRightsAvaliablescreen, ScreenRightsAvaliablescreen1, Material];\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n                    templateData = response[0].data;\r\n                    data = [...data, ...dataparent]\r\n                    templateData = parentChildComboLoad(data, { ...response[0].data, ...response[1].data }, selectedRecord, null, withoutCombocomponent, undefined, userInfo.slanguagetypecode)\r\n                    selectedRecord = response[2].data.EditedMaterial[0].jsondata\r\n\r\n                    dispatch({\r\n\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            operation, screenname: 'IDS_MATERIAL',isSelectedRecordChange:false, showMaterialSection: false, templateData, openModal: true, selectedcombo, selectedRecord,\r\n                            ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function getMaterialDetails(inputData, masterData, userInfo) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"material/getMaterialDetails\", {\r\n\r\n            \"nmaterialcode\": inputData.nmaterialcode,\r\n            \"nmaterialtypecode\": inputData.nmaterialtypecode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let dataState = inputData.dataState\r\n\r\n                masterData = { ...masterData, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function getMaterialEdit(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        if (operation === \"create\") {\r\n            const EDQMManufacturer = rsapi.post(\"/edqmmanufacturer/getEDQMManufacturer\", { \"userinfo\": userInfo });\r\n            urlArray = [EDQMManufacturer];\r\n        }\r\n        else {\r\n\r\n            const Material = rsapi.post(\"/material/getMaterialEdit\", { [primaryKeyName]: masterData.SelectedMaterial.jsondata.nmaterialcode, \"userinfo\": userInfo });\r\n            urlArray = [Material];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let edqmManufacturer = [];\r\n                let selectedRecord = {};\r\n                if (operation === \"update\") {\r\n\r\n                    selectedRecord = response[2].data.EditedMaterial[0].jsondata;\r\n\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        isOpen: true,\r\n                        selectedRecord: operation === \"update\" ? selectedRecord : { \"ntransactionstatus\": 1 },\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        openModal: true, ncontrolCode: ncontrolCode, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getMaterialByTypeCode(inputParam, selectedcombo, selectedcombouser, Data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/material/getMaterialByTypeCode\", selectedcombouser !== undefined ? {\r\n            nmaterialtypecode: selectedcombo['nmaterialtypecode'].value,\r\n            nmaterialcatcode: selectedcombouser['nmaterialcatcode'].value\r\n            , \"userinfo\": userInfo\r\n        } : {\r\n            nmaterialtypecode: selectedcombo['nmaterialtypecode'].value\r\n\r\n            , \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let masterData = {}\r\n\r\n                masterData = { ...Data, ...response.data, searchedData: undefined }\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false, skip: 0, take: 20\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function getAddMaterialSectionPopup(Data, userInfo, updateInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/material/getMaterialSection\", { \"userinfo\": userInfo, 'nmaterialcode': Data[\"SelectedMaterial\"][\"nmaterialcode\"] })\r\n            .then(response => {\r\n                let masterData = {}\r\n                if (Array.isArray(response.data)) {\r\n\r\n                    let MaterialSectionOptions = [];\r\n                    MaterialSectionOptions = response.data\r\n\r\n                    const productCatMap = constructOptionList(response.data || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, true);\r\n                    const productCategoryList = { productCategoryList: productCatMap.get(\"OptionList\") };\r\n\r\n                    const MaterialSection = {\r\n                        \"MaterialSection\": {\r\n                            item: response.data[0], label: response.data[0].ssectionname,\r\n                            value: response.data[0].nsectioncode\r\n                        }\r\n                    }\r\n                    const MaterialSectionOptionsobj = { MaterialSectionOptions: MaterialSectionOptions }\r\n\r\n                    masterData = { ...Data, ...productCategoryList, searchedData: undefined }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            operation: \"create\",\r\n                            masterData, updateInfo, ncontrolCode, openModal: true, ismaterialsectionEdit: false, isneedcombomulti: false, screenname: \"IDS_MATERIALSECTION\", showMaterialSection: true, loading: false, skip: 0, take: 20\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(response.data);\r\n                    masterData = { ...Data, searchedData: undefined }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            operation: \"create\",\r\n                            masterData, updateInfo, openModal: false, ismaterialsectionEdit: false, isneedcombomulti: false, screenname: \"IDS_MATERIALSECTION\", showMaterialSection: true, loading: false, skip: 0, take: 20\r\n                        }\r\n                    });\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(error);\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getMaterialSectionEdit(inputparam, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n\r\n        let selectedRecord = { ...inputparam.selectedRecord };\r\n        const inputparampayload = {\r\n            editRow: inputparam[\"editRow\"],\r\n            ncontrolCode: inputparam.ncontrolCode,\r\n            operation: inputparam.operation,\r\n            primaryKeyField: \"nmaterialsectioncode\",\r\n            primaryKeyValue: inputparam.primaryKeyValue,\r\n            \"userinfo\": inputparam.userInfo\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        const url1 = rsapi.post(\"/material/getActiveMaterialSectionById\", {\r\n            editRow: inputparam[\"editRow\"],\r\n            ncontrolCode: inputparam.ncontrolCode,\r\n            operation: inputparam.operation,\r\n            primaryKeyField: \"nmaterialsectioncode\",\r\n            primaryKeyValue: inputparam.primaryKeyValue,\r\n            \"userinfo\": inputparam.userInfo\r\n        })\r\n        const url2 = rsapi.post(\"/material/getMaterialSection\", { \"userinfo\": inputparam.userInfo, nmaterialcode: inputparam[\"editRow\"].nmaterialcode, primaryKeyValue: inputparam.primaryKeyValue, })\r\n        urlArray = [url1, url2]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const productCatMap = constructOptionList(response[0].data.MaterialSectionEditData || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, true);\r\n                const productCategoryList = { productCategoryList: productCatMap.get(\"OptionList\"), nmaterialsectioncode: inputparam.primaryKeyValue };\r\n                selectedRecord[\"nmaterialsectioncode\"] = productCatMap.get(\"OptionList\");\r\n                selectedRecord[\"nreorderlevel\"] = inputparam[\"editRow\"].nreorderlevel;\r\n                selectedRecord[\"nmaterialsectioncodeprimaryKeyValue\"] = inputparam.primaryKeyValue;\r\n                if (!Array.isArray(response[1].data)) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isOpen: true,\r\n                            selectedRecord,\r\n                            operation: \"update\",\r\n                            isneedcombomulti: true,\r\n                            openModal: true, showMaterialSection: true, ismaterialsectionEdit: true, screenname: \"IDS_MATERIALSECTION\", ncontrolCode: inputparam.ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n                }\r\n\r\n\r\n                const productCatMap1 = constructOptionList(response[1].data || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, true);\r\n                const productCategoryList2 = { productCategoryList: productCatMap1.get(\"OptionList\") };\r\n\r\n                let masterData = {}\r\n                masterData = { ...inputparam.masterData, ...productCategoryList2, searchedData: undefined }\r\n\r\n                if (Array.isArray(response[1].data)) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isOpen: true,\r\n                            selectedRecord,\r\n                            masterData,\r\n                            operation: \"update\",\r\n                            isneedcombomulti: true,\r\n                            openModal: true, showMaterialSection: true, ismaterialsectionEdit: true, screenname: \"IDS_MATERIALSECTION\", ncontrolCode: inputparam.ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function addSafetyInstructions(Data, userInfo,ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/material/getMaterialSafetyInstructions\", {\r\n            'nmaterialcode': Data[\"SelectedMaterial\"][\"jsondata\"].nmaterialcode,\r\n            \"userinfo\": userInfo, nflag: 1\r\n        })\r\n            .then(response => {\r\n                if (Array.isArray(response.data[\"selectedTemplateSafetyInstructions\"])) {\r\n                    let selectedRecord = response.data[\"MaterialSafetyInstructions\"].length > 0 ?\r\n                        response.data[\"MaterialSafetyInstructions\"][0].jsondata : []\r\n                    let masterData = {}\r\n                    const MaterialSafetyInstructions = { MaterialSafetyInstructions: response.data[\"MaterialSafetyInstructions\"] }\r\n                    masterData = { ...Data, ...MaterialSafetyInstructions, searchedData: undefined }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData, loading: false,\r\n                            loadEsign: false,\r\n                            selectedRecord,\r\n                            ncontrolCode:ncontrolcode\r\n                            , openModal: true, screenname: \"IDS_MATERIALSAFETYINSTRUCTIONS\"\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(response.data);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function addMaterialProperty(Data, userInfo,ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/material/getMaterialSafetyInstructions\", {\r\n            'nmaterialcode': Data[\"SelectedMaterial\"][\"jsondata\"].nmaterialcode,\r\n            \"userinfo\": userInfo, nflag: 2\r\n        })\r\n            .then(response => {\r\n                if (Array.isArray(response.data[\"selectedTemplateProperties\"])) {\r\n                    let selectedRecord = response.data[\"MaterialProperties\"].length > 0 ?\r\n                        response.data[\"MaterialProperties\"][0].jsondata : []\r\n                    let masterData = {}\r\n                    const MaterialProperties = { MaterialProperties: response.data[\"MaterialProperties\"] }\r\n                    masterData = { ...Data, ...MaterialProperties, searchedData: undefined }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData, loading: false,\r\n                            loadEsign: false,\r\n                            selectedRecord,\r\n                            ncontrolCode:ncontrolcode\r\n                            , openModal: true, screenname: \"IDS_MATERIALPROPERTY\"\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(response.data);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function addMaterialFile(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\r\n            userinfo: inputParam.userInfo\r\n        })];\r\n        if (inputParam.operation === \"update\") {\r\n            urlArray.push(rsapi.post(\"/material/editMaterialFile\", {\r\n                userinfo: inputParam.userInfo,\r\n                nmaterialfilecode: inputParam.selectedRecord.nmaterialfilecode\r\n            }))\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\r\n                const linkmaster = linkMap.get(\"OptionList\");\r\n                let selectedRecord = {};\r\n                const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\r\n                let disabled = false;\r\n                let editObject = {};\r\n                if (inputParam.operation === \"update\") {\r\n                    editObject = response[1].data;\r\n                    let nlinkcode = {};\r\n                    let link = {};\r\n                    if (editObject[\"jsondata\"].nattachmenttypecode === attachmentType.LINK) {\r\n                        nlinkcode = {\r\n                            \"label\": editObject[\"jsondata\"].slinkname,\r\n                            \"value\": editObject[\"jsondata\"].nlinkcode\r\n                        }\r\n\r\n                        link = {\r\n                            slinkfilename: editObject[\"jsondata\"].sfilename,\r\n                            slinkdescription: editObject[\"jsondata\"].sdescription,\r\n                            nlinkdefaultstatus: editObject[\"jsondata\"].ndefaultstatus,\r\n                            sfilesize: '',\r\n                            nfilesize: 0,\r\n                            ndefaultstatus: 4,\r\n                            sfilename: '',\r\n                        }\r\n\r\n                    } else {\r\n                        nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\"\r\n                        link = {\r\n                            slinkfilename: '',\r\n                            slinkdescription: '',\r\n                            nlinkdefaultstatus: 4,\r\n                            sfilesize: editObject[\"jsondata\"].sfilesize,\r\n                            nfilesize: editObject[\"jsondata\"].nfilesize,\r\n                            ndefaultstatus: editObject[\"jsondata\"].ndefaultstatus,\r\n                            ssystemfilename: editObject[\"jsondata\"].ssystemfilename,\r\n                            sfilename: editObject[\"jsondata\"].sfilename,\r\n                        }\r\n                    }\r\n\r\n\r\n\r\n                    selectedRecord = {\r\n                        ...link,\r\n                        sdescription: editObject[\"jsondata\"].sdescription,\r\n                        nmaterialfilecode: editObject[\"jsondata\"].nmaterialfilecode,\r\n                        nattachmenttypecode: editObject[\"jsondata\"].nattachmenttypecode,\r\n                        nlinkcode,\r\n                    };\r\n                } else {\r\n                    selectedRecord = {\r\n                        nattachmenttypecode: response[0].data.AttachmentType.length > 0 ?\r\n                            response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\r\n                        nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\",\r\n                        disabled\r\n                    };\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openModal: true,\r\n                        operation: inputParam.operation,\r\n                        screenname: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        linkMaster: linkmaster,\r\n                        showSaveContinue: false,\r\n                        editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}