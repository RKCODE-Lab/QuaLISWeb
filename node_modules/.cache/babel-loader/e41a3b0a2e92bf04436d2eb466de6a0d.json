{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboard\\\\QueryBuilder.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faCopy } from '@fortawesome/free-solid-svg-icons';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport AddQuery from './AddQuery';\nimport AddParameter from './AddParameter';\nimport QueryTypeFilter from './QueryTypeFilter';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail, getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery, comboColumnValues, getColumnNamesByTableName, getTablesName, getModuleFormName, getDatabaseTables, executeQuery, getForeignTable, getViewColumns, getMasterData, createQueryBuilder, getParameterFromQuery, getSelectedQueryBuilder, updateQueryBuilder, getQueryBuilder } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus, queryTypeFilter, tableType, ColumnType } from '../../components/Enumeration';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport rsapi from '../../rsapi';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { Affix } from 'rsuite';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport ReactTooltip from 'react-tooltip';\nimport PortalModalSlideout from '../../components/portal-modal/portal-modal-slideout';\nimport BuildQuery from './BuildQuery';\nimport { render } from '@testing-library/react';\nimport { format } from 'date-fns';\nimport { ProductList } from '../product/product.styled';\nimport QueryBuilderParamter from './QueryBuilderParamter';\nimport { ReactComponent as ParameterConfigurationIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/parameter-configuration.svg\";\nimport { ReactComponent as ParameterMappingIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/parameter-mapping.svg\";\nimport DataGridComponent from '../../components/data-grid/data-grid.component';\nimport { stringOperatorData } from './QueryBuilderData'; // import {validationData} from './QueryBuilderData';\n\nconst jsonSql = require('json-sql')({\n  separatedValues: false\n});\n\nconst jsonSqlParam = require('json-sql')({\n  separatedValues: true\n});\n\nclass QueryBuilder extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.queryData, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.dataStateChangeMain = event => {\n      this.setState({\n        dataResultMain: process(this.props.Login.queryDataMain, event.dataStateMain),\n        dataStateMain: event.dataStateMain\n      });\n    };\n\n    this.copySQLQuery = type => {\n      if (type === 2) {\n        let query = this.state.selectedRecord[\"squerywithparam\"] || \"\";\n\n        if (this.state.selectedRecord[\"sdefaultvalue\"] && this.state.selectedRecord[\"sdefaultvalue\"]) {\n          this.state.selectedRecord[\"sdefaultvalue\"].forEach((dataItem, index) => {\n            if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\n              query = query.replace(\"$p\" + (index + 1), \"P$\" + dataItem.items.valuemember + \"$P\");\n            } else if (dataItem.items.sforeigncolumnname !== undefined && dataItem.items.sforeigncolumnname !== \"\") {\n              query = query.replace(\"$p\" + (index + 1), \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\n            } else {\n              query = query.replace(\"$p\" + (index + 1), \"P$\" + dataItem.items.columnname + \"$P\");\n            }\n          });\n        }\n\n        navigator.clipboard.writeText(query);\n      } else {\n        let query = this.props.Login.masterData.selectedQueryBuilder[\"squerywithparam\"] || \"\";\n\n        if (this.props.Login.masterData.selectedQueryBuilder[\"sdefaultvalue\"] && this.props.Login.masterData.selectedQueryBuilder[\"sdefaultvalue\"].value) {\n          const sdefaultValue = JSON.parse(this.props.Login.masterData.selectedQueryBuilder[\"sdefaultvalue\"].value);\n          sdefaultValue.sdefaultvalue.forEach((dataItem, index) => {\n            if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\n              query = query.replace(\"$p\" + (index + 1), \"P$\" + dataItem.items.valuemember + \"$P\");\n            } else if (dataItem.items.sforeigncolumnname !== undefined && dataItem.items.sforeigncolumnname !== \"\") {\n              query = query.replace(\"$p\" + (index + 1), \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\n            } else {\n              query = query.replace(\"$p\" + (index + 1), \"P$\" + dataItem.items.columnname + \"$P\");\n            }\n          });\n        }\n\n        navigator.clipboard.writeText(query);\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"querybuilder\",\n        methodUrl: \"QueryBuilder\",\n        // displayName: \"IDS_DASHBOARDTYPES\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.saveParam = (saveType, formRef) => {\n      let query = this.props.Login.masterData.selectedQueryBuilder[\"squerywithparam\"];\n      this.props.Login.comboData.sdefaultvalue.forEach((dataItem, index) => {\n        if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\n          let sqryData = \"\";\n\n          if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\n            dataItem.value.forEach(item => {\n              sqryData += item.value + \",\";\n            });\n            query = query.replace(\"$p\" + (index + 1), sqryData.trimEnd(\",\"));\n          } else {\n            query = query.replace(\"$p\" + (index + 1), dataItem.value.value);\n          }\n        } else if (dataItem.items.sforeigncolumnname !== undefined && dataItem.items.sforeigncolumnname !== \"\") {\n          query = query.replace(\"$p\" + (index + 1), dataItem.value.value);\n        } else if (dataItem.items.columntype === ColumnType.DATATIME || dataItem.items.columntype === ColumnType.DATE && dataItem.symbolObject.items.isInputVisible === true && (dataItem.symbolObject.items.symbolType === 5 || dataItem.symbolObject.items.symbolType === 1)) {\n          query = query.replace(\"$p\" + (index + 1), \"'\" + format(new Date(dataItem.value), \"yyyy-MM-dd HH:mm:ss.SS\") + \"'\");\n        } else {\n          query = query.replace(\"$p\" + (index + 1), \"'\" + dataItem.value + \"'\");\n        }\n      });\n      const jsonData = JSON.parse(this.props.Login.masterData.selectedQueryBuilder[\"jsondata\"].value);\n      const inputParam = {\n        sgeneratedquery: query,\n        columnList: jsonData[\"columnList\"],\n        userInfo: this.props.Login.userInfo\n      };\n      let inputData = []; // inputData[\"userinfo\"] = this.props.Login.userInfo;\n      // inputData[\"queryBuilder\"] = { \"nstatus\": 1 };\n      // inputData[\"queryBuilder\"][\"nquerybuildercode\"] = this.props.Login.masterData.selectedQueryBuilder[\"nquerybuildercode\"]\n      // inputData[\"queryBuilder\"][\"sdefaultvalue\"] = comboData;\n\n      this.props.updateQueryBuilder(inputParam, inputData, this.props.Login.masterData);\n    };\n\n    this.save = (saveType, formRef) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"].length > 0) {\n        let inputData = [];\n        let jsondata = {};\n        let postParam = undefined;\n\n        if (selectedRecord[\"sdefaultvalue\"].length > 0) {\n          selectedRecord[\"sdefaultvalue\"].forEach((item, i) => {\n            if (item.symbolObject.items.symbolType === 4) {\n              delete item.symbolObject.items[\"replacewith\"];\n            }\n          });\n        }\n\n        postParam = {\n          inputListName: \"QueryBuilder\",\n          selectedObject: \"selectedQueryBuilder\",\n          primaryKeyField: \"nquerybuildercode\"\n        };\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"queryBuilder\"] = {\n          \"nstatus\": 1\n        };\n        jsondata[\"groupList\"] = selectedRecord[\"groupList\"];\n        jsondata[\"aggregate\"] = selectedRecord[\"aggregate\"];\n        jsondata[\"orderby\"] = selectedRecord[\"orderby\"];\n        jsondata[\"columnList\"] = this.props.Login.viewColumnListByRule;\n        inputData[\"sgeneratedquery\"] = selectedRecord[\"sgeneratedquery\"];\n        inputData[\"queryBuilder\"][\"squerybuildername\"] = selectedRecord[\"querybuildername\"];\n        inputData[\"queryBuilder\"][\"nquerytype\"] = 1;\n        inputData[\"queryBuilder\"][\"sviewname\"] = selectedRecord[\"sviewname\"].label;\n        inputData[\"queryBuilder\"][\"squerywithparam\"] = selectedRecord[\"squerywithparam\"];\n        inputData[\"queryBuilder\"][\"squerywithvalue\"] = selectedRecord[\"sgeneratedquery\"];\n        inputData[\"queryBuilder\"][\"sdefaultvalue\"] = {\n          sdefaultvalue: selectedRecord[\"sdefaultvalue\"]\n        };\n        inputData[\"queryBuilder\"][\"jsondata\"] = jsondata;\n        const inputParam = {\n          classUrl: \"querybuilder\",\n          methodUrl: \"QueryBuilder\",\n          displayName: this.props.Login.inputParam.displayName,\n          inputData: inputData,\n          operation: \"create\",\n          saveType,\n          formRef,\n          postParam\n        };\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openPortalModal\"); // this.props.createQueryBuilder(inputData, this.props.Login);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYCOLUMNS\"\n        }));\n      }\n    };\n\n    this.deleteQB = ncontrolCode => {\n      let inputData = []; // let postParam = {\n      //     inputListName: \"QueryBuilder\",\n      //     selectedObject: \"selectedDashBoardTypes\",\n      //     primaryKeyField: \"ndashboardtypecode\",\n      //     primaryKeyValue: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\n      //     fetchUrl: \"dashboardtypes/getAllSelectionDashBoardTypes\",\n      //     fecthInputObject: { userinfo: this.props.Login.userInfo }\n      // };\n\n      inputData[\"queryBuilder\"] = this.props.Login.masterData.selectedQueryBuilder;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const inputParam = {\n        methodUrl: \"QueryBuilder\",\n        classUrl: \"querybuilder\",\n        inputData: inputData,\n        operation: \"delete\",\n        searchRef: this.searchRef\n      };\n      this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n    };\n\n    this.confirmDelete = ncontrolCode => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteQB(\"delete\", ncontrolCode));\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n\n      if (this.state.selectedcombo[\"nquerytypecode\"]) {\n        console.log(this.state.selectedcombo[\"nquerytypecode\"].value);\n      }\n\n      const nquerytypecode = this.state.selectedcombo[\"nquerytypecode\"] ? this.state.selectedcombo[\"nquerytypecode\"].value : this.props.Login.masterData.queryTypeCode;\n      this.props.getQueryBuilder(nquerytypecode, this.props.Login.userInfo, this.props.Login.masterData);\n    };\n\n    this.onFilterComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onParamComboChange = (data, index) => {\n      let comboData = this.props.Login.comboData;\n      comboData[\"sdefaultvalue\"][index].value = data;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          comboData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onParamInputChange = (event, type, index, dataItem) => {\n      let comboData = this.props.Login.comboData;\n\n      if (type === 2) {\n        const inputValue = event.target.value;\n\n        if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\n          comboData[\"sdefaultvalue\"][index].value = event.target.value;\n        }\n      } else if (type === 1) {\n        comboData[\"sdefaultvalue\"][index].value = event.target.checked;\n      } else if (type === 3) {\n        if (dataItem.symbolObject.items.symbolType === 4) {\n          // const symbolObject = stringOperatorData.filter(data => data.value === dataItem.symbolObject.value);\n          let symbolObject = \"\";\n\n          if (dataItem.symbolObject.value === 7 || dataItem.symbolObject.value === 8) {\n            symbolObject = \"'%_%'\";\n          } else if (dataItem.symbolObject.value === 9) {\n            symbolObject = \"'_%'\";\n          } else {\n            symbolObject = \"'%_'\";\n          }\n\n          const index1 = symbolObject.indexOf('_');\n          let inputname = undefined;\n          inputname = symbolObject.substr(0, index1) + event.target.value + symbolObject.substr(index1 + 1);\n          inputname = inputname.slice(1, inputname.length - 1);\n          comboData[\"sdefaultvalue\"][index].value = inputname;\n          comboData[\"sdefaultvalue\"][index].showInputValue = event.target.value;\n        } else {\n          comboData[\"sdefaultvalue\"][index].value = event.target.value;\n        }\n      } else {\n        comboData[\"sdefaultvalue\"][index].value = event.target.value;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          comboData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[\"groupList\"][groupIndex][index][dateName] = dateValue;\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedcombo = this.state.selectedcombo || {};\n      selectedcombo[fieldName] = comboData;\n      this.setState({\n        selectedcombo\n      });\n    };\n\n    this.onViewComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      const inputParam = {\n        sviewname: comboData.value,\n        selectedRecord,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.getViewColumns(inputParam);\n    };\n\n    this.onAggregateChange = (comboData, fieldName, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"aggregate\"] = selectedRecord[\"aggregate\"] || [];\n\n      if (fieldName === \"columnname\") {\n        selectedRecord[\"aggregate\"][index] = {\n          \"columnname\": comboData,\n          \"aggfunctionname\": \"\"\n        };\n      } else {\n        if (selectedRecord[\"aggregate\"][index][\"columnname\"] && selectedRecord[\"aggregate\"][index][\"columnname\"] !== undefined) {\n          selectedRecord[\"aggregate\"][index][\"aggfunctionname\"] = comboData;\n        } else {}\n      } // this.setState({ selectedRecord });\n\n\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onRuleChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      this.clearSelectedRule(selectedRecord, index);\n      const sqlQuery = this.props.Login.sqlQuery;\n      const oldselectedRecord = selectedRecord;\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n      const tableData = comboData.items;\n      const mastertablename = tableData.mastertablename;\n\n      if (comboData.items.needmasterdata && mastertablename) {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          data: {\n            nflag: 2,\n            mastertablename,\n            valuemember: tableData.valuemember,\n            displaymember: tableData.displaymember\n          },\n          selectedRecord,\n          groupIndex,\n          index,\n          optionId: tableData.valuemember\n        };\n        this.props.getMasterData(inputParam, this.props.Login.viewMasterListByRule);\n      } else if (comboData.items && comboData.items.columntype === ColumnType.COMBO) {\n        if (sqlQuery) {\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            stablename: comboData.items.foriegntablename,\n            scolumnname: comboData.value,\n            selectedRecord,\n            groupIndex,\n            index\n          };\n          this.props.getForeignTable(inputParam, 'column');\n        } else {\n          selectedRecord[\"groupList\"][groupIndex][index][`${comboData.items.sforeigncolumnname}`] = \"\";\n          const inputParam = {\n            data: { ...comboData.items,\n              nflag: 1\n            },\n            userinfo: this.props.Login.userInfo,\n            selectedRecord,\n            groupIndex,\n            index,\n            optionId: comboData.items.sforeigncolumnname\n          };\n          this.props.getMasterData(inputParam, this.props.Login.viewMasterListByRule);\n        }\n      } else if (comboData.items && comboData.items.columntype === ColumnType.TEXTINPUT && oldselectedRecord[\"groupList\"][groupIndex][index][fieldName].items.columntype !== ColumnType.TEXTINPUT) {\n        selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"] = \"\";\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onMasterDataChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onOrderbyChange = (comboData, fieldName, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"orderby\"] = selectedRecord[\"orderby\"] || [];\n\n      if (fieldName === \"columnname\") {\n        selectedRecord[\"orderby\"][index] = {\n          \"columnname\": comboData,\n          \"ordertype\": \"\"\n        };\n      } else {\n        if (selectedRecord[\"orderby\"][index][\"columnname\"] && selectedRecord[\"orderby\"][index][\"columnname\"] !== undefined) {\n          selectedRecord[\"orderby\"][index][\"ordertype\"] = comboData;\n        } else {}\n      } // this.setState({ selectedRecord });\n\n\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.deleteOrderby = index => {\n      let addOrderbyList = this.props.Login.addOrderbyList;\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[\"orderby\"].splice(index, 1);\n      addOrderbyList.splice(index, 1);\n      addOrderbyList.forEach((data, index) => {\n        addOrderbyList[index] = index;\n      });\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addOrderbyList\n        }\n      };\n      this.props.updateStore(updateInfo);\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.addOrderby = () => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (selectedRecord[\"sviewname\"]) {\n        const addOrderbyList = this.props.Login.addOrderbyList || [];\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n        const arrayLength = addOrderbyList.length;\n        viewColumnListByRule = this.props.Login.viewColumnList;\n        addOrderbyList[arrayLength] = arrayLength;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            addOrderbyList,\n            viewColumnListByRule\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTVIEW\"\n        }));\n      }\n    };\n\n    this.deleteAggregate = index => {\n      let addAggregateList = this.props.Login.addAggregateList;\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[\"aggregate\"].splice(index, 1);\n      addAggregateList.splice(index, 1);\n      addAggregateList.forEach((data, index) => {\n        addAggregateList[index] = index;\n      });\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addAggregateList\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ selectedRecord });\n\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.addAggregate = () => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (selectedRecord[\"sviewname\"]) {\n        // if (selectedRecord[\"groupby\"] && selectedRecord[\"groupby\"] === true) {\n        const addAggregateList = this.props.Login.addAggregateList || [];\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n        const arrayLength = addAggregateList.length;\n        viewColumnListByRule = this.props.Login.viewColumnList;\n        addAggregateList[arrayLength] = arrayLength;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            addAggregateList,\n            viewColumnListByRule\n          }\n        };\n        this.props.updateStore(updateInfo); // } else {\n        //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTGROUPBY\" }));\n        // }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTVIEW\"\n        }));\n      }\n    };\n\n    this.addRule = (type, groupIndex) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (type === \"sql\") {\n        let addRuleList = this.props.Login.addRuleList || [];\n\n        if (addRuleList.length > 0) {\n          const arrayLength = addRuleList.length;\n          addRuleList[arrayLength] = arrayLength;\n          selectedRecord[\"button_and_\" + arrayLength] = true;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              addRuleList,\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          addRuleList[0] = 0;\n          this.props.getDatabaseTables(this.props.Login.userInfo, this.props.Login.sqlQuery, {\n            addRuleList,\n            selectedRecord: {}\n          });\n        }\n      } else {\n        if (selectedRecord[\"sviewname\"]) {\n          let viewColumnListByRule = this.props.Login.viewColumnListByRule || []; // const addRuleList = this.props.Login.addRuleList || [];\n          // const arrayLength = addRuleList.length;\n          // addRuleList[arrayLength] = arrayLength;\n\n          const addGroupList = this.props.Login.addGroupList || [];\n          const arrayLength = addGroupList[groupIndex];\n          addGroupList[groupIndex] = arrayLength + 1; // const addGroupList = {...this.props.Login.addGroupList, [groupIndex]: addRuleList};\n\n          selectedRecord[\"groupList\"][groupIndex][arrayLength] = {}; // viewColumnListByRule[groupIndex][arrayLength] = this.props.Login.viewColumnList;\n\n          viewColumnListByRule = this.props.Login.viewColumnList;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              addGroupList,\n              viewColumnListByRule\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTVIEW\"\n          }));\n        }\n      }\n\n      let condition = [];\n      condition = [{\n        $and: [{\n          $and: [{\n            b: {\n              $lt: 10\n            }\n          }]\n        }, {\n          // $not: [{\n          $and: [{\n            \"naccredited\": {\n              $eq: 70\n            }\n          }, {\n            \"naccredited\": {\n              $eq: 71\n            }\n          }] // }]\n\n        }]\n      }];\n      var sql1 = jsonSql.build({\n        table: 'table',\n        condition: condition // [{\n        //     // $not: [{\n        //     $and: [\n        //         { b: { $lt: 10 } }, { b: { $lt: 10 } },\n        //         {\n        //             // $not: [{\n        //                 $and: [\n        //                     { \"naccredited\": { $eq: 70 } },\n        //                     { \"naccredited\": { $eq: 71 } }\n        //                 ]\n        //             // }]\n        //         }\n        //         // {\n        //         //     $or: [\n        //         //         { \"naccredited\": { $eq: 70 } },\n        //         //         { \"naccredited\": { $eq: 71 } }\n        //         //     ]\n        //         // },\n        //         // {\n        //         //     $or: [\n        //         //         { \"nacc\": { $eq: 70 } },\n        //         //         { \"nacc\": { $eq: 70 } },\n        //         //         {\n        //         //             $not: [{\n        //         //                 $or: [\n        //         //                     { \"naccredited1\": { $eq: 71 } }]\n        //         //             }]\n        //         //         }\n        //         //     ]\n        //         // },\n        //         // { ab: { $gt: 2 } },\n        //         // {\n        //         //     $and: [\n        //         //         { \"naccredited\": { $eq: 70 } },\n        //         //         { \"naccredited\": { $eq: 71 } },\n        //         //         {\n        //         //             $not: [{\n        //         //                 $and: [\n        //         //                     { \"naccredited1\": { $eq: 71 } },\n        //         //                     { \"naccredited2\": { $eq: 71 } }]\n        //         //             }]\n        //         //         }\n        //         //     ]\n        //         // }\n        //     ]\n        //     // }]\n        // }]\n\n      });\n      console.log(sql1.query);\n    };\n\n    this.addGroup = () => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (selectedRecord[\"sviewname\"]) {\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n        const addGroupList = this.props.Login.addGroupList || [];\n        const arrayLength = addGroupList.length;\n        addGroupList[arrayLength] = 1; // viewColumnListByRule[arrayLength] = [];\n        // viewColumnListByRule[arrayLength].push(this.props.Login.viewColumnList);\n\n        viewColumnListByRule = this.props.Login.viewColumnList;\n\n        if (arrayLength === 0) {\n          selectedRecord[\"groupList\"] = [];\n          selectedRecord[\"filtercolumns\"] = viewColumnListByRule;\n        }\n\n        selectedRecord[\"groupList\"][arrayLength] = [];\n        selectedRecord[\"groupList\"][arrayLength][\"button_and\"] = true;\n        selectedRecord[\"groupList\"][arrayLength][0] = {};\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            addGroupList,\n            viewColumnListByRule,\n            selectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTVIEW\"\n        }));\n      }\n    };\n\n    this.getDatabaseTables = () => {\n      const sqlQuery = false;\n      this.setState({\n        selectedRecord: {}\n      });\n      this.props.getDatabaseTables(this.props.Login.userInfo, sqlQuery, {\n        addRuleList: [],\n        addGroupList: [],\n        addAggregateList: [],\n        addOrderbyList: []\n      });\n    };\n\n    this.closePortalModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openPortalModal: false,\n          selectedRecord: {},\n          addRuleList: [],\n          count: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: false,\n          selectedRecord: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onExecuteRule = () => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (selectedRecord[\"sgeneratedquery\"]) {\n        let query = selectedRecord[\"squerywithparam\"];\n        selectedRecord[\"sdefaultvalue\"].forEach((dataItem, index) => {\n          if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\n            let sqryData = \"\";\n\n            if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\n              dataItem.value.forEach(item => {\n                sqryData += item.value + \",\";\n              });\n              query = query.replace(\"$p\" + (index + 1), sqryData.trimEnd(\",\"));\n            } else {\n              query = query.replace(\"$p\" + (index + 1), dataItem.value.value);\n            }\n          } else if (dataItem.items.sforeigncolumnname !== undefined && dataItem.items.sforeigncolumnname !== \"\") {\n            query = query.replace(\"$p\" + (index + 1), dataItem.value.value);\n          } else if (dataItem.items.columntype === ColumnType.DATATIME || dataItem.items.columntype === ColumnType.DATE && dataItem.symbolObject.items.isInputVisible === true && (dataItem.symbolObject.items.symbolType === 5 || dataItem.symbolObject.items.symbolType === 1)) {\n            query = query.replace(\"$p\" + (index + 1), \"'\" + format(new Date(dataItem.value), \"yyyy-MM-dd HH:mm:ss.SS\") + \"'\");\n          } else {\n            query = query.replace(\"$p\" + (index + 1), \"'\" + dataItem.value + \"'\");\n          }\n        });\n        const inputParam = {\n          sgeneratedquery: query,\n          //selectedRecord[\"sgeneratedquery\"],\n          selectedRecord,\n          columnList: selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"] || this.props.Login.viewColumnListByRule,\n          userInfo: this.props.Login.userInfo\n        };\n        this.props.executeQuery(inputParam);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_QUERYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.deleteRule = (groupIndex, index) => {\n      let addGroupList = this.props.Login.addGroupList;\n      const selectedRecord = this.state.selectedRecord;\n      addGroupList[groupIndex] = addGroupList[groupIndex] - 1; // selectedRecord[`button_and_${index}`] && delete selectedRecord[`button_and_${index}`];\n      // selectedRecord[`button_or_${index}`] && delete selectedRecord[`button_or_${index}`];\n      // selectedRecord[`notoperator_${index}`] && delete selectedRecord[`notoperator_${index}`];\n\n      if (addGroupList[groupIndex] === 0) {\n        addGroupList.splice(groupIndex, 1);\n        selectedRecord[\"groupList\"].splice(index, 1);\n      } else {\n        selectedRecord[\"groupList\"][groupIndex].splice(index, 1);\n      } // this.clearSelectedRule(selectedRecord, index);\n\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addGroupList,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.clearRule = () => {\n      const sviewname = this.state.selectedRecord.sviewname || \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addRuleList: [],\n          selectedRecord: {\n            sviewname\n          },\n          sqlQuery: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.resetRule = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addRuleList: [],\n          addGroupList: [],\n          addAggregateList: [],\n          addOrderbyList: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n      this.setState({\n        selectedRecord: {}\n      });\n    };\n\n    this.onSymbolChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      const oldSelectedRecord = selectedRecord[\"groupList\"][groupIndex][index][fieldName] || {};\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n      const items = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items;\n      selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"][\"items\"][\"needmasterdata\"] = items.needmasterdata !== undefined ? comboData.items.needmasterdata : false;\n\n      if (comboData.items.symbolType === 2 || comboData.items.symbolType === 3) {\n        selectedRecord[\"groupList\"][groupIndex][index][items[\"valuemember\"]] && delete selectedRecord[\"groupList\"][groupIndex][index][items[\"valuemember\"]];\n        selectedRecord[\"groupList\"][groupIndex][index][items[\"foreigncolumnname\"]] && delete selectedRecord[\"groupList\"][groupIndex][index][items[\"foreigncolumnname\"]];\n        selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"] && delete selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"];\n      } else if (comboData.items.symbolType === 5 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType !== 5) {\n        selectedRecord[\"groupList\"][groupIndex][index][\"snumericinput\"] && delete selectedRecord[\"groupList\"][groupIndex][index][\"snumericinput\"];\n        selectedRecord[\"groupList\"][groupIndex][index][\"snumericinputtwo\"] && delete selectedRecord[\"groupList\"][groupIndex][index][\"snumericinputtwo\"];\n      } else if (comboData.items.symbolType === 6 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType === 1 || comboData.items.symbolType === 1 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType === 6) {\n        selectedRecord[\"groupList\"][groupIndex][index][`${items.sforeigncolumnname}`] && delete selectedRecord[\"groupList\"][groupIndex][index][`${items.sforeigncolumnname}`];\n        selectedRecord[\"groupList\"][groupIndex][index][`${items.valuemember}`] && delete selectedRecord[\"groupList\"][groupIndex][index][`${items.valuemember}`];\n      } else {}\n\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onInputChange = (event, type, groupIndex, index) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (type === 2) {\n        const inputValue = event.target.value;\n\n        if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\n          selectedRecord[\"groupList\"][groupIndex][index][event.target.name] = event.target.value;\n        }\n      } else if (type === 1) {\n        selectedRecord[\"groupList\"][groupIndex][index][event.target.name] = event.target.checked;\n      } else if (type === 3) {\n        selectedRecord[\"groupList\"][groupIndex][index][event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.generateFilterQuery = selectedRecord => {\n      const addGroupList = this.props.Login.addGroupList;\n      jsonSql.setDialect('mssql');\n      let databaseCondition = [];\n      let displayCondition = [];\n      let databaseConditionParam = [];\n      let fieldWithValue = [];\n      let notOperator = false;\n\n      if (addGroupList && addGroupList.length > 0) {\n        let groupConditionDatabase = [];\n        let groupConditionDatabaseParam = [];\n        let groupConditionDisplay = [];\n        addGroupList.forEach((items, groupIndex) => {\n          let symbolObject = {};\n          databaseCondition = [];\n          databaseConditionParam = [];\n          displayCondition = [];\n          [...Array(items)].map((data, index) => {\n            if (selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"]) {\n              symbolObject = selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"] && selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"].items && selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"].items || {};\n              const current_button_and = selectedRecord[\"groupList\"][groupIndex][`button_and`];\n              const current_button_or = selectedRecord[\"groupList\"][groupIndex][`button_or`];\n              const next_button_and = selectedRecord[\"groupList\"][groupIndex][`button_and`];\n              const next_button_or = selectedRecord[\"groupList\"][groupIndex][`button_or`] ? selectedRecord[\"groupList\"][groupIndex][`button_or`] : false;\n              let inputname = selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"];\n              const symbolname = symbolObject.symbol;\n              let numericinput = selectedRecord[\"groupList\"][groupIndex][index][\"snumericinput\"];\n              const columnLabel = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].label;\n              const columnValue = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].value;\n              const snumericinputtwo = selectedRecord[\"groupList\"][groupIndex][index][\"snumericinputtwo\"];\n              let columnName = undefined;\n              const needmasterdata = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.needmasterdata ? selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.needmasterdata : false;\n\n              if (selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.needmasterdata) {\n                columnName = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember;\n              } else if (selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.sforeigncolumnname) {\n                columnName = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.sforeigncolumnname;\n              }\n\n              const dateinput = selectedRecord[\"groupList\"][groupIndex][index][\"dateinput\"] && format(new Date(selectedRecord[\"groupList\"][groupIndex][index][\"dateinput\"]), \"yyyy-MM-dd HH:mm:ss.SS\"); //selectedRecord[\"dateinput_\" + index];\n\n              const dateinputtwo = selectedRecord[\"groupList\"][groupIndex][index][\"dateinputtwo\"] && format(new Date(selectedRecord[\"groupList\"][groupIndex][index][\"dateinputtwo\"]), \"yyyy-MM-dd HH:mm:ss.SS\"); //selectedRecord[\"dateinputtwo_\" + index];\n\n              if (symbolObject && inputname) {\n                if (symbolObject.symbolType === 4) {\n                  const showInputValue = inputname;\n                  const index1 = symbolObject.replacewith.indexOf('_');\n                  inputname = symbolObject.replacewith.substr(0, index1) + inputname + symbolObject.replacewith.substr(index1 + 1);\n                  inputname = inputname.slice(1, inputname.length - 1);\n                  databaseCondition.push({\n                    [columnValue]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  databaseConditionParam.push({\n                    [columnValue]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  fieldWithValue.push({\n                    columnName: columnValue,\n                    value: inputname,\n                    showInputValue: showInputValue,\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                } else {\n                  databaseCondition.push({\n                    [columnValue]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  databaseConditionParam.push({\n                    [columnValue]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  fieldWithValue.push({\n                    columnName: columnValue,\n                    value: inputname,\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                }\n              } else if (symbolObject && numericinput && symbolObject.symbolType !== 5) {\n                databaseCondition.push({\n                  [columnValue]: {\n                    [symbolname]: numericinput\n                  }\n                });\n                displayCondition.push({\n                  [columnLabel]: {\n                    [symbolname]: numericinput\n                  }\n                });\n                databaseConditionParam.push({\n                  [columnValue]: {\n                    [symbolname]: numericinput\n                  }\n                });\n                fieldWithValue.push({\n                  columnName: columnValue,\n                  value: numericinput,\n                  symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                  items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                });\n              } else if (symbolObject && symbolObject.symbolType === 2 || symbolObject && symbolObject.symbolType === 3) {\n                databaseCondition.push({\n                  [columnValue]: {\n                    [symbolname]: ''\n                  }\n                });\n                displayCondition.push({\n                  [columnLabel]: {\n                    [symbolname]: ''\n                  }\n                });\n                databaseConditionParam.push({\n                  [columnValue]: {\n                    [symbolname]: ''\n                  }\n                });\n                fieldWithValue.push({\n                  columnName: columnValue,\n                  value: '',\n                  symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                  items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                });\n              } else if (symbolObject && numericinput && snumericinputtwo && symbolObject.symbolType === 5) {\n                if (symbolObject.symbol === \"\") {\n                  const tempValue = [{\n                    [columnValue]: {\n                      [symbolObject.replacewith[0]]: +numericinput\n                    }\n                  }, {\n                    [columnValue]: {\n                      [symbolObject.replacewith[1]]: snumericinputtwo\n                    }\n                  }];\n                  const tempValue1 = [{\n                    [columnLabel]: {\n                      [symbolObject.replacewith[0]]: +numericinput\n                    }\n                  }, {\n                    [columnLabel]: {\n                      [symbolObject.replacewith[1]]: snumericinputtwo\n                    }\n                  }];\n                  databaseCondition.push(tempValue);\n                  displayCondition.push(tempValue1);\n                  databaseConditionParam.push(tempValue);\n                } else {\n                  const tempValue = [{\n                    [symbolObject.symbol]: [{\n                      [columnValue]: {\n                        [symbolObject.replacewith[0]]: +numericinput\n                      }\n                    }, {\n                      [columnValue]: {\n                        [symbolObject.replacewith[1]]: snumericinputtwo\n                      }\n                    }]\n                  }];\n                  const tempValue1 = [{\n                    [symbolObject.symbol]: [{\n                      [columnLabel]: {\n                        [symbolObject.replacewith[0]]: +numericinput\n                      }\n                    }, {\n                      [columnLabel]: {\n                        [symbolObject.replacewith[1]]: snumericinputtwo\n                      }\n                    }]\n                  }];\n                  databaseCondition.push(tempValue);\n                  displayCondition.push(tempValue1);\n                  databaseConditionParam.push(tempValue);\n                }\n              } else if (symbolObject && symbolObject.symbolType === 6 && columnName && selectedRecord[\"groupList\"][groupIndex][index][columnName]) {\n                const data = selectedRecord[\"groupList\"][groupIndex][index][columnName] && selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => {\n                  return item.value;\n                }) || [];\n                const data1 = selectedRecord[\"groupList\"][groupIndex][index][columnName] && selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => {\n                  return item.label;\n                }) || [];\n\n                if (data.length > 0) {\n                  if (needmasterdata) {\n                    databaseCondition.push({\n                      [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember]: {\n                        [symbolname]: data\n                      }\n                    });\n                    databaseConditionParam.push({\n                      [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember]: {\n                        [symbolname]: data\n                      }\n                    });\n                    fieldWithValue.push({\n                      columnName: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember,\n                      value: selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => {\n                        return item;\n                      }),\n                      symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                      items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                    });\n                  } else {\n                    databaseCondition.push({\n                      [columnValue]: {\n                        [symbolname]: data\n                      }\n                    });\n                    databaseConditionParam.push({\n                      [columnValue]: {\n                        [symbolname]: data\n                      }\n                    });\n                    fieldWithValue.push({\n                      columnName: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember,\n                      value: selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => {\n                        return item;\n                      }),\n                      symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                      items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                    });\n                  }\n                }\n\n                if (data1.length > 0) {\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: data1\n                    }\n                  });\n                } // }\n\n              } else if (symbolObject && columnName && symbolObject.isInputVisible && selectedRecord[\"groupList\"][groupIndex][index][columnName]) {\n                if (needmasterdata) {\n                  databaseCondition.push({\n                    [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember]: {\n                      [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].value\n                    }\n                  });\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label\n                    }\n                  });\n                  databaseConditionParam.push({\n                    [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember]: {\n                      [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label\n                    }\n                  });\n                  fieldWithValue.push({\n                    columnName: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember,\n                    value: selectedRecord[\"groupList\"][groupIndex][index][columnName],\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                } else {\n                  databaseCondition.push({\n                    [columnValue]: {\n                      [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].value\n                    }\n                  });\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label\n                    }\n                  });\n                  databaseConditionParam.push({\n                    [columnValue]: {\n                      [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label\n                    }\n                  });\n                  fieldWithValue.push({\n                    columnName: columnValue,\n                    value: selectedRecord[\"groupList\"][groupIndex][index][columnName],\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                }\n              } else if (symbolObject && dateinput && symbolObject.symbolType !== 5) {\n                databaseCondition.push({\n                  [columnValue]: {\n                    [symbolname]: dateinput\n                  }\n                });\n                displayCondition.push({\n                  [columnLabel]: {\n                    [symbolname]: dateinput\n                  }\n                });\n                databaseConditionParam.push({\n                  [columnValue]: {\n                    [symbolname]: dateinput\n                  }\n                });\n                fieldWithValue.push({\n                  columnName: columnValue,\n                  value: dateinput,\n                  symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                  items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                });\n              } else if (symbolObject && dateinput && dateinputtwo && symbolObject.symbolType === 5) {\n                if (symbolObject.symbol === \"\") {\n                  const tempValue = [{\n                    [columnValue]: {\n                      [symbolObject.replacewith[0]]: dateinput\n                    }\n                  }, {\n                    [columnValue]: {\n                      [symbolObject.replacewith[1]]: dateinputtwo\n                    }\n                  }];\n                  const tempValue1 = [{\n                    [columnLabel]: {\n                      [symbolObject.replacewith[0]]: dateinput\n                    }\n                  }, {\n                    [columnLabel]: {\n                      [symbolObject.replacewith[1]]: dateinputtwo\n                    }\n                  }];\n                  databaseCondition.push(tempValue);\n                  displayCondition.push(tempValue1);\n                  databaseConditionParam.push(tempValue);\n                  fieldWithValue.push({\n                    columnName: columnValue,\n                    value: dateinput,\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                  fieldWithValue.push({\n                    columnName: columnValue,\n                    value: dateinputtwo,\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                } else {\n                  const tempValue = [{\n                    [symbolObject.symbol]: [{\n                      [columnValue]: {\n                        [symbolObject.replacewith[0]]: dateinput\n                      }\n                    }, {\n                      [columnValue]: {\n                        [symbolObject.replacewith[1]]: dateinputtwo\n                      }\n                    }]\n                  }];\n                  const tempValue1 = [{\n                    [symbolObject.symbol]: [{\n                      [columnLabel]: {\n                        [symbolObject.replacewith[0]]: dateinput\n                      }\n                    }, {\n                      [columnLabel]: {\n                        [symbolObject.replacewith[1]]: dateinputtwo\n                      }\n                    }]\n                  }];\n                  databaseCondition.push(tempValue);\n                  displayCondition.push(tempValue1);\n                  databaseConditionParam.push(tempValue);\n                  fieldWithValue.push({\n                    columnName: columnValue,\n                    value: dateinput,\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                  fieldWithValue.push({\n                    columnName: columnValue,\n                    value: dateinputtwo,\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                }\n              }\n            } else {\n              this.groupByFunction(selectedRecord, databaseCondition, displayCondition);\n            }\n          });\n\n          if (selectedRecord[\"groupList\"][groupIndex][`button_and`] === true) {\n            if (selectedRecord[\"groupList\"][groupIndex][`button_not`] === true) {\n              groupConditionDisplay.push([{\n                $not: [{\n                  $and: [...displayCondition]\n                }]\n              }]);\n              groupConditionDatabase.push([{\n                $not: [{\n                  $and: [...databaseCondition]\n                }]\n              }]);\n              groupConditionDatabaseParam.push([{\n                $not: [{\n                  $and: [...databaseConditionParam]\n                }]\n              }]);\n            } else {\n              groupConditionDisplay.push([{\n                $and: [...displayCondition]\n              }]);\n              groupConditionDatabase.push([{\n                $and: [...databaseCondition]\n              }]);\n              groupConditionDatabaseParam.push([{\n                $and: [...databaseConditionParam]\n              }]);\n            }\n          } else if (selectedRecord[\"groupList\"][groupIndex][`button_or`] === true) {\n            if (selectedRecord[\"groupList\"][groupIndex][`button_not`] === true) {\n              groupConditionDisplay.push([{\n                $not: [{\n                  $or: [...displayCondition]\n                }]\n              }]);\n              groupConditionDatabase.push([{\n                $not: [{\n                  $or: [...databaseCondition]\n                }]\n              }]);\n              groupConditionDatabaseParam.push([{\n                $not: [{\n                  $or: [...databaseConditionParam]\n                }]\n              }]);\n            } else {\n              groupConditionDisplay.push([{\n                $or: [...displayCondition]\n              }]);\n              groupConditionDatabase.push([{\n                $or: [...databaseCondition]\n              }]);\n              groupConditionDatabaseParam.push([{\n                $or: [...databaseConditionParam]\n              }]);\n            }\n          } else {\n            groupConditionDisplay.push([{ ...displayCondition\n            }]);\n            groupConditionDatabase.push([{ ...databaseCondition\n            }]);\n            groupConditionDatabaseParam.push([{ ...databaseConditionParam\n            }]);\n          }\n\n          let finalConditionDisplay = undefined;\n          let finalConditionDatabase = undefined;\n          let finalConditionDatabaseParam = undefined;\n\n          if (addGroupList.length - 1 === 0) {\n            finalConditionDisplay = [...groupConditionDisplay];\n            finalConditionDatabase = [...groupConditionDatabase];\n            finalConditionDatabaseParam = [...groupConditionDatabaseParam];\n          } else if (addGroupList.length - 1 === groupIndex) {\n            if (selectedRecord[\"groupList\"][0][`button_and`] === true) {\n              finalConditionDisplay = [{\n                $and: [...groupConditionDisplay]\n              }];\n              finalConditionDatabase = [{\n                $and: [...groupConditionDatabase]\n              }];\n              finalConditionDatabaseParam = [{\n                $and: [...groupConditionDatabaseParam]\n              }];\n            } else if (selectedRecord[\"groupList\"][0][`button_or`] === true) {\n              finalConditionDisplay = [{\n                $or: [...groupConditionDisplay]\n              }];\n              finalConditionDatabase = [{\n                $or: [...groupConditionDatabase]\n              }];\n              finalConditionDatabaseParam = [{\n                $or: [...groupConditionDatabaseParam]\n              }];\n            } else {\n              finalConditionDisplay = [{ ...groupConditionDisplay\n              }];\n              finalConditionDatabase = [{ ...groupConditionDatabase\n              }];\n              finalConditionDatabaseParam = [{ ...groupConditionDatabaseParam\n              }];\n            }\n          }\n\n          if (this.props.Login.sqlQuery) {\n            const databaseSQLQuery = jsonSql.build({\n              type: 'select',\n              table: selectedRecord[\"stablename_0\"].value,\n              condition: databaseCondition\n            });\n            const displaySQLQuery = jsonSql.build({\n              type: 'select',\n              table: selectedRecord[\"stablename_0\"].label,\n              condition: displayCondition\n            });\n            selectedRecord[\"sgeneratedquery\"] = databaseSQLQuery.query;\n            selectedRecord[\"sdisplayquery\"] = displaySQLQuery.query;\n          } else {\n            const fields = selectedRecord[\"filtercolumns\"];\n            let fieldList = [];\n            let dbfieldList = [];\n            let groupByAggregateFields = [];\n            let groupByFields = [];\n            let groupByAggregateFieldsDisplay = [];\n            let groupByFieldsDisplay = [];\n            let orderByDefault = [];\n            let orderByCustom = {};\n            let orderByDefaultDisplay = [];\n            let orderByCustomDisplay = {};\n            selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].forEach(data => {\n              if (data[\"ordertype\"] && data[\"ordertype\"].value === 2) {\n                orderByCustom[data[\"columnname\"].items.columnname] = -1;\n                orderByCustomDisplay[data[\"columnname\"].label] = -1;\n              } else {\n                orderByCustom[data[\"columnname\"].items.columnname] = 1;\n                orderByCustomDisplay[data[\"columnname\"].label] = 1;\n              }\n            });\n\n            if (selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0) {\n              selectedRecord[\"aggregate\"].forEach(data => {\n                if (data[\"aggfunctionname\"] && data[\"aggfunctionname\"].label !== '') {\n                  groupByAggregateFields.push({\n                    func: {\n                      name: data[\"aggfunctionname\"].label,\n                      args: [{\n                        field: data[\"columnname\"].items.columnname\n                      }]\n                    },\n                    alias: data[\"columnname\"].items.columnname\n                  });\n                  groupByAggregateFieldsDisplay.push({\n                    func: {\n                      name: data[\"aggfunctionname\"].label,\n                      args: [{\n                        field: data[\"columnname\"].label\n                      }]\n                    }\n                  });\n                } else {\n                  groupByAggregateFields.push(data[\"columnname\"].items.columnname);\n                  groupByFields.push(data[\"columnname\"].items.columnname);\n                  groupByAggregateFieldsDisplay.push(data[\"columnname\"].label);\n                  groupByFieldsDisplay.push(data[\"columnname\"].label);\n                }\n              });\n            }\n\n            fields.forEach(item => {\n              fieldList.push(item.label);\n              dbfieldList.push(item.value);\n            });\n            const databaseSQLQueryParam = jsonSqlParam.build({\n              type: 'select',\n              table: selectedRecord[\"sviewname\"].value,\n              fields: selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0 ? groupByAggregateFields : dbfieldList,\n              group: groupByFields,\n              sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustom : \"\",\n              condition: finalConditionDatabaseParam\n            });\n            const databaseSQLQuery = jsonSql.build({\n              type: 'select',\n              table: selectedRecord[\"sviewname\"].value,\n              fields: selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0 ? groupByAggregateFields : dbfieldList,\n              group: groupByFields,\n              sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustom : \"\",\n              condition: finalConditionDatabase\n            });\n            const displaySQLQuery = jsonSql.build({\n              type: 'select',\n              fields: selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0 ? groupByAggregateFieldsDisplay : fieldList,\n              group: groupByFieldsDisplay,\n              table: selectedRecord[\"sviewname\"].label,\n              sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustomDisplay : \"\",\n              condition: finalConditionDisplay //&& finalCondition.length === 1 ? finalCondition[0] : finalCondition\n\n            });\n            selectedRecord[\"squerywithparam\"] = databaseSQLQueryParam.query.replace(\"like\", \"Ilike\");\n            selectedRecord[\"sgeneratedquery\"] = selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"].length > 0 ? databaseSQLQuery.query.replace(\"like\", \"Ilike\") : \"\";\n            selectedRecord[\"sdisplayquery\"] = selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"].length > 0 ? displaySQLQuery.query.replace(\"like\", \"Ilike\") : \"\";\n            selectedRecord[\"sdefaultvalue\"] = fieldWithValue;\n            const paramIndex = [];\n\n            if (fieldWithValue.length > 0) {\n              fieldWithValue.forEach((item, i) => {\n                if (item.symbolObject.items.symbolType === 4) {\n                  paramIndex.push(\"$p\" + (i + 1));\n                }\n              });\n            }\n\n            if (paramIndex.length > 0) {\n              paramIndex.forEach(data => {\n                selectedRecord[\"squerywithparam\"] = selectedRecord[\"squerywithparam\"].replace(data, data + \" COLLATE pg_catalog.default \");\n              });\n            } // if (selectedRecord[\"squerywithparam\"].indexOf('Ilike') > 0) {\n            //     let newQuery = selectedRecord[\"squerywithparam\"];\n            //     while (newQuery.indexOf(\"Ilike\") !== -1) {\n            //         const paramLabelStartIndex = newQuery.indexOf(\"Ilike\");\n            //         const paramLabel = newQuery.substring(paramLabelStartIndex, newQuery.length);\n            //     }\n            // }\n\n          }\n\n          this.setState({\n            selectedRecord\n          });\n        });\n      } else {\n        this.groupByFunction(selectedRecord, databaseCondition, displayCondition);\n      }\n\n      this.setState({\n        selectedRecord\n      }); // for temporary\n    };\n\n    this.onConditionClick = (fieldName, index) => {\n      let {\n        selectedRecord\n      } = this.state;\n\n      if (fieldName === `button_and`) {\n        selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\n        selectedRecord[\"groupList\"][index][`button_or`] = false;\n      } else if (fieldName === `button_or`) {\n        selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\n        selectedRecord[\"groupList\"][index][`button_and`] = false; // if (selectedRecord[\"groupList\"][index][`notoperator`] && selectedRecord[\"groupList\"][index][`notoperator`] === true) {\n        //     selectedRecord[\"groupList\"][index][`notoperator`] = false;\n        // }\n      } else if (fieldName === `button_not`) {\n        selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\n      } else {}\n\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onQueryTypeOnclick = value => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"selectedQueryType\"] = value;\n      let sqlQuery = false;\n\n      if (value.value === \"sql\") {\n        sqlQuery = true;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          sqlQuery: sqlQuery\n        }\n      };\n      this.props.updateStore(updateInfo);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    const dataState = {\n      skip: 0,\n      take: props.settings ? parseInt(props.settings[14]) : 5\n    };\n    const dataStateMain = {\n      skip: 0,\n      take: props.settings ? parseInt(props.settings[14]) : 5\n    };\n    const dataStateUserQuery = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      // modalIsOpen: false,\n      parameters: [],\n      // objparam: [],\n      // objDparam: [],\n      queryName: '',\n      // queryResult: [],\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      dataStateUserQuery: dataStateUserQuery,\n      queryTypeName: '',\n      selectedcombo: [],\n      selectedTableType: [],\n      moduleFormName: [],\n      ntableTypeCode: -1,\n      nFormCode: -1,\n      queryType: [],\n      tableType: [],\n      chartList: [],\n      skip: 0,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      //tableName : undefined,tableList:[]\n      outputColumns: [],\n      selectedTableList: [],\n      tableColumnList: [],\n      foreignTableColumnList: [],\n      joinTableList: [],\n      symbolsList: [],\n      foreignTableList: [],\n      count: 0,\n      foreignTableCount: [],\n      selectedforeignTableList: [],\n      filterColumnList: [],\n      sqlQuery: false,\n      // viewColumnList: [],\n      switchRecord: {},\n      dataState: dataState,\n      dataStateMain: dataStateMain,\n      data: [],\n      dataMainList: [],\n      dataResult: [],\n      dataResultMain: [],\n      queryType: [{\n        squerytypename: this.props.intl.formatMessage({\n          id: \"IDS_VIEWS\"\n        }),\n        nquerytypecode: 1\n      }, {\n        squerytypename: this.props.intl.formatMessage({\n          id: \"IDS_SQL\"\n        }),\n        nquerytypecode: 2\n      }],\n      queryTypeOptions: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VIEWS\"\n        }),\n        views: 1\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_SQL\"\n        }),\n        value: 2\n      }]\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage(); // this.dropItemRef = React.createRef(); \n\n    this.queryFieldList = ['nquerytypecode', 'ssqlqueryname', 'ssqlquery', 'sscreenrecordquery', 'sscreenheader', 'svaluemember', 'sdisplaymember', 'ncharttypecode']; // this.queryList = [];\n\n    this.searchFieldList = [\"ssqlqueryname\", \"ssqlquery\", \"sscreenheader\", \"svaluemember\", \"sdisplaymember\", \"squerytypename\", \"schartname\"];\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      filterData\n    } = this.state;\n\n    if (this.props.Login.queryData !== previousProps.Login.queryData) {\n      this.setState({\n        data: this.props.Login.queryData,\n        dataResult: process(this.props.Login.queryData, this.state.dataState)\n      });\n    }\n\n    if (this.props.Login.masterData.queryDataMain !== previousProps.Login.masterData.queryDataMain) {\n      if (this.props.Login.masterData.queryDataMain !== undefined) {\n        this.setState({\n          dataMainList: this.props.Login.masterData.queryDataMain,\n          dataResultMain: process(this.props.Login.masterData.queryDataMain === null ? [] : this.props.Login.masterData.queryDataMain, this.state.dataStateMain)\n        });\n      }\n    }\n\n    if (this.props.Login.masterData.queryTypeCode !== previousProps.Login.masterData.queryTypeCode) {\n      filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        controlMap,\n        userRoleControlRights\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.queryTypeCode) {\n      const item = this.state.queryType.filter(item => item.nquerytypecode === this.props.Login.masterData.queryTypeCode);\n      breadCrumbData.push({\n        \"label\": \"IDS_QUERYTYPE\",\n        \"value\": this.props.Login.masterData.queryTypeCode ? item[0].squerytypename : \"\"\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add QueryBuilder\") && this.state.controlMap.get(\"Add QueryBuilder\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"Edit QueryBuilder\") && this.state.controlMap.get(\"Edit QueryBuilder\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete QueryBuilder\") && this.state.controlMap.get(\"Delete QueryBuilder\").ncontrolcode;\n    const breadCrumbData = this.state.filterData || [];\n    let gridColumnListMain = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.columnList && this.props.Login.masterData.columnList.length > 0) {\n      this.props.Login.masterData.columnList.forEach(item => {\n        gridColumnListMain.push({\n          idsName: item.items.displayname[this.props.Login.userInfo.slanguagetypecode],\n          dataField: item.items.columnname,\n          width: '200px'\n        });\n      });\n    }\n\n    let selectedQueryType = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.queryTypeCode) {\n      selectedQueryType = this.state.queryType.filter(item => item.nquerytypecode === this.props.Login.masterData.queryTypeCode);\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterData: this.props.Login.masterData || [],\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_QUERYBUILDER\"\n      }),\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.queryBuilderList,\n      getMasterDetail: qryBuilder => this.props.getSelectedQueryBuilder(qryBuilder, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedQueryBuilder,\n      primaryKeyField: \"nquerybuildercode\",\n      mainField: \"squerybuildername\" //firstField=\"squerybuildername\"\n      // secondField={this.state.selectedcombo[\"nquerytypecode\"] && this.state.selectedcombo[\"nquerytypecode\"].value === queryTypeFilter.LIMSDASHBOARDQUERY ? \"schartname\" : \"\"}\n      // filterColumnData={this.props.filterColumnData}\n      // filterParam={filterParam}\n      ,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: this.getDatabaseTables // openModal={() => this.props.getSQLQueryComboService(\"\", \"create\", \"nsqlquerycode\", null,\n      //     this.props.Login.masterData, this.props.Login.userInfo,\n      //     this.props.Login.masterData.SelectedQueryType.nquerytypecode,                                   \n      //     addId)} \n      //{() => this.props.addTest(\"create\", selectedTest, userInfo, addId, this.state.nfilterTestCategory)} Already commented\n      ,\n      needAccordianFilter: false // skip={this.state.skip}\n      // take={this.state.take}\n      ,\n      handlePageChange: this.handlePageChange,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showBuildQuery: false,\n      builderData: this.getDatabaseTables,\n      filterComponent: [{\n        \"IDS_QUERYTYPEFILTER\": /*#__PURE__*/React.createElement(QueryTypeFilter, {\n          queryType: this.state.queryTypeOptions || [],\n          selectedRecord: this.state.selectedcombo || {},\n          onComboChange: this.onComboChange,\n          filterQueryType: selectedQueryType[0],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 29\n      }\n    }, this.props.Login.masterData.queryBuilderList && this.props.Login.masterData.queryBuilderList.length > 0 && this.props.Login.masterData.selectedQueryBuilder ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedQueryBuilder.squerybuildername), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-inline dropdown badget_menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      href: \"#\" // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\n      ,\n      \"data-for\": \"tooltip_list_wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_PARAMETERMAPPING\"\n      }),\n      onClick: e => this.props.getParameterFromQuery(this.props.Login),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(ParameterConfigurationIcon, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      name: \"configreporticon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"QB\",\n      className: \"btn btn-circle outline-grey mr-2\" // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      onClick: () => this.confirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      href: \"#\" // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\n      ,\n      \"data-for\": \"tooltip_list_wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPYSQL\"\n      }),\n      onClick: () => this.copySQLQuery(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 65\n      }\n    }))))))), this.props.Login.masterData.queryDataMain && gridColumnListMain && gridColumnListMain.length > 0 ? /*#__PURE__*/React.createElement(DataGridComponent, {\n      data: this.state.dataMainList,\n      dataResult: this.state.dataResultMain || [],\n      dataState: this.state.dataStateMain,\n      dataStateChange: this.dataStateChangeMain,\n      extractedColumnList: gridColumnListMain,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      userInfo: this.props.Login.userInfo,\n      pageable: true,\n      scrollable: \"scrollable\",\n      isActionRequired: false,\n      isToolBarRequired: true,\n      isRefreshRequired: false,\n      selectedId: -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 45\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null)) : \"\")))), this.props.Login.openPortalModal && /*#__PURE__*/React.createElement(PortalModalSlideout, {\n      show: this.props.Login.openPortalModal,\n      closeModal: this.closePortalModal,\n      screenName: this.props.Login.screenName,\n      handleSaveClick: this.save,\n      addComponent: /*#__PURE__*/React.createElement(BuildQuery, {\n        selectedRecord: this.state.selectedRecord || {},\n        databaseTableList: this.props.Login.databaseTableList,\n        tableColumnList: this.state.tableColumnList,\n        foreignTableList: this.state.foreignTableList || [],\n        foreignTableColumnList: this.props.Login.foreignTableColumnList || [] // validationData={validationData}\n        ,\n        count: this.state.count,\n        foreignTableCount: this.state.foreignTableCount,\n        sqlQuery: this.state.sqlQuery,\n        viewMasterListByRule: this.props.Login.viewMasterListByRule || [],\n        userInfo: this.props.Login.userInfo,\n        onExecuteRule: this.onExecuteRule,\n        onInputChange: this.onInputChange,\n        deleteRule: this.deleteRule,\n        clearRule: this.clearRule,\n        resetRule: this.resetRule,\n        onSymbolChange: this.onSymbolChange // onForeignTableChange={this.onForeignTableChange}\n        // addJoinTable={this.addJoinTable}\n        ,\n        onQueryTypeOnclick: this.onQueryTypeOnclick,\n        onRuleChange: this.onRuleChange,\n        onViewComboChange: this.onViewComboChange,\n        addRule: this.addRule,\n        onConditionClick: this.onConditionClick,\n        onMasterDataChange: this.onMasterDataChange,\n        handleFilterDateChange: this.handleFilterDateChange,\n        databaseviewList: this.props.Login.databaseviewList,\n        addRuleList: this.props.Login.addRuleList || [],\n        viewColumnListByRule: this.props.Login.viewColumnListByRule || [],\n        masterdata: this.props.Login.masterdata,\n        switchRecord: this.state.switchRecord,\n        data: this.state.data,\n        dataResult: this.state.dataResult || [],\n        dataState: this.state.dataState,\n        dataStateChange: this.dataStateChange,\n        userRoleControlRights: this.state.userRoleControlRights,\n        gridColumnList: this.props.Login.gridColumnList || [],\n        queryType: this.state.queryType,\n        addAggregate: this.addAggregate,\n        addAggregateList: this.props.Login.addAggregateList || [],\n        onAggregateChange: this.onAggregateChange,\n        deleteAggregate: this.deleteAggregate,\n        addOrderby: this.addOrderby,\n        addOrderbyList: this.props.Login.addOrderbyList || [],\n        onOrderbyChange: this.onOrderbyChange,\n        deleteOrderby: this.deleteOrderby,\n        addGroup: this.addGroup,\n        addGroupList: this.props.Login.addGroupList || [],\n        copySQLQuery: this.copySQLQuery,\n        onFilterComboChange: this.onFilterComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 21\n      }\n    }), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_PARAMETERMAPPING\"\n      }),\n      onSaveClick: this.saveParam,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: /*#__PURE__*/React.createElement(QueryBuilderParamter, {\n        onParamInputChange: this.onParamInputChange,\n        selectedQueryBuilder: this.props.Login.masterData.selectedQueryBuilder || [],\n        viewMasterData: this.props.Login.viewMasterData || [],\n        comboData: this.props.Login.comboData || [],\n        onParamComboChange: this.onParamComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  clearSelectedRule(selectedRecord, index) {\n    selectedRecord[\"sinputname_\" + index] && delete selectedRecord[\"sinputname_\" + index];\n    selectedRecord[\"ssymbolname_\" + index] && delete selectedRecord[\"ssymbolname_\" + index];\n    selectedRecord[\"snumericinput_\" + index] && delete selectedRecord[\"snumericinput_\" + index];\n    selectedRecord[\"columnname_\" + index] && delete selectedRecord[\"columnname_\" + index];\n    selectedRecord[\"snumericinputtwo_\" + index] && delete selectedRecord[\"snumericinputtwo_\" + index];\n    selectedRecord[\"dateinput_\" + index] && delete selectedRecord[\"dateinput_\" + index];\n    selectedRecord[\"dateinputtwo_\" + index] && delete selectedRecord[\"dateinputtwo_\" + index];\n  }\n\n  groupByFunction(selectedRecord, databaseCondition, displayCondition) {\n    let groupByAggregateFields = [];\n    let groupByFields = [];\n    let groupByAggregateFieldsDisplay = [];\n    let groupByFieldsDisplay = [];\n    let orderByDefault = [];\n    let orderByCustom = {};\n    let orderByDefaultDisplay = [];\n    let orderByCustomDisplay = {}; // if (selectedRecord[\"customorderby\"] && selectedRecord[\"customorderby\"] === true) {\n\n    selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].forEach(data => {\n      if (data[\"ordertype\"] && data[\"ordertype\"].value === 2) {\n        orderByCustom[data[\"columnname\"].items.columnname] = -1;\n        orderByCustomDisplay[data[\"columnname\"].label] = -1;\n      } else {\n        orderByCustom[data[\"columnname\"].items.columnname] = 1;\n        orderByCustomDisplay[data[\"columnname\"].label] = 1;\n      }\n    }); // } else {\n    //     selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].forEach(data => {\n    //         orderByDefault.push(data[\"columnname\"].items.columnname);\n    //         orderByDefaultDisplay.push(data[\"columnname\"].label);\n    //     })\n    // }\n    // if (selectedRecord[\"groupby\"] && selectedRecord[\"groupby\"] === true) {\n\n    if (selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0) {\n      selectedRecord[\"aggregate\"].forEach(data => {\n        if (data[\"aggfunctionname\"] && data[\"aggfunctionname\"].label !== '') {\n          groupByAggregateFields.push({\n            func: {\n              name: data[\"aggfunctionname\"].label,\n              args: [{\n                field: data[\"columnname\"].items.columnname\n              }]\n            },\n            alias: data[\"columnname\"].items.columnname\n          });\n          groupByAggregateFieldsDisplay.push({\n            func: {\n              name: data[\"aggfunctionname\"].label,\n              args: [{\n                field: data[\"columnname\"].label\n              }]\n            }\n          });\n        } else {\n          groupByAggregateFields.push(data[\"columnname\"].items.columnname);\n          groupByFields.push(data[\"columnname\"].items.columnname);\n          groupByAggregateFieldsDisplay.push(data[\"columnname\"].label);\n          groupByFieldsDisplay.push(data[\"columnname\"].label);\n        }\n      });\n      const databaseSQLQuery = jsonSql.build({\n        type: 'select',\n        table: selectedRecord[\"sviewname\"].value,\n        fields: groupByAggregateFields,\n        group: groupByFields,\n        sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustom : \"\",\n        condition: databaseCondition\n      });\n      const displaySQLQuery = jsonSql.build({\n        type: 'select',\n        fields: groupByAggregateFieldsDisplay,\n        group: groupByFieldsDisplay,\n        sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustomDisplay : \"\",\n        table: selectedRecord[\"sviewname\"].label,\n        condition: displayCondition\n      });\n      selectedRecord[\"sgeneratedquery\"] = databaseSQLQuery.query;\n      selectedRecord[\"sdisplayquery\"] = displaySQLQuery.query;\n      this.setState({\n        selectedRecord\n      });\n    } // }\n\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  filterColumnData,\n  validateEsignCredential,\n  getSQLQueryDetail,\n  getSQLQueryComboService,\n  comboChangeQueryType,\n  executeUserQuery,\n  comboColumnValues,\n  getColumnNamesByTableName,\n  getTablesName,\n  getModuleFormName,\n  getDatabaseTables,\n  executeQuery,\n  getForeignTable,\n  getViewColumns,\n  getMasterData,\n  createQueryBuilder,\n  getParameterFromQuery,\n  getSelectedQueryBuilder,\n  updateQueryBuilder,\n  getQueryBuilder\n})(injectIntl(QueryBuilder));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dashboard/QueryBuilder.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faTrashAlt","faCopy","process","toast","ListMaster","SlideOutModal","Esign","AddQuery","AddParameter","QueryTypeFilter","callService","crudMaster","validateEsignCredential","updateStore","getSQLQueryDetail","getSQLQueryComboService","filterColumnData","comboChangeQueryType","executeUserQuery","comboColumnValues","getColumnNamesByTableName","getTablesName","getModuleFormName","getDatabaseTables","executeQuery","getForeignTable","getViewColumns","getMasterData","createQueryBuilder","getParameterFromQuery","getSelectedQueryBuilder","updateQueryBuilder","getQueryBuilder","DEFAULT_RETURN","transactionStatus","queryTypeFilter","tableType","ColumnType","constructOptionList","getControlMap","showEsign","ReadOnlyText","ContentPanel","rsapi","ConfirmMessage","Affix","BreadcrumbComponent","ListWrapper","ReactTooltip","PortalModalSlideout","BuildQuery","render","format","ProductList","QueryBuilderParamter","DataGridComponent","stringOperatorData","jsonSql","require","separatedValues","jsonSqlParam","QueryBuilder","constructor","props","dataStateChange","event","setState","dataResult","Login","queryData","dataState","dataStateChangeMain","dataResultMain","queryDataMain","dataStateMain","copySQLQuery","type","query","state","selectedRecord","forEach","dataItem","index","items","needmasterdata","mastertablename","replace","valuemember","sforeigncolumnname","undefined","columnname","navigator","clipboard","writeText","masterData","selectedQueryBuilder","value","sdefaultValue","JSON","parse","sdefaultvalue","reloadData","searchRef","current","inputParam","inputData","userInfo","classUrl","methodUrl","saveParam","saveType","formRef","comboData","sqryData","symbolObject","item","trimEnd","columntype","DATATIME","DATE","isInputVisible","symbolType","Date","jsonData","sgeneratedquery","columnList","save","length","jsondata","postParam","i","inputListName","selectedObject","primaryKeyField","viewColumnListByRule","label","displayName","operation","info","intl","formatMessage","id","deleteQB","ncontrolCode","confirmDelete","confirmMessage","confirm","openFilter","showFilter","updateInfo","typeName","data","closeFilter","onFilterSubmit","selectedcombo","console","log","nquerytypecode","queryTypeCode","onFilterComboChange","fieldName","generateFilterQuery","onParamComboChange","onParamInputChange","inputValue","target","test","checked","index1","indexOf","inputname","substr","slice","showInputValue","handleFilterDateChange","dateName","dateValue","groupIndex","onComboChange","onViewComboChange","sviewname","userinfo","onAggregateChange","onRuleChange","clearSelectedRule","sqlQuery","oldselectedRecord","tableData","nflag","displaymember","optionId","viewMasterListByRule","COMBO","stablename","foriegntablename","scolumnname","TEXTINPUT","onMasterDataChange","onOrderbyChange","deleteOrderby","addOrderbyList","splice","addOrderby","arrayLength","viewColumnList","deleteAggregate","addAggregateList","addAggregate","addRule","addRuleList","addGroupList","condition","$and","b","$lt","$eq","sql1","build","table","addGroup","closePortalModal","openPortalModal","count","closeModal","openModal","onExecuteRule","deleteRule","clearRule","resetRule","onSymbolChange","oldSelectedRecord","onInputChange","name","setDialect","databaseCondition","displayCondition","databaseConditionParam","fieldWithValue","notOperator","groupConditionDatabase","groupConditionDatabaseParam","groupConditionDisplay","Array","map","current_button_and","current_button_or","next_button_and","next_button_or","symbolname","symbol","numericinput","columnLabel","columnValue","snumericinputtwo","columnName","dateinput","dateinputtwo","replacewith","push","tempValue","tempValue1","data1","groupByFunction","$not","$or","finalConditionDisplay","finalConditionDatabase","finalConditionDatabaseParam","databaseSQLQuery","displaySQLQuery","fields","fieldList","dbfieldList","groupByAggregateFields","groupByFields","groupByAggregateFieldsDisplay","groupByFieldsDisplay","orderByDefault","orderByCustom","orderByDefaultDisplay","orderByCustomDisplay","func","args","field","alias","databaseSQLQueryParam","group","sort","paramIndex","onConditionClick","onQueryTypeOnclick","skip","take","settings","parseInt","dataStateUserQuery","error","parameters","queryName","userRoleControlRights","controlMap","Map","queryTypeName","selectedTableType","moduleFormName","ntableTypeCode","nFormCode","queryType","chartList","outputColumns","selectedTableList","tableColumnList","foreignTableColumnList","joinTableList","symbolsList","foreignTableList","foreignTableCount","selectedforeignTableList","filterColumnList","switchRecord","dataMainList","squerytypename","queryTypeOptions","views","createRef","queryFieldList","searchFieldList","componentDidUpdate","previousProps","filterData","generateBreadCrumData","nformcode","Object","values","ncontrolcode","breadCrumbData","filter","addId","has","get","editId","deleteId","gridColumnListMain","idsName","displayname","slanguagetypecode","dataField","width","selectedQueryType","searchedData","queryBuilderList","qryBuilder","handlePageChange","squerybuildername","float","e","screenName","databaseTableList","databaseviewList","masterdata","gridColumnList","viewMasterData","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faCopy } from '@fortawesome/free-solid-svg-icons';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddQuery from './AddQuery';\r\nimport AddParameter from './AddParameter';\r\nimport QueryTypeFilter from './QueryTypeFilter';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail,\r\n    getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery,\r\n    comboColumnValues, getColumnNamesByTableName, getTablesName, getModuleFormName,\r\n    getDatabaseTables, executeQuery, getForeignTable, getViewColumns, getMasterData, createQueryBuilder,\r\n    getParameterFromQuery, getSelectedQueryBuilder, updateQueryBuilder, getQueryBuilder\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus, queryTypeFilter, tableType, ColumnType } from '../../components/Enumeration';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport rsapi from '../../rsapi';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { Affix } from 'rsuite';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport PortalModalSlideout from '../../components/portal-modal/portal-modal-slideout';\r\nimport BuildQuery from './BuildQuery';\r\nimport { render } from '@testing-library/react';\r\nimport { format } from 'date-fns';\r\nimport { ProductList } from '../product/product.styled';\r\nimport QueryBuilderParamter from './QueryBuilderParamter';\r\nimport { ReactComponent as ParameterConfigurationIcon } from '../../assets/image/parameter-configuration.svg';\r\nimport { ReactComponent as ParameterMappingIcon } from '../../assets/image/parameter-mapping.svg';\r\nimport DataGridComponent from '../../components/data-grid/data-grid.component';\r\nimport { stringOperatorData } from './QueryBuilderData';\r\n// import {validationData} from './QueryBuilderData';\r\n\r\nconst jsonSql = require('json-sql')({ separatedValues: false });\r\nconst jsonSqlParam = require('json-sql')({ separatedValues: true });\r\n\r\nclass QueryBuilder extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: props.settings ? parseInt(props.settings[14]) : 5,\r\n        };\r\n        const dataStateMain = {\r\n            skip: 0,\r\n            take: props.settings ? parseInt(props.settings[14]) : 5,\r\n        };\r\n        const dataStateUserQuery = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            error: \"\",\r\n            // modalIsOpen: false,\r\n            parameters: [],\r\n            // objparam: [],\r\n            // objDparam: [],\r\n            queryName: '',\r\n            // queryResult: [],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            dataStateUserQuery: dataStateUserQuery,\r\n            queryTypeName: '',\r\n            selectedcombo: [],\r\n            selectedTableType: [],\r\n            moduleFormName: [],\r\n            ntableTypeCode: -1,\r\n            nFormCode: -1,\r\n            queryType: [],\r\n            tableType: [],\r\n            chartList: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25, //tableName : undefined,tableList:[]\r\n            outputColumns: [],\r\n            selectedTableList: [],\r\n            tableColumnList: [],\r\n            foreignTableColumnList: [],\r\n            joinTableList: [],\r\n            symbolsList: [],\r\n            foreignTableList: [],\r\n            count: 0,\r\n            foreignTableCount: [],\r\n            selectedforeignTableList: [],\r\n            filterColumnList: [],\r\n            sqlQuery: false,\r\n            // viewColumnList: [],\r\n            switchRecord: {},\r\n            dataState: dataState,\r\n            dataStateMain: dataStateMain,\r\n            data: [],\r\n            dataMainList: [],\r\n            dataResult: [],\r\n            dataResultMain: [],\r\n            queryType: [{ squerytypename: this.props.intl.formatMessage({ id: \"IDS_VIEWS\" }), nquerytypecode: 1 }, { squerytypename: this.props.intl.formatMessage({ id: \"IDS_SQL\" }), nquerytypecode: 2 }],\r\n            queryTypeOptions: [{ label: this.props.intl.formatMessage({ id: \"IDS_VIEWS\" }), views: 1 }, { label: this.props.intl.formatMessage({ id: \"IDS_SQL\" }), value: 2 }]\r\n        });\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        // this.dropItemRef = React.createRef(); \r\n\r\n        this.queryFieldList = ['nquerytypecode', 'ssqlqueryname', 'ssqlquery',\r\n            'sscreenrecordquery', 'sscreenheader', 'svaluemember', 'sdisplaymember', 'ncharttypecode'];\r\n        // this.queryList = [];\r\n\r\n        this.searchFieldList = [\"ssqlqueryname\", \"ssqlquery\", \"sscreenheader\", \"svaluemember\", \"sdisplaymember\",\r\n            \"squerytypename\", \"schartname\"];\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateChangeMain = (event) => {\r\n        this.setState({\r\n            dataResultMain: process(this.props.Login.queryDataMain, event.dataStateMain),\r\n            dataStateMain: event.dataStateMain\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let { filterData } = this.state;\r\n        if (this.props.Login.queryData !== previousProps.Login.queryData) {\r\n            this.setState({\r\n                data: this.props.Login.queryData,\r\n                dataResult: process(this.props.Login.queryData, this.state.dataState)\r\n            });\r\n        }\r\n        if (this.props.Login.masterData.queryDataMain !== previousProps.Login.masterData.queryDataMain) {\r\n            if (this.props.Login.masterData.queryDataMain !== undefined) {\r\n                this.setState({\r\n                    dataMainList: this.props.Login.masterData.queryDataMain,\r\n                    dataResultMain: process(this.props.Login.masterData.queryDataMain === null ? [] : this.props.Login.masterData.queryDataMain, this.state.dataStateMain)\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.masterData.queryTypeCode !== previousProps.Login.masterData.queryTypeCode) {\r\n            filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ controlMap, userRoleControlRights });\r\n        }\r\n\r\n    }\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.queryTypeCode) {\r\n\r\n            const item = this.state.queryType.filter(item => item.nquerytypecode === this.props.Login.masterData.queryTypeCode);\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_QUERYTYPE\",\r\n                    \"value\": this.props.Login.masterData.queryTypeCode ?\r\n                        item[0].squerytypename : \"\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n    render() {\r\n        const addId = this.state.controlMap.has(\"Add QueryBuilder\") && this.state.controlMap.get(\"Add QueryBuilder\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit QueryBuilder\") && this.state.controlMap.get(\"Edit QueryBuilder\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete QueryBuilder\") && this.state.controlMap.get(\"Delete QueryBuilder\").ncontrolcode;\r\n        const breadCrumbData = this.state.filterData || [];\r\n        let gridColumnListMain = [];\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.columnList && this.props.Login.masterData.columnList.length > 0) {\r\n            this.props.Login.masterData.columnList.forEach(item => {\r\n                gridColumnListMain.push({ idsName: item.items.displayname[this.props.Login.userInfo.slanguagetypecode], dataField: item.items.columnname, width: '200px' })\r\n            })\r\n        }\r\n        let selectedQueryType = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.queryTypeCode) {\r\n\r\n            selectedQueryType = this.state.queryType.filter(item => item.nquerytypecode === this.props.Login.masterData.queryTypeCode);\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    {/* <div className=\"client-listing-wrap mtop-4\"> */}\r\n                    {/* Start of get display*/}\r\n                    <Row noGutters={true}>\r\n                        <Col md=\"4\">\r\n                            <ListMaster\r\n                                masterData={this.props.Login.masterData || []}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_QUERYBUILDER\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.queryBuilderList}\r\n                                getMasterDetail={(qryBuilder) => this.props.getSelectedQueryBuilder(qryBuilder, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedQueryBuilder}\r\n                                primaryKeyField=\"nquerybuildercode\"\r\n                                mainField=\"squerybuildername\"\r\n                                //firstField=\"squerybuildername\"\r\n                                // secondField={this.state.selectedcombo[\"nquerytypecode\"] && this.state.selectedcombo[\"nquerytypecode\"].value === queryTypeFilter.LIMSDASHBOARDQUERY ? \"schartname\" : \"\"}\r\n                                // filterColumnData={this.props.filterColumnData}\r\n                                // filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                openModal={this.getDatabaseTables}\r\n                                // openModal={() => this.props.getSQLQueryComboService(\"\", \"create\", \"nsqlquerycode\", null,\r\n                                //     this.props.Login.masterData, this.props.Login.userInfo,\r\n                                //     this.props.Login.masterData.SelectedQueryType.nquerytypecode,                                   \r\n                                //     addId)} \r\n                                //{() => this.props.addTest(\"create\", selectedTest, userInfo, addId, this.state.nfilterTestCategory)} Already commented\r\n                                needAccordianFilter={false}\r\n                                // skip={this.state.skip}\r\n                                // take={this.state.take}\r\n                                handlePageChange={this.handlePageChange}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showBuildQuery={false}\r\n                                builderData={this.getDatabaseTables}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_QUERYTYPEFILTER\":\r\n                                            <QueryTypeFilter\r\n                                                queryType={this.state.queryTypeOptions || []}\r\n                                                selectedRecord={this.state.selectedcombo || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                                filterQueryType={selectedQueryType[0]}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md=\"8\">\r\n                            <ProductList className=\"panel-main-content\">\r\n                                {this.props.Login.masterData.queryBuilderList && this.props.Login.masterData.queryBuilderList.length > 0 && this.props.Login.masterData.selectedQueryBuilder ?\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedQueryBuilder.squerybuildername}</Card.Title>\r\n                                            <ContentPanel className=\"d-flex product-category\">\r\n                                                <Col md='6' >\r\n                                                    {/* {this.props.Login.masterData.selectedQueryBuilder.squerybuildername} */}\r\n\r\n                                                </Col>\r\n                                                <Col md='6'>\r\n                                                    <div className=\"d-flex product-category\" style={{ float: \"right\" }}>\r\n                                                        <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                                                        <ProductList className=\"d-inline dropdown badget_menu\">\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_PARAMETERMAPPING\" })}\r\n                                                                onClick={(e) => this.props.getParameterFromQuery(this.props.Login)}\r\n                                                            >\r\n                                                                {/* <FontAwesomeIcon icon={faPencilAlt} className=\"ActionIconColor\"/> */}\r\n                                                                <ParameterConfigurationIcon className=\"custom_icons\" width=\"20\" height=\"20\" name=\"configreporticon\" />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                onClick={() => this.confirmDelete(deleteId)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_COPYSQL\" })}\r\n                                                                onClick={() => this.copySQLQuery(1)}\r\n                                                            >\r\n\r\n                                                                <FontAwesomeIcon icon={faCopy} />\r\n                                                            </Nav.Link>\r\n                                                        </ProductList>\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </ContentPanel>\r\n                                        </Card.Header>\r\n                                        {this.props.Login.masterData.queryDataMain && gridColumnListMain && gridColumnListMain.length > 0 ?\r\n                                            <DataGridComponent\r\n                                                data={this.state.dataMainList}\r\n                                                dataResult={this.state.dataResultMain || []}\r\n                                                dataState={this.state.dataStateMain}\r\n                                                dataStateChange={this.dataStateChangeMain}\r\n                                                extractedColumnList={gridColumnListMain}\r\n                                                controlMap={this.state.controlMap}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                pageable={true}\r\n                                                scrollable={\"scrollable\"}\r\n                                                isActionRequired={false}\r\n                                                isToolBarRequired={true}\r\n                                                isRefreshRequired={false}\r\n                                                selectedId={-1}\r\n                                            />\r\n                                            : <></>\r\n                                        }\r\n                                    </Card>\r\n                                    : \"\"}\r\n\r\n                            </ProductList>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n                {\r\n                    this.props.Login.openPortalModal &&\r\n                    <PortalModalSlideout\r\n                        show={this.props.Login.openPortalModal}\r\n                        closeModal={this.closePortalModal}\r\n                        screenName={this.props.Login.screenName}\r\n                        handleSaveClick={this.save}\r\n                        addComponent={\r\n                            <BuildQuery\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                databaseTableList={this.props.Login.databaseTableList}\r\n                                tableColumnList={this.state.tableColumnList}\r\n                                foreignTableList={this.state.foreignTableList || []}\r\n                                foreignTableColumnList={this.props.Login.foreignTableColumnList || []}\r\n                                // validationData={validationData}\r\n                                count={this.state.count}\r\n                                foreignTableCount={this.state.foreignTableCount}\r\n                                sqlQuery={this.state.sqlQuery}\r\n                                viewMasterListByRule={this.props.Login.viewMasterListByRule || []}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                onExecuteRule={this.onExecuteRule}\r\n                                onInputChange={this.onInputChange}\r\n                                deleteRule={this.deleteRule}\r\n                                clearRule={this.clearRule}\r\n                                resetRule={this.resetRule}\r\n                                onSymbolChange={this.onSymbolChange}\r\n                                // onForeignTableChange={this.onForeignTableChange}\r\n                                // addJoinTable={this.addJoinTable}\r\n                                onQueryTypeOnclick={this.onQueryTypeOnclick}\r\n\r\n                                onRuleChange={this.onRuleChange}\r\n                                onViewComboChange={this.onViewComboChange}\r\n                                addRule={this.addRule}\r\n                                onConditionClick={this.onConditionClick}\r\n                                onMasterDataChange={this.onMasterDataChange}\r\n                                handleFilterDateChange={this.handleFilterDateChange}\r\n                                databaseviewList={this.props.Login.databaseviewList}\r\n                                addRuleList={this.props.Login.addRuleList || []}\r\n                                viewColumnListByRule={this.props.Login.viewColumnListByRule || []}\r\n                                masterdata={this.props.Login.masterdata}\r\n                                switchRecord={this.state.switchRecord}\r\n                                data={this.state.data}\r\n                                dataResult={this.state.dataResult || []}\r\n                                dataState={this.state.dataState}\r\n                                dataStateChange={this.dataStateChange}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                gridColumnList={this.props.Login.gridColumnList || []}\r\n                                queryType={this.state.queryType}\r\n                                addAggregate={this.addAggregate}\r\n                                addAggregateList={this.props.Login.addAggregateList || []}\r\n                                onAggregateChange={this.onAggregateChange}\r\n                                deleteAggregate={this.deleteAggregate}\r\n                                addOrderby={this.addOrderby}\r\n                                addOrderbyList={this.props.Login.addOrderbyList || []}\r\n                                onOrderbyChange={this.onOrderbyChange}\r\n                                deleteOrderby={this.deleteOrderby}\r\n                                addGroup={this.addGroup}\r\n                                addGroupList={this.props.Login.addGroupList || []}\r\n                                copySQLQuery={this.copySQLQuery}\r\n                                onFilterComboChange={this.onFilterComboChange}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: \"IDS_PARAMETERMAPPING\" })}\r\n                        onSaveClick={this.saveParam}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={\r\n                            <QueryBuilderParamter\r\n                                onParamInputChange={this.onParamInputChange}\r\n                                selectedQueryBuilder={this.props.Login.masterData.selectedQueryBuilder || []}\r\n                                viewMasterData={this.props.Login.viewMasterData || []}\r\n                                comboData={this.props.Login.comboData || []}\r\n                                onParamComboChange={this.onParamComboChange}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n    copySQLQuery = (type) => {\r\n        if (type === 2) {\r\n\r\n            let query = this.state.selectedRecord[\"squerywithparam\"] || \"\";\r\n\r\n            if (this.state.selectedRecord[\"sdefaultvalue\"] && this.state.selectedRecord[\"sdefaultvalue\"]) {\r\n                this.state.selectedRecord[\"sdefaultvalue\"].forEach((dataItem, index) => {\r\n\r\n                    if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\r\n\r\n                        query = query.replace(\"$p\" + (index + 1), \"P$\" + dataItem.items.valuemember + \"$P\");\r\n                    }\r\n                    else if (dataItem.items.sforeigncolumnname !== undefined &&\r\n                        dataItem.items.sforeigncolumnname !== \"\") {\r\n                        query = query.replace(\"$p\" + (index + 1), \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\r\n                    } else {\r\n                        query = query.replace(\"$p\" + (index + 1), \"P$\" + dataItem.items.columnname + \"$P\");\r\n                    }\r\n                })\r\n            }\r\n            navigator.clipboard.writeText(query);\r\n\r\n        } else {\r\n            let query = this.props.Login.masterData.selectedQueryBuilder[\"squerywithparam\"] || \"\";\r\n\r\n            if (this.props.Login.masterData.selectedQueryBuilder[\"sdefaultvalue\"] && this.props.Login.masterData.selectedQueryBuilder[\"sdefaultvalue\"].value) {\r\n                const sdefaultValue = JSON.parse(this.props.Login.masterData.selectedQueryBuilder[\"sdefaultvalue\"].value);\r\n\r\n                sdefaultValue.sdefaultvalue.forEach((dataItem, index) => {\r\n                    if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\r\n\r\n                        query = query.replace(\"$p\" + (index + 1), \"P$\" + dataItem.items.valuemember + \"$P\");\r\n                    }\r\n                    else if (dataItem.items.sforeigncolumnname !== undefined &&\r\n                        dataItem.items.sforeigncolumnname !== \"\") {\r\n                        query = query.replace(\"$p\" + (index + 1), \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\r\n                    } else {\r\n                        query = query.replace(\"$p\" + (index + 1), \"P$\" + dataItem.items.columnname + \"$P\");\r\n                    }\r\n                })\r\n            }\r\n            navigator.clipboard.writeText(query);\r\n        }\r\n\r\n\r\n    }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"querybuilder\",\r\n            methodUrl: \"QueryBuilder\",\r\n            // displayName: \"IDS_DASHBOARDTYPES\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    saveParam = (saveType, formRef) => {\r\n\r\n        let query = this.props.Login.masterData.selectedQueryBuilder[\"squerywithparam\"];\r\n\r\n        this.props.Login.comboData.sdefaultvalue.forEach((dataItem, index) => {\r\n\r\n            if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\r\n\r\n                let sqryData = \"\";\r\n                if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\r\n\r\n                    dataItem.value.forEach(item => {\r\n                        sqryData += item.value + \",\";\r\n                    })\r\n\r\n                    query = query.replace(\"$p\" + (index + 1), sqryData.trimEnd(\",\"));\r\n                } else {\r\n                    query = query.replace(\"$p\" + (index + 1), dataItem.value.value);\r\n                }\r\n\r\n\r\n            } else if (dataItem.items.sforeigncolumnname !== undefined &&\r\n                dataItem.items.sforeigncolumnname !== \"\") {\r\n\r\n                query = query.replace(\"$p\" + (index + 1), dataItem.value.value);\r\n\r\n            } else if (dataItem.items.columntype === ColumnType.DATATIME\r\n                || dataItem.items.columntype === ColumnType.DATE && dataItem.symbolObject.items.isInputVisible === true\r\n                && (dataItem.symbolObject.items.symbolType === 5 || dataItem.symbolObject.items.symbolType === 1)) {\r\n\r\n                query = query.replace(\"$p\" + (index + 1), \"'\" + format(new Date(dataItem.value), \"yyyy-MM-dd HH:mm:ss.SS\") + \"'\");\r\n\r\n\r\n            } else {\r\n                query = query.replace(\"$p\" + (index + 1), \"'\" + dataItem.value + \"'\");\r\n            }\r\n        })\r\n\r\n        const jsonData = JSON.parse(this.props.Login.masterData.selectedQueryBuilder[\"jsondata\"].value);\r\n        const inputParam = {\r\n            sgeneratedquery: query,\r\n            columnList: jsonData[\"columnList\"],\r\n            userInfo: this.props.Login.userInfo,\r\n\r\n        }\r\n        let inputData = [];\r\n        // inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        // inputData[\"queryBuilder\"] = { \"nstatus\": 1 };\r\n        // inputData[\"queryBuilder\"][\"nquerybuildercode\"] = this.props.Login.masterData.selectedQueryBuilder[\"nquerybuildercode\"]\r\n        // inputData[\"queryBuilder\"][\"sdefaultvalue\"] = comboData;\r\n\r\n        this.props.updateQueryBuilder(inputParam, inputData, this.props.Login.masterData);\r\n\r\n    }\r\n    save = (saveType, formRef) => {\r\n        const { selectedRecord } = this.state;\r\n        if (selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"].length > 0) {\r\n\r\n            let inputData = [];\r\n            let jsondata = {}\r\n            let postParam = undefined;\r\n\r\n            if (selectedRecord[\"sdefaultvalue\"].length > 0) {\r\n                selectedRecord[\"sdefaultvalue\"].forEach((item, i) => {\r\n                    if (item.symbolObject.items.symbolType === 4) {\r\n                        delete item.symbolObject.items[\"replacewith\"];\r\n                    }\r\n                })\r\n            }\r\n\r\n\r\n            postParam = { inputListName: \"QueryBuilder\", selectedObject: \"selectedQueryBuilder\", primaryKeyField: \"nquerybuildercode\" };\r\n\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"queryBuilder\"] = { \"nstatus\": 1 };\r\n\r\n            jsondata[\"groupList\"] = selectedRecord[\"groupList\"];\r\n            jsondata[\"aggregate\"] = selectedRecord[\"aggregate\"];\r\n            jsondata[\"orderby\"] = selectedRecord[\"orderby\"];\r\n            jsondata[\"columnList\"] = this.props.Login.viewColumnListByRule;\r\n            inputData[\"sgeneratedquery\"] = selectedRecord[\"sgeneratedquery\"];\r\n\r\n\r\n            inputData[\"queryBuilder\"][\"squerybuildername\"] = selectedRecord[\"querybuildername\"];\r\n            inputData[\"queryBuilder\"][\"nquerytype\"] = 1;\r\n            inputData[\"queryBuilder\"][\"sviewname\"] = selectedRecord[\"sviewname\"].label;\r\n            inputData[\"queryBuilder\"][\"squerywithparam\"] = selectedRecord[\"squerywithparam\"];\r\n            inputData[\"queryBuilder\"][\"squerywithvalue\"] = selectedRecord[\"sgeneratedquery\"];\r\n            inputData[\"queryBuilder\"][\"sdefaultvalue\"] = { sdefaultvalue: selectedRecord[\"sdefaultvalue\"] };\r\n            inputData[\"queryBuilder\"][\"jsondata\"] = jsondata;\r\n\r\n            const inputParam = {\r\n                classUrl: \"querybuilder\",\r\n                methodUrl: \"QueryBuilder\",\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData,\r\n                operation: \"create\", saveType, formRef, postParam\r\n            }\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openPortalModal\");\r\n            // this.props.createQueryBuilder(inputData, this.props.Login);\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTANYCOLUMNS\" }));\r\n        }\r\n    }\r\n    deleteQB = (ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        // let postParam = {\r\n        //     inputListName: \"QueryBuilder\",\r\n        //     selectedObject: \"selectedDashBoardTypes\",\r\n        //     primaryKeyField: \"ndashboardtypecode\",\r\n        //     primaryKeyValue: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n        //     fetchUrl: \"dashboardtypes/getAllSelectionDashBoardTypes\",\r\n        //     fecthInputObject: { userinfo: this.props.Login.userInfo }\r\n        // };\r\n        inputData[\"queryBuilder\"] = this.props.Login.masterData.selectedQueryBuilder;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n\r\n        const inputParam = {\r\n            methodUrl: \"QueryBuilder\",\r\n            classUrl: \"querybuilder\",\r\n            inputData: inputData,\r\n            operation: \"delete\", searchRef: this.searchRef\r\n        }\r\n\r\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n\r\n    }\r\n\r\n    confirmDelete = (ncontrolCode) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\",\r\n            this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteQB(\"delete\", ncontrolCode));\r\n    };\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        this.searchRef.current.value = \"\";\r\n\r\n        if (this.state.selectedcombo[\"nquerytypecode\"]) {\r\n            console.log(this.state.selectedcombo[\"nquerytypecode\"].value);\r\n        }\r\n        const nquerytypecode = this.state.selectedcombo[\"nquerytypecode\"] ?\r\n            this.state.selectedcombo[\"nquerytypecode\"].value : this.props.Login.masterData.queryTypeCode;\r\n\r\n        this.props.getQueryBuilder(nquerytypecode, this.props.Login.userInfo, this.props.Login.masterData);\r\n\r\n\r\n    }\r\n\r\n    onFilterComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n    onParamComboChange = (data, index) => {\r\n\r\n        let comboData = this.props.Login.comboData;\r\n        comboData[\"sdefaultvalue\"][index].value = data;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                comboData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onParamInputChange = (event, type, index, dataItem) => {\r\n        let comboData = this.props.Login.comboData;\r\n        if (type === 2) {\r\n            const inputValue = event.target.value;\r\n            if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\r\n                comboData[\"sdefaultvalue\"][index].value = event.target.value;\r\n            }\r\n        }\r\n        else if (type === 1) {\r\n            comboData[\"sdefaultvalue\"][index].value = event.target.checked;\r\n        }\r\n        else if (type === 3) {\r\n\r\n            if (dataItem.symbolObject.items.symbolType === 4) {\r\n                // const symbolObject = stringOperatorData.filter(data => data.value === dataItem.symbolObject.value);\r\n                let symbolObject = \"\"\r\n                if (dataItem.symbolObject.value === 7 || dataItem.symbolObject.value === 8) {\r\n                    symbolObject = \"'%_%'\";\r\n                } else if (dataItem.symbolObject.value === 9) {\r\n                    symbolObject = \"'_%'\";\r\n                } else {\r\n                    symbolObject = \"'%_'\";\r\n                }\r\n                const index1 = symbolObject.indexOf('_');\r\n                let inputname = undefined\r\n\r\n                inputname = symbolObject.substr(0, index1) + event.target.value + symbolObject.substr(index1 + 1);\r\n                inputname = inputname.slice(1, inputname.length - 1);\r\n\r\n                comboData[\"sdefaultvalue\"][index].value = inputname;\r\n                comboData[\"sdefaultvalue\"][index].showInputValue = event.target.value;\r\n            } else {\r\n                comboData[\"sdefaultvalue\"][index].value = event.target.value;\r\n            }\r\n        }\r\n        else {\r\n\r\n\r\n            comboData[\"sdefaultvalue\"][index].value = event.target.value;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                comboData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    handleFilterDateChange = (dateName, dateValue, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[\"groupList\"][groupIndex][index][dateName] = dateValue;\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedcombo = this.state.selectedcombo || {};\r\n        selectedcombo[fieldName] = comboData;\r\n\r\n        this.setState({ selectedcombo });\r\n    }\r\n\r\n    onViewComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        const inputParam = {\r\n            sviewname: comboData.value,\r\n            selectedRecord,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        this.props.getViewColumns(inputParam);\r\n    }\r\n\r\n    onAggregateChange = (comboData, fieldName, index) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"aggregate\"] = selectedRecord[\"aggregate\"] || [];\r\n        if (fieldName === \"columnname\") {\r\n            selectedRecord[\"aggregate\"][index] = { \"columnname\": comboData, \"aggfunctionname\": \"\" };\r\n        } else {\r\n            if (selectedRecord[\"aggregate\"][index][\"columnname\"] && selectedRecord[\"aggregate\"][index][\"columnname\"] !== undefined) {\r\n                selectedRecord[\"aggregate\"][index][\"aggfunctionname\"] = comboData;\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        // this.setState({ selectedRecord });\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n    onRuleChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        this.clearSelectedRule(selectedRecord, index);\r\n        const sqlQuery = this.props.Login.sqlQuery;\r\n        const oldselectedRecord = selectedRecord;\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\r\n        const tableData = comboData.items;\r\n        const mastertablename = tableData.mastertablename;\r\n\r\n        if (comboData.items.needmasterdata && mastertablename) {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                data: {\r\n                    nflag: 2,\r\n                    mastertablename,\r\n                    valuemember: tableData.valuemember,\r\n                    displaymember: tableData.displaymember,\r\n                },\r\n                selectedRecord,\r\n                groupIndex,\r\n                index,\r\n                optionId: tableData.valuemember\r\n            };\r\n            this.props.getMasterData(inputParam, this.props.Login.viewMasterListByRule);\r\n        } else if (comboData.items && comboData.items.columntype === ColumnType.COMBO) {\r\n            if (sqlQuery) {\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    stablename: comboData.items.foriegntablename,\r\n                    scolumnname: comboData.value,\r\n                    selectedRecord,\r\n                    groupIndex,\r\n                    index\r\n                };\r\n                this.props.getForeignTable(inputParam, 'column');\r\n            } else {\r\n                selectedRecord[\"groupList\"][groupIndex][index][`${comboData.items.sforeigncolumnname}`] = \"\";\r\n                const inputParam = {\r\n                    data: { ...comboData.items, nflag: 1 },\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedRecord,\r\n                    groupIndex,\r\n                    index,\r\n                    optionId: comboData.items.sforeigncolumnname\r\n                };\r\n                this.props.getMasterData(inputParam, this.props.Login.viewMasterListByRule);\r\n            }\r\n        } else if (comboData.items && comboData.items.columntype === ColumnType.TEXTINPUT\r\n            && oldselectedRecord[\"groupList\"][groupIndex][index][fieldName].items.columntype !== ColumnType.TEXTINPUT) {\r\n            selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"] = \"\";\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onMasterDataChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n    onOrderbyChange = (comboData, fieldName, index) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"orderby\"] = selectedRecord[\"orderby\"] || [];\r\n        if (fieldName === \"columnname\") {\r\n            selectedRecord[\"orderby\"][index] = { \"columnname\": comboData, \"ordertype\": \"\" };\r\n        } else {\r\n            if (selectedRecord[\"orderby\"][index][\"columnname\"] && selectedRecord[\"orderby\"][index][\"columnname\"] !== undefined) {\r\n                selectedRecord[\"orderby\"][index][\"ordertype\"] = comboData;\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        // this.setState({ selectedRecord });\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n    deleteOrderby = (index) => {\r\n        let addOrderbyList = this.props.Login.addOrderbyList;\r\n        let selectedRecord = this.state.selectedRecord;\r\n\r\n        selectedRecord[\"orderby\"].splice(index, 1);\r\n        addOrderbyList.splice(index, 1);\r\n        addOrderbyList.forEach((data, index) => {\r\n            addOrderbyList[index] = index;\r\n        })\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addOrderbyList }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n    addOrderby = () => {\r\n\r\n        const { selectedRecord } = this.state;\r\n        if (selectedRecord[\"sviewname\"]) {\r\n            const addOrderbyList = this.props.Login.addOrderbyList || [];\r\n            let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n            const arrayLength = addOrderbyList.length;\r\n            viewColumnListByRule = this.props.Login.viewColumnList;\r\n            addOrderbyList[arrayLength] = arrayLength;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    addOrderbyList,\r\n                    viewColumnListByRule\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTVIEW\" }));\r\n        }\r\n    }\r\n    deleteAggregate = (index) => {\r\n        let addAggregateList = this.props.Login.addAggregateList;\r\n        let selectedRecord = this.state.selectedRecord;\r\n\r\n        selectedRecord[\"aggregate\"].splice(index, 1);\r\n        addAggregateList.splice(index, 1);\r\n        addAggregateList.forEach((data, index) => {\r\n            addAggregateList[index] = index;\r\n        })\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addAggregateList }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        // this.setState({ selectedRecord });\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n    addAggregate = () => {\r\n\r\n        const { selectedRecord } = this.state;\r\n        if (selectedRecord[\"sviewname\"]) {\r\n            // if (selectedRecord[\"groupby\"] && selectedRecord[\"groupby\"] === true) {\r\n            const addAggregateList = this.props.Login.addAggregateList || [];\r\n            let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n            const arrayLength = addAggregateList.length;\r\n            viewColumnListByRule = this.props.Login.viewColumnList;\r\n            addAggregateList[arrayLength] = arrayLength;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    addAggregateList,\r\n                    viewColumnListByRule\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTGROUPBY\" }));\r\n            // }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTVIEW\" }));\r\n        }\r\n    }\r\n    addRule = (type, groupIndex) => {\r\n        const { selectedRecord } = this.state;\r\n        if (type === \"sql\") {\r\n            let addRuleList = this.props.Login.addRuleList || [];\r\n            if (addRuleList.length > 0) {\r\n                const arrayLength = addRuleList.length;\r\n                addRuleList[arrayLength] = arrayLength;\r\n                selectedRecord[\"button_and_\" + arrayLength] = true;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        addRuleList,\r\n                        selectedRecord\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                addRuleList[0] = 0;\r\n                this.props.getDatabaseTables(this.props.Login.userInfo, this.props.Login.sqlQuery, { addRuleList, selectedRecord: {} });\r\n            }\r\n        } else {\r\n            if (selectedRecord[\"sviewname\"]) {\r\n                let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n\r\n\r\n                // const addRuleList = this.props.Login.addRuleList || [];\r\n                // const arrayLength = addRuleList.length;\r\n                // addRuleList[arrayLength] = arrayLength;\r\n\r\n\r\n                const addGroupList = this.props.Login.addGroupList || [];\r\n                const arrayLength = addGroupList[groupIndex];\r\n                addGroupList[groupIndex] = arrayLength + 1;\r\n\r\n                // const addGroupList = {...this.props.Login.addGroupList, [groupIndex]: addRuleList};\r\n\r\n                selectedRecord[\"groupList\"][groupIndex][arrayLength] = {};\r\n\r\n                // viewColumnListByRule[groupIndex][arrayLength] = this.props.Login.viewColumnList;\r\n                viewColumnListByRule = this.props.Login.viewColumnList;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        addGroupList,\r\n                        viewColumnListByRule\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTVIEW\" }));\r\n            }\r\n        }\r\n\r\n        let condition = [];\r\n        condition = [{\r\n            $and: [\r\n                { $and: [{ b: { $lt: 10 } }] },\r\n                {\r\n                    // $not: [{\r\n                    $and: [\r\n                        { \"naccredited\": { $eq: 70 } },\r\n                        { \"naccredited\": { $eq: 71 } }\r\n                    ]\r\n                    // }]\r\n                }\r\n            ]\r\n        }]\r\n        var sql1 = jsonSql.build({\r\n            table: 'table',\r\n            condition: condition\r\n            // [{\r\n            //     // $not: [{\r\n            //     $and: [\r\n            //         { b: { $lt: 10 } }, { b: { $lt: 10 } },\r\n            //         {\r\n            //             // $not: [{\r\n            //                 $and: [\r\n            //                     { \"naccredited\": { $eq: 70 } },\r\n            //                     { \"naccredited\": { $eq: 71 } }\r\n            //                 ]\r\n            //             // }]\r\n            //         }\r\n            //         // {\r\n            //         //     $or: [\r\n            //         //         { \"naccredited\": { $eq: 70 } },\r\n            //         //         { \"naccredited\": { $eq: 71 } }\r\n            //         //     ]\r\n            //         // },\r\n            //         // {\r\n            //         //     $or: [\r\n            //         //         { \"nacc\": { $eq: 70 } },\r\n            //         //         { \"nacc\": { $eq: 70 } },\r\n            //         //         {\r\n            //         //             $not: [{\r\n            //         //                 $or: [\r\n            //         //                     { \"naccredited1\": { $eq: 71 } }]\r\n            //         //             }]\r\n            //         //         }\r\n            //         //     ]\r\n            //         // },\r\n            //         // { ab: { $gt: 2 } },\r\n            //         // {\r\n            //         //     $and: [\r\n            //         //         { \"naccredited\": { $eq: 70 } },\r\n            //         //         { \"naccredited\": { $eq: 71 } },\r\n            //         //         {\r\n            //         //             $not: [{\r\n            //         //                 $and: [\r\n            //         //                     { \"naccredited1\": { $eq: 71 } },\r\n            //         //                     { \"naccredited2\": { $eq: 71 } }]\r\n            //         //             }]\r\n            //         //         }\r\n            //         //     ]\r\n            //         // }\r\n            //     ]\r\n            //     // }]\r\n            // }]\r\n        });\r\n        console.log(sql1.query);\r\n    }\r\n\r\n    addGroup = () => {\r\n        const { selectedRecord } = this.state;\r\n        if (selectedRecord[\"sviewname\"]) {\r\n            let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n            const addGroupList = this.props.Login.addGroupList || [];\r\n            const arrayLength = addGroupList.length;\r\n            addGroupList[arrayLength] = 1;\r\n            // viewColumnListByRule[arrayLength] = [];\r\n            // viewColumnListByRule[arrayLength].push(this.props.Login.viewColumnList);\r\n            viewColumnListByRule = this.props.Login.viewColumnList;\r\n            if (arrayLength === 0) {\r\n                selectedRecord[\"groupList\"] = [];\r\n                selectedRecord[\"filtercolumns\"] = viewColumnListByRule;\r\n            }\r\n            selectedRecord[\"groupList\"][arrayLength] = [];\r\n            selectedRecord[\"groupList\"][arrayLength][\"button_and\"] = true;\r\n            selectedRecord[\"groupList\"][arrayLength][0] = {};\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    addGroupList,\r\n                    viewColumnListByRule,\r\n                    selectedRecord\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTVIEW\" }));\r\n        }\r\n    }\r\n    getDatabaseTables = () => {\r\n        const sqlQuery = false;\r\n        this.setState({ selectedRecord: {} });\r\n        this.props.getDatabaseTables(this.props.Login.userInfo, sqlQuery, {\r\n            addRuleList: [], addGroupList: [],\r\n            addAggregateList: [], addOrderbyList: []\r\n        });\r\n\r\n    }\r\n\r\n    closePortalModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openPortalModal: false, selectedRecord: {}, addRuleList: [], count: 0\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: false, selectedRecord: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onExecuteRule = () => {\r\n        const { selectedRecord } = this.state;\r\n        if (selectedRecord[\"sgeneratedquery\"]) {\r\n\r\n\r\n            let query = selectedRecord[\"squerywithparam\"];\r\n\r\n            selectedRecord[\"sdefaultvalue\"].forEach((dataItem, index) => {\r\n\r\n                if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\r\n\r\n                    let sqryData = \"\";\r\n                    if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\r\n\r\n                        dataItem.value.forEach(item => {\r\n                            sqryData += item.value + \",\";\r\n                        })\r\n\r\n                        query = query.replace(\"$p\" + (index + 1), sqryData.trimEnd(\",\"));\r\n                    } else {\r\n                        query = query.replace(\"$p\" + (index + 1), dataItem.value.value);\r\n                    }\r\n\r\n\r\n                } else if (dataItem.items.sforeigncolumnname !== undefined &&\r\n                    dataItem.items.sforeigncolumnname !== \"\") {\r\n\r\n                    query = query.replace(\"$p\" + (index + 1), dataItem.value.value);\r\n\r\n                } else if (dataItem.items.columntype === ColumnType.DATATIME\r\n                    || dataItem.items.columntype === ColumnType.DATE && dataItem.symbolObject.items.isInputVisible === true\r\n                    && (dataItem.symbolObject.items.symbolType === 5 || dataItem.symbolObject.items.symbolType === 1)) {\r\n\r\n                    query = query.replace(\"$p\" + (index + 1), \"'\" + format(new Date(dataItem.value), \"yyyy-MM-dd HH:mm:ss.SS\") + \"'\");\r\n\r\n\r\n                } else {\r\n                    query = query.replace(\"$p\" + (index + 1), \"'\" + dataItem.value + \"'\");\r\n                }\r\n            });\r\n            const inputParam = {\r\n                sgeneratedquery: query,//selectedRecord[\"sgeneratedquery\"],\r\n                selectedRecord,\r\n                columnList: selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"] || this.props.Login.viewColumnListByRule,\r\n                userInfo: this.props.Login.userInfo,\r\n\r\n            }\r\n            this.props.executeQuery(inputParam);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_QUERYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    deleteRule = (groupIndex, index) => {\r\n        let addGroupList = this.props.Login.addGroupList;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        addGroupList[groupIndex] = addGroupList[groupIndex] - 1;\r\n        // selectedRecord[`button_and_${index}`] && delete selectedRecord[`button_and_${index}`];\r\n        // selectedRecord[`button_or_${index}`] && delete selectedRecord[`button_or_${index}`];\r\n        // selectedRecord[`notoperator_${index}`] && delete selectedRecord[`notoperator_${index}`];\r\n\r\n        if (addGroupList[groupIndex] === 0) {\r\n            addGroupList.splice(groupIndex, 1);\r\n            selectedRecord[\"groupList\"].splice(index, 1);\r\n        } else {\r\n            selectedRecord[\"groupList\"][groupIndex].splice(index, 1);\r\n        }\r\n\r\n        // this.clearSelectedRule(selectedRecord, index);\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addGroupList, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    clearSelectedRule(selectedRecord, index) {\r\n        selectedRecord[\"sinputname_\" + index] && delete selectedRecord[\"sinputname_\" + index];\r\n        selectedRecord[\"ssymbolname_\" + index] && delete selectedRecord[\"ssymbolname_\" + index];\r\n        selectedRecord[\"snumericinput_\" + index] && delete selectedRecord[\"snumericinput_\" + index];\r\n        selectedRecord[\"columnname_\" + index] && delete selectedRecord[\"columnname_\" + index];\r\n        selectedRecord[\"snumericinputtwo_\" + index] && delete selectedRecord[\"snumericinputtwo_\" + index];\r\n        selectedRecord[\"dateinput_\" + index] && delete selectedRecord[\"dateinput_\" + index];\r\n        selectedRecord[\"dateinputtwo_\" + index] && delete selectedRecord[\"dateinputtwo_\" + index];\r\n    }\r\n\r\n    clearRule = () => {\r\n        const sviewname = this.state.selectedRecord.sviewname || \"\";\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addRuleList: [], selectedRecord: { sviewname }, sqlQuery: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    resetRule = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                addRuleList: [], addGroupList: [],\r\n                addAggregateList: [], addOrderbyList: []\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        this.setState({\r\n            selectedRecord: {}\r\n        });\r\n\r\n    }\r\n\r\n    onSymbolChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        const oldSelectedRecord = selectedRecord[\"groupList\"][groupIndex][index][fieldName] || {};\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\r\n        const items = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items;\r\n        selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"][\"items\"][\"needmasterdata\"] = items.needmasterdata !== undefined ? comboData.items.needmasterdata : false;\r\n        if (comboData.items.symbolType === 2 || comboData.items.symbolType === 3) {\r\n            selectedRecord[\"groupList\"][groupIndex][index][items[\"valuemember\"]] && delete selectedRecord[\"groupList\"][groupIndex][index][items[\"valuemember\"]];\r\n            selectedRecord[\"groupList\"][groupIndex][index][items[\"foreigncolumnname\"]] && delete selectedRecord[\"groupList\"][groupIndex][index][items[\"foreigncolumnname\"]];\r\n            selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"] && delete selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"];\r\n        } else if (comboData.items.symbolType === 5 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType !== 5) {\r\n            selectedRecord[\"groupList\"][groupIndex][index][\"snumericinput\"] && delete selectedRecord[\"groupList\"][groupIndex][index][\"snumericinput\"];\r\n            selectedRecord[\"groupList\"][groupIndex][index][\"snumericinputtwo\"] && delete selectedRecord[\"groupList\"][groupIndex][index][\"snumericinputtwo\"];\r\n        } else if ((comboData.items.symbolType === 6 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType === 1)\r\n            || (comboData.items.symbolType === 1 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType === 6)) {\r\n            selectedRecord[\"groupList\"][groupIndex][index][`${items.sforeigncolumnname}`] && delete selectedRecord[\"groupList\"][groupIndex][index][`${items.sforeigncolumnname}`];\r\n            selectedRecord[\"groupList\"][groupIndex][index][`${items.valuemember}`] && delete selectedRecord[\"groupList\"][groupIndex][index][`${items.valuemember}`];\r\n        } else {\r\n\r\n        }\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    onInputChange = (event, type, groupIndex, index) => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (type === 2) {\r\n            const inputValue = event.target.value;\r\n            if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\r\n                selectedRecord[\"groupList\"][groupIndex][index][event.target.name] = event.target.value;\r\n            }\r\n\r\n        }\r\n        else if (type === 1) {\r\n            selectedRecord[\"groupList\"][groupIndex][index][event.target.name] = event.target.checked;\r\n        }\r\n        else if (type === 3) {\r\n            selectedRecord[\"groupList\"][groupIndex][index][event.target.name] = event.target.value;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    generateFilterQuery = (selectedRecord) => {\r\n\r\n        const addGroupList = this.props.Login.addGroupList;\r\n        jsonSql.setDialect('mssql');\r\n        let databaseCondition = [];\r\n        let displayCondition = [];\r\n        let databaseConditionParam = [];\r\n        let fieldWithValue = [];\r\n        let notOperator = false;\r\n        if (addGroupList && addGroupList.length > 0) {\r\n\r\n            let groupConditionDatabase = [];\r\n            let groupConditionDatabaseParam = [];\r\n            let groupConditionDisplay = [];\r\n\r\n\r\n            addGroupList.forEach((items, groupIndex) => {\r\n                let symbolObject = {};\r\n\r\n\r\n                databaseCondition = [];\r\n                databaseConditionParam = [];\r\n                displayCondition = [];\r\n\r\n                [...Array(items)].map((data, index) => {\r\n\r\n                    if (selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"]) {\r\n                        symbolObject = selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"] && selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"].items && selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"].items || {};\r\n\r\n                        const current_button_and = selectedRecord[\"groupList\"][groupIndex][`button_and`];\r\n                        const current_button_or = selectedRecord[\"groupList\"][groupIndex][`button_or`];\r\n                        const next_button_and = selectedRecord[\"groupList\"][groupIndex][`button_and`];\r\n                        const next_button_or = selectedRecord[\"groupList\"][groupIndex][`button_or`] ? selectedRecord[\"groupList\"][groupIndex][`button_or`] : false;\r\n\r\n                        let inputname = selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"];\r\n                        const symbolname = symbolObject.symbol;\r\n                        let numericinput = selectedRecord[\"groupList\"][groupIndex][index][\"snumericinput\"];\r\n                        const columnLabel = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].label;\r\n                        const columnValue = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].value;\r\n                        const snumericinputtwo = selectedRecord[\"groupList\"][groupIndex][index][\"snumericinputtwo\"];\r\n                        let columnName = undefined;\r\n                        const needmasterdata = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.needmasterdata ?\r\n                            selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.needmasterdata : false;\r\n\r\n                        if (selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.needmasterdata) {\r\n                            columnName = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember;\r\n                        } else if (selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.sforeigncolumnname) {\r\n                            columnName = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.sforeigncolumnname;\r\n                        }\r\n                        const dateinput = selectedRecord[\"groupList\"][groupIndex][index][\"dateinput\"] && format(new Date(selectedRecord[\"groupList\"][groupIndex][index][\"dateinput\"]), \"yyyy-MM-dd HH:mm:ss.SS\")//selectedRecord[\"dateinput_\" + index];\r\n                        const dateinputtwo = selectedRecord[\"groupList\"][groupIndex][index][\"dateinputtwo\"] && format(new Date(selectedRecord[\"groupList\"][groupIndex][index][\"dateinputtwo\"]), \"yyyy-MM-dd HH:mm:ss.SS\")//selectedRecord[\"dateinputtwo_\" + index];\r\n\r\n                        if (symbolObject && inputname) {\r\n                            if (symbolObject.symbolType === 4) {\r\n                                const showInputValue = inputname;\r\n                                const index1 = symbolObject.replacewith.indexOf('_');\r\n                                inputname = symbolObject.replacewith.substr(0, index1) + inputname + symbolObject.replacewith.substr(index1 + 1);\r\n                                inputname = inputname.slice(1, inputname.length - 1);\r\n\r\n                                databaseCondition.push({ [columnValue]: { [symbolname]: inputname } });\r\n                                displayCondition.push({ [columnLabel]: { [symbolname]: inputname } });\r\n                                databaseConditionParam.push({ [columnValue]: { [symbolname]: inputname } });\r\n                                fieldWithValue.push({ columnName: columnValue, value: inputname, showInputValue: showInputValue, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                            } else {\r\n                                databaseCondition.push({ [columnValue]: { [symbolname]: inputname } });\r\n                                displayCondition.push({ [columnLabel]: { [symbolname]: inputname } });\r\n                                databaseConditionParam.push({ [columnValue]: { [symbolname]: inputname } });\r\n                                fieldWithValue.push({ columnName: columnValue, value: inputname, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                            }\r\n                        } else if (symbolObject && numericinput && symbolObject.symbolType !== 5) {\r\n                            databaseCondition.push({ [columnValue]: { [symbolname]: numericinput } });\r\n                            displayCondition.push({ [columnLabel]: { [symbolname]: numericinput } });\r\n                            databaseConditionParam.push({ [columnValue]: { [symbolname]: numericinput } });\r\n                            fieldWithValue.push({ columnName: columnValue, value: numericinput, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                        } else if (symbolObject && symbolObject.symbolType === 2\r\n                            || symbolObject && symbolObject.symbolType === 3) {\r\n                            databaseCondition.push({ [columnValue]: { [symbolname]: '' } });\r\n                            displayCondition.push({ [columnLabel]: { [symbolname]: '' } });\r\n                            databaseConditionParam.push({ [columnValue]: { [symbolname]: '' } });\r\n                            fieldWithValue.push({ columnName: columnValue, value: '', symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                        } else if (symbolObject && numericinput && snumericinputtwo && symbolObject.symbolType === 5) {\r\n                            if (symbolObject.symbol === \"\") {\r\n                                const tempValue = [{ [columnValue]: { [symbolObject.replacewith[0]]: +numericinput } },\r\n                                { [columnValue]: { [symbolObject.replacewith[1]]: snumericinputtwo } }];\r\n                                const tempValue1 = [{ [columnLabel]: { [symbolObject.replacewith[0]]: +numericinput } },\r\n                                { [columnLabel]: { [symbolObject.replacewith[1]]: snumericinputtwo } }];\r\n                                databaseCondition.push(tempValue);\r\n                                displayCondition.push(tempValue1);\r\n                                databaseConditionParam.push(tempValue);\r\n\r\n                            } else {\r\n                                const tempValue = [\r\n                                    {\r\n                                        [symbolObject.symbol]: [{ [columnValue]: { [symbolObject.replacewith[0]]: +numericinput } },\r\n                                        { [columnValue]: { [symbolObject.replacewith[1]]: snumericinputtwo } }]\r\n                                    }\r\n                                ];\r\n                                const tempValue1 = [\r\n                                    {\r\n                                        [symbolObject.symbol]: [{ [columnLabel]: { [symbolObject.replacewith[0]]: +numericinput } },\r\n                                        { [columnLabel]: { [symbolObject.replacewith[1]]: snumericinputtwo } }]\r\n                                    }\r\n                                ];\r\n                                databaseCondition.push(tempValue);\r\n                                displayCondition.push(tempValue1);\r\n                                databaseConditionParam.push(tempValue);\r\n                            }\r\n                        } else if (symbolObject && symbolObject.symbolType === 6 && columnName && selectedRecord[\"groupList\"][groupIndex][index][columnName]) {\r\n\r\n                            const data = selectedRecord[\"groupList\"][groupIndex][index][columnName] && selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => { return item.value }) || [];\r\n                            const data1 = selectedRecord[\"groupList\"][groupIndex][index][columnName] && selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => { return item.label }) || [];\r\n                            if (data.length > 0) {\r\n                                if (needmasterdata) {\r\n                                    databaseCondition.push({ [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember]: { [symbolname]: data } });\r\n                                    databaseConditionParam.push({ [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember]: { [symbolname]: data } });\r\n                                    fieldWithValue.push({ columnName: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember, value: selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => { return item }), symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                                } else {\r\n                                    databaseCondition.push({ [columnValue]: { [symbolname]: data } });\r\n                                    databaseConditionParam.push({ [columnValue]: { [symbolname]: data } });\r\n                                    fieldWithValue.push({ columnName: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember, value: selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => { return item }), symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                                }\r\n                            }\r\n                            if (data1.length > 0) {\r\n                                displayCondition.push({ [columnLabel]: { [symbolname]: data1 } });\r\n                            }\r\n                            // }\r\n                        } else if (symbolObject && columnName && symbolObject.isInputVisible && selectedRecord[\"groupList\"][groupIndex][index][columnName]) {\r\n                            if (needmasterdata) {\r\n                                databaseCondition.push({ [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember]: { [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].value } });\r\n                                displayCondition.push({ [columnLabel]: { [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label } });\r\n                                databaseConditionParam.push({ [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember]: { [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label } });\r\n                                fieldWithValue.push({ columnName: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember, value: selectedRecord[\"groupList\"][groupIndex][index][columnName], symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                            } else {\r\n                                databaseCondition.push({ [columnValue]: { [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].value } });\r\n                                displayCondition.push({ [columnLabel]: { [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label } });\r\n                                databaseConditionParam.push({ [columnValue]: { [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label } });\r\n                                fieldWithValue.push({ columnName: columnValue, value: selectedRecord[\"groupList\"][groupIndex][index][columnName], symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                            }\r\n                        } else if (symbolObject && dateinput && symbolObject.symbolType !== 5) {\r\n                            databaseCondition.push({ [columnValue]: { [symbolname]: dateinput } });\r\n                            displayCondition.push({ [columnLabel]: { [symbolname]: dateinput } });\r\n                            databaseConditionParam.push({ [columnValue]: { [symbolname]: dateinput } });\r\n                            fieldWithValue.push({ columnName: columnValue, value: dateinput, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                        } else if (symbolObject && dateinput && dateinputtwo && symbolObject.symbolType === 5) {\r\n                            if (symbolObject.symbol === \"\") {\r\n                                const tempValue = [{ [columnValue]: { [symbolObject.replacewith[0]]: dateinput } },\r\n                                { [columnValue]: { [symbolObject.replacewith[1]]: dateinputtwo } }];\r\n                                const tempValue1 = [{ [columnLabel]: { [symbolObject.replacewith[0]]: dateinput } },\r\n                                { [columnLabel]: { [symbolObject.replacewith[1]]: dateinputtwo } }];\r\n                                databaseCondition.push(tempValue);\r\n                                displayCondition.push(tempValue1);\r\n                                databaseConditionParam.push(tempValue);\r\n                                fieldWithValue.push({ columnName: columnValue, value: dateinput, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                                fieldWithValue.push({ columnName: columnValue, value: dateinputtwo, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                            } else {\r\n                                const tempValue = [\r\n                                    {\r\n                                        [symbolObject.symbol]: [{ [columnValue]: { [symbolObject.replacewith[0]]: dateinput } },\r\n                                        { [columnValue]: { [symbolObject.replacewith[1]]: dateinputtwo } }]\r\n                                    }\r\n                                ];\r\n                                const tempValue1 = [\r\n                                    {\r\n                                        [symbolObject.symbol]: [{ [columnLabel]: { [symbolObject.replacewith[0]]: dateinput } },\r\n                                        { [columnLabel]: { [symbolObject.replacewith[1]]: dateinputtwo } }]\r\n                                    }\r\n                                ];\r\n                                databaseCondition.push(tempValue);\r\n                                displayCondition.push(tempValue1);\r\n                                databaseConditionParam.push(tempValue);\r\n                                fieldWithValue.push({ columnName: columnValue, value: dateinput, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                                fieldWithValue.push({ columnName: columnValue, value: dateinputtwo, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                            }\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        this.groupByFunction(selectedRecord, databaseCondition, displayCondition);\r\n                    }\r\n                });\r\n\r\n                if (selectedRecord[\"groupList\"][groupIndex][`button_and`] === true) {\r\n\r\n                    if (selectedRecord[\"groupList\"][groupIndex][`button_not`] === true) {\r\n                        groupConditionDisplay.push([{ $not: [{ $and: [...displayCondition] }] }]);\r\n                        groupConditionDatabase.push([{ $not: [{ $and: [...databaseCondition] }] }]);\r\n                        groupConditionDatabaseParam.push([{ $not: [{ $and: [...databaseConditionParam] }] }]);\r\n                    } else {\r\n                        groupConditionDisplay.push([{ $and: [...displayCondition] }]);\r\n                        groupConditionDatabase.push([{ $and: [...databaseCondition] }]);\r\n                        groupConditionDatabaseParam.push([{ $and: [...databaseConditionParam] }]);\r\n                    }\r\n\r\n                } else if (selectedRecord[\"groupList\"][groupIndex][`button_or`] === true) {\r\n\r\n                    if (selectedRecord[\"groupList\"][groupIndex][`button_not`] === true) {\r\n                        groupConditionDisplay.push([{ $not: [{ $or: [...displayCondition] }] }]);\r\n                        groupConditionDatabase.push([{ $not: [{ $or: [...databaseCondition] }] }]);\r\n                        groupConditionDatabaseParam.push([{ $not: [{ $or: [...databaseConditionParam] }] }]);\r\n                    }\r\n                    else {\r\n                        groupConditionDisplay.push([{ $or: [...displayCondition] }]);\r\n                        groupConditionDatabase.push([{ $or: [...databaseCondition] }]);\r\n                        groupConditionDatabaseParam.push([{ $or: [...databaseConditionParam] }]);\r\n                    }\r\n\r\n                } else {\r\n                    groupConditionDisplay.push([{ ...displayCondition }]);\r\n                    groupConditionDatabase.push([{ ...databaseCondition }]);\r\n                    groupConditionDatabaseParam.push([{ ...databaseConditionParam }]);\r\n                }\r\n\r\n\r\n                let finalConditionDisplay = undefined;\r\n                let finalConditionDatabase = undefined;\r\n                let finalConditionDatabaseParam = undefined;\r\n                if (addGroupList.length - 1 === 0) {\r\n\r\n\r\n                    finalConditionDisplay = [...groupConditionDisplay];\r\n                    finalConditionDatabase = [...groupConditionDatabase];\r\n                    finalConditionDatabaseParam = [...groupConditionDatabaseParam];\r\n\r\n\r\n                } else if (addGroupList.length - 1 === groupIndex) {\r\n                    if (selectedRecord[\"groupList\"][0][`button_and`] === true) {\r\n\r\n\r\n                        finalConditionDisplay = [{ $and: [...groupConditionDisplay] }];\r\n                        finalConditionDatabase = [{ $and: [...groupConditionDatabase] }];\r\n                        finalConditionDatabaseParam = [{ $and: [...groupConditionDatabaseParam] }];\r\n\r\n\r\n                    } else if (selectedRecord[\"groupList\"][0][`button_or`] === true) {\r\n\r\n\r\n                        finalConditionDisplay = [{ $or: [...groupConditionDisplay] }];\r\n                        finalConditionDatabase = [{ $or: [...groupConditionDatabase] }];\r\n                        finalConditionDatabaseParam = [{ $or: [...groupConditionDatabaseParam] }];\r\n\r\n\r\n                    } else {\r\n\r\n\r\n                        finalConditionDisplay = [{ ...groupConditionDisplay }];\r\n                        finalConditionDatabase = [{ ...groupConditionDatabase }];\r\n                        finalConditionDatabaseParam = [{ ...groupConditionDatabaseParam }];\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                if (this.props.Login.sqlQuery) {\r\n                    const databaseSQLQuery = jsonSql.build({\r\n                        type: 'select',\r\n                        table: selectedRecord[\"stablename_0\"].value,\r\n                        condition: databaseCondition\r\n                    });\r\n                    const displaySQLQuery = jsonSql.build({\r\n                        type: 'select',\r\n                        table: selectedRecord[\"stablename_0\"].label,\r\n                        condition: displayCondition\r\n                    });\r\n                    selectedRecord[\"sgeneratedquery\"] = databaseSQLQuery.query;\r\n                    selectedRecord[\"sdisplayquery\"] = displaySQLQuery.query;\r\n                } else {\r\n\r\n                    const fields = selectedRecord[\"filtercolumns\"];\r\n\r\n                    let fieldList = [];\r\n                    let dbfieldList = [];\r\n                    let groupByAggregateFields = [];\r\n                    let groupByFields = [];\r\n\r\n                    let groupByAggregateFieldsDisplay = [];\r\n                    let groupByFieldsDisplay = [];\r\n\r\n                    let orderByDefault = [];\r\n                    let orderByCustom = {};\r\n\r\n                    let orderByDefaultDisplay = [];\r\n                    let orderByCustomDisplay = {};\r\n\r\n                    selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].forEach(data => {\r\n                        if (data[\"ordertype\"] && data[\"ordertype\"].value === 2) {\r\n                            orderByCustom[data[\"columnname\"].items.columnname] = -1\r\n                            orderByCustomDisplay[data[\"columnname\"].label] = -1\r\n                        } else {\r\n                            orderByCustom[data[\"columnname\"].items.columnname] = 1\r\n                            orderByCustomDisplay[data[\"columnname\"].label] = 1\r\n                        }\r\n                    })\r\n                    if (selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0) {\r\n                        selectedRecord[\"aggregate\"].forEach(data => {\r\n                            if (data[\"aggfunctionname\"] && data[\"aggfunctionname\"].label !== '') {\r\n                                groupByAggregateFields.push({\r\n                                    func: {\r\n                                        name: data[\"aggfunctionname\"].label,\r\n                                        args: [{ field: data[\"columnname\"].items.columnname }]\r\n\r\n                                    }, alias: data[\"columnname\"].items.columnname\r\n                                })\r\n                                groupByAggregateFieldsDisplay.push({\r\n                                    func: {\r\n                                        name: data[\"aggfunctionname\"].label,\r\n                                        args: [{ field: data[\"columnname\"].label }]\r\n\r\n                                    }\r\n                                })\r\n\r\n                            } else {\r\n                                groupByAggregateFields.push(data[\"columnname\"].items.columnname);\r\n                                groupByFields.push(data[\"columnname\"].items.columnname);\r\n                                groupByAggregateFieldsDisplay.push(data[\"columnname\"].label);\r\n                                groupByFieldsDisplay.push(data[\"columnname\"].label);\r\n                            }\r\n                        })\r\n                    }\r\n                    fields.forEach(item => {\r\n                        fieldList.push(item.label);\r\n                        dbfieldList.push(item.value);\r\n                    })\r\n                    const databaseSQLQueryParam = jsonSqlParam.build({\r\n                        type: 'select',\r\n                        table: selectedRecord[\"sviewname\"].value,\r\n                        fields: selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0 ? groupByAggregateFields : dbfieldList,\r\n                        group: groupByFields,\r\n                        sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustom : \"\",\r\n                        condition: finalConditionDatabaseParam\r\n                    });\r\n                    const databaseSQLQuery = jsonSql.build({\r\n                        type: 'select',\r\n                        table: selectedRecord[\"sviewname\"].value,\r\n                        fields: selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0 ? groupByAggregateFields : dbfieldList,\r\n                        group: groupByFields,\r\n                        sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustom : \"\",\r\n                        condition: finalConditionDatabase\r\n                    });\r\n                    const displaySQLQuery = jsonSql.build({\r\n                        type: 'select',\r\n                        fields: selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0 ? groupByAggregateFieldsDisplay : fieldList,\r\n                        group: groupByFieldsDisplay,\r\n                        table: selectedRecord[\"sviewname\"].label,\r\n                        sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustomDisplay : \"\",\r\n                        condition: finalConditionDisplay //&& finalCondition.length === 1 ? finalCondition[0] : finalCondition\r\n                    });\r\n                    selectedRecord[\"squerywithparam\"] = databaseSQLQueryParam.query.replace(\"like\", \"Ilike\");\r\n\r\n                    selectedRecord[\"sgeneratedquery\"] = selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"].length > 0 ?\r\n                        databaseSQLQuery.query.replace(\"like\", \"Ilike\") : \"\";\r\n                    selectedRecord[\"sdisplayquery\"] = selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"].length > 0 ?\r\n                        displaySQLQuery.query.replace(\"like\", \"Ilike\") : \"\";\r\n\r\n                    selectedRecord[\"sdefaultvalue\"] = fieldWithValue;\r\n\r\n                    const paramIndex = [];\r\n                    if (fieldWithValue.length > 0) {\r\n                        fieldWithValue.forEach((item, i) => {\r\n                            if (item.symbolObject.items.symbolType === 4) {\r\n                                paramIndex.push(\"$p\" + (i + 1));\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    if (paramIndex.length > 0) {\r\n                        paramIndex.forEach(data => {\r\n                            selectedRecord[\"squerywithparam\"] = selectedRecord[\"squerywithparam\"].replace(data, data + \" COLLATE pg_catalog.default \");\r\n                        })\r\n                    }\r\n                    // if (selectedRecord[\"squerywithparam\"].indexOf('Ilike') > 0) {\r\n\r\n                    //     let newQuery = selectedRecord[\"squerywithparam\"];\r\n\r\n                    //     while (newQuery.indexOf(\"Ilike\") !== -1) {\r\n\r\n                    //         const paramLabelStartIndex = newQuery.indexOf(\"Ilike\");\r\n\r\n                    //         const paramLabel = newQuery.substring(paramLabelStartIndex, newQuery.length);\r\n\r\n\r\n\r\n                    //     }\r\n                    // }\r\n                }\r\n                this.setState({ selectedRecord });\r\n            });\r\n        } else {\r\n            this.groupByFunction(selectedRecord, databaseCondition, displayCondition);\r\n        }\r\n        this.setState({ selectedRecord });// for temporary\r\n    }\r\n\r\n    groupByFunction(selectedRecord, databaseCondition, displayCondition) {\r\n        let groupByAggregateFields = [];\r\n        let groupByFields = [];\r\n\r\n        let groupByAggregateFieldsDisplay = [];\r\n        let groupByFieldsDisplay = [];\r\n\r\n        let orderByDefault = [];\r\n        let orderByCustom = {};\r\n\r\n        let orderByDefaultDisplay = [];\r\n        let orderByCustomDisplay = {};\r\n\r\n        // if (selectedRecord[\"customorderby\"] && selectedRecord[\"customorderby\"] === true) {\r\n        selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].forEach(data => {\r\n            if (data[\"ordertype\"] && data[\"ordertype\"].value === 2) {\r\n                orderByCustom[data[\"columnname\"].items.columnname] = -1\r\n                orderByCustomDisplay[data[\"columnname\"].label] = -1\r\n            } else {\r\n                orderByCustom[data[\"columnname\"].items.columnname] = 1\r\n                orderByCustomDisplay[data[\"columnname\"].label] = 1\r\n            }\r\n        })\r\n        // } else {\r\n        //     selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].forEach(data => {\r\n        //         orderByDefault.push(data[\"columnname\"].items.columnname);\r\n        //         orderByDefaultDisplay.push(data[\"columnname\"].label);\r\n        //     })\r\n        // }\r\n\r\n\r\n        // if (selectedRecord[\"groupby\"] && selectedRecord[\"groupby\"] === true) {\r\n        if (selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0) {\r\n            selectedRecord[\"aggregate\"].forEach(data => {\r\n                if (data[\"aggfunctionname\"] && data[\"aggfunctionname\"].label !== '') {\r\n                    groupByAggregateFields.push({\r\n                        func: {\r\n                            name: data[\"aggfunctionname\"].label,\r\n                            args: [{ field: data[\"columnname\"].items.columnname }]\r\n\r\n                        }, alias: data[\"columnname\"].items.columnname\r\n                    })\r\n                    groupByAggregateFieldsDisplay.push({\r\n                        func: {\r\n                            name: data[\"aggfunctionname\"].label,\r\n                            args: [{ field: data[\"columnname\"].label }]\r\n\r\n                        }\r\n                    })\r\n\r\n                } else {\r\n                    groupByAggregateFields.push(data[\"columnname\"].items.columnname);\r\n                    groupByFields.push(data[\"columnname\"].items.columnname);\r\n                    groupByAggregateFieldsDisplay.push(data[\"columnname\"].label);\r\n                    groupByFieldsDisplay.push(data[\"columnname\"].label);\r\n                }\r\n            })\r\n\r\n            const databaseSQLQuery = jsonSql.build({\r\n                type: 'select',\r\n                table: selectedRecord[\"sviewname\"].value,\r\n                fields: groupByAggregateFields,\r\n                group: groupByFields,\r\n                sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustom : \"\",\r\n                condition: databaseCondition\r\n            });\r\n            const displaySQLQuery = jsonSql.build({\r\n                type: 'select',\r\n                fields: groupByAggregateFieldsDisplay,\r\n                group: groupByFieldsDisplay,\r\n                sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustomDisplay : \"\",\r\n                table: selectedRecord[\"sviewname\"].label,\r\n                condition: displayCondition\r\n            });\r\n            selectedRecord[\"sgeneratedquery\"] = databaseSQLQuery.query;\r\n            selectedRecord[\"sdisplayquery\"] = displaySQLQuery.query;\r\n            this.setState({ selectedRecord });\r\n        }\r\n        // }\r\n    }\r\n    onConditionClick = (fieldName, index) => {\r\n        let { selectedRecord } = this.state;\r\n        if (fieldName === `button_and`) {\r\n            selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\r\n            selectedRecord[\"groupList\"][index][`button_or`] = false;\r\n        } else if (fieldName === `button_or`) {\r\n            selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\r\n            selectedRecord[\"groupList\"][index][`button_and`] = false;\r\n            // if (selectedRecord[\"groupList\"][index][`notoperator`] && selectedRecord[\"groupList\"][index][`notoperator`] === true) {\r\n            //     selectedRecord[\"groupList\"][index][`notoperator`] = false;\r\n            // }\r\n        } else if (fieldName === `button_not`) {\r\n            selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\r\n        }\r\n        else {\r\n\r\n        }\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    onQueryTypeOnclick = (value) => {\r\n\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"selectedQueryType\"] = value;\r\n        let sqlQuery = false;\r\n        if (value.value === \"sql\") {\r\n            sqlQuery = true;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { sqlQuery: sqlQuery }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        this.setState({ selectedRecord });\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, filterColumnData,\r\n    validateEsignCredential, getSQLQueryDetail, getSQLQueryComboService, comboChangeQueryType,\r\n    executeUserQuery, comboColumnValues, getColumnNamesByTableName,\r\n    getTablesName, getModuleFormName, getDatabaseTables, executeQuery, getForeignTable,\r\n    getViewColumns, getMasterData, createQueryBuilder,\r\n    getParameterFromQuery, getSelectedQueryBuilder, updateQueryBuilder, getQueryBuilder\r\n})(injectIntl(QueryBuilder));"]},"metadata":{},"sourceType":"module"}