{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData } from '../components/CommonScript';\nimport { initRequest } from './LoginAction';\nimport { toast } from 'react-toastify';\nimport { intl } from '../components/App';\nexport function sendRequest(obj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const newMap = { ...obj.inputData\n    };\n    const masterData = obj.masterData;\n    const selectedRecord = obj.selectedRecord;\n    const query = obj.sqlquery;\n    rsapi.post(obj.url, { ...newMap,\n      userinfo: obj.userinfo,\n      query,\n      whereCondition: newMap.whereCondition\n    }).then(response => {\n      masterData['consoleData'] = response.data;\n      newMap['whereCondition'] = obj.inputData.whereCondition; // selectedRecord['filterNew']\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedRecord,\n            newMap\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getQualisForms(obj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const userinfo = obj.userinfo;\n    const selectedRecord = obj.selectedRecord;\n    let constructApiData = obj.constructApiData;\n    let masterData = obj.masterData;\n    rsapi.post('/apiservice/getQualisForms', {\n      'userinfo': userinfo,\n      'napiservicecode': selectedRecord.napiservicecode.value\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data // lstquerybilderColumns: response.data.lstquerybilderColumns.map((item, index) => {\n        //         return { label: item.scolumndisplayname, value: index, item: { ...item } }})\n\n      };\n      masterData['SelectedApi'] = selectedRecord['napiservicecode'];\n\n      if (selectedRecord['napiservicecode'].value < 3) {\n        constructApiData = obj.constructApiData;\n      } else {\n        constructApiData = [];\n      }\n\n      masterData['consoleData'] = [];\n      selectedRecord['filterNew'] = [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData\n          },\n          loading: false,\n          selectedRecord,\n          userinfo,\n          //constructApiData:[]\n          constructApiData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getQualisFormsFields(obj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const userinfo = obj.userinfo;\n    let selectedRecord = { ...obj.selectedRecord,\n      'filterNew': []\n    };\n    let masterData = { ...obj.masterData\n    };\n    rsapi.post('/apiservice/getQualisFormFields', {\n      'userinfo': userinfo,\n      'nformcode': selectedRecord.nformcode.value\n    }).then(response => {\n      masterData = { ...masterData,\n        'lstquerybilderColumns': response.data,\n        'SelectedForm': { ...selectedRecord['nformcode']\n        },\n        'consoleData': []\n      };\n      selectedRecord['filterNew'] = [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData\n          },\n          loading: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getCustomQuery(obj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const userinfo = obj.userinfo;\n    const selectedRecord = obj.selectedRecord;\n    let constructApiData = obj.constructApiData;\n    let masterData = obj.masterData;\n    rsapi.post('/apiservice/getCustomQuery', {\n      'userinfo': userinfo,\n      'napiservicecode': selectedRecord.napiservicecode.value\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      masterData['SelectedApi'] = selectedRecord['napiservicecode'];\n      masterData['SelectedSQLQuery'] = response.data.SelectedSQLQuery;\n      masterData['Columns'] = response.data.Columns;\n      constructApiData = obj.constructApiData;\n      masterData['consoleData'] = [];\n      selectedRecord['filterNew'] = [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData\n          },\n          loading: false,\n          selectedRecord,\n          userinfo,\n          constructApiData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getCustomQueryName(obj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const userinfo = obj.userinfo;\n    let selectedRecord = obj.selectedRecord;\n    let masterData = { ...obj.masterData\n    };\n    rsapi.post('/apiservice/getCustomQueryName', {\n      'userinfo': userinfo,\n      'nsqlquerycode': selectedRecord.nsqlquerycode.value\n    }).then(response => {\n      masterData = { ...masterData\n      };\n      masterData['SelectedSQLQuery'] = response.data.SelectedSQLQuery;\n      masterData['Columns'] = response.data.Columns;\n      masterData['consoleData'] = [];\n      selectedRecord['filterNew'] = [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData\n          },\n          loading: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/APIServiceAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","initRequest","toast","intl","sendRequest","obj","dispatch","newMap","inputData","masterData","selectedRecord","query","sqlquery","post","url","userinfo","whereCondition","then","response","data","type","payload","loading","catch","error","getQualisForms","constructApiData","napiservicecode","value","getQualisFormsFields","nformcode","getCustomQuery","SelectedSQLQuery","Columns","getCustomQueryName","nsqlquerycode"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData } from '../components/CommonScript';\r\nimport { initRequest } from './LoginAction';\r\nimport { toast } from 'react-toastify';\r\nimport { intl } from '../components/App';\r\n\r\n\r\nexport function sendRequest(obj) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const newMap={...obj.inputData}\r\n        const masterData=obj.masterData\r\n        const selectedRecord=obj.selectedRecord\r\n        const query = obj.sqlquery\r\n        rsapi.post(obj.url, {...newMap , userinfo: obj.userinfo ,query , whereCondition: newMap.whereCondition} )\r\n            .then(response => {\r\n                masterData['consoleData']=response.data\r\n                newMap['whereCondition']=obj.inputData.whereCondition\r\n                // selectedRecord['filterNew']\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData:{...masterData,selectedRecord,newMap}, loading: false\r\n                        \r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN,payload: { loading: false }})\r\n            })\r\n    }\r\n}\r\n\r\nexport function getQualisForms(obj) {\r\n    return function (dispatch) {     \r\n        dispatch(initRequest(true));\r\n       const userinfo=obj.userinfo\r\n       const selectedRecord=obj.selectedRecord\r\n       let constructApiData = obj.constructApiData\r\n       let masterData=obj.masterData\r\n        rsapi.post('/apiservice/getQualisForms', {'userinfo':userinfo,'napiservicecode':selectedRecord.napiservicecode.value} )\r\n            .then(response => {\r\n                masterData={...masterData,\r\n                    ...response.data,\r\n                    // lstquerybilderColumns: response.data.lstquerybilderColumns.map((item, index) => {\r\n                    //         return { label: item.scolumndisplayname, value: index, item: { ...item } }})\r\n                }\r\n                masterData['SelectedApi']=selectedRecord['napiservicecode']\r\n                if(selectedRecord['napiservicecode'].value < 3){   \r\n                    constructApiData = obj.constructApiData\r\n                }\r\n                else{\r\n                    constructApiData = []\r\n                }\r\n                \r\n                masterData['consoleData']=[]\r\n                selectedRecord['filterNew']=[]\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData:{...masterData},\r\n                        loading: false,\r\n                        selectedRecord,\r\n                        userinfo,\r\n                        //constructApiData:[]\r\n                        constructApiData\r\n                       \r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getQualisFormsFields(obj) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n       const userinfo=obj.userinfo\r\n       let selectedRecord={...obj.selectedRecord,'filterNew':[]}\r\n       let masterData={...obj.masterData}\r\n        rsapi.post('/apiservice/getQualisFormFields', {'userinfo':userinfo,'nformcode':selectedRecord.nformcode.value} )\r\n            .then(response => {\r\n                masterData={...masterData,'lstquerybilderColumns':response.data,\r\n                'SelectedForm':{...selectedRecord['nformcode']},'consoleData':[]}\r\n                selectedRecord['filterNew']=[]\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData:{...masterData} ,\r\n                        loading: false,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getCustomQuery(obj) {\r\n    return function (dispatch) {     \r\n        dispatch(initRequest(true));\r\n       const userinfo=obj.userinfo\r\n       const selectedRecord=obj.selectedRecord\r\n       let constructApiData = obj.constructApiData\r\n       let masterData=obj.masterData\r\n        rsapi.post('/apiservice/getCustomQuery', {'userinfo':userinfo,'napiservicecode':selectedRecord.napiservicecode.value} )\r\n            .then(response => {\r\n                masterData={...masterData,\r\n                    ...response.data,\r\n                }\r\n                masterData['SelectedApi']=selectedRecord['napiservicecode']\r\n                masterData['SelectedSQLQuery'] = response.data.SelectedSQLQuery\r\n                masterData['Columns']=response.data.Columns\r\n                constructApiData = obj.constructApiData\r\n                masterData['consoleData']=[]\r\n                selectedRecord['filterNew']=[]\r\n                       \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData:{...masterData},\r\n                        loading: false,\r\n                        selectedRecord,\r\n                        userinfo,\r\n                        constructApiData\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\nexport function getCustomQueryName(obj) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n       const userinfo=obj.userinfo\r\n       let selectedRecord=obj.selectedRecord \r\n       let masterData={...obj.masterData}\r\n        rsapi.post('/apiservice/getCustomQueryName', {'userinfo':userinfo,'nsqlquerycode':selectedRecord.nsqlquerycode.value} )\r\n            .then(response => {\r\n                masterData={...masterData}\r\n                masterData['SelectedSQLQuery'] = response.data.SelectedSQLQuery\r\n                masterData['Columns']=response.data.Columns\r\n                masterData['consoleData']=[]\r\n                selectedRecord['filterNew']=[]\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData:{...masterData} ,\r\n                        loading: false,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}