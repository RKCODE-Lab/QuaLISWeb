{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PortalOrderDetailsTubeTab.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { process } from '@progress/kendo-data-query';\nimport { showEsign } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\n\nclass PortalOrderDetailsTubeTab extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onReceiveOrderClick = row => {\n      const ncontrolCode = this.props.controlMap.has(\"ReceivedPortalOrder\") && this.props.controlMap.get(\"ReceivedPortalOrder\").ncontrolcode;\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.userInfo;\n      let postParam = undefined;\n      inputData[\"portalorder\"] = {\n        \"nportalordercode\": row.nportalordercode\n      };\n      inputData[\"portalorder\"][\"nportalordercontainercode\"] = row.nportalordercontainercode;\n      inputData[\"portalorder\"][\"nportalordercode\"] = this.props.masterData.selectedPortalOrder.nportalordercode;\n      postParam = {\n        inputListName: \"PortalOrderDetails\",\n        selectedObject: \"PortalOrderDetails\",\n        primaryKeyField: \"nportalordercontainercode\"\n      };\n      const inputParam = {\n        classUrl: 'portalorderdetails',\n        methodUrl: \"PortalOrderDetails\",\n        inputData: inputData,\n        operation: \"received\",\n        postParam,\n        selectedId: row.nportalordercontainercode\n      };\n      let saveType;\n      const masterData = this.props.masterData;\n      const esignNeeded = showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            openModal: true,\n            operation: \"received\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.state = {\n      tubeDataState: {\n        skip: 0,\n        take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n      }\n    };\n  }\n\n  render() {\n    const portalTubeColumnList = [{\n      \"idsName\": \"IDS_CONTAINERTYPE\",\n      \"dataField\": \"scontainertype\",\n      \"width\": \"150px\"\n    }, // {\"idsName\":\"IDS_TUBETYPE\",\"dataField\":\"stubename\",\"width\":\"150px\"},\n    {\n      \"idsName\": \"IDS_TUBEQTY\",\n      \"dataField\": \"ntubeqty\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_SAMPLETYPE\",\n      \"dataField\": \"ssampletype\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_STATUS\",\n      \"dataField\": \"sdisplaystatus\",\n      \"width\": \"150px\"\n    }];\n    const receivedId = this.props.controlMap.has(\"ReceivedPortalOrder\") && this.props.controlMap.get(\"ReceivedPortalOrder\").ncontrolcode;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      key: \"portalordercontainerkey\",\n      primaryKeyField: \"nportalordercontainercode\",\n      data: this.props.PortalOrderTube,\n      dataResult: process(this.props.PortalOrderTube || [], this.state.tubeDataState),\n      dataState: this.state.tubeDataState,\n      dataStateChange: event => this.setState({\n        tubeDataState: event.dataState\n      }),\n      extractedColumnList: portalTubeColumnList,\n      controlMap: this.props.controlMap,\n      userRoleControlRights: this.props.userRoleControlRights,\n      inputParam: this.props.inputParam,\n      userInfo: this.props.userInfo,\n      pageable: true,\n      scrollable: 'scrollable',\n      isActionRequired: true,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_RECEIVE\"\n        }),\n        controlname: \"faReceivedItem\",\n        objectName: \"mastertoedit\",\n        hidden: this.props.userRoleControlRights.indexOf(receivedId) === -1,\n        onClick: this.onReceiveOrderClick,\n        inputData: {}\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }\n    }))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.PortalOrderTube !== previousProps.PortalOrderTube) {\n      let {\n        tubeDataState\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        tubeDataState = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n        };\n      }\n\n      this.setState({\n        tubeDataState\n      });\n    }\n  } //}\n\n\n}\n\n;\nexport default injectIntl(PortalOrderDetailsTubeTab);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/registration/PortalOrderDetailsTubeTab.jsx"],"names":["React","injectIntl","Row","Col","DataGrid","process","showEsign","DEFAULT_RETURN","PortalOrderDetailsTubeTab","Component","constructor","props","onReceiveOrderClick","row","ncontrolCode","controlMap","has","get","ncontrolcode","inputData","userInfo","postParam","undefined","nportalordercode","nportalordercontainercode","masterData","selectedPortalOrder","inputListName","selectedObject","primaryKeyField","inputParam","classUrl","methodUrl","operation","selectedId","saveType","esignNeeded","userRoleControlRights","nformcode","updateInfo","typeName","data","loadEsign","screenData","openModal","updateStore","crudMaster","state","tubeDataState","skip","take","settings","parseInt","render","portalTubeColumnList","receivedId","PortalOrderTube","event","setState","dataState","title","intl","formatMessage","id","controlname","objectName","hidden","indexOf","onClick","componentDidUpdate","previousProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl} from 'react-intl';\r\nimport {Row, Col } from 'react-bootstrap';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { showEsign } from '../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nclass  PortalOrderDetailsTubeTab extends React.Component{\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = ({\r\n        tubeDataState: { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5 },\r\n    });\r\n}\r\n    render(){\r\n        const portalTubeColumnList = [\r\n            {\"idsName\":\"IDS_CONTAINERTYPE\",\"dataField\":\"scontainertype\",\"width\":\"150px\"},\r\n            // {\"idsName\":\"IDS_TUBETYPE\",\"dataField\":\"stubename\",\"width\":\"150px\"},\r\n            {\"idsName\":\"IDS_TUBEQTY\",\"dataField\":\"ntubeqty\",\"width\":\"150px\"},\r\n            {\"idsName\":\"IDS_SAMPLETYPE\",\"dataField\":\"ssampletype\",\"width\":\"150px\"},\r\n            {\"idsName\":\"IDS_STATUS\",\"dataField\":\"sdisplaystatus\",\"width\":\"150px\"}\r\n\r\n        ];\r\n        const receivedId = this.props.controlMap.has(\"ReceivedPortalOrder\") && this.props.controlMap.get(\"ReceivedPortalOrder\").ncontrolcode;\r\n    return (\r\n        <>\r\n            \r\n            <Row noGutters={true}>\r\n                <Col md=\"12\">\r\n                    <DataGrid\r\n                       key=\"portalordercontainerkey\"\r\n                       primaryKeyField = \"nportalordercontainercode\"\r\n                       data = {this.props.PortalOrderTube}\r\n                       dataResult = {process(this.props.PortalOrderTube||[],this.state.tubeDataState)}\r\n                       dataState = {this.state.tubeDataState}\r\n                       dataStateChange = {(event) => this.setState({ tubeDataState: event.dataState })}\r\n                       extractedColumnList = {portalTubeColumnList}\r\n                       controlMap = {this.props.controlMap}\r\n                       userRoleControlRights={this.props.userRoleControlRights}\r\n                       inputParam = {this.props.inputParam}\r\n                       userInfo = {this.props.userInfo}\r\n                       pageable={true}\r\n                       scrollable={'scrollable'}\r\n                       isActionRequired={true}\r\n                       actionIcons={[\r\n                        {\r\n                            title: this.props.intl.formatMessage({ id: \"IDS_RECEIVE\" }),\r\n                            controlname: \"faReceivedItem\",\r\n                            objectName: \"mastertoedit\",\r\n                            hidden: this.props.userRoleControlRights.indexOf(receivedId) === -1,\r\n                            onClick: this.onReceiveOrderClick,\r\n                            inputData: {}\r\n                        }\r\n                    ]\r\n                }\r\n                    >\r\n                    </DataGrid>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\ncomponentDidUpdate(previousProps) {\r\n    if (this.props.PortalOrderTube !== previousProps.PortalOrderTube) {\r\n        let { tubeDataState} = this.state;\r\n        if (this.props.dataState=== undefined) {\r\n            tubeDataState = { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5 };\r\n        }\r\n        this.setState({ tubeDataState });\r\n    }\r\n\r\n}\r\nonReceiveOrderClick = (row) => {\r\n\r\n   \r\n        const ncontrolCode = this.props.controlMap.has(\"ReceivedPortalOrder\") && this.props.controlMap.get(\"ReceivedPortalOrder\").ncontrolcode\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n\r\n        let postParam = undefined;\r\n        inputData[\"portalorder\"] = {\r\n            \"nportalordercode\": row.nportalordercode\r\n        };\r\n        inputData[\"portalorder\"][\"nportalordercontainercode\"] = row.nportalordercontainercode;\r\n\r\n        inputData[\"portalorder\"][\"nportalordercode\"] = this.props.masterData.selectedPortalOrder.nportalordercode;\r\n        postParam = { inputListName: \"PortalOrderDetails\", selectedObject: \"PortalOrderDetails\", primaryKeyField: \"nportalordercontainercode\" };\r\n        const inputParam = {\r\n            classUrl: 'portalorderdetails',\r\n            methodUrl: \"PortalOrderDetails\",\r\n            inputData: inputData,\r\n            operation: \"received\", postParam,\r\n            selectedId: row.nportalordercontainercode\r\n        }\r\n        let saveType;\r\n\r\n        const masterData = this.props.masterData;\r\n\r\n        const esignNeeded = showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, ncontrolCode);\r\n\r\n\r\n\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"received\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n\r\n    }\r\n//}\r\n\r\n};\r\n\r\nexport default injectIntl(PortalOrderDetailsTubeTab);"]},"metadata":{},"sourceType":"module"}