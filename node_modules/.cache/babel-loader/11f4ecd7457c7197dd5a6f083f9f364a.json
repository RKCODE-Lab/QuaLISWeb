{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\DynamicPreRegDesign.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { updateStore, getReactInputFields, selectRegistrationTemplate, filterColumnData, getRegistrationTemplate, getEditRegTemplate, crudMaster, getPreviewTemplate, getChildValues, getDynamicFilter, getDynamicFilterExecuteData, rearrangeDateFormatforKendoDataTool, validateEsignCredential, getDefaultTemplate, validatePreview, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte, getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail, getEditMaster } from '../../actions/index';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { Row, Col, FormGroup, FormLabel, Card, Nav } from 'react-bootstrap';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { ContentPanel, MediaLabel, ReadOnlyText } from '../../components/App.styles';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { ageCalculate, childComboClear, constructOptionList, convertDateTimetoStringDBFormat, deleteAttachmentDropZone, extractFieldHeader, formatDate, formatInputDate, getControlMap, getSameRecordFromTwoArrays, onDropAttachFileList, showEsign, validateEmail, validatePhoneNumber } from '../../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport PreRegDesignPopUp from './PreRegDesignPopUp';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { Affix } from 'rsuite';\nimport PortalModal from '../../PortalModal';\nimport { faCopy, faEye, faPencilAlt, faThumbsUp, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport DynamicSlideout from './DynamicSlideout.jsx';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { designProperties, transactionStatus, SampleType, designComponents, formCode } from '../../components/Enumeration';\nimport FormInput from '../../components/form-input/form-input.component';\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\nimport AddMasterRecords from './AddMasterRecords';\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\nimport ExternalOrderSlideout from './ExternalOrderSlideout';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DynamicPreRegDesign extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.custombuttonclick = (event, component) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const inputparam = {\n        component,\n        userinfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord\n      };\n      this.props.getDynamicFilter(inputparam);\n    };\n\n    this.onChangeAwesomeQueryBuilder = (immutableTree, config) => {\n      //  let selectedRecord = this.state.selectedRecord || {};\n      const filterquery = QbUtils.sqlFormat(immutableTree, config);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          awesomeTree: immutableTree,\n          awesomeConfig: config,\n          filterquery\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\n    };\n\n    this.handlePageChange = event => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoSkip: event.skip,\n          kendoTake: event.take\n        }\n      };\n      this.props.updateStore(updateInfo); //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\n    };\n\n    this.handleFilterChange = event => {\n      // event.preventDefault();\n      //event.stopPropagation();\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoFilter: event.filter // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: event.filter });\n    };\n\n    this.handleExecuteClick = event => {\n      //const selectedRecord = this.state.selectedRecord\n      const filterquery = this.props.Login.filterquery;\n\n      if (filterquery !== \"\" && filterquery !== undefined && !filterquery.includes('Invalid date')) {\n        const inputparam = {\n          component: this.props.Login.seletedFilterComponent,\n          userinfo: this.props.Login.userInfo,\n          filterquery: filterquery // selectedRecord:this.state.selectedRecord\n\n        };\n        this.props.getDynamicFilterExecuteData(inputparam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLINFILTER\"\n        }));\n      }\n    };\n\n    this.handleKendoRowClick = event => {\n      let item1 = event.dataItem;\n      const component = this.props.Login.seletedFilterComponent;\n\n      if (component[\"childFields\"]) {\n        const index = this.props.Login.masterIndex;\n        let selectedRecord = this.state.selectedMaster || {};\n        component[\"childFields\"].map(item => {\n          let data = item1[item.columnname];\n\n          if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n            //combocontrol\n            data = {\n              label: item1[item.sdisplaymember],\n              value: item1[item.svaluemember]\n            };\n          } else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n            //Date picker control\n            data = rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, data);\n          }\n\n          selectedRecord[index][item.columnname] = data;\n        });\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster: selectedRecord,\n            loadCustomSearchFilter: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const newdata = {\n          label: item1[component['displaymember']],\n          value: item1[component['valuemember']],\n          item: {\n            jsondata: { ...item1,\n              jsondata: { ...item1\n              }\n            }\n          }\n        };\n        this.onComboChange(newdata, component, component['label']);\n      }\n    };\n\n    this.onClickView = selectedControl => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[selectedControl.label] !== undefined && selectedRecord[selectedControl.label] !== '') {\n        this.props.viewExternalportalDetail(selectedControl, selectedRecord[selectedControl.label], this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECT\"\n        }) + \" \" + selectedControl.label);\n      }\n    };\n\n    this.onComboChangeMaster = (comboData, fieldName, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (comboData !== null) {\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137 || this.props.Login.selectedControl[masterIndex].table.item.nformcode === 43) {\n          selectedMaster[masterIndex][item.tableDataField] = comboData.value;\n        } else if (item.foreignDataField) {\n          selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedMaster[masterIndex][fieldName] = comboData;\n\n      if (item.childIndex !== undefined) {\n        this.props.getChildComboMaster(selectedMaster, fieldName, item, this.props.Login.selectedControl, this.props.Login.masterfieldList, this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex);\n      } else {\n        this.setState({\n          selectedMaster\n        });\n      }\n    };\n\n    this.handleDateChangeMaster = (dateName, dateValue, item) => {\n      //   const { selectedMaster } = this.state;\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      const age = ageCalculate(dateValue);\n      selectedMaster[masterIndex][\"sage\"] = age;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputOnChangeMaster = (value, name, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onInputOnChangeMaster = event => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\n            selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\n            selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\n            selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\n            selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\n            selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\n            selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\n            selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\n          } else {\n            selectedMaster[masterIndex].sflatnotemp = \"\";\n            selectedMaster[masterIndex].shousenotemp = \"\";\n            selectedMaster[masterIndex].spostalcodetemp = \"\";\n            selectedMaster[masterIndex].sstreettemp = \"\";\n            selectedMaster[masterIndex].scitynametemp = \"\";\n            selectedMaster[masterIndex].sdistrictnametemp = \"\";\n            selectedMaster[masterIndex].sregionnametemp = \"\";\n          }\n        }\n      } else {\n        // selectedMaster[masterIndex][event.target.name] = event.target.value;\n        if (event.target.name === \"smobileno\" || event.target.name === \"sphoneno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedMaster[masterIndex][event.target.name] = event.target.value !== \"\" ? event.target.value : selectedMaster[masterIndex][event.target.name];\n          } else {\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onSaveMasterRecord = (saveType, formRef) => {\n      //add / edit            \n      //add / edit            \n      const masterIndex = this.props.Login.masterIndex;\n      let inputData = [];\n      const selectedControl = this.props.Login.selectedControl;\n      const masterDesign = this.props.Login.masterDesign;\n      inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n        nformcode: selectedControl[masterIndex].table.item.nformcode\n      };\n      inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      let isEmailCheck = true;\n      const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase();\n\n      if (this.props.Login.masterOperation[masterIndex] === 'update') {\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n          inputData[methodUrl][\"ndynamicmastercode\"] = this.props.Login.masterEditObject[masterIndex].item ? this.props.Login.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : this.props.Login.masterEditObject[masterIndex].ndynamicmastercode;\n        } else {\n          inputData[methodUrl][selectedControl[masterIndex][\"valuemember\"]] = this.props.Login.masterEditObject[masterIndex].value;\n        }\n      }\n\n      if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n        const selectedMaster = this.state.selectedMaster;\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n          nformcode: selectedControl[masterIndex].table.item.nformcode\n        };\n        inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\n        inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\n        inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique; //add                          \n\n        inputData[methodUrl] = { ...inputData[methodUrl],\n          nformcode: selectedControl[masterIndex].table.item.nformcode,\n          ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        const dateList = [];\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        masterDesign[masterIndex] && masterDesign[masterIndex].slideoutdesign.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ? {\n                      value: selectedMaster[masterIndex][componentrow.label].value,\n                      label: selectedMaster[masterIndex][componentrow.label].label,\n                      pkey: componentrow.valuemember,\n                      nquerybuildertablecode: componentrow.nquerybuildertablecode,\n                      source: componentrow.source,\n                      [componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ? selectedMaster[masterIndex][componentrow.label].item ? selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedMaster[masterIndex][componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\n                    } : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\";\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false);\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    } else {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) : selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false) : \"\";\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    }\n\n                    if (componentrow.timezone) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ? {\n                        value: selectedMaster[masterIndex][`tz${componentrow.label}`].value,\n                        label: selectedMaster[masterIndex][`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label] : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                  }\n\n                  return inputData[\"dynamicmaster\"];\n                });\n              } else {\n                if (component.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? {\n                    value: selectedMaster[masterIndex][component.label].value,\n                    label: selectedMaster[masterIndex][component.label].label,\n                    pkey: component.valuemember,\n                    nquerybuildertablecode: component.nquerybuildertablecode,\n                    source: component.source,\n                    [component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ? selectedMaster[masterIndex][component.label].item ? selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                    // selectedRecord[component.label] : new Date(), userInfo);\n\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                    //    selectedRecord[component.label] : new Date(), userInfo) :\n                    formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) : selectedMaster[masterIndex][component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                    //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                    formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                  }\n\n                  if (component.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ? {\n                      value: selectedMaster[masterIndex][`tz${component.label}`].value,\n                      label: selectedMaster[masterIndex][`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? selectedMaster[masterIndex][component.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n                }\n              }\n\n              return inputData[\"dynamicmaster\"];\n            });\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n        inputData[\"masterdatelist\"] = dateList;\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === formCode.PATIENTMASTER) {\n        inputData[\"noneedfilter\"] = 1; //will disl=play all db records\n\n        if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n          inputData[\"noneedfilter\"] = 2; //will display will added record\n        }\n\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (fieldName === \"semail\") {\n            isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\n          }\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === 43) {\n        inputData[\"noneedfilter\"] = 2; //will disl=play all db records\n\n        if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n          inputData[\"noneedfilter\"] = 2; //will display will added record\n        }\n\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (fieldName === \"semail\") {\n            isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\n          }\n\n          if (item.isJsonField === true) {\n            let fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n\n            if (item.controlType === \"datepicker\") {\n              fieldData = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"selectbox\") {\n              fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              fieldName = item.tableDataField;\n            }\n\n            inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: fieldData\n            };\n            return inputData[methodUrl];\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n        inputData[methodUrl][\"nproductcode\"] = -1; // inputData[methodUrl][\"ndiagnosticcasecode\"] = -1;\n        // inputData[methodUrl][\"sexternalorderid\"] = 1;\n\n        inputData[methodUrl][\"nordertypecode\"] = 1;\n      } else {\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            let fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n\n            if (item.controlType === \"datepicker\") {\n              fieldData = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            }\n\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: fieldData\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        }); //inputData[methodUrl][\"jsondata\"] = {...inputData[methodUrl]};\n      } // }\n\n\n      const inputParam = {\n        withoutCombocomponent: this.state.withoutCombocomponent,\n        comboComponents: this.state.comboComponents,\n        selectedRecord: this.state.selectedRecord,\n        selectedRecordName: 'selectedRecord',\n        loadSubSample: false,\n        selectedControl: this.props.Login.selectedControl,\n        comboData: this.props.Login.comboData,\n        comboName: 'comboData',\n        classUrl: selectedControl[masterIndex].table.item.classUrl,\n        methodUrl: selectedControl[masterIndex].table.item.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        // selectedControl[masterIndex].table.item.sdisplayname,\n        inputData: inputData,\n        operation: this.props.Login.masterOperation[masterIndex],\n        saveType,\n        formRef,\n        masterIndex,\n        selectedMaster: this.state.selectedMaster,\n        mastercomboComponents: this.props.Login.mastercomboComponents,\n        masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\n        masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\n        masterextractedColumnList: this.props.Login.masterextractedColumnList,\n        masterdataList: this.props.Login.masterdataList,\n        masterDesign: this.props.Login.masterDesign,\n        masterfieldList: this.props.Login.masterfieldList,\n        userinfo: this.props.Login.userInfo,\n        masterEditObject: this.props.Login.masterEditObject,\n        masterOperation: this.props.Login.masterOperation\n      };\n\n      if (isEmailCheck) {\n        this.props.addMasterRecord(inputParam, this.props.Login.masterData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAIL\"\n        }));\n      } // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\n      //             openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n      //             operation: this.props.Login.operation\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n      //  this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      //  }\n\n    };\n\n    this.mandatoryValidation = () => {\n      const mandatoryFields = [];\n      const selectedRecord = this.state.selectedRecord;\n      this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n              if (componentrow.mandatory === true) {\n                if (componentrow.recordbasedshowhide) {\n                  if (this.state.selectedRecord[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                }\n              } else {\n                if (componentrow.inputtype === \"email\") {\n                  selectedRecord[componentrow.label] && selectedRecord[componentrow.label] !== \"\" && mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    \"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"textbox\"\n                  });\n                }\n              }\n\n              return null;\n            }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectedRecord[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"alertPreFix\": this.props.intl.formatMessage({\n                id: \"IDS_VALID\"\n              }),\n              \"validateFunction\": validateEmail,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }) : mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n              \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n            }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"alertPreFix\": this.props.intl.formatMessage({\n                id: \"IDS_VALID\"\n              }),\n              \"validateFunction\": validateEmail,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }) : mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n              \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n            }) : selectedRecord[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"alertPreFix\": this.props.intl.formatMessage({\n                id: \"IDS_VALID\"\n              }),\n              \"validateFunction\": validateEmail,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }) : \"\" : \"\";\n          });\n        });\n      });\n      return mandatoryFields;\n    };\n\n    this.addMasterRecord = control => {\n      let masterIndex = this.props.Login.masterIndex;\n\n      if (masterIndex !== undefined) {\n        masterIndex = masterIndex + 1;\n      } else {\n        masterIndex = 0;\n      }\n\n      let selectedControl = this.props.Login.selectedControl || [];\n      let selectedMaster = this.state.selectedMaster || [];\n      selectedMaster[masterIndex] = {};\n      selectedControl[masterIndex] = control;\n      let fieldList = this.props.Login.masterfieldList || [];\n      fieldList[masterIndex] = [];\n      let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n      masterComboColumnFiled[masterIndex] = [];\n      let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n      extractedColumnList[masterIndex] = [];\n      let masterdataList = this.props.Login.masterdataList || [];\n      let masterDesign = this.props.Login.masterDesign || [];\n      let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n      let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n      let masterOperation = this.props.Login.masterOperation || [];\n      masterdataList[masterIndex] = [];\n      masterDesign[masterIndex] = [];\n      masterwithoutCombocomponent[masterIndex] = [];\n      mastercomboComponents[masterIndex] = [];\n      masterOperation[masterIndex] = 'create';\n\n      if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n        if (control.table.item.component === 'Type2Component') {\n          fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n        } else {\n          fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n        }\n\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterOperation,\n            selectedMaster //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (control.table.item.component === 'Type3Component') {\n        fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterprimaryKeyField: primaryKeyField,\n          masterComboColumnFiled: masterComboColumnFiled,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterOperation,\n          selectedMaster,\n          screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n        };\n        this.props.getAddMasterCombo(inputParam);\n      } else if (control.table.item.component === 'Dynamic') {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterComboColumnFiled,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterComboColumnFiled,\n          masterOperation,\n          selectedMaster\n        };\n        this.props.getDynamicMasterTempalte(inputParam);\n      } // this.props.getMasterRecord(control);\n\n    };\n\n    this.editMasterRecord = (control, editObject) => {\n      if (editObject) {\n        let masterIndex = this.props.Login.masterIndex;\n\n        if (masterIndex !== undefined) {\n          masterIndex = masterIndex + 1;\n        } else {\n          masterIndex = 0;\n        }\n\n        let selectedControl = this.props.Login.selectedControl || [];\n        let selectedMaster = this.state.selectedMaster || [];\n        selectedMaster[masterIndex] = {};\n        selectedControl[masterIndex] = control;\n        let fieldList = this.props.Login.masterfieldList || [];\n        fieldList[masterIndex] = [];\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n        masterComboColumnFiled[masterIndex] = [];\n        let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n        extractedColumnList[masterIndex] = [];\n        let masterdataList = this.props.Login.masterdataList || [];\n        let masterDesign = this.props.Login.masterDesign || [];\n        let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n        let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n        let masterOperation = this.props.Login.masterOperation || [];\n        let masterEditObject = this.props.Login.masterEditObject || [];\n        masterdataList[masterIndex] = [];\n        masterDesign[masterIndex] = [];\n        masterwithoutCombocomponent[masterIndex] = [];\n        mastercomboComponents[masterIndex] = [];\n        masterOperation[masterIndex] = 'update';\n        masterEditObject[masterIndex] = editObject;\n\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n          if (control.table.item.component === 'Type2Component') {\n            fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n          } else {\n            fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n          }\n\n          extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n          const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n          const updateInfo = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            selectedMaster,\n            masterEditObject,\n            masterOperation // editObject\n            //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n\n          };\n          this.props.getEditMaster(updateInfo);\n        } else if (control.table.item.component === 'Type3Component') {\n          fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n          extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n          masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n          const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterEditObject,\n            masterOperation,\n            selectedMaster,\n            screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode] // editObject\n\n          };\n          this.props.getEditMaster(inputParam);\n        } else if (control.table.item.component === 'Dynamic') {\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterComboColumnFiled,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterComboColumnFiled,\n            masterEditObject,\n            masterOperation,\n            selectedMaster //  editObject\n\n          };\n          this.props.getEditMaster(inputParam);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTHERECORD\"\n        }));\n      }\n    };\n\n    this.onExecuteClick = () => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const userInfo = this.props.Login.userInfo;\n      const sampleRegistration = {};\n      sampleRegistration[\"jsondata\"] = {};\n      const dateList = [];\n      const defaulttimezone = this.props.Login.defaultTimeZone;\n      this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              return component.children.map(componentrow => {\n                if (componentrow.inputtype === \"date\") {\n                  if (componentrow.mandatory) {\n                    sampleRegistration[\"jsondata\"][componentrow.label] = typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\";\n                  } else {\n                    sampleRegistration[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\" : selectedRecord[componentrow.label] ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\" : \"\";\n                  }\n\n                  if (componentrow.timezone) {\n                    sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ? {\n                      value: selectedRecord[`tz${componentrow.label}`].value,\n                      label: selectedRecord[`tz${componentrow.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                  }\n\n                  dateList.push(componentrow.label);\n                }\n              });\n              return sampleRegistration;\n            } else {\n              if (component.inputtype === \"date\") {\n                if (component.mandatory) {\n                  sampleRegistration[\"jsondata\"][component.label] = typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\";\n                } else {\n                  sampleRegistration[\"jsondata\"][component.label] = component.loadcurrentdate ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\" : selectedRecord[component.label] ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\" : \"\";\n                }\n\n                if (component.timezone) {\n                  sampleRegistration[\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ? {\n                    value: selectedRecord[`tz${component.label}`].value,\n                    label: selectedRecord[`tz${component.label}`].label\n                  } : defaulttimezone ? defaulttimezone : -1;\n                }\n\n                dateList.push(component.label);\n              }\n\n              return sampleRegistration;\n            }\n          });\n        });\n      });\n      const {\n        dateconstraints,\n        combinationunique\n      } = this.getJsondata(this.props.Login.masterData.selectedTemplate.jsondata);\n      const inputParam = {\n        Registration: sampleRegistration,\n        DateList: dateList,\n        dateconstraints: dateconstraints,\n        userinfo: userInfo,\n        combinationunique: combinationunique\n      };\n      this.props.validatePreview(inputParam);\n    };\n\n    this.getJsondata = templatedata => {\n      let dateconstraints = [];\n      let combinationunique = [];\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              // componentRow.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\n              componentRow.unique && combinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n\n              if (componentRow.inputtype === 'date') {\n                // sampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\n                dateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\n              }\n\n              return null;\n            });\n          } else {\n            component.unique && combinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n\n            if (component.inputtype === 'date') {\n              dateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\n            }\n\n            return null;\n          }\n        });\n      }));\n      let jsondata = {\n        combinationunique,\n        dateconstraints\n      };\n      return jsondata;\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.filterComboChange = comboData => {\n      // this.setState({ selectedSampleType: comboData })\n      this.props.getDefaultTemplate(comboData, this.props.Login.userInfo, this.props.Login.masterData);\n    };\n\n    this.templateComboChange = comboData => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedTemplate :  comboData, \n      //             selectedDefaultTemplate: { \"label\": comboData.sdefaulttemplatename,\n      //                                         \"value\": comboData.ndefaulttemplatecode,\n      //                                         \"item\": comboData\n      //                                         }\n      //         }\n      // }\n      // this.props.updateStore(updateInfo);\n      this.setState({\n        selectedDefaultTemplate: comboData //  { \"label\": comboData.sdefaulttemplatename,\n        //     \"value\": comboData.ndefaulttemplatecode,\n        //     \"item\": comboData\n        //     }\n\n      });\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.reloadData();\n    };\n\n    this.removeIndex = (data, removeIndex) => {\n      const data1 = [...data.splice(0, removeIndex), ...data.splice(removeIndex + 1)];\n      return data1;\n    };\n\n    this.closeModal = () => {\n      let updateInfo = {};\n\n      if (this.props.Login.addMaster) {\n        let masterIndex = this.props.Login.masterIndex;\n\n        if (masterIndex !== 0) {\n          const screenName = this.props.Login.selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode];\n          const selectedMaster = this.removeIndex(this.props.Login.selectedMaster, masterIndex);\n          const selectedControl = this.removeIndex(this.props.Login.selectedControl, masterIndex);\n          const masterextractedColumnList = this.props.Login.masterextractedColumnList && this.removeIndex(this.props.Login.masterextractedColumnList, masterIndex);\n          const masterfieldList = this.props.Login.masterfieldList && this.removeIndex(this.props.Login.masterfieldList, masterIndex);\n          const masterdataList = this.props.Login.masterdataList && this.removeIndex(this.props.Login.masterdataList, masterIndex);\n          const mastercomboComponents = this.props.Login.mastercomboComponents && this.removeIndex(this.props.Login.mastercomboComponents, masterIndex);\n          const masterComboColumnFiled = this.props.Login.masterComboColumnFiled && this.removeIndex(this.props.Login.masterComboColumnFiled, masterIndex);\n          const masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent && this.removeIndex(this.props.Login.masterwithoutCombocomponent, masterIndex);\n          const masterDesign = this.props.Login.masterDesign && this.removeIndex(this.props.Login.masterDesign, masterIndex);\n          const masterOperation = this.props.Login.masterOperation && this.removeIndex(this.props.Login.masterOperation, masterIndex);\n          const masterEditObject = this.props.Login.masterEditObject && this.removeIndex(this.props.Login.masterEditObject, masterIndex);\n          masterIndex = masterIndex - 1;\n          updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster,\n              selectedControl,\n              masterextractedColumnList,\n              masterfieldList,\n              masterdataList,\n              mastercomboComponents,\n              masterwithoutCombocomponent,\n              masterComboColumnFiled,\n              masterDesign,\n              masterIndex,\n              masterOperation,\n              masterEditObject,\n              screenName\n            }\n          };\n        } else {\n          // selectedMaster = []\n          // selectedControl = []\n          // masterextractedColumnList = []\n          // masterfieldList = []\n          // addMaster = true\n          // masterdataList = []\n          // mastercomboComponents = []\n          // masterwithoutCombocomponent = []\n          // masterComboColumnFiled = []\n          // masterDesign = []\n          // masterIndex = undefined\n          // screenName=this.props.Login.inputParam.displayName\n          updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster: [],\n              selectedControl: [],\n              masterextractedColumnList: [],\n              masterfieldList: [],\n              addMaster: false,\n              masterdataList: [],\n              mastercomboComponents: [],\n              masterwithoutCombocomponent: [],\n              masterComboColumnFiled: [],\n              masterDesign: [],\n              masterIndex: undefined,\n              masterOperation: [],\n              masterEditObject: []\n            }\n          };\n        }\n      } else if (this.props.Login.isDynamicViewSlideOut) {\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            isDynamicViewSlideOut: false,\n            selectedDynamicViewControl: undefined\n          } // data: {openModal, loadEsign, selectedRecord}\n\n        };\n      } else if (!this.props.Login.loadCustomSearchFilter) {\n        let loadEsign = this.props.Login.loadEsign;\n        let openModal = this.props.Login.openModal;\n        let openPortal = this.props.Login.openPortal;\n        let selectedRecord = this.props.Login.selectedRecord;\n        let showFilter = this.props.Login.showFilter; // let design = this.props.Login.design;\n        //let selectedFieldRecord =  this.props.Login.selectedFieldRecord;\n\n        if (this.props.Login.loadEsign) {\n          if (this.props.Login.operation === \"delete\") {\n            loadEsign = false;\n            openModal = false;\n            openPortal = false;\n            selectedRecord = {};\n            updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                openModal,\n                openPortal,\n                loadEsign,\n                selectedRecord,\n                selectedId: null,\n                showFilter,\n                design: [],\n                selectedFieldRecord: {},\n                showConfirmAlert: false\n              } // data: {openModal, loadEsign, selectedRecord}\n\n            };\n          } else if (this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\") {\n            loadEsign = false;\n            openModal = false;\n            selectedRecord['esignpassword'] = \"\";\n            selectedRecord['esigncomments'] = \"\";\n            selectedRecord['esignreason'] = \"\"; // openPortal = true;\n\n            updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                openModal,\n                openPortal,\n                loadEsign,\n                selectedRecord,\n                selectedId: null,\n                showFilter,\n                showConfirmAlert: false\n              } // data: {openModal, loadEsign, selectedRecord}\n\n            };\n          } else {\n            loadEsign = false;\n            selectedRecord['esignpassword'] = \"\";\n            selectedRecord['esigncomments'] = \"\";\n            selectedRecord['esignreason'] = \"\";\n            updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                openModal,\n                openPortal,\n                loadEsign,\n                selectedRecord,\n                selectedId: null,\n                showFilter,\n                design: [],\n                selectedFieldRecord: {},\n                showConfirmAlert: false\n              } // data: {openModal, loadEsign, selectedRecord}\n\n            };\n          }\n        } else {\n          openModal = false;\n          openPortal = false;\n          selectedRecord = {};\n          showFilter = false;\n          updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              openModal,\n              openPortal,\n              loadEsign,\n              selectedRecord,\n              selectedId: null,\n              showFilter,\n              design: [],\n              selectedFieldRecord: {},\n              showConfirmAlert: false\n            } // data: {openModal, loadEsign, selectedRecord}\n\n          };\n        }\n      } else {\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadCustomSearchFilter: false,\n            kendoSkip: 0,\n            kendoTake: 5,\n            kendoFilter: {\n              logic: \"and\",\n              filters: []\n            },\n            awesomeTree: undefined,\n            awesomeConfig: undefined\n          } // data: {openModal, loadEsign, selectedRecord}\n\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openModal = ncontrolcode => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          operation: \"copy\",\n          ncontrolcode,\n          selectedId: null,\n          openModal: true,\n          screenName: this.props.Login.inputParam.displayName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let dataState = undefined;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let selectedId = null;\n      inputData['registrationtemplate'] = {\n        nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\n        sregtemplatename: this.state.selectedRecord['sregtemplatename'],\n        nsampletypecode: this.props.Login.masterData.selectedTemplate.nsampletypecode,\n        ndefaulttemplatecode: this.props.Login.masterData.selectedTemplate.ndefaulttemplatecode\n      };\n      const inputParam = {\n        methodUrl: \"RegistrationTemplate\",\n        classUrl: 'dynamicpreregdesign',\n        searchRef: this.searchRef,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        selectedId,\n        dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName,\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteApproveTemplate(\"delete\", deleteId));\n    };\n\n    this.deleteApproveTemplate = (operation, ncontrolCode) => {\n      const masterData = this.props.Login.masterData;\n      const postParam = {\n        inputListName: \"RegistrationTemplate\",\n        selectedObject: \"selectedTemplate\",\n        primaryKeyField: \"nreactregtemplatecode\",\n        fetchUrl: \"dynamicpreregdesign/getRegistrationTemplateById\",\n        primaryKeyValue: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: this.state.breadCrumbData[0] ? this.state.breadCrumbData[0].item.value : -1\n        },\n        masterData: this.props.Login.masterData\n      };\n      const data = [];\n      const Layout = this.props.Login.masterData.selectedTemplate.jsondata;\n      Layout.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (this.state.breadCrumbData[0].item.value === -1) componentrow['label'] = componentrow.label + \"_child\";\n                data.push(componentrow.label);\n              });\n            } else {\n              if (this.state.breadCrumbData[0].item.value === -1) {\n                component['label'] = component.label + \"_child\";\n                data.push(component.label);\n              } else {\n                data.push(component.label);\n              }\n            }\n          });\n        });\n      });\n      const inputParam = {\n        methodUrl: \"RegistrationTemplate\",\n        classUrl: 'dynamicpreregdesign',\n        postParam,\n        searchRef: this.searchRef,\n        inputData: {\n          registrationtemplate: {\n            sregtemplatename: this.props.Login.masterData.selectedTemplate.sregtemplatename,\n            nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\n            jsonString: JSON.stringify(Layout)\n          },\n          userinfo: this.props.Login.userInfo,\n          dynamicFields: data,\n          nsampletypecode: this.state.breadCrumbData[0].item.value\n        },\n        operation\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation: \"delete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n\n      if (this.state.selectedSampleType) {\n        this.props.getRegistrationTemplate(this.state.selectedSampleType, this.state.selectedDefaultTemplate, this.props.Login.masterData, this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVALIABLE\"\n        }));\n      }\n    };\n\n    this.getPreviewTemplate = (masterData, userInfo, editId) => {\n      let data = [];\n      const withoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.selectedTemplate.jsondata;\n      Layout.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n              if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\" || componentrow.inputtype === \"frontendsearchfilter\") {\n                data.push(componentrow);\n              } else {\n                withoutCombocomponent.push(componentrow);\n              }\n            }) : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\" || component.inputtype === \"frontendsearchfilter\" ? data.push(component) : withoutCombocomponent.push(component);\n          });\n        });\n      });\n      const comboComponents = data;\n      let childColumnList = {};\n      data.map(columnList => {\n        const val = this.comboChild(data, columnList, childColumnList, true);\n        data = val.data;\n        childColumnList = val.childColumnList;\n      });\n      this.props.getPreviewTemplate(masterData, userInfo, editId, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent, false, true, new Map(), true);\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice, customButtonComponent) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            // if (!columnList.inputtype === 'backendsearchfilter' &&\n            //     !columnList.inputtype === 'frontendsearchfilter'\n            // ) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = this.comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            } // } else {\n            //         columnList.child.map(childData => {\n            //             const index = data.findIndex(x => x.label === childData.label)\n            //             if (index !== -1) {\n            //                 childList.push(data[index])\n            //                 if (slice) {\n            //                     data = [...data.slice(0, index), ...data.slice(index + 1)]\n            //                 }\n            //             }\n            //         })\n            //         childColumnList[columnList.label] = childList;\n            // }\n\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedRecord = this.state.selectedRecord || {}; //if (comboData) {\n\n      selectedRecord[comboName] = comboData;\n\n      if (comboData) {\n        comboData[\"item\"] = { ...comboData[\"item\"],\n          \"pkey\": control.valuemember,\n          \"nquerybuildertablecode\": control.nquerybuildertablecode,\n          \"source\": control.source\n        };\n\n        if (control.child && control.child.length > 0) {\n          const childComboList = getSameRecordFromTwoArrays(this.state.comboComponents, control.child, \"label\");\n          let childColumnList = {};\n          childComboList.map(columnList => {\n            const val = this.comboChild(this.state.comboComponents, columnList, childColumnList, false);\n            childColumnList = val.childColumnList;\n          });\n          const parentList = getSameRecordFromTwoArrays(this.state.withoutCombocomponent, control.child, \"label\");\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.state.withoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord,\n              loadCustomSearchFilter: false\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        let comboData = this.props.Login.comboData;\n        const withoutCombocomponent = this.state.withoutCombocomponent || [];\n        const inputParam = {\n          control,\n          comboComponents: this.state.comboComponents,\n          withoutCombocomponent,\n          selectedRecord,\n          comboData\n        };\n        const childParam = childComboClear(inputParam);\n        selectedRecord = childParam.selectedRecord;\n        comboData = childParam.comboData;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            comboData,\n            loadCustomSearchFilter: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChange = (event, radiotext) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'toggle') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedRecord[event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedRecord[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedRecord[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedRecord[event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedRecord[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedRecord[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedRecord[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = radiotext;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      }); // this.saveComponentProperties()\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlur = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord,\n        withoutCombocomponent\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n\n      if (this.props.Login.masterData.selectedTemplate.nsampletypecode === SampleType.CLINICALTYPE) {\n        const age = ageCalculate(dateValue);\n        const Age = withoutCombocomponent.filter(x => x.name === 'Age');\n        selectedRecord[Age[0].label] = age;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChangeMasterDyanmic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {}; //if (comboData) {\n\n      comboData[\"item\"] = { ...comboData[\"item\"],\n        \"pkey\": control.valuemember,\n        \"nquerybuildertablecode\": control.nquerybuildertablecode,\n        \"source\": control.source\n      };\n      selectedMaster[masterIndex][comboName] = comboData; // console.log(\"selected:\", selectedMaster, comboData, control, customName);\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\");\n\n        if (comboData) {\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValuesForAddMaster(inputParem, this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList, childComboList, childColumnList, this.props.Login.masterwithoutCombocomponent, [...childComboList, ...parentList], masterIndex);\n        } else {\n          let comboData = this.props.Login.masterdataList;\n          const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n          const inputParam = {\n            control,\n            comboComponents: this.props.Login.mastercomboComponents[masterIndex],\n            withoutCombocomponent: withoutCombocomponent[masterIndex],\n            selectedMaster: selectedMaster[masterIndex],\n            comboData: comboData[masterIndex]\n          };\n          const childParam = childComboClear(inputParam);\n          selectedMaster[masterIndex] = childParam.selectedRecord;\n          comboData[masterIndex] = childParam.comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster,\n              mastedataList: comboData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChangeMasterDynamic = (event, radiotext) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'toggle') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedMaster[masterIndex][event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedMaster[masterIndex][event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedMaster[masterIndex][event.target.name] = radiotext;\n      } else {\n        selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.handleDateChangeMasterDynamic = (dateValue, dateName) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputChangeMasterDynamic = (value, name) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericBlurMasterDynamic = (value, control) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (selectedMaster[masterIndex][control.label]) {\n        if (control.max) {\n          if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onDrop = (value, type, oldVlaue) => {\n      const design = this.state.design;\n      let columns = design[0].children;\n      let designData = this.props.Login.ReactInputFields;\n      value = JSON.parse(value.fields);\n      value = { ...value,\n        type: \"component\"\n      };\n      let designDataIndex = designData.findIndex(item => item.label === value.label);\n      let firstIndex = columns[0] ? columns[0].children.findIndex(item => item.label === value.label) : -1;\n      let secondIndex = columns[1] ? columns[1].children.findIndex(item => item.label === value.label) : -1;\n      if (designDataIndex >= 0) designData.splice(designDataIndex, 1);\n\n      if (firstIndex >= 0) {\n        if (type !== 1) {\n          columns[0].children.splice(firstIndex, 1); // columns[0].splice(to, 0, columns[0].splice(from, 1)[0]);\n        } else {\n          if (oldVlaue) {\n            oldVlaue = JSON.parse(oldVlaue);\n            let from = columns[0].children.findIndex(item => item.label === value.label);\n            let to = columns[0].children.findIndex(item => item.label === oldVlaue.label);\n            columns[0].children.splice(to, 0, columns[0].children.splice(from, 1)[0]);\n          }\n        }\n      } else if (type === 1) {\n        if (columns[0]) {\n          columns[0].children.push(value);\n        } else {\n          columns[0] = {\n            id: \"1\",\n            type: \"column\",\n            children: []\n          };\n          columns[0].children.push(value);\n        }\n      }\n\n      if (secondIndex >= 0) {\n        if (type !== 2) {\n          columns[1].splice(secondIndex, 1);\n        } else {\n          if (oldVlaue) {\n            oldVlaue = JSON.parse(oldVlaue);\n            let from = columns[1].children.findIndex(item => item.label === value.label);\n            let to = columns[1].children.findIndex(item => item.label === oldVlaue.label);\n            columns[1].children.splice(to, 0, columns[1].children.splice(from, 1)[0]);\n          }\n        }\n      } else if (type === 2) {\n        if (columns[1]) {\n          columns[1].children.push(value);\n        } else {\n          columns[1] = {\n            id: \"2\",\n            type: \"column\",\n            children: []\n          };\n          columns[1].children.push(value);\n        }\n      } // design.push(columns)\n\n\n      this.setState({\n        designData,\n        design\n      });\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.state = {\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      addTemplateId: -1,\n      editId: -1,\n      deleteId: -1,\n      approveID: -1,\n      previewId: -1,\n      copyID: -1,\n      selectedRecord: {},\n      sampleTypeOptions: [],\n      defaultTemplateOptions: [],\n      selectedSampleType: {},\n      selectedDefaultTemplate: {},\n      breadCrumbData: [],\n      design: [],\n      comboComponents: [],\n      withoutCombocomponent: [],\n      selectedMaster: []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.intl.formatMessage({\n        id: props.Login.masterStatus\n      }));\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    // console.log(\"this.state.selectedDefaultTemplate:\", this.state, this.props.Login);\n    const Layout = this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate.jsondata;\n    const filterParam = {\n      inputListName: \"RegistrationTemplate\",\n      selectedObject: \"selectedTemplate\",\n      primaryKeyField: \"nreactregtemplatecode\",\n      fetchUrl: \"dynamicpreregdesign/getDynamicPreRegDesign\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.state.breadCrumbData[0] ? this.state.breadCrumbData[0].item.value : -1,\n        ndefaulttemplatecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\n      },\n      masterData: this.props.Login.masterData,\n      unchangeList: [\"realSampleType\", \"SampleTypes\", \"DefaultTemplateList\"],\n      searchFieldList: [\"sregtemplatename\", \"stransdisplaystatus\"]\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }\n    }, this.state.breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.state.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      filterColumnData: this.props.filterColumnData,\n      screenName: \"Dynamic Pre-Reg Design\",\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.RegistrationTemplate || [],\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      getMasterDetail: template => this.props.selectRegistrationTemplate(template, this.props.Login.masterData, this.props.Login.userInfo),\n      selectedMaster: this.props.Login.masterData.selectedTemplate,\n      primaryKeyField: \"nreactregtemplatecode\",\n      mainField: \"sregtemplatename\",\n      firstField: \"stransdisplaystatus\" // secondField=\"stransdisplaystatus\"\n      ,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: this.state.addTemplateId,\n      filterParam: filterParam,\n      hidePaging: true,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: () => this.props.getReactInputFields(this.props.Login.userInfo, 'create', {\n        design: this.state.selectedDefaultTemplate && this.state.selectedDefaultTemplate.item && this.state.selectedDefaultTemplate.item.jsondata\n      }, this.state.addTemplateId),\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_SAMPLETYPEFILTER\": /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n          name: \"nsampletypecode\",\n          formLabel: this.props.intl.formatMessage({\n            id: \"IDS_SAMPLETYPE\"\n          }),\n          isSearchable: false,\n          placeholder: \"Please Select...\",\n          options: this.state.sampleTypeOptions,\n          value: this.state.selectedSampleType ? this.state.selectedSampleType : \"\",\n          onChange: value => this.filterComboChange(value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 53\n          }\n        })), /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n          name: \"ndefaulttemplatecode\",\n          formLabel: this.props.intl.formatMessage({\n            id: \"IDS_TEMPLATETYPE\"\n          }),\n          isSearchable: false,\n          placeholder: this.props.intl.formatMessage({\n            id: \"IDS_TEMPLATETYPE\"\n          }),\n          options: this.state.defaultTemplateOptions,\n          value: this.state.selectedDefaultTemplate ? this.state.selectedDefaultTemplate : \"\",\n          onChange: value => this.templateComboChange(value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 53\n          }\n        })))\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 25\n      }\n    }, this.props.Login.masterData.selectedTemplate ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedTemplate.sregtemplatename), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn-outlined ${this.props.Login.masterData.selectedTemplate.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-secondary\"} btn-sm mr-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.selectedTemplate.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editInstrument\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_PREVIEW\"\n      }) // data-for=\"tooltip_list_wrap\"\n      // hidden={this.state.userRoleControlRights.indexOf(this.state.previewId) === -1}\n      ,\n      className: \"btn btn-circle outline-grey mr-2\",\n      onClick: e => this.getPreviewTemplate(this.props.Login.masterData, this.props.Login.userInfo, this.state.previewId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editInstrument\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_VIEWOREDIT\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(this.state.editId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      onClick: e => this.props.getEditRegTemplate(this.props.Login.masterData, this.props.Login.userInfo, this.state.editId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"delete\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(this.state.deleteId) === -1,\n      onClick: () => this.ConfirmDelete(this.state.approveID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"approve\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(this.state.approveID) === -1,\n      onClick: () => this.deleteApproveTemplate('approve', this.state.approveID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"copy\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      // hidden={this.state.userRoleControlRights.indexOf(this.state.copyID) === -1}\n      ,\n      className: \"btn btn-circle outline-grey mr-2\",\n      onClick: e => this.openModal(this.state.copyID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 61\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 41\n      }\n    }, Layout ? Layout.map(item => /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 57\n      }\n    }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n      md: 12 / item.children.length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 69\n      }\n    }, column.children.map(component => {\n      return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 89\n        }\n      }, component.children.map(componentrow => //<Col md={12 / componentrow.length}>\n      componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(Col, {\n        md: componentrow && componentrow.length || 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 97\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 101\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 105\n        }\n      }, componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 105\n        }\n      }, \"-\"))))) : component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 89\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 93\n        }\n      }, component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 93\n        }\n      }, \" \", \"-\"));\n    }))) : \"\")) : \"\"))) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      size: this.props.Login.operation === 'copy' || \"approve\" ? 'lg' : \"xl\",\n      onSaveClick: this.props.Login.addMaster ? this.onSaveMasterRecord : this.props.Login.operation === 'copy' ? this.onSaveClick : this.props.Login.operation === \"preview\" ? this.onExecuteClick : this.closeModal,\n      hideSave: this.props.Login.addMaster ? true : this.props.Login.operation === 'copy' || this.props.Login.operation === \"viewdesign\" ? false : true,\n      loginoperation: this.props.Login.operation === 'copy' ? false : true,\n      operation: this.props.Login.addMaster ? this.props.Login.masterOperation[this.props.Login.masterIndex] : this.props.Login.operation,\n      showValidate: this.props.Login.addMaster ? false : this.props.Login.loadCustomSearchFilter ? false : this.props.Login.operation === \"preview\" ? true : false,\n      screenName: this.props.Login.operation === 'copy' ? \"IDS_TEMPLATE\" : \"IDS_PREVIEW\",\n      closeModal: this.closeModal,\n      show: this.props.Login.openModal,\n      onExecuteClick: this.onExecuteClick,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.props.Login.addMaster ? this.state.selectedMaster[this.props.Login.masterIndex] : this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.addMaster ? this.props.Login.masterextractedColumnList[this.props.Login.masterIndex].filter(x => x.mandatory === true) : this.props.Login.operation === 'copy' ? [{\n        \"idsName\": \"IDS_TEMPLATENAME\",\n        \"dataField\": \"sregtemplatename\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }] : this.props.Login.operation === \"preview\" ? this.mandatoryValidation() : [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: event => this.onInputOnChange(event),\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'copy' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        name: \"sregtemplatename\",\n        type: \"text\",\n        onChange: event => this.setState({\n          selectedRecord: { ...this.state.selectedRecord,\n            sregtemplatename: event.target.value\n          }\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        value: this.state.selectedRecord.sregtemplatename ? this.state.selectedRecord.sregtemplatename : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: \"30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 41\n        }\n      }))) : this.props.Login.isDynamicViewSlideOut ? /*#__PURE__*/React.createElement(ExternalOrderSlideout, {\n        dynamicExternalSample: this.props.Login.dynamicExternalSample,\n        dynamicExternalTestChild: this.props.Login.dynamicExternalTestChild,\n        dynamicGridSelectedId: this.props.Login.dynamicGridSelectedId || null,\n        selectedRecord: this.state.selectedRecord,\n        selectedDynamicViewControl: this.props.Login.selectedDynamicViewControl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 37\n        }\n      }) : this.props.Login.loadCustomSearchFilter ? this.props.Login.seletedFilterComponent && this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ? /*#__PURE__*/React.createElement(KendoDatatoolFilter, {\n        filter: this.props.Login.kendoFilter,\n        handleFilterChange: this.handleFilterChange,\n        filterData: this.props.Login.lstPatient || [],\n        skip: this.props.Login.kendoSkip,\n        take: this.props.Login.kendoTake,\n        handlePageChange: this.handlePageChange,\n        fields: this.props.Login.fields || [],\n        gridColumns: this.props.Login.gridColumns || [],\n        onRowClick: this.handleKendoRowClick,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 45\n        }\n      }) : /*#__PURE__*/React.createElement(PerfectScrollbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pb-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 63\n        }\n      }, /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n        fields: this.props.Login.fields || {},\n        onChange: this.onChangeAwesomeQueryBuilder,\n        tree: this.props.Login.awesomeTree //   config={this.props.Login.awesomeConfig}\n        ,\n        skip: this.props.Login.kendoSkip,\n        take: this.props.Login.kendoTake,\n        handlePageChange: this.handlePageChange,\n        gridColumns: this.props.Login.gridColumns || [],\n        filterData: this.props.Login.lstPatient,\n        onRowClick: this.handleKendoRowClick,\n        handleExecuteClick: this.handleExecuteClick,\n        userInfo: this.props.Login.userInfo // static={true}\n        // controlMap={this.state.controlMap}\n        // dataState={this.state.dataState}\n        // dataStateChange={this.dataStateChange}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 85\n        }\n      }))) : this.props.Login.addMaster ? /*#__PURE__*/React.createElement(AddMasterRecords, {\n        selectedControl: this.props.Login.selectedControl[this.props.Login.masterIndex],\n        fieldList: this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex],\n        extractedColumnList: this.props.Login.masterextractedColumnList[this.props.Login.masterIndex] // primaryKeyField={this.props.Login.masterprimaryKeyField}\n        ,\n        selectedRecord: this.state.selectedMaster[this.props.Login.masterIndex] || {},\n        onInputOnChange: this.onInputOnChangeMaster,\n        onComboChange: this.onComboChangeMaster,\n        handleDateChange: this.handleDateChangeMaster,\n        dataList: this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex],\n        onNumericInputOnChange: this.onNumericInputOnChangeMaster,\n        masterDesign: this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex],\n        mastertimeZoneList: this.props.Login.mastertimeZoneList,\n        masterdefaultTimeZone: this.props.Login.masterdefaultTimeZone,\n        onComboChangeMasterDyanmic: this.onComboChangeMasterDyanmic,\n        handleDateChangeMasterDynamic: this.handleDateChangeMasterDynamic,\n        onInputOnChangeMasterDynamic: this.onInputOnChangeMasterDynamic,\n        onNumericInputChangeMasterDynamic: this.onNumericInputChangeMasterDynamic,\n        onNumericBlurMasterDynamic: this.onNumericBlurMasterDynamic,\n        userInfo: this.props.Login.userInfo,\n        Login: this.props.Login,\n        addMasterRecord: this.addMasterRecord,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        masterIndex: this.props.Login.masterIndex,\n        custombuttonclick: this.custombuttonclick,\n        editMasterRecord: this.editMasterRecord,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 45\n        }\n      }) : /*#__PURE__*/React.createElement(DynamicSlideout, {\n        selectedRecord: this.props.Login.selectedRecord,\n        templateData: this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate.jsondata //handleChange={this.handleChange}\n        ,\n        handleDateChange: this.handleDateChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        comboData: this.props.Login.comboData,\n        onComboChange: this.onComboChange,\n        onDropFile: this.onDropFile,\n        deleteAttachment: this.deleteAttachment,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        Login: this.props.Login,\n        addMasterRecord: this.addMasterRecord,\n        custombuttonclick: this.custombuttonclick,\n        onNumericBlur: this.onNumericBlur,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        onClickView: this.onClickView,\n        sampleType: this.state.selectedSampleType,\n        comboComponents: this.state.comboComponents,\n        editMasterRecord: this.editMasterRecord,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 45\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 21\n      }\n    }) : \"\", this.props.Login.openPortal ? /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(PreRegDesignPopUp, {\n      closeModal: this.closeModal,\n      nsampletypecode: this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item.value : -1,\n      sampleType: this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item : undefined,\n      defaultTemplate: this.state.breadCrumbData.length ? this.state.breadCrumbData[1].item : undefined,\n      ncategorybasedflowrequired: this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item.item.ncategorybasedflowrequired : 4,\n      searchRef: this.searchRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 25\n      }\n    })) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      userRoleControlRights,\n      controlMap,\n      addTemplateId,\n      sampleTypeOptions,\n      breadCrumbData,\n      selectedSampleType,\n      editId,\n      deleteId,\n      approveID,\n      copyID,\n      selectedRecord,\n      comboComponents,\n      previewId,\n      withoutCombocomponent,\n      selectedMaster,\n      selectedDefaultTemplate,\n      defaultTemplateOptions,\n      awesomeConfig,\n      awesomeTree,\n      kendoFilter,\n      kendoSkip,\n      kendoTake\n    } = this.state;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      updateState = true;\n      addTemplateId = controlMap.has(\"AddTemplate\") && controlMap.get(\"AddTemplate\").ncontrolcode;\n      editId = controlMap.has(\"EditTemplate\") && controlMap.get(\"EditTemplate\").ncontrolcode;\n      deleteId = controlMap.has(\"DeleteTemplate\") && controlMap.get(\"DeleteTemplate\").ncontrolcode;\n      approveID = controlMap.has(\"ApproveTemplate\") && controlMap.get(\"ApproveTemplate\").ncontrolcode;\n      copyID = controlMap.has(\"CopyTemplate\") && controlMap.get(\"CopyTemplate\").ncontrolcode;\n      previewId = controlMap.has(\"PreviewTemplate\") && controlMap.get(\"PreviewTemplate\").ncontrolcode;\n    }\n\n    if (this.props.Login.masterData.SampleTypes !== previousProps.Login.masterData.SampleTypes) {\n      sampleTypeOptions = constructOptionList(this.props.Login.masterData.SampleTypes || [], 'nsampletypecode', 'ssampletypename', 'nsorter', \"ascending\").get(\"OptionList\");\n      selectedSampleType = sampleTypeOptions.length > 0 ? sampleTypeOptions[0] : {};\n      defaultTemplateOptions = constructOptionList(this.props.Login.masterData.DefaultTemplateList || [], 'ndefaulttemplatecode', 'sdefaulttemplatename', 'ndefaulttemplatecode', \"ascending\").get(\"OptionList\"); // selectedDefaultTemplate = defaultTemplateOptions.length > 0 ? defaultTemplateOptions[0] : {};\n\n      selectedDefaultTemplate = this.props.Login.masterData.selectedDefaultTemplate ? {\n        \"label\": this.props.Login.masterData.selectedDefaultTemplate.sdefaulttemplatename,\n        \"value\": this.props.Login.masterData.selectedDefaultTemplate.ndefaulttemplatecode,\n        \"item\": this.props.Login.masterData.selectedDefaultTemplate\n      } : defaultTemplateOptions.length > 0 ? defaultTemplateOptions[0] : {};\n      breadCrumbData = sampleTypeOptions.length > 0 ? [{\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": sampleTypeOptions[0].label,\n        \"item\": sampleTypeOptions[0]\n      }, {\n        \"label\": \"IDS_TEMPLATETYPE\",\n        \"value\": selectedDefaultTemplate.label,\n        \"item\": selectedDefaultTemplate\n      }] : []; // breadCrumbData = sampleTypeOptions.length > 0 ? [\n      //     {\n      //         \"label\": \"IDS_SAMPLETYPE\",\n      //         \"value\": sampleTypeOptions[0].label,\n      //         \"item\": sampleTypeOptions[0]\n      //     }\n      // ] : [];\n\n      updateState = true;\n    }\n\n    if (this.props.Login.masterData.selectedSampleType !== previousProps.Login.masterData.selectedSampleType) {\n      defaultTemplateOptions = constructOptionList(this.props.Login.masterData.DefaultTemplateList || [], 'ndefaulttemplatecode', 'sdefaulttemplatename', 'ndefaulttemplatecode', \"ascending\").get(\"OptionList\"); // selectedDefaultTemplate = defaultTemplateOptions.length > 0 ? defaultTemplateOptions[0] : {};\n\n      selectedDefaultTemplate = this.props.Login.masterData.selectedDefaultTemplate ? {\n        \"label\": this.props.Login.masterData.selectedDefaultTemplate.sdefaulttemplatename,\n        \"value\": this.props.Login.masterData.selectedDefaultTemplate.ndefaulttemplatecode,\n        \"item\": this.props.Login.masterData.selectedDefaultTemplate\n      } : defaultTemplateOptions.length > 0 ? defaultTemplateOptions[0] : {};\n      selectedSampleType = this.props.Login.masterData.selectedSampleType && {\n        \"label\": this.props.Login.masterData.selectedSampleType.ssampletypename,\n        \"value\": this.props.Login.masterData.selectedSampleType.nsampletypecode,\n        \"item\": this.props.Login.masterData.selectedSampleType\n      }; //{\n      //     \"label\": this.state.selectedSampleType.label,\n      //     \"value\": this.state.selectedSampleType.value,\n      //     \"item\": this.state.selectedSampleType\n      // }\n      // breadCrumbData = sampleTypeOptions.length > 0 ? [\n      //     {\n      //         \"label\": \"IDS_SAMPLETYPE\",\n      //         \"value\": sampleTypeOptions[0].label,\n      //         \"item\": sampleTypeOptions[0]\n      //     }\n      // ] : [];\n\n      updateState = true;\n    }\n\n    if (this.props.Login.realSampleType !== previousProps.Login.realSampleType) {\n      updateState = true;\n      breadCrumbData = this.props.Login.realSampleType || this.state.breadCrumbData;\n    }\n\n    if (this.props.Login.realDefaultTemplate !== previousProps.Login.realDefaultTemplate) {\n      updateState = true;\n      breadCrumbData = this.props.Login.realDefaultTemplate || this.state.breadCrumbData;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.selectedMaster !== previousProps.Login.selectedMaster) {\n      updateState = true;\n      selectedMaster = this.props.Login.selectedMaster;\n    }\n\n    if (this.props.Login.comboComponents !== previousProps.Login.comboComponents) {\n      updateState = true;\n      comboComponents = this.props.Login.comboComponents;\n    }\n\n    if (this.props.Login.withoutCombocomponent !== previousProps.Login.withoutCombocomponent) {\n      updateState = true;\n      withoutCombocomponent = this.props.Login.withoutCombocomponent;\n    } // if (this.props.Login.kendoTake !== previousProps.Login.kendoTake) {\n    //     updateState = true;\n    //     kendoTake = this.props.Login.kendoTake\n    // }\n\n\n    if (updateState) {\n      // console.log(\"selectedSampleType:\", this.state.selectedSampleType,this.props.Login.masterData.selectedSampleType);\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        addTemplateId,\n        sampleTypeOptions,\n        breadCrumbData,\n        selectedSampleType,\n        defaultTemplateOptions,\n        selectedDefaultTemplate,\n        editId,\n        deleteId,\n        approveID,\n        copyID,\n        selectedRecord,\n        comboComponents,\n        previewId,\n        withoutCombocomponent,\n        selectedMaster\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  crudMaster,\n  getReactInputFields,\n  selectRegistrationTemplate,\n  filterColumnData,\n  getRegistrationTemplate,\n  getEditRegTemplate,\n  getPreviewTemplate,\n  getChildValues,\n  getDynamicFilter,\n  getDynamicFilterExecuteData,\n  validateEsignCredential,\n  validatePreview,\n  addMasterRecord,\n  getAddMasterCombo,\n  getDynamicMasterTempalte,\n  getChildComboMaster,\n  getChildValuesForAddMaster,\n  viewExternalportalDetail,\n  getDefaultTemplate,\n  getEditMaster\n})(injectIntl(DynamicPreRegDesign));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dynamicpreregdesign/DynamicPreRegDesign.jsx"],"names":["React","connect","injectIntl","updateStore","getReactInputFields","selectRegistrationTemplate","filterColumnData","getRegistrationTemplate","getEditRegTemplate","crudMaster","getPreviewTemplate","getChildValues","getDynamicFilter","getDynamicFilterExecuteData","rearrangeDateFormatforKendoDataTool","validateEsignCredential","getDefaultTemplate","validatePreview","addMasterRecord","getAddMasterCombo","getDynamicMasterTempalte","getChildComboMaster","getChildValuesForAddMaster","viewExternalportalDetail","getEditMaster","DEFAULT_RETURN","Row","Col","FormGroup","FormLabel","Card","Nav","ListMaster","ContentPanel","MediaLabel","ReadOnlyText","PerfectScrollbar","ageCalculate","childComboClear","constructOptionList","convertDateTimetoStringDBFormat","deleteAttachmentDropZone","extractFieldHeader","formatDate","formatInputDate","getControlMap","getSameRecordFromTwoArrays","onDropAttachFileList","showEsign","validateEmail","validatePhoneNumber","toast","PreRegDesignPopUp","FormSelectSearch","BreadcrumbComponent","Affix","PortalModal","faCopy","faEye","faPencilAlt","faThumbsUp","faTrashAlt","FontAwesomeIcon","ConfirmMessage","DynamicSlideout","SlideOutModal","Esign","designProperties","transactionStatus","SampleType","designComponents","formCode","FormInput","KendoDatatoolFilter","FilterQueryBuilder","Utils","QbUtils","getFieldSpecification","AddMasterRecords","getFieldSpecification1","getFieldSpecification3","ExternalOrderSlideout","mapStateToProps","state","Login","DynamicPreRegDesign","Component","constructor","props","custombuttonclick","event","component","preventDefault","stopPropagation","inputparam","userinfo","userInfo","selectedRecord","onChangeAwesomeQueryBuilder","immutableTree","config","filterquery","sqlFormat","updateInfo","typeName","data","awesomeTree","awesomeConfig","handlePageChange","kendoSkip","skip","kendoTake","take","handleFilterChange","kendoFilter","filter","handleExecuteClick","undefined","includes","seletedFilterComponent","warn","intl","formatMessage","id","handleKendoRowClick","item1","dataItem","index","masterIndex","selectedMaster","map","item","columnname","ndesigncomponentcode","COMBOBOX","label","sdisplaymember","value","svaluemember","DATEPICKER","loadCustomSearchFilter","newdata","jsondata","onComboChange","onClickView","selectedControl","onComboChangeMaster","comboData","fieldName","table","nformcode","tableDataField","foreignDataField","childIndex","masterfieldList","masterdataList","setState","handleDateChangeMaster","dateName","dateValue","age","onNumericInputOnChangeMaster","name","onInputOnChangeMaster","target","type","checked","nneedcurrentaddress","sflatnotemp","sflatno","shousenotemp","shouseno","spostalcodetemp","spostalcode","sstreettemp","sstreet","scitynametemp","scityname","sdistrictnametemp","sdistrictname","sregionnametemp","sregionname","onSaveMasterRecord","saveType","formRef","inputData","masterDesign","methodUrl","toLowerCase","nmastersitecode","isEmailCheck","masterOperation","masterEditObject","ndynamicmastercode","screendesign","masterdateconstraints","masterdatefields","mastercombinationunique","ndesigntemplatemappingcode","jsonuidata","dateList","defaulttimezone","slideoutdesign","row","children","column","hasOwnProperty","componentrow","inputtype","pkey","valuemember","nquerybuildertablecode","source","mandatory","loadcurrentdate","Date","timezone","push","JSON","stringify","PATIENTMASTER","masterextractedColumnList","dataField","isJsonField","jsonObjectName","controlType","dateField","controlName","NO","fieldData","inputParam","withoutCombocomponent","comboComponents","selectedRecordName","loadSubSample","comboName","classUrl","displayName","operation","mastercomboComponents","masterwithoutCombocomponent","masterComboColumnFiled","masterData","mandatoryValidation","mandatoryFields","selectedTemplate","recordbasedshowhide","parentLabel","recordbasedhide","control","fieldList","extractedColumnList","get","Object","values","primaryKeyField","keys","length","addMaster","masterprimaryKeyField","screenName","displayname","slanguagetypecode","editMasterRecord","editObject","onExecuteClick","sampleRegistration","defaultTimeZone","dateconstraints","combinationunique","getJsondata","Registration","DateList","templatedata","componentRow","unique","LABEL","VALUE","dateConstraintArraySQL","openFilter","showFilter","filterComboChange","templateComboChange","selectedDefaultTemplate","closeFilter","onFilterSubmit","reloadData","removeIndex","data1","splice","closeModal","isDynamicViewSlideOut","selectedDynamicViewControl","loadEsign","openModal","openPortal","selectedId","design","selectedFieldRecord","showConfirmAlert","logic","filters","ncontrolcode","onSaveClick","dataState","nreactregtemplatecode","sregtemplatename","nsampletypecode","ndefaulttemplatecode","searchRef","esignNeeded","userRoleControlRights","screenData","ConfirmDelete","deleteId","confirmMessage","confirm","deleteApproveTemplate","ncontrolCode","postParam","inputListName","selectedObject","fetchUrl","primaryKeyValue","fecthInputObject","breadCrumbData","Layout","registrationtemplate","jsonString","dynamicFields","current","selectedSampleType","editId","childColumnList","columnList","val","comboChild","Map","slice","customButtonComponent","retunObj","childList","child","childData","findIndex","x","y","customName","childComboList","parentList","inputParem","primarykeyField","childParam","onInputOnChange","radiotext","YES","test","indexOf","indexcomma","validateEsign","sreason","nreasoncode","spredefinedreason","password","onNumericInputChange","onNumericBlur","max","parseFloat","precision","parseInt","min","handleDateChange","CLINICALTYPE","Age","onComboChangeMasterDyanmic","mastedataList","onInputOnChangeMasterDynamic","handleDateChangeMasterDynamic","onNumericInputChangeMasterDynamic","onNumericBlurMasterDynamic","onDrop","oldVlaue","columns","designData","ReactInputFields","parse","fields","designDataIndex","firstIndex","secondIndex","from","to","onDropFile","attachedFiles","maxSize","actionType","deleteAttachment","file","createRef","controlMap","addTemplateId","approveID","previewId","copyID","sampleTypeOptions","defaultTemplateOptions","getDerivedStateFromProps","masterStatus","error","render","filterParam","unchangeList","searchFieldList","searchedData","RegistrationTemplate","template","ntransactionstatus","APPROVED","stransdisplaystatus","e","dynamicExternalSample","dynamicExternalTestChild","dynamicGridSelectedId","lstPatient","gridColumns","mastertimeZoneList","masterdefaultTimeZone","timeZoneList","ncategorybasedflowrequired","componentDidUpdate","previousProps","updateState","has","SampleTypes","DefaultTemplateList","sdefaulttemplatename","ssampletypename","realSampleType","realDefaultTemplate","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport {\r\n    updateStore, getReactInputFields, selectRegistrationTemplate, filterColumnData,\r\n    getRegistrationTemplate, getEditRegTemplate, crudMaster,\r\n    getPreviewTemplate, getChildValues, getDynamicFilter, getDynamicFilterExecuteData,\r\n    rearrangeDateFormatforKendoDataTool, validateEsignCredential, getDefaultTemplate,\r\n    validatePreview, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail, getEditMaster\r\n} from '../../actions/index'\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { Row, Col, FormGroup, FormLabel, Card, Nav } from 'react-bootstrap';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { ContentPanel, MediaLabel, ReadOnlyText } from '../../components/App.styles';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n    ageCalculate,\r\n    childComboClear,\r\n    constructOptionList, convertDateTimetoStringDBFormat, deleteAttachmentDropZone,\r\n    extractFieldHeader,\r\n    formatDate,\r\n    formatInputDate,\r\n    getControlMap, getSameRecordFromTwoArrays, onDropAttachFileList,\r\n    showEsign, validateEmail, validatePhoneNumber\r\n} from '../../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport PreRegDesignPopUp from './PreRegDesignPopUp';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\nimport PortalModal from '../../PortalModal';\r\nimport { faCopy, faEye, faPencilAlt, faThumbsUp, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport DynamicSlideout from './DynamicSlideout.jsx'\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport { designProperties, transactionStatus, SampleType, designComponents, formCode } from '../../components/Enumeration';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter';\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport {\r\n    Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\r\nimport AddMasterRecords from './AddMasterRecords'\r\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\r\nimport ExternalOrderSlideout from './ExternalOrderSlideout';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass DynamicPreRegDesign extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.state = {\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            addTemplateId: -1,\r\n            editId: -1, deleteId: -1, approveID: -1, previewId: -1, copyID: -1,\r\n            selectedRecord: {},\r\n            sampleTypeOptions: [],\r\n            defaultTemplateOptions: [],\r\n            selectedSampleType: {},\r\n            selectedDefaultTemplate: {},\r\n            breadCrumbData: [],\r\n            design: [],\r\n            comboComponents: [],\r\n            withoutCombocomponent: [],\r\n            selectedMaster: []\r\n        };\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.intl.formatMessage({ id: props.Login.masterStatus }));\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    custombuttonclick = (event, component) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const inputparam = {\r\n            component, userinfo: this.props.Login.userInfo,\r\n            selectedRecord: this.state.selectedRecord\r\n        }\r\n        this.props.getDynamicFilter(inputparam)\r\n    }\r\n\r\n    onChangeAwesomeQueryBuilder = (immutableTree, config) => {\r\n        //  let selectedRecord = this.state.selectedRecord || {};\r\n        const filterquery = QbUtils.sqlFormat(immutableTree, config);\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                awesomeTree: immutableTree, awesomeConfig: config, filterquery\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\r\n\r\n    };\r\n\r\n    handlePageChange = (event) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoSkip: event.skip, kendoTake: event.take\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    handleFilterChange = (event) => {\r\n        // event.preventDefault();\r\n        //event.stopPropagation();\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoFilter: event.filter\r\n                // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        // this.setState({ kendoFilter: event.filter });\r\n    };\r\n    // removeInvalidDate = (filterquery) => {\r\n\r\n    //     if (filterquery.inclues(\"Invalid Date\")) {\r\n\r\n    //         let startIndex = filterquery.indexOf(\"Invalid Date\");\r\n    //         let endIndex = startIndex + 12;\r\n    //         const str = filterquery.subString(0, startIndex)\r\n    //         if (startIndex > 3) {\r\n    //             if (str.subString(startIndex - 4, startIndex) === 'AND') {\r\n\r\n    //             } else if (str.subString(startIndex - 3, startIndex) === 'OR') {\r\n\r\n    //             }\r\n    //             else if (str.subString(startIndex - 4, startIndex) === 'NOT') {\r\n\r\n    //             }\r\n\r\n    //         }\r\n\r\n\r\n    //     }\r\n\r\n    // }\r\n\r\n\r\n    handleExecuteClick = (event) => {\r\n        //const selectedRecord = this.state.selectedRecord\r\n        const filterquery = this.props.Login.filterquery\r\n        if (filterquery !== \"\" && filterquery !== undefined && !filterquery.includes('Invalid date')) {\r\n\r\n            const inputparam = {\r\n                component: this.props.Login.seletedFilterComponent,\r\n                userinfo: this.props.Login.userInfo,\r\n                filterquery: filterquery,\r\n                // selectedRecord:this.state.selectedRecord\r\n\r\n            }\r\n            this.props.getDynamicFilterExecuteData(inputparam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    // handleKendoRowClick = (event) => {\r\n    //     let selecteddata = event.dataItem;\r\n    //     const component = this.props.Login.seletedFilterComponent\r\n    //     if (component.hasOwnProperty(\"child\")) {\r\n    //         const selectedRecord = this.state.selectedRecord;\r\n    //         component.child.map(y => {\r\n    //             // component.filterfields.filter(x=>x.)\r\n    //             const withoutCombocomponent = this.state.withoutCombocomponent;\r\n    //             const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n    //             if (readonlyfields !== -1) {\r\n\r\n    //                 if (withoutCombocomponent[readonlyfields]['inputtype'] === \"date\") {\r\n    //                     selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                         rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]]) : \"\"\r\n    //                     selectedRecord[y.label + 'value'] = selectedRecord[y.label]\r\n\r\n    //                     if (withoutCombocomponent[readonlyfields].child) {\r\n    //                         const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n    //                         withoutCombocomponent[readonlyfields].child.map(k => {\r\n    //                             if (k.label === Age[0].label) {\r\n    //                                 const age = ageCalculate(selectedRecord[y.label]);\r\n\r\n    //                                 selectedRecord[Age[0].label] = age\r\n    //                             }\r\n    //                         })\r\n\r\n\r\n    //                     }\r\n\r\n\r\n\r\n    //                 } else {\r\n    //                     if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] ?\r\n    //                                 selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                     } else {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                     }\r\n    //                 }\r\n\r\n\r\n    //             } else {\r\n    //                 const comboComponents = this.state.comboComponents;\r\n    //                 const readonlyfields = comboComponents.findIndex(k => k.label === y.label);\r\n    //                 if (readonlyfields !== -1) {\r\n    //                     if (this.props.Login.comboData[y.label]) {\r\n    //                         const val = this.props.Login.comboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                         if (val.length > 0)\r\n    //                             selectedRecord[y.label] = val[0]\r\n    //                         //selectedRecord[y.label]=this.props.Login.comboData[y.label].filter(item=>item.value===selecteddata[y.foriegntablePK])\r\n    //                     }\r\n\r\n    //                 }\r\n\r\n    //             }\r\n\r\n    //         })\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: {\r\n    //                 selectedRecord,\r\n    //                 loadCustomSearchFilter: false,\r\n    //                 // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n    //             }\r\n    //         }\r\n    //         this.props.updateStore(updateInfo)\r\n    //         // }\r\n    //     }\r\n    // };\r\n\r\n\r\n\r\n    handleKendoRowClick = (event) => {\r\n        let item1 = event.dataItem;\r\n        const component = this.props.Login.seletedFilterComponent;\r\n\r\n        if (component[\"childFields\"]) {\r\n            const index = this.props.Login.masterIndex;\r\n            let selectedRecord = this.state.selectedMaster || {};\r\n\r\n            component[\"childFields\"].map(item => {\r\n                let data = item1[item.columnname];\r\n                if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                    //combocontrol\r\n                    data = { label: item1[item.sdisplaymember], value: item1[item.svaluemember] };\r\n                }\r\n                else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n                    //Date picker control\r\n                    data = rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, data);\r\n                }\r\n                selectedRecord[index][item.columnname] = data;\r\n            })\r\n\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedMaster: selectedRecord, loadCustomSearchFilter: false, }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            const newdata = {\r\n                label: item1[component['displaymember']],\r\n                value: item1[component['valuemember']], item: { jsondata: { ...item1, jsondata: { ...item1 } } }\r\n            };\r\n\r\n            this.onComboChange(newdata, component, component['label']);\r\n        }\r\n\r\n    };\r\n\r\n    render() {\r\n       // console.log(\"this.state.selectedDefaultTemplate:\", this.state, this.props.Login);\r\n        const Layout = this.props.Login.masterData.selectedTemplate &&\r\n            this.props.Login.masterData.selectedTemplate.jsondata;\r\n\r\n        const filterParam = {\r\n            inputListName: \"RegistrationTemplate\",\r\n            selectedObject: \"selectedTemplate\",\r\n            primaryKeyField: \"nreactregtemplatecode\",\r\n            fetchUrl: \"dynamicpreregdesign/getDynamicPreRegDesign\",\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo, \r\n                nsampletypecode: this.state.breadCrumbData[0] ? this.state.breadCrumbData[0].item.value : -1,\r\n                ndefaulttemplatecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            unchangeList: [\"realSampleType\", \"SampleTypes\", \"DefaultTemplateList\"],\r\n            searchFieldList: [\"sregtemplatename\", \"stransdisplaystatus\"]\r\n        };\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {this.state.breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={this.state.breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                screenName={\"Dynamic Pre-Reg Design\"}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.RegistrationTemplate || []}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                getMasterDetail={(template) => this.props.selectRegistrationTemplate(template, this.props.Login.masterData, this.props.Login.userInfo)}\r\n                                selectedMaster={this.props.Login.masterData.selectedTemplate}\r\n                                primaryKeyField=\"nreactregtemplatecode\"\r\n                                mainField=\"sregtemplatename\"\r\n                                firstField=\"stransdisplaystatus\"\r\n                                // secondField=\"stransdisplaystatus\"\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={this.state.addTemplateId}\r\n                                filterParam={filterParam}\r\n                                hidePaging={true}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                openModal={() => this.props.getReactInputFields(this.props.Login.userInfo, 'create', { design: this.state.selectedDefaultTemplate && this.state.selectedDefaultTemplate.item && this.state.selectedDefaultTemplate.item.jsondata }, this.state.addTemplateId)}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_SAMPLETYPEFILTER\":\r\n                                            <Row>\r\n                                                <Col md={12}>\r\n                                                    <FormSelectSearch\r\n                                                        name={\"nsampletypecode\"}\r\n                                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPE\" })}\r\n                                                        isSearchable={false}\r\n                                                        placeholder=\"Please Select...\"\r\n                                                        options={this.state.sampleTypeOptions}\r\n                                                        value={this.state.selectedSampleType ? this.state.selectedSampleType : \"\"}\r\n                                                        onChange={value => this.filterComboChange(value)}\r\n                                                    >\r\n                                                    </FormSelectSearch>\r\n                                                </Col>\r\n                                                <Col md={12}>\r\n                                                    <FormSelectSearch\r\n                                                        name={\"ndefaulttemplatecode\"}\r\n                                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_TEMPLATETYPE\" })}\r\n                                                        isSearchable={false}\r\n                                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_TEMPLATETYPE\" })}\r\n                                                        options={this.state.defaultTemplateOptions}\r\n                                                        value={this.state.selectedDefaultTemplate ? this.state.selectedDefaultTemplate : \"\"}\r\n                                                        onChange={value => this.templateComboChange(value)}\r\n                                                    >\r\n                                                    </FormSelectSearch>\r\n                                                </Col>\r\n                                            </Row>\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md='8'>\r\n                            {this.props.Login.masterData.selectedTemplate ?\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            <Card.Title className=\"product-title-main\">\r\n                                                {this.props.Login.masterData.selectedTemplate.sregtemplatename}\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle>\r\n                                                <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                        <MediaLabel className={`btn-outlined ${this.props.Login.masterData.selectedTemplate.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\"\r\n                                                            : \"outline-secondary\"} btn-sm mr-3`}>\r\n                                                            {this.props.Login.masterData.selectedTemplate.stransdisplaystatus}\r\n                                                        </MediaLabel>\r\n                                                    </h2>\r\n                                                    <div className=\"d-inline\">\r\n                                                        <Nav.Link name=\"editInstrument\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_PREVIEW\" })}\r\n                                                            // data-for=\"tooltip_list_wrap\"\r\n                                                            // hidden={this.state.userRoleControlRights.indexOf(this.state.previewId) === -1}\r\n                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                            onClick={(e) => this.getPreviewTemplate(this.props.Login.masterData,\r\n                                                                this.props.Login.userInfo, this.state.previewId\r\n                                                            )}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faEye} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link name=\"editInstrument\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEWOREDIT\" })}\r\n                                                            // data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.editId) === -1}\r\n                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                            onClick={(e) => this.props.getEditRegTemplate(this.props.Login.masterData, this.props.Login.userInfo, this.state.editId)}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link name=\"delete\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            //   data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.deleteId) === -1}\r\n                                                            onClick={() => this.ConfirmDelete(this.state.approveID)}>\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link name=\"approve\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                            // data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.approveID) === -1}\r\n                                                            onClick={() => this.deleteApproveTemplate('approve', this.state.approveID)}>\r\n                                                            <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link name=\"copy\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                            //  data-for=\"tooltip_list_wrap\"\r\n                                                            // hidden={this.state.userRoleControlRights.indexOf(this.state.copyID) === -1}\r\n                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                            onClick={(e) => this.openModal(this.state.copyID)}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faCopy} />\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body>\r\n                                            {\r\n                                                Layout ?\r\n                                                    Layout.map((item) =>\r\n                                                        <Row>\r\n                                                            {item.children.length > 0 ?\r\n                                                                item.children.map((column) =>\r\n                                                                    <Col md={12 / item.children.length}>\r\n                                                                        {\r\n                                                                            column.children.map((component) => {\r\n\r\n                                                                                return (\r\n                                                                                    component.hasOwnProperty(\"children\") ?\r\n                                                                                        <Row>\r\n                                                                                            {component.children.map(componentrow =>\r\n                                                                                                //<Col md={12 / componentrow.length}>\r\n                                                                                                componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" &&\r\n                                                                                                <Col md={componentrow && componentrow.length || 4}>\r\n                                                                                                    <FormGroup>\r\n                                                                                                        <FormLabel>{componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label}</FormLabel>\r\n                                                                                                        <ReadOnlyText>{\"-\"}</ReadOnlyText>\r\n                                                                                                    </FormGroup>\r\n                                                                                                </Col>\r\n                                                                                            )\r\n                                                                                            }\r\n                                                                                        </Row>\r\n                                                                                        :\r\n                                                                                        component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" &&\r\n                                                                                        <FormGroup>\r\n                                                                                            <FormLabel>{component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label}</FormLabel>\r\n                                                                                            <ReadOnlyText> {\"-\"}</ReadOnlyText>\r\n                                                                                            {/* <ReadOnlyText>{component.inputtype}</ReadOnlyText> */}\r\n                                                                                        </FormGroup>\r\n                                                                                )\r\n                                                                            })\r\n                                                                        }\r\n\r\n                                                                    </Col>\r\n                                                                )\r\n                                                                : \"\"}\r\n                                                        </Row>\r\n                                                    )\r\n                                                    :\r\n                                                    \"\"\r\n                                            }\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </ContentPanel>\r\n                                : \"\"}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n\r\n\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        size={this.props.Login.operation === 'copy' || \"approve\" ? 'lg' : \"xl\"}\r\n                        onSaveClick={this.props.Login.addMaster ? this.onSaveMasterRecord :\r\n                            this.props.Login.operation === 'copy' ? this.onSaveClick :\r\n                                this.props.Login.operation === \"preview\" ?\r\n                                    this.onExecuteClick : this.closeModal}\r\n                        hideSave={\r\n                            this.props.Login.addMaster ? true : (this.props.Login.operation === 'copy'\r\n                                || this.props.Login.operation === \"viewdesign\") ? false : true}\r\n                        loginoperation={this.props.Login.operation === 'copy' ? false : true}\r\n                        operation={this.props.Login.addMaster ? this.props.Login.masterOperation[this.props.Login.masterIndex] : this.props.Login.operation}\r\n                        showValidate={\r\n                            this.props.Login.addMaster ? false : this.props.Login.loadCustomSearchFilter ? false :\r\n                                this.props.Login.operation === \"preview\" ? true : false}\r\n                        screenName={this.props.Login.operation === 'copy' ? \"IDS_TEMPLATE\" : \"IDS_PREVIEW\"}\r\n                        closeModal={this.closeModal}\r\n                        show={this.props.Login.openModal}\r\n                        onExecuteClick={this.onExecuteClick}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.props.Login.addMaster ?\r\n                            this.state.selectedMaster[this.props.Login.masterIndex] : this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.addMaster ?\r\n                            this.props.Login.masterextractedColumnList[this.props.Login.masterIndex].filter(x => x.mandatory === true)\r\n                            : this.props.Login.operation === 'copy' ?\r\n                                [{ \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"sregtemplatename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }] : this.props.Login.operation === \"preview\" ? this.mandatoryValidation() : []}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={(event) => this.onInputOnChange(event)}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.operation === 'copy' ?\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormInput\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                            name={\"sregtemplatename\"}\r\n                                            type=\"text\"\r\n                                            onChange={(event) => this.setState({ selectedRecord: { ...this.state.selectedRecord, sregtemplatename: event.target.value } })}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                            value={this.state.selectedRecord.sregtemplatename ? this.state.selectedRecord.sregtemplatename : \"\"}\r\n                                            isMandatory={true}\r\n                                            required={true}\r\n                                            maxLength={\"30\"}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                : this.props.Login.isDynamicViewSlideOut ?\r\n                                    <ExternalOrderSlideout\r\n                                        dynamicExternalSample={this.props.Login.dynamicExternalSample}\r\n                                        dynamicExternalTestChild={this.props.Login.dynamicExternalTestChild}\r\n                                        dynamicGridSelectedId={this.props.Login.dynamicGridSelectedId || null}\r\n                                        selectedRecord={this.state.selectedRecord}\r\n                                        selectedDynamicViewControl={this.props.Login.selectedDynamicViewControl}\r\n                                    />\r\n\r\n                                    : this.props.Login.loadCustomSearchFilter ?\r\n\r\n                                        this.props.Login.seletedFilterComponent &&\r\n                                            this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ?\r\n                                            <KendoDatatoolFilter\r\n                                                filter={this.props.Login.kendoFilter}\r\n                                                handleFilterChange={this.handleFilterChange}\r\n                                                filterData={this.props.Login.lstPatient || []}\r\n                                                skip={this.props.Login.kendoSkip}\r\n                                                take={this.props.Login.kendoTake}\r\n                                                handlePageChange={this.handlePageChange}\r\n                                                fields={this.props.Login.fields || []}\r\n                                                gridColumns={this.props.Login.gridColumns || []}\r\n                                                onRowClick={this.handleKendoRowClick}\r\n                                                userInfo={this.props.Login.userInfo}\r\n\r\n                                            /> :\r\n                                            <PerfectScrollbar><div className='pb-4'><FilterQueryBuilder\r\n                                                fields={this.props.Login.fields || {}}\r\n                                                onChange={this.onChangeAwesomeQueryBuilder}\r\n                                                tree={this.props.Login.awesomeTree}\r\n                                                //   config={this.props.Login.awesomeConfig}\r\n                                                skip={this.props.Login.kendoSkip}\r\n                                                take={this.props.Login.kendoTake}\r\n                                                handlePageChange={this.handlePageChange}\r\n                                                gridColumns={this.props.Login.gridColumns || []}\r\n                                                filterData={this.props.Login.lstPatient}\r\n                                                onRowClick={this.handleKendoRowClick}\r\n                                                handleExecuteClick={this.handleExecuteClick}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                            // static={true}\r\n                                            // controlMap={this.state.controlMap}\r\n                                            // dataState={this.state.dataState}\r\n                                            // dataStateChange={this.dataStateChange}\r\n                                            />\r\n                                            </div>\r\n                                            </PerfectScrollbar>\r\n                                        : this.props.Login.addMaster ?\r\n                                            <AddMasterRecords\r\n                                                selectedControl={this.props.Login.selectedControl[this.props.Login.masterIndex]}\r\n                                                fieldList={this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex]}\r\n                                                extractedColumnList={this.props.Login.masterextractedColumnList[this.props.Login.masterIndex]}\r\n                                                // primaryKeyField={this.props.Login.masterprimaryKeyField}\r\n                                                selectedRecord={this.state.selectedMaster[this.props.Login.masterIndex] || {}}\r\n                                                onInputOnChange={this.onInputOnChangeMaster}\r\n                                                onComboChange={this.onComboChangeMaster}\r\n                                                handleDateChange={this.handleDateChangeMaster}\r\n                                                dataList={this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex]}\r\n                                                onNumericInputOnChange={this.onNumericInputOnChangeMaster}\r\n                                                masterDesign={this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex]}\r\n                                                mastertimeZoneList={this.props.Login.mastertimeZoneList}\r\n                                                masterdefaultTimeZone={this.props.Login.masterdefaultTimeZone}\r\n                                                onComboChangeMasterDyanmic={this.onComboChangeMasterDyanmic}\r\n                                                handleDateChangeMasterDynamic={this.handleDateChangeMasterDynamic}\r\n                                                onInputOnChangeMasterDynamic={this.onInputOnChangeMasterDynamic}\r\n                                                onNumericInputChangeMasterDynamic={this.onNumericInputChangeMasterDynamic}\r\n                                                onNumericBlurMasterDynamic={this.onNumericBlurMasterDynamic}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                Login={this.props.Login}\r\n                                                addMasterRecord={this.addMasterRecord}\r\n                                                userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                masterIndex={this.props.Login.masterIndex}\r\n                                                custombuttonclick={this.custombuttonclick}\r\n                                                editMasterRecord={this.editMasterRecord}\r\n                                            />\r\n                                            :\r\n                                            <DynamicSlideout\r\n                                                selectedRecord={this.props.Login.selectedRecord}\r\n                                                templateData={this.props.Login.masterData.selectedTemplate &&\r\n                                                    this.props.Login.masterData.selectedTemplate.jsondata}\r\n                                                //handleChange={this.handleChange}\r\n                                                handleDateChange={this.handleDateChange}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                onNumericInputChange={this.onNumericInputChange}\r\n                                                comboData={this.props.Login.comboData}\r\n                                                onComboChange={this.onComboChange}\r\n                                                onDropFile={this.onDropFile}\r\n                                                deleteAttachment={this.deleteAttachment}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                timeZoneList={this.props.Login.timeZoneList}\r\n                                                defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                Login={this.props.Login}\r\n                                                addMasterRecord={this.addMasterRecord}\r\n                                                custombuttonclick={this.custombuttonclick}\r\n                                                onNumericBlur={this.onNumericBlur}\r\n                                                userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                onClickView={this.onClickView}\r\n                                                sampleType={this.state.selectedSampleType}\r\n                                                comboComponents={this.state.comboComponents}\r\n                                                editMasterRecord={this.editMasterRecord}\r\n                                            />\r\n                        } />\r\n                    : \"\"}\r\n\r\n                {this.props.Login.openPortal ?\r\n                    <PortalModal>\r\n                        <PreRegDesignPopUp\r\n                            closeModal={this.closeModal}\r\n                            nsampletypecode={this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item.value : -1}\r\n                            sampleType={this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item : undefined}\r\n                            defaultTemplate={this.state.breadCrumbData.length ? this.state.breadCrumbData[1].item : undefined}\r\n                            ncategorybasedflowrequired={this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item.item.ncategorybasedflowrequired : 4}\r\n                            searchRef={this.searchRef}\r\n                        />\r\n                    </PortalModal> : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    onClickView = (selectedControl) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        if (selectedRecord[selectedControl.label] !== undefined && selectedRecord[selectedControl.label] !== '') {\r\n            this.props.viewExternalportalDetail(selectedControl, selectedRecord[selectedControl.label], this.props.Login.userInfo)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + \" \" + selectedControl.label);\r\n        }\r\n\r\n    }\r\n\r\n    onComboChangeMaster = (comboData, fieldName, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        if (comboData !== null) {\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137\r\n                || this.props.Login.selectedControl[masterIndex].table.item.nformcode === 43) {\r\n                selectedMaster[masterIndex][item.tableDataField] = comboData.value;\r\n            }\r\n            else if (item.foreignDataField) {\r\n                selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\r\n            }\r\n        }\r\n        selectedMaster[masterIndex][fieldName] = comboData;\r\n\r\n        if (item.childIndex !== undefined) {\r\n            this.props.getChildComboMaster(selectedMaster, fieldName, item,\r\n                this.props.Login.selectedControl,\r\n                this.props.Login.masterfieldList,\r\n                this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex)\r\n        } else {\r\n            this.setState({ selectedMaster });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChangeMaster = (dateName, dateValue, item) => {\r\n        //   const { selectedMaster } = this.state;\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n        const age = ageCalculate(dateValue);\r\n        selectedMaster[masterIndex][\"sage\"] = age;\r\n        this.setState({ selectedMaster });\r\n\r\n    }\r\n\r\n    onNumericInputOnChangeMaster = (value, name, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onInputOnChangeMaster = (event) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\r\n                    selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\r\n                    selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\r\n                    selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\r\n                    selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\r\n                    selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\r\n                    selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\r\n                    selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex].sflatnotemp = \"\";\r\n                    selectedMaster[masterIndex].shousenotemp = \"\";\r\n                    selectedMaster[masterIndex].spostalcodetemp = \"\";\r\n                    selectedMaster[masterIndex].sstreettemp = \"\";\r\n                    selectedMaster[masterIndex].scitynametemp = \"\";\r\n                    selectedMaster[masterIndex].sdistrictnametemp = \"\";\r\n                    selectedMaster[masterIndex].sregionnametemp = \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n            if (event.target.name === \"smobileno\" || event.target.name === \"sphoneno\") {\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedMaster[masterIndex][event.target.name] = event.target.value !== \"\" ?\r\n                        event.target.value : selectedMaster[masterIndex][event.target.name];\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n                }\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onSaveMasterRecord = (saveType, formRef) => {\r\n        //add / edit            \r\n\r\n        //add / edit            \r\n        const masterIndex = this.props.Login.masterIndex;\r\n        let inputData = [];\r\n        const selectedControl = this.props.Login.selectedControl\r\n        const masterDesign = this.props.Login.masterDesign\r\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n        inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = {\r\n            \"nsitecode\": this.props.Login.userInfo.nmastersitecode\r\n        };\r\n\r\n        let isEmailCheck = true;\r\n\r\n        const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase()\r\n\r\n        if (this.props.Login.masterOperation[masterIndex] === 'update') {\r\n            if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n                inputData[methodUrl][\"ndynamicmastercode\"] = this.props.Login.masterEditObject[masterIndex].item?\r\n                this.props.Login.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode:this.props.Login.masterEditObject[masterIndex].ndynamicmastercode\r\n            }\r\n            else {\r\n                inputData[methodUrl][selectedControl[masterIndex][\"valuemember\"]] = this.props.Login.masterEditObject[masterIndex].value\r\n            }\r\n\r\n        }\r\n\r\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n            const selectedMaster = this.state.selectedMaster;\r\n            inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n            inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\r\n            inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\r\n            inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique;\r\n            //add                          \r\n            inputData[methodUrl] = {\r\n                ...inputData[methodUrl],\r\n                nformcode: selectedControl[masterIndex].table.item.nformcode,\r\n                ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n            const dateList = [];\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n\r\n            masterDesign[masterIndex] &&\r\n                masterDesign[masterIndex].slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ?\r\n                                            {\r\n                                                value: selectedMaster[masterIndex][componentrow.label].value,\r\n                                                label: selectedMaster[masterIndex][componentrow.label].label,\r\n                                                pkey: componentrow.valuemember,\r\n                                                nquerybuildertablecode: componentrow.nquerybuildertablecode,\r\n                                                source: componentrow.source,\r\n                                                [componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ?\r\n                                                selectedMaster[masterIndex][componentrow.label].item? selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] :\r\n                                                    selectedMaster[masterIndex][componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\r\n                                                    :\r\n                                                    selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\r\n\r\n                                            } : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\"\r\n\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                            //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        else {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) :\r\n                                                selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n                                                    : \"\";\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                            //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ?\r\n                                                { value: selectedMaster[masterIndex][`tz${componentrow.label}`].value, label: selectedMaster[masterIndex][`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ?\r\n                                            selectedMaster[masterIndex][componentrow.label] : \"\"\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                    }\r\n                                    return inputData[\"dynamicmaster\"];\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        {\r\n                                            value: selectedMaster[masterIndex][component.label].value,\r\n                                            label: selectedMaster[masterIndex][component.label].label,\r\n                                            pkey: component.valuemember,\r\n                                            nquerybuildertablecode: component.nquerybuildertablecode,\r\n                                            source: component.source,\r\n                                            [component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ?\r\n                                            selectedMaster[masterIndex][component.label].item ?  selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: selectedMaster[masterIndex][component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\r\n                                                :\r\n                                                selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\r\n\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                    //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false);\r\n                                        // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                        // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                    } else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                            //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                            formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) :\r\n                                            selectedMaster[masterIndex][component.label] ?\r\n                                                // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                                //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                                formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ?\r\n                                            { value: selectedMaster[masterIndex][`tz${component.label}`].value, label: selectedMaster[masterIndex][`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        selectedMaster[masterIndex][component.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                }\r\n                            }\r\n                            return inputData[\"dynamicmaster\"];\r\n                        }\r\n                        )\r\n                        return inputData[\"dynamicmaster\"];\r\n                    })\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n\r\n\r\n            inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n            inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n            inputData[\"masterdatelist\"] = dateList;\r\n\r\n\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === formCode.PATIENTMASTER) {\r\n            inputData[\"noneedfilter\"] = 1; //will disl=play all db records\r\n            if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                inputData[\"noneedfilter\"] = 2; //will display will added record\r\n            }\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (fieldName === \"semail\") {\r\n                    isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\r\n                }\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === 43) {\r\n            inputData[\"noneedfilter\"] = 2; //will disl=play all db records\r\n            if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                inputData[\"noneedfilter\"] = 2; //will display will added record\r\n            }\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (fieldName === \"semail\") {\r\n                    isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\r\n                }\r\n                if (item.isJsonField === true) {\r\n                    let fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    if (item.controlType === \"datepicker\") {\r\n                        fieldData = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n\r\n                    }\r\n                    else if (item.controlType === \"selectbox\") {\r\n                        fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        fieldName = item.tableDataField;\r\n                    }\r\n                    inputData[methodUrl][item.jsonObjectName] = {\r\n                        ...inputData[methodUrl][item.jsonObjectName],\r\n                        [fieldName]: fieldData\r\n                    };\r\n                    return inputData[methodUrl];\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n            inputData[methodUrl][\"nproductcode\"] = -1;\r\n            // inputData[methodUrl][\"ndiagnosticcasecode\"] = -1;\r\n            // inputData[methodUrl][\"sexternalorderid\"] = 1;\r\n            inputData[methodUrl][\"nordertypecode\"] = 1;\r\n        }\r\n        else {\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    let fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    if (item.controlType === \"datepicker\") {\r\n                        fieldData = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n\r\n                    }\r\n                    return inputData[methodUrl][item.jsonObjectName] = {\r\n                        ...inputData[methodUrl][item.jsonObjectName],\r\n                        [fieldName]: fieldData\r\n                    }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n\r\n                    return inputData;\r\n                }\r\n            });\r\n\r\n            //inputData[methodUrl][\"jsondata\"] = {...inputData[methodUrl]};\r\n        }\r\n        // }\r\n\r\n        const inputParam = {\r\n            withoutCombocomponent: this.state.withoutCombocomponent,\r\n            comboComponents: this.state.comboComponents,\r\n            selectedRecord: this.state.selectedRecord,\r\n            selectedRecordName: 'selectedRecord',\r\n            loadSubSample: false,\r\n            selectedControl: this.props.Login.selectedControl,\r\n            comboData: this.props.Login.comboData,\r\n            comboName: 'comboData',\r\n            classUrl: selectedControl[masterIndex].table.item.classUrl,\r\n            methodUrl: selectedControl[masterIndex].table.item.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,// selectedControl[masterIndex].table.item.sdisplayname,\r\n            inputData: inputData,\r\n            operation: this.props.Login.masterOperation[masterIndex], saveType, formRef,\r\n            masterIndex,\r\n            selectedMaster: this.state.selectedMaster,\r\n            mastercomboComponents: this.props.Login.mastercomboComponents,\r\n            masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\r\n            masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\r\n            masterextractedColumnList: this.props.Login.masterextractedColumnList,\r\n            masterdataList: this.props.Login.masterdataList,\r\n            masterDesign: this.props.Login.masterDesign,\r\n            masterfieldList: this.props.Login.masterfieldList,\r\n            userinfo: this.props.Login.userInfo,\r\n            masterEditObject: this.props.Login.masterEditObject,\r\n            masterOperation: this.props.Login.masterOperation\r\n        }\r\n\r\n        if (isEmailCheck) {\r\n            this.props.addMasterRecord(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }));\r\n        }\r\n\r\n\r\n        // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n        //             openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n        //             operation: this.props.Login.operation\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n        //  this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        //  }\r\n\r\n    }\r\n\r\n    mandatoryValidation = () => {\r\n        const mandatoryFields = []\r\n        const selectedRecord = this.state.selectedRecord;\r\n        this.props.Login.masterData.selectedTemplate &&\r\n            this.props.Login.masterData.selectedTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.mandatory === true) {\r\n                                    if (componentrow.recordbasedshowhide) {\r\n                                        if (this.state.selectedRecord[componentrow.parentLabel]\r\n                                            === componentrow.recordbasedhide) {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                        } else {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    if (componentrow.inputtype === \"email\") {\r\n\r\n                                        selectedRecord[componentrow.label] &&\r\n                                            selectedRecord[componentrow.label] !== \"\" &&\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                    }\r\n                                }\r\n                                return null;\r\n                            })\r\n                            : component.mandatory === true ?\r\n                                component.recordbasedshowhide ?\r\n                                    this.state.selectedRecord[component.parentLabel]\r\n                                        === component.recordbasedhide ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            }) : \"\" :\r\n                                    component.inputtype === \"email\" ?\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                        :\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                : selectedRecord[component.label] ?\r\n                                    component.inputtype === \"email\" ?\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        }) : \"\" : \"\"\r\n                    })\r\n                })\r\n            })\r\n\r\n        return mandatoryFields;\r\n    }\r\n\r\n    addMasterRecord = (control) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        if (masterIndex !== undefined) {\r\n            masterIndex = masterIndex + 1;\r\n        } else {\r\n            masterIndex = 0\r\n        }\r\n        let selectedControl = this.props.Login.selectedControl || []\r\n        let selectedMaster = this.state.selectedMaster || []\r\n        selectedMaster[masterIndex] = {}\r\n        selectedControl[masterIndex] = control\r\n\r\n        let fieldList = this.props.Login.masterfieldList || []\r\n        fieldList[masterIndex] = []\r\n\r\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n        masterComboColumnFiled[masterIndex] = []\r\n\r\n        let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n        extractedColumnList[masterIndex] = []\r\n\r\n        let masterdataList = this.props.Login.masterdataList || []\r\n        let masterDesign = this.props.Login.masterDesign || []\r\n        let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n        let mastercomboComponents = this.props.Login.mastercomboComponents || []\r\n        let masterOperation = this.props.Login.masterOperation || []\r\n\r\n        masterdataList[masterIndex] = []\r\n        masterDesign[masterIndex] = []\r\n        masterwithoutCombocomponent[masterIndex] = []\r\n        mastercomboComponents[masterIndex] = []\r\n        masterOperation[masterIndex] = 'create'\r\n\r\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n            if (control.table.item.component === 'Type2Component') {\r\n                fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n            } else {\r\n                fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n            }\r\n\r\n\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo)\r\n        }\r\n        else if (control.table.item.component === 'Type3Component') {\r\n            fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n            masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterprimaryKeyField: primaryKeyField,\r\n                masterComboColumnFiled: masterComboColumnFiled,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterOperation,\r\n                selectedMaster,\r\n                screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n            }\r\n\r\n            this.props.getAddMasterCombo(inputParam);\r\n\r\n        }\r\n        else if (control.table.item.component === 'Dynamic') {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterComboColumnFiled,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterComboColumnFiled,\r\n                masterOperation,\r\n                selectedMaster\r\n            }\r\n            this.props.getDynamicMasterTempalte(inputParam);\r\n        }\r\n\r\n        // this.props.getMasterRecord(control);\r\n    }\r\n\r\n\r\n    editMasterRecord = (control, editObject) => {\r\n        if (editObject) {\r\n            let masterIndex = this.props.Login.masterIndex\r\n            if (masterIndex !== undefined) {\r\n                masterIndex = masterIndex + 1;\r\n            } else {\r\n                masterIndex = 0\r\n            }\r\n            let selectedControl = this.props.Login.selectedControl || []\r\n            let selectedMaster = this.state.selectedMaster || []\r\n            selectedMaster[masterIndex] = {}\r\n            selectedControl[masterIndex] = control\r\n\r\n            let fieldList = this.props.Login.masterfieldList || []\r\n            fieldList[masterIndex] = []\r\n\r\n            let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n            masterComboColumnFiled[masterIndex] = []\r\n\r\n            let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n            extractedColumnList[masterIndex] = []\r\n\r\n            let masterdataList = this.props.Login.masterdataList || []\r\n            let masterDesign = this.props.Login.masterDesign || []\r\n            let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n            let mastercomboComponents = this.props.Login.mastercomboComponents || []\r\n            let masterOperation = this.props.Login.masterOperation || []\r\n            let masterEditObject = this.props.Login.masterEditObject || []\r\n\r\n            masterdataList[masterIndex] = []\r\n            masterDesign[masterIndex] = []\r\n            masterwithoutCombocomponent[masterIndex] = []\r\n            mastercomboComponents[masterIndex] = []\r\n            masterOperation[masterIndex] = 'update'\r\n            masterEditObject[masterIndex] = editObject\r\n\r\n            if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n                if (control.table.item.component === 'Type2Component') {\r\n                    fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n                } else {\r\n                    fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n                }\r\n                extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n                const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n\r\n                const updateInfo = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    selectedMaster,\r\n                    masterEditObject,\r\n                    masterOperation\r\n                    // editObject\r\n                    //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n\r\n                }\r\n                this.props.getEditMaster(updateInfo)\r\n            }\r\n            else if (control.table.item.component === 'Type3Component') {\r\n                fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n                extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n                masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                    item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n                const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterEditObject,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                    // editObject\r\n                }\r\n\r\n                this.props.getEditMaster(inputParam);\r\n\r\n            }\r\n            else if (control.table.item.component === 'Dynamic') {\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterComboColumnFiled,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterComboColumnFiled,\r\n                    masterEditObject,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    //  editObject\r\n                }\r\n                this.props.getEditMaster(inputParam);\r\n            }\r\n\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTHERECORD\" }))\r\n        }\r\n\r\n    }\r\n\r\n    onExecuteClick = () => {\r\n        const selectedRecord = this.state.selectedRecord || {}\r\n        const userInfo = this.props.Login.userInfo\r\n        const sampleRegistration = {}\r\n        sampleRegistration[\"jsondata\"] = {}\r\n        const dateList = []\r\n        const defaulttimezone = this.props.Login.defaultTimeZone\r\n\r\n        this.props.Login.masterData.selectedTemplate &&\r\n            this.props.Login.masterData.selectedTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            return component.children.map(componentrow => {\r\n\r\n                                if (componentrow.inputtype === \"date\") {\r\n                                    if (componentrow.mandatory) {\r\n                                        sampleRegistration[\"jsondata\"][componentrow.label] = typeof selectedRecord[componentrow.label] === \"object\" ?\r\n                                            convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : \"\";\r\n                                    } else {\r\n                                        sampleRegistration[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                            typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : \"\" :\r\n                                            selectedRecord[componentrow.label] ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : \"\" : \"\";\r\n\r\n                                    }\r\n                                    if (componentrow.timezone) {\r\n                                        sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                                            { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                    dateList.push(componentrow.label)\r\n                                }\r\n\r\n                            })\r\n                            return sampleRegistration;\r\n                        }\r\n                        else {\r\n\r\n                            if (component.inputtype === \"date\") {\r\n                                if (component.mandatory) {\r\n                                    sampleRegistration[\"jsondata\"][component.label] = typeof selectedRecord[component.label] === \"object\" ?\r\n                                        convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : new Date(), userInfo) :\r\n                                        selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : \"\";\r\n                                } else {\r\n                                    sampleRegistration[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                        typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : \"\" :\r\n                                        selectedRecord[component.label] ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : \"\" : \"\";\r\n                                }\r\n                                if (component.timezone) {\r\n                                    sampleRegistration[\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ?\r\n                                        { value: selectedRecord[`tz${component.label}`].value, label: selectedRecord[`tz${component.label}`].label } :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n                                }\r\n                                dateList.push(component.label)\r\n                            }\r\n                            return sampleRegistration;\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n\r\n        const { dateconstraints, combinationunique } = this.getJsondata(this.props.Login.masterData.selectedTemplate.jsondata)\r\n\r\n        const inputParam = {\r\n            Registration: sampleRegistration,\r\n            DateList: dateList,\r\n            dateconstraints: dateconstraints,\r\n            userinfo: userInfo,\r\n            combinationunique: combinationunique,\r\n        }\r\n\r\n        this.props.validatePreview(inputParam);\r\n\r\n    }\r\n\r\n\r\n    getJsondata = (templatedata) => {\r\n\r\n        let dateconstraints = [];\r\n        let combinationunique = []\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                            // componentRow.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && combinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n                            if (componentRow.inputtype === 'date') {\r\n                                // sampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                dateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\r\n                            }\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        component.unique && combinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        if (component.inputtype === 'date') {\r\n                            dateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\r\n                        }\r\n                        return null;\r\n                    }\r\n                })\r\n            }\r\n            )\r\n        )\r\n        let jsondata = {\r\n            combinationunique,\r\n            dateconstraints,\r\n        }\r\n        return jsondata;\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n        let { userRoleControlRights, controlMap, addTemplateId,\r\n            sampleTypeOptions, breadCrumbData, selectedSampleType,\r\n            editId, deleteId, approveID, copyID, selectedRecord, comboComponents,\r\n            previewId, withoutCombocomponent, selectedMaster,\r\n            selectedDefaultTemplate, defaultTemplateOptions,\r\n            awesomeConfig, awesomeTree, kendoFilter, kendoSkip, kendoTake\r\n        } = this.state;\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            updateState = true;\r\n            addTemplateId = controlMap.has(\"AddTemplate\") && controlMap.get(\"AddTemplate\").ncontrolcode;\r\n            editId = controlMap.has(\"EditTemplate\") && controlMap.get(\"EditTemplate\").ncontrolcode;\r\n            deleteId = controlMap.has(\"DeleteTemplate\") && controlMap.get(\"DeleteTemplate\").ncontrolcode;\r\n            approveID = controlMap.has(\"ApproveTemplate\") && controlMap.get(\"ApproveTemplate\").ncontrolcode;\r\n            copyID = controlMap.has(\"CopyTemplate\") && controlMap.get(\"CopyTemplate\").ncontrolcode;\r\n            previewId = controlMap.has(\"PreviewTemplate\") && controlMap.get(\"PreviewTemplate\").ncontrolcode;\r\n        }\r\n        if (this.props.Login.masterData.SampleTypes !== previousProps.Login.masterData.SampleTypes) {\r\n            sampleTypeOptions = constructOptionList(this.props.Login.masterData.SampleTypes || [], 'nsampletypecode', 'ssampletypename', 'nsorter', \"ascending\").get(\"OptionList\")\r\n            selectedSampleType = sampleTypeOptions.length > 0 ? sampleTypeOptions[0] : {};\r\n            defaultTemplateOptions = constructOptionList(this.props.Login.masterData.DefaultTemplateList || [], 'ndefaulttemplatecode', 'sdefaulttemplatename', 'ndefaulttemplatecode', \"ascending\").get(\"OptionList\")\r\n           // selectedDefaultTemplate = defaultTemplateOptions.length > 0 ? defaultTemplateOptions[0] : {};\r\n\r\n            selectedDefaultTemplate = this.props.Login.masterData.selectedDefaultTemplate  \r\n                                    ? {\"label\": this.props.Login.masterData.selectedDefaultTemplate.sdefaulttemplatename,\r\n                                        \"value\": this.props.Login.masterData.selectedDefaultTemplate.ndefaulttemplatecode,\r\n                                        \"item\": this.props.Login.masterData.selectedDefaultTemplate }\r\n                                    :  defaultTemplateOptions.length > 0 ? defaultTemplateOptions[0] : {}\r\n            breadCrumbData = sampleTypeOptions.length > 0 ? [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": sampleTypeOptions[0].label,\r\n                    \"item\": sampleTypeOptions[0]\r\n                },\r\n                {\r\n                    \"label\": \"IDS_TEMPLATETYPE\",\r\n                    \"value\": selectedDefaultTemplate.label,\r\n                    \"item\": selectedDefaultTemplate\r\n                }\r\n            ] : [];\r\n         \r\n            // breadCrumbData = sampleTypeOptions.length > 0 ? [\r\n            //     {\r\n            //         \"label\": \"IDS_SAMPLETYPE\",\r\n            //         \"value\": sampleTypeOptions[0].label,\r\n            //         \"item\": sampleTypeOptions[0]\r\n            //     }\r\n            // ] : [];\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.masterData.selectedSampleType !== previousProps.Login.masterData.selectedSampleType) {\r\n\r\n            defaultTemplateOptions = constructOptionList(this.props.Login.masterData.DefaultTemplateList || [], 'ndefaulttemplatecode', 'sdefaulttemplatename', 'ndefaulttemplatecode', \"ascending\").get(\"OptionList\")\r\n           // selectedDefaultTemplate = defaultTemplateOptions.length > 0 ? defaultTemplateOptions[0] : {};\r\n\r\n           selectedDefaultTemplate = this.props.Login.masterData.selectedDefaultTemplate  \r\n                                    ? {\"label\": this.props.Login.masterData.selectedDefaultTemplate.sdefaulttemplatename,\r\n                                        \"value\": this.props.Login.masterData.selectedDefaultTemplate.ndefaulttemplatecode,\r\n                                        \"item\": this.props.Login.masterData.selectedDefaultTemplate }\r\n                                    :  defaultTemplateOptions.length > 0 ? defaultTemplateOptions[0] : {}\r\n            selectedSampleType = this.props.Login.masterData.selectedSampleType && {\r\n                \"label\": this.props.Login.masterData.selectedSampleType.ssampletypename,\r\n                \"value\": this.props.Login.masterData.selectedSampleType.nsampletypecode,\r\n                \"item\": this.props.Login.masterData.selectedSampleType\r\n            };\r\n            //{\r\n            //     \"label\": this.state.selectedSampleType.label,\r\n            //     \"value\": this.state.selectedSampleType.value,\r\n            //     \"item\": this.state.selectedSampleType\r\n            // }\r\n            // breadCrumbData = sampleTypeOptions.length > 0 ? [\r\n            //     {\r\n            //         \"label\": \"IDS_SAMPLETYPE\",\r\n            //         \"value\": sampleTypeOptions[0].label,\r\n            //         \"item\": sampleTypeOptions[0]\r\n            //     }\r\n            // ] : [];\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.realSampleType !== previousProps.Login.realSampleType) {\r\n            updateState = true;\r\n            breadCrumbData = this.props.Login.realSampleType || this.state.breadCrumbData;\r\n        }\r\n        if (this.props.Login.realDefaultTemplate !== previousProps.Login.realDefaultTemplate) {\r\n            updateState = true;\r\n            breadCrumbData = this.props.Login.realDefaultTemplate || this.state.breadCrumbData;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n        if (this.props.Login.selectedMaster !== previousProps.Login.selectedMaster) {\r\n            updateState = true;\r\n            selectedMaster = this.props.Login.selectedMaster\r\n        }\r\n\r\n        if (this.props.Login.comboComponents !== previousProps.Login.comboComponents) {\r\n            updateState = true;\r\n            comboComponents = this.props.Login.comboComponents\r\n        }\r\n        if (this.props.Login.withoutCombocomponent !== previousProps.Login.withoutCombocomponent) {\r\n            updateState = true;\r\n            withoutCombocomponent = this.props.Login.withoutCombocomponent\r\n        }\r\n\r\n        // if (this.props.Login.kendoTake !== previousProps.Login.kendoTake) {\r\n        //     updateState = true;\r\n        //     kendoTake = this.props.Login.kendoTake\r\n        // }\r\n\r\n\r\n        if (updateState) {\r\n            // console.log(\"selectedSampleType:\", this.state.selectedSampleType,this.props.Login.masterData.selectedSampleType);\r\n            this.setState({\r\n                userRoleControlRights, controlMap, addTemplateId, sampleTypeOptions,\r\n                breadCrumbData, selectedSampleType, defaultTemplateOptions, selectedDefaultTemplate,\r\n                editId, deleteId, approveID, copyID, selectedRecord,\r\n                comboComponents, previewId, withoutCombocomponent, selectedMaster\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    filterComboChange = (comboData) => {\r\n        // this.setState({ selectedSampleType: comboData })\r\n        this.props.getDefaultTemplate(comboData, this.props.Login.userInfo, this.props.Login.masterData);\r\n    }\r\n\r\n    templateComboChange = (comboData) => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedTemplate :  comboData, \r\n        //             selectedDefaultTemplate: { \"label\": comboData.sdefaulttemplatename,\r\n        //                                         \"value\": comboData.ndefaulttemplatecode,\r\n        //                                         \"item\": comboData\r\n        //                                         }\r\n        //         }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({\r\n            selectedDefaultTemplate: comboData\r\n            //  { \"label\": comboData.sdefaulttemplatename,\r\n            //     \"value\": comboData.ndefaulttemplatecode,\r\n            //     \"item\": comboData\r\n            //     }\r\n        })\r\n    }\r\n\r\n    closeFilter = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.reloadData()\r\n    }\r\n\r\n\r\n    removeIndex = (data, removeIndex) => {\r\n        const data1 = [...data.splice(0, removeIndex), ...data.splice(removeIndex + 1)]\r\n        return data1\r\n    }\r\n\r\n    closeModal = () => {\r\n        let updateInfo = {}\r\n        if (this.props.Login.addMaster) {\r\n\r\n            let masterIndex = this.props.Login.masterIndex;\r\n            if (masterIndex !== 0) {\r\n                const screenName = this.props.Login.selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                const selectedMaster = this.removeIndex(this.props.Login.selectedMaster, masterIndex)\r\n                const selectedControl = this.removeIndex(this.props.Login.selectedControl, masterIndex)\r\n                const masterextractedColumnList = this.props.Login.masterextractedColumnList && this.removeIndex(this.props.Login.masterextractedColumnList, masterIndex)\r\n                const masterfieldList = this.props.Login.masterfieldList && this.removeIndex(this.props.Login.masterfieldList, masterIndex)\r\n                const masterdataList = this.props.Login.masterdataList && this.removeIndex(this.props.Login.masterdataList, masterIndex)\r\n                const mastercomboComponents = this.props.Login.mastercomboComponents && this.removeIndex(this.props.Login.mastercomboComponents, masterIndex)\r\n                const masterComboColumnFiled = this.props.Login.masterComboColumnFiled && this.removeIndex(this.props.Login.masterComboColumnFiled, masterIndex)\r\n                const masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent && this.removeIndex(this.props.Login.masterwithoutCombocomponent, masterIndex)\r\n                const masterDesign = this.props.Login.masterDesign && this.removeIndex(this.props.Login.masterDesign, masterIndex)\r\n                const masterOperation = this.props.Login.masterOperation && this.removeIndex(this.props.Login.masterOperation, masterIndex)\r\n                const masterEditObject = this.props.Login.masterEditObject && this.removeIndex(this.props.Login.masterEditObject, masterIndex)\r\n                masterIndex = masterIndex - 1;\r\n\r\n\r\n                updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectedMaster,\r\n                        selectedControl,\r\n                        masterextractedColumnList,\r\n                        masterfieldList,\r\n                        masterdataList,\r\n                        mastercomboComponents,\r\n                        masterwithoutCombocomponent,\r\n                        masterComboColumnFiled,\r\n                        masterDesign,\r\n                        masterIndex,\r\n                        masterOperation,\r\n                        masterEditObject,\r\n                        screenName\r\n                    }\r\n\r\n                }\r\n\r\n            } else {\r\n                // selectedMaster = []\r\n                // selectedControl = []\r\n                // masterextractedColumnList = []\r\n                // masterfieldList = []\r\n                // addMaster = true\r\n                // masterdataList = []\r\n                // mastercomboComponents = []\r\n                // masterwithoutCombocomponent = []\r\n                // masterComboColumnFiled = []\r\n                // masterDesign = []\r\n                // masterIndex = undefined\r\n                // screenName=this.props.Login.inputParam.displayName\r\n\r\n                updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectedMaster: [],\r\n                        selectedControl: [],\r\n                        masterextractedColumnList: [],\r\n                        masterfieldList: [],\r\n                        addMaster: false,\r\n                        masterdataList: [],\r\n                        mastercomboComponents: [],\r\n                        masterwithoutCombocomponent: [],\r\n                        masterComboColumnFiled: [],\r\n                        masterDesign: [],\r\n                        masterIndex: undefined,\r\n                        masterOperation: [],\r\n                        masterEditObject: [],\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n        else if (this.props.Login.isDynamicViewSlideOut) {\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    isDynamicViewSlideOut: false,\r\n                    selectedDynamicViewControl: undefined\r\n                }\r\n                // data: {openModal, loadEsign, selectedRecord}\r\n            }\r\n        }\r\n        else if (!this.props.Login.loadCustomSearchFilter) {\r\n            let loadEsign = this.props.Login.loadEsign;\r\n            let openModal = this.props.Login.openModal;\r\n            let openPortal = this.props.Login.openPortal;\r\n            let selectedRecord = this.props.Login.selectedRecord;\r\n            let showFilter = this.props.Login.showFilter;\r\n            // let design = this.props.Login.design;\r\n            //let selectedFieldRecord =  this.props.Login.selectedFieldRecord;\r\n\r\n            if (this.props.Login.loadEsign) {\r\n                if (this.props.Login.operation === \"delete\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                    openPortal = false;\r\n                    selectedRecord = {};\r\n                    updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            openModal, openPortal, loadEsign,\r\n                            selectedRecord, selectedId: null, showFilter,\r\n                            design: [], selectedFieldRecord: {}, showConfirmAlert: false\r\n                        }\r\n                        // data: {openModal, loadEsign, selectedRecord}\r\n                    }\r\n                }\r\n                else if (this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                    selectedRecord['esignpassword'] = \"\";\r\n                    selectedRecord['esigncomments'] = \"\";\r\n                    selectedRecord['esignreason'] = \"\";\r\n                    // openPortal = true;\r\n                    updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            openModal, openPortal, loadEsign,\r\n                            selectedRecord, selectedId: null,\r\n                            showFilter, showConfirmAlert: false\r\n                        }\r\n                        // data: {openModal, loadEsign, selectedRecord}\r\n                    }\r\n                }\r\n                else {\r\n                    loadEsign = false;\r\n                    selectedRecord['esignpassword'] = \"\";\r\n                    selectedRecord['esigncomments'] = \"\";\r\n                    selectedRecord['esignreason'] = \"\";\r\n                    updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            openModal, openPortal, loadEsign,\r\n                            selectedRecord, selectedId: null, showFilter,\r\n                            design: [], selectedFieldRecord: {}, showConfirmAlert: false\r\n                        }\r\n                        // data: {openModal, loadEsign, selectedRecord}\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                openModal = false;\r\n                openPortal = false;\r\n                selectedRecord = {};\r\n                showFilter = false\r\n                updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        openModal, openPortal, loadEsign,\r\n                        selectedRecord, selectedId: null, showFilter,\r\n                        design: [], selectedFieldRecord: {}, showConfirmAlert: false\r\n                    }\r\n                    // data: {openModal, loadEsign, selectedRecord}\r\n                }\r\n            }\r\n\r\n        } else {\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadCustomSearchFilter: false, kendoSkip: 0,\r\n                    kendoTake: 5,\r\n                    kendoFilter: {\r\n                        logic: \"and\",\r\n                        filters: []\r\n                    },\r\n                    awesomeTree: undefined,\r\n                    awesomeConfig: undefined\r\n                }\r\n                // data: {openModal, loadEsign, selectedRecord}\r\n            }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    openModal = (ncontrolcode) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {}, operation: \"copy\", ncontrolcode, selectedId: null,\r\n                openModal: true, screenName: this.props.Login.inputParam.displayName\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let dataState = undefined;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let selectedId = null;\r\n        inputData['registrationtemplate'] =\r\n        {\r\n            nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\r\n            sregtemplatename: this.state.selectedRecord['sregtemplatename'],\r\n            nsampletypecode: this.props.Login.masterData.selectedTemplate.nsampletypecode,\r\n            ndefaulttemplatecode: this.props.Login.masterData.selectedTemplate.ndefaulttemplatecode\r\n        }\r\n\r\n        const inputParam = {\r\n            methodUrl: \"RegistrationTemplate\",\r\n            classUrl: 'dynamicpreregdesign',\r\n            searchRef: this.searchRef,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData, operation: this.props.Login.operation,\r\n            saveType, formRef, selectedId, dataState\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.inputParam.displayName,\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteApproveTemplate(\"delete\", deleteId));\r\n    }\r\n\r\n    deleteApproveTemplate = (operation, ncontrolCode) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const postParam = {\r\n            inputListName: \"RegistrationTemplate\",\r\n            selectedObject: \"selectedTemplate\",\r\n            primaryKeyField: \"nreactregtemplatecode\",\r\n            fetchUrl: \"dynamicpreregdesign/getRegistrationTemplateById\",\r\n            primaryKeyValue: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo, nsampletypecode: this.state.breadCrumbData[0] ?\r\n                    this.state.breadCrumbData[0].item.value : -1\r\n            },\r\n            masterData: this.props.Login.masterData\r\n        }\r\n        const data = []\r\n        const Layout = this.props.Login.masterData.selectedTemplate.jsondata\r\n        Layout.map(row => {\r\n            row.children.map(column => {\r\n                column.children.map(component => {\r\n                    if (component.hasOwnProperty(\"children\")) {\r\n                        component.children.map(componentrow => {\r\n                            if (this.state.breadCrumbData[0].item.value === -1)\r\n                                componentrow['label'] = componentrow.label + \"_child\"\r\n\r\n                            data.push(componentrow.label)\r\n\r\n                        })\r\n                    } else {\r\n                        if (this.state.breadCrumbData[0].item.value === -1) {\r\n                            component['label'] = component.label + \"_child\"\r\n                            data.push(component.label)\r\n                        } else {\r\n                            data.push(component.label)\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n        })\r\n\r\n\r\n        const inputParam = {\r\n            methodUrl: \"RegistrationTemplate\",\r\n            classUrl: 'dynamicpreregdesign',\r\n            postParam,\r\n            searchRef: this.searchRef,\r\n            inputData: {\r\n                registrationtemplate: {\r\n                    sregtemplatename: this.props.Login.masterData.selectedTemplate.sregtemplatename,\r\n                    nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\r\n                    jsonString: JSON.stringify(Layout),\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n                dynamicFields: data,\r\n                nsampletypecode: this.state.breadCrumbData[0].item.value\r\n\r\n            },\r\n            operation\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    openModal: true,\r\n                    operation: \"delete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        if (this.state.selectedSampleType) {\r\n            this.props.getRegistrationTemplate(this.state.selectedSampleType, this.state.selectedDefaultTemplate,\r\n                this.props.Login.masterData, this.props.Login.userInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVALIABLE\" }));\r\n        }\r\n    }\r\n\r\n    getPreviewTemplate = (masterData, userInfo, editId) => {\r\n        let data = [];\r\n        const withoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.selectedTemplate.jsondata\r\n        Layout.map(row => {\r\n            row.children.map(column => {\r\n                column.children.map(component => {\r\n                    return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                        if (componentrow.inputtype === \"combo\"\r\n                            || componentrow.inputtype === \"backendsearchfilter\"\r\n                            || componentrow.inputtype === \"frontendsearchfilter\") {\r\n                            data.push(componentrow)\r\n                        } else {\r\n                            withoutCombocomponent.push(componentrow)\r\n                        }\r\n                    })\r\n                        : component.inputtype === \"combo\"\r\n                            || component.inputtype === \"backendsearchfilter\"\r\n                            || component.inputtype === \"frontendsearchfilter\" ? data.push(component) :\r\n                            withoutCombocomponent.push(component)\r\n                })\r\n            })\r\n        })\r\n\r\n        const comboComponents = data\r\n        let childColumnList = {};\r\n        data.map(columnList => {\r\n            const val = this.comboChild(data, columnList, childColumnList, true);\r\n            data = val.data;\r\n            childColumnList = val.childColumnList;\r\n        })\r\n        this.props.getPreviewTemplate(masterData, userInfo, editId, data, this.state.selectedRecord,\r\n            childColumnList, comboComponents, withoutCombocomponent, false, true, new Map(), true)\r\n\r\n    }\r\n\r\n    comboChild = (data, columnList, childColumnList, slice, customButtonComponent) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n\r\n                    // if (!columnList.inputtype === 'backendsearchfilter' &&\r\n                    //     !columnList.inputtype === 'frontendsearchfilter'\r\n                    // ) {\r\n                    let childList = []\r\n                    columnList.child.map(childData => {\r\n                        const index = data.findIndex(x => x.label === childData.label)\r\n                        if (index !== -1) {\r\n                            childList.push(data[index])\r\n                            if (slice) {\r\n                                data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                    childColumnList[columnList.label] = childList;\r\n                    if (childList.length > 0) {\r\n                        childList.map(y => {\r\n                            if (y.hasOwnProperty(\"child\")) {\r\n                                const val = this.comboChild(data, y, childColumnList, slice)\r\n                                retunObj[\"data\"] = val.data;\r\n                                retunObj[\"childColumnList\"] = val.childColumnList;\r\n                            } else {\r\n                                retunObj[\"data\"] = data;\r\n                                retunObj[\"childColumnList\"] = childColumnList;\r\n                            }\r\n                        })\r\n                    } else {\r\n                        retunObj[\"data\"] = data;\r\n                        retunObj[\"childColumnList\"] = childColumnList;\r\n                    }\r\n                    // } else {\r\n\r\n                    //         columnList.child.map(childData => {\r\n                    //             const index = data.findIndex(x => x.label === childData.label)\r\n                    //             if (index !== -1) {\r\n                    //                 childList.push(data[index])\r\n                    //                 if (slice) {\r\n                    //                     data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                    //                 }\r\n                    //             }\r\n                    //         })\r\n\r\n                    //         childColumnList[columnList.label] = childList;\r\n                    // }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        //if (comboData) {\r\n        selectedRecord[comboName] = comboData;\r\n        if (comboData) {\r\n\r\n            comboData[\"item\"] = {\r\n                ...comboData[\"item\"], \"pkey\": control.valuemember,\r\n                \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n                \"source\": control.source\r\n            };\r\n\r\n\r\n            if (control.child && control.child.length > 0) {\r\n                const childComboList = getSameRecordFromTwoArrays(this.state.comboComponents, control.child, \"label\")\r\n                let childColumnList = {};\r\n                childComboList.map(columnList => {\r\n                    const val = this.comboChild(this.state.comboComponents, columnList, childColumnList, false);\r\n                    childColumnList = val.childColumnList\r\n                })\r\n\r\n                const parentList = getSameRecordFromTwoArrays(this.state.withoutCombocomponent, control.child, \"label\")\r\n\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                    childComboList, childColumnList, this.state.withoutCombocomponent, [...childComboList, ...parentList])\r\n\r\n            } else {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord, loadCustomSearchFilter: false, }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n        else {\r\n            let comboData = this.props.Login.comboData\r\n            const withoutCombocomponent = this.state.withoutCombocomponent || []\r\n            const inputParam = { control, comboComponents: this.state.comboComponents, withoutCombocomponent, selectedRecord, comboData }\r\n            const childParam = childComboClear(inputParam)\r\n            selectedRecord = childParam.selectedRecord\r\n            comboData = childParam.comboData\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, comboData, loadCustomSearchFilter: false, }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    } \r\n\r\n    onInputOnChange = (event, radiotext) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'toggle') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedRecord[event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedRecord[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedRecord[event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = radiotext\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n        // this.saveComponentProperties()\r\n    }\r\n\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlur = (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord, withoutCombocomponent } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        if (this.props.Login.masterData.selectedTemplate.nsampletypecode === SampleType.CLINICALTYPE) {\r\n            const age = ageCalculate(dateValue);\r\n            const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n            selectedRecord[Age[0].label] = age\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n\r\n    onComboChangeMasterDyanmic = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        //if (comboData) {\r\n        comboData[\"item\"] = {\r\n            ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n            \"source\": control.source\r\n        };\r\n        selectedMaster[masterIndex][comboName] = comboData;\r\n\r\n        // console.log(\"selected:\", selectedMaster, comboData, control, customName);\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\")\r\n\r\n            if (comboData) {\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValuesForAddMaster(inputParem,\r\n                    this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList,\r\n                    childComboList, childColumnList,\r\n                    this.props.Login.masterwithoutCombocomponent,\r\n                    [...childComboList, ...parentList], masterIndex)\r\n            } else {\r\n                let comboData = this.props.Login.masterdataList\r\n                const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n                const inputParam = { control, comboComponents: this.props.Login.mastercomboComponents[masterIndex], withoutCombocomponent: withoutCombocomponent[masterIndex], selectedMaster: selectedMaster[masterIndex], comboData: comboData[masterIndex] }\r\n                const childParam = childComboClear(inputParam)\r\n                selectedMaster[masterIndex] = childParam.selectedRecord\r\n                comboData[masterIndex] = childParam.comboData\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedMaster, mastedataList: comboData }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedMaster }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChangeMasterDynamic = (event, radiotext) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'toggle') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedMaster[masterIndex][event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedMaster[masterIndex][event.target.name] = radiotext\r\n        } else {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n    handleDateChangeMasterDynamic = (dateValue, dateName) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericInputChangeMasterDynamic = (value, name) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericBlurMasterDynamic = (value, control) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (selectedMaster[masterIndex][control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onDrop = (value, type, oldVlaue) => {\r\n        const design = this.state.design;\r\n        let columns = design[0].children;\r\n        let designData = this.props.Login.ReactInputFields;\r\n        value = JSON.parse(value.fields);\r\n        value = { ...value, type: \"component\" }\r\n        let designDataIndex = designData.findIndex(item => item.label === value.label);\r\n        let firstIndex = columns[0] ? columns[0].children.findIndex(item => item.label === value.label) : -1;\r\n        let secondIndex = columns[1] ? columns[1].children.findIndex(item => item.label === value.label) : -1;\r\n\r\n        if (designDataIndex >= 0)\r\n            designData.splice(designDataIndex, 1);\r\n        if (firstIndex >= 0) {\r\n            if (type !== 1) {\r\n                columns[0].children.splice(firstIndex, 1);\r\n                // columns[0].splice(to, 0, columns[0].splice(from, 1)[0]);\r\n            } else {\r\n                if (oldVlaue) {\r\n                    oldVlaue = JSON.parse(oldVlaue);\r\n                    let from = columns[0].children.findIndex(item => item.label === value.label);\r\n                    let to = columns[0].children.findIndex(item => item.label === oldVlaue.label);\r\n                    columns[0].children.splice(to, 0, columns[0].children.splice(from, 1)[0]);\r\n                }\r\n            }\r\n\r\n        } else if (type === 1) {\r\n            if (columns[0]) {\r\n                columns[0].children.push(value);\r\n            } else {\r\n                columns[0] = {\r\n                    id: \"1\",\r\n                    type: \"column\",\r\n                    children: []\r\n                }\r\n\r\n                columns[0].children.push(value);\r\n            }\r\n        }\r\n        if (secondIndex >= 0) {\r\n            if (type !== 2) {\r\n                columns[1].splice(secondIndex, 1);\r\n            } else {\r\n                if (oldVlaue) {\r\n                    oldVlaue = JSON.parse(oldVlaue);\r\n                    let from = columns[1].children.findIndex(item => item.label === value.label);\r\n                    let to = columns[1].children.findIndex(item => item.label === oldVlaue.label);\r\n                    columns[1].children.splice(to, 0, columns[1].children.splice(from, 1)[0]);\r\n                }\r\n            }\r\n        } else if (type === 2) {\r\n            if (columns[1]) {\r\n                columns[1].children.push(value);\r\n            } else {\r\n                columns[1] = {\r\n                    id: \"2\",\r\n                    type: \"column\",\r\n                    children: []\r\n                }\r\n                columns[1].children.push(value);\r\n            }\r\n        }\r\n\r\n        // design.push(columns)\r\n        this.setState({ designData, design })\r\n    }\r\n\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    updateStore, crudMaster,\r\n    getReactInputFields, selectRegistrationTemplate, filterColumnData,\r\n    getRegistrationTemplate, getEditRegTemplate,\r\n    getPreviewTemplate, getChildValues,\r\n    getDynamicFilter, getDynamicFilterExecuteData,\r\n    validateEsignCredential, validatePreview, addMasterRecord,\r\n    getAddMasterCombo, getDynamicMasterTempalte, getChildComboMaster,\r\n    getChildValuesForAddMaster, viewExternalportalDetail, getDefaultTemplate, getEditMaster\r\n})(injectIntl(DynamicPreRegDesign))"]},"metadata":{},"sourceType":"module"}