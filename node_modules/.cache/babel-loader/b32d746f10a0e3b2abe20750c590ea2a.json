{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructjsonOptionList, constructOptionList, parentChildComboLoad } from '../components/CommonScript';\nimport { getValidComponent, replaceChildFromChildren } from '../components/droparea/helpers';\nimport { ReactComponents, transactionStatus } from '../components/Enumeration';\nimport Axios from 'axios';\nimport { getTreeByProduct } from './RegistrationAction';\nexport function getReactInputFields(userinfo, operation, respObj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const listURL = [];\n    listURL[0] = rsapi.post(\"dynamicpreregdesign/getReactComponents\", {\n      userinfo\n    });\n    listURL[1] = rsapi.post(\"dynamicpreregdesign/getReactInputFields\", {\n      userinfo\n    });\n    Axios.all(listURL).then(response => {\n      respObj = respObj ? { ...respObj\n      } : {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ReactInputFields: response[1].data,\n          ReactComponents: response[0].data.components,\n          ReactTables: constructOptionList(response[0].data.tables, 'stablename', 'displayname').get(\"OptionList\"),\n          selectedFieldRecord: {},\n          openModal: false,\n          loading: false,\n          openPortal: true,\n          operation,\n          ...respObj\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function selectRegistrationTemplate(template, masterData, userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\n      nreactregtemplatecode: template.nreactregtemplatecode,\n      userinfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedTemplate: response.data\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationTemplate(selectedSampleType, masterData, userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getDynamicPreRegDesign\", {\n      nsampletypecode: selectedSampleType.value,\n      userinfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          realSampleType: [{\n            \"label\": \"IDS_SAMPLETYPE\",\n            \"value\": selectedSampleType.label,\n            \"item\": selectedSampleType\n          }],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditRegTemplate(masterData, userinfo, editId) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\n      nreactregtemplatecode: masterData.selectedTemplate.nreactregtemplatecode,\n      userinfo\n    }).then(response => {\n      if (response.data.ntransactionstatus == transactionStatus.DRAFT) {\n        let jsonData = response.data.jsondata;\n        sortData(masterData);\n        const respObj = {\n          masterData,\n          ncontrolcode: editId,\n          openPortal: true,\n          loading: false,\n          openModal: false,\n          design: jsonData,\n          selectedRecord: {\n            templateName: response.data.sregtemplatename\n          }\n        }; // dispatch({\n        //     type: DEFAULT_RETURN,\n        //     payload: {\n        //         masterData,\n        //         ncontrolcode: editId,\n        //         // openPortal: true,\n        //         // loading: false,\n        //         design: jsonData,\n        //         selectedRecord: { templateName: response.data.sregtemplatename }\n        //     }\n        // })\n\n        dispatch(getReactInputFields(userinfo, \"update\", respObj));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterStatus: \"IDS_SELECTDRAFTRECORD\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getJsonValue(PGjsonData) {\n  if (Array.isArray(PGjsonData)) {\n    let JSONData = [];\n    PGjsonData.map(data => {\n      JSONData.push(JSON.parse(data.jsondata));\n    });\n    return JSONData;\n  } else {\n    return JSON.parse(PGjsonData);\n  }\n}\nexport function getTableColumns(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getTableColumns\", {\n      stablename,\n      userinfo\n    }).then(response => {\n      columnInfo = columnInfo || {};\n      const staicColumns = response.data.jstaticcolumns || [];\n      const dynamicColumns = response.data.jdynamiccolumns || [];\n      const multilingualColumns = response.data.jmultilingualcolumn || [];\n      const numericColumns = response.data.jnumericcolumns || [];\n      const primaryKeyName = response.data.sprimarykeyname;\n      columnInfo = { ...columnInfo,\n        [stablename]: {\n          staicColumns,\n          dynamicColumns,\n          multilingualColumns,\n          numericColumns,\n          primaryKeyName\n        }\n      };\n      let defaultColumn = {};\n      let comboData = [];\n      staicColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode],\n          value: item.columnname,\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode],\n            value: item.columnname,\n            item\n          };\n        }\n      });\n      dynamicColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode],\n          value: item.columnname,\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode],\n            value: item.columnname,\n            item\n          };\n        }\n      });\n      multilingualColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode],\n          value: item.columnname,\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode],\n            value: item.columnname,\n            item\n          };\n        }\n      });\n\n      if (defaultColumn.item.ismultilingual) {\n        selectedFieldRecord['isMultiLingual'] = true;\n      }\n\n      if (updateComponents) {\n        componentData = componentData || {};\n        selectedFieldRecord = { ...selectedFieldRecord,\n          column: defaultColumn,\n          displaymember: defaultColumn.value,\n          valuemember: primaryKeyName\n        };\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      } else if (componentData === undefined) {\n        componentData = componentData || {};\n        selectedFieldRecord = { ...selectedFieldRecord,\n          column: defaultColumn,\n          displaymember: defaultColumn.value,\n          valuemember: primaryKeyName\n        };\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      } else {\n        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n        componentData = { ...componentData,\n          validComponents\n        };\n      }\n\n      columnInfo = { ...columnInfo,\n        [stablename]: { ...columnInfo[stablename],\n          tableColumn: comboData\n        }\n      };\n      let optionalPayload = {\n        selectedComponentpath: Array.isArray(path) ? path.join(\"-\") : undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          design,\n          selectedFieldRecord,\n          ...optionalPayload,\n          tableColumn: comboData,\n          columnInfo,\n          primaryKeyName,\n          ...componentData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPreviewTemplate(masterData, userinfo, editId, columnList, selectedRecord, childColumnList, comboComponents, withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList,\n      childcolumnlist: childColumnList,\n      userinfo\n    });\n    Axios.all([timeZoneService, actualService]).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      };\n      const newcomboData = parentChildComboLoad(columnList, response[1].data, selectedRecord, childColumnList, withoutCombocomponent, undefined, userinfo.slanguagetypecode); // sortData(masterData)\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      withoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          if (componentrow.mandatory) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\n          } // if (componentrow.timezone) {\n          //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\n          //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\n          //         defaulttimezone ? defaulttimezone : -1\n          // }\n\n        } else if (componentrow.inputtype === \"radio\") {\n          selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n        }\n      });\n\n      if (preview) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            timeZoneList,\n            defaultTimeZone,\n            masterData,\n            ncontrolcode: editId,\n            openModal,\n            loading: false,\n            comboData: comboData1,\n            selectedRecord: selectedRecord1,\n            comboComponents,\n            withoutCombocomponent,\n            openPortal,\n            columnList,\n            childColumnList,\n            screenName // childOperation:true\n\n          }\n        });\n      } else {\n        if (mapOfFilterRegData.nsampletypecode === 1) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = newcomboData.selectedRecord[ProductCategory[0].label] && newcomboData.selectedRecord[ProductCategory[0].label].value;\n            const ncategorybasedFlow = newcomboData.selectedRecord[ProductCategory[0].label] && newcomboData.selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = newcomboData.selectedRecord[Product[0].label] && newcomboData.selectedRecord[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  loading: false,\n                  comboData: newcomboData.comboData,\n                  selectedRecord: newcomboData.selectedRecord,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                }\n              });\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                loading: false,\n                comboData: newcomboData.comboData,\n                selectedRecord: newcomboData.selectedRecord,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                operation,\n                screenName\n              }\n            });\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === 2) {\n          const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\n\n          if (InstrumentCategory.length > 0) {\n            const ninstrumentcatcode = newcomboData.selectedRecord[InstrumentCategory[0].label] && newcomboData.selectedRecord[InstrumentCategory[0].label].value;\n            const ncategorybasedFlow = newcomboData.selectedRecord[InstrumentCategory[0].label] && newcomboData.selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['ninstrumentcode'] = -1;\n                mapOfFilterRegData['ninstrumentcatcode'] = ninstrumentcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = newcomboData.selectedRecord[Product[0].label] && newcomboData.selectedRecord[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  loading: false,\n                  comboData: newcomboData.comboData,\n                  selectedRecord: newcomboData.selectedRecord,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                }\n              });\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                loading: false,\n                comboData: newcomboData.comboData,\n                selectedRecord: newcomboData.selectedRecord,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                operation,\n                screenName\n              }\n            });\n          }\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildValues(inputParem, userinfo, selectedRecord, comboData, parentcolumnlist, childcolumnlist, withoutCombocomponent, parentListWithReadonly, productCategory, product, mapOfRegFilterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getChildValues', {\n      child: inputParem.child,\n      parentdata: inputParem.item.jsondata,\n      parentsource: inputParem.source,\n      [inputParem.primarykeyField]: inputParem.value,\n      valuemember: inputParem.primarykeyField,\n      childcolumnlist,\n      userinfo,\n      parentcolumnlist\n    }).then(response => {\n      let returnObj = { ...comboData,\n        ...response.data\n      };\n      returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedRecord, childcolumnlist, withoutCombocomponent, inputParem.item, userinfo.slanguagetypecode);\n      selectedRecord = { ...selectedRecord,\n        ...returnObj.selectedRecord\n      };\n\n      if (productCategory) {\n        // const nproductcatcode = selectedRecord['Product Category'] && selectedRecord['Product Category'].value\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (product) {\n        // if (mapOfRegFilterData.nproductcode === -1) {\n        //        if(inputParem.nameofdefaultcomp===\"Product\"){\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: []\n            }\n          }); // }\n          // }\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            comboData: { ...returnObj.comboData\n            },\n            selectedRecord\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/DynamicPreRegDesignAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","sortData","constructjsonOptionList","constructOptionList","parentChildComboLoad","getValidComponent","replaceChildFromChildren","ReactComponents","transactionStatus","Axios","getTreeByProduct","getReactInputFields","userinfo","operation","respObj","dispatch","listURL","post","all","then","response","type","payload","ReactInputFields","data","components","ReactTables","tables","get","selectedFieldRecord","openModal","loading","openPortal","catch","error","status","message","warn","selectRegistrationTemplate","template","masterData","nreactregtemplatecode","selectedTemplate","getRegistrationTemplate","selectedSampleType","nsampletypecode","value","searchedData","undefined","realSampleType","label","getEditRegTemplate","editId","ntransactionstatus","DRAFT","jsonData","jsondata","ncontrolcode","design","selectedRecord","templateName","sregtemplatename","masterStatus","getJsonValue","PGjsonData","Array","isArray","JSONData","map","push","JSON","parse","getTableColumns","stablename","path","columnInfo","componentData","updateComponents","staicColumns","jstaticcolumns","dynamicColumns","jdynamiccolumns","multilingualColumns","jmultilingualcolumn","numericColumns","jnumericcolumns","primaryKeyName","sprimarykeyname","defaultColumn","comboData","item","displayname","slanguagetypecode","columnname","default","ismultilingual","column","displaymember","valuemember","componentcode","COMBO","validComponents","tableColumn","optionalPayload","selectedComponentpath","join","getPreviewTemplate","columnList","childColumnList","comboComponents","withoutCombocomponent","mapOfFilterRegData","preview","screenName","timeZoneService","actualService","parentcolumnlist","childcolumnlist","timeZoneMap","timeZoneList","defaultTimeZone","stimezoneid","ntimezonecode","newcomboData","comboData1","selectedRecord1","componentrow","inputtype","mandatory","loadcurrentdate","Date","radioOptions","tags","text","ProductCategory","filter","x","name","length","nproductcatcode","ncategorybasedFlow","inputParam","Product","nproductcode","InstrumentCategory","ninstrumentcatcode","getChildValues","inputParem","parentListWithReadonly","productCategory","product","mapOfRegFilterData","child","parentdata","parentsource","source","primarykeyField","returnObj","nameofdefaultcomp","ProductName","AgaramTree","ActiveKey","FocusKey","OpenNodes","Test","SelectedTest","selectedSpec","Component","selectComponent","selectedComponent","Specification"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,QAAT,EAAmBC,uBAAnB,EAA4CC,mBAA5C,EAAiEC,oBAAjE,QAA6F,4BAA7F;AACA,SAASC,iBAAT,EAA4BC,wBAA5B,QAA4D,gCAA5D;AACA,SAASC,eAAT,EAA0BC,iBAA1B,QAAmD,2BAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AAEA,OAAO,SAASC,mBAAT,CAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,OAAlD,EAA2D;AAE9D,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACf,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,UAAMgB,OAAO,GAAG,EAAhB;AACAA,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAanB,KAAK,CAACoB,IAAN,CAAW,wCAAX,EAAqD;AAAEL,MAAAA;AAAF,KAArD,CAAb;AACAI,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAanB,KAAK,CAACoB,IAAN,CAAW,yCAAX,EAAsD;AAAEL,MAAAA;AAAF,KAAtD,CAAb;AACAH,IAAAA,KAAK,CAACS,GAAN,CAAUF,OAAV,EACKG,IADL,CACUC,QAAQ,IAAI;AACdN,MAAAA,OAAO,GAAGA,OAAO,GAAG,EAAE,GAAGA;AAAL,OAAH,GAAoB,EAArC;AACAC,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEvB,cADD;AAELwB,QAAAA,OAAO,EAAE;AACLC,UAAAA,gBAAgB,EAAEH,QAAQ,CAAC,CAAD,CAAR,CAAYI,IADzB;AAELjB,UAAAA,eAAe,EAAEa,QAAQ,CAAC,CAAD,CAAR,CAAYI,IAAZ,CAAiBC,UAF7B;AAGLC,UAAAA,WAAW,EAAEvB,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYI,IAAZ,CAAiBG,MAAlB,EAA0B,YAA1B,EAAwC,aAAxC,CAAnB,CAA0EC,GAA1E,CAA8E,YAA9E,CAHR;AAILC,UAAAA,mBAAmB,EAAE,EAJhB;AAKLC,UAAAA,SAAS,EAAE,KALN;AAMLC,UAAAA,OAAO,EAAE,KANJ;AAOLC,UAAAA,UAAU,EAAE,IAPP;AAQLnB,UAAAA,SARK;AASL,aAAGC;AATE;AAFJ,OAAD,CAAR;AAcH,KAjBL,EAkBKmB,KAlBL,CAkBWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEvB,cAAR;AAAwBwB,QAAAA,OAAO,EAAE;AAAES,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIG,KAAK,CAACd,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACHrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACd,QAAN,CAAeI,IAA1B;AACH;AACJ,KAzBL;AA0BH,GA/BD;AAgCH;AACD,OAAO,SAASc,0BAAT,CAAoCC,QAApC,EAA8CC,UAA9C,EAA0D5B,QAA1D,EAAoE;AACvE,SAAO,UAAUG,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACf,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoB,IAAN,CAAW,iDAAX,EAA8D;AAC1DwB,MAAAA,qBAAqB,EAAEF,QAAQ,CAACE,qBAD0B;AAE1D7B,MAAAA;AAF0D,KAA9D,EAIKO,IAJL,CAIUC,QAAQ,IAAI;AAEdL,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEvB,cADD;AAELwB,QAAAA,OAAO,EAAE;AAAEkB,UAAAA,UAAU,EAAE,EAAE,GAAGA,UAAL;AAAiBE,YAAAA,gBAAgB,EAAEtB,QAAQ,CAACI;AAA5C,WAAd;AAAkEO,UAAAA,OAAO,EAAE;AAA3E;AAFJ,OAAD,CAAR;AAIH,KAVL,EAWKE,KAXL,CAWWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEvB,cAAR;AAAwBwB,QAAAA,OAAO,EAAE;AAAES,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIG,KAAK,CAACd,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACHrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACd,QAAN,CAAeI,IAA1B;AACH;AACJ,KAlBL;AAmBH,GArBD;AAsBH;AACD,OAAO,SAASmB,uBAAT,CAAiCC,kBAAjC,EAAqDJ,UAArD,EAAiE5B,QAAjE,EAA2E;AAC9E,SAAO,UAAUG,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACf,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoB,IAAN,CAAW,4CAAX,EAAyD;AACrD4B,MAAAA,eAAe,EAAED,kBAAkB,CAACE,KADiB;AAErDlC,MAAAA;AAFqD,KAAzD,EAIKO,IAJL,CAIUC,QAAQ,IAAI;AACdoB,MAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiB,WAAGpB,QAAQ,CAACI,IAA7B;AAAmCuB,QAAAA,YAAY,EAAEC;AAAjD,OAAb;AACA/C,MAAAA,QAAQ,CAACuC,UAAD,CAAR;AACAzB,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEvB,cADD;AAELwB,QAAAA,OAAO,EAAE;AACLkB,UAAAA,UADK;AAELS,UAAAA,cAAc,EAAE,CAAC;AACb,qBAAS,gBADI;AAEb,qBAASL,kBAAkB,CAACM,KAFf;AAGb,oBAAQN;AAHK,WAAD,CAFX;AAOLb,UAAAA,OAAO,EAAE;AAPJ;AAFJ,OAAD,CAAR;AAaH,KApBL,EAqBKE,KArBL,CAqBWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEvB,cAAR;AAAwBwB,QAAAA,OAAO,EAAE;AAAES,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIG,KAAK,CAACd,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACHrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACd,QAAN,CAAeI,IAA1B;AACH;AACJ,KA5BL;AA6BH,GA/BD;AAgCH;AACD,OAAO,SAAS2B,kBAAT,CAA4BX,UAA5B,EAAwC5B,QAAxC,EAAkDwC,MAAlD,EAA0D;AAC7D,SAAO,UAAUrC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACf,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoB,IAAN,CAAW,iDAAX,EAA8D;AAC1DwB,MAAAA,qBAAqB,EAAED,UAAU,CAACE,gBAAX,CAA4BD,qBADO;AAE1D7B,MAAAA;AAF0D,KAA9D,EAIKO,IAJL,CAIUC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACI,IAAT,CAAc6B,kBAAd,IAAoC7C,iBAAiB,CAAC8C,KAA1D,EAAiE;AAC7D,YAAIC,QAAQ,GAAGnC,QAAQ,CAACI,IAAT,CAAcgC,QAA7B;AACAvD,QAAAA,QAAQ,CAACuC,UAAD,CAAR;AAEA,cAAM1B,OAAO,GAAG;AACZ0B,UAAAA,UADY;AAEZiB,UAAAA,YAAY,EAAEL,MAFF;AAGZpB,UAAAA,UAAU,EAAE,IAHA;AAIZD,UAAAA,OAAO,EAAE,KAJG;AAKZD,UAAAA,SAAS,EAAE,KALC;AAMZ4B,UAAAA,MAAM,EAAEH,QANI;AAOZI,UAAAA,cAAc,EAAE;AAAEC,YAAAA,YAAY,EAAExC,QAAQ,CAACI,IAAT,CAAcqC;AAA9B;AAPJ,SAAhB,CAJ6D,CAa7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA9C,QAAAA,QAAQ,CAACJ,mBAAmB,CAACC,QAAD,EAAW,QAAX,EAAqBE,OAArB,CAApB,CAAR;AACH,OAzBD,MAyBO;AACHC,QAAAA,QAAQ,CAAC;AAAEM,UAAAA,IAAI,EAAEvB,cAAR;AAAwBwB,UAAAA,OAAO,EAAE;AAAES,YAAAA,OAAO,EAAE,KAAX;AAAkB+B,YAAAA,YAAY,EAAE;AAAhC;AAAjC,SAAD,CAAR;AACH;AACJ,KAjCL,EAkCK7B,KAlCL,CAkCWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEvB,cAAR;AAAwBwB,QAAAA,OAAO,EAAE;AAAES,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIG,KAAK,CAACd,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACHrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACd,QAAN,CAAeI,IAA1B;AACH;AACJ,KAzCL;AA0CH,GA5CD;AA6CH;AAED,OAAO,SAASuC,YAAT,CAAsBC,UAAtB,EAAkC;AAErC,MAAIC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAJ,EAA+B;AAC3B,QAAIG,QAAQ,GAAG,EAAf;AACAH,IAAAA,UAAU,CAACI,GAAX,CAAe5C,IAAI,IAAI;AACnB2C,MAAAA,QAAQ,CAACE,IAAT,CAAcC,IAAI,CAACC,KAAL,CAAW/C,IAAI,CAACgC,QAAhB,CAAd;AACH,KAFD;AAGA,WAAOW,QAAP;AACH,GAND,MAMO;AACH,WAAOG,IAAI,CAACC,KAAL,CAAWP,UAAX,CAAP;AACH;AAEJ;AACD,OAAO,SAASQ,eAAT,CAAyBd,MAAzB,EAAiC7B,mBAAjC,EAAsD4C,UAAtD,EAAkE7D,QAAlE,EAA4E8D,IAA5E,EAAkFC,UAAlF,EAA8FC,aAA9F,EAA6GC,gBAA7G,EAA+H;AAClI,SAAO,UAAU9D,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACf,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoB,IAAN,CAAW,qCAAX,EAAkD;AAAEwD,MAAAA,UAAF;AAAc7D,MAAAA;AAAd,KAAlD,EACKO,IADL,CACUC,QAAQ,IAAI;AACduD,MAAAA,UAAU,GAAGA,UAAU,IAAI,EAA3B;AACA,YAAMG,YAAY,GAAG1D,QAAQ,CAACI,IAAT,CAAcuD,cAAd,IAAgC,EAArD;AACA,YAAMC,cAAc,GAAG5D,QAAQ,CAACI,IAAT,CAAcyD,eAAd,IAAiC,EAAxD;AACA,YAAMC,mBAAmB,GAAG9D,QAAQ,CAACI,IAAT,CAAc2D,mBAAd,IAAqC,EAAjE;AACA,YAAMC,cAAc,GAAGhE,QAAQ,CAACI,IAAT,CAAc6D,eAAd,IAAiC,EAAxD;AACA,YAAMC,cAAc,GAAGlE,QAAQ,CAACI,IAAT,CAAc+D,eAArC;AACAZ,MAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAET,SAACF,UAAD,GAAc;AACVK,UAAAA,YADU;AAEVE,UAAAA,cAFU;AAGVE,UAAAA,mBAHU;AAIVE,UAAAA,cAJU;AAKVE,UAAAA;AALU;AAFL,OAAb;AAUA,UAAIE,aAAa,GAAG,EAApB;AACA,UAAIC,SAAS,GAAG,EAAhB;AACAX,MAAAA,YAAY,CAACV,GAAb,CAAiBsB,IAAI,IAAI;AACrBD,QAAAA,SAAS,CAACpB,IAAV,CAAe;AACXnB,UAAAA,KAAK,EAAEwC,IAAI,CAACC,WAAL,CAAiB/E,QAAQ,CAACgF,iBAA1B,CADI;AAEX9C,UAAAA,KAAK,EAAE4C,IAAI,CAACG,UAFD;AAGXH,UAAAA;AAHW,SAAf;;AAKA,YAAIA,IAAI,CAACI,OAAT,EAAkB;AACdN,UAAAA,aAAa,GAAG;AACZtC,YAAAA,KAAK,EAAEwC,IAAI,CAACC,WAAL,CAAiB/E,QAAQ,CAACgF,iBAA1B,CADK;AAEZ9C,YAAAA,KAAK,EAAE4C,IAAI,CAACG,UAFA;AAGZH,YAAAA;AAHY,WAAhB;AAKH;AACJ,OAbD;AAcAV,MAAAA,cAAc,CAACZ,GAAf,CAAmBsB,IAAI,IAAI;AACvBD,QAAAA,SAAS,CAACpB,IAAV,CAAe;AACXnB,UAAAA,KAAK,EAAEwC,IAAI,CAACC,WAAL,CAAiB/E,QAAQ,CAACgF,iBAA1B,CADI;AAEX9C,UAAAA,KAAK,EAAE4C,IAAI,CAACG,UAFD;AAGXH,UAAAA;AAHW,SAAf;;AAKA,YAAIA,IAAI,CAACI,OAAT,EAAkB;AACdN,UAAAA,aAAa,GAAG;AACZtC,YAAAA,KAAK,EAAEwC,IAAI,CAACC,WAAL,CAAiB/E,QAAQ,CAACgF,iBAA1B,CADK;AAEZ9C,YAAAA,KAAK,EAAE4C,IAAI,CAACG,UAFA;AAGZH,YAAAA;AAHY,WAAhB;AAKH;AACJ,OAbD;AAcAR,MAAAA,mBAAmB,CAACd,GAApB,CAAwBsB,IAAI,IAAI;AAC5BD,QAAAA,SAAS,CAACpB,IAAV,CAAe;AACXnB,UAAAA,KAAK,EAAEwC,IAAI,CAACC,WAAL,CAAiB/E,QAAQ,CAACgF,iBAA1B,CADI;AAEX9C,UAAAA,KAAK,EAAE4C,IAAI,CAACG,UAFD;AAGXH,UAAAA;AAHW,SAAf;;AAKA,YAAIA,IAAI,CAACI,OAAT,EAAkB;AACdN,UAAAA,aAAa,GAAG;AACZtC,YAAAA,KAAK,EAAEwC,IAAI,CAACC,WAAL,CAAiB/E,QAAQ,CAACgF,iBAA1B,CADK;AAEZ9C,YAAAA,KAAK,EAAE4C,IAAI,CAACG,UAFA;AAGZH,YAAAA;AAHY,WAAhB;AAKH;AACJ,OAbD;;AAcA,UAAIF,aAAa,CAACE,IAAd,CAAmBK,cAAvB,EAAuC;AACnClE,QAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwC,IAAxC;AACH;;AACD,UAAIgD,gBAAJ,EAAsB;AAClBD,QAAAA,aAAa,GAAGA,aAAa,IAAI,EAAjC;AACA/C,QAAAA,mBAAmB,GAAG,EAAE,GAAGA,mBAAL;AAA0BmE,UAAAA,MAAM,EAAER,aAAlC;AAAiDS,UAAAA,aAAa,EAAET,aAAa,CAAC1C,KAA9E;AAAqFoD,UAAAA,WAAW,EAAEZ;AAAlG,SAAtB;AACA5B,QAAAA,MAAM,GAAGpD,wBAAwB,CAACoD,MAAD,EAASgB,IAAT,EAAe7C,mBAAf,CAAjC;;AACA,YAAIA,mBAAmB,CAACsE,aAApB,KAAsC5F,eAAe,CAAC6F,KAA1D,EAAiE;AAC7D,cAAIC,eAAe,GAAGhG,iBAAiB,CAACwB,mBAAD,EAAsB+C,aAAa,CAACnD,UAApC,EAAgDkD,UAAhD,CAAvC;AACAC,UAAAA,aAAa,GAAG,EAAE,GAAGA,aAAL;AAAoByB,YAAAA;AAApB,WAAhB;AACH;AACJ,OARD,MAQO,IAAIzB,aAAa,KAAK5B,SAAtB,EAAiC;AACpC4B,QAAAA,aAAa,GAAGA,aAAa,IAAI,EAAjC;AACA/C,QAAAA,mBAAmB,GAAG,EAAE,GAAGA,mBAAL;AAA0BmE,UAAAA,MAAM,EAAER,aAAlC;AAAiDS,UAAAA,aAAa,EAAET,aAAa,CAAC1C,KAA9E;AAAqFoD,UAAAA,WAAW,EAAEZ;AAAlG,SAAtB;AACA5B,QAAAA,MAAM,GAAGpD,wBAAwB,CAACoD,MAAD,EAASgB,IAAT,EAAe7C,mBAAf,CAAjC;;AACA,YAAIA,mBAAmB,CAACsE,aAApB,KAAsC5F,eAAe,CAAC6F,KAA1D,EAAiE;AAC7D,cAAIC,eAAe,GAAGhG,iBAAiB,CAACwB,mBAAD,EAAsB+C,aAAa,CAACnD,UAApC,EAAgDkD,UAAhD,CAAvC;AACAC,UAAAA,aAAa,GAAG,EAAE,GAAGA,aAAL;AAAoByB,YAAAA;AAApB,WAAhB;AACH;AACJ,OARM,MAQA;AACH,YAAIA,eAAe,GAAGhG,iBAAiB,CAACwB,mBAAD,EAAsB+C,aAAa,CAACnD,UAApC,EAAgDkD,UAAhD,CAAvC;AACAC,QAAAA,aAAa,GAAG,EAAE,GAAGA,aAAL;AAAoByB,UAAAA;AAApB,SAAhB;AACH;;AACD1B,MAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAET,SAACF,UAAD,GAAc,EAAE,GAAGE,UAAU,CAACF,UAAD,CAAf;AAA6B6B,UAAAA,WAAW,EAAEb;AAA1C;AAFL,OAAb;AAIA,UAAIc,eAAe,GAAG;AAClBC,QAAAA,qBAAqB,EAAEvC,KAAK,CAACC,OAAN,CAAcQ,IAAd,IAAsBA,IAAI,CAAC+B,IAAL,CAAU,GAAV,CAAtB,GAAuCzD;AAD5C,OAAtB;AAIAjC,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEvB,cADD;AAELwB,QAAAA,OAAO,EAAE;AACLS,UAAAA,OAAO,EAAE,KADJ;AAEL2B,UAAAA,MAFK;AAGL7B,UAAAA,mBAHK;AAIL,aAAG0E,eAJE;AAKLD,UAAAA,WAAW,EAAEb,SALR;AAMLd,UAAAA,UANK;AAOLW,UAAAA,cAPK;AAQL,aAAGV;AARE;AAFJ,OAAD,CAAR;AAaH,KA1GL,EA2GK3C,KA3GL,CA2GWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEvB,cAAR;AAAwBwB,QAAAA,OAAO,EAAE;AAAES,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIG,KAAK,CAACd,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACHrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACd,QAAN,CAAeI,IAA1B;AACH;AACJ,KAlHL;AAmHH,GArHD;AAsHH;AAED,OAAO,SAASkF,kBAAT,CAA4BlE,UAA5B,EAAwC5B,QAAxC,EACHwC,MADG,EACKuD,UADL,EACiBhD,cADjB,EACiCiD,eADjC,EACkDC,eADlD,EAEHC,qBAFG,EAEoB9E,UAFpB,EAEgCF,SAFhC,EAE2CiF,kBAF3C,EAE+DC,OAF/D,EAEwEnG,SAFxE,EAEmFoG,UAFnF,EAE+F;AAClG,SAAO,UAAUlG,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACf,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,UAAMkH,eAAe,GAAGrH,KAAK,CAACoB,IAAN,CAAW,sBAAX,CAAxB;AACA,UAAMkG,aAAa,GAAGtH,KAAK,CAACoB,IAAN,CAAW,oCAAX,EAAiD;AACnEmG,MAAAA,gBAAgB,EAAET,UADiD;AAEnEU,MAAAA,eAAe,EAAET,eAFkD;AAGnEhG,MAAAA;AAHmE,KAAjD,CAAtB;AAKAH,IAAAA,KAAK,CAACS,GAAN,CAAU,CAACgG,eAAD,EAAkBC,aAAlB,CAAV,EACKhG,IADL,CACUC,QAAQ,IAAI;AACd,YAAMkG,WAAW,GAAGnH,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYI,IAAZ,IAAoB,EAArB,EAAyB,eAAzB,EAA0C,aAA1C,EAAyDwB,SAAzD,EAAoEA,SAApE,EAA+E,IAA/E,CAAvC;AACA,YAAMuE,YAAY,GAAGD,WAAW,CAAC1F,GAAZ,CAAgB,YAAhB,CAArB;AACA,YAAM4F,eAAe,GAAG;AAAEtE,QAAAA,KAAK,EAAEtC,QAAQ,CAAC6G,WAAlB;AAA+B3E,QAAAA,KAAK,EAAElC,QAAQ,CAAC8G;AAA/C,OAAxB;AACA,YAAMC,YAAY,GAAGvH,oBAAoB,CAACuG,UAAD,EAAavF,QAAQ,CAAC,CAAD,CAAR,CAAYI,IAAzB,EAA+BmC,cAA/B,EAA+CiD,eAA/C,EAAgEE,qBAAhE,EAAuF9D,SAAvF,EAAkGpC,QAAQ,CAACgF,iBAA3G,CAAzC,CAJc,CAKd;;AAEA,YAAMgC,UAAU,GAAGD,YAAY,CAAClC,SAAhC;AACA,YAAMoC,eAAe,GAAGF,YAAY,CAAChE,cAArC;AACAmD,MAAAA,qBAAqB,CAAC1C,GAAtB,CAA0B0D,YAAY,IAAI;AACtC,YAAIA,YAAY,CAACC,SAAb,KAA2B,MAA/B,EAAuC;AACnC,cAAID,YAAY,CAACE,SAAjB,EAA4B;AACxBH,YAAAA,eAAe,CAACC,YAAY,CAAC5E,KAAd,CAAf,GAAsC4E,YAAY,CAACG,eAAb,GAA+B,IAAIC,IAAJ,EAA/B,GAA4C,EAAlF;AACH,WAHkC,CAInC;AACA;AACA;AACA;AACA;;AACH,SATD,MAUK,IAAIJ,YAAY,CAACC,SAAb,KAA2B,OAA/B,EAAwC;AACzCF,UAAAA,eAAe,CAACC,YAAY,CAAC5E,KAAd,CAAf,GAAsC4E,YAAY,CAACK,YAAb,GAClCL,YAAY,CAACK,YAAb,CAA0BC,IAA1B,CAA+B,CAA/B,EAAkCC,IADA,GACO,EAD7C;AAEH;AAEJ,OAhBD;;AAkBA,UAAIrB,OAAJ,EAAa;AACTjG,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEvB,cADD;AAELwB,UAAAA,OAAO,EAAE;AACLiG,YAAAA,YADK;AAELC,YAAAA,eAFK;AAGLhF,YAAAA,UAHK;AAILiB,YAAAA,YAAY,EAAEL,MAJT;AAKLtB,YAAAA,SALK;AAMLC,YAAAA,OAAO,EAAE,KANJ;AAOL0D,YAAAA,SAAS,EAAEmC,UAPN;AAQLjE,YAAAA,cAAc,EAAEkE,eARX;AASLhB,YAAAA,eATK;AAULC,YAAAA,qBAVK;AAWL9E,YAAAA,UAXK;AAYL2E,YAAAA,UAZK;AAaLC,YAAAA,eAbK;AAcLK,YAAAA,UAdK,CAeL;;AAfK;AAFJ,SAAD,CAAR;AAoBH,OArBD,MAsBK;AACD,YAAIF,kBAAkB,CAAClE,eAAnB,KAAuC,CAA3C,EAA8C;AAC1C,gBAAMyF,eAAe,GAAGzB,eAAe,CAAC0B,MAAhB,CAAuBC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,kBAAvC,CAAxB;;AACA,cAAIH,eAAe,CAACI,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B,kBAAMC,eAAe,GAAGhB,YAAY,CAAChE,cAAb,CAA4B2E,eAAe,CAAC,CAAD,CAAf,CAAmBpF,KAA/C,KACpByE,YAAY,CAAChE,cAAb,CAA4B2E,eAAe,CAAC,CAAD,CAAf,CAAmBpF,KAA/C,EAAsDJ,KAD1D;AAEA,kBAAM8F,kBAAkB,GAAGjB,YAAY,CAAChE,cAAb,CAA4B2E,eAAe,CAAC,CAAD,CAAf,CAAmBpF,KAA/C,KACpByE,YAAY,CAAChE,cAAb,CAA4B2E,eAAe,CAAC,CAAD,CAAf,CAAmBpF,KAA/C,EAAsD,MAAtD,EAA8D,UAA9D,EAA0E,oBAA1E,CADP;;AAEA,gBAAI0F,kBAAkB,KAAK5F,SAA3B,EAAsC;AAClC,kBAAI4F,kBAAkB,KAAK,CAA3B,EAA8B;AAC1B7B,gBAAAA,kBAAkB,CAAC,cAAD,CAAlB,GAAqC,CAAC,CAAtC;AACAA,gBAAAA,kBAAkB,CAAC,iBAAD,CAAlB,GAAwC4B,eAAxC;AACA,sBAAME,UAAU,GAAG;AACftB,kBAAAA,YADe;AAEfC,kBAAAA,eAFe;AAGfhF,kBAAAA,UAHe;AAIfiB,kBAAAA,YAAY,EAAEL,MAJC;AAKftB,kBAAAA,SALe;AAMf+E,kBAAAA,eANe;AAOfC,kBAAAA,qBAPe;AAQf9E,kBAAAA,UARe;AASf2E,kBAAAA,UATe;AAUfC,kBAAAA,eAVe;AAWf/F,kBAAAA,SAXe;AAYfoG,kBAAAA;AAZe,iBAAnB;AAcAlG,gBAAAA,QAAQ,CAACL,gBAAgB,CAACqG,kBAAD,EACrBY,YAAY,CAAChE,cADQ,EAErBgE,YAAY,CAAClC,SAFQ,EAEGoD,UAFH,CAAjB,CAAR;AAGH,eApBD,MAqBK;AACD,sBAAMC,OAAO,GAAGjC,eAAe,CAAC0B,MAAhB,CAAuBC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,SAAvC,CAAhB;;AACA,oBAAIK,OAAO,CAACJ,MAAR,GAAiB,CAArB,EAAwB;AACpB,wBAAMK,YAAY,GAAGpB,YAAY,CAAChE,cAAb,CAA4BmF,OAAO,CAAC,CAAD,CAAP,CAAW5F,KAAvC,KACdyE,YAAY,CAAChE,cAAb,CAA4BmF,OAAO,CAAC,CAAD,CAAP,CAAW5F,KAAvC,EAA8CJ,KADrD;AAGAiE,kBAAAA,kBAAkB,CAAC,cAAD,CAAlB,GAAqCgC,YAAY,KAAK/F,SAAjB,GAA6B+F,YAA7B,GAA4C,CAAC,CAAlF;AACAhC,kBAAAA,kBAAkB,CAAC,iBAAD,CAAlB,GAAwC4B,eAAxC;AAEA,wBAAME,UAAU,GAAG;AACftB,oBAAAA,YADe;AAEfC,oBAAAA,eAFe;AAGfhF,oBAAAA,UAHe;AAIfiB,oBAAAA,YAAY,EAAEL,MAJC;AAKftB,oBAAAA,SALe;AAMf+E,oBAAAA,eANe;AAOfC,oBAAAA,qBAPe;AAQf9E,oBAAAA,UARe;AASf2E,oBAAAA,UATe;AAUfC,oBAAAA,eAVe;AAWf/F,oBAAAA,SAXe;AAYfoG,oBAAAA;AAZe,mBAAnB;AAcAlG,kBAAAA,QAAQ,CAACL,gBAAgB,CAACqG,kBAAD,EACrBY,YAAY,CAAChE,cADQ,EAErBgE,YAAY,CAAClC,SAFQ,EAEGoD,UAFH,CAAjB,CAAR;AAGH;AACJ;AAEJ,aAnDD,MAmDO;AACH9H,cAAAA,QAAQ,CAAC;AACLM,gBAAAA,IAAI,EAAEvB,cADD;AAELwB,gBAAAA,OAAO,EAAE;AACLiG,kBAAAA,YADK;AAELC,kBAAAA,eAFK;AAGLhF,kBAAAA,UAHK;AAILiB,kBAAAA,YAAY,EAAEL,MAJT;AAKLtB,kBAAAA,SALK;AAMLC,kBAAAA,OAAO,EAAE,KANJ;AAOL0D,kBAAAA,SAAS,EAAEkC,YAAY,CAAClC,SAPnB;AAQL9B,kBAAAA,cAAc,EAAEgE,YAAY,CAAChE,cARxB;AASLkD,kBAAAA,eATK;AAULC,kBAAAA,qBAVK;AAWL9E,kBAAAA,UAXK;AAYL2E,kBAAAA,UAZK;AAaLC,kBAAAA,eAbK;AAcL/F,kBAAAA,SAdK;AAeLoG,kBAAAA;AAfK;AAFJ,eAAD,CAAR;AAoBH;AACJ,WA9ED,MA8EO;AACHlG,YAAAA,QAAQ,CAAC;AACLM,cAAAA,IAAI,EAAEvB,cADD;AAELwB,cAAAA,OAAO,EAAE;AACLiG,gBAAAA,YADK;AAELC,gBAAAA,eAFK;AAGLhF,gBAAAA,UAHK;AAILiB,gBAAAA,YAAY,EAAEL,MAJT;AAKLtB,gBAAAA,SALK;AAMLC,gBAAAA,OAAO,EAAE,KANJ;AAOL0D,gBAAAA,SAAS,EAAEkC,YAAY,CAAClC,SAPnB;AAQL9B,gBAAAA,cAAc,EAAEgE,YAAY,CAAChE,cARxB;AASLkD,gBAAAA,eATK;AAULC,gBAAAA,qBAVK;AAWL9E,gBAAAA,UAXK;AAYLnB,gBAAAA,SAZK;AAaLoG,gBAAAA;AAbK;AAFJ,aAAD,CAAR;AAkBH;AACJ,SApGD,MAoGO,IAAIF,kBAAkB,CAAClE,eAAnB,KAAuC,CAA3C,EAA8C;AACjD,gBAAMmG,kBAAkB,GAAGnC,eAAe,CAAC0B,MAAhB,CAAuBC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,qBAAvC,CAA3B;;AACA,cAAIO,kBAAkB,CAACN,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,kBAAMO,kBAAkB,GAAGtB,YAAY,CAAChE,cAAb,CAA4BqF,kBAAkB,CAAC,CAAD,CAAlB,CAAsB9F,KAAlD,KACvByE,YAAY,CAAChE,cAAb,CAA4BqF,kBAAkB,CAAC,CAAD,CAAlB,CAAsB9F,KAAlD,EAAyDJ,KAD7D;AAEA,kBAAM8F,kBAAkB,GAAGjB,YAAY,CAAChE,cAAb,CAA4BqF,kBAAkB,CAAC,CAAD,CAAlB,CAAsB9F,KAAlD,KACpByE,YAAY,CAAChE,cAAb,CAA4BqF,kBAAkB,CAAC,CAAD,CAAlB,CAAsB9F,KAAlD,EAAyD,MAAzD,EAAiE,UAAjE,EAA6E,oBAA7E,CADP;;AAEA,gBAAI0F,kBAAkB,KAAK5F,SAA3B,EAAsC;AAClC,kBAAI4F,kBAAkB,KAAK,CAA3B,EAA8B;AAC1B7B,gBAAAA,kBAAkB,CAAC,iBAAD,CAAlB,GAAwC,CAAC,CAAzC;AACAA,gBAAAA,kBAAkB,CAAC,oBAAD,CAAlB,GAA2CkC,kBAA3C;AACA,sBAAMJ,UAAU,GAAG;AACftB,kBAAAA,YADe;AAEfC,kBAAAA,eAFe;AAGfhF,kBAAAA,UAHe;AAIfiB,kBAAAA,YAAY,EAAEL,MAJC;AAKftB,kBAAAA,SALe;AAMf+E,kBAAAA,eANe;AAOfC,kBAAAA,qBAPe;AAQf9E,kBAAAA,UARe;AASf2E,kBAAAA,UATe;AAUfC,kBAAAA,eAVe;AAWf/F,kBAAAA,SAXe;AAYfoG,kBAAAA;AAZe,iBAAnB;AAcAlG,gBAAAA,QAAQ,CAACL,gBAAgB,CAACqG,kBAAD,EACrBY,YAAY,CAAChE,cADQ,EAErBgE,YAAY,CAAClC,SAFQ,EAEGoD,UAFH,CAAjB,CAAR;AAGH,eApBD,MAqBK;AACD,sBAAMC,OAAO,GAAGjC,eAAe,CAAC0B,MAAhB,CAAuBC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,SAAvC,CAAhB;;AACA,oBAAIK,OAAO,CAACJ,MAAR,GAAiB,CAArB,EAAwB;AACpB,wBAAMK,YAAY,GAAGpB,YAAY,CAAChE,cAAb,CAA4BmF,OAAO,CAAC,CAAD,CAAP,CAAW5F,KAAvC,KACdyE,YAAY,CAAChE,cAAb,CAA4BmF,OAAO,CAAC,CAAD,CAAP,CAAW5F,KAAvC,EAA8CJ,KADrD;AAGAiE,kBAAAA,kBAAkB,CAAC,cAAD,CAAlB,GAAqCgC,YAAY,KAAK/F,SAAjB,GAA6B+F,YAA7B,GAA4C,CAAC,CAAlF;AACAhC,kBAAAA,kBAAkB,CAAC,iBAAD,CAAlB,GAAwC4B,eAAxC;AAEA,wBAAME,UAAU,GAAG;AACftB,oBAAAA,YADe;AAEfC,oBAAAA,eAFe;AAGfhF,oBAAAA,UAHe;AAIfiB,oBAAAA,YAAY,EAAEL,MAJC;AAKftB,oBAAAA,SALe;AAMf+E,oBAAAA,eANe;AAOfC,oBAAAA,qBAPe;AAQf9E,oBAAAA,UARe;AASf2E,oBAAAA,UATe;AAUfC,oBAAAA,eAVe;AAWf/F,oBAAAA,SAXe;AAYfoG,oBAAAA;AAZe,mBAAnB;AAcAlG,kBAAAA,QAAQ,CAACL,gBAAgB,CAACqG,kBAAD,EACrBY,YAAY,CAAChE,cADQ,EAErBgE,YAAY,CAAClC,SAFQ,EAEGoD,UAFH,CAAjB,CAAR;AAGH;AACJ;AAEJ,aAnDD,MAmDO;AACH9H,cAAAA,QAAQ,CAAC;AACLM,gBAAAA,IAAI,EAAEvB,cADD;AAELwB,gBAAAA,OAAO,EAAE;AACLiG,kBAAAA,YADK;AAELC,kBAAAA,eAFK;AAGLhF,kBAAAA,UAHK;AAILiB,kBAAAA,YAAY,EAAEL,MAJT;AAKLtB,kBAAAA,SALK;AAMLC,kBAAAA,OAAO,EAAE,KANJ;AAOL0D,kBAAAA,SAAS,EAAEkC,YAAY,CAAClC,SAPnB;AAQL9B,kBAAAA,cAAc,EAAEgE,YAAY,CAAChE,cARxB;AASLkD,kBAAAA,eATK;AAULC,kBAAAA,qBAVK;AAWL9E,kBAAAA,UAXK;AAYL2E,kBAAAA,UAZK;AAaLC,kBAAAA,eAbK;AAcL/F,kBAAAA,SAdK;AAeLoG,kBAAAA;AAfK;AAFJ,eAAD,CAAR;AAoBH;AACJ,WA9ED,MA8EO;AACHlG,YAAAA,QAAQ,CAAC;AACLM,cAAAA,IAAI,EAAEvB,cADD;AAELwB,cAAAA,OAAO,EAAE;AACLiG,gBAAAA,YADK;AAELC,gBAAAA,eAFK;AAGLhF,gBAAAA,UAHK;AAILiB,gBAAAA,YAAY,EAAEL,MAJT;AAKLtB,gBAAAA,SALK;AAMLC,gBAAAA,OAAO,EAAE,KANJ;AAOL0D,gBAAAA,SAAS,EAAEkC,YAAY,CAAClC,SAPnB;AAQL9B,gBAAAA,cAAc,EAAEgE,YAAY,CAAChE,cARxB;AASLkD,gBAAAA,eATK;AAULC,gBAAAA,qBAVK;AAWL9E,gBAAAA,UAXK;AAYLnB,gBAAAA,SAZK;AAaLoG,gBAAAA;AAbK;AAFJ,aAAD,CAAR;AAkBH;AACJ;AACJ;AAGJ,KA/PL,EAgQKhF,KAhQL,CAgQWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEvB,cAAR;AAAwBwB,QAAAA,OAAO,EAAE;AAAES,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIG,KAAK,CAACd,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACHrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACd,QAAN,CAAeI,IAA1B;AACH;AACJ,KAvQL;AAwQH,GAhRD;AAiRH;AAED,OAAO,SAAS0H,cAAT,CAAwBC,UAAxB,EACHvI,QADG,EACO+C,cADP,EACuB8B,SADvB,EACkC2B,gBADlC,EAEHC,eAFG,EAEcP,qBAFd,EAEqCsC,sBAFrC,EAGHC,eAHG,EAGcC,OAHd,EAGuBC,kBAHvB,EAG2C;AAC9C,SAAO,UAAUxI,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACf,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoB,IAAN,CAAW,oCAAX,EAAiD;AAC7CuI,MAAAA,KAAK,EAAEL,UAAU,CAACK,KAD2B;AAE7CC,MAAAA,UAAU,EAAEN,UAAU,CAACzD,IAAX,CAAgBlC,QAFiB;AAG7CkG,MAAAA,YAAY,EAAEP,UAAU,CAACQ,MAHoB;AAI7C,OAACR,UAAU,CAACS,eAAZ,GAA8BT,UAAU,CAACrG,KAJI;AAK7CoD,MAAAA,WAAW,EAAEiD,UAAU,CAACS,eALqB;AAM7CvC,MAAAA,eAN6C;AAO7CzG,MAAAA,QAP6C;AAQ7CwG,MAAAA;AAR6C,KAAjD,EAUKjG,IAVL,CAUUC,QAAQ,IAAI;AACd,UAAIyI,SAAS,GAAG,EAAE,GAAGpE,SAAL;AAAgB,WAAGrE,QAAQ,CAACI;AAA5B,OAAhB;AACAqI,MAAAA,SAAS,GAAGzJ,oBAAoB,CAACgJ,sBAAD,EAAyBS,SAAzB,EAAoClG,cAApC,EAAoD0D,eAApD,EAAqEP,qBAArE,EAA4FqC,UAAU,CAACzD,IAAvG,EAA6G9E,QAAQ,CAACgF,iBAAtH,CAAhC;AACAjC,MAAAA,cAAc,GAAG,EAAE,GAAGA,cAAL;AAAqB,WAAGkG,SAAS,CAAClG;AAAlC,OAAjB;;AACA,UAAI0F,eAAJ,EAAqB;AACjB;AACAtI,QAAAA,QAAQ,CAACL,gBAAgB,CAAC6I,kBAAD,EAAqB5F,cAArB,EAAqC,EAAE,GAAGkG,SAAS,CAACpE;AAAf,SAArC,CAAjB,CAAR;AACH,OAHD,MAGO,IAAI6D,OAAJ,EAAa;AAChB;AACA;AACA,YAAI3F,cAAc,CAACwF,UAAU,CAACW,iBAAX,KAAiC,SAAjC,GAA6CX,UAAU,CAACjG,KAAxD,GAAgEiG,UAAU,CAACY,WAA5E,CAAlB,EAA4G;AACxGR,UAAAA,kBAAkB,CAAC,cAAD,CAAlB,GAAqC5F,cAAc,CAACwF,UAAU,CAACW,iBAAX,KAAiC,SAAjC,GAA6CX,UAAU,CAACjG,KAAxD,GAAgEiG,UAAU,CAACY,WAA5E,CAAd,GAAyGpG,cAAc,CAACwF,UAAU,CAACW,iBAAX,KAAiC,SAAjC,GAA6CX,UAAU,CAACjG,KAAxD,GAAgEiG,UAAU,CAACY,WAA5E,CAAd,CAAuGjH,KAAhN,GAAwN,CAAC,CAA9P;AACA/B,UAAAA,QAAQ,CAACL,gBAAgB,CAAC6I,kBAAD,EAAqB5F,cAArB,EAAqC,EAAE,GAAGkG,SAAS,CAACpE;AAAf,WAArC,CAAjB,CAAR;AACH,SAHD,MAGO;AACH9B,UAAAA,cAAc,CAAC,mBAAD,CAAd,GAAsC,EAAtC;AACAA,UAAAA,cAAc,CAAC,UAAD,CAAd,GAA6B,EAA7B;AACA5C,UAAAA,QAAQ,CAAC;AACLM,YAAAA,IAAI,EAAEvB,cADD;AAELwB,YAAAA,OAAO,EAAE;AACLS,cAAAA,OAAO,EAAE,KADJ;AAEL0D,cAAAA,SAAS,EAAE,EAAE,GAAGoE,SAAS,CAACpE;AAAf,eAFN;AAGL9B,cAAAA,cAHK;AAILqG,cAAAA,UAAU,EAAE,EAJP;AAKLC,cAAAA,SAAS,EAAE,EALN;AAMLC,cAAAA,QAAQ,EAAE,EANL;AAOLC,cAAAA,SAAS,EAAE,EAPN;AAQLC,cAAAA,IAAI,EAAE,EARD;AASLC,cAAAA,YAAY,EAAE,EATT;AAULC,cAAAA,YAAY,EAAE,EAVT;AAWLC,cAAAA,SAAS,EAAE,EAXN;AAYLC,cAAAA,eAAe,EAAE,EAZZ;AAaLC,cAAAA,iBAAiB,EAAE,EAbd;AAcLC,cAAAA,aAAa,EAAE;AAdV;AAFJ,WAAD,CAAR,CAHG,CAsBH;AACA;AACH;AAGJ,OAjCM,MAkCF;AACD3J,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEvB,cADD;AAELwB,UAAAA,OAAO,EAAE;AACLS,YAAAA,OAAO,EAAE,KADJ;AAEL0D,YAAAA,SAAS,EAAE,EAAE,GAAGoE,SAAS,CAACpE;AAAf,aAFN;AAGL9B,YAAAA;AAHK;AAFJ,SAAD,CAAR;AAQH;AACJ,KA7DL,EA8DK1B,KA9DL,CA8DWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEvB,cAAR;AAAwBwB,QAAAA,OAAO,EAAE;AAAES,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIG,KAAK,CAACd,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACHrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACd,QAAN,CAAeI,IAA1B;AACH;AACJ,KArEL;AAsEH,GAxED;AAyEH","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructjsonOptionList, constructOptionList, parentChildComboLoad } from '../components/CommonScript';\r\nimport { getValidComponent, replaceChildFromChildren } from '../components/droparea/helpers';\r\nimport { ReactComponents, transactionStatus } from '../components/Enumeration';\r\nimport Axios from 'axios';\r\nimport { getTreeByProduct } from './RegistrationAction';\r\n\r\nexport function getReactInputFields(userinfo, operation, respObj) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const listURL = [];\r\n        listURL[0] = rsapi.post(\"dynamicpreregdesign/getReactComponents\", { userinfo })\r\n        listURL[1] = rsapi.post(\"dynamicpreregdesign/getReactInputFields\", { userinfo })\r\n        Axios.all(listURL)\r\n            .then(response => {\r\n                respObj = respObj ? { ...respObj } : {}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ReactInputFields: response[1].data,\r\n                        ReactComponents: response[0].data.components,\r\n                        ReactTables: constructOptionList(response[0].data.tables, 'stablename', 'displayname').get(\"OptionList\"),\r\n                        selectedFieldRecord: {},\r\n                        openModal: false,\r\n                        loading: false,\r\n                        openPortal: true,\r\n                        operation,\r\n                        ...respObj\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function selectRegistrationTemplate(template, masterData, userinfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\r\n            nreactregtemplatecode: template.nreactregtemplatecode,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: { masterData: { ...masterData, selectedTemplate: response.data }, loading: false }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationTemplate(selectedSampleType, masterData, userinfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getDynamicPreRegDesign\", {\r\n            nsampletypecode: selectedSampleType.value,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data, searchedData: undefined }\r\n                sortData(masterData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        realSampleType: [{\r\n                            \"label\": \"IDS_SAMPLETYPE\",\r\n                            \"value\": selectedSampleType.label,\r\n                            \"item\": selectedSampleType\r\n                        }],\r\n                        loading: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getEditRegTemplate(masterData, userinfo, editId) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\r\n            nreactregtemplatecode: masterData.selectedTemplate.nreactregtemplatecode,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n                if (response.data.ntransactionstatus == transactionStatus.DRAFT) {\r\n                    let jsonData = response.data.jsondata;\r\n                    sortData(masterData)\r\n\r\n                    const respObj = {\r\n                        masterData,\r\n                        ncontrolcode: editId,\r\n                        openPortal: true,\r\n                        loading: false,\r\n                        openModal: false,\r\n                        design: jsonData,\r\n                        selectedRecord: { templateName: response.data.sregtemplatename }\r\n                    }\r\n                    // dispatch({\r\n                    //     type: DEFAULT_RETURN,\r\n                    //     payload: {\r\n                    //         masterData,\r\n                    //         ncontrolcode: editId,\r\n                    //         // openPortal: true,\r\n                    //         // loading: false,\r\n                    //         design: jsonData,\r\n                    //         selectedRecord: { templateName: response.data.sregtemplatename }\r\n                    //     }\r\n                    // })\r\n                    dispatch(getReactInputFields(userinfo, \"update\", respObj))\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, masterStatus: \"IDS_SELECTDRAFTRECORD\" } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getJsonValue(PGjsonData) {\r\n\r\n    if (Array.isArray(PGjsonData)) {\r\n        let JSONData = [];\r\n        PGjsonData.map(data => {\r\n            JSONData.push(JSON.parse(data.jsondata))\r\n        })\r\n        return JSONData;\r\n    } else {\r\n        return JSON.parse(PGjsonData);\r\n    }\r\n\r\n}\r\nexport function getTableColumns(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getTableColumns\", { stablename, userinfo })\r\n            .then(response => {\r\n                columnInfo = columnInfo || {}\r\n                const staicColumns = response.data.jstaticcolumns || []\r\n                const dynamicColumns = response.data.jdynamiccolumns || []\r\n                const multilingualColumns = response.data.jmultilingualcolumn || []\r\n                const numericColumns = response.data.jnumericcolumns || []\r\n                const primaryKeyName = response.data.sprimarykeyname\r\n                columnInfo = {\r\n                    ...columnInfo,\r\n                    [stablename]: {\r\n                        staicColumns,\r\n                        dynamicColumns,\r\n                        multilingualColumns,\r\n                        numericColumns,\r\n                        primaryKeyName\r\n                    }\r\n                }\r\n                let defaultColumn = {};\r\n                let comboData = []\r\n                staicColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode],\r\n                        value: item.columnname,\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode],\r\n                            value: item.columnname,\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                dynamicColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode],\r\n                        value: item.columnname,\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode],\r\n                            value: item.columnname,\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                multilingualColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode],\r\n                        value: item.columnname,\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode],\r\n                            value: item.columnname,\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                if (defaultColumn.item.ismultilingual) {\r\n                    selectedFieldRecord['isMultiLingual'] = true;\r\n                }\r\n                if (updateComponents) {\r\n                    componentData = componentData || {}\r\n                    selectedFieldRecord = { ...selectedFieldRecord, column: defaultColumn, displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                } else if (componentData === undefined) {\r\n                    componentData = componentData || {}\r\n                    selectedFieldRecord = { ...selectedFieldRecord, column: defaultColumn, displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                } else {\r\n                    let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                    componentData = { ...componentData, validComponents }\r\n                }\r\n                columnInfo = {\r\n                    ...columnInfo,\r\n                    [stablename]: { ...columnInfo[stablename], tableColumn: comboData }\r\n                }\r\n                let optionalPayload = {\r\n                    selectedComponentpath: Array.isArray(path) ? path.join(\"-\") : undefined,\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        design,\r\n                        selectedFieldRecord,\r\n                        ...optionalPayload,\r\n                        tableColumn: comboData,\r\n                        columnInfo,\r\n                        primaryKeyName,\r\n                        ...componentData\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPreviewTemplate(masterData, userinfo,\r\n    editId, columnList, selectedRecord, childColumnList, comboComponents,\r\n    withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo\r\n        })\r\n        Axios.all([timeZoneService, actualService])\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(columnList, response[1].data, selectedRecord, childColumnList, withoutCombocomponent, undefined, userinfo.slanguagetypecode)\r\n                // sortData(masterData)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                withoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.mandatory) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\r\n                        }\r\n                        // if (componentrow.timezone) {\r\n                        //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                        //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                        //         defaulttimezone ? defaulttimezone : -1\r\n                        // }\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\") {\r\n                        selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                            componentrow.radioOptions.tags[0].text : \"\";\r\n                    }\r\n\r\n                })\r\n\r\n                if (preview) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            masterData,\r\n                            ncontrolcode: editId,\r\n                            openModal,\r\n                            loading: false,\r\n                            comboData: comboData1,\r\n                            selectedRecord: selectedRecord1,\r\n                            comboComponents,\r\n                            withoutCombocomponent,\r\n                            openPortal,\r\n                            columnList,\r\n                            childColumnList,\r\n                            screenName\r\n                            // childOperation:true\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    if (mapOfFilterRegData.nsampletypecode === 1) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = newcomboData.selectedRecord[ProductCategory[0].label] &&\r\n                                newcomboData.selectedRecord[ProductCategory[0].label].value\r\n                            const ncategorybasedFlow = newcomboData.selectedRecord[ProductCategory[0].label]\r\n                                && newcomboData.selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        newcomboData.selectedRecord,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = newcomboData.selectedRecord[Product[0].label]\r\n                                            && newcomboData.selectedRecord[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            newcomboData.selectedRecord,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                dispatch({\r\n                                    type: DEFAULT_RETURN,\r\n                                    payload: {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        loading: false,\r\n                                        comboData: newcomboData.comboData,\r\n                                        selectedRecord: newcomboData.selectedRecord,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                })\r\n                            }\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    loading: false,\r\n                                    comboData: newcomboData.comboData,\r\n                                    selectedRecord: newcomboData.selectedRecord,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    operation,\r\n                                    screenName\r\n                                }\r\n                            })\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === 2) {\r\n                        const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\r\n                        if (InstrumentCategory.length > 0) {\r\n                            const ninstrumentcatcode = newcomboData.selectedRecord[InstrumentCategory[0].label] &&\r\n                                newcomboData.selectedRecord[InstrumentCategory[0].label].value\r\n                            const ncategorybasedFlow = newcomboData.selectedRecord[InstrumentCategory[0].label]\r\n                                && newcomboData.selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['ninstrumentcode'] = -1;\r\n                                    mapOfFilterRegData['ninstrumentcatcode'] = ninstrumentcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        newcomboData.selectedRecord,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = newcomboData.selectedRecord[Product[0].label]\r\n                                            && newcomboData.selectedRecord[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            newcomboData.selectedRecord,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                dispatch({\r\n                                    type: DEFAULT_RETURN,\r\n                                    payload: {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        loading: false,\r\n                                        comboData: newcomboData.comboData,\r\n                                        selectedRecord: newcomboData.selectedRecord,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                })\r\n                            }\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    loading: false,\r\n                                    comboData: newcomboData.comboData,\r\n                                    selectedRecord: newcomboData.selectedRecord,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    operation,\r\n                                    screenName\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getChildValues(inputParem,\r\n    userinfo, selectedRecord, comboData, parentcolumnlist,\r\n    childcolumnlist, withoutCombocomponent, parentListWithReadonly,\r\n    productCategory, product, mapOfRegFilterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getChildValues', {\r\n            child: inputParem.child,\r\n            parentdata: inputParem.item.jsondata,\r\n            parentsource: inputParem.source,\r\n            [inputParem.primarykeyField]: inputParem.value,\r\n            valuemember: inputParem.primarykeyField,\r\n            childcolumnlist,\r\n            userinfo,\r\n            parentcolumnlist\r\n        })\r\n            .then(response => {\r\n                let returnObj = { ...comboData, ...response.data }\r\n                returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedRecord, childcolumnlist, withoutCombocomponent, inputParem.item, userinfo.slanguagetypecode)\r\n                selectedRecord = { ...selectedRecord, ...returnObj.selectedRecord }\r\n                if (productCategory) {\r\n                    // const nproductcatcode = selectedRecord['Product Category'] && selectedRecord['Product Category'].value\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                } else if (product) {\r\n                    // if (mapOfRegFilterData.nproductcode === -1) {\r\n                    //        if(inputParem.nameofdefaultcomp===\"Product\"){\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: []\r\n                            }\r\n                        })\r\n                        // }\r\n                        // }\r\n                    }\r\n\r\n\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            comboData: { ...returnObj.comboData },\r\n                            selectedRecord\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}