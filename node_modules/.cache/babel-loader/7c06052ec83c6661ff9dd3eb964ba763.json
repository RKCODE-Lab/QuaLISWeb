{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\batchruncreation\\\\BatchCreation.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Nav, FormGroup, FormLabel, Card, Modal, Image, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt, faCheckCircle, faCopy, faEye, faPlay, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport reject from \"../../assets/image/reject.svg\";\nimport elnimage from \"../../assets/image/sheet-view.svg\";\nimport { callService, crudMaster, updateStore, getTestInstrumentComboService, getTestInstrumentCategory, getProductBasedInstrument, getInstrumentForInstCategory, getBatchCreationDetails, onActionFilterSubmit, getProductcategoryAction, createBatchmasterAction, getSamplesForGrid, getSelectedBatchCreationDetail, createSampleAction, deleteSampleAction, getActiveBatchCreationService, updateBatchcreationAction, deleteBatchCreation, batchInitiateAction, getBCRegistrationSubType, batchCompleteAction, validateEsignCredential, filterColumnData, getBatchhistoryAction, getBatchSection, viewInfo, getIqcSamples, getMaterialBasedOnMaterialCategory, getMaterialInventoryBasedOnMaterial, batchSaveIQCActions, getMaterialAvailQtyBasedOnInv, getBatchIqcSampleAction, getBCApprovalConfigVersion, getBCRegistrationType, getTreeByMaterial, getNewRegSpecification, cancelIQCSampleAction, batchCancelAction, batchInitiateDatePopup, batchCompleteDatePopup, getInstrumentID, getBatchViewResultAction, validateEsignforBatch //,batchTAT\n} from '../../actions';\nimport { transactionStatus, designProperties, reportTypeEnum, reportCOAType, RegistrationSubType, SampleType } from '../../components/Enumeration';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, getStartOfDay, getEndOfDay, formatInputDate, constructOptionList, rearrangeDateFormat, convertDateValuetoString, CF_encryptionData } from '../../components/CommonScript';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport Esign from '../audittrail/Esign';\nimport { ProductList } from '../product/product.styled';\nimport CustomPopover from '../../components/customPopover';\nimport BatchCreationFilter from './BatchCreationFilter';\nimport AddBatchCreation from './AddBatchCreation';\nimport AddBatchinitiate from './AddBatchinitiate';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport SampleTab from './SampleTab';\nimport BatchhistoryTab from './BatchhistoryTab';\nimport { process } from '@progress/kendo-data-query';\nimport AddSample from '../batchruncreation/AddSample';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport ViewInfo from './ViewInfo';\nimport { Affix } from 'rsuite';\nimport AddMaterialIqc from './AddMaterialIqc';\nimport BatchIqcSampleTab from './BatchIqcSampleTab';\nimport BatchResultTab from './BatchResultTab';\nimport PortalModal from '../../PortalModal';\nimport Iframe from 'react-iframe';\nimport ReactTooltip from 'react-tooltip';\nimport { ReactComponent as RefreshIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/refresh.svg\";\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass BatchCreation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.completeMandatoryFields = [{\n      \"idsName\": \"IDS_BATCHCOMPLETEDATE\",\n      //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \n      \"dataField\": \"dtransactiondate\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.initiateMandatoryFields = [{\n      \"idsName\": \"IDS_BATCHINITIATEDATE\",\n      //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \n      \"dataField\": \"dtransactiondate\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.materialIqcMandatory = [{\n      \"idsName\": \"IDS_MATERIALTYPE\",\n      \"dataField\": \"smaterialtypename\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIALCATEGORY\",\n      \"dataField\": \"smaterialcatname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIAL\",\n      \"dataField\": \"smaterialname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIALINVENTORY\",\n      \"dataField\": \"sinventoryid\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, //{ \"idsName\": \"IDS_AVAILABLEQUANTITY\", \"dataField\": \"savailablequatity\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\n    {\n      \"idsName\": \"IDS_USEDQTY\",\n      \"dataField\": \"susedquantity\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n\n    this.getSamples = selectedbatchmaster => {\n      const addSampleID = this.state.controlMap.has(\"AddSamples\") && this.state.controlMap.get(\"AddSamples\").ncontrolcode;\n\n      if (selectedbatchmaster.ntransactionstatus == transactionStatus.INITIATED || selectedbatchmaster.ntransactionstatus == transactionStatus.COMPLETED || selectedbatchmaster.ntransactionstatus == transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      } else {\n        this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode, this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA, this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA, addSampleID, this.state.dataState, this.state.addedSamplesListSortedList);\n      }\n    };\n\n    this.createBatchValidation = addParam => {\n      if (this.props.Login.masterData.defaultRegistrationType != undefined && this.state.FilterStatusValue.item != undefined && this.state.nregsubtypecode.item != undefined && this.state.ApprovalVersionValue.item != undefined) {\n        this.props.getBatchSection(addParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.getIqcSamples = SelectedBatchmaster => {\n      if (SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED || SelectedBatchmaster.ntransactionstatus === transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      } else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOADDIQC\"\n        }));\n      } else {\n        let addcontrolcode = this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\n        let inputData = {};\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; // inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n        // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData['naddcontrolCode'] = addcontrolcode; // inputData['section']={\n        //         nsectioncode: SelectedBatchmaster.nsectioncode\n        // };\n\n        inputData['nsectioncode'] = SelectedBatchmaster.nsectioncode;\n        inputData['userInfo'] = this.props.Login.userInfo;\n        inputData['nbatchmastercode'] = SelectedBatchmaster.nbatchmastercode;\n        inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\n        this.props.getIqcSamples(inputData, this.props.Login.masterData);\n      }\n    };\n\n    this.deleteRecord = inputData => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: inputData.selectedRecord.nbatchsampleCode,\n          fetchUrl: \"batchcreation/getSampleTabDetails\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let jsondata = inputData.selectedRecord;\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Sample\",\n          postParam,\n          inputData: {\n            Sample: {\n              \"sarno\": inputData.selectedRecord.sarno,\n              \"ssamplearno\": inputData.selectedRecord.ssamplearno,\n              \"stestname\": inputData.selectedRecord.stestname,\n              \"nbatchsamplecode\": inputData.selectedRecord.nbatchsamplecode\n            },\n            \"userInfo\": this.props.Login.userInfo,\n            nbatchsamplecode: inputData.selectedRecord.nbatchsamplecode,\n            masterData: { ...this.props.Login.masterData,\n              \"samples\": []\n            },\n            nbatchmastercode: inputData.selectedRecord.nbatchmastercode,\n            userinfo: this.props.Login.userInfo,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n            //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\n            //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA\n          },\n          operation: inputData.operation,\n          displayName: this.props.Login.inputParam.displayName,\n          dataState: this.state.dataState\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: inputData.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.deleteSampleAction(inputParam.inputData);\n        }\n      }\n    };\n\n    this.cancelRecord = inputData => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: inputData.nbatchsampleiqccode,\n          fetchUrl: \"batchcreation/getBatchIqcSampleAction\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"IQCSample\",\n          postParam,\n          inputData: {\n            iqcSample: inputData.selectedRecord,\n            nbatchsampleiqccode: inputData.selectedRecord.nbatchsampleiqccode,\n            masterData: this.props.Login.masterData,\n            nbatchmastercode: inputData.selectedRecord.nbatchmastercode,\n            nmaterialinventtranscode: inputData.selectedRecord.nmaterialinventtranscode,\n            userinfo: this.props.Login.userInfo,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n            //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\n            //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA\n          },\n          operation: inputData.operation,\n          displayName: this.props.Login.inputParam.displayName,\n          dataState: this.state.dataState\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: inputData.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.cancelIQCSampleAction(inputParam.inputData);\n        }\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n\n      if (screenName == \"IDS_BATCHHISTORY\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\n        };\n        this.props.getBatchhistoryAction(inputData, true);\n      } else if (screenName == \"IDS_BATCHIQCSAMPLE\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\n        };\n        this.props.getBatchIqcSampleAction(inputData, true);\n      } else if (screenName == \"IDS_RESULTS\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\n        };\n        this.props.getBatchViewResultAction(inputData, true);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName,\n            batchactiveKey: screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.dataStateChangeBatchSample = event => {\n      let updatedList = [];\n\n      if (event.dataState && event.dataState.filter === null) {\n        let addComponentDataListCopy = this.state.addComponentDataListCopy || this.state.samples || [];\n        addComponentDataListCopy.forEach(x => {\n          // Check if x's ntransactiontestcode exists in addedSamplesListSortedList\n          const exists = this.state.addedSamplesListSortedList.some(item => item.ntransactiontestcode === x.ntransactiontestcode); // If it doesn't exist, add it to updatedList\n\n          if (!exists) {\n            updatedList.push(x);\n          }\n        });\n      } else {\n        updatedList = this.state.samples || [];\n      }\n\n      this.setState({\n        dataResult: process(this.state.samples || [], event.dataState),\n        dataState: event.dataState,\n        samples: updatedList,\n        addSelectAll: event.dataState && event.dataState.filter === null ? this.valiateCheckAll(updatedList) : this.valiateCheckAll(process(updatedList || [], event.dataState).data)\n      });\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.Samples, event.dataState),\n        sampleState: event.dataState\n      });\n    };\n\n    this.dataStateBatchHistoryChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.Batchhistory, event.dataState),\n        histortState: event.dataState\n      });\n    };\n\n    this.dataStateBatchIqcChangeChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.iqcsample, event.dataState),\n        iqcsampleState: event.dataState\n      });\n    };\n\n    this.dataStateViewChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.Resultview, event.dataState),\n        viewstate: event.dataState\n      });\n    };\n\n    this.getApprovalVersion = data => {\n      let inputData = [];\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate || this.props.Login.masterData.realFromDate, this.props.Login.masterData.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n      inputData = {\n        needFilterSubmit: \"false\",\n        nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n        fromDate: obj.fromDate,\n        //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n        toDate: obj.toDate,\n        //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n        nregtypecode: data.item.nregtypecode,\n        userInfo: this.props.Login.userInfo,\n        nregsubtypecode: data.item.nregsubtypecode,\n        masterData: this.props.Login.masterData,\n        isneedapprovalfilter: true,\n        defaultRegistrationSubType: data.item,\n        isneedrealFilterStatus: \"false\",\n        // realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n        // realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n        // realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n        // realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\",\n        realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n        realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n        realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n        realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\n        realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\n        realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n        realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\n        realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n        realFromDate: this.props.Login.masterData.realFromDate,\n        realToDate: this.props.Login.masterData.realToDate\n      };\n      this.props.getBCApprovalConfigVersion(inputData);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_SAMPLE\", /*#__PURE__*/React.createElement(SampleTab, {\n        sample: this.props.Login.masterData.Samples || [],\n        dataResult: process(this.props.Login.masterData.Samples || [], this.state.sampleState),\n        dataState: this.state.sampleState,\n        controlMap: this.state.controlMap,\n        dataStateChange: this.dataStateChange,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        deleteRecord: this.deleteRecord,\n        extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n        detailedFieldList: this.gridfillingColumnMoreItems(this.state.DynamicGridMoreItem) || [],\n        methodUrl: \"Samples\",\n        getSamples: () => this.getSamples(this.props.Login.masterData.SelectedBatchmaster) // getSamples={() => this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode,this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\n        //     this.props.Login.userInfo,this.props.Login.masterData,this.props.Login.masterData.defaultRegistrationType.nregtypecode,this.state.nregsubtypecode.value)}\n        //inputParam={this.props.Login.inputParam}\n        ,\n        screenName: \"IDS_SAMPLE\",\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_BATCHIQCSAMPLE\", /*#__PURE__*/React.createElement(BatchIqcSampleTab, {\n        iqcsample: this.props.Login.masterData.iqcsample || [],\n        dataResult: process(this.props.Login.masterData.iqcsample || [], this.state.iqcsampleState),\n        dataState: this.state.iqcsampleState,\n        controlMap: this.state.controlMap,\n        dataStateChange: this.dataStateBatchIqcChangeChange,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        cancelRecord: this.cancelRecord,\n        methodUrl: \"IQCSample\",\n        getIqcSamples: () => this.getIqcSamples(this.props.Login.masterData.SelectedBatchmaster),\n        screenName: \"IDS_BATCHIQCSAMPLE\",\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 13\n        }\n      })); //     if (this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus === transactionStatus.INITIATED\n      //         || this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus === transactionStatus.COMPLETED)\n\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        tabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(BatchResultTab, {\n          ELNTest: this.props.Login.masterData.ELNTest || [],\n          resultview: this.props.Login.masterData.Resultview || [],\n          dataResult: process(this.props.Login.masterData.Resultview || [], this.state.viewstate),\n          dataState: this.state.viewstate,\n          dataStateChange: this.dataStateViewChange,\n          userInfo: this.props.Login.userInfo,\n          methodUrl: \"BatchViewResult\",\n          screenName: \"IDS_RESULTS\",\n          intl: this.props.intl,\n          nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n          selectedfilename: this.props.Login.masterData.SelectedBatchmaster.sbatcharno,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 17\n          }\n        }));\n      }\n\n      tabMap.set(\"IDS_BATCHHISTORY\", /*#__PURE__*/React.createElement(BatchhistoryTab, {\n        batchhistory: this.props.Login.masterData.Batchhistory || [],\n        dataResult: process(this.props.Login.masterData.Batchhistory || [], this.state.histortState),\n        dataState: this.state.histortState,\n        dataStateChange: this.dataStateBatchHistoryChange,\n        userInfo: this.props.Login.userInfo,\n        methodUrl: \"Batchhistory\",\n        screenName: \"IDS_BATCHHISTORY\",\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onFilterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        let inputData = [];\n\n        if (fieldname === \"fromDate\") {\n          let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            needFilterSubmit: \"false\",\n            fromDate: dateObj.fromDate,\n            //this.OnDateConverstion(event, fieldname),\n            toDate: dateObj.toDate,\n            //this.props.Login.masterData.toDate,\n            defaultRegistrationType: this.props.Login.masterData.defaultRegistrationType,\n            defaultRegistrationSubType: this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\n            defaultSampleType: this.props.Login.masterData.defaultSampleType,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\n            ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\n            //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            // realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            // realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            // realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            // realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n            realFromDate: this.props.Login.masterData.realFromDate,\n            realToDate: this.props.Login.masterData.realToDate,\n            //ALPD-3571--Vignesh R(05-09-2024) \n            realndesigntemplatemappingcode: this.props.Login.masterData.realndesigntemplatemappingcode,\n            napprovalversioncode: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item.napprovalconfigversioncode || transactionStatus.NA,\n            napprovalconfigcode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode || transactionStatus.NA,\n            ApprovalVersionValue: this.state.ApprovalVersionValue\n          };\n          this.props.getBCApprovalConfigVersion(inputData);\n        }\n\n        if (fieldname === \"toDate\") {\n          let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            needFilterSubmit: \"false\",\n            fromDate: dateObj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            toDate: dateObj.toDate,\n            //this.OnDateConverstion(event, fieldname),\n            defaultRegistrationType: this.props.Login.masterData.defaultRegistrationType,\n            defaultRegistrationSubType: this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\n            defaultSampleType: this.props.Login.masterData.defaultSampleType,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\n            ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\n            //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            // realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            // realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            // realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            // realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n            realFromDate: this.props.Login.masterData.realFromDate,\n            realToDate: this.props.Login.masterData.realToDate\n          };\n          this.props.getBCApprovalConfigVersion(inputData);\n        } // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \n        //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \n\n\n        if (fieldname === \"nsampletypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            needFilterSubmit: \"false\",\n            nsampletypecode: parseInt(event.value),\n            fromDate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            toDate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            userinfo: this.props.Login.userInfo,\n            defaultSampleType: event.item,\n            masterData: this.props.Login.masterData,\n            isneedrealFilterStatus: \"false\",\n            // realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            // realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            //  realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            //realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\",\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion\n          };\n          this.props.getBCRegistrationType(inputData);\n        } else if (fieldname === \"nregtypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 3,\n            needFilterSubmit: \"false\",\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            fromDate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            toDate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            nregtypecode: parseInt(event.value),\n            userInfo: this.props.Login.userInfo,\n            defaultRegistrationType: event.item,\n            defaultSampleType: this.props.Login.masterData.defaultSampleType,\n            isneedrealFilterStatus: \"false\",\n            // realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            // realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            // realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            // realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\",\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion\n          };\n          this.props.getBCRegistrationSubType(inputData, this.props.Login.masterData);\n        } else if (fieldname === \"nregsubtypecode\") {\n          const nregsubtypecode = this.state; //this.setState({ nregsubtypecode:event });\n\n          this.getApprovalVersion(event);\n        } else if (fieldname === 'ndesigntemplatemappingcode') {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          const inputParamData = {\n            nflag: 3,\n            needFilterSubmit: \"false\",\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            //defaultFilterStatus: event.item,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n            // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n            //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\n            ndesigntemplatemappingcode: event.value,\n            DesignTemplateMappingValue: event.item,\n            isneedrealFilterStatus: \"false\",\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          }; //this.props.getREFilterTestData(inputParamData)\n\n          this.props.getBCFilterTemplate(inputParamData);\n        } else if (fieldname === \"version\") {\n          // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\n          //     this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          // inputData = {\n          //     nflag: 4,\n          //     fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\n          //     todate: obj.toDate,//this.props.Login.masterData.toDate,\n          //     nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n          //     nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n          //     nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n          //     napprovalversioncode: event.value,\n          //     userinfo: this.props.Login.userInfo,\n          //     defaultApprovalConfigVersion: event.item,\n          //     masterData: this.props.Login.masterData,\n          //     ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\n          // }\n          // this.props.getBCJobStatus(inputData)\n          const ApprovalVersionValue = this.state;\n          this.setState({\n            ApprovalVersionValue: event\n          });\n        } else if (fieldname === \"jobstatus\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            needFilterSubmit: \"false\",\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultjobstatus: event.item,\n            masterData: this.props.Login.masterData,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          };\n          this.props.getBCFilterStatus(inputData);\n        } else if (fieldname === \"filter\") {\n          const FilterStatusValue = this.state;\n          this.setState({\n            FilterStatusValue: event\n          });\n        } else if (fieldname === \"test\") {\n          const FilterStatusValue = this.state;\n          this.setState({\n            FilterStatusValue: event\n          });\n        } else {\n          const selectedRecord = this.state;\n          this.setState({\n            selectedRecord: event\n          });\n        }\n      }\n    };\n\n    this.handleFilterDateChange = (dateValue, dateName) => {\n      const {\n        selectedFilter\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedFilter[dateName] = dateValue;\n      this.setState({\n        selectedFilter\n      });\n    };\n\n    this.headerSelectionChange = event => {\n      let checked = event.syntheticEvent.target.checked;\n      let addedSamplesList = [];\n      checked = checked == false && this.state.samples.length > 0 ? false : this.state.samples.length == 0 ? false : true;\n\n      if (checked) {\n        //const data = event.dataItems.map(item => {\n        //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\n        const data = event.target.props.data.map(item => {\n          if (addedSamplesList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\n            //addedSamplesList.push({ ...item, selected: false });\n            item.selected = checked;\n            let newItem = JSON.parse(JSON.stringify(item)); //newItem.selected = false;\n\n            delete newItem['selected'];\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"jsondata\"]['samplelist'] = item;\n            newItem[\"jsonuidata\"]['samplelist'] = item;\n            addedSamplesList.push(newItem);\n            return item;\n          } else {\n            let olditem = JSON.parse(JSON.stringify(addedSamplesList[addedSamplesList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]));\n            olditem.selected = checked;\n            let newItem = JSON.parse(JSON.stringify(olditem));\n            newItem.selected = false;\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"jsondata\"]['samplelist'] = olditem;\n            newItem[\"jsonuidata\"]['samplelist'] = olditem;\n            addedSamplesList.push(newItem);\n            return olditem;\n          }\n        }); //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\n\n        this.setState({\n          samples: data,\n          addedSamplesList: addedSamplesList,\n          addComponentDataListCopy: this.valiateCopy(this.state.addedSamplesListSortedList || [], data || [], addedSamplesList || []),\n          addSelectAll: this.valiateCheckAll(addedSamplesList),\n          deleteSelectAll: this.valiateCheckAll(addedSamplesList),\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      } else {\n        // let sampleListData = this.state.sampleList || [];\n        // let deletedListdData = this.state.sampleList || [];\n        let addedSamplesList = this.state.addedSamplesList || [];\n        let deletedListdData = this.state.deletedList || [];\n        const data = event.target.props.data.map(item => {\n          addedSamplesList = addedSamplesList.filter(item1 => item1.npreregno !== item.npreregno);\n          deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\n          item.selected = checked;\n          return item;\n        }); // console.log(\"data:\",data1, data2);\n\n        this.setState({\n          samples: data,\n          addedSamplesList: addedSamplesList,\n          deletedList: deletedListdData,\n          addSelectAll: this.valiateCheckAll(addedSamplesList),\n          deleteSelectAll: this.valiateCheckAll(addedSamplesList),\n          addSelectAll: checked,\n          deleteSelectAll: false,\n          addComponentDataListCopy: this.valiateCopy(this.state.addedSamplesListSortedList || [], data || [], addedSamplesList || [])\n        });\n      } // const data = this.state.addComponentDataList.map(item=>{\n      //     if (checked){\n      //         addedComponentList.push({...item, selected:false});\n      //     }\n      //     else{\n      //         data1 = data1.filter(item1=>item1.npreregno !== item.npreregno);\n      //         data2 = data2.filter(item1=>item1.npreregno !== item.npreregno);      \n      //     }  \n      //     item.selected = checked;\n      //     return item;\n      // });\n\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n\n      if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\n      }\n    };\n\n    this.selectionChange = event => {\n      let addedSamplesList = this.state.addedSamplesList || []; //let addedSamplesList= [];\n      //let samples = this.state.samples || [];\n\n      const samplesList = this.state.samples.map(item => {\n        if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\n          item.selected = !event.dataItem.selected; //  item={...item,\"selected\":!event.dataItem.selected};\n\n          if (item.selected) {\n            const newItem = JSON.parse(JSON.stringify(item)); //newItem.selected = false;\n\n            delete newItem['selected']; //newItem[\"selected\"]=item.selected;\n\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"jsondata\"]['samplelist'] = item;\n            newItem[\"jsonuidata\"]['samplelist'] = item;\n            addedSamplesList.push(newItem);\n          } else {\n            addedSamplesList = addedSamplesList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode);\n          }\n        }\n\n        return item;\n      }); ///samplesList = addedSamplesList;\n\n      this.setState({\n        addSelectAll: this.valiateCheckAll(this.state.dataState && this.state.dataState.filter && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined ? process(samplesList || [], this.state.dataState).data : samplesList),\n        samples: samplesList,\n        addedSamplesList,\n        //addSelectAll: this.valiateCheckAll(addComponentDataList),\n        deleteSelectAll: this.valiateCheckAll(addedSamplesList),\n        addComponentDataListCopy: this.valiateCopy(this.state.addedSamplesListSortedList || [], samplesList || [], addedSamplesList || [])\n      });\n    };\n\n    this.childDataChange = addedSamplesListSortedList => {\n      this.setState({\n        addedSamplesListSortedList: addedSamplesListSortedList,\n        isInitialRender: false\n      });\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord;\n      console.log(\"handle save:\", selectedRecord);\n      mandatoryFields = [{\n        \"idsName\": \"IDS_SPECIFICATION\",\n        \"dataField\": \"nallottedspeccode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"combo\"\n      }];\n      let selectedSpec = this.props.Login.selectedSpec;\n\n      if (selectedRecord && selectedRecord.nallottedspeccode !== \"\") {\n        selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n        selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n        selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadSpec: false,\n            selectedSpec,\n            openModal: true,\n            openSpecModal: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.ConfirmDelete = (selectedBatch, deleteId, operation) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteBatchCreation(selectedBatch, deleteId, operation));\n    };\n\n    this.completePopUpStartActions = completeId => {\n      // if(this.props.Login.masterData.nneedtestinitiate === true){\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTINITIATEDBATCH\"\n        }));\n      } //    }else \n      else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLEFORINITIATE\"\n        }));\n      } else {\n        // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         openModal: true, \n        //         completeId : completeId,\n        //         masterData: this.props.Login.masterData,\n        //        // screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n        //         operation: \"complete\"\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        let inputData = {};\n        inputData[\"openModal\"] = true;\n        inputData[\"completeId\"] = completeId;\n        inputData[\"selectedRecord\"] = this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"operation\"] = \"complete\";\n        this.props.batchCompleteDatePopup(inputData, this.props.Login.masterData);\n      }\n    };\n\n    this.AddSpec = e => {\n      if (this.state.selectedMaterial !== undefined && this.state.selectedMaterialCategory !== undefined) {\n        let inputData = {};\n        inputData[\"nmaterialcode\"] = this.state.selectedMaterial.value;\n        inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory.value;\n        inputData[\"ncategorybasedflow\"] = this.state.selectedMaterialCategory.item.ncategorybasedflow;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode; // inputData[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \n        // inputData[\"nneedmyjob\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob; \n        // inputData[\"nneedjoballocation\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation; \n        // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\n        // inputData[\"napproveconfversioncode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n        // inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n        // inputData[\"nneedtestinitiate\"] =  this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\n\n        this.props.getTreeByMaterial(inputData, this.state.selectedRecord, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_FILLALLDETAILSTOADDSPEC\"\n        }));\n      }\n    };\n\n    this.testPopUpStartActions = testStartId => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      } else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLEFORINITIATE\"\n        }));\n      } // else if (this.props.Login.masterData.iqcsample.length==0){\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\n      // }\n      else {\n        let inputData = {};\n        inputData[\"openModal\"] = true;\n        inputData[\"testStartId\"] = testStartId;\n        inputData[\"selectedRecord\"] = this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"operation\"] = \"initiate\";\n        this.props.batchInitiateDatePopup(inputData, this.props.Login.masterData); //         const updateInfo = {\n        //             typeName: DEFAULT_RETURN,\n        //             data: {\n        //                 openModal: true, \n        //                 testStartId : testStartId,\n        //                 selectedRecord : this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord,\n        //                 masterData: this.props.Login.masterData,\n        //                 operation: \"initiate\"\n        //             }\n        //         }\n        // this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.testStartActions = (selectedmaster, testStartId) => {\n      if (selectedmaster.ntransactionstatus == transactionStatus.INITIATED || selectedmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLEFORINITIATE\"\n        }));\n      } //else if (this.props.Login.masterData.iqcsample.length==0){\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\n      // }\n      else {\n        let inputData = {};\n        let jsonuidata = [];\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedmaster.nbatchmastercode,\n          fetchUrl: \"batchcreation/initiateBatchcreation\",\n          isSingleGet: true,\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        let jsondata = this.props.Login.masterData.Samples.map(item => {\n          return {\n            jsonuidata: item\n          };\n        });\n\n        if (this.props.Login.masterData.iqcsample.length > 0) {\n          let totalSample = this.props.Login.masterData.Samples.concat(this.props.Login.masterData.iqcsample);\n          inputData[\"npreregno\"] = this.props.Login.masterData.iqcsample.map(samples => samples.npreregno).join(\",\");\n          inputData[\"ntransactiontestcode\"] = totalSample.map(samples => samples.ntransactiontestcode).join(\",\");\n          inputData[\"nneedjoballocationiqc\"] = true;\n          inputData[\"isiqcdata\"] = true;\n        } else {\n          inputData[\"npreregno\"] = this.props.Login.masterData.Samples.map(samples => samples.npreregno).join(\",\");\n          inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactiontestcode).join(\",\");\n          inputData[\"isiqcdata\"] = false;\n          inputData[\"nneedjoballocationiqc\"] = false;\n        }\n\n        inputData[\"nbatchsampleCode\"] = this.props.Login.masterData.Samples.map(sample => sample.nbatchsamplecode).join(\",\");\n        inputData[\"muluserpreregno\"] = this.props.Login.masterData.Samples.map(samples => samples.npreregno).join(\",\");\n        inputData[\"mulusertransactionsamplecode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactionsamplecode).join(\",\");\n        inputData[\"mulusertransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactiontestcode).join(\",\");\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; // inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n        inputData[\"batchsample\"] = jsondata;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n        inputData[\"nneedmyjob\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob;\n        inputData[\"nneedjoballocation\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"napproveconfversioncode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"ntranscode\"] = transactionStatus.INITIATED || transactionStatus.DRAFT;\n        inputData[\"nneedtestinitiate\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\n        inputData[\"Batchhistory\"] = {\n          dtransactiondate: formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] != undefined ? this.state.selectedRecord[\"dtransactiondate\"] : this.props.Login.currentTime, false),\n          scomments: this.state.selectedRecord && this.state.selectedRecord.scomments\n        };\n        inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\n        inputData[\"testStartId\"] = testStartId;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[1];\n        inputData[\"sample\"] = this.props.Login.masterData ? this.props.Login.masterData.sample : \"\";\n        inputData[\"iqcsample\"] = this.props.Login.masterData ? this.props.Login.masterData.iqcsample : \"\";\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\",\n          operation: \"initiate\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, testStartId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: { ...masterData // defaultFilterStatus: this.props.Login.masterData.BCFilterStatus\n                  //     && this.props.Login.masterData.BCFilterStatus[1],\n                  // realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus\n                  //     && this.props.Login.masterData.BCFilterStatus[1],\n\n                }\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation: inputParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.batchInitiateAction(inputData, this.props.Login.masterData, this.confirmMessage);\n        }\n      }\n    };\n\n    this.batchSaveIQCActions = selectedmaster => {\n      if (this.state.selectedRecord.savailablequatity !== \"0.00\") {\n        if (parseFloat(this.state.selectedRecord.susedquantity) <= parseFloat(this.props.Login.masterData.inventoryTransaction.savailablequatity)) {\n          if (this.props.Login.selectedSpec.nallottedspeccode !== undefined && this.props.Login.selectedSpec.nallottedspeccode !== \"\") {\n            let userInfo = {};\n            let inputRegistrationData = {};\n            let inputMaterialInventoryData = {};\n            let inputBatchData = {};\n            const map = {};\n            let batchCreationSampleData = {};\n            let batchCreationTestData = {};\n            let batchCreationSampleArray = [];\n            let batchCreationTestArray = [];\n            let samplecombinationuniqueArray = [];\n            let inputMaterialInventoryArrData = [];\n            batchCreationSampleData[\"nspecsampletypecode\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ? this.props.Login.selectedSpec.nallottedspeccode.nspecsampletypecode : transactionStatus.NA;\n            batchCreationSampleData[\"ncomponentcode\"] = transactionStatus.NA;\n            batchCreationSampleData[\"slno\"] = 1;\n            batchCreationSampleArray.push(batchCreationSampleData);\n            inputRegistrationData[\"nallottedspeccode\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ? this.props.Login.selectedSpec.nallottedspeccode.value : transactionStatus.NA;\n            inputRegistrationData[\"ntemplatemanipulationcode\"] = this.props.Login.ntemplatemanipulationcode || transactionStatus.NA;\n            inputRegistrationData[\"nregsubtypeversioncode\"] = this.props.Login.masterData.nregsubtypeversioncode;\n            inputRegistrationData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode; // inputRegistrationData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n            // inputRegistrationData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n            // inputRegistrationData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n            inputRegistrationData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n            inputRegistrationData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n            inputRegistrationData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n            inputRegistrationData[\"nproductcatcode\"] = transactionStatus.NA;\n            inputRegistrationData[\"nproductcode\"] = transactionStatus.NA;\n            inputRegistrationData[\"ninstrumentcatcode\"] = transactionStatus.NA;\n            inputRegistrationData[\"ninstrumentcode\"] = transactionStatus.NA;\n            inputRegistrationData[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\n            inputRegistrationData[\"nmaterialcode\"] = this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\n            inputRegistrationData[\"jsondata\"] = {\n              nmaterialcode: this.state.selectedMaterial.value,\n              nmaterialcatcode: this.state.selectedMaterialCategory.value,\n              smaterialcatname: this.state.selectedMaterialCategory.label,\n              sinventoryid: this.state.selectedMaterialInventory.item.sinventoryid,\n              nmaterialinventorycode: this.state.selectedMaterialInventory.item.nmaterialinventorycode,\n              smaterial: this.state.selectedMaterial.item.smaterialname,\n              smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\n              nmaterialtypecode: this.state.selectedMaterialType.value,\n              susedquantity: this.state.selectedRecord.susedquantity,\n              sunitname: this.props.Login.masterData.inventoryTransaction.sunitname,\n              savailablequatity: this.props.Login.masterData.inventoryTransaction.savailablequatity,\n              //materialtype:this.state.selectedMaterialType.label,\n              sremarks: this.state.selectedRecord.sremarks,\n              nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            };\n            inputRegistrationData[\"jsonuidata\"] = {\n              nmaterialcode: this.state.selectedMaterial.value,\n              nmaterialcatcode: this.state.selectedMaterialCategory.value,\n              smaterialcatname: this.state.selectedMaterialCategory.label,\n              sinventoryid: this.state.selectedMaterialInventory.item.sinventoryid,\n              nmaterialinventorycode: this.state.selectedMaterialInventory.item.nmaterialinventorycode,\n              smaterial: this.state.selectedMaterial.item.smaterialname,\n              smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\n              nmaterialtypecode: this.state.selectedMaterialType.value,\n              susedquantity: this.state.selectedRecord.susedquantity,\n              sunitname: this.props.Login.masterData.inventoryTransaction.sunitname,\n              savailablequatity: this.props.Login.masterData.inventoryTransaction.savailablequatity,\n              //materialtype:this.state.selectedMaterialType.label,\n              sremarks: this.state.selectedRecord.sremarks,\n              nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            }; // inputMaterialInventoryData = {\n            //     jsondata : this.props.Login.masterData.selectedInventoryUnit['jsondata']\n            // }\n            //  inputMaterialInventoryData = {\n            //         nmaterialinventorycode : this.state.selectedMaterialInventory.item.nmaterialinventorycode,\n            //         jsondata : {\n            //             jsondata:this.props.Login.masterData.selectedInventoryUnit['jsondata'],\n            //             nqtyused: this.state.selectedRecord.susedquantity\n            //         },\n            //         jsonuidata : {\n            //             jsonuidata : this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\n            //             nqtyused: this.state.selectedRecord.susedquantity\n            //         },\n            //         nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            //  };\n\n            inputMaterialInventoryData[\"nmaterialinventorycode\"] = this.state.selectedMaterialInventory.item.nmaterialinventorycode;\n            inputMaterialInventoryData[\"jsondata\"] = { ...this.props.Login.masterData.selectedInventoryUnit['jsondata'],\n              nqtyused: this.state.selectedRecord.susedquantity,\n              savailablequatity: this.state.selectedRecord.savailablequatity,\n              nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            }; //inputMaterialInventoryData[\"jsondata\"] = this.state.selectedRecord.susedquantity;\n\n            inputMaterialInventoryData[\"nsectioncode\"] = this.props.Login.masterData.selectedInventoryUnit['nsectioncode'];\n            inputMaterialInventoryData[\"jsonuidata\"] = { ...this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\n              nqtyused: this.state.selectedRecord.susedquantity,\n              savailablequatity: this.state.selectedRecord.savailablequatity,\n              nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            }; //inputMaterialInventoryArrData.push(inputMaterialInventoryData);\n\n            batchCreationTestData[\"ntestgrouptestcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.ntestgrouptestcode : transactionStatus.NA; //     batchCreationTestData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample =>sample.ntransactiontestcode).join(\",\") ;\n\n            batchCreationTestData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\n            batchCreationTestData[\"nsectioncode\"] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\n            batchCreationTestData[\"nmethodcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.nmethodcode : transactionStatus.NA; //   batchCreationTestData[\"nchecklistversioncode\"]=this.state.selectedTestSynonym ? this.state.selectedTestSynonym.item.nchecklistversioncode:transactionStatus.NA;\n\n            batchCreationTestData[\"nrepeatcountno\"] = 1; //--\n            //    batchCreationTestData[\"ntestretestno\"]=0;\n\n            batchCreationTestData[\"nparametercount\"] = 1; //--\n\n            batchCreationTestData[\"slno\"] = 1; //--\n\n            batchCreationTestArray.push(batchCreationTestData);\n            map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n            map[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n            userInfo = this.props.Login.userInfo;\n            map[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n            map[\"napproveconfversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n            map[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n            map[\"nneedtestinitiate\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\n            map[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\n            map[\"nmaterialcode\"] = this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\n            map[\"nmaterialtypecode\"] = this.state.selectedMaterialType ? this.state.selectedMaterialType.value : transactionStatus.NA;\n            inputBatchData = this.props.Login.masterData.SelectedBatchmaster;\n            map['Registration'] = inputRegistrationData;\n            map['Batchsampleiqc'] = inputBatchData;\n            map['RegistrationSample'] = batchCreationSampleArray;\n            map['testgrouptest'] = batchCreationTestArray;\n            map['userInfo'] = userInfo;\n            map['samplecombinationunique'] = samplecombinationuniqueArray;\n            map['inputMaterialInventoryArrData'] = inputMaterialInventoryData;\n            const inputParam = {\n              inputData: map,\n              classUrl: \"batchcreation\",\n              methodUrl: \"Batchcreation\",\n              displayName: \"IDS_BATCHIQCSAVE\",\n              operation: \"createiqc\"\n            };\n            this.props.batchSaveIQCActions(inputParam.inputData, this.props.Login.masterData);\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ADDSPECIFICATIONS\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_USEDQTYISGREATERTHANAVAILABLEQTY\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_NOAVAILABLEQUANTITY\"\n        }));\n      }\n    };\n\n    this.cancelBatch = (selectedmaster, cancelId) => {\n      if (selectedmaster.ntransactionstatus == transactionStatus.DRAFT || selectedmaster.ntransactionstatus == transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTBATCHINITIATEDRECORD\"\n        }));\n      } else {\n        let inputData = {};\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedmaster.nbatchmastercode,\n          fetchUrl: \"batchcreation/cancelBatch\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        let jsondata = this.props.Login.masterData.Samples.map(item => {\n          return {\n            jsonuidata: item\n          };\n        });\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n        inputData[\"samples\"] = jsondata;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\n        inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n        inputData[\"napprovalconfigcode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"ntranscode\"] = transactionStatus.CANCELLED || transactionStatus.DRAFT; // inputData[\"Batchhistory\"] ={\n        //     dtransactiondate : formatInputDate(new Date(),true),\n        //     scomments : this.state.selectedRecord && this.state.selectedRecord.scomments\n        //     };\n        //inputData[\"completeId\"] = completeId;\n\n        inputData[\"nneedtestinitiate\"] = this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[3];\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batch\",\n          displayName: \"IDS_BATCHCREATION\",\n          operation: \"cancel\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, cancelId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: { ...masterData,\n                  defaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2],\n                  realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2]\n                }\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation: inputParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.batchCancelAction(inputData, this.props.Login.masterData);\n        }\n      }\n    };\n\n    this.batchCompleteActions = (selectedmaster, completeId) => {\n      if (selectedmaster.ntransactionstatus == transactionStatus.COMPLETED || selectedmaster.ntransactionstatus == transactionStatus.DRAFT) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTINITIATEDBATCH\"\n        }));\n      } else {\n        let inputData = {};\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedmaster.nbatchmastercode,\n          fetchUrl: \"batchcreation/completeBatchcreation\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        let jsondata = this.props.Login.masterData.Samples.map(item => {\n          return {\n            jsonuidata: item\n          };\n        });\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n        inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample => sample.ntransactiontestcode).join(\",\");\n        inputData[\"samples\"] = jsondata;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\n        inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA; //  inputData[\"ntranscode\"] = transactionStatus.COMPLETED || transactionStatus.DRAFT;\n\n        inputData[\"ntranscode\"] = transactionStatus.COMPLETED;\n        inputData[\"Batchhistory\"] = {\n          dtransactiondate: formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] != undefined ? this.state.selectedRecord[\"dtransactiondate\"] : this.props.Login.currentTime, false),\n          scomments: this.state.selectedRecord && this.state.selectedRecord.scomments\n        };\n        inputData[\"completeId\"] = completeId;\n        inputData[\"nneedtestinitiate\"] = this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2];\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\",\n          operation: \"complete\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: { ...masterData // defaultFilterStatus: this.props.Login.masterData.BCFilterStatus\n                  //     && this.props.Login.masterData.BCFilterStatus[2],\n                  // realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus\n                  //     && this.props.Login.masterData.BCFilterStatus[2],\n\n                }\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation: inputParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.batchCompleteAction(inputData, this.props.Login.masterData);\n        }\n      }\n    };\n\n    this.closeAlert = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlert: false,\n          loading: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let openSpecModal = this.props.Login.openSpecModal;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"cancel\") {\n          //    this.props.Login.operation === \"complete\") {\n          loadEsign = false;\n          openModal = false;\n        } else {\n          loadEsign = false;\n        }\n\n        selectedRecord[\"esigncomments\"] = \"\";\n        selectedRecord[\"esignpassword\"] = \"\";\n      } else if (this.props.Login.openSpecModal) {\n        loadEsign = false;\n        openSpecModal = false;\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          openSpecModal,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let {\n        selectedInstCategory,\n        selectedInstrumentId,\n        InstrumentCategory,\n        selectedInstrument,\n        Instrument,\n        InstrumentID\n      } = this.state;\n      let inputData = {};\n\n      if (comboData == null) {\n        selectedInstCategory = undefined;\n        selectedInstrumentId = undefined;\n        Instrument = undefined;\n        InstrumentID = undefined;\n        selectedInstrument = undefined;\n        selectedRecord['sinstrumentcatname'] = undefined;\n        selectedRecord['sinstrumentname'] = undefined;\n        selectedRecord['sinstrumentid'] = undefined;\n        this.setState({\n          selectedInstCategory,\n          selectedInstrumentId,\n          selectedInstrument,\n          selectedRecord,\n          Instrument,\n          InstrumentID\n        });\n      } else {\n        selectedRecord[fieldName] = comboData.item;\n\n        if (fieldName === \"sproductname\") {\n          selectedRecord[\"nproductcode\"] = comboData.value;\n          selectedRecord[\"userInfo\"] = this.props.Login.userInfo;\n          selectedRecord[\"stestname\"] = this.state.selectedRecord['stestname'];\n          selectedRecord[\"ntestcode\"] = this.state.selectedRecord['stestname']['ntestcode'];\n          selectedRecord[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; //selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n\n          selectedRecord['naddcontrolCode'] = this.props.Login.naddcontrolCode;\n          selectedRecord[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n          selectedRecord[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA; //this.setState({ selectedProduct:comboData });\n\n          this.props.getProductBasedInstrument(selectedRecord, this.props.Login.masterData);\n        } else if (fieldName === \"ssectionname\") {\n          inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n          inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n          inputData['naddcontrolCode'] = this.props.Login.naddcontrolCode;\n          inputData['section'] = selectedRecord.ssectionname;\n          inputData['userInfo'] = this.props.Login.userInfo;\n          inputData['nneedmyjob'] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.nneedmyjob : false;\n          inputData['nneedjoballocation'] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.nneedjoballocation : false;\n          inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n          this.props.getTestInstrumentComboService(inputData, this.props.Login.masterData); // this.setState({ selectedSection:comboData });\n        } else if (fieldName === \"stestname\") {\n          if (this.props.Login.operation === \"update\") {\n            selectedRecord[\"nprevioustestcode\"] = this.state.selectedTestSynonym.value;\n          }\n\n          selectedRecord[\"ntestcode\"] = comboData.value;\n          selectedRecord['userInfo'] = this.props.Login.userInfo;\n          selectedRecord[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; //selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n\n          selectedRecord['naddcontrolCode'] = this.props.Login.naddcontrolCode;\n          selectedRecord[\"nprojectmastercode\"] = comboData.item.nprojectmastercode;\n          selectedRecord['sinstrumentcatname'] = undefined;\n          selectedRecord[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n          selectedRecord[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n          this.props.getTestInstrumentCategory(selectedRecord, this.props.Login.masterData);\n        } else if (fieldName === \"sinstrumentcatname\") {\n          selectedRecord[\"ninstrumentcatcode\"] = comboData.value;\n          selectedRecord[\"ncalibrationreq\"] = comboData.item.ncalibrationreq;\n          selectedRecord[\"ntestcode\"] = this.state.selectedTestSynonym.value;\n          selectedRecord['userInfo'] = this.props.Login.userInfo; //selectedRecord['sinstrumentid']=undefined;\n\n          selectedRecord['sinstrumentname'] = undefined;\n          this.props.getInstrumentForInstCategory(selectedRecord, this.props.Login.masterData); //this.props.getInstrumentID(selectedRecord,this.props.Login.masterData);\n        } else if (fieldName === \"smaterialcatname\") {\n          selectedRecord[\"nmaterialcatcode\"] = comboData.value;\n          selectedRecord[\"needsectionwise\"] = comboData.item.needSectionwise;\n          selectedRecord['userInfo'] = this.props.Login.userInfo;\n          selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\n          this.setState({\n            selectedMaterialCategory: comboData\n          });\n          this.props.getMaterialBasedOnMaterialCategory(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\n        } else if (fieldName === \"smaterialname\") {\n          selectedRecord[\"nmaterialcode\"] = comboData.value;\n          selectedRecord['userInfo'] = this.props.Login.userInfo;\n          selectedRecord['needsection'] = comboData.item.needsection;\n          selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\n          this.setState({\n            selectedMaterial: comboData\n          });\n          this.props.getMaterialInventoryBasedOnMaterial(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\n        } else if (fieldName === \"sinventoryid\") {\n          selectedRecord[\"nmaterialcode\"] = this.state.selectedMaterial.value;\n          selectedRecord[\"materialInvCode\"] = comboData.item.nmaterialinventorycode;\n          selectedRecord['userInfo'] = this.props.Login.userInfo;\n          selectedRecord['needsection'] = this.props.Login.masterData.selectedMaterial.needsection;\n          this.setState({\n            selectedMaterialInventory: comboData\n          }); // if(this.state.selectedMaterial.item.needsection == transactionStatus.NO){\n          //     selectedRecord['nsectioncode']=transactionStatus.NA;\n          // }else{\n\n          selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode; //}\n\n          this.props.getMaterialAvailQtyBasedOnInv(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\n        } else if (fieldName === \"sinstrumentname\") {\n          selectedRecord[\"ninstrumentnamecode\"] = comboData.value;\n          selectedRecord[\"sinstrumentname\"] = comboData.label;\n          selectedRecord['userInfo'] = this.props.Login.userInfo; //selectedRecord['sinstrumentid']=undefined;\n\n          selectedRecord['selectedInstrument'] = comboData.item;\n          selectedRecord['ninstrumentcatcode'] = comboData.item.ninstrumentcatcode;\n          selectedRecord['ninstrumentcode'] = comboData.item.ninstrumentcode;\n          this.props.getInstrumentID(selectedRecord, this.props.Login.masterData);\n        } else if (fieldName === \"sprojectcode\") {\n          this.setState({\n            selectedProjectcode: comboData\n          });\n        } else {\n          this.setState({\n            selectedInstrumentId: comboData\n          });\n        } // else{\n        //    // let nInstrumentCategory=\"\",nInstrument=\"\",nInstrumentID=\"\";\n        //     this.setState=({InstrumentCategory:{},Instrument:{},\n        //         InstrumentID:})\n        //   }\n\n      }\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onMultiColumnValue = (value, key, flag, label, keys) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (value.length > 0) {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = value[0][objarray];\n        });\n\n        if (flag) {\n          keys.map((objkey, index) => {\n            return selectedRecord[objkey] = {\n              \"label\": value[0][label[index]],\n              \"value\": value[0][objkey]\n            };\n          });\n        }\n      } else {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = \"\";\n        });\n        keys.map((objkey, index) => {\n          return selectedRecord[objkey] = \"\";\n        });\n      }\n\n      this.props.getBatchManufacturerComboChange(selectedRecord, this.props.Login.userInfo);\n    };\n\n    this.onMultiColumnMAHChange = (value, key) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (value.length > 0) {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = value[0][objarray];\n        });\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.clearComponentInput = () => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[\"nproductcode\"] = undefined;\n      selectedRecord[\"ncomponentcode\"] = undefined;\n      selectedRecord[\"smanuflotno\"] = \"\";\n      selectedRecord[\"dateprompt\"] = transactionStatus.NO;\n      selectedRecord[\"transdatefrom\"] = this.props.Login.componentDefaultSearchDate;\n      selectedRecord[\"transdateto\"] = this.props.Login.componentDefaultSearchDate;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.openClosePortal = () => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ninstrumentcode !== transactionStatus.NA) {\n        if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED) {\n          if (this.props.Login.openELNSheet === undefined || !this.props.Login.openELNSheet) {\n            if (this.props.Login.elnUserInfo !== null || this.props.Login.elnUserInfo != undefined) {\n              this.props.Login.masterData.enlLink = \"\";\n              let integrationSettings = this.props.Login.integrationSettings;\n              let inputParam = {\n                userInfo: this.props.Login.userInfo,\n                elnUserInfo: this.props.Login.elnUserInfo,\n                elnSite: this.props.Login.elnSite,\n                nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.sbatcharno,\n                ntestcode: this.props.Login.masterData.ntestcode\n              };\n              let link = \"\";\n              let detail = CF_encryptionData(\"-1//Sheet\").EncryptData;\n              const settedId = inputParam.nbatchmastercode; //console.log(settedId);\n\n              let encryptedbatchid = CF_encryptionData(settedId).EncryptData;\n              const userObject = {\n                usercode: inputParam.elnUserInfo.nelncode,\n                username: inputParam.elnUserInfo.selnuserid,\n                userfullname: inputParam.elnUserInfo.selnusername,\n                lsusergroup: {\n                  usergroupcode: inputParam.elnUserInfo.nelnusergroupcode,\n                  usergroupname: inputParam.elnUserInfo.nelnusergroupcode\n                },\n                lssitemaster: {\n                  sitecode: inputParam.elnSite.nelnsitecode\n                }\n              };\n              let encrypteduser = CF_encryptionData(userObject).EncryptData;\n              const baseURL = integrationSettings[1].slinkname;\n              link = baseURL + \"/vieworder\" + '#{\"d\":\"' + settedId + '\",\"user\":\"' + encrypteduser + '\",\"batchid\":\"' + encryptedbatchid + '\"}'; // this.props.getELNTestValidation(test,this.props.Login.integrationSettings); \n\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  openELNSheet: true,\n                  masterData: { ...this.props.Login.masterData,\n                    enlLink: link,\n                    baseURL: baseURL\n                  }\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_ELNSHEETNOTFOUND\"\n              }));\n            }\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                openELNSheet: false,\n                masterData: { ...this.props.Login.masterData,\n                  enlLink: \"\"\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTINITIATEDBATCH\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTBATCHWITHINSTRUMENT\"\n        }));\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      let selectedRecord = {};\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDropImage = (attachedFiles, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = attachedFiles;\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.saveSample = addedSamplesListSortedList => {\n      const compList = addedSamplesListSortedList.map(x => {\n        delete x.selected; //return {...x, 'sregistereddate':formatInputDate(x.sregistereddate, false)}\n\n        return x;\n      }) || [];\n\n      if (compList === undefined) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLESTOSUBMIT\"\n        }));\n      } else if (compList.length > 0) {\n        let sampleArray = [];\n        compList.map(item => sampleArray.push({\n          npreregno: item.npreregno,\n          ntransactionsamplecode: item.ntransactionsamplecode,\n          ntransactiontestcode: item.ntransactiontestcode,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster ? this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode : transactionStatus.NA,\n          sarno: item.jsonuidata.samplelist.sarno,\n          ssamplearno: item.jsonuidata.samplelist.ssamplearno,\n          stestname: item.jsonuidata.samplelist.stestname,\n          jsonuidata: {\n            samplelist: item.jsonuidata.samplelist\n          },\n          jsondata: {\n            samplelist: item.jsondata.samplelist\n          }\n        }));\n        let nbatchmastercode = this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode; // batchSample = {\n        //     npreregno: addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\n        //     ntransactionsamplecode : addedsamplelist.map(sample=>sample.ntransactionsamplecode).join(\",\"),\n        //     ntransactiontestcode : addedsamplelist.map(sample=>sample.ntransactiontestcode).join(\",\"),\n        //     npreregno : addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\n        //     nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster &&\n        //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\n        //     jsonuidata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}',\n        //     jsondata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}'\n        // }\n        //jsondata : \n\n        const inputParam = {\n          inputData: {\n            batchSample: nbatchmastercode,\n            sampleArray,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            nregtypecode: this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\n            nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA\n          }\n        };\n        this.props.createSampleAction(inputParam.inputData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELCETONESAMPLE\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.operation === \"createSample\") {\n        this.saveSample(this.state.addedSamplesListSortedList);\n      } else if (this.props.Login.operation === \"initiate\") {\n        this.testStartActions(this.props.Login.masterData.SelectedBatchmaster, this.props.Login.testStartId);\n      } else if (this.props.Login.operation === \"complete\") {\n        this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster, this.props.Login.completeId);\n      } else if (this.props.Login.operation === \"createiqcsample\") {\n        this.batchSaveIQCActions(this.props.Login.masterData.SelectedBatchmaster);\n      } else {\n        let inputData = {};\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n\n        if (this.props.Login.operation === \"create\") {\n          inputData[\"fromDate\"] = obj.fromDate;\n          inputData[\"toDate\"] = obj.toDate;\n        }\n\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"nneedcombodataforFilter\"] = \"true\";\n        inputData[\"needFilterSubmit\"] = \"false\";\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"nprevioustestcode\"] = this.state.selectedRecord && this.state.selectedRecord.nprevioustestcode != undefined ? this.state.selectedRecord.nprevioustestcode : this.state.selectedTestSynonym.value;\n        inputData[\"ntestcode\"] = this.state.selectedTestSynonym ? this.state.selectedTestSynonym.value : transactionStatus.NA;\n        inputData[\"nsectioncode\"] = this.state.selectedSection ? this.state.selectedSection.item.nsectioncode : transactionStatus.NA; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType.nsampletypecode;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType.nregtypecode;\n        //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.value :transactionStatus.NA;\n\n        inputData[\"ninstrumentcatcode\"] = this.state.selectedInstCategory ? this.state.selectedInstCategory.value : transactionStatus.NA;\n        inputData[\"ninstrumentcode\"] = this.state.selectedInstrument ? this.state.selectedInstrument.value : transactionStatus.NA;\n        inputData[\"nproductcode\"] = this.state.selectedProduct ? this.state.selectedProduct.value : transactionStatus.NA;\n        inputData[\"ntransactionstatus\"] = transactionStatus.DRAFT;\n        inputData[\"sbatcharno\"] = '-'; // inputData[\"defaultSampleType\"]=this.props.Login.masterData.realSampleTypeValue ? \n        // this.props.Login.masterData.realSampleTypeValue : transactionStatus.NA;\n        // inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? \n        // this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\n        // inputData[\"defaultRegistrationSubType\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue ? \n        // this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA;\n\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; // inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n\n        inputData[\"ntranscode\"] = transactionStatus.DRAFT;\n        inputData[\"sinstrumentid\"] = this.state.selectedInstrumentId ? this.state.selectedInstrumentId.label : \"NA\"; // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? \n        // this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\n        // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\n        // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n\n        inputData[\"napprovalversioncode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : transactionStatus.NA;\n        inputData[\"nprojectmastercode\"] = this.state.selectedProjectcode ? this.state.selectedProjectcode.value : transactionStatus.NA;\n        let postParam = undefined;\n        postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          unchangeList: [\"FromDate\", \"ToDate\"],\n          isSingleGet: true,\n          fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\"\n        };\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\",\n          inputData: inputData,\n          postParam,\n          searchRef: this.searchRef,\n          operation: this.props.Login.operation,\n          saveType,\n          formRef\n        };\n\n        if (this.props.Login.operation === \"create\") {\n          this.searchRef.current.value = \"\";\n          this.props.createBatchmasterAction(inputParam[\"inputData\"], this.props.Login.masterData, inputParam[\"operation\"]);\n        } else {\n          inputData[\"nbatchmastercode\"] = this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode;\n          inputData[\"SelectedBatchmaster\"] = this.props.Login.masterData.SelectedBatchmaster;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.editId)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                screenName: \"IDS_BATCHCREATION\",\n                operation: inputParam.operation\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.updateBatchcreationAction(inputParam[\"inputData\"], this.props.Login.masterData, inputParam[\"operation\"]);\n          }\n        }\n      } // const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n      // if (esignNeeded) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\n      //             openModal: true, screenName: \"IDS_BATCHCREATION\",\n      //             operation: this.props.Login.operation\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n      //     const selectedRecord = { ...this.state.selectedRecord, sbatchfillinglotno: \"\" }\n      //     this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", selectedRecord);\n      // }\n\n    };\n\n    this.addSaveDataGrid = () => {\n      let filterdata1 = this.state.dataState ? process(this.state.addComponentDataListCopy || [], { ...this.state.dataState,\n        take: this.state.samples.length\n      }).data : [];\n      let sortListedData1 = filterdata1.filter(x => this.state.addedSamplesList.some(item => item.ntransactiontestcode === x.ntransactiontestcode));\n      let exists = this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined ? sortListedData1.length > 0 ? true : false : true;\n\n      if (this.state.addedSamplesList.length > 0 && exists) {\n        let addedSamplesListSortedList = [];\n        let updatedList = [];\n        let ListedData = [];\n        let sortListedData = [];\n\n        if (this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined) {\n          let filterdata = process(this.state.addComponentDataListCopy || this.state.samples, { ...this.state.dataState,\n            take: this.state.samples.length\n          }).data || [];\n          sortListedData = filterdata.filter(x => this.state.addedSamplesList.some(item => item.ntransactiontestcode === x.ntransactiontestcode));\n          updatedList = filterdata.filter(item => !sortListedData.some(addedItem => addedItem.ntransactiontestcode === item.ntransactiontestcode));\n          updatedList.map(x => {\n            if (x.selected) {\n              ListedData.push({ ...x,\n                'jsondata': {\n                  'samplelist': x\n                },\n                'jsonuidata': {\n                  'samplelist': x\n                }\n              });\n            }\n          });\n        } else {\n          updatedList = this.state.samples.filter(item => !this.state.addedSamplesList.some(addedItem => addedItem.ntransactiontestcode === item.ntransactiontestcode));\n          ListedData = [];\n          sortListedData = this.state.addedSamplesList;\n        }\n\n        if (this.state.addedSamplesListSortedList.length > 0) {\n          this.state.addedSamplesListSortedList.map(item => {\n            const newItem = JSON.parse(JSON.stringify(item));\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"selected\"] = false;\n            newItem[\"jsondata\"]['samplelist'] = { ...item,\n              selected: false\n            };\n            newItem[\"jsonuidata\"]['samplelist'] = { ...item,\n              selected: false\n            };\n            addedSamplesListSortedList.push(newItem);\n          });\n        }\n\n        sortListedData.map(item => {\n          const newItem = JSON.parse(JSON.stringify(item));\n          newItem[\"jsondata\"] = {};\n          newItem[\"jsonuidata\"] = {};\n          newItem[\"selected\"] = false;\n          newItem[\"jsondata\"]['samplelist'] = { ...item,\n            selected: false\n          };\n          newItem[\"jsonuidata\"]['samplelist'] = { ...item,\n            selected: false\n          };\n          addedSamplesListSortedList.push(newItem);\n        });\n        this.setState({\n          samples: updatedList,\n          addSelectAll: this.valiateCheckAll(updatedList),\n          addedSamplesListSortedList: addedSamplesListSortedList,\n          addedSamplesList: ListedData,\n          addComponentDataListCopy: this.valiateCopy(addedSamplesListSortedList || [], updatedList || [], ListedData || [])\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELCETONESAMPLE\"\n        }));\n      }\n    };\n\n    this.handleClickDelete = row => {\n      let updatedAddList = [];\n      const ntransactiontestcode = row.dataItem.ntransactiontestcode;\n      const updatedList = this.state.addedSamplesListSortedList.filter(item => item.ntransactiontestcode !== ntransactiontestcode);\n      const exists = this.state.samples.some(item => item.ntransactiontestcode === ntransactiontestcode);\n\n      if (!exists) {\n        updatedAddList = this.state.samples.map(item => {\n          return item;\n        });\n        updatedAddList.push({ ...row.dataItem,\n          selected: false\n        });\n      } //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\n\n\n      this.setState({\n        samples: updatedAddList,\n        addedSamplesListSortedList: updatedList,\n        addSelectAll: this.valiateCheckAll(updatedAddList),\n        deleteSelectAll: this.valiateCheckAll(updatedAddList),\n        addComponentDataListCopy: this.valiateCopy(updatedList || [], updatedAddList || [])\n      });\n    };\n\n    this.deleteBatchCreation = (selectedBatch, deleteId, operation) => {\n      if (selectedBatch.ntransactionstatus === transactionStatus.COMPLETED || selectedBatch.ntransactionstatus === transactionStatus.INITIATED || selectedBatch.ntransactionstatus === transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else {\n        let inputData = {};\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedBatch.nbatchmastercode,\n          fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userInfo: this.props.Login.userInfo,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : transactionStatus.NA,\n            nsampletypecode: this.props.Login.masterData.defaultSampleType.nsampletypecode\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"currentdate\"] = formatInputDate(new Date(), true);\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedBatch.nbatchmastercode; //inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n\n        inputData[\"ntranscode\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.value === transactionStatus.ALL ? this.state.BCFilterStatus.filter(item1 => item1.item.ntransactionstatus !== transactionStatus.ALL).map(item1 => item1.item.ntransactionstatus).join(\",\") : this.state.FilterStatusValue.value; // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\n        // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n\n        inputData[\"napprovalversioncode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"selectedBatch\"] = selectedBatch;\n        inputData[\"samples\"] = this.props.Login.masterData.Samples;\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          operation,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.fetchEditData = editParam => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT) {\n        this.props.getActiveBatchCreationService(editParam, this.props.Login.masterData.SelectedBatchmaster);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      }; //ALPD-3399\n\n      if (this.props.Login.operation == \"complete\" || this.props.Login.operation == \"initiate\") {\n        this.props.validateEsignforBatch(inputParam);\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      }\n    };\n\n    this.closeFilter = () => {\n      let inputValues = {\n        fromDate: this.props.Login.masterData.realFromDate || new Date(),\n        //this.state.selectedFilter[\"fromDate\"] != undefined ?\n        //rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"fromDate\"]) : this.fromDate,\n        toDate: this.props.Login.masterData.realToDate || new Date(),\n        //this.state.selectedFilter[\"toDate\"] != undefined ?\n        // rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"toDate\"]) : this.toDate,\n        SampleType: this.props.Login.masterData.realSampleTypeList || [],\n        SampleTypeValue: this.props.Login.masterData.realSampleTypeValue || {},\n        defaultSampleType: this.props.Login.masterData.realSampleTypeValue || {},\n        RegistrationType: this.props.Login.masterData.realRegistrationTypeList || [],\n        RegTypeValue: this.props.Login.masterData.realRegTypeValue || {},\n        defaultRegistrationType: this.props.Login.masterData.realRegTypeValue || {},\n        RegistrationSubType: this.props.Login.masterData.realRegistrationSubTypeList || [],\n        RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue || {},\n        BCFilterStatus: this.props.Login.masterData.realBCFilterStatusList || [],\n        FilterStatusValue: this.props.Login.masterData.realdefaultFilterStatus || {},\n        ApprovalConfigVersion: this.props.Login.masterData.realApprovalConfigVersionList || [],\n        ApprovalVersionValue: this.props.Login.masterData.realApproveConfigVersion || {},\n        defaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus || {},\n        defaultApprovalConfigVersion: this.props.Login.masterData.realApproveConfigVersion || {},\n        defaultRegistrationSubType: this.props.Login.masterData.realRegSubTypeValue || {},\n        ndesigntemplatemappingcode: this.props.Login.masterData.realndesigntemplatemappingcode || -1\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false,\n          masterData: { ...this.props.Login.masterData,\n            ...inputValues\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.props.Login.masterData.defaultRegistrationType != undefined && this.state.FilterStatusValue.item != undefined && this.state.nregsubtypecode.item != undefined && this.state.ApprovalVersionValue.item != undefined) {\n        let inputData = {};\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.fromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.toDate, this.props.Login.userInfo);\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"realFromDate\"] = obj.fromDate;\n        inputData[\"realToDate\"] = obj.toDate;\n        inputData[\"needFilterSubmit\"] = \"true\";\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA; // inputData[\"ntranscode\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.value===0 ? this.state.BCFilterStatus.map(item1=>\"'\"+item1.item.ntransactionstatus+\"'\").join(\",\") : this.state.FilterStatusValue.value;\n        //ALPD-3399          \n\n        inputData[\"ntranscode\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.value === transactionStatus.ALL ? this.state.BCFilterStatus.filter(item1 => item1.item.ntransactionstatus !== transactionStatus.ALL).map(item1 => item1.item.ntransactionstatus).join(\",\") : this.state.FilterStatusValue.value;\n        inputData[\"napprovalconfigcode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA; //  inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && \n        //  this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\n\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA; // inputData[\"napprovalversioncode\"]=this.props.Login.masterData.realApproveConfigVersion && \n        //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? \n        //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode: transactionStatus.NA;\n\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA; //inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\n        // inputData[\"realdefaultFilterStatus\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\n\n        inputData[\"realRegistrationTypeList\"] = this.props.Login.masterData.RegistrationType;\n        inputData[\"realRegTypeValue\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"realRegistrationSubTypeList\"] = this.props.Login.masterData.RegistrationSubType;\n        inputData[\"realRegSubTypeValue\"] = this.props.Login.masterData.defaultRegistrationSubType;\n        inputData[\"realBCFilterStatusList\"] = this.props.Login.masterData.BCFilterStatus;\n        inputData[\"realdefaultFilterStatus\"] = this.state.FilterStatusValue !== undefined ? this.state.FilterStatusValue && this.state.FilterStatusValue.item : this.props.Login.masterData.defaultFilterStatus;\n        inputData[\"realApprovalConfigVersionList\"] = this.props.Login.masterData.ApprovalConfigVersion; //inputData[\"realApproveConfigVersion\"] = this.props.Login.masterData.defaultApprovalConfigVersion;\n\n        inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue !== undefined ? this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item : this.props.Login.masterData.defaultApprovalConfigVersion;\n        inputData[\"realndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\n        inputData[\"operation\"] = \"filtersubmit\";\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchmaster\",\n          displayName: \"IDS_BATCHCREATION\",\n          inputData: inputData,\n          searchRef: this.searchRef\n        };\n        this.props.onActionFilterSubmit(inputParam[\"inputData\"], this.props.Login.masterData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.reloadData = isFilterSubmit => {\n      this.searchRef.current.value = \"\"; // let obj = this.convertDatetoString((selectedRecord && selectedRecord[\"fromdate\"]) || this.props.Login.masterData.FromDate, (selectedRecord && selectedRecord[\"todate\"]) || this.props.Login.masterData.ToDate)\n\n      if (this.props.Login.masterData.realRegTypeValue !== transactionStatus.NA && this.props.Login.masterData.realRegTypeValue !== null && this.props.Login.masterData.realRegSubTypeValue !== transactionStatus.NA && this.props.Login.masterData.realRegSubTypeValue !== null && this.props.Login.masterData.realRegSubTypeValue !== undefined && (this.props.Login.masterData.realApproveConfigVersion !== transactionStatus.NA || this.props.Login.masterData.realApproveConfigVersion !== null && this.props.Login.masterData.realApproveConfigVersion !== undefined) && (this.props.Login.masterData.defaultFilterStatus !== transactionStatus.NA || this.props.Login.masterData.defaultFilterStatus !== null && this.props.Login.masterData.defaultFilterStatus !== undefined)) {\n        let inputData = {};\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\n        inputData[\"defaultRegistrationSubType\"] = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA; //inputData[\"ntranscode\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus || transactionStatus.NA;\n\n        inputData[\"ntranscode\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus === transactionStatus.ALL ? this.state.BCFilterStatus.filter(item1 => item1.item.ntransactionstatus !== transactionStatus.ALL).map(item1 => item1.item.ntransactionstatus).join(\",\") : this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode || transactionStatus.NA;\n        inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item.napprovalconfigversioncode || transactionStatus.NA; //inputData[\"defaultFilterStatus\"]=this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\n\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\n        inputData[\"realdefaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"realRegistrationTypeList\"] = this.props.Login.masterData.realRegistrationTypeList;\n        inputData[\"realRegTypeValue\"] = this.props.Login.masterData.realRegTypeValue;\n        inputData[\"realRegistrationSubTypeList\"] = this.props.Login.masterData.realRegistrationSubTypeList;\n        inputData[\"realRegSubTypeValue\"] = this.props.Login.masterData.realRegSubTypeValue;\n        inputData[\"realBCFilterStatusList\"] = this.props.Login.masterData.realBCFilterStatusList;\n        inputData[\"realdefaultFilterStatus\"] = this.state.FilterStatusValue !== undefined ? this.state.FilterStatusValue && this.state.FilterStatusValue.item : this.props.Login.masterData.realdefaultFilterStatus; // inputData[\"realdefaultFilterStatus\"] =this.props.Login.masterData.realdefaultFilterStatus!==undefined?this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus :this.props.Login.masterData.realdefaultFilterStatus;\n\n        inputData[\"realApprovalConfigVersionList\"] = this.props.Login.masterData.realApprovalConfigVersionList;\n        inputData[\"realApproveConfigVersion\"] = this.props.Login.masterData.realApproveConfigVersion;\n        inputData[\"realndesigntemplatemappingcode\"] = this.props.Login.masterData.realndesigntemplatemappingcode;\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchmaster\",\n          displayName: \"IDS_BATCHCREATION\",\n          inputData: inputData,\n          searchRef: this.searchRef\n        };\n        this.props.onActionFilterSubmit(inputParam[\"inputData\"], this.props.Login.masterData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.onClickReport = (selectedRecord, flag, ncontrolcode) => {\n      const reportParam = {\n        classUrl: \"certificategeneration\",\n        methodUrl: \"reportGeneration\",\n        screenName: \"CertificateGeneration\",\n        operation: \"previewReport\",\n        primaryKeyField: \"nreleasebatchcode\",\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        ncontrolCode: -1,\n        inputData: {\n          sprimarykeyname: 'nreleasebatchcode',\n          nprimarykey: selectedRecord.nreleasebatchcode,\n          nreleasebatchcode: selectedRecord.nreleasebatchcode,\n          ncertificatetypecode: selectedRecord.ndecision === transactionStatus.PASS && flag === 1 ? selectedRecord.ncertificatetypecode : -1,\n          ndecisionstatus: selectedRecord.ndecision,\n          // === transactionStatus.DRAFT ? transactionStatus.PASS : selectedRecord.ndecision,\n          nreporttypecode: flag === 2 ? reportTypeEnum.SCREENWISE : reportTypeEnum.BATCH,\n          ncontrolcode,\n          ncoareporttypecode: flag === 2 ? -1 : reportCOAType.BATCHPREVIEW,\n          userinfo: this.props.Login.userInfo,\n          nflag: flag,\n          skipbatchvalidation: true\n        }\n      };\n      this.props.onClickReport(reportParam);\n    };\n\n    this.reportMethod = value => {\n      if (value.method === 1) {\n        this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 2, value.controlId);\n      } else {\n        this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 1, value.controlId);\n      }\n    };\n\n    const sampleState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const histortState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const iqcsampleState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const viewstate = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      selectedFilter: {},\n      sampleState,\n      histortState,\n      iqcsampleState,\n      viewstate,\n      selectedRecord: {},\n      addedSamplesListSortedList: [],\n      //confirmmsg:this.ConfirmMessage.bind(this),\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      sidebarview: false\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"stestname\", \"sinstrumentcatname\", \"sinstrumentname\", \"sproductname\", \"smanufname\", \"stransactiondate\", \"username\", \"stransactionstatus\", \"sdecision\", \"sbatcharno\", \"stransdisplaystatus\"];\n    this.sampleMandatoryFields = [];\n    this.copyMandatoryFields = [];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    // if (props.Login.masterStatus !== \"\") {\n    //     if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n    //        if(props.Login.operation == \"initiate\"){\n    //         toast.warn(props.Login.masterStatus);\n    //         //this.state.confirmmsg.confirm(\"warning\", \"Warning!\",  props.Login.masterStatus, undefined, \"ok\", undefined, true, undefined);\n    //        }\n    //     }\n    // }\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null; // if (props.Login.selectedRecord !== state.selectedRecord) {\n    //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\n    // }\n  } // const sampleColumnList = [];\n  // if (props.nneedsubsample){\n  //     sampleColumnList.push({\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\", \"width\": \"155px\"} );\n  // }\n  // else{\n  //     sampleColumnList.push({\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\", \"width\": \"155px\"});\n  // }\n\n\n  gridfillingColumn(data) {\n    const temparray = [];\n    data && data.map(option => {\n      if (option[designProperties.VALUE] !== \"dregdate\") {\n        temparray.push({\n          \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n          \"dataField\": option[designProperties.VALUE],\n          \"width\": \"200px\",\n          \"columnSize\": \"3\"\n        });\n      }\n    });\n\n    if (temparray) {\n      temparray.push({\n        \"idsName\": \"IDS_REGISTRATIONDATE\",\n        \"dataField\": \"dregdate\",\n        \"width\": \"250px\",\n        \"columnSize\": \"3\"\n      });\n    }\n\n    return temparray;\n  } //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\n\n\n  gridfillingColumnMoreItems(data) {\n    const temparray = [];\n    data && data.map(option => {\n      if (option[designProperties.VALUE] !== \"dregdate\") {\n        temparray.push({\n          \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n          \"dataField\": option[designProperties.VALUE],\n          \"width\": \"200px\",\n          \"columnSize\": \"3\"\n        });\n      }\n    });\n    return temparray;\n  }\n\n  // headerSelectionChange = (event) => {\n  //     const checked = event.syntheticEvent.target.checked;\n  //     let addedComponentList = this.state.addedComponentList || [];\n  //     if (checked) {\n  //         const data = this.state.addComponentDataList.map(item => {\n  //             if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\n  //                 addedComponentList.push({ ...item, selected: false });\n  //                 item.selected = checked;\n  //                 return item;\n  //             } else {\n  //                 let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\n  //                 olditem.selected = checked;\n  //                 return olditem;\n  //             }\n  //         });\n  //         this.setState({\n  //             addComponentDataList: data, addedComponentList,\n  //             addSelectAll: checked, deleteSelectAll: false\n  //         });\n  //     }\n  //     else {\n  //         let addedComponentData = this.state.addedComponentList || [];\n  //         let deletedListdData = this.state.deletedList || [];\n  //         const data = this.state.addComponentDataList.map(item => {\n  //             addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\n  //             deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\n  //             item.selected = checked;\n  //             return item;\n  //         });\n  //         // console.log(\"data:\",data1, data2);\n  //         this.setState({\n  //             addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\n  //             addSelectAll: checked, deleteSelectAll: false\n  //         });\n  //     }\n  // }\n  valiateCheckAll(data) {\n    let selectAll = true; // let checkRepeatComponent;\n    //  let addedComponentList = this.state.addedComponentList || [];\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false; // checkRepeatComponent=this.state.addComponentDataList.filter(item=>item.npreregno==data.npreregno)\n          // if(checkRepeatComponent.length>0){\n          //     selectAll = true;\n          // }else{\n          //     selectAll = false;\n          // }\n        }\n      });\n    } else {\n      //if (gridType === \"originalgrid\"){\n      selectAll = false; // }\n    }\n\n    return selectAll;\n  }\n\n  //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\n  shouldComponentUpdate(nextProps, nextState) {\n    if ((this.props.Login.openModal || this.props.Login.openChildModal) && nextState.isInitialRender === false && nextState.addedSamplesListSortedList !== this.state.addedSamplesListSortedList) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    let reportActionList = [];\n    let batchMandatoryFields = []; //commenting as its done in below code by rukshana\n    // if (this.props.Login.operation === \"update\") {\n    //     batchMandatoryFields.push(\n    //         { idsName: \"IDS_INSTRUMENTCATEGORY\", dataField: \"sinstrumentcatname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_INSTRUMENT\", dataField: \"sinstrumentname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_INSTRUMENTID\", dataField: \"sinstrumentid\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_PRODUCT\", dataField: \"sproductname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" }\n    //     );\n    // }\n    // else {\n    //     batchMandatoryFields.push(\n    //         { idsName: \"IDS_SECTION\", dataField: \"ssectionname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_TEST\", dataField: \"stestname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_INSTRUMENTCATEGORY\", dataField: \"sinstrumentcatname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_INSTRUMENT\", dataField: \"sinstrumentname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_INSTRUMENTID\", dataField: \"sinstrumentid\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_PRODUCT\", dataField: \"sproductname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" }\n    //     );\n    // }\n    //let mandatoryFields =[];\n\n    if (this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\") {\n      let {\n        selectedRecord\n      } = this.state;\n      batchMandatoryFields.push({\n        \"idsName\": \"IDS_SECTION\",\n        \"dataField\": \"ssectionname\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_TEST\",\n        \"dataField\": \"stestname\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, //{ \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\n      // { \"idsName\": \"IDS_INSTRUMENT\", \"dataField\": \"sinstrumentname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\n      // { \"idsName\": \"IDS_INSTRUMENTID\", \"dataField\": \"sinstrumentid\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\n      {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"sproductname\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n\n      if (selectedRecord && selectedRecord.sinstrumentcatname !== undefined && selectedRecord.ninstrumentcatcode > 0) {\n        batchMandatoryFields.push( // { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\n        {\n          \"idsName\": \"IDS_INSTRUMENT\",\n          \"dataField\": \"sinstrumentname\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }, {\n          \"idsName\": \"IDS_INSTRUMENTID\",\n          \"dataField\": \"sinstrumentid\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n      }\n    }\n\n    const getBatch = {\n      screenName: \"IDS_BATCHCREATION\",\n      operation: \"get\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"Batchcreation\",\n      keyName: \"batchcreation\"\n    };\n    this.fromDate = this.state.selectedFilter[\"fromdate\"] && this.state.selectedFilter[\"fromdate\"] || this.props.Login.masterData && this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : undefined;\n    this.toDate = this.state.selectedFilter[\"todate\"] && this.state.selectedFilter[\"todate\"] || this.props.Login.masterData && this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : undefined;\n    const addId = this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditBatchcreation\") && this.state.controlMap.get(\"EditBatchcreation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteBatchcreation\") && this.state.controlMap.get(\"DeleteBatchcreation\").ncontrolcode;\n    const testStartId = this.state.controlMap.has(\"BatchInitiate\") && this.state.controlMap.get(\"BatchInitiate\").ncontrolcode;\n    const completeId = this.state.controlMap.has(\"BatchComplete\") && this.state.controlMap.get(\"BatchComplete\").ncontrolcode;\n    const cancelId = this.state.controlMap.has(\"CancelBatch\") && this.state.controlMap.get(\"CancelBatch\").ncontrolcode;\n    const elnSheetId = this.state.controlMap.has(\"ELNSheet\") && this.state.controlMap.get(\"ELNSheet\").ncontrolcode;\n    const addParam = {\n      screenName: \"IDS_BATCHCREATION\",\n      primaryeyField: \"nreleasebatchcode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      //inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId,\n      nneedtestinitiate: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate,\n      masterData: this.props.Login.masterData,\n      fromdate: this.props.Login.masterData.fromDate,\n      todate: this.props.Login.masterData.toDate,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\n      napprovalconfigcode: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n      ntranscode: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus : transactionStatus.NA,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n    };\n    const viewInfoFields = [];\n    viewInfoFields.push({\n      \"fieldName\": \"sbatcharno\",\n      \"label\": \"IDS_BATCHARNO\"\n    }, {\n      \"fieldName\": \"ssectionname\",\n      \"label\": \"IDS_SECTION\"\n    }, {\n      \"fieldName\": \"stestname\",\n      \"label\": \"IDS_TESTNAME\"\n    }, {\n      \"fieldName\": \"sinstrumentcatname\",\n      \"label\": \"IDS_INSTRUMENTCATEGORY\"\n    }, {\n      \"fieldName\": \"sinstrumentid\",\n      \"label\": \"IDS_INSTRUMENTID\"\n    }, {\n      \"fieldName\": \"sinstrumentname\",\n      \"label\": \"IDS_INSTRUMENTNAME\"\n    }, {\n      \"fieldName\": \"sproductname\",\n      \"label\": \"IDS_SAMPLETYPE\"\n    }, {\n      \"fieldName\": \"stransdisplaystatus\",\n      \"label\": \"IDS_STATUS\"\n    }, {\n      \"fieldName\": \"username\",\n      \"label\": this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.INITIATED ? \"IDS_BATCHINITIATEDBY\" : this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED ? \"IDS_BATCHCOMPLETEDBY\" : \"IDS_BATCHCREATEDBY\"\n    });\n\n    if (this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode === SampleType.PROJECTSAMPLETYPE) {\n      viewInfoFields.push({\n        \"fieldName\": \"sprojectcode\",\n        \"label\": \"IDS_PROJECTCODE\"\n      });\n    }\n\n    let stransactionstatuscode = this.props.Login.masterData.SelectedFilterStatus ? String(this.props.Login.masterData.SelectedFilterStatus.ntransactionstatus) : null;\n\n    if (this.state.selectedRecord && this.state.selectedRecord[\"nfiltertransstatus\"] !== undefined) {\n      stransactionstatuscode = this.state.selectedRecord[\"nfiltertransstatus\"].value === String(0) ? null : String(this.state.selectedRecord[\"nfiltertransstatus\"].value);\n    }\n\n    let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n    const editParam = {\n      screenName: \"IDS_BATCHCREATION\",\n      operation: \"update\",\n      primaryKeyField: \"nbatchmastercode\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId,\n      masterData: this.props.Login.masterData,\n      naddcontrolCode: addId,\n      nprojectmastercode: this.props.Login.masterData.selectedTestSynonym && this.props.Login.masterData.selectedTestSynonym.nprojectmastercode,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA\n    };\n    const filterParam = {\n      inputListName: \"Batchmaster\",\n      selectedObject: \"SelectedBatchmaster\",\n      primaryKeyField: \"nbatchmastercode\",\n      fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\n      fecthInputObject: {\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        userInfo: this.props.Login.userInfo,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        napprovalconfigcode: this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA,\n        ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT,\n        nsampletypecode: this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA //fromDate, toDate, \n        //stransactionstatuscode,\n        //activeBCTab: this.props.Login.activeBCTab || \"IDS_COMPONENT\"\n\n      },\n      masterData: this.props.Login.masterData,\n      //unchangeList: [\"FromDate\", \"ToDate\", \"SelectedFilterStatus\"],\n      searchFieldList: this.searchFieldList\n    };\n    this.breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto\n    }, // {\n    //     \"label\": \"IDS_SAMPLETYPE\",\n    //     \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\n    // }, \n    {\n      \"label\": \"IDS_REGISTRATIONTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\" // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\n      // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\n\n    }, {\n      \"label\": \"IDS_REGISTRATIONSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\n    }, {\n      \"label\": \"IDS_BATCHSTATUS\",\n      \"value\": this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus ? this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus : \"NA\"\n    } // {\n    //     \"label\": \"IDS_CONFIGVERSION\",\n    //     \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\n    // }\n    ];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1523,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1524,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1525,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1528,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1529,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.Batchmaster || [],\n      selectedMaster: this.props.Login.masterData.SelectedBatchmaster,\n      primaryKeyField: \"nbatchmastercode\",\n      userInfo: this.props.Login.userInfo,\n      masterData: this.props.Login.masterData //getMasterDetail={this.props.getSelectedBatchCreationDetail}\n      ,\n      getMasterDetail: batch => this.props.getSelectedBatchCreationDetail(batch, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: getBatch,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_BATCHCREATION\"\n      }) //mainField=\"stestname\"\n      ,\n      mainField: \"sbatcharno\",\n      firstField: \"stestname\",\n      secondField: \"sinstrumentname\",\n      selectedListName: \"SelectedBatchmaster\",\n      objectName: \"BatchCreation\",\n      listName: \"IDS_BATCHCREATION\",\n      needValidation: false,\n      hidePaging: false // subFields={\n      //     [\n      //         { [designProperties.VALUE]: \"sinstrumentcatname\" },\n      //         { [designProperties.VALUE]: \"sinstrumentname\" },\n      //         // { [designProperties.VALUE]: \"smahname\" },\n      //         // { [designProperties.VALUE]: \"stransactionstatus\", [designProperties.COLOUR]: \"transstatuscolor\" }\n      //     ]\n      // }\n      ,\n      needFilter: true,\n      needMultiSelect: false,\n      subFieldsLabel: true,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterColumnData: this.props.filterColumnData,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      isClearSearch: this.props.Login.isClearSearch // skip={this.state.skip}\n      // take={this.state.take}\n      // handlePageChange={this.handlePageChange}\n      ,\n      addId: addId,\n      showFilterIcon: true,\n      userRoleControlRights: this.state.userRoleControlRights,\n      reloadData: this.reloadData,\n      openModal: () => this.createBatchValidation(addParam),\n      callCloseFunction: true // openModal={() => this.props.getTestInstrumentComboService(addParam)}\n      ,\n      commonActions:\n      /*#__PURE__*/\n      // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\n      React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1580,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n        onClick: () => this.props.getTestInstrumentComboService(addParam) // onClick={() => this.createBatchValidation(addParam)}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1582,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1589,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2 p-0\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\" //onClick={() => this.reloadData(false)} \n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1591,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(RefreshIcon, {\n        className: \"custom_icons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1596,\n          columnNumber: 45\n        }\n      }))) // </Tooltip>\n      ,\n      filterComponent: [{\n        \"IDS_FILTER\": /*#__PURE__*/React.createElement(BatchCreationFilter, {\n          fromDate: this.state.selectedFilter[\"fromDate\"] != undefined ? rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"fromDate\"]) : this.fromDate,\n          toDate: this.state.selectedFilter[\"toDate\"] != undefined ? rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"toDate\"]) : this.toDate,\n          SampleType: this.state.SampleType || [],\n          SampleTypeValue: this.props.Login.masterData.defaultSampleType || [],\n          RegType: this.state.RegistrationType || [],\n          RegTypeValue: this.props.Login.masterData.defaultRegistrationType || [],\n          RegSubType: this.state.RegistrationSubType || [],\n          RegSubTypeValue: this.state.nregsubtypecode || [],\n          DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue || [],\n          FilterStatus: this.state.BCFilterStatus || [],\n          FilterStatusValue: this.state.FilterStatusValue || [],\n          ApprovalVersion: this.state.ApprovalConfigVersion || [],\n          ApprovalVersionValue: this.state.ApprovalVersionValue || [],\n          REJobStatus: this.state.REJobStatus || [],\n          JobStatusValue: this.props.Login.masterData.defaultjobstatus || [],\n          Test: this.state.Testvalues || [],\n          TestValue: this.props.Login.masterData.selectedTestSynonym || [],\n          onFilterComboChange: this.onFilterComboChange,\n          handleDateChange: this.handleDateChange,\n          handleFilterDateChange: this.handleFilterDateChange,\n          userInfo: this.props.Login.userInfo,\n          onDesignTemplateChange: this.onDesignTemplateChange,\n          DynamicDesignMapping: this.state.stateDynamicDesign || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1604,\n            columnNumber: 55\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1530,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '8' : \"10\"}`,\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1635,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1636,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn \",\n      onClick: this.props.parentFunction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1637,\n        columnNumber: 33\n      }\n    }, !this.props.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1639,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1640,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1646,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1647,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.Batchmaster && this.props.Login.masterData.Batchmaster.length > 0 && this.props.Login.masterData.SelectedBatchmaster ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1651,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1652,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.SelectedBatchmaster.sbatcharno), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1655,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1656,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1657,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedBatchTestTAT && this.props.Login.masterData.SelectedBatchTestTAT.Deviation && this.props.intl.formatMessage({\n      id: \"IDS_DEVIATION\"\n    }) + \" : \" + this.props.Login.masterData.SelectedBatchTestTAT.Deviation, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined ${this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED ? \"outline-initiate\" : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED ? \"outline-success\" : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED ? \"outline-danger\" : \"outline-secondary\"} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1662,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedBatchmaster.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1670,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"openelnsheet\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(elnSheetId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_OPENELNSHEET\"\n      }) //onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}                                \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1680,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: elnimage,\n      alt: \"filer-icon action-icons-wrap\",\n      width: \"20\",\n      height: \"20\",\n      className: \"ActionIconColor img-normalize\",\n      onClick: () => this.openClosePortal(this.props.Login.masterData.SelectedBatchmaster, cancelId),\n      \"data-place\": \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1685,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"view\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_VIEWINFO\"\n      }) // hidden={this.props.userRoleControlRights.indexOf(this.props.viewVersionId) === -1}\n      ,\n      onClick: () => this.props.viewInfo(this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode, this.props.Login.userInfo, this.props.Login.masterData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1692,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1697,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editBatchCreation\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      onClick: () => this.fetchEditData(editParam) // onClick={() => this.props.getActiveBatchCreationService(editParam,\n      //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,this.props.Login.masterData.SelectedBatchmaster.ntestcode)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1700,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt //  title={this.props.intl.formatMessage({ id: \"IDS_EDITBATCH\" })}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1708,\n        columnNumber: 65\n      }\n    })),\n    /*#__PURE__*/\n    // this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate == true ?\n    React.createElement(Nav.Link, {\n      name: \"initiateBatchCreation\" //  data-for=\"tooltip-common-wrap\" \n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_BATCHINITIATE\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(testStartId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\" //role=\"button\"\n      ,\n      onClick: () => this.testPopUpStartActions(testStartId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1714,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1721,\n        columnNumber: 69\n      }\n    })) // :\"\"\n    , /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"completeBatchCreation\",\n      hidden: this.state.userRoleControlRights.indexOf(completeId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COMPLETE\"\n      }),\n      onClick: () => this.completePopUpStartActions(completeId) //onClick={() => this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster,completeId)}\n      // onClick={() => this.props.validateBatchComplete({\n      //     masterData: this.props.Login.masterData,\n      //     userInfo: this.props.Login.userInfo,\n      //     userRoleControlRights: this.props.Login.userRoleControlRights,\n      //     ncontrolCode: completeId,\n      //     nreleasebatchcode: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode\n      // })}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1728,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheckCircle // title={this.props.intl.formatMessage({ id: \"IDS_COMPLETEBATCH\" })}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1742,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteBatchCreation\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      onClick: () => this.ConfirmDelete(this.props.Login.masterData.SelectedBatchmaster, deleteId, \"delete\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1747,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1753,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteBatchCreation\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(cancelId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }) //onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}                                \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1757,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: reject,\n      alt: \"filer-icon action-icons-wrap\",\n      width: \"20\",\n      height: \"20\",\n      className: \"ActionIconColor img-normalize\",\n      onClick: () => this.cancelBatch(this.props.Login.masterData.SelectedBatchmaster, cancelId),\n      \"data-place\": \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1762,\n        columnNumber: 65\n      }\n    })), reportActionList.length > 0 ? /*#__PURE__*/React.createElement(CustomPopover, {\n      nav: true,\n      data: reportActionList,\n      Button: true,\n      hideIcon: true,\n      btnClasses: \"btn-circle btn_grey ml-2\",\n      textKey: \"value\",\n      dynamicButton: value => this.reportMethod(value),\n      userRoleControlRights: this.state.userRoleControlRights,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1770,\n        columnNumber: 65\n      }\n    }) : \"\")))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1789,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1790,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1791,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1792,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(CustomTab, {\n      activeKey: this.props.Login.batchactiveKey ? this.props.Login.batchactiveKey : \"IDS_SAMPLE\",\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1793,\n        columnNumber: 61\n      }\n    })))))) : \"\"))))), /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1815,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1816,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      centered: true,\n      scrollable: true,\n      bsPrefix: \"model model_zindex\",\n      show: this.props.Login.openELNSheet // show={this.state.openELNSheet}\n      ,\n      onHide: this.openClosePortal,\n      dialogClassName: `${this.props.nflag && this.props.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`,\n      backdrop: \"static\",\n      keyboard: false,\n      enforceFocus: false,\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1817,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1830,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      style: {\n        \"line-height\": \"1.0\"\n      },\n      id: \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1831,\n        columnNumber: 33\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_ELNSHEET\"\n    })), /*#__PURE__*/React.createElement(ReactTooltip, {\n      globalEventOff: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1834,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1837,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-inner-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1838,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Iframe // url={\"http://agl69:8080/QuaLISWeb/#/login\"}\n    , {\n      url: this.props.Login.masterData.enlLink,\n      width: \"98%\",\n      height: \"1000px\",\n      id: \"reportviewID\",\n      className: \"reportview\" //display=\"initial\"\n      /// position=\"relative\" \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1840,\n        columnNumber: 37\n      }\n    })))))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: this.props.Login.operation === \"createSample\" ? \"xl\" : \"lg\",\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.operation === \"createSample\" ? this.props.intl.formatMessage({\n        id: \"IDS_SAMPLE\"\n      }) : this.props.Login.operation === \"initiate\" || this.props.Login.operation === \"view\" || this.props.Login.operation === \"complete\" ? this.props.intl.formatMessage({\n        id: \"IDS_BATCH\"\n      }) : this.props.Login.operation === \"createiqcsample\" ? this.props.intl.formatMessage({\n        id: \"IDS_BATCHIQCSAMPLE\"\n      }) : this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\" ? batchMandatoryFields //  : this.props.Login.operation === \"initiate\"  ?\n      //    this.initiateMandatoryFields \n      //  : this.props.Login.operation === \"complete\" ?\n      //    this.completeMandatoryFields\n      : this.props.Login.operation === \"createiqcsample\" ? this.materialIqcMandatory : [],\n      showSaveContinue: this.state.showSaveContinue,\n      noSave: this.props.Login.operation === \"view\" ? true : false,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1892,\n          columnNumber: 33\n        }\n      }) : this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\" ? /*#__PURE__*/React.createElement(AddBatchCreation, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        onNumericInputOnChange: this.onNumericInputOnChange,\n        handleDateChange: this.handleDateChange,\n        sampleType: this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA,\n        Test: this.state.Testvalues || [],\n        selectedInstrumentCategory: this.state.selectedInstCategory,\n        InstrumentCategory: this.state.InstrumentCategory,\n        Instrument: this.state.Instrument,\n        selectedInstrument: this.state.selectedInstrument,\n        productCategory: this.state.ProductCategory,\n        selectedProductCategory: this.state.selectedProductCategory,\n        TestValue: this.state.selectedTestSynonym || [],\n        product: this.state.Product || [],\n        instrumentID: this.state.InstrumentID || [],\n        selectedProduct: this.state.selectedProduct || [],\n        studyPlanList: this.props.Login.studyPlanList || [],\n        manufacturerList: this.props.Login.productManufacturerList || [],\n        maHolderList: this.props.Login.maHolderList || [],\n        timeZoneList: this.props.Login.timeZoneList || [],\n        selectedBacthCreation: this.props.Login.masterData.SelectedBatchmaster || {},\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        selectedInstrumentId: this.state.selectedInstrumentId,\n        onMultiColumnValue: this.onMultiColumnValue,\n        onMultiColumnMAHChange: this.onMultiColumnMAHChange,\n        batchCreationEditStatusList: this.props.Login.batchCreationEditStatusList,\n        Section: this.state.Section,\n        selectedSection: this.state.selectedSection,\n        ProjectCode: this.state.ProjectCode,\n        selectedProjectcode: this.state.selectedProjectcode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1898,\n          columnNumber: 37\n        }\n      }) : this.props.Login.operation === \"createSample\" ? /*#__PURE__*/React.createElement(AddSample //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\n      , {\n        childDataChange: this.childDataChange,\n        dataStateChangeBatchSample: this.dataStateChangeBatchSample,\n        addSaveDataGrid: this.addSaveDataGrid,\n        handleClickDelete: this.handleClickDelete,\n        addedSamplesListSortedList: this.state.addedSamplesListSortedList || [],\n        onInputOnChange: this.onInputOnChange,\n        getProductByCategory: this.getProductByCategory,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        userInfo: this.props.Login.userInfo,\n        productCategoryList: this.props.productCategoryList,\n        productList: this.props.productList,\n        componentList: this.props.componentList,\n        getDataForAddComponent: this.getDataForAddComponent,\n        clearComponentInput: this.props.clearComponentInput //samples={this.state.addsampleList ?this.state.addsampleList: this.state.samples || []}\n        ,\n        samples: this.state.samples || [],\n        headerSelectionChange: this.headerSelectionChange,\n        selectionChange: this.selectionChange,\n        addedComponentList: this.state.addedComponentList || [],\n        addedHeaderSelectionChange: this.addedHeaderSelectionChange,\n        addedSelectionChange: this.addedSelectionChange //dataStateChange={this.dataStateChange} \n        ,\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        screenName: this.props.screenName,\n        addSelectAll: this.state.addSelectAll,\n        deleteSelectAll: this.state.deleteSelectAll,\n        onDeleteSelectedComponent: this.onDeleteSelectedComponent,\n        componentPopupSkip: this.props.componentPopupSkip,\n        componentPopupTake: this.props.componentPopupTake,\n        componentPageSizes: this.props.componentPageSizes,\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample //dataResult={process(this.props.Login.masterData.samples || [], this.state.sampleState)}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1935,\n          columnNumber: 41\n        }\n      }) : this.props.Login.operation === \"initiate\" || this.props.Login.operation === \"complete\" ? /*#__PURE__*/React.createElement(AddBatchinitiate, {\n        userInfo: this.props.Login.userInfo,\n        operation: this.props.Login.operation,\n        handleDateChange: this.handleDateChange,\n        selectedRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        currentTime: this.props.Login.currentTime || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1976,\n          columnNumber: 45\n        }\n      }) : this.props.Login.operation === \"view\" ? /*#__PURE__*/React.createElement(Card, {\n        className: \"one\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1985,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1986,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(ViewInfo, {\n        userInfo: this.props.Login.userInfo,\n        selectedRecordView: this.props.Login.masterData.selectedRecordView,\n        viewInfoFields: viewInfoFields,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1987,\n          columnNumber: 57\n        }\n      }))) : this.props.Login.operation === \"createiqcsample\" ? /*#__PURE__*/React.createElement(AddMaterialIqc, {\n        userInfo: this.props.Login.userInfo,\n        operation: this.props.Login.operation,\n        materialCategory: this.state.MaterialCategory,\n        selectedMaterialType: this.state.selectedMaterialType,\n        selectedMaterialCategory: this.state.selectedMaterialCategory,\n        onComboChange: this.onComboChange,\n        selectedMaterial: this.state.selectedMaterial,\n        screenName: this.props.intl.formatMessage({\n          id: \"IDS_SPECIFICATION\"\n        }),\n        handleSaveClick: this.handleSaveClick,\n        material: this.state.Material,\n        materialInventory: this.state.MaterialInventory,\n        AddSpec: this.AddSpec,\n        onInputOnChange: this.onInputOnChange,\n        currentTime: this.props.Login.currentTime || [],\n        loadSpec: this.props.Login.loadSpec,\n        selectedMaterialInventory: this.state.selectedMaterialInventory,\n        selectedInventoryUnit: this.props.Login.masterData.selectedInventoryUnit,\n        AgaramTree: this.props.Login.AgaramTree,\n        openNodes: this.props.Login.OpenNodes,\n        onTreeClick: this.onTreeClick,\n        focusKey: this.props.Login.FocusKey,\n        activeKey: this.props.Login.batchactiveKey,\n        Specification: this.props.Login.Specification,\n        selectedSpec: this.props.Login.selectedSpec,\n        selectedRecord: this.state.selectedRecord,\n        onSpecChange: this.onspecChange,\n        openSpecModal: this.props.Login.openSpecModal,\n        closeModal: this.closeModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1995,\n          columnNumber: 53\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1863,\n        columnNumber: 25\n      }\n    }) : \"\", this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      userRoleControlRights,\n      controlMap,\n      selectedRecord,\n      filterData,\n      addedComponentList,\n      filterStatusList,\n      dataState,\n      sahDataState,\n      bahDataState,\n      chDataState,\n      testCommentDataState,\n      SampleType,\n      RegistrationType,\n      RegistrationSubType,\n      BCFilterStatus,\n      REJobStatus,\n      Testvalues,\n      ApprovalConfigVersion,\n      skip,\n      take,\n      testskip,\n      testtake,\n      selectedFilter,\n      InstrumentCategory,\n      selectedInstCategory,\n      ProductCategory,\n      Instrument,\n      selectedInstrument,\n      selectedTestSynonym,\n      nregsubtypecode,\n      selectedProductCategory,\n      Product,\n      selectedProduct,\n      samples,\n      addSelectAll,\n      deleteSelectAll,\n      ApprovalVersionValue,\n      FilterStatusValue,\n      Section,\n      selectedSection,\n      sampleGridItem,\n      subsampleGridItem,\n      testGridItem = [],\n      DynamicGridItem,\n      samplegridmoreitem,\n      DynamicGridMoreItem,\n      MaterialCategory,\n      selectedMaterialType,\n      Material,\n      selectedMaterial,\n      selectedMaterialCategory,\n      MaterialInventory,\n      selectedMaterialInventory,\n      Specification,\n      selectedSpec,\n      addedSamplesList,\n      testGridArnoItems,\n      InstrumentID,\n      selectedInstrumentId,\n      sinstrumentid,\n      selectedProjectcode,\n      ProjectCode\n    } = this.state;\n    let isStateChanged = false;\n    let bool = false;\n    addedSamplesList = []; // samples = [];\n\n    if (this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n      let dataState = {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \n\n      };\n      bool = true;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      isStateChanged = true;\n      SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\n      RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      BCFilterStatus = constructOptionList(this.props.Login.masterData.BCFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", \"nsorter\", 'ascending', \"ntransactionstatus\", false);\n      REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\n      Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestname', 'ascending', 'ntestcode', false);\n      ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname', 'ascending', 'napprovalconfigversioncode', false);\n      InstrumentCategory = constructOptionList(this.props.Login.masterData.instrumentCategory || [], 'ninstrumentcatcode', 'sinstrumentcatname', 'ascending', 'ninstrumentcatcode', false);\n      Instrument = constructOptionList(this.props.Login.masterData.instrument || [], 'ninstrumentnamecode', 'sinstrumentname', 'ascending', 'ninstrumentcode', false);\n      ProductCategory = constructOptionList(this.props.Login.masterData.productcategory || [], 'nproductcatcode', 'sproductcatname', 'ascending', 'nproductcatcode', false);\n      Product = constructOptionList(this.props.Login.masterData.product || [], 'nproductcode', 'sproductname', 'ascending', 'nproductcode', false);\n      Section = constructOptionList(this.props.Login.masterData.Section || [], 'nsectioncode', 'ssectionname', 'ascending', 'nsectioncode', false);\n      MaterialCategory = constructOptionList(this.props.Login.masterData.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname', 'ascending', 'nmaterialcatcode', false);\n      Material = constructOptionList(this.props.Login.masterData.Material || [], 'nmaterialcode', 'smaterialname', 'ascending', 'nmaterialcode', false);\n      MaterialInventory = constructOptionList(this.props.Login.masterData.MaterialInventory || [], 'nmaterialinventtranscode', 'sinventoryid', 'ascending', 'nmaterialinventtranscode', false);\n      InstrumentID = constructOptionList(this.props.Login.masterData.instrumentID || [], 'ninstrumentcode', 'sinstrumentid', 'ascending', 'ninstrumentcode', false);\n      ProjectCode = constructOptionList(this.props.Login.masterData.ProjectCode || [], 'nprojectmastercode', 'sprojectcode', 'ascending', 'nprojectmastercode', false);\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      let selectFilterStatus = {\n        ntransactionstatus: transactionStatus.PARTIAL,\n        sfilterstatus: this.props.intl.formatMessage({\n          id: \"IDS_PARTIAL\"\n        }),\n        scolorhexcode: \"#800000\"\n      };\n      const selectedFilters = this.props.Login.masterData.BCFilterStatus || [];\n      const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\n      const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL);\n\n      if (selectedFiltersNew.length > 0 && index === -1) {\n        selectedFiltersNew.push(selectFilterStatus);\n      }\n\n      selectedFilter = selectedFiltersNew;\n      SampleType = SampleType.get(\"OptionList\");\n      RegistrationType = RegistrationType.get(\"OptionList\");\n      RegistrationSubType = RegistrationSubType.get(\"OptionList\");\n      BCFilterStatus = BCFilterStatus.get(\"OptionList\");\n      REJobStatus = REJobStatus.get(\"OptionList\");\n      Testvalues = Testvalues.get(\"OptionList\");\n      ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\");\n      InstrumentCategory = InstrumentCategory.get(\"OptionList\");\n      Instrument = Instrument.get(\"OptionList\");\n      ProductCategory = ProductCategory.get(\"OptionList\");\n      Product = Product.get(\"OptionList\");\n      Section = Section.get(\"OptionList\");\n      MaterialCategory = MaterialCategory.get(\"OptionList\");\n      Material = Material.get(\"OptionList\");\n      MaterialInventory = MaterialInventory.get(\"OptionList\");\n      InstrumentID = InstrumentID.get(\"OptionList\");\n      ProjectCode = ProjectCode.get(\"OptionList\"); //selectedInstCategory=this.props.Login.masterData.selectedInstrumentCategory || [];\n\n      samples = this.props.Login.masterData.samples;\n      addSelectAll = false;\n      deleteSelectAll = true;\n      nregsubtypecode = this.props.Login.masterData.defaultRegistrationSubType ? {\n        label: this.props.Login.masterData.defaultRegistrationSubType.sregsubtypename,\n        value: this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode,\n        item: this.props.Login.masterData.defaultRegistrationSubType\n      } : \"\";\n\n      if (this.props.Login.masterData.selectedTestSynonym !== previousProps.Login.masterData.selectedTestSynonym) {\n        selectedTestSynonym = this.props.Login.masterData.selectedTestSynonym ? {\n          label: this.props.Login.masterData.selectedTestSynonym.stestname,\n          value: this.props.Login.masterData.selectedTestSynonym.ntestcode,\n          item: this.props.Login.masterData.selectedTestSynonym\n        } : \"\";\n        let stestname = selectedTestSynonym.item; //selectedRecord = {...this.state.selectedRecord,stestname,...selectedRecord};\n\n        selectedRecord = { ...selectedRecord,\n          stestname\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedProductcategory !== previousProps.Login.masterData.selectedProductcategory) {\n        selectedProductCategory = this.props.Login.masterData.selectedProductcategory ? {\n          label: this.props.Login.masterData.selectedProductcategory.sproductcatname,\n          value: this.props.Login.masterData.selectedProductcategory.nproductcatcode,\n          item: this.props.Login.masterData.selectedProductcategory\n        } : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedProduct !== previousProps.Login.masterData.selectedProduct) {\n        selectedProduct = this.props.Login.masterData.selectedProduct ? {\n          label: this.props.Login.masterData.selectedProduct.sproductname,\n          value: this.props.Login.masterData.selectedProduct.nproductcode,\n          item: this.props.Login.masterData.selectedProduct\n        } : \"\";\n        let sproductname = selectedProduct.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          sproductname,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInstrumentCategory !== previousProps.Login.masterData.selectedInstrumentCategory) {\n        selectedInstCategory = this.props.Login.masterData.selectedInstrumentCategory ? {\n          label: this.props.Login.masterData.selectedInstrumentCategory.sinstrumentcatname,\n          value: this.props.Login.masterData.selectedInstrumentCategory.ninstrumentcatcode,\n          item: this.props.Login.masterData.selectedInstrumentCategory\n        } : \"\";\n        let sinstrumentcatname = selectedInstCategory.item;\n        selectedRecord = { ...selectedRecord,\n          sinstrumentcatname\n        }; // selectedRecord = {...this.state.selectedRecord,sinstrumentcatname,...selectedRecord};\n\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInstrument !== previousProps.Login.masterData.selectedInstrument) {\n        selectedInstrument = this.props.Login.masterData.selectedInstrument ? {\n          label: this.props.Login.masterData.selectedInstrument.sinstrumentname,\n          value: this.props.Login.masterData.selectedInstrument.ninstrumentcode,\n          item: this.props.Login.masterData.selectedInstrument\n        } : \"\";\n        let sinstrumentname = selectedInstrument.item; //selectedRecord = { ...this.state.selectedRecord, sinstrumentname, ...selectedRecord };\n\n        selectedRecord = { ...selectedRecord,\n          sinstrumentname\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInstrumentId !== previousProps.Login.masterData.selectedInstrumentId) {\n        selectedInstrumentId = this.props.Login.masterData.selectedInstrumentId ? {\n          label: this.props.Login.masterData.selectedInstrumentId.sinstrumentid,\n          value: this.props.Login.masterData.selectedInstrumentId.ninstrumentcode,\n          item: this.props.Login.masterData.selectedInstrumentId\n        } : undefined;\n        let sinstrumentid = selectedInstrumentId && selectedInstrumentId.item; //selectedRecord = { ...this.state.selectedRecord, sinstrumentid, ...selectedRecord };\n\n        selectedRecord = { ...selectedRecord,\n          sinstrumentid\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.ProjectCode !== previousProps.Login.masterData.ProjectCode) {\n        selectedProjectcode = this.props.Login.masterData.selectedProjectedCode ? {\n          label: this.props.Login.masterData.selectedProjectedCode.sprojectcode,\n          value: this.props.Login.masterData.selectedProjectedCode.nprojectmastercode,\n          item: this.props.Login.masterData.selectedProjectedCode\n        } : undefined;\n        let sprojectcode = selectedProjectcode && selectedProjectcode.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          sprojectcode,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap\n        });\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.selectedComponentList !== previousProps.Login.selectedComponentList) {\n        addedComponentList = this.props.Login.selectedComponentList;\n        isStateChanged = true; // this.setState({ addedComponentList });\n      }\n\n      if (this.props.Login.masterData.defaultApprovalConfigVersion !== previousProps.Login.masterData.defaultApprovalConfigVersion) {\n        ApprovalVersionValue = this.props.Login.masterData.defaultApprovalConfigVersion ? {\n          label: this.props.Login.masterData.defaultApprovalConfigVersion.sversionname,\n          value: this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode,\n          item: this.props.Login.masterData.defaultApprovalConfigVersion\n        } : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.defaultFilterStatus !== previousProps.Login.masterData.defaultFilterStatus) {\n        FilterStatusValue = this.props.Login.masterData.defaultFilterStatus ? {\n          label: this.props.Login.masterData.defaultFilterStatus.sfilterstatus,\n          value: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n          item: this.props.Login.masterData.defaultFilterStatus\n        } : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedSection !== previousProps.Login.masterData.selectedSection) {\n        selectedSection = this.props.Login.masterData.selectedSection ? {\n          label: this.props.Login.masterData.selectedSection.ssectionname,\n          value: this.props.Login.masterData.selectedSection.nsectioncode,\n          item: this.props.Login.masterData.selectedSection\n        } : \"\";\n        let ssectionname = selectedSection.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          ssectionname,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterialType !== previousProps.Login.masterData.selectedMaterialType) {\n        selectedMaterialType = this.props.Login.masterData.selectedMaterialType ? {\n          label: this.props.Login.masterData.selectedMaterialType.smaterialtypename,\n          value: this.props.Login.masterData.selectedMaterialType.nmaterialtypecode,\n          item: this.props.Login.masterData.selectedMaterialType\n        } : \"\";\n        selectedRecord[\"smaterialtypename\"] = this.props.Login.masterData.selectedMaterialType.smaterialtypename;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterialCategory !== previousProps.Login.masterData.selectedMaterialCategory) {\n        selectedMaterialCategory = this.props.Login.masterData.selectedMaterialCategory ? {\n          label: this.props.Login.masterData.selectedMaterialCategory.smaterialcatname,\n          value: this.props.Login.masterData.selectedMaterialCategory.nmaterialcatcode,\n          item: this.props.Login.masterData.selectedMaterialCategory\n        } : \"\";\n        selectedRecord[\"smaterialcatname\"] = this.props.Login.masterData.selectedMaterialCategory.smaterialcatname;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterial !== previousProps.Login.masterData.selectedMaterial) {\n        selectedMaterial = this.props.Login.masterData.selectedMaterial ? {\n          label: this.props.Login.masterData.selectedMaterial.smaterialname,\n          value: this.props.Login.masterData.selectedMaterial.nmaterialcode,\n          item: this.props.Login.masterData.selectedMaterial\n        } : \"\";\n        selectedRecord[\"smaterialname\"] = this.props.Login.masterData.selectedMaterial.smaterialname;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterialInventory !== previousProps.Login.masterData.selectedMaterialInventory) {\n        selectedMaterialInventory = this.props.Login.masterData.selectedMaterialInventory ? {\n          label: this.props.Login.masterData.selectedMaterialInventory.sinventoryid,\n          value: this.props.Login.masterData.selectedMaterialInventory.nmaterialinventtranscode,\n          item: this.props.Login.masterData.selectedMaterialInventory\n        } : \"\";\n        selectedRecord[\"sinventoryid\"] = this.props.Login.masterData.selectedMaterialInventory && this.props.Login.masterData.selectedMaterialInventory.sinventoryid != null ? this.props.Login.masterData.selectedMaterialInventory.sinventoryid : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInventoryUnit !== previousProps.Login.masterData.selectedInventoryUnit) {\n        //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\n        selectedRecord[\"savailablequatity\"] = this.props.Login.masterData.selectedInventoryUnit && this.props.Login.masterData.selectedInventoryUnit.savailablequatity != null ? this.props.Login.masterData.selectedInventoryUnit.savailablequatity : \"\";\n        selectedRecord[\"susedquantity\"] = \"\";\n        selectedRecord[\"sremarks\"] = \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.isselectedrecordempty) {\n        selectedRecord = {};\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.Specification !== previousProps.Login.masterData.Specification) {\n        //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\n        Specification = this.props.Login.masterData.Specification && this.props.Login.masterData.Specification != null ? this.props.Login.masterData.Specification : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.selectedSpec !== previousProps.Login.selectedSpec) {\n        selectedRecord[\"selectedSpec\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec != null ? this.props.Login.selectedSpec : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n        selectedRecord = this.props.Login.selectedRecord;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n        const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n        testGridArnoItems = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\n        testGridItem[0] = dynamicColumn.testListFields.releasetestfields[0] ? dynamicColumn.testListFields.releasetestfields[0] : [];\n        sampleGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n        subsampleGridItem = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n        samplegridmoreitem = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n        DynamicGridMoreItem = [...samplegridmoreitem];\n        DynamicGridItem = [...sampleGridItem, ...subsampleGridItem, ...testGridArnoItems.slice(1), ...testGridItem];\n        isStateChanged = true;\n      }\n    } //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\n\n\n    if (this.props.Login.dataState !== previousProps.Login.dataState) {\n      if (this.props.Login.dataState) {\n        delete this.props.Login.dataState.filter;\n        delete this.props.Login.dataState.sort;\n        this.setState({\n          dataState: this.props.Login.dataState\n        });\n      }\n    } //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\n\n\n    if (this.props.Login.addedSamplesListSortedList !== previousProps.Login.addedSamplesListSortedList) {\n      this.setState({\n        addedSamplesListSortedList: this.props.Login.addedSamplesListSortedList,\n        isInitialRender: true\n      });\n    } // if(this.props.Login.selectedRecord !== previousProps.Login.selectedRecord){\n    //     // let selectedRecord = {};\n    //     let MaterialCategory=constructOptionList(this.props.Login.selectedRecord.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname',\n    //     'ascending', 'nmaterialcatcode', false);\n    //     let Material =constructOptionList(this.props.Login.selectedRecord.Material || [], 'nmaterialcode', 'smaterialname',\n    //     'ascending', 'nmaterialcode', false);\n    //     let MaterialInventory=constructOptionList(this.props.Login.selectedRecord.MaterialInventory || [], 'nmaterialinventorycode', 'sinventoryid',\n    //     'ascending', 'nmaterialinventorycode', false);\n    //      MaterialCategory = MaterialCategory.get(\"OptionList\")\n    //      Material = Material.get(\"OptionList\")\n    //      MaterialInventory = MaterialInventory.get(\"OptionList\")\n    //      selectedRecord[\"MaterialCategory\"]=MaterialCategory\n    //      selectedRecord[\"Material\"]=Material\n    //      selectedRecord[\"MaterialInventory\"]=MaterialInventory\n    //  if(this.props.Login.selectedRecord.selectedMaterialType !== previousProps.Login.selectedRecord.selectedMaterialType) {\n    //         let selectedMaterialType = this.props.Login.selectedRecord.selectedMaterialType ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename,\n    //             value: this.props.Login.selectedRecord.selectedMaterialType.nmaterialtypecode || this.props.Login.selectedRecord.selectedMaterialType.item.value,\n    //             item:  this.props.Login.selectedRecord.selectedMaterialType.item ? this.props.Login.selectedRecord.selectedMaterialType.item : this.props.Login.selectedRecord.selectedMaterialType\n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterialType\"]=selectedMaterialType;\n    //         selectedRecord[\"smaterialtypename\"]=this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename;\n    //         isStateChanged = true;\n    //     }\n    //  if (this.props.Login.selectedRecord.selectedMaterialCategory !== previousProps.Login.selectedRecord.selectedMaterialCategory) {\n    //         let selectedMaterialCategory = this.props.Login.selectedRecord.selectedMaterialCategory ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname ,\n    //             value: this.props.Login.selectedRecord.selectedMaterialCategory.nmaterialcatcode || this.props.Login.selectedRecord.selectedMaterialCategory.item.value ,\n    //             item:  this.props.Login.selectedRecord.selectedMaterialCategory.item  ? this.props.Login.selectedRecord.selectedMaterialCategory.item  : this.props.Login.selectedRecord.selectedMaterialCategory \n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterialCategory\"]=selectedMaterialCategory;\n    //         selectedRecord[\"smaterialcatname\"]=this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname \n    //         isStateChanged = true;\n    //     }\n    //     if (this.props.Login.selectedRecord.selectedMaterial !== previousProps.Login.selectedRecord.selectedMaterial) {\n    //          let selectedMaterial = this.props.Login.selectedRecord.selectedMaterial ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterial.smaterialname,\n    //             value: this.props.Login.selectedRecord.selectedMaterial.nmaterialcode,\n    //             item: this.props.Login.selectedRecord.selectedMaterial\n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterial\"]= selectedMaterial;\n    //         selectedRecord[\"smaterialname\"]=this.props.Login.selectedRecord.selectedMaterial.smaterialname;\n    //         isStateChanged = true;\n    //     }\n    //     if (this.props.Login.selectedRecord.selectedMaterialInventory !== previousProps.Login.selectedRecord.selectedMaterialInventory) {\n    //         let selectedMaterialInventory = this.props.Login.selectedRecord.selectedMaterialInventory ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid,\n    //             value: this.props.Login.selectedRecord.selectedMaterialInventory.nmaterialinventorycode,\n    //             item: this.props.Login.selectedRecord.selectedMaterialInventory\n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterialInventory\"]= selectedMaterialInventory;\n    //         selectedRecord[\"sinventoryid\"]=this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid;\n    //         isStateChanged = true;\n    //     }\n    //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\n\n\n    let updateStateObject = {};\n\n    if (this.props.Login.addedSamplesList !== previousProps.Login.addedSamplesList) {\n      addSelectAll = false;\n      deleteSelectAll = true;\n      this.setState({\n        addedSamplesList: this.props.Login.addedSamplesList,\n        addSelectAll,\n        deleteSelectAll\n      });\n    } //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\n\n\n    if (this.props.Login.addedSamplesList !== previousProps.Login.addedSamplesList) {\n      addSelectAll = false;\n      deleteSelectAll = true;\n      this.setState({\n        addedSamplesList: this.props.Login.addedSamplesList,\n        addSelectAll,\n        deleteSelectAll\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      isStateChanged = true;\n      selectedRecord = this.props.Login.selectedRecord; //this.setState({ selectedRecord: this.props.Login.selectedRecord });\n    }\n\n    if (isStateChanged) {\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        selectedRecord,\n        filterData,\n        addedComponentList,\n        filterStatusList,\n        dataState,\n        sahDataState,\n        bahDataState,\n        chDataState,\n        testCommentDataState,\n        SampleType,\n        RegistrationType,\n        RegistrationSubType,\n        BCFilterStatus,\n        REJobStatus,\n        Testvalues,\n        ApprovalConfigVersion,\n        skip,\n        take,\n        testskip,\n        testtake,\n        selectedFilter,\n        selectedInstCategory,\n        InstrumentCategory,\n        Instrument,\n        selectedInstrument,\n        selectedTestSynonym,\n        nregsubtypecode,\n        ProductCategory,\n        selectedProductCategory,\n        Product,\n        selectedProduct,\n        samples,\n        addSelectAll,\n        deleteSelectAll,\n        ApprovalVersionValue,\n        FilterStatusValue,\n        Section,\n        selectedSection,\n        sampleGridItem,\n        subsampleGridItem,\n        testGridItem,\n        DynamicGridItem,\n        samplegridmoreitem,\n        DynamicGridMoreItem,\n        MaterialCategory,\n        selectedMaterialType,\n        Material,\n        selectedMaterial,\n        selectedMaterialCategory,\n        MaterialInventory,\n        selectedMaterialInventory,\n        Specification,\n        selectedSpec,\n        addedSamplesList,\n        testGridArnoItems,\n        InstrumentID,\n        selectedInstrumentId,\n        sinstrumentid,\n        selectedProjectcode,\n        ProjectCode\n      });\n    }\n  }\n\n  valiateCopy(sortedList, addComponentDataList, addedSamplesList) {\n    let addedSamplesLists = addedSamplesList || this.state.addedSamplesList || [];\n    let listData = this.props.Login.masterData.samples || [];\n    let copyingList = listData.filter(item1 => !sortedList.some(item2 => item1.ntransactiontestcode === item2.ntransactiontestcode)) || [];\n    let copyingListData = copyingList.map(item => {\n      const existsInAddComponentDataList = addedSamplesLists.some(item1 => item1.ntransactiontestcode === item.ntransactiontestcode);\n\n      if (existsInAddComponentDataList) {\n        return { ...item,\n          selected: true\n        };\n      } else {\n        return { ...item,\n          selected: false\n        };\n      }\n    });\n    return copyingListData;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getTestInstrumentComboService,\n  getTestInstrumentCategory,\n  getInstrumentForInstCategory,\n  getProductBasedInstrument,\n  getBatchCreationDetails,\n  onActionFilterSubmit,\n  getProductcategoryAction,\n  createBatchmasterAction,\n  getSamplesForGrid,\n  getSelectedBatchCreationDetail,\n  createSampleAction,\n  deleteSampleAction,\n  getActiveBatchCreationService,\n  updateBatchcreationAction,\n  deleteBatchCreation,\n  batchInitiateAction,\n  getBCRegistrationSubType,\n  batchCompleteAction,\n  validateEsignCredential,\n  filterColumnData,\n  getBatchhistoryAction,\n  getBatchSection,\n  viewInfo,\n  getIqcSamples,\n  getMaterialBasedOnMaterialCategory,\n  getMaterialInventoryBasedOnMaterial,\n  batchSaveIQCActions,\n  getMaterialAvailQtyBasedOnInv,\n  getBatchIqcSampleAction,\n  getBCApprovalConfigVersion,\n  getBCRegistrationType,\n  getTreeByMaterial,\n  getNewRegSpecification,\n  cancelIQCSampleAction,\n  batchCancelAction,\n  batchInitiateDatePopup,\n  batchCompleteDatePopup,\n  getInstrumentID,\n  getBatchViewResultAction,\n  validateEsignforBatch //,batchTAT\n\n})(injectIntl(BatchCreation));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/batchruncreation/BatchCreation.jsx"],"names":["React","connect","toast","injectIntl","FormattedMessage","Row","Col","Nav","FormGroup","FormLabel","Card","Modal","Image","Button","FontAwesomeIcon","faPencilAlt","faTrashAlt","faCheckCircle","faCopy","faEye","faPlay","faPlus","faSync","callService","crudMaster","updateStore","getTestInstrumentComboService","getTestInstrumentCategory","getProductBasedInstrument","getInstrumentForInstCategory","getBatchCreationDetails","onActionFilterSubmit","getProductcategoryAction","createBatchmasterAction","getSamplesForGrid","getSelectedBatchCreationDetail","createSampleAction","deleteSampleAction","getActiveBatchCreationService","updateBatchcreationAction","deleteBatchCreation","batchInitiateAction","getBCRegistrationSubType","batchCompleteAction","validateEsignCredential","filterColumnData","getBatchhistoryAction","getBatchSection","viewInfo","getIqcSamples","getMaterialBasedOnMaterialCategory","getMaterialInventoryBasedOnMaterial","batchSaveIQCActions","getMaterialAvailQtyBasedOnInv","getBatchIqcSampleAction","getBCApprovalConfigVersion","getBCRegistrationType","getTreeByMaterial","getNewRegSpecification","cancelIQCSampleAction","batchCancelAction","batchInitiateDatePopup","batchCompleteDatePopup","getInstrumentID","getBatchViewResultAction","validateEsignforBatch","transactionStatus","designProperties","reportTypeEnum","reportCOAType","RegistrationSubType","SampleType","DEFAULT_RETURN","showEsign","getControlMap","getStartOfDay","getEndOfDay","formatInputDate","constructOptionList","rearrangeDateFormat","convertDateValuetoString","CF_encryptionData","ConfirmMessage","SlideOutModal","ReadOnlyText","ContentPanel","MediaLabel","ListWrapper","BreadcrumbComponent","Esign","ProductList","CustomPopover","BatchCreationFilter","AddBatchCreation","AddBatchinitiate","CustomTab","SampleTab","BatchhistoryTab","process","AddSample","ListMaster","ViewInfo","Affix","AddMaterialIqc","BatchIqcSampleTab","BatchResultTab","PortalModal","Iframe","ReactTooltip","mapStateToProps","state","Login","BatchCreation","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","completeMandatoryFields","initiateMandatoryFields","materialIqcMandatory","getSamples","selectedbatchmaster","addSampleID","controlMap","has","get","ncontrolcode","ntransactionstatus","INITIATED","COMPLETED","CANCELLED","warn","intl","formatMessage","id","masterData","SelectedBatchmaster","ntestcode","nbatchmastercode","userInfo","realRegTypeValue","nregtypecode","NA","realRegSubTypeValue","nregsubtypecode","dataState","addedSamplesListSortedList","createBatchValidation","addParam","defaultRegistrationType","undefined","FilterStatusValue","item","ApprovalVersionValue","Samples","length","addcontrolcode","inputData","realSampleTypeValue","nsampletypecode","nsectioncode","deleteRecord","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","selectedRecord","nbatchsampleCode","fetchUrl","isSingleGet","fecthInputObject","userinfo","jsondata","inputParam","classUrl","methodUrl","Sample","sarno","ssamplearno","stestname","nbatchsamplecode","ndesigntemplatemappingcode","operation","displayName","userRoleControlRights","nformcode","ncontrolCode","updateInfo","typeName","data","loadEsign","screenData","openModal","screenName","cancelRecord","nbatchsampleiqccode","iqcSample","nmaterialinventtranscode","onTabChange","tabProps","nneedsubsample","batchactiveKey","dataStateChangeBatchSample","event","updatedList","filter","addComponentDataListCopy","samples","forEach","x","exists","some","ntransactiontestcode","push","dataResult","addSelectAll","valiateCheckAll","dataStateChange","sampleState","dataStateBatchHistoryChange","Batchhistory","histortState","dataStateBatchIqcChangeChange","iqcsample","iqcsampleState","dataStateViewChange","Resultview","viewstate","getApprovalVersion","obj","fromDate","realFromDate","toDate","realToDate","needFilterSubmit","parseInt","defaultSampleType","isneedapprovalfilter","defaultRegistrationSubType","isneedrealFilterStatus","realRegistrationTypeList","realRegistrationSubTypeList","realApprovalConfigVersionList","realBCFilterStatusList","realdefaultFilterStatus","realApproveConfigVersion","tabDetail","tabMap","Map","set","gridfillingColumn","DynamicGridItem","gridfillingColumnMoreItems","DynamicGridMoreItem","ELNTest","sbatcharno","onFilterComboChange","fieldname","dateObj","nflag","ntranscode","value","realndesigntemplatemappingcode","napprovalversioncode","napprovalconfigversioncode","napprovalconfigcode","selectedFilter","inputParamData","fromdate","todate","ApprovalConfigVersion","String","defaultFilterStatus","DesignTemplateMappingValue","getBCFilterTemplate","defaultApprovalConfigVersion","njobstatuscode","defaultjobstatus","getBCFilterStatus","handleFilterDateChange","dateValue","dateName","Date","headerSelectionChange","checked","syntheticEvent","target","addedSamplesList","map","findIndex","selected","newItem","JSON","parse","stringify","olditem","valiateCopy","deleteSelectAll","deletedListdData","deletedList","item1","npreregno","onTreeClick","activeKey","key","focusKey","keyName","selectedNode","primaryKey","selectionChange","samplesList","dataItem","childDataChange","isInitialRender","handleSaveClick","saveType","failedControls","startLabel","label","mandatoryFields","console","log","selectedSpec","nallottedspeccode","loadSpec","openSpecModal","info","handlePageChange","e","skip","take","ConfirmDelete","selectedBatch","deleteId","confirmMessage","confirm","completePopUpStartActions","completeId","DRAFT","AddSpec","selectedMaterial","selectedMaterialCategory","ncategorybasedflow","testPopUpStartActions","testStartId","testStartActions","selectedmaster","jsonuidata","totalSample","concat","join","sample","ntransactionsamplecode","nneedmyjob","nneedjoballocation","nneedtestinitiate","dtransactiondate","currentTime","scomments","BCFilterStatus","savailablequatity","parseFloat","susedquantity","inventoryTransaction","inputRegistrationData","inputMaterialInventoryData","inputBatchData","batchCreationSampleData","batchCreationTestData","batchCreationSampleArray","batchCreationTestArray","samplecombinationuniqueArray","inputMaterialInventoryArrData","nspecsampletypecode","ntemplatemanipulationcode","nregsubtypeversioncode","nmaterialcode","nmaterialcatcode","smaterialcatname","sinventoryid","selectedMaterialInventory","nmaterialinventorycode","smaterial","smaterialname","smaterialtype","selectedMaterialType","smaterialtypename","nmaterialtypecode","sunitname","sremarks","selectedInventoryUnit","nqtyused","selectedTestDetails","ntestgrouptestcode","nmethodcode","PREREGISTER","cancelBatch","cancelId","batchCompleteActions","closeAlert","showConfirmAlert","loading","closeModal","selectedId","onComboChange","comboData","fieldName","selectedInstCategory","selectedInstrumentId","InstrumentCategory","selectedInstrument","Instrument","InstrumentID","naddcontrolCode","sregsubtypename","ssectionname","selectedTestSynonym","nprojectmastercode","ncalibrationreq","needSectionwise","needsection","ninstrumentcatcode","ninstrumentcode","selectedProjectcode","onNumericInputOnChange","name","onInputOnChange","type","ACTIVE","DEACTIVE","YES","NO","onMultiColumnValue","flag","keys","objarray","objkey","index","getBatchManufacturerComboChange","onMultiColumnMAHChange","clearComponentInput","componentDefaultSearchDate","openClosePortal","openELNSheet","elnUserInfo","enlLink","integrationSettings","elnSite","link","detail","EncryptData","settedId","encryptedbatchid","userObject","usercode","nelncode","username","selnuserid","userfullname","selnusername","lsusergroup","usergroupcode","nelnusergroupcode","usergroupname","lssitemaster","sitecode","nelnsitecode","encrypteduser","baseURL","slinkname","handleDateChange","onDropImage","attachedFiles","actionType","saveSample","compList","sampleArray","samplelist","batchSample","onSaveClick","formRef","nprevioustestcode","selectedSection","selectedProduct","unchangeList","searchRef","current","editId","addSaveDataGrid","filterdata1","sortListedData1","ListedData","sortListedData","filterdata","addedItem","handleClickDelete","row","updatedAddList","ALL","fetchEditData","editParam","validateEsign","sreason","password","closeFilter","inputValues","realSampleTypeList","SampleTypeValue","RegistrationType","RegTypeValue","RegSubTypeValue","showFilter","onFilterSubmit","reloadData","isFilterSubmit","onClickReport","reportParam","sprimarykeyname","nprimarykey","nreleasebatchcode","ncertificatetypecode","ndecision","PASS","ndecisionstatus","nreporttypecode","SCREENWISE","BATCH","ncoareporttypecode","BATCHPREVIEW","skipbatchvalidation","reportMethod","method","SelectedBatchCreation","controlId","settings","createRef","searchFieldList","sampleMandatoryFields","copyMandatoryFields","getDerivedStateFromProps","masterStatus","error","temparray","option","VALUE","LABEL","slanguagetypecode","selectAll","shouldComponentUpdate","nextProps","nextState","openChildModal","render","reportActionList","batchMandatoryFields","sinstrumentcatname","getBatch","addId","elnSheetId","primaryeyField","viewInfoFields","PROJECTSAMPLETYPE","stransactionstatuscode","SelectedFilterStatus","filterParam","breadCrumbData","breadCrumbFrom","breadCrumbto","sregtypename","sfilterstatus","searchedData","Batchmaster","batch","openFilter","isClearSearch","indexOf","REJobStatus","Testvalues","onDesignTemplateChange","stateDynamicDesign","parentFunction","SelectedBatchTestTAT","Deviation","stransdisplaystatus","elnimage","reject","showSaveContinue","ProductCategory","selectedProductCategory","Product","studyPlanList","productManufacturerList","maHolderList","timeZoneList","batchCreationEditStatusList","Section","ProjectCode","getProductByCategory","productCategoryList","productList","componentList","getDataForAddComponent","addedComponentList","addedHeaderSelectionChange","addedSelectionChange","onDeleteSelectedComponent","componentPopupSkip","componentPopupTake","componentPageSizes","selectedRecordView","MaterialCategory","Material","MaterialInventory","AgaramTree","OpenNodes","FocusKey","Specification","onspecChange","confirmAlert","componentDidUpdate","previousProps","filterData","filterStatusList","sahDataState","bahDataState","chDataState","testCommentDataState","testskip","testtake","sampleGridItem","subsampleGridItem","testGridItem","samplegridmoreitem","testGridArnoItems","sinstrumentid","isStateChanged","bool","instrumentCategory","instrument","productcategory","product","instrumentID","selectFilterStatus","PARTIAL","scolorhexcode","selectedFilters","selectedFiltersNew","selectedProductcategory","sproductcatname","nproductcatcode","sproductname","nproductcode","selectedInstrumentCategory","sinstrumentname","selectedProjectedCode","sprojectcode","Object","values","selectedComponentList","sversionname","isselectedrecordempty","DynamicDesign","dynamicColumn","testListFields","testlistitem","releasetestfields","samplegriditem","subsamplelistitem","slice","sort","updateStateObject","sortedList","addComponentDataList","addedSamplesLists","listData","copyingList","item2","copyingListData","existsInAddComponentDataList"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Nav, FormGroup, FormLabel, Card, Modal, Image, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faPencilAlt, faTrashAlt, faCheckCircle, faCopy, faEye, faPlay, faPlus, faSync\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport reject from '../../assets/image/reject.svg'\r\nimport elnimage from '../../assets/image/sheet-view.svg'\r\nimport {\r\n    callService, crudMaster, updateStore,\r\n    getTestInstrumentComboService, getTestInstrumentCategory, getProductBasedInstrument,\r\n    getInstrumentForInstCategory, getBatchCreationDetails, onActionFilterSubmit,\r\n    getProductcategoryAction, createBatchmasterAction, getSamplesForGrid,\r\n    getSelectedBatchCreationDetail, createSampleAction, deleteSampleAction,\r\n    getActiveBatchCreationService, updateBatchcreationAction, deleteBatchCreation,\r\n    batchInitiateAction, getBCRegistrationSubType, batchCompleteAction,\r\n    validateEsignCredential, filterColumnData, getBatchhistoryAction, getBatchSection,\r\n    viewInfo, getIqcSamples, getMaterialBasedOnMaterialCategory,\r\n    getMaterialInventoryBasedOnMaterial, batchSaveIQCActions, getMaterialAvailQtyBasedOnInv,\r\n    getBatchIqcSampleAction, getBCApprovalConfigVersion, getBCRegistrationType, getTreeByMaterial,\r\n    getNewRegSpecification, cancelIQCSampleAction, batchCancelAction, batchInitiateDatePopup,\r\n    batchCompleteDatePopup, getInstrumentID, getBatchViewResultAction,validateEsignforBatch\r\n    //,batchTAT\r\n} from '../../actions';\r\nimport {\r\n    transactionStatus, designProperties, reportTypeEnum, reportCOAType,\r\n    RegistrationSubType, SampleType\r\n} from '../../components/Enumeration';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {\r\n    showEsign, getControlMap, getStartOfDay, getEndOfDay,\r\n    formatInputDate, constructOptionList, rearrangeDateFormat, convertDateValuetoString, CF_encryptionData\r\n} from '../../components/CommonScript';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport Esign from '../audittrail/Esign';\r\nimport { ProductList } from '../product/product.styled';\r\nimport CustomPopover from '../../components/customPopover';\r\nimport BatchCreationFilter from './BatchCreationFilter';\r\nimport AddBatchCreation from './AddBatchCreation';\r\nimport AddBatchinitiate from './AddBatchinitiate';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\r\nimport SampleTab from './SampleTab';\r\nimport BatchhistoryTab from './BatchhistoryTab';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport AddSample from '../batchruncreation/AddSample';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport ViewInfo from './ViewInfo';\r\nimport { Affix } from 'rsuite';\r\nimport AddMaterialIqc from './AddMaterialIqc';\r\nimport BatchIqcSampleTab from './BatchIqcSampleTab';\r\nimport BatchResultTab from './BatchResultTab';\r\nimport PortalModal from '../../PortalModal';\r\nimport Iframe from 'react-iframe';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { ReactComponent as RefreshIcon } from '../../assets/image/refresh.svg';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass BatchCreation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const sampleState = {\r\n            skip: 0, take: this.props.Login.settings ?\r\n                parseInt(this.props.Login.settings[14]) : 5\r\n        };\r\n\r\n        const histortState = {\r\n            skip: 0, take: this.props.Login.settings ?\r\n                parseInt(this.props.Login.settings[14]) : 5\r\n        };\r\n\r\n        const iqcsampleState = {\r\n            skip: 0, take: this.props.Login.settings ?\r\n                parseInt(this.props.Login.settings[14]) : 5\r\n        };\r\n\r\n        const viewstate = {\r\n            skip: 0, take: this.props.Login.settings ?\r\n                parseInt(this.props.Login.settings[14]) : 5\r\n        };\r\n\r\n        this.state = {\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            selectedFilter: {},\r\n            sampleState,\r\n            histortState,\r\n            iqcsampleState,\r\n            viewstate,\r\n            selectedRecord: {},\r\n            addedSamplesListSortedList:[],\r\n            //confirmmsg:this.ConfirmMessage.bind(this),\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            sidebarview: false\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        this.searchFieldList = [\"stestname\", \"sinstrumentcatname\", \"sinstrumentname\", \"sproductname\", \"smanufname\", \"stransactiondate\", \"username\",\r\n            \"stransactionstatus\", \"sdecision\", \"sbatcharno\", \"stransdisplaystatus\"];\r\n\r\n        this.sampleMandatoryFields = [];\r\n        this.copyMandatoryFields = [];\r\n    }\r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        // if (props.Login.masterStatus !== \"\") {\r\n        //     if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n        //        if(props.Login.operation == \"initiate\"){\r\n        //         toast.warn(props.Login.masterStatus);\r\n        //         //this.state.confirmmsg.confirm(\"warning\", \"Warning!\",  props.Login.masterStatus, undefined, \"ok\", undefined, true, undefined);\r\n        //        }\r\n        //     }\r\n        // }\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n        // if (props.Login.selectedRecord !== state.selectedRecord) {\r\n        //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\r\n        // }\r\n    }\r\n\r\n\r\n    // const sampleColumnList = [];\r\n\r\n    // if (props.nneedsubsample){\r\n    //     sampleColumnList.push({\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\", \"width\": \"155px\"} );\r\n    // }\r\n    // else{\r\n    //     sampleColumnList.push({\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\", \"width\": \"155px\"});\r\n    // }\r\n\r\n    completeMandatoryFields = [\r\n        {\r\n            \"idsName\": \"IDS_BATCHCOMPLETEDATE\",\r\n            //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \r\n            \"dataField\": \"dtransactiondate\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\"\r\n        },\r\n    ];\r\n\r\n    initiateMandatoryFields = [\r\n        {\r\n            \"idsName\": \"IDS_BATCHINITIATEDATE\",\r\n            //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \r\n            \"dataField\": \"dtransactiondate\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\"\r\n        },\r\n    ];\r\n\r\n\r\n\r\n    materialIqcMandatory = [\r\n\r\n        { \"idsName\": \"IDS_MATERIALTYPE\", \"dataField\": \"smaterialtypename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_MATERIALCATEGORY\", \"dataField\": \"smaterialcatname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_MATERIAL\", \"dataField\": \"smaterialname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_MATERIALINVENTORY\", \"dataField\": \"sinventoryid\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        //{ \"idsName\": \"IDS_AVAILABLEQUANTITY\", \"dataField\": \"savailablequatity\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"idsName\": \"IDS_USEDQTY\", \"dataField\": \"susedquantity\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n    ]\r\n\r\n    getSamples = (selectedbatchmaster) => {\r\n        const addSampleID = this.state.controlMap.has(\"AddSamples\") && this.state.controlMap.get(\"AddSamples\").ncontrolcode\r\n        if (selectedbatchmaster.ntransactionstatus == transactionStatus.INITIATED ||\r\n            selectedbatchmaster.ntransactionstatus == transactionStatus.COMPLETED ||\r\n            selectedbatchmaster.ntransactionstatus == transactionStatus.CANCELLED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n        } else {\r\n            this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode, this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\r\n                this.props.Login.userInfo, this.props.Login.masterData,\r\n                this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ?\r\n                    this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n                this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                    this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA, addSampleID,this.state.dataState,this.state.addedSamplesListSortedList)\r\n        }\r\n    }\r\n\r\n    createBatchValidation = (addParam) => {\r\n        if (this.props.Login.masterData.defaultRegistrationType != undefined && this.state.FilterStatusValue.item != undefined && this.state.nregsubtypecode.item != undefined &&\r\n            this.state.ApprovalVersionValue.item != undefined\r\n        ) {\r\n            this.props.getBatchSection(addParam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    getIqcSamples = (SelectedBatchmaster) => {\r\n        if (SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED ||\r\n            SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED ||\r\n            SelectedBatchmaster.ntransactionstatus === transactionStatus.CANCELLED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n        } else if (this.props.Login.masterData.Samples.length == 0) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOADDIQC\" }));\r\n        } else {\r\n            let addcontrolcode = this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\r\n            let inputData = {};\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ?\r\n                this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            // inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n            // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n            inputData['naddcontrolCode'] = addcontrolcode;\r\n            // inputData['section']={\r\n            //         nsectioncode: SelectedBatchmaster.nsectioncode\r\n            // };\r\n            inputData['nsectioncode'] = SelectedBatchmaster.nsectioncode;\r\n            inputData['userInfo'] = this.props.Login.userInfo;\r\n            inputData['nbatchmastercode'] = SelectedBatchmaster.nbatchmastercode;\r\n            inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n            this.props.getIqcSamples(inputData, this.props.Login.masterData);\r\n        }\r\n    }\r\n\r\n    deleteRecord = (inputData) => {\r\n\r\n        if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED ||\r\n            this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n        } else {\r\n            const postParam = {\r\n                inputListName: \"Batchmaster\",\r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                primaryKeyValue: inputData.selectedRecord.nbatchsampleCode,\r\n                fetchUrl: \"batchcreation/getSampleTabDetails\",\r\n                isSingleGet: true,\r\n                //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n            let jsondata = inputData.selectedRecord;\r\n            const inputParam = {\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Sample\",\r\n                postParam,\r\n                inputData: {\r\n                    Sample: {\r\n                        \"sarno\": inputData.selectedRecord.sarno,\r\n                        \"ssamplearno\": inputData.selectedRecord.ssamplearno,\r\n                        \"stestname\": inputData.selectedRecord.stestname,\r\n                        \"nbatchsamplecode\": inputData.selectedRecord.nbatchsamplecode,\r\n\r\n                    },\r\n                    \"userInfo\": this.props.Login.userInfo,\r\n                    nbatchsamplecode: inputData.selectedRecord.nbatchsamplecode,\r\n                    masterData: {\r\n                        ...this.props.Login.masterData,\r\n                        \"samples\": []\r\n                    },\r\n                    nbatchmastercode: inputData.selectedRecord.nbatchmastercode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                    //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\r\n                    //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                        this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\r\n                },\r\n                operation: inputData.operation,\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                dataState: this.state.dataState\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: inputData.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.deleteSampleAction(inputParam.inputData);\r\n            }\r\n        }\r\n    }\r\n\r\n    cancelRecord = (inputData) => {\r\n\r\n        if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED ||\r\n            this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n        } else {\r\n            const postParam = {\r\n                inputListName: \"Batchmaster\",\r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                primaryKeyValue: inputData.nbatchsampleiqccode,\r\n                fetchUrl: \"batchcreation/getBatchIqcSampleAction\",\r\n                isSingleGet: true,\r\n                //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n            const inputParam = {\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"IQCSample\",\r\n                postParam,\r\n                inputData: {\r\n                    iqcSample: inputData.selectedRecord,\r\n                    nbatchsampleiqccode: inputData.selectedRecord.nbatchsampleiqccode,\r\n                    masterData: this.props.Login.masterData,\r\n                    nbatchmastercode: inputData.selectedRecord.nbatchmastercode,\r\n                    nmaterialinventtranscode: inputData.selectedRecord.nmaterialinventtranscode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                    //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\r\n                    //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                        this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\r\n                    nsampletypecode: this.props.Login.masterData.realSampleTypeValue ?\r\n                        this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA\r\n                },\r\n                operation: inputData.operation,\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                dataState: this.state.dataState\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: {\r\n                            inputParam,\r\n                            masterData: this.props.Login.masterData\r\n                        },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: inputData.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.cancelIQCSampleAction(inputParam.inputData);\r\n            }\r\n        }\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n\r\n        if (screenName == \"IDS_BATCHHISTORY\") {\r\n\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                userInfo: this.props.Login.userInfo,\r\n                nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\r\n            }\r\n            this.props.getBatchhistoryAction(inputData, true);\r\n        } else if (screenName == \"IDS_BATCHIQCSAMPLE\") {\r\n\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                userInfo: this.props.Login.userInfo,\r\n                nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\r\n            }\r\n            this.props.getBatchIqcSampleAction(inputData, true);\r\n        } else if (screenName == \"IDS_RESULTS\") {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                userInfo: this.props.Login.userInfo,\r\n                nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\r\n                nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\r\n            }\r\n            this.props.getBatchViewResultAction(inputData, true);\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { screenName, batchactiveKey: screenName }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\r\n    dataStateChangeBatchSample= (event) => {\r\n\r\n        let updatedList = [];\r\n        if (event.dataState && event.dataState.filter === null) {\r\n          let addComponentDataListCopy = this.state.addComponentDataListCopy ||this.state.samples|| [];\r\n          addComponentDataListCopy.forEach(x => {\r\n            // Check if x's ntransactiontestcode exists in addedSamplesListSortedList\r\n            const exists = this.state.addedSamplesListSortedList.some(\r\n              item => item.ntransactiontestcode === x.ntransactiontestcode\r\n            );\r\n            // If it doesn't exist, add it to updatedList\r\n            if (!exists) {\r\n              updatedList.push(x);\r\n            }\r\n          });\r\n        }else{\r\n          updatedList=this.state.samples||[]\r\n        }    \r\n\r\n        this.setState({\r\n        dataResult: process(this.state.samples || [], event.dataState),\r\n        dataState: event.dataState,\r\n        samples:updatedList,addSelectAll:event.dataState && event.dataState.filter === null?\r\n        this.valiateCheckAll(updatedList):\r\n        this.valiateCheckAll(process(updatedList || [], event.dataState).data)\r\n        \r\n        });\r\n      }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n              dataResult: process(this.props.Login.masterData.Samples, event.dataState),\r\n            sampleState: event.dataState\r\n        });\r\n    }\r\n   /* dataStateChange1 = (event) => {\r\n       \r\n       \r\n            let samples=[];\r\n            let addedSamplesList=[];\r\n            let clearsearch=false;\r\n\r\n            //samples=[...this.props.Login.masterData.samples]\r\n\r\n            //let addsampleList=this.state.samples || [];\r\n            if(event.dataState.filter&& event.dataState.filter!==null){\r\n                let selectedList=this.state.samples||[]\r\n                let filterList= process(this.state.samples||[], event.dataState).data;\r\n               // let samples=[];\r\n               selectedList.map((x,index)=>{\r\n                filterList.map((item)=>{\r\n                    if(item.ntransactiontestcode==x.ntransactiontestcode && x.selected){\r\n                     // delete(x.selected);\r\n\r\n                     if (!addedSamplesList.some(component => component.ntransactiontestcode === x.ntransactiontestcode)) {\r\n                     \r\n                      addedSamplesList.push(addedSamplesList.push({...x,'jsondata':{\r\n                        'samplelist':x\r\n                      },'jsonuidata':{\r\n                        'samplelist':x\r\n                      }}));\r\n                    }\r\n                    if (!samples.some(component => component.ntransactiontestcode === x.ntransactiontestcode)) {\r\n\r\n                      samples.push({...x,'jsondata':{\r\n                        'samplelist':{...x,'selected':x.selected? true:false}\r\n                      },'jsonuidata':{\r\n                        'samplelist':{...x,'selected':x.selected? true:false}\r\n                      },  'selected':x.selected? true:false});\r\n                    }\r\n                      }\r\n                      else{\r\n\r\n                        if (!samples.some(component => component.ntransactiontestcode === x.ntransactiontestcode)) {\r\n\r\n                        samples.push({...x,'jsondata':{\r\n                        'samplelist':{...x,'selected':x.selected?true:false}\r\n                      },'jsonuidata':{\r\n                        'samplelist':{...x,'selected':x.selected?true:false}\r\n                      },'selected':x.selected?true:false});\r\n                    }\r\n                      }\r\n                  })\r\n                 \r\n                })\r\n              }else{\r\n                if(event.dataState.sort&& event.dataState.sort!==null && event.dataState.filter!==null){\r\n                    addedSamplesList=this.state.addedSamplesList || [];\r\n                    samples=this.state.samples ||[];\r\n                }\r\n\r\n\r\n               else{\r\n                addedSamplesList=[];\r\n                samples=this.props.Login.masterData.samples.map(x=>\r\n                {\r\n                  return {...x,'jsondata':{\r\n                        'samplelist':{...x,'selected':false}\r\n                      },'jsonuidata':{\r\n                        'samplelist':{...x,'selected':false}\r\n                      },'selected':false}\r\n                }\r\n                );\r\n                delete(event.dataState.filter);\r\n            }\r\n              }\r\n\r\n\r\n          /*  if(event.dataState.filter&& event.dataState.filter!==null){\r\n                let filterList= process(this.props.Login.masterData.samples, event.dataState);//2,3\r\n                let selectedList=this.state.addedSamplesList||[]//2,4\r\n\r\n              addedSamplesList   = selectedList.filter(\r\n                item1 => filterList.data.some(x => x.ntransactiontestcode === item1.ntransactiontestcode)\r\n              );\r\n            }else{\r\n                clearsearch=true;\r\n\r\n                samples=samples.map(item => ({ ...item, selected: false }));\r\n               \r\n               /* if(addedSamplesList.length>0){\r\n                    addsampleList = addsampleList.filter(\r\n                    item1 => !addedSamplesList.some(\r\n                      x => x.ntransactiontestcode === item1.ntransactiontestcode\r\n                    )\r\n                  ).map(item => ({\r\n                    ...item, \r\n                    selected: false \r\n                  }));\r\n                  \r\n                }else{\r\n                    addsampleList=addsampleList.map(item => ({ ...item, selected: false }));\r\n\r\n                }\r\n                \r\n\r\n            \r\n                \r\n\r\n        this.setState({\r\n            dataResult: process(samples, event.dataState),\r\n            clearsearch:clearsearch,\r\n            samples:samples,\r\n            dataState: event.dataState,\r\n            addedSamplesList:addedSamplesList,\r\n            //addsampleList:addsampleList,\r\n            addSelectAll: this.valiateCheckAll(event.dataState.filter&& event.dataState.filter!==null ?process(samples||[], event.dataState).data:samples),\r\n             deleteSelectAll: this.valiateCheckAll(addedSamplesList)\r\n        });\r\n    }*/\r\n\r\n    dataStateBatchHistoryChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.Batchhistory, event.dataState),\r\n            histortState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateBatchIqcChangeChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.iqcsample, event.dataState),\r\n            iqcsampleState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateViewChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.Resultview, event.dataState),\r\n            viewstate: event.dataState\r\n        });\r\n    }\r\n\r\n    gridfillingColumn(data) {\r\n        const temparray = [];\r\n            data && data.map((option) => {\r\n              if (option[designProperties.VALUE] !== \"dregdate\") {\r\n                temparray.push({\r\n                  \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\r\n                  \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\"\r\n                })\r\n              }\r\n            });\r\n            if (temparray) {\r\n              temparray.push({ \"idsName\": \"IDS_REGISTRATIONDATE\", \"dataField\": \"dregdate\", \"width\": \"250px\", \"columnSize\": \"3\" })\r\n            }\r\n            return temparray;\r\n\r\n    }\r\n    //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\r\n\r\n    gridfillingColumnMoreItems(data) {\r\n        \r\nconst temparray = [];\r\n    data && data.map((option) => {\r\n      if (option[designProperties.VALUE] !== \"dregdate\") {\r\n        temparray.push({\r\n          \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\r\n          \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\"\r\n        })\r\n      }\r\n    });\r\n   \r\n    return temparray;\r\n\r\n    }\r\n\r\n    getApprovalVersion = (data) => {\r\n        let inputData = [];\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate || this.props.Login.masterData.realFromDate,\r\n            this.props.Login.masterData.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n        inputData = {\r\n            needFilterSubmit: \"false\",\r\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n            fromDate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n            toDate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n            nregtypecode: data.item.nregtypecode,\r\n            userInfo: this.props.Login.userInfo,\r\n            nregsubtypecode: data.item.nregsubtypecode,\r\n            masterData: this.props.Login.masterData,\r\n            isneedapprovalfilter: true,\r\n            defaultRegistrationSubType: data.item,\r\n            isneedrealFilterStatus: \"false\",\r\n            // realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n            // realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n            // realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n            // realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\",\r\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n            realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\r\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\r\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\r\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\r\n            realFromDate:this.props.Login.masterData.realFromDate,\r\n            realToDate:this.props.Login.masterData.realToDate\r\n           \r\n        }\r\n        this.props.getBCApprovalConfigVersion(inputData)\r\n\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_SAMPLE\",\r\n            <SampleTab\r\n                sample={this.props.Login.masterData.Samples || []}\r\n                dataResult={process(this.props.Login.masterData.Samples || [], this.state.sampleState)}\r\n                dataState={this.state.sampleState}\r\n                controlMap={this.state.controlMap}\r\n                dataStateChange={this.dataStateChange}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteRecord={this.deleteRecord}\r\n                extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                detailedFieldList={this.gridfillingColumnMoreItems(this.state.DynamicGridMoreItem) || []}\r\n                methodUrl={\"Samples\"}\r\n                getSamples={() => this.getSamples(this.props.Login.masterData.SelectedBatchmaster)}\r\n                // getSamples={() => this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode,this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\r\n                //     this.props.Login.userInfo,this.props.Login.masterData,this.props.Login.masterData.defaultRegistrationType.nregtypecode,this.state.nregsubtypecode.value)}\r\n                //inputParam={this.props.Login.inputParam}\r\n                screenName=\"IDS_SAMPLE\"\r\n                nneedsubsample={this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n            />\r\n        )\r\n        tabMap.set(\"IDS_BATCHIQCSAMPLE\",\r\n            <BatchIqcSampleTab\r\n                iqcsample={this.props.Login.masterData.iqcsample || []}\r\n                dataResult={process(this.props.Login.masterData.iqcsample || [], this.state.iqcsampleState)}\r\n                dataState={this.state.iqcsampleState}\r\n                controlMap={this.state.controlMap}\r\n                dataStateChange={this.dataStateBatchIqcChangeChange}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                cancelRecord={this.cancelRecord}\r\n                methodUrl={\"IQCSample\"}\r\n                getIqcSamples={() => this.getIqcSamples(this.props.Login.masterData.SelectedBatchmaster)}\r\n                screenName=\"IDS_BATCHIQCSAMPLE\"\r\n                nneedsubsample={this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n            />\r\n        )\r\n    //     if (this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus === transactionStatus.INITIATED\r\n    //         || this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus === transactionStatus.COMPLETED)\r\n        if(this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus===transactionStatus.INITIATED|| this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED )\r\n        {\r\n            tabMap.set(\"IDS_RESULTS\",\r\n                <BatchResultTab\r\n                    ELNTest={this.props.Login.masterData.ELNTest || []}\r\n                    resultview={this.props.Login.masterData.Resultview || []}\r\n                    dataResult={process(this.props.Login.masterData.Resultview || [], this.state.viewstate)}\r\n                    dataState={this.state.viewstate}\r\n                    dataStateChange={this.dataStateViewChange}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    methodUrl={\"BatchViewResult\"}\r\n                    screenName=\"IDS_RESULTS\"\r\n                    intl={this.props.intl}\r\n                    nneedsubsample={this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n                    selectedfilename={this.props.Login.masterData.SelectedBatchmaster.sbatcharno}\r\n\r\n                />\r\n            )\r\n        }\r\n\r\n        tabMap.set(\"IDS_BATCHHISTORY\",\r\n            <BatchhistoryTab\r\n                batchhistory={this.props.Login.masterData.Batchhistory || []}\r\n                dataResult={process(this.props.Login.masterData.Batchhistory || [], this.state.histortState)}\r\n                dataState={this.state.histortState}\r\n                dataStateChange={this.dataStateBatchHistoryChange}\r\n                userInfo={this.props.Login.userInfo}\r\n                methodUrl={\"Batchhistory\"}\r\n                screenName=\"IDS_BATCHHISTORY\"\r\n                nneedsubsample={this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n\r\n            />\r\n        )\r\n\r\n\r\n        return tabMap;\r\n    }\r\n\r\n\r\n    onFilterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let inputData = [];\r\n\r\n\r\n            if (fieldname === \"fromDate\") {\r\n                let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n                inputData = {\r\n                    nflag: 2,\r\n                    needFilterSubmit: \"false\",\r\n                    fromDate: dateObj.fromDate,//this.OnDateConverstion(event, fieldname),\r\n                    toDate: dateObj.toDate,//this.props.Login.masterData.toDate,\r\n                    defaultRegistrationType: this.props.Login.masterData.defaultRegistrationType,\r\n                    defaultRegistrationSubType: this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\r\n                    defaultSampleType: this.props.Login.masterData.defaultSampleType,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\r\n                    ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\r\n                    //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    // realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    // realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    // realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    // realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\r\n                    realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n                    realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\r\n                    realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\r\n                    realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                    realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\r\n                    realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\r\n                    realFromDate:this.props.Login.masterData.realFromDate,\r\n                    realToDate:this.props.Login.masterData.realToDate,\r\n                    //ALPD-3571--Vignesh R(05-09-2024) \r\n\t\t\t\t\t realndesigntemplatemappingcode: this.props.Login.masterData.realndesigntemplatemappingcode,\r\n                    napprovalversioncode: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item.napprovalconfigversioncode || transactionStatus.NA,\r\n                    napprovalconfigcode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode || transactionStatus.NA,\r\n                    ApprovalVersionValue:this.state.ApprovalVersionValue\r\n                }\r\n                this.props.getBCApprovalConfigVersion(inputData)\r\n            }\r\n            if (fieldname === \"toDate\") {\r\n\r\n                let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo)\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    needFilterSubmit: \"false\",\r\n                    fromDate: dateObj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    toDate: dateObj.toDate,//this.OnDateConverstion(event, fieldname),\r\n                    defaultRegistrationType: this.props.Login.masterData.defaultRegistrationType,\r\n                    defaultRegistrationSubType: this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\r\n                    defaultSampleType: this.props.Login.masterData.defaultSampleType,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\r\n                    ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\r\n                    //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    // realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    // realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    // realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    // realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\r\n                    realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n                    realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\r\n                    realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\r\n                    realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                    realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\r\n                    realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\r\n                    realFromDate:this.props.Login.masterData.realFromDate,\r\n                    realToDate:this.props.Login.masterData.realToDate\r\n                }\r\n                this.props.getBCApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \r\n            //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \r\n\r\n            if (fieldname === \"nsampletypecode\") {\r\n\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                    this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    needFilterSubmit: \"false\",\r\n                    nsampletypecode: parseInt(event.value),\r\n                    fromDate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    toDate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultSampleType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    isneedrealFilterStatus: \"false\",\r\n                    // realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    // realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    //  realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    //realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\",\r\n                    realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n                    realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\r\n                    realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\r\n                    realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                    realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\r\n                    realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion\r\n                }\r\n                this.props.getBCRegistrationType(inputData)\r\n            }\r\n            else if (fieldname === \"nregtypecode\") {\r\n\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                    this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n\r\n                inputData = {\r\n                    nflag: 3,\r\n                    needFilterSubmit: \"false\",\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    fromDate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    toDate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    nregtypecode: parseInt(event.value),\r\n                    userInfo: this.props.Login.userInfo,\r\n                    defaultRegistrationType: event.item,\r\n                    defaultSampleType: this.props.Login.masterData.defaultSampleType,\r\n                    isneedrealFilterStatus: \"false\",\r\n                    // realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    // realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    // realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    // realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\",\r\n                    realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n                    realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\r\n                    realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\r\n                    realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                    realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\r\n                    realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion\r\n                }\r\n                this.props.getBCRegistrationSubType(inputData, this.props.Login.masterData)\r\n            }\r\n            else if (fieldname === \"nregsubtypecode\") {\r\n                const nregsubtypecode = this.state;\r\n                //this.setState({ nregsubtypecode:event });\r\n                this.getApprovalVersion(event);\r\n\r\n            }\r\n\r\n            else if (fieldname === 'ndesigntemplatemappingcode') {\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                const inputParamData = {\r\n                    nflag: 3,\r\n                    needFilterSubmit: \"false\",\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    //defaultFilterStatus: event.item,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                    // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                    //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\r\n                    ndesigntemplatemappingcode: event.value,\r\n                    DesignTemplateMappingValue: event.item,\r\n                    isneedrealFilterStatus: \"false\",\r\n                    realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\r\n                }\r\n                //this.props.getREFilterTestData(inputParamData)\r\n                this.props.getBCFilterTemplate(inputParamData)\r\n\r\n            }\r\n\r\n            else if (fieldname === \"version\") {\r\n\r\n                // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                //     this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                // inputData = {\r\n                //     nflag: 4,\r\n                //     fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                //     todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                //     nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                //     nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                //     nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                //     napprovalversioncode: event.value,\r\n                //     userinfo: this.props.Login.userInfo,\r\n                //     defaultApprovalConfigVersion: event.item,\r\n                //     masterData: this.props.Login.masterData,\r\n                //     ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\r\n                // }\r\n                // this.props.getBCJobStatus(inputData)\r\n                const ApprovalVersionValue = this.state;\r\n                this.setState({ ApprovalVersionValue: event });\r\n            }\r\n            else if (fieldname === \"jobstatus\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    needFilterSubmit: \"false\",\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultjobstatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\r\n                }\r\n                this.props.getBCFilterStatus(inputData)\r\n            }\r\n            else if (fieldname === \"filter\") {\r\n                const FilterStatusValue = this.state;\r\n                this.setState({ FilterStatusValue: event });\r\n\r\n            }\r\n            else if (fieldname === \"test\") {\r\n\r\n                const FilterStatusValue = this.state;\r\n                this.setState({ FilterStatusValue: event });\r\n            } else {\r\n                const selectedRecord = this.state;\r\n                this.setState({ selectedRecord: event });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFilterDateChange = (dateValue, dateName) => {\r\n        const { selectedFilter } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedFilter[dateName] = dateValue;\r\n        this.setState({ selectedFilter });\r\n\r\n    }\r\n\r\n    // headerSelectionChange = (event) => {\r\n    //     const checked = event.syntheticEvent.target.checked;\r\n    //     let addedComponentList = this.state.addedComponentList || [];\r\n    //     if (checked) {\r\n    //         const data = this.state.addComponentDataList.map(item => {\r\n    //             if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n    //                 addedComponentList.push({ ...item, selected: false });\r\n    //                 item.selected = checked;\r\n    //                 return item;\r\n    //             } else {\r\n    //                 let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n    //                 olditem.selected = checked;\r\n    //                 return olditem;\r\n    //             }\r\n\r\n    //         });\r\n\r\n\r\n    //         this.setState({\r\n    //             addComponentDataList: data, addedComponentList,\r\n    //             addSelectAll: checked, deleteSelectAll: false\r\n    //         });\r\n    //     }\r\n    //     else {\r\n    //         let addedComponentData = this.state.addedComponentList || [];\r\n    //         let deletedListdData = this.state.deletedList || [];\r\n\r\n    //         const data = this.state.addComponentDataList.map(item => {\r\n    //             addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\r\n    //             deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\r\n    //             item.selected = checked;\r\n    //             return item;\r\n    //         });\r\n\r\n    //         // console.log(\"data:\",data1, data2);\r\n    //         this.setState({\r\n    //             addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\r\n    //             addSelectAll: checked, deleteSelectAll: false\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n\r\n    valiateCheckAll(data) {\r\n        let selectAll = true;\r\n        // let checkRepeatComponent;\r\n        //  let addedComponentList = this.state.addedComponentList || [];\r\n        if (data && data.length > 0) {\r\n            data.forEach(dataItem => {\r\n                if (dataItem.selected) {\r\n                    if (dataItem.selected === false) {\r\n                        selectAll = false;\r\n                    }\r\n                }\r\n                else {\r\n                    selectAll = false;\r\n                    // checkRepeatComponent=this.state.addComponentDataList.filter(item=>item.npreregno==data.npreregno)\r\n                    // if(checkRepeatComponent.length>0){\r\n                    //     selectAll = true;\r\n                    // }else{\r\n                    //     selectAll = false;\r\n                    // }\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            //if (gridType === \"originalgrid\"){\r\n            selectAll = false;\r\n            // }\r\n        }\r\n        return selectAll;\r\n    }\r\n\r\n\r\n\r\n    headerSelectionChange = (event) => {\r\n        let checked = event.syntheticEvent.target.checked;\r\n        let addedSamplesList = [];\r\n        checked = checked == false && this.state.samples.length > 0 ? false : this.state.samples.length == 0 ? false : true\r\n        if (checked) {\r\n            //const data = event.dataItems.map(item => {\r\n             //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\r\n            const data = event.target.props.data.map(item => {\r\n                if (addedSamplesList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n                    //addedSamplesList.push({ ...item, selected: false });\r\n                    item.selected = checked;\r\n                    let newItem = JSON.parse(JSON.stringify(item));\r\n                    //newItem.selected = false;\r\n                    delete newItem['selected']\r\n                    newItem[\"jsondata\"] = {};\r\n                    newItem[\"jsonuidata\"] = {};\r\n                    newItem[\"jsondata\"]['samplelist'] = item\r\n                    newItem[\"jsonuidata\"]['samplelist'] = item\r\n                    addedSamplesList.push(newItem);\r\n                    return item;\r\n                } else {\r\n                    let olditem = JSON.parse(JSON.stringify(addedSamplesList[addedSamplesList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n                    olditem.selected = checked;\r\n                    let newItem = JSON.parse(JSON.stringify(olditem));\r\n                    newItem.selected = false;\r\n                    newItem[\"jsondata\"] = {};\r\n                    newItem[\"jsonuidata\"] = {};\r\n                    newItem[\"jsondata\"]['samplelist'] = olditem\r\n                    newItem[\"jsonuidata\"]['samplelist'] = olditem\r\n                    addedSamplesList.push(newItem);\r\n                    return olditem;\r\n\r\n                }\r\n\r\n            });\r\n\r\n\t\t    //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\r\n            this.setState({\r\n                samples: data,\r\n                addedSamplesList: addedSamplesList,\r\n                addComponentDataListCopy:  this.valiateCopy(this.state.addedSamplesListSortedList||[],data||[],addedSamplesList||[]),\r\n                addSelectAll: this.valiateCheckAll(addedSamplesList),\r\n                deleteSelectAll:this.valiateCheckAll(addedSamplesList),\r\n                addSelectAll: checked, deleteSelectAll: false\r\n            });\r\n        }\r\n        else {\r\n            // let sampleListData = this.state.sampleList || [];\r\n            // let deletedListdData = this.state.sampleList || [];\r\n\r\n            let addedSamplesList = this.state.addedSamplesList || [];\r\n            let deletedListdData = this.state.deletedList || [];\r\n\r\n            const data = event.target.props.data.map(item => {\r\n                addedSamplesList = addedSamplesList.filter(item1 => item1.npreregno !== item.npreregno);\r\n                deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\r\n                item.selected = checked;\r\n                return item;\r\n            });\r\n\r\n            // console.log(\"data:\",data1, data2);\r\n            this.setState({\r\n                samples: data,\r\n                addedSamplesList: addedSamplesList,\r\n                deletedList: deletedListdData,\r\n                addSelectAll: this.valiateCheckAll(addedSamplesList),\r\n                deleteSelectAll: this.valiateCheckAll(addedSamplesList),\r\n                addSelectAll: checked, deleteSelectAll: false,\r\n                addComponentDataListCopy:  this.valiateCopy(this.state.addedSamplesListSortedList||[],data||[],addedSamplesList||[]),  \r\n\r\n                \r\n            });\r\n        }\r\n\r\n        // const data = this.state.addComponentDataList.map(item=>{\r\n        //     if (checked){\r\n        //         addedComponentList.push({...item, selected:false});\r\n        //     }\r\n        //     else{\r\n        //         data1 = data1.filter(item1=>item1.npreregno !== item.npreregno);\r\n        //         data2 = data2.filter(item1=>item1.npreregno !== item.npreregno);      \r\n        //     }  \r\n        //     item.selected = checked;\r\n        //     return item;\r\n        // });\r\n\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\r\n            this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n        }\r\n    }\r\n //ALPD-5137--Vignesh R(20-12-2024)---comment by vignesh\r\n\r\n/*\r\n    selectionChange = (event) => {\r\n        let addedSamplesList = this.state.addedSamplesList || [];\r\n        //let addedSamplesList= [];\r\n        let samples = this.state.samples || [];\r\n        const samplesList = this.state.samples.map(item => {\r\n            if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\r\n               item.selected = !event.dataItem.selected;\r\n              //  item={...item,\"selected\":!event.dataItem.selected};\r\n                if (item.selected) {\r\n                    const newItem = JSON.parse(JSON.stringify(item));\r\n                    //newItem.selected = false;\r\n                    delete newItem['selected']\r\n                    newItem[\"selected\"]=item.selected;\r\n                    newItem[\"jsondata\"] = {};\r\n                    newItem[\"jsonuidata\"] = {};\r\n                    newItem[\"jsondata\"]['samplelist'] = item\r\n                    newItem[\"jsonuidata\"]['samplelist'] = item\r\n                    addedSamplesList.push(newItem);\r\n                }\r\n                else {\r\n                    // if(addedSamplesList.length === 0){\r\n                    addedSamplesList = addedSamplesList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode)\r\n                    //   }else{\r\n                    //     this.state.samples.map((item1,index) => { \r\n                    //         if(item1.ntransactiontestcode == event.dataItem.ntransactiontestcode){\r\n                    //             if(this.state.samples.length == 1){\r\n                    //                 addedSamplesList=[];\r\n                    //             }else{\r\n                    //                 const newItem = JSON.parse(JSON.stringify(item1));\r\n                    //                 newItem.selected = false;\r\n                    //                 newItem[\"jsondata\"]={};\r\n                    //                 newItem[\"jsonuidata\"]={};\r\n                    //                 newItem[\"jsondata\"]['samplelist'] = item1\r\n                    //                 newItem[\"jsonuidata\"]['samplelist'] = item1\r\n                    //                 //addedSamplesList.push(newItem);\r\n                    //                 addedSamplesList = item1;\r\n                    //             }  \r\n                    //         }\r\n                    //     } \r\n                    //   )\r\n                }\r\n            }\r\n            return item;\r\n        });\r\n        ///samplesList = addedSamplesList;\r\n        this.setState({\r\n            samplesList,\r\n            addedSamplesList,\r\n            samples,\r\n            initialList: addedSamplesList,\r\n            addSelectAll: this.valiateCheckAll(this.state.dataState.filter&& this.state.dataState.filter!==null ?addedSamplesList:samples),\r\n            deleteSelectAll: this.valiateCheckAll(samplesList)\r\n        });\r\n    }\r\n*/\r\n\r\n    //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\r\nselectionChange = (event) => {\r\n    let addedSamplesList = this.state.addedSamplesList || [];\r\n    //let addedSamplesList= [];\r\n    //let samples = this.state.samples || [];\r\n    const samplesList = this.state.samples.map(item => {\r\n        if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\r\n           item.selected = !event.dataItem.selected;\r\n          //  item={...item,\"selected\":!event.dataItem.selected};\r\n            if (item.selected) {\r\n                const newItem = JSON.parse(JSON.stringify(item));\r\n                //newItem.selected = false;\r\n                delete newItem['selected']\r\n                //newItem[\"selected\"]=item.selected;\r\n                newItem[\"jsondata\"] = {};\r\n                newItem[\"jsonuidata\"] = {};\r\n                newItem[\"jsondata\"]['samplelist'] = item\r\n                newItem[\"jsonuidata\"]['samplelist'] = item\r\n                addedSamplesList.push(newItem);\r\n            }\r\n            else {\r\n                addedSamplesList = addedSamplesList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode)\r\n                \r\n            }\r\n        }\r\n        return item;\r\n    });\r\n    ///samplesList = addedSamplesList;\r\n    this.setState({\r\n      addSelectAll: this.valiateCheckAll(this.state.dataState && this.state.dataState.filter \r\n                  && this.state.dataState.filter !== null && this.state.dataState.filter!==undefined\r\n               ? process(samplesList || [], this.state.dataState).data : samplesList),\r\n               samples:samplesList, addedSamplesList,\r\n            //addSelectAll: this.valiateCheckAll(addComponentDataList),\r\n            deleteSelectAll: this.valiateCheckAll(addedSamplesList),\r\n            addComponentDataListCopy:this.valiateCopy(this.state.addedSamplesListSortedList||[],samplesList||[],addedSamplesList||[])\r\n    });\r\n}\r\n    //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\r\n\r\nchildDataChange = (addedSamplesListSortedList) => {\r\n    this.setState({\r\n        addedSamplesListSortedList: addedSamplesListSortedList,\r\n        isInitialRender: false\r\n    });\r\n}\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord;\r\n        console.log(\"handle save:\", selectedRecord);\r\n        mandatoryFields = [\r\n            { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n        ]\r\n        let selectedSpec = this.props.Login.selectedSpec;\r\n\r\n        if (selectedRecord && selectedRecord.nallottedspeccode !== \"\") {\r\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\r\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\r\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadSpec: false,\r\n                    selectedSpec,\r\n                    openModal: true,\r\n                    openSpecModal: false\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if ((this.props.Login.openModal || this.props.Login.openChildModal) && nextState.isInitialRender === false &&\r\n            (nextState.addedSamplesListSortedList !== this.state.addedSamplesListSortedList)) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let reportActionList = [];\r\n        let batchMandatoryFields = [];\r\n        //commenting as its done in below code by rukshana\r\n        // if (this.props.Login.operation === \"update\") {\r\n        //     batchMandatoryFields.push(\r\n\r\n        //         { idsName: \"IDS_INSTRUMENTCATEGORY\", dataField: \"sinstrumentcatname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_INSTRUMENT\", dataField: \"sinstrumentname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_INSTRUMENTID\", dataField: \"sinstrumentid\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_PRODUCT\", dataField: \"sproductname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" }\r\n        //     );\r\n\r\n        // }\r\n        // else {\r\n        //     batchMandatoryFields.push(\r\n        //         { idsName: \"IDS_SECTION\", dataField: \"ssectionname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_TEST\", dataField: \"stestname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_INSTRUMENTCATEGORY\", dataField: \"sinstrumentcatname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_INSTRUMENT\", dataField: \"sinstrumentname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_INSTRUMENTID\", dataField: \"sinstrumentid\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_PRODUCT\", dataField: \"sproductname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" }\r\n        //     );\r\n        // }\r\n        //let mandatoryFields =[];\r\n        if (this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\") {\r\n            let { selectedRecord } = this.state;\r\n            batchMandatoryFields.push(\r\n                { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                //{ \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                // { \"idsName\": \"IDS_INSTRUMENT\", \"dataField\": \"sinstrumentname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                // { \"idsName\": \"IDS_INSTRUMENTID\", \"dataField\": \"sinstrumentid\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            );\r\n\r\n            if (selectedRecord && selectedRecord.sinstrumentcatname !== undefined && selectedRecord.ninstrumentcatcode > 0) {\r\n                batchMandatoryFields.push(\r\n                    // { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_INSTRUMENT\", \"dataField\": \"sinstrumentname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_INSTRUMENTID\", \"dataField\": \"sinstrumentid\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                )\r\n            }\r\n        }\r\n        const getBatch = {\r\n            screenName: \"IDS_BATCHCREATION\",\r\n            operation: \"get\",\r\n            masterData: this.props.Login.masterData,\r\n            userInfo: this.props.Login.userInfo, methodUrl: \"Batchcreation\", keyName: \"batchcreation\"\r\n        };\r\n        this.fromDate = (this.state.selectedFilter[\"fromdate\"] && this.state.selectedFilter[\"fromdate\"]) || this.props.Login.masterData && this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : undefined;\r\n        this.toDate = (this.state.selectedFilter[\"todate\"] && this.state.selectedFilter[\"todate\"]) || this.props.Login.masterData && this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : undefined;\r\n        const addId = this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditBatchcreation\") && this.state.controlMap.get(\"EditBatchcreation\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteBatchcreation\") && this.state.controlMap.get(\"DeleteBatchcreation\").ncontrolcode;\r\n        const testStartId = this.state.controlMap.has(\"BatchInitiate\") && this.state.controlMap.get(\"BatchInitiate\").ncontrolcode;\r\n        const completeId = this.state.controlMap.has(\"BatchComplete\") && this.state.controlMap.get(\"BatchComplete\").ncontrolcode;\r\n        const cancelId = this.state.controlMap.has(\"CancelBatch\") && this.state.controlMap.get(\"CancelBatch\").ncontrolcode;\r\n        const elnSheetId = this.state.controlMap.has(\"ELNSheet\") && this.state.controlMap.get(\"ELNSheet\").ncontrolcode;\r\n\r\n        const addParam = {\r\n            screenName: \"IDS_BATCHCREATION\",\r\n            primaryeyField: \"nreleasebatchcode\",\r\n            primaryKeyValue: undefined,\r\n            operation: \"create\",\r\n            //inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: addId,\r\n            nneedtestinitiate: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate,\r\n            masterData: this.props.Login.masterData,\r\n            fromdate: this.props.Login.masterData.fromDate,\r\n            todate: this.props.Login.masterData.toDate,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\r\n            napprovalconfigcode: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n            ntranscode: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus : transactionStatus.NA,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n        };\r\n\r\n        const viewInfoFields = [];\r\n\r\n        viewInfoFields.push(\r\n            { \"fieldName\": \"sbatcharno\", \"label\": \"IDS_BATCHARNO\" },\r\n            { \"fieldName\": \"ssectionname\", \"label\": \"IDS_SECTION\" },\r\n            { \"fieldName\": \"stestname\", \"label\": \"IDS_TESTNAME\" },\r\n            { \"fieldName\": \"sinstrumentcatname\", \"label\": \"IDS_INSTRUMENTCATEGORY\" },\r\n            { \"fieldName\": \"sinstrumentid\", \"label\": \"IDS_INSTRUMENTID\" },\r\n            { \"fieldName\": \"sinstrumentname\", \"label\": \"IDS_INSTRUMENTNAME\" },\r\n            { \"fieldName\": \"sproductname\", \"label\": \"IDS_SAMPLETYPE\" },\r\n            { \"fieldName\": \"stransdisplaystatus\", \"label\": \"IDS_STATUS\" },\r\n            {\r\n                \"fieldName\": \"username\", \"label\":\r\n                    this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.INITIATED ? \"IDS_BATCHINITIATEDBY\" :\r\n                        this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED ? \"IDS_BATCHCOMPLETEDBY\"\r\n                            : \"IDS_BATCHCREATEDBY\"\r\n            }\r\n        );\r\n\r\n        if (this.props.Login.masterData.realSampleTypeValue &&\r\n            this.props.Login.masterData.realSampleTypeValue.nsampletypecode === SampleType.PROJECTSAMPLETYPE) {\r\n            viewInfoFields.push(\r\n                { \"fieldName\": \"sprojectcode\", \"label\": \"IDS_PROJECTCODE\" },\r\n            )\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        let stransactionstatuscode = this.props.Login.masterData.SelectedFilterStatus ? String(this.props.Login.masterData.SelectedFilterStatus.ntransactionstatus) : null;\r\n\r\n        if (this.state.selectedRecord && this.state.selectedRecord[\"nfiltertransstatus\"] !== undefined) {\r\n            stransactionstatuscode = this.state.selectedRecord[\"nfiltertransstatus\"].value === String(0) ? null : String(this.state.selectedRecord[\"nfiltertransstatus\"].value);\r\n        }\r\n\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate,\r\n            this.props.Login.userInfo);\r\n\r\n        const editParam = {\r\n            screenName: \"IDS_BATCHCREATION\",\r\n            operation: \"update\",\r\n            primaryKeyField: \"nbatchmastercode\",\r\n            inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: editId,\r\n            masterData: this.props.Login.masterData,\r\n            naddcontrolCode: addId,\r\n            nprojectmastercode: this.props.Login.masterData.selectedTestSynonym && this.props.Login.masterData.selectedTestSynonym.nprojectmastercode,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue ?\r\n                this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ?\r\n                this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA\r\n        };\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"Batchmaster\",\r\n            selectedObject: \"SelectedBatchmaster\",\r\n            primaryKeyField: \"nbatchmastercode\",\r\n            fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\r\n\r\n            fecthInputObject: {\r\n                fromDate: obj.fromDate,\r\n                toDate: obj.toDate,\r\n                userInfo: this.props.Login.userInfo,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                napprovalconfigcode: this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA,\r\n                ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT,\r\n                nsampletypecode: this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA,\r\n                //fromDate, toDate, \r\n                //stransactionstatuscode,\r\n                //activeBCTab: this.props.Login.activeBCTab || \"IDS_COMPONENT\"\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            //unchangeList: [\"FromDate\", \"ToDate\", \"SelectedFilterStatus\"],\r\n            searchFieldList: this.searchFieldList\r\n        }\r\n\r\n        this.breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto\r\n            },\r\n            // {\r\n            //     \"label\": \"IDS_SAMPLETYPE\",\r\n            //     \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\r\n            // }, \r\n            {\r\n                \"label\": \"IDS_REGISTRATIONTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\"\r\n                // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\r\n                // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_REGISTRATIONSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_BATCHSTATUS\",\r\n                \"value\": this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus ? this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus : \"NA\"\r\n            }\r\n            // {\r\n            //     \"label\": \"IDS_CONFIGVERSION\",\r\n            //     \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\r\n            // }\r\n        ]\r\n\r\n        return (\r\n            <>\r\n                {/* Start of get display*/}\r\n                {/* <div className=\"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\"> */}\r\n                {/* <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\"> */}\r\n                {/* <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\"> */}\r\n                {/* <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\"> */}\r\n                {/* //</><div className=\"client-listing-wrap mtop-4\"> */}\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd \">\r\n                    <Affix top={53}>\r\n                        <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    </Affix>\r\n\r\n                    <Row noGutters={true}>\r\n                        <Col md={`${!this.props.sidebarview ? '4' : \"2\"}`}> \r\n                            <ListMaster\r\n                                masterList={this.props.Login.masterData.searchedData || (this.props.Login.masterData.Batchmaster || [])}\r\n                                selectedMaster={this.props.Login.masterData.SelectedBatchmaster}\r\n                                primaryKeyField=\"nbatchmastercode\"\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterData={this.props.Login.masterData}\r\n                                //getMasterDetail={this.props.getSelectedBatchCreationDetail}\r\n                                getMasterDetail={(batch) => this.props.getSelectedBatchCreationDetail(batch, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                inputParam={getBatch}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_BATCHCREATION\" })}\r\n                                //mainField=\"stestname\"\r\n                                mainField=\"sbatcharno\"\r\n                                firstField=\"stestname\"\r\n                                secondField=\"sinstrumentname\"\r\n                                selectedListName=\"SelectedBatchmaster\"\r\n                                objectName=\"BatchCreation\"\r\n                                listName=\"IDS_BATCHCREATION\"\r\n                                needValidation={false}\r\n                                hidePaging={false}\r\n                                // subFields={\r\n                                //     [\r\n                                //         { [designProperties.VALUE]: \"sinstrumentcatname\" },\r\n                                //         { [designProperties.VALUE]: \"sinstrumentname\" },\r\n                                //         // { [designProperties.VALUE]: \"smahname\" },\r\n                                //         // { [designProperties.VALUE]: \"stransactionstatus\", [designProperties.COLOUR]: \"transstatuscolor\" }\r\n                                //     ]\r\n                                // }\r\n                                needFilter={true}\r\n                                needMultiSelect={false}\r\n                                subFieldsLabel={true}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                searchListName=\"searchedData\"\r\n                                searchRef={this.searchRef}\r\n                                filterParam={filterParam}\r\n                                isClearSearch={this.props.Login.isClearSearch}\r\n                                // skip={this.state.skip}\r\n                                // take={this.state.take}\r\n                                // handlePageChange={this.handlePageChange}\r\n                                addId={addId}\r\n                                showFilterIcon={true}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                reloadData={this.reloadData}\r\n                                openModal={() => this.createBatchValidation(addParam)}\r\n                                callCloseFunction={true}\r\n                                // openModal={() => this.props.getTestInstrumentComboService(addParam)}\r\n                                commonActions={\r\n                                    // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n                                    <ProductList className=\"d-flex product-category float-right\">\r\n                                        {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                        <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                            data-for=\"tooltip-common-wrap\"\r\n                                            hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                            onClick={() => this.props.getTestInstrumentComboService(addParam)}\r\n                                        // onClick={() => this.createBatchValidation(addParam)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPlus} />\r\n                                        </Button>\r\n                                        <Button className=\"btn btn-circle outline-grey ml-2 p-0\" variant=\"link\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                            data-for=\"tooltip-common-wrap\"\r\n                                        //onClick={() => this.reloadData(false)} \r\n                                        >\r\n                                            <RefreshIcon className='custom_icons'/>\r\n                                        </Button>\r\n\r\n                                    </ProductList>\r\n                                    // </Tooltip>\r\n                                }\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_FILTER\": <BatchCreationFilter\r\n                                            fromDate={this.state.selectedFilter[\"fromDate\"] != undefined ?\r\n                                                rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"fromDate\"]) : this.fromDate}\r\n                                            toDate={this.state.selectedFilter[\"toDate\"] != undefined ?\r\n                                                rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"toDate\"]) : this.toDate}\r\n                                            SampleType={this.state.SampleType || []}\r\n                                            SampleTypeValue={this.props.Login.masterData.defaultSampleType || []}\r\n                                            RegType={this.state.RegistrationType || []}\r\n                                            RegTypeValue={this.props.Login.masterData.defaultRegistrationType || []}\r\n                                            RegSubType={this.state.RegistrationSubType || []}\r\n                                            RegSubTypeValue={this.state.nregsubtypecode || []}\r\n                                            DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || []}\r\n                                            FilterStatus={this.state.BCFilterStatus || []}\r\n                                            FilterStatusValue={this.state.FilterStatusValue || []}\r\n                                            ApprovalVersion={this.state.ApprovalConfigVersion || []}\r\n                                            ApprovalVersionValue={this.state.ApprovalVersionValue || []}\r\n                                            REJobStatus={this.state.REJobStatus || []}\r\n                                            JobStatusValue={this.props.Login.masterData.defaultjobstatus || []}\r\n                                            Test={this.state.Testvalues || []}\r\n                                            TestValue={this.props.Login.masterData.selectedTestSynonym || []}\r\n                                            onFilterComboChange={this.onFilterComboChange}\r\n                                            handleDateChange={this.handleDateChange}\r\n                                            handleFilterDateChange={this.handleFilterDateChange}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                            DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                        />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.props.sidebarview ? '8' : \"10\"}`} className=\"position-relative\">\r\n                            <div className=\"sidebar-view-btn-block\">\r\n                                <div className=\"sidebar-view-btn \" onClick={this.props.parentFunction}>\r\n                                    {!this.props.sidebarview ?                    \r\n                                        <i class=\"fa fa-less-than\"></i> :\r\n                                        <i class=\"fa fa-greater-than\"></i> \r\n                                    }\r\n                                </div>\r\n                            </div> \r\n                            {/* <Row> */}\r\n                            {/* <Col md={12}> */}\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.Batchmaster && this.props.Login.masterData.Batchmaster.length > 0\r\n                                        && this.props.Login.masterData.SelectedBatchmaster ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <Card.Title className=\"product-title-main\">\r\n                                                    {this.props.Login.masterData.SelectedBatchmaster.sbatcharno}\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle>\r\n                                                    <div className=\"d-flex product-category\">\r\n                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                            {\r\n                                                                this.props.Login.masterData.SelectedBatchTestTAT && this.props.Login.masterData.SelectedBatchTestTAT.Deviation && this.props.intl.formatMessage({ id: \"IDS_DEVIATION\" }) + \" : \" + this.props.Login.masterData.SelectedBatchTestTAT.Deviation\r\n                                                            }\r\n\r\n                                                            <MediaLabel className={`btn btn-outlined ${this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED ? \"outline-initiate\"\r\n                                                                : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED ? \"outline-success\"\r\n                                                                    : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED ? \"outline-danger\"\r\n                                                                        : \"outline-secondary\"} btn-sm ml-3`}>\r\n                                                                {this.props.Login.masterData.SelectedBatchmaster.stransdisplaystatus}\r\n                                                            </MediaLabel>\r\n                                                        </h2>\r\n                                                        {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                        <div className=\"d-inline\">\r\n\r\n                                                            {/* <Nav.Link name=\"view\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_BATCHTAT\" })}\r\n                                                                            // hidden={this.props.userRoleControlRights.indexOf(this.props.viewVersionId) === -1}\r\n                                                                            onClick={() => this.props.batchTAT(this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,this.props.Login.userInfo,this.props.Login.masterData)}\r\n                                                                            >\r\n                                                                            <FontAwesomeIcon icon={faEye} />\r\n                                                                        </Nav.Link>      */}\r\n\r\n                                                            <Nav.Link name=\"openelnsheet\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(elnSheetId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_OPENELNSHEET\" })}\r\n                                                            //onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}                                \r\n                                                            >\r\n                                                                <Image src={elnimage} alt=\"filer-icon action-icons-wrap\"\r\n                                                                    width=\"20\" height=\"20\" className=\"ActionIconColor img-normalize\"\r\n                                                                    onClick={() => this.openClosePortal(this.props.Login.masterData.SelectedBatchmaster, cancelId)}\r\n                                                                    data-place=\"left\"\r\n                                                                />\r\n                                                            </Nav.Link>\r\n\r\n                                                            <Nav.Link name=\"view\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEWINFO\" })}\r\n                                                                // hidden={this.props.userRoleControlRights.indexOf(this.props.viewVersionId) === -1}\r\n                                                                onClick={() => this.props.viewInfo(this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faEye} />\r\n                                                            </Nav.Link>\r\n\r\n                                                            <Nav.Link name=\"editBatchCreation\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                onClick={() => this.fetchEditData(editParam)}\r\n                                                            // onClick={() => this.props.getActiveBatchCreationService(editParam,\r\n                                                            //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,this.props.Login.masterData.SelectedBatchmaster.ntestcode)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                //  title={this.props.intl.formatMessage({ id: \"IDS_EDITBATCH\" })}\r\n                                                                />\r\n                                                            </Nav.Link>\r\n                                                            {\r\n                                                                // this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate == true ?\r\n                                                                <Nav.Link name=\"initiateBatchCreation\"                                                        //  data-for=\"tooltip-common-wrap\" \r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_BATCHINITIATE\" })}\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1}\r\n                                                                    className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    //role=\"button\"\r\n                                                                    onClick={() => this.testPopUpStartActions(testStartId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faPlay}\r\n                                                                    />\r\n                                                                    {/* </FontIconWrap>  */}\r\n                                                                </Nav.Link>\r\n                                                                // :\"\"\r\n                                                            }\r\n\r\n                                                            <Nav.Link name=\"completeBatchCreation\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(completeId) === -1}\r\n                                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })}\r\n                                                                onClick={() => this.completePopUpStartActions(completeId)}\r\n                                                            //onClick={() => this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster,completeId)}\r\n                                                            // onClick={() => this.props.validateBatchComplete({\r\n                                                            //     masterData: this.props.Login.masterData,\r\n                                                            //     userInfo: this.props.Login.userInfo,\r\n                                                            //     userRoleControlRights: this.props.Login.userRoleControlRights,\r\n                                                            //     ncontrolCode: completeId,\r\n                                                            //     nreleasebatchcode: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode\r\n                                                            // })}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faCheckCircle}\r\n                                                                // title={this.props.intl.formatMessage({ id: \"IDS_COMPLETEBATCH\" })}\r\n                                                                />\r\n                                                            </Nav.Link>\r\n\r\n                                                            <Nav.Link name=\"deleteBatchCreation\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                onClick={() => this.ConfirmDelete(this.props.Login.masterData.SelectedBatchmaster, deleteId, \"delete\")}\r\n\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                            </Nav.Link>\r\n\r\n\r\n                                                            <Nav.Link name=\"deleteBatchCreation\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(cancelId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                            //onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}                                \r\n                                                            >\r\n                                                                <Image src={reject} alt=\"filer-icon action-icons-wrap\"\r\n                                                                    width=\"20\" height=\"20\" className=\"ActionIconColor img-normalize\"\r\n                                                                    onClick={() => this.cancelBatch(this.props.Login.masterData.SelectedBatchmaster, cancelId)}\r\n                                                                    data-place=\"left\"\r\n                                                                />\r\n                                                            </Nav.Link>\r\n\r\n                                                            {reportActionList.length > 0 ?\r\n                                                                <CustomPopover\r\n                                                                    nav={true}\r\n                                                                    data={reportActionList}\r\n                                                                    Button={true}\r\n                                                                    hideIcon={true}\r\n                                                                    btnClasses=\"btn-circle btn_grey ml-2\"\r\n                                                                    textKey=\"value\"\r\n                                                                    dynamicButton={(value) => this.reportMethod(value)}\r\n                                                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                />\r\n                                                                :\r\n                                                                \"\"}\r\n\r\n                                                        </div>\r\n                                                        {/* </Tooltip> */}\r\n                                                    </div>\r\n\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Row className=\"no-gutters\">\r\n                                                    <Col md={12}>\r\n                                                        <Card className=\"at-tabs\">\r\n                                                            <CustomTab\r\n                                                                activeKey={this.props.Login.batchactiveKey ? this.props.Login.batchactiveKey : \"IDS_SAMPLE\"}\r\n                                                                tabDetail={this.tabDetail()} onTabChange={this.onTabChange}\r\n                                                            />\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                {/* <CustomTab \r\n                                                            activeKey={this.props.Login.activeKey ? this.props.Login.activeKey : \"IDS_SAMPLE\"}\r\n                                                            tabDetail={this.tabDetail()} onTabChange={this.onTabChange} /> */}\r\n                                            </Card.Body>\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                            {/* </Col> */}\r\n                            {/* </Row> */}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n\r\n                <PortalModal>\r\n                    <div>\r\n                        <Modal\r\n                            centered\r\n                            scrollable\r\n                            bsPrefix=\"model model_zindex\"\r\n                            show={this.props.Login.openELNSheet}\r\n                            // show={this.state.openELNSheet}\r\n                            onHide={this.openClosePortal}\r\n                            dialogClassName={`${this.props.nflag && this.props.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`}\r\n                            backdrop=\"static\"\r\n                            keyboard={false}\r\n                            enforceFocus={false}\r\n                            aria-labelledby=\"example-custom-modal-styling-title\"\r\n                        >\r\n                            <Modal.Header closeButton>\r\n                                <Modal.Title style={{ \"line-height\": \"1.0\" }} id=\"example-custom-modal-styling-title\">\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_ELNSHEET\" })}\r\n                                </Modal.Title>\r\n                                <ReactTooltip globalEventOff=\"true\" />\r\n\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n                                <div className=\"modal-inner-content\">\r\n                                    {/* <Iframe url={this.state.enlLink} */}\r\n                                    <Iframe\r\n                                        // url={\"http://agl69:8080/QuaLISWeb/#/login\"}\r\n                                        url={this.props.Login.masterData.enlLink}\r\n                                        width=\"98%\"\r\n                                        height=\"1000px\"\r\n                                        id=\"reportviewID\"\r\n                                        className=\"reportview\"\r\n                                    //display=\"initial\"\r\n                                    /// position=\"relative\" \r\n                                    />\r\n                                </div>\r\n                            </Modal.Body>\r\n                        </Modal>\r\n                    </div>\r\n                </PortalModal>\r\n                {/* </ListWrapper> */}\r\n\r\n                {/* End of get display*/}\r\n\r\n                {/* Start of Modal Sideout for User Creation */}\r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {\r\n                    this.props.Login.openModal ?\r\n                        <SlideOutModal\r\n                            show={this.props.Login.openModal}\r\n                            size={this.props.Login.operation === \"createSample\"?\"xl\":\"lg\"}\r\n                            closeModal={this.closeModal}\r\n                            operation={this.props.Login.operation}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            screenName={this.props.Login.operation === \"createSample\" ? this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })\r\n                                : this.props.Login.operation === \"initiate\" || this.props.Login.operation === \"view\" || this.props.Login.operation === \"complete\" ? this.props.intl.formatMessage({ id: \"IDS_BATCH\" })\r\n                                    : this.props.Login.operation === \"createiqcsample\" ? this.props.intl.formatMessage({ id: \"IDS_BATCHIQCSAMPLE\" })\r\n                                        : this.props.Login.screenName}\r\n                            onSaveClick={this.onSaveClick}\r\n                            esign={this.props.Login.loadEsign}\r\n                            validateEsign={this.validateEsign}\r\n                            masterStatus={this.props.Login.masterStatus}\r\n                            updateStore={this.props.updateStore}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            mandatoryFields={this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\" ?\r\n                                batchMandatoryFields\r\n                                //  : this.props.Login.operation === \"initiate\"  ?\r\n                                //    this.initiateMandatoryFields \r\n                                //  : this.props.Login.operation === \"complete\" ?\r\n                                //    this.completeMandatoryFields\r\n                                : this.props.Login.operation === \"createiqcsample\" ?\r\n                                    this.materialIqcMandatory\r\n                                    : []\r\n                            }\r\n                            showSaveContinue={this.state.showSaveContinue}\r\n                            noSave={this.props.Login.operation === \"view\" ? true : false}\r\n                            addComponent={this.props.Login.loadEsign ?\r\n                                <Esign operation={this.props.Login.operation}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                />\r\n                                : this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\" ?\r\n                                    <AddBatchCreation\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        sampleType={this.props.Login.masterData.realSampleTypeValue ?\r\n                                            this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA}\r\n                                        Test={this.state.Testvalues || []}\r\n                                        selectedInstrumentCategory={this.state.selectedInstCategory}\r\n                                        InstrumentCategory={this.state.InstrumentCategory}\r\n                                        Instrument={this.state.Instrument}\r\n                                        selectedInstrument={this.state.selectedInstrument}\r\n                                        productCategory={this.state.ProductCategory}\r\n                                        selectedProductCategory={this.state.selectedProductCategory}\r\n                                        TestValue={this.state.selectedTestSynonym || []}\r\n                                        product={this.state.Product || []}\r\n                                        instrumentID={this.state.InstrumentID || []}\r\n                                        selectedProduct={this.state.selectedProduct || []}\r\n                                        studyPlanList={this.props.Login.studyPlanList || []}\r\n                                        manufacturerList={this.props.Login.productManufacturerList || []}\r\n                                        maHolderList={this.props.Login.maHolderList || []}\r\n                                        timeZoneList={this.props.Login.timeZoneList || []}\r\n                                        selectedBacthCreation={this.props.Login.masterData.SelectedBatchmaster || {}}\r\n                                        operation={this.props.Login.operation}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        selectedInstrumentId={this.state.selectedInstrumentId}\r\n                                        onMultiColumnValue={this.onMultiColumnValue}\r\n                                        onMultiColumnMAHChange={this.onMultiColumnMAHChange}\r\n                                        batchCreationEditStatusList={this.props.Login.batchCreationEditStatusList}\r\n                                        Section={this.state.Section}\r\n                                        selectedSection={this.state.selectedSection}\r\n                                        ProjectCode={this.state.ProjectCode}\r\n                                        selectedProjectcode={this.state.selectedProjectcode}\r\n                                    />\r\n                                    : this.props.Login.operation === \"createSample\" ?\r\n                                        <AddSample\r\n    \t\t\t\t\t\t\t\t\t\t//ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\r\n                                    \t\tchildDataChange={this.childDataChange}\r\n                                            dataStateChangeBatchSample={this.dataStateChangeBatchSample}\r\n                                            addSaveDataGrid={this.addSaveDataGrid}\r\n                                            handleClickDelete={this.handleClickDelete}\r\n                                            addedSamplesListSortedList={this.state.addedSamplesListSortedList ||[]}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            getProductByCategory={this.getProductByCategory}\r\n                                            onComboChange={this.onComboChange}\r\n                                            handleDateChange={this.handleDateChange}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            productCategoryList={this.props.productCategoryList}\r\n                                            productList={this.props.productList}\r\n                                            componentList={this.props.componentList}\r\n                                            getDataForAddComponent={this.getDataForAddComponent}\r\n                                            clearComponentInput={this.props.clearComponentInput}\r\n                                            //samples={this.state.addsampleList ?this.state.addsampleList: this.state.samples || []}\r\n                                            samples={ this.state.samples || []}\r\n                                            headerSelectionChange={this.headerSelectionChange}\r\n                                            selectionChange={this.selectionChange}\r\n                                            addedComponentList={this.state.addedComponentList || []}\r\n                                            addedHeaderSelectionChange={this.addedHeaderSelectionChange}\r\n                                            addedSelectionChange={this.addedSelectionChange}\r\n                                            //dataStateChange={this.dataStateChange} \r\n                                            userRoleControlRights={this.props.userRoleControlRights}\r\n                                            controlMap={this.props.controlMap}\r\n                                            inputParam={this.props.inputParam}\r\n                                            screenName={this.props.screenName}\r\n                                            addSelectAll={this.state.addSelectAll}\r\n                                            deleteSelectAll={this.state.deleteSelectAll}\r\n                                            onDeleteSelectedComponent={this.onDeleteSelectedComponent}\r\n                                            componentPopupSkip={this.props.componentPopupSkip}\r\n                                            componentPopupTake={this.props.componentPopupTake}\r\n                                            componentPageSizes={this.props.componentPageSizes}\r\n                                            nneedsubsample={this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n                                           \r\n                                            \r\n                                            //dataResult={process(this.props.Login.masterData.samples || [], this.state.sampleState)}\r\n                                        />\r\n                                        : this.props.Login.operation === \"initiate\" || this.props.Login.operation === \"complete\" ?\r\n                                            <AddBatchinitiate\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                operation={this.props.Login.operation}\r\n                                                handleDateChange={this.handleDateChange}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                currentTime={this.props.Login.currentTime || []}\r\n                                            />\r\n                                            : this.props.Login.operation === \"view\" ?\r\n                                                <Card className='one' >\r\n                                                    <Card.Body>\r\n                                                        <ViewInfo\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                            selectedRecordView={this.props.Login.masterData.selectedRecordView}\r\n                                                            viewInfoFields={viewInfoFields}\r\n                                                        />\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                                : this.props.Login.operation === \"createiqcsample\" ?\r\n                                                    <AddMaterialIqc\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        operation={this.props.Login.operation}\r\n                                                        materialCategory={this.state.MaterialCategory}\r\n                                                        selectedMaterialType={this.state.selectedMaterialType}\r\n                                                        selectedMaterialCategory={this.state.selectedMaterialCategory}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        selectedMaterial={this.state.selectedMaterial}\r\n                                                        screenName={this.props.intl.formatMessage({ id: \"IDS_SPECIFICATION\" })}\r\n                                                        handleSaveClick={this.handleSaveClick}\r\n                                                        material={this.state.Material}\r\n                                                        materialInventory={this.state.MaterialInventory}\r\n                                                        AddSpec={this.AddSpec}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        currentTime={this.props.Login.currentTime || []}\r\n                                                        loadSpec={this.props.Login.loadSpec}\r\n                                                        selectedMaterialInventory={this.state.selectedMaterialInventory}\r\n                                                        selectedInventoryUnit={this.props.Login.masterData.selectedInventoryUnit}\r\n                                                        AgaramTree={this.props.Login.AgaramTree}\r\n                                                        openNodes={this.props.Login.OpenNodes}\r\n                                                        onTreeClick={this.onTreeClick}\r\n                                                        focusKey={this.props.Login.FocusKey}\r\n                                                        activeKey={this.props.Login.batchactiveKey}\r\n                                                        Specification={this.props.Login.Specification}\r\n                                                        selectedSpec={this.props.Login.selectedSpec}\r\n                                                        selectedRecord={this.state.selectedRecord}\r\n                                                        onSpecChange={this.onspecChange}\r\n                                                        openSpecModal={this.props.Login.openSpecModal}\r\n                                                        closeModal={this.closeModal}\r\n                                                    /> : \"\"\r\n                            }\r\n                        />\r\n                        : \"\"\r\n                }\r\n                {/* End of Modal Sideout for Creation */}\r\n                {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n\r\n\r\n    ConfirmDelete = (selectedBatch, deleteId, operation) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteBatchCreation(selectedBatch, deleteId, operation));\r\n    };\r\n\r\n\r\n    completePopUpStartActions = (completeId) => {\r\n        // if(this.props.Login.masterData.nneedtestinitiate === true){\r\n        if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED ||\r\n            this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT ||\r\n            this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED\r\n        ) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTINITIATEDBATCH\" }));\r\n        }\r\n        //    }else \r\n        else if (this.props.Login.masterData.Samples.length == 0) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLEFORINITIATE\" }));\r\n        } else {\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         openModal: true, \r\n            //         completeId : completeId,\r\n            //         masterData: this.props.Login.masterData,\r\n            //        // screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n            //         operation: \"complete\"\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n\r\n            let inputData = {};\r\n            inputData[\"openModal\"] = true;\r\n            inputData[\"completeId\"] = completeId;\r\n            inputData[\"selectedRecord\"] = this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\r\n            inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n            inputData[\"operation\"] = \"complete\";\r\n            this.props.batchCompleteDatePopup(inputData, this.props.Login.masterData);\r\n        }\r\n    }\r\n\r\n    AddSpec = (e) => {\r\n        if (this.state.selectedMaterial !== undefined &&\r\n            this.state.selectedMaterialCategory !== undefined) {\r\n            let inputData = {};\r\n            inputData[\"nmaterialcode\"] = this.state.selectedMaterial.value;\r\n            inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory.value;\r\n            inputData[\"ncategorybasedflow\"] = this.state.selectedMaterialCategory.item.ncategorybasedflow;\r\n            inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n            inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n            // inputData[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \r\n            // inputData[\"nneedmyjob\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob; \r\n            // inputData[\"nneedjoballocation\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation; \r\n            // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n            // inputData[\"napproveconfversioncode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n            // inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n            // inputData[\"nneedtestinitiate\"] =  this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\r\n            this.props.getTreeByMaterial(inputData, this.state.selectedRecord, this.props.Login.masterData);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_FILLALLDETAILSTOADDSPEC\" }));\r\n        }\r\n    }\r\n\r\n\r\n    testPopUpStartActions = (testStartId) => {\r\n        if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n        } else if (this.props.Login.masterData.Samples.length == 0) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLEFORINITIATE\" }));\r\n        }\r\n        // else if (this.props.Login.masterData.iqcsample.length==0){\r\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\r\n        // }\r\n        else {\r\n            let inputData = {};\r\n            inputData[\"openModal\"] = true;\r\n            inputData[\"testStartId\"] = testStartId;\r\n            inputData[\"selectedRecord\"] = this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\r\n            inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n            inputData[\"operation\"] = \"initiate\";\r\n            this.props.batchInitiateDatePopup(inputData, this.props.Login.masterData);\r\n\r\n\r\n            //         const updateInfo = {\r\n            //             typeName: DEFAULT_RETURN,\r\n            //             data: {\r\n            //                 openModal: true, \r\n            //                 testStartId : testStartId,\r\n            //                 selectedRecord : this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord,\r\n            //                 masterData: this.props.Login.masterData,\r\n            //                 operation: \"initiate\"\r\n            //             }\r\n            //         }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    testStartActions = (selectedmaster, testStartId) => {\r\n        if (selectedmaster.ntransactionstatus == transactionStatus.INITIATED || selectedmaster.ntransactionstatus === transactionStatus.COMPLETED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n        } else if (this.props.Login.masterData.Samples.length == 0) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLEFORINITIATE\" }));\r\n        }\r\n        //else if (this.props.Login.masterData.iqcsample.length==0){\r\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\r\n        // }\r\n        else {\r\n            let inputData = {};\r\n            let jsonuidata = [];\r\n            const masterData = this.props.Login.masterData;\r\n            const postParam = {\r\n                inputListName: \"Batchmaster\",\r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                primaryKeyValue: selectedmaster.nbatchmastercode,\r\n                fetchUrl: \"batchcreation/initiateBatchcreation\",\r\n                isSingleGet: true,\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n            let jsondata = this.props.Login.masterData.Samples.map(item => {\r\n                return { jsonuidata: item }\r\n            });\r\n            if (this.props.Login.masterData.iqcsample.length > 0) {\r\n                let totalSample = this.props.Login.masterData.Samples.concat(this.props.Login.masterData.iqcsample);\r\n                inputData[\"npreregno\"] = this.props.Login.masterData.iqcsample.map(samples => samples.npreregno).join(\",\");\r\n                inputData[\"ntransactiontestcode\"] = totalSample.map(samples => samples.ntransactiontestcode).join(\",\");\r\n                inputData[\"nneedjoballocationiqc\"] = true\r\n                inputData[\"isiqcdata\"] = true\r\n            } else {\r\n                inputData[\"npreregno\"] = this.props.Login.masterData.Samples.map(samples => samples.npreregno).join(\",\");\r\n                inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactiontestcode).join(\",\");\r\n                inputData[\"isiqcdata\"] = false\r\n                inputData[\"nneedjoballocationiqc\"] = false\r\n            }\r\n            inputData[\"nbatchsampleCode\"] = this.props.Login.masterData.Samples.map(sample => sample.nbatchsamplecode).join(\",\");\r\n            inputData[\"muluserpreregno\"] = this.props.Login.masterData.Samples.map(samples => samples.npreregno).join(\",\");\r\n            inputData[\"mulusertransactionsamplecode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactionsamplecode).join(\",\");\r\n            inputData[\"mulusertransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactiontestcode).join(\",\");\r\n            inputData[\"fromDate\"] = obj.fromDate;\r\n            inputData[\"toDate\"] = obj.toDate;\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            // inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n            inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType\r\n            inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n            //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n            inputData[\"batchsample\"] = jsondata;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\r\n            inputData[\"nneedmyjob\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob;\r\n            inputData[\"nneedjoballocation\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation;\r\n            inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ?\r\n            this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n            inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion &&\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\r\n            inputData[\"napproveconfversioncode\"] = this.props.Login.masterData.realApproveConfigVersion &&\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\r\n            inputData[\"ntranscode\"] = transactionStatus.INITIATED || transactionStatus.DRAFT;\r\n            inputData[\"nneedtestinitiate\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\r\n            inputData[\"Batchhistory\"] = {\r\n                dtransactiondate: formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] != undefined ?\r\n                    this.state.selectedRecord[\"dtransactiondate\"] : this.props.Login.currentTime, false),\r\n                scomments: this.state.selectedRecord && this.state.selectedRecord.scomments\r\n            };\r\n            inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n            inputData[\"testStartId\"] = testStartId;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\r\n            inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[1];\r\n            inputData[\"sample\"] = this.props.Login.masterData ? this.props.Login.masterData.sample : \"\";\r\n            inputData[\"iqcsample\"] = this.props.Login.masterData ? this.props.Login.masterData.iqcsample : \"\";\r\n            const inputParam = {\r\n                postParam,\r\n                inputData: inputData,\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchcreation\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n                operation: \"initiate\"\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, testStartId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: {\r\n                            inputParam,\r\n                            masterData: {\r\n                                ...masterData\r\n                                // defaultFilterStatus: this.props.Login.masterData.BCFilterStatus\r\n                                //     && this.props.Login.masterData.BCFilterStatus[1],\r\n                                // realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus\r\n                                //     && this.props.Login.masterData.BCFilterStatus[1],\r\n\r\n                            }\r\n                        },\r\n                        openModal: true, screenName: \"IDS_BATCHCREATION\",\r\n                        operation: inputParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.batchInitiateAction(inputData, this.props.Login.masterData, this.confirmMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    batchSaveIQCActions = (selectedmaster) => {\r\n        if (this.state.selectedRecord.savailablequatity !== \"0.00\") {\r\n            if (parseFloat(this.state.selectedRecord.susedquantity) <= parseFloat(this.props.Login.masterData.inventoryTransaction.savailablequatity)) {\r\n                if (this.props.Login.selectedSpec.nallottedspeccode !== undefined && this.props.Login.selectedSpec.nallottedspeccode !== \"\") {\r\n                    let userInfo = {};\r\n                    let inputRegistrationData = {};\r\n                    let inputMaterialInventoryData = {};\r\n                    let inputBatchData = {};\r\n                    const map = {}\r\n                    let batchCreationSampleData = {};\r\n                    let batchCreationTestData = {};\r\n                    let batchCreationSampleArray = [];\r\n                    let batchCreationTestArray = [];\r\n                    let samplecombinationuniqueArray = [];\r\n                    let inputMaterialInventoryArrData = [];\r\n\r\n                    batchCreationSampleData[\"nspecsampletypecode\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ?\r\n                        this.props.Login.selectedSpec.nallottedspeccode.nspecsampletypecode : transactionStatus.NA;\r\n                    batchCreationSampleData[\"ncomponentcode\"] = transactionStatus.NA;\r\n                    batchCreationSampleData[\"slno\"] = 1;\r\n                    batchCreationSampleArray.push(batchCreationSampleData);\r\n\r\n                    inputRegistrationData[\"nallottedspeccode\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ?\r\n                        this.props.Login.selectedSpec.nallottedspeccode.value : transactionStatus.NA;\r\n                    inputRegistrationData[\"ntemplatemanipulationcode\"] = this.props.Login.ntemplatemanipulationcode || transactionStatus.NA;\r\n                    inputRegistrationData[\"nregsubtypeversioncode\"] = this.props.Login.masterData.nregsubtypeversioncode;\r\n                    inputRegistrationData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n                    // inputRegistrationData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n                    // inputRegistrationData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n                    // inputRegistrationData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n\r\n                    inputRegistrationData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue &&\r\n                        this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                    inputRegistrationData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                        this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                    inputRegistrationData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                        this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n\r\n                    inputRegistrationData[\"nproductcatcode\"] = transactionStatus.NA;\r\n                    inputRegistrationData[\"nproductcode\"] = transactionStatus.NA;\r\n                    inputRegistrationData[\"ninstrumentcatcode\"] = transactionStatus.NA;\r\n                    inputRegistrationData[\"ninstrumentcode\"] = transactionStatus.NA;\r\n                    inputRegistrationData[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\r\n                    inputRegistrationData[\"nmaterialcode\"] = this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\r\n\r\n                    inputRegistrationData[\"jsondata\"] = {\r\n                        nmaterialcode: this.state.selectedMaterial.value,\r\n                        nmaterialcatcode: this.state.selectedMaterialCategory.value,\r\n                        smaterialcatname: this.state.selectedMaterialCategory.label,\r\n                        sinventoryid: this.state.selectedMaterialInventory.item.sinventoryid,\r\n                        nmaterialinventorycode: this.state.selectedMaterialInventory.item.nmaterialinventorycode,\r\n                        smaterial: this.state.selectedMaterial.item.smaterialname,\r\n                        smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\r\n                        nmaterialtypecode: this.state.selectedMaterialType.value,\r\n                        susedquantity: this.state.selectedRecord.susedquantity,\r\n                        sunitname: this.props.Login.masterData.inventoryTransaction.sunitname,\r\n                        savailablequatity: this.props.Login.masterData.inventoryTransaction.savailablequatity,\r\n                        //materialtype:this.state.selectedMaterialType.label,\r\n                        sremarks: this.state.selectedRecord.sremarks,\r\n                        nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n                    };\r\n                    inputRegistrationData[\"jsonuidata\"] = {\r\n                        nmaterialcode: this.state.selectedMaterial.value,\r\n                        nmaterialcatcode: this.state.selectedMaterialCategory.value,\r\n                        smaterialcatname: this.state.selectedMaterialCategory.label,\r\n                        sinventoryid: this.state.selectedMaterialInventory.item.sinventoryid,\r\n                        nmaterialinventorycode: this.state.selectedMaterialInventory.item.nmaterialinventorycode,\r\n                        smaterial: this.state.selectedMaterial.item.smaterialname,\r\n                        smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\r\n                        nmaterialtypecode: this.state.selectedMaterialType.value,\r\n                        susedquantity: this.state.selectedRecord.susedquantity,\r\n                        sunitname: this.props.Login.masterData.inventoryTransaction.sunitname,\r\n                        savailablequatity: this.props.Login.masterData.inventoryTransaction.savailablequatity,\r\n                        //materialtype:this.state.selectedMaterialType.label,\r\n                        sremarks: this.state.selectedRecord.sremarks,\r\n                        nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n\r\n                    };\r\n\r\n                    // inputMaterialInventoryData = {\r\n                    //     jsondata : this.props.Login.masterData.selectedInventoryUnit['jsondata']\r\n                    // }\r\n                    //  inputMaterialInventoryData = {\r\n                    //         nmaterialinventorycode : this.state.selectedMaterialInventory.item.nmaterialinventorycode,\r\n                    //         jsondata : {\r\n                    //             jsondata:this.props.Login.masterData.selectedInventoryUnit['jsondata'],\r\n                    //             nqtyused: this.state.selectedRecord.susedquantity\r\n                    //         },\r\n                    //         jsonuidata : {\r\n                    //             jsonuidata : this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\r\n                    //             nqtyused: this.state.selectedRecord.susedquantity\r\n                    //         },\r\n                    //         nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n                    //  };\r\n\r\n                    inputMaterialInventoryData[\"nmaterialinventorycode\"] = this.state.selectedMaterialInventory.item.nmaterialinventorycode;\r\n                    inputMaterialInventoryData[\"jsondata\"] = {\r\n                        ...this.props.Login.masterData.selectedInventoryUnit['jsondata'],\r\n                        nqtyused: this.state.selectedRecord.susedquantity,\r\n                        savailablequatity: this.state.selectedRecord.savailablequatity,\r\n                        nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n                    }\r\n                    //inputMaterialInventoryData[\"jsondata\"] = this.state.selectedRecord.susedquantity;\r\n                    inputMaterialInventoryData[\"nsectioncode\"] = this.props.Login.masterData.selectedInventoryUnit['nsectioncode'];\r\n                    inputMaterialInventoryData[\"jsonuidata\"] = {\r\n                        ...this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\r\n                        nqtyused: this.state.selectedRecord.susedquantity,\r\n                        savailablequatity: this.state.selectedRecord.savailablequatity,\r\n                        nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n                    }\r\n\r\n\r\n                    //inputMaterialInventoryArrData.push(inputMaterialInventoryData);\r\n\r\n                    batchCreationTestData[\"ntestgrouptestcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.ntestgrouptestcode : transactionStatus.NA;\r\n                    //     batchCreationTestData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample =>sample.ntransactiontestcode).join(\",\") ;\r\n                    batchCreationTestData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n                    batchCreationTestData[\"nsectioncode\"] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n                    batchCreationTestData[\"nmethodcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.nmethodcode : transactionStatus.NA;\r\n                    //   batchCreationTestData[\"nchecklistversioncode\"]=this.state.selectedTestSynonym ? this.state.selectedTestSynonym.item.nchecklistversioncode:transactionStatus.NA;\r\n                    batchCreationTestData[\"nrepeatcountno\"] = 1;//--\r\n                    //    batchCreationTestData[\"ntestretestno\"]=0;\r\n                    batchCreationTestData[\"nparametercount\"] = 1; //--\r\n                    batchCreationTestData[\"slno\"] = 1; //--\r\n\r\n                    batchCreationTestArray.push(batchCreationTestData);\r\n\r\n\r\n                    map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n                    map[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n                    userInfo = this.props.Login.userInfo;\r\n                    map[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\r\n                    map[\"napproveconfversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n                    map[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n                    map[\"nneedtestinitiate\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\r\n                    map[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\r\n                    map[\"nmaterialcode\"] = this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\r\n                    map[\"nmaterialtypecode\"] = this.state.selectedMaterialType ? this.state.selectedMaterialType.value : transactionStatus.NA;\r\n\r\n                    inputBatchData = this.props.Login.masterData.SelectedBatchmaster;\r\n\r\n                    map['Registration'] = inputRegistrationData;\r\n                    map['Batchsampleiqc'] = inputBatchData;\r\n                    map['RegistrationSample'] = batchCreationSampleArray;\r\n                    map['testgrouptest'] = batchCreationTestArray;\r\n                    map['userInfo'] = userInfo;\r\n                    map['samplecombinationunique'] = samplecombinationuniqueArray;\r\n                    map['inputMaterialInventoryArrData'] = inputMaterialInventoryData;\r\n\r\n                    const inputParam = {\r\n                        inputData: map,\r\n                        classUrl: \"batchcreation\",\r\n                        methodUrl: \"Batchcreation\",\r\n                        displayName: \"IDS_BATCHIQCSAVE\",\r\n                        operation: \"createiqc\"\r\n                    }\r\n\r\n                    this.props.batchSaveIQCActions(inputParam.inputData, this.props.Login.masterData);\r\n\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDSPECIFICATIONS\" }));\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_USEDQTYISGREATERTHANAVAILABLEQTY\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_NOAVAILABLEQUANTITY\" }));\r\n        }\r\n    }\r\n\r\n    cancelBatch = (selectedmaster, cancelId) => {\r\n        if (selectedmaster.ntransactionstatus == transactionStatus.DRAFT || selectedmaster.ntransactionstatus == transactionStatus.COMPLETED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTBATCHINITIATEDRECORD\" }));\r\n        } else {\r\n            let inputData = {};\r\n            const masterData = this.props.Login.masterData;\r\n            const postParam = {\r\n                inputListName: \"Batchmaster\",\r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                primaryKeyValue: selectedmaster.nbatchmastercode,\r\n                fetchUrl: \"batchcreation/cancelBatch\",\r\n                isSingleGet: true,\r\n                //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n            let jsondata = this.props.Login.masterData.Samples.map(item => {\r\n                return { jsonuidata: item }\r\n            });\r\n\r\n            inputData[\"fromDate\"] = obj.fromDate;\r\n            inputData[\"toDate\"] = obj.toDate;\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue &&\r\n                this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType\r\n            //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n            inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType\r\n            inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n            // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n            inputData[\"samples\"] = jsondata;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\r\n            inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\r\n            inputData[\"napprovalconfigcode\"] = this.state.ApprovalVersionValue ?\r\n                this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n            inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ?\r\n                this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n            inputData[\"ntranscode\"] = transactionStatus.CANCELLED || transactionStatus.DRAFT;\r\n            // inputData[\"Batchhistory\"] ={\r\n            //     dtransactiondate : formatInputDate(new Date(),true),\r\n            //     scomments : this.state.selectedRecord && this.state.selectedRecord.scomments\r\n            //     };\r\n            //inputData[\"completeId\"] = completeId;\r\n            inputData[\"nneedtestinitiate\"] = this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode ||\r\n                transactionStatus.NA;\r\n            inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus\r\n                && this.props.Login.masterData.BCFilterStatus[3];\r\n            const inputParam = {\r\n                postParam,\r\n                inputData: inputData,\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batch\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n                operation: \"cancel\"\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, cancelId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: {\r\n                            inputParam,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                defaultFilterStatus: this.props.Login.masterData.BCFilterStatus\r\n                                    && this.props.Login.masterData.BCFilterStatus[2],\r\n                                realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus\r\n                                    && this.props.Login.masterData.BCFilterStatus[2],\r\n\r\n                            }\r\n                        },\r\n                        openModal: true, screenName: \"IDS_BATCHCREATION\",\r\n                        operation: inputParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.batchCancelAction(inputData, this.props.Login.masterData);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    batchCompleteActions = (selectedmaster, completeId) => {\r\n        if (selectedmaster.ntransactionstatus == transactionStatus.COMPLETED || selectedmaster.ntransactionstatus == transactionStatus.DRAFT) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTINITIATEDBATCH\" }));\r\n        } else {\r\n            let inputData = {};\r\n            const masterData = this.props.Login.masterData;\r\n            const postParam = {\r\n                inputListName: \"Batchmaster\",\r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                primaryKeyValue: selectedmaster.nbatchmastercode,\r\n                fetchUrl: \"batchcreation/completeBatchcreation\",\r\n                isSingleGet: true,\r\n                //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n            let jsondata = this.props.Login.masterData.Samples.map(item => {\r\n                return { jsonuidata: item }\r\n            });\r\n\r\n            inputData[\"fromDate\"] = obj.fromDate;\r\n            inputData[\"toDate\"] = obj.toDate;\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType\r\n            //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n            inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType\r\n            inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n            // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n            inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample => sample.ntransactiontestcode).join(\",\");\r\n            inputData[\"samples\"] = jsondata;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\r\n            inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\r\n            inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion &&\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\r\n            inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ?\r\n                this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n          //  inputData[\"ntranscode\"] = transactionStatus.COMPLETED || transactionStatus.DRAFT;\r\n          inputData[\"ntranscode\"] = transactionStatus.COMPLETED\r\n \r\n          inputData[\"Batchhistory\"] = {\r\n                dtransactiondate: formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] != undefined ?\r\n                    this.state.selectedRecord[\"dtransactiondate\"] : this.props.Login.currentTime, false),\r\n                scomments: this.state.selectedRecord && this.state.selectedRecord.scomments\r\n            };\r\n            inputData[\"completeId\"] = completeId;\r\n            inputData[\"nneedtestinitiate\"] = this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode ||\r\n                transactionStatus.NA;\r\n            inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus\r\n                && this.props.Login.masterData.BCFilterStatus[2];\r\n            const inputParam = {\r\n                postParam,\r\n                inputData: inputData,\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchcreation\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n                operation: \"complete\"\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: {\r\n                            inputParam,\r\n                            masterData: {\r\n                                ...masterData\r\n                                // defaultFilterStatus: this.props.Login.masterData.BCFilterStatus\r\n                                //     && this.props.Login.masterData.BCFilterStatus[2],\r\n                                // realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus\r\n                                //     && this.props.Login.masterData.BCFilterStatus[2],\r\n\r\n                            }\r\n                        },\r\n                        openModal: true, screenName: \"IDS_BATCHCREATION\",\r\n                        operation: inputParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.batchCompleteAction(inputData, this.props.Login.masterData);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // completeBatchCreation = () => {\r\n    //     const postParam = {\r\n    //         inputListName: \"Batchmaster\", selectedObject: \"SelectedBatchCreation\",\r\n    //         primaryKeyField: \"nreleasebatchcode\",\r\n    //         primaryKeyValue: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode,\r\n    //         fetchUrl: \"batchcreation/getBatchCreation\",\r\n    //         fecthInputObject: this.props.Login.userInfo,\r\n    //     }\r\n    //     const inputParam = {\r\n    //         classUrl: \"batchcreation\",\r\n    //         methodUrl: \"BatchCreation\", postParam,\r\n    //         inputData: {\r\n    //             ncontrolcode: this.props.Login.ncontrolCode,\r\n    //             \"userinfo\": this.props.Login.userInfo,\r\n    //             nreleasebatchcode: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode\r\n    //         },\r\n    //         operation: \"complete\", showConfirmAlert: false\r\n    //     }\r\n    //     //this.props.updateStore({ typeName: DEFAULT_RETURN, data: { showConfirmAlert: false } });  \r\n\r\n    //     const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n\r\n    //     if (esignNeeded) {\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: {\r\n    //                 loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n    //                 openModal: true, screenName: \"IDS_BATCHCREATION\",\r\n    //                 operation: this.props.Login.operation,\r\n    //             }\r\n    //         }\r\n    //         this.props.updateStore(updateInfo);\r\n    //     }\r\n    //     else {\r\n\r\n    //         this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n    //     }\r\n\r\n    // }\r\n\r\n    closeAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlert: false, loading: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let { userRoleControlRights, controlMap, selectedRecord, filterData,\r\n            addedComponentList,\r\n            filterStatusList, dataState, sahDataState, bahDataState,\r\n            chDataState, testCommentDataState, SampleType, RegistrationType,\r\n            RegistrationSubType, BCFilterStatus, REJobStatus, Testvalues,\r\n            ApprovalConfigVersion, skip, take,\r\n            testskip, testtake, selectedFilter, InstrumentCategory, selectedInstCategory,\r\n            ProductCategory, Instrument, selectedInstrument, selectedTestSynonym, nregsubtypecode,\r\n            selectedProductCategory, Product, selectedProduct, samples, addSelectAll,\r\n            deleteSelectAll, ApprovalVersionValue, FilterStatusValue, Section,\r\n            selectedSection, sampleGridItem, subsampleGridItem, testGridItem = [],\r\n            DynamicGridItem, samplegridmoreitem, DynamicGridMoreItem, MaterialCategory,\r\n            selectedMaterialType, Material, selectedMaterial, selectedMaterialCategory,\r\n            MaterialInventory, selectedMaterialInventory, Specification,\r\n            selectedSpec, addedSamplesList, testGridArnoItems, InstrumentID,\r\n            selectedInstrumentId, sinstrumentid, selectedProjectcode, ProjectCode } = this.state;\r\n        let isStateChanged = false;\r\n        let bool = false;\r\n        addedSamplesList = [];\r\n        // samples = [];\r\n\r\n        if (this.props.Login.masterData.RegistrationSubType &&\r\n            this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n            let dataState = {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n                //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \r\n            }\r\n            bool = true;\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            isStateChanged = true;\r\n            \r\n\r\n            SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\r\n            RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n            RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n            BCFilterStatus = constructOptionList(this.props.Login.masterData.BCFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", \"nsorter\", 'ascending', \"ntransactionstatus\", false);\r\n            REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\r\n            Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestname', 'ascending', 'ntestcode', false);\r\n            ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname',\r\n                'ascending', 'napprovalconfigversioncode', false);\r\n            InstrumentCategory = constructOptionList(this.props.Login.masterData.instrumentCategory || [], 'ninstrumentcatcode', 'sinstrumentcatname',\r\n                'ascending', 'ninstrumentcatcode', false);\r\n            Instrument = constructOptionList(this.props.Login.masterData.instrument || [], 'ninstrumentnamecode', 'sinstrumentname',\r\n                'ascending', 'ninstrumentcode', false);\r\n            ProductCategory = constructOptionList(this.props.Login.masterData.productcategory || [], 'nproductcatcode', 'sproductcatname',\r\n                'ascending', 'nproductcatcode', false);\r\n            Product = constructOptionList(this.props.Login.masterData.product || [], 'nproductcode', 'sproductname',\r\n                'ascending', 'nproductcode', false);\r\n            Section = constructOptionList(this.props.Login.masterData.Section || [], 'nsectioncode', 'ssectionname',\r\n                'ascending', 'nsectioncode', false);\r\n            MaterialCategory = constructOptionList(this.props.Login.masterData.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname',\r\n                'ascending', 'nmaterialcatcode', false);\r\n            Material = constructOptionList(this.props.Login.masterData.Material || [], 'nmaterialcode', 'smaterialname',\r\n                'ascending', 'nmaterialcode', false);\r\n            MaterialInventory = constructOptionList(this.props.Login.masterData.MaterialInventory || [], 'nmaterialinventtranscode', 'sinventoryid',\r\n                'ascending', 'nmaterialinventtranscode', false);\r\n            InstrumentID = constructOptionList(this.props.Login.masterData.instrumentID || [], 'ninstrumentcode', 'sinstrumentid',\r\n                'ascending', 'ninstrumentcode', false);\r\n            ProjectCode = constructOptionList(this.props.Login.masterData.ProjectCode || [], 'nprojectmastercode', 'sprojectcode',\r\n                'ascending', 'nprojectmastercode', false);\r\n\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            let selectFilterStatus = {\r\n                ntransactionstatus: transactionStatus.PARTIAL,\r\n                sfilterstatus: this.props.intl.formatMessage({ id: \"IDS_PARTIAL\" }),\r\n                scolorhexcode: \"#800000\"\r\n            }\r\n            const selectedFilters = this.props.Login.masterData.BCFilterStatus || [];\r\n\r\n            const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\r\n\r\n            const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL)\r\n            if (selectedFiltersNew.length > 0 && index === -1) {\r\n                selectedFiltersNew.push(selectFilterStatus)\r\n            }\r\n\r\n            selectedFilter = selectedFiltersNew;\r\n            SampleType = SampleType.get(\"OptionList\")\r\n            RegistrationType = RegistrationType.get(\"OptionList\")\r\n            RegistrationSubType = RegistrationSubType.get(\"OptionList\")\r\n            BCFilterStatus = BCFilterStatus.get(\"OptionList\")\r\n            REJobStatus = REJobStatus.get(\"OptionList\")\r\n            Testvalues = Testvalues.get(\"OptionList\")\r\n            ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\")\r\n            InstrumentCategory = InstrumentCategory.get(\"OptionList\")\r\n            Instrument = Instrument.get(\"OptionList\")\r\n            ProductCategory = ProductCategory.get(\"OptionList\")\r\n            Product = Product.get(\"OptionList\")\r\n            Section = Section.get(\"OptionList\")\r\n            MaterialCategory = MaterialCategory.get(\"OptionList\")\r\n            Material = Material.get(\"OptionList\")\r\n            MaterialInventory = MaterialInventory.get(\"OptionList\")\r\n            InstrumentID = InstrumentID.get(\"OptionList\")\r\n            ProjectCode = ProjectCode.get(\"OptionList\")\r\n            //selectedInstCategory=this.props.Login.masterData.selectedInstrumentCategory || [];\r\n\r\n            samples = this.props.Login.masterData.samples;\r\n            \r\n          \r\n            addSelectAll = false;\r\n            deleteSelectAll = true;\r\n            nregsubtypecode = this.props.Login.masterData.defaultRegistrationSubType ?\r\n                {\r\n                    label: this.props.Login.masterData.defaultRegistrationSubType.sregsubtypename,\r\n                    value: this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode,\r\n                    item: this.props.Login.masterData.defaultRegistrationSubType\r\n                } : \"\"\r\n\r\n            if (this.props.Login.masterData.selectedTestSynonym !== previousProps.Login.masterData.selectedTestSynonym) {\r\n                selectedTestSynonym = this.props.Login.masterData.selectedTestSynonym ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedTestSynonym.stestname,\r\n                        value: this.props.Login.masterData.selectedTestSynonym.ntestcode,\r\n                        item: this.props.Login.masterData.selectedTestSynonym\r\n                    } : \"\"\r\n                let stestname = selectedTestSynonym.item;\r\n                //selectedRecord = {...this.state.selectedRecord,stestname,...selectedRecord};\r\n                selectedRecord = { ...selectedRecord, stestname };\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedProductcategory !== previousProps.Login.masterData.selectedProductcategory) {\r\n                selectedProductCategory = this.props.Login.masterData.selectedProductcategory ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedProductcategory.sproductcatname,\r\n                        value: this.props.Login.masterData.selectedProductcategory.nproductcatcode,\r\n                        item: this.props.Login.masterData.selectedProductcategory\r\n                    } : \"\"\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedProduct !== previousProps.Login.masterData.selectedProduct) {\r\n                selectedProduct = this.props.Login.masterData.selectedProduct ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedProduct.sproductname,\r\n                        value: this.props.Login.masterData.selectedProduct.nproductcode,\r\n                        item: this.props.Login.masterData.selectedProduct\r\n                    } : \"\"\r\n                let sproductname = selectedProduct.item;\r\n                selectedRecord = { ...this.state.selectedRecord, sproductname, ...selectedRecord };\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedInstrumentCategory !== previousProps.Login.masterData.selectedInstrumentCategory) {\r\n                selectedInstCategory = this.props.Login.masterData.selectedInstrumentCategory ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedInstrumentCategory.sinstrumentcatname,\r\n                        value: this.props.Login.masterData.selectedInstrumentCategory.ninstrumentcatcode,\r\n                        item: this.props.Login.masterData.selectedInstrumentCategory\r\n                    } : \"\"\r\n                let sinstrumentcatname = selectedInstCategory.item;\r\n                selectedRecord = { ...selectedRecord, sinstrumentcatname };\r\n                // selectedRecord = {...this.state.selectedRecord,sinstrumentcatname,...selectedRecord};\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedInstrument !== previousProps.Login.masterData.selectedInstrument) {\r\n                selectedInstrument = this.props.Login.masterData.selectedInstrument ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedInstrument.sinstrumentname,\r\n                        value: this.props.Login.masterData.selectedInstrument.ninstrumentcode,\r\n                        item: this.props.Login.masterData.selectedInstrument\r\n                    } : \"\"\r\n                let sinstrumentname = selectedInstrument.item;\r\n                //selectedRecord = { ...this.state.selectedRecord, sinstrumentname, ...selectedRecord };\r\n                selectedRecord = {...selectedRecord,sinstrumentname };\r\n                isStateChanged = true;\r\n\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedInstrumentId !== previousProps.Login.masterData.selectedInstrumentId) {\r\n                selectedInstrumentId = this.props.Login.masterData.selectedInstrumentId ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedInstrumentId.sinstrumentid,\r\n                        value: this.props.Login.masterData.selectedInstrumentId.ninstrumentcode,\r\n                        item: this.props.Login.masterData.selectedInstrumentId\r\n                    } : undefined\r\n                let sinstrumentid = selectedInstrumentId && selectedInstrumentId.item;\r\n                //selectedRecord = { ...this.state.selectedRecord, sinstrumentid, ...selectedRecord };\r\n                selectedRecord = {...selectedRecord,sinstrumentid };\r\n                isStateChanged = true;\r\n\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.ProjectCode !== previousProps.Login.masterData.ProjectCode) {\r\n                selectedProjectcode = this.props.Login.masterData.selectedProjectedCode ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedProjectedCode.sprojectcode,\r\n                        value: this.props.Login.masterData.selectedProjectedCode.nprojectmastercode,\r\n                        item: this.props.Login.masterData.selectedProjectedCode\r\n                    } : undefined\r\n                let sprojectcode = selectedProjectcode && selectedProjectcode.item;\r\n                selectedRecord = { ...this.state.selectedRecord, sprojectcode, ...selectedRecord };\r\n                isStateChanged = true;\r\n\r\n\r\n            }\r\n\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({ userRoleControlRights, controlMap });\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.selectedComponentList !== previousProps.Login.selectedComponentList) {\r\n                addedComponentList = this.props.Login.selectedComponentList;\r\n                isStateChanged = true;\r\n                // this.setState({ addedComponentList });\r\n            }\r\n\r\n\r\n            if (this.props.Login.masterData.defaultApprovalConfigVersion !== previousProps.Login.masterData.defaultApprovalConfigVersion) {\r\n                ApprovalVersionValue = this.props.Login.masterData.defaultApprovalConfigVersion ?\r\n                    {\r\n                        label: this.props.Login.masterData.defaultApprovalConfigVersion.sversionname,\r\n                        value: this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode,\r\n                        item: this.props.Login.masterData.defaultApprovalConfigVersion\r\n                    } : \"\"\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.defaultFilterStatus !== previousProps.Login.masterData.defaultFilterStatus) {\r\n                FilterStatusValue = this.props.Login.masterData.defaultFilterStatus ?\r\n                    {\r\n                        label: this.props.Login.masterData.defaultFilterStatus.sfilterstatus,\r\n                        value: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                        item: this.props.Login.masterData.defaultFilterStatus\r\n                    } : \"\"\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedSection !== previousProps.Login.masterData.selectedSection) {\r\n                selectedSection = this.props.Login.masterData.selectedSection ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedSection.ssectionname,\r\n                        value: this.props.Login.masterData.selectedSection.nsectioncode,\r\n                        item: this.props.Login.masterData.selectedSection\r\n                    } : \"\"\r\n                let ssectionname = selectedSection.item;\r\n                selectedRecord = { ...this.state.selectedRecord, ssectionname, ...selectedRecord };\r\n                isStateChanged = true;\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedMaterialType !== previousProps.Login.masterData.selectedMaterialType) {\r\n                selectedMaterialType = this.props.Login.masterData.selectedMaterialType ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterialType.smaterialtypename,\r\n                        value: this.props.Login.masterData.selectedMaterialType.nmaterialtypecode,\r\n                        item: this.props.Login.masterData.selectedMaterialType\r\n                    } : \"\"\r\n                selectedRecord[\"smaterialtypename\"] = this.props.Login.masterData.selectedMaterialType.smaterialtypename;\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedMaterialCategory !== previousProps.Login.masterData.selectedMaterialCategory) {\r\n                selectedMaterialCategory = this.props.Login.masterData.selectedMaterialCategory ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterialCategory.smaterialcatname,\r\n                        value: this.props.Login.masterData.selectedMaterialCategory.nmaterialcatcode,\r\n                        item: this.props.Login.masterData.selectedMaterialCategory\r\n                    } : \"\"\r\n                selectedRecord[\"smaterialcatname\"] = this.props.Login.masterData.selectedMaterialCategory.smaterialcatname;\r\n                isStateChanged = true;\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedMaterial !== previousProps.Login.masterData.selectedMaterial) {\r\n                selectedMaterial = this.props.Login.masterData.selectedMaterial ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterial.smaterialname,\r\n                        value: this.props.Login.masterData.selectedMaterial.nmaterialcode,\r\n                        item: this.props.Login.masterData.selectedMaterial\r\n                    } : \"\"\r\n                selectedRecord[\"smaterialname\"] = this.props.Login.masterData.selectedMaterial.smaterialname;\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedMaterialInventory !== previousProps.Login.masterData.selectedMaterialInventory) {\r\n                selectedMaterialInventory = this.props.Login.masterData.selectedMaterialInventory ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterialInventory.sinventoryid,\r\n                        value: this.props.Login.masterData.selectedMaterialInventory.nmaterialinventtranscode,\r\n                        item: this.props.Login.masterData.selectedMaterialInventory\r\n                    } : \"\"\r\n                selectedRecord[\"sinventoryid\"] = this.props.Login.masterData.selectedMaterialInventory && this.props.Login.masterData.selectedMaterialInventory.sinventoryid != null ?\r\n                    this.props.Login.masterData.selectedMaterialInventory.sinventoryid : \"\";\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedInventoryUnit !== previousProps.Login.masterData.selectedInventoryUnit) {\r\n                //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\r\n                selectedRecord[\"savailablequatity\"] = this.props.Login.masterData.selectedInventoryUnit &&\r\n                    this.props.Login.masterData.selectedInventoryUnit.savailablequatity != null ? this.props.Login.masterData.selectedInventoryUnit.savailablequatity : \"\";\r\n                selectedRecord[\"susedquantity\"] = \"\";\r\n                selectedRecord[\"sremarks\"] = \"\";\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.isselectedrecordempty) {\r\n                selectedRecord = {};\r\n                isStateChanged = true;\r\n            }\r\n\r\n\r\n            if (this.props.Login.masterData.Specification !== previousProps.Login.masterData.Specification) {\r\n                //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\r\n                Specification = this.props.Login.masterData.Specification &&\r\n                    this.props.Login.masterData.Specification != null ? this.props.Login.masterData.Specification : \"\";\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.selectedSpec !== previousProps.Login.selectedSpec) {\r\n                selectedRecord[\"selectedSpec\"] = this.props.Login.selectedSpec &&\r\n                    this.props.Login.selectedSpec != null ? this.props.Login.selectedSpec : \"\";\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n                selectedRecord = this.props.Login.selectedRecord\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n                const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.\r\n                    jsondata.value)\r\n                testGridArnoItems = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\r\n                testGridItem[0] = dynamicColumn.testListFields.releasetestfields[0] ? dynamicColumn.testListFields.releasetestfields[0] : [];\r\n                sampleGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n                subsampleGridItem = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n                samplegridmoreitem = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n                DynamicGridMoreItem = [...samplegridmoreitem]\r\n                DynamicGridItem = [...sampleGridItem, ...subsampleGridItem, ...testGridArnoItems.slice(1), ...testGridItem]\r\n                isStateChanged = true;\r\n            }\r\n        }\r\n    //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\r\n\r\n    if (this.props.Login.dataState !== previousProps.Login.dataState) {\r\n        if (this.props.Login.dataState) {\r\n          delete (this.props.Login.dataState.filter)\r\n          delete (this.props.Login.dataState.sort)\r\n          this.setState({ dataState: this.props.Login.dataState });\r\n        }\r\n      }\r\n    //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\r\n\r\n    if (this.props.Login.addedSamplesListSortedList !== previousProps.Login.addedSamplesListSortedList) {\r\n        this.setState({ addedSamplesListSortedList: this.props.Login.addedSamplesListSortedList,isInitialRender:true });\r\n      }\r\n        // if(this.props.Login.selectedRecord !== previousProps.Login.selectedRecord){\r\n        //     // let selectedRecord = {};\r\n        //     let MaterialCategory=constructOptionList(this.props.Login.selectedRecord.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname',\r\n        //     'ascending', 'nmaterialcatcode', false);\r\n        //     let Material =constructOptionList(this.props.Login.selectedRecord.Material || [], 'nmaterialcode', 'smaterialname',\r\n        //     'ascending', 'nmaterialcode', false);\r\n        //     let MaterialInventory=constructOptionList(this.props.Login.selectedRecord.MaterialInventory || [], 'nmaterialinventorycode', 'sinventoryid',\r\n        //     'ascending', 'nmaterialinventorycode', false);\r\n        //      MaterialCategory = MaterialCategory.get(\"OptionList\")\r\n        //      Material = Material.get(\"OptionList\")\r\n        //      MaterialInventory = MaterialInventory.get(\"OptionList\")\r\n\r\n        //      selectedRecord[\"MaterialCategory\"]=MaterialCategory\r\n        //      selectedRecord[\"Material\"]=Material\r\n        //      selectedRecord[\"MaterialInventory\"]=MaterialInventory\r\n\r\n        //  if(this.props.Login.selectedRecord.selectedMaterialType !== previousProps.Login.selectedRecord.selectedMaterialType) {\r\n        //         let selectedMaterialType = this.props.Login.selectedRecord.selectedMaterialType ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterialType.nmaterialtypecode || this.props.Login.selectedRecord.selectedMaterialType.item.value,\r\n        //             item:  this.props.Login.selectedRecord.selectedMaterialType.item ? this.props.Login.selectedRecord.selectedMaterialType.item : this.props.Login.selectedRecord.selectedMaterialType\r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterialType\"]=selectedMaterialType;\r\n        //         selectedRecord[\"smaterialtypename\"]=this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename;\r\n        //         isStateChanged = true;\r\n        //     }\r\n\r\n        //  if (this.props.Login.selectedRecord.selectedMaterialCategory !== previousProps.Login.selectedRecord.selectedMaterialCategory) {\r\n        //         let selectedMaterialCategory = this.props.Login.selectedRecord.selectedMaterialCategory ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname ,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterialCategory.nmaterialcatcode || this.props.Login.selectedRecord.selectedMaterialCategory.item.value ,\r\n        //             item:  this.props.Login.selectedRecord.selectedMaterialCategory.item  ? this.props.Login.selectedRecord.selectedMaterialCategory.item  : this.props.Login.selectedRecord.selectedMaterialCategory \r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterialCategory\"]=selectedMaterialCategory;\r\n        //         selectedRecord[\"smaterialcatname\"]=this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname \r\n        //         isStateChanged = true;\r\n        //     }\r\n\r\n        //     if (this.props.Login.selectedRecord.selectedMaterial !== previousProps.Login.selectedRecord.selectedMaterial) {\r\n        //          let selectedMaterial = this.props.Login.selectedRecord.selectedMaterial ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterial.smaterialname,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterial.nmaterialcode,\r\n        //             item: this.props.Login.selectedRecord.selectedMaterial\r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterial\"]= selectedMaterial;\r\n        //         selectedRecord[\"smaterialname\"]=this.props.Login.selectedRecord.selectedMaterial.smaterialname;\r\n        //         isStateChanged = true;\r\n        //     }\r\n\r\n        //     if (this.props.Login.selectedRecord.selectedMaterialInventory !== previousProps.Login.selectedRecord.selectedMaterialInventory) {\r\n        //         let selectedMaterialInventory = this.props.Login.selectedRecord.selectedMaterialInventory ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterialInventory.nmaterialinventorycode,\r\n        //             item: this.props.Login.selectedRecord.selectedMaterialInventory\r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterialInventory\"]= selectedMaterialInventory;\r\n        //         selectedRecord[\"sinventoryid\"]=this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid;\r\n        //         isStateChanged = true;\r\n        //     }\r\n\r\n\t\t    //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\r\n        let updateStateObject = {};\r\n      if (this.props.Login.addedSamplesList !== previousProps.Login.addedSamplesList) {\r\n\r\n        addSelectAll = false;\r\n        deleteSelectAll = true;\r\n\r\n        this.setState({\r\n            addedSamplesList: this.props.Login.addedSamplesList,\r\n          addSelectAll, deleteSelectAll\r\n        });\r\n      }\r\n\r\n\t\t    //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\r\n        if (this.props.Login.addedSamplesList !== previousProps.Login.addedSamplesList) {\r\n\r\n            addSelectAll = false;\r\n            deleteSelectAll = true;\r\n    \r\n            this.setState({\r\n                addedSamplesList: this.props.Login.addedSamplesList,\r\n              addSelectAll, deleteSelectAll\r\n            });\r\n          }\r\n\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            isStateChanged = true;\r\n           selectedRecord = this.props.Login.selectedRecord;\r\n            //this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n     \r\n\r\n\r\n        if (isStateChanged) {\r\n            this.setState({\r\n                userRoleControlRights, controlMap, selectedRecord,\r\n                filterData, addedComponentList,\r\n                filterStatusList, dataState, sahDataState, bahDataState, chDataState,\r\n                testCommentDataState, SampleType, RegistrationType, RegistrationSubType,\r\n                BCFilterStatus, REJobStatus, Testvalues, ApprovalConfigVersion, skip, take,\r\n                testskip, testtake, selectedFilter, selectedInstCategory, InstrumentCategory,\r\n                Instrument, selectedInstrument, selectedTestSynonym, nregsubtypecode,\r\n                ProductCategory, selectedProductCategory, Product, selectedProduct, samples,\r\n                addSelectAll, deleteSelectAll, ApprovalVersionValue, FilterStatusValue, Section,\r\n                selectedSection, sampleGridItem, subsampleGridItem, testGridItem, DynamicGridItem,\r\n                samplegridmoreitem, DynamicGridMoreItem, MaterialCategory, selectedMaterialType,\r\n                Material, selectedMaterial, selectedMaterialCategory, MaterialInventory,\r\n                selectedMaterialInventory, Specification, selectedSpec, addedSamplesList,\r\n                testGridArnoItems, InstrumentID, selectedInstrumentId, sinstrumentid,\r\n                selectedProjectcode, ProjectCode\r\n            });\r\n        }\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let openSpecModal = this.props.Login.openSpecModal;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"cancel\") {\r\n                //    this.props.Login.operation === \"complete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n            selectedRecord[\"esigncomments\"] = \"\";\r\n            selectedRecord[\"esignpassword\"] = \"\";\r\n        } else if (this.props.Login.openSpecModal) {\r\n            loadEsign = false;\r\n            openSpecModal = false\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, openSpecModal, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let { selectedInstCategory, selectedInstrumentId, InstrumentCategory,\r\n            selectedInstrument, Instrument, InstrumentID } = this.state;\r\n        let inputData = {};\r\n        if (comboData == null) {\r\n            selectedInstCategory = undefined;\r\n            selectedInstrumentId = undefined;\r\n            Instrument = undefined;\r\n            InstrumentID = undefined;\r\n            selectedInstrument = undefined;\r\n            selectedRecord['sinstrumentcatname'] = undefined;\r\n            selectedRecord['sinstrumentname'] = undefined;\r\n            selectedRecord['sinstrumentid'] = undefined;\r\n\r\n            this.setState({\r\n                selectedInstCategory, selectedInstrumentId, selectedInstrument,\r\n                selectedRecord, Instrument, InstrumentID\r\n            });\r\n        } else {\r\n            selectedRecord[fieldName] = comboData.item;\r\n            if (fieldName === \"sproductname\") {\r\n                selectedRecord[\"nproductcode\"] = comboData.value;\r\n                selectedRecord[\"userInfo\"] = this.props.Login.userInfo;\r\n                selectedRecord[\"stestname\"] = this.state.selectedRecord['stestname'];\r\n                selectedRecord[\"ntestcode\"] = this.state.selectedRecord['stestname']['ntestcode'];\r\n                selectedRecord[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                    this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n                //selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n                selectedRecord['naddcontrolCode'] = this.props.Login.naddcontrolCode;\r\n                selectedRecord[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                selectedRecord[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                //this.setState({ selectedProduct:comboData });\r\n                this.props.getProductBasedInstrument(selectedRecord, this.props.Login.masterData);\r\n            } else if (fieldName === \"ssectionname\") {\r\n                inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                inputData['naddcontrolCode'] = this.props.Login.naddcontrolCode;\r\n                inputData['section'] = selectedRecord.ssectionname;\r\n                inputData['userInfo'] = this.props.Login.userInfo;\r\n                inputData['nneedmyjob'] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.nneedmyjob : false\r\n                inputData['nneedjoballocation'] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.nneedjoballocation : false\r\n                inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                    this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n                this.props.getTestInstrumentComboService(inputData, this.props.Login.masterData);\r\n                // this.setState({ selectedSection:comboData });\r\n\r\n            } else if (fieldName === \"stestname\") {\r\n                if (this.props.Login.operation === \"update\") {\r\n                    selectedRecord[\"nprevioustestcode\"] = this.state.selectedTestSynonym.value\r\n                }\r\n                selectedRecord[\"ntestcode\"] = comboData.value;\r\n                selectedRecord['userInfo'] = this.props.Login.userInfo;\r\n                selectedRecord[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                    this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n                //selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n                selectedRecord['naddcontrolCode'] = this.props.Login.naddcontrolCode;\r\n                selectedRecord[\"nprojectmastercode\"] = comboData.item.nprojectmastercode;\r\n                selectedRecord['sinstrumentcatname'] = undefined;\r\n                selectedRecord[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                selectedRecord[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                this.props.getTestInstrumentCategory(selectedRecord, this.props.Login.masterData);\r\n            } else if (fieldName === \"sinstrumentcatname\") {\r\n                selectedRecord[\"ninstrumentcatcode\"] = comboData.value;\r\n                selectedRecord[\"ncalibrationreq\"] = comboData.item.ncalibrationreq;\r\n                selectedRecord[\"ntestcode\"] = this.state.selectedTestSynonym.value;\r\n                selectedRecord['userInfo'] = this.props.Login.userInfo;\r\n                //selectedRecord['sinstrumentid']=undefined;\r\n                selectedRecord['sinstrumentname'] = undefined;\r\n                this.props.getInstrumentForInstCategory(selectedRecord, this.props.Login.masterData);\r\n                //this.props.getInstrumentID(selectedRecord,this.props.Login.masterData);\r\n            } else if (fieldName === \"smaterialcatname\") {\r\n                selectedRecord[\"nmaterialcatcode\"] = comboData.value;\r\n                selectedRecord[\"needsectionwise\"] = comboData.item.needSectionwise;\r\n                selectedRecord['userInfo'] = this.props.Login.userInfo;\r\n                selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n                this.setState({ selectedMaterialCategory: comboData });\r\n                this.props.getMaterialBasedOnMaterialCategory(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\r\n            } else if (fieldName === \"smaterialname\") {\r\n                selectedRecord[\"nmaterialcode\"] = comboData.value;\r\n                selectedRecord['userInfo'] = this.props.Login.userInfo;\r\n                selectedRecord['needsection'] = comboData.item.needsection;\r\n                selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n                this.setState({ selectedMaterial: comboData });\r\n                this.props.getMaterialInventoryBasedOnMaterial(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\r\n\r\n            } else if (fieldName === \"sinventoryid\") {\r\n                selectedRecord[\"nmaterialcode\"] = this.state.selectedMaterial.value;\r\n                selectedRecord[\"materialInvCode\"] = comboData.item.nmaterialinventorycode;\r\n                selectedRecord['userInfo'] = this.props.Login.userInfo;\r\n                selectedRecord['needsection'] = this.props.Login.masterData.selectedMaterial.needsection;\r\n                this.setState({ selectedMaterialInventory: comboData });\r\n                // if(this.state.selectedMaterial.item.needsection == transactionStatus.NO){\r\n                //     selectedRecord['nsectioncode']=transactionStatus.NA;\r\n                // }else{\r\n                selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n                //}\r\n                this.props.getMaterialAvailQtyBasedOnInv(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\r\n            } else if (fieldName === \"sinstrumentname\") {\r\n                selectedRecord[\"ninstrumentnamecode\"] = comboData.value;\r\n                selectedRecord[\"sinstrumentname\"] = comboData.label;\r\n                selectedRecord['userInfo'] = this.props.Login.userInfo;\r\n                //selectedRecord['sinstrumentid']=undefined;\r\n                selectedRecord['selectedInstrument'] = comboData.item;\r\n                selectedRecord['ninstrumentcatcode'] = comboData.item.ninstrumentcatcode;\r\n                selectedRecord['ninstrumentcode'] = comboData.item.ninstrumentcode;\r\n                this.props.getInstrumentID(selectedRecord, this.props.Login.masterData);\r\n            } else if (fieldName === \"sprojectcode\") {\r\n                this.setState({ selectedProjectcode: comboData });\r\n            } else {\r\n                this.setState({ selectedInstrumentId: comboData });\r\n            }\r\n            // else{\r\n            //    // let nInstrumentCategory=\"\",nInstrument=\"\",nInstrumentID=\"\";\r\n            //     this.setState=({InstrumentCategory:{},Instrument:{},\r\n            //         InstrumentID:})\r\n            //   }\r\n        }\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onMultiColumnValue = (value, key, flag, label, keys) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (value.length > 0) {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = value[0][objarray];\r\n            });\r\n            if (flag) {\r\n                keys.map((objkey, index) => {\r\n                    return selectedRecord[objkey] = { \"label\": value[0][label[index]], \"value\": value[0][objkey] }\r\n                })\r\n            }\r\n        } else {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = \"\";\r\n            });\r\n            keys.map((objkey, index) => {\r\n                return selectedRecord[objkey] = \"\"\r\n            })\r\n        }\r\n        this.props.getBatchManufacturerComboChange(selectedRecord, this.props.Login.userInfo);\r\n    }\r\n\r\n    onMultiColumnMAHChange = (value, key) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (value.length > 0) {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = value[0][objarray];\r\n            });\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    clearComponentInput = () => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[\"nproductcode\"] = undefined;\r\n        selectedRecord[\"ncomponentcode\"] = undefined;\r\n        selectedRecord[\"smanuflotno\"] = \"\";\r\n        selectedRecord[\"dateprompt\"] = transactionStatus.NO;\r\n        selectedRecord[\"transdatefrom\"] = this.props.Login.componentDefaultSearchDate;\r\n        selectedRecord[\"transdateto\"] = this.props.Login.componentDefaultSearchDate;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    openClosePortal = () => {\r\n        if (this.props.Login.masterData.SelectedBatchmaster.ninstrumentcode !== transactionStatus.NA) {\r\n            if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED) {\r\n                if (this.props.Login.openELNSheet === undefined || !this.props.Login.openELNSheet) {\r\n                    if (this.props.Login.elnUserInfo !== null || this.props.Login.elnUserInfo != undefined) {\r\n                        this.props.Login.masterData.enlLink = \"\";\r\n                        let integrationSettings = this.props.Login.integrationSettings;\r\n                        let inputParam = {\r\n                            userInfo: this.props.Login.userInfo,\r\n                            elnUserInfo: this.props.Login.elnUserInfo,\r\n                            elnSite: this.props.Login.elnSite,\r\n                            nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.sbatcharno,\r\n                            ntestcode: this.props.Login.masterData.ntestcode\r\n                        }\r\n                        let link = \"\";\r\n\r\n                        let detail = CF_encryptionData(\"-1//Sheet\").EncryptData;\r\n\r\n                        const settedId = inputParam.nbatchmastercode;\r\n                        //console.log(settedId);\r\n                        let encryptedbatchid = CF_encryptionData(settedId).EncryptData;\r\n                        const userObject = {\r\n                            usercode: inputParam.elnUserInfo.nelncode,\r\n                            username: inputParam.elnUserInfo.selnuserid,\r\n                            userfullname: inputParam.elnUserInfo.selnusername,\r\n                            lsusergroup: {\r\n                                usergroupcode: inputParam.elnUserInfo.nelnusergroupcode,\r\n                                usergroupname: inputParam.elnUserInfo.nelnusergroupcode,\r\n                            },\r\n                            lssitemaster: {\r\n                                sitecode: inputParam.elnSite.nelnsitecode\r\n                            }\r\n                        }\r\n                        let encrypteduser = CF_encryptionData(userObject).EncryptData;\r\n                        const baseURL = integrationSettings[1].slinkname\r\n\r\n                        link = baseURL + \"/vieworder\" + '#{\"d\":\"' + settedId + '\",\"user\":\"' + encrypteduser + '\",\"batchid\":\"' + encryptedbatchid + '\"}';\r\n                        // this.props.getELNTestValidation(test,this.props.Login.integrationSettings); \r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                openELNSheet: true,\r\n                                masterData: {\r\n                                    ...this.props.Login.masterData,\r\n                                    enlLink: link,\r\n                                    baseURL: baseURL\r\n                                }\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_ELNSHEETNOTFOUND\" }));\r\n                    }\r\n                } else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            openELNSheet: false,\r\n                            masterData: {\r\n                                ...this.props.Login.masterData,\r\n                                enlLink: \"\"\r\n                            }\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTINITIATEDBATCH\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTBATCHWITHINSTRUMENT\" }));\r\n        }\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        let selectedRecord = {};\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onDropImage = (attachedFiles, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = attachedFiles;\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\r\n\r\n    saveSample = (addedSamplesListSortedList) => {\r\n        const compList = addedSamplesListSortedList.map(x => {\r\n            delete (x.selected);\r\n            //return {...x, 'sregistereddate':formatInputDate(x.sregistereddate, false)}\r\n            return x;\r\n          }) || [];\r\n\r\n        if (compList === undefined) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLESTOSUBMIT\" }));\r\n        } else if (compList.length > 0) {\r\n\r\n\r\n            let sampleArray = [];\r\n            compList.map(item =>\r\n                sampleArray.push({\r\n                    npreregno: item.npreregno,\r\n                    ntransactionsamplecode: item.ntransactionsamplecode,\r\n                    ntransactiontestcode: item.ntransactiontestcode,\r\n                    nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster ?\r\n                        this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode : transactionStatus.NA,\r\n                    sarno: item.jsonuidata.samplelist.sarno,\r\n                    ssamplearno: item.jsonuidata.samplelist.ssamplearno,\r\n                    stestname: item.jsonuidata.samplelist.stestname,\r\n                    jsonuidata: {\r\n                        samplelist: item.jsonuidata.samplelist,\r\n                    },\r\n                    jsondata: {\r\n                        samplelist: item.jsondata.samplelist,\r\n                    }\r\n                }\r\n                )\r\n            )\r\n\r\n            let nbatchmastercode = this.props.Login.masterData.SelectedBatchmaster &&\r\n                this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode;\r\n            // batchSample = {\r\n            //     npreregno: addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\r\n            //     ntransactionsamplecode : addedsamplelist.map(sample=>sample.ntransactionsamplecode).join(\",\"),\r\n            //     ntransactiontestcode : addedsamplelist.map(sample=>sample.ntransactiontestcode).join(\",\"),\r\n            //     npreregno : addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\r\n            //     nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster &&\r\n            //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\r\n            //     jsonuidata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}',\r\n            //     jsondata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}'\r\n            // }\r\n            //jsondata : \r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    batchSample: nbatchmastercode,\r\n                    sampleArray,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    nregtypecode: this.props.Login.masterData.defaultRegistrationType ?\r\n                        this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\r\n                    nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode\r\n                        : transactionStatus.NA,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA\r\n                }\r\n            }\r\n            this.props.createSampleAction(inputParam.inputData);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELCETONESAMPLE\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        if (this.props.Login.operation === \"createSample\") {\r\n            this.saveSample(this.state.addedSamplesListSortedList)\r\n        } else if (this.props.Login.operation === \"initiate\") {\r\n            this.testStartActions(this.props.Login.masterData.SelectedBatchmaster, this.props.Login.testStartId)\r\n        } else if (this.props.Login.operation === \"complete\") {\r\n            this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster, this.props.Login.completeId)\r\n        } else if (this.props.Login.operation === \"createiqcsample\") {\r\n            this.batchSaveIQCActions(this.props.Login.masterData.SelectedBatchmaster)\r\n        } else {\r\n            let inputData = {};\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n            if (this.props.Login.operation === \"create\") {\r\n                inputData[\"fromDate\"] = obj.fromDate;\r\n                inputData[\"toDate\"] = obj.toDate;\r\n            }\r\n\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"nneedcombodataforFilter\"] = \"true\"\r\n            inputData[\"needFilterSubmit\"] = \"false\"\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            inputData[\"nprevioustestcode\"] = this.state.selectedRecord && this.state.selectedRecord.nprevioustestcode != undefined ? this.state.selectedRecord.nprevioustestcode : this.state.selectedTestSynonym.value;\r\n            inputData[\"ntestcode\"] = this.state.selectedTestSynonym ? this.state.selectedTestSynonym.value : transactionStatus.NA;\r\n            inputData[\"nsectioncode\"] = this.state.selectedSection ? this.state.selectedSection.item.nsectioncode : transactionStatus.NA;\r\n            //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType.nsampletypecode;\r\n            //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType.nregtypecode;\r\n            //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.value :transactionStatus.NA;\r\n            inputData[\"ninstrumentcatcode\"] = this.state.selectedInstCategory ? this.state.selectedInstCategory.value : transactionStatus.NA;\r\n            inputData[\"ninstrumentcode\"] = this.state.selectedInstrument ? this.state.selectedInstrument.value : transactionStatus.NA;\r\n            inputData[\"nproductcode\"] = this.state.selectedProduct ? this.state.selectedProduct.value : transactionStatus.NA;\r\n            inputData[\"ntransactionstatus\"] = transactionStatus.DRAFT;\r\n            inputData[\"sbatcharno\"] = '-';\r\n            // inputData[\"defaultSampleType\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n            // this.props.Login.masterData.realSampleTypeValue : transactionStatus.NA;\r\n            // inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? \r\n            // this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\r\n            // inputData[\"defaultRegistrationSubType\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue ? \r\n            // this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA;\r\n            inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType\r\n            inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType\r\n            inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n           // inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n          inputData[\"ntranscode\"] = transactionStatus.DRAFT;\r\n\r\n           \r\n           inputData[\"sinstrumentid\"] = this.state.selectedInstrumentId ? this.state.selectedInstrumentId.label:\"NA\";\r\n            // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? \r\n            // this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n            // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n            // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n            inputData[\"napprovalversioncode\"] = this.props.Login.masterData.realApproveConfigVersion &&\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\r\n            inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion &&\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : transactionStatus.NA;\r\n            inputData[\"nprojectmastercode\"] = this.state.selectedProjectcode ? this.state.selectedProjectcode.value : transactionStatus.NA;\r\n            let postParam = undefined;\r\n            postParam = {\r\n                inputListName: \"Batchmaster\",\r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                unchangeList: [\"FromDate\", \"ToDate\"], isSingleGet: true,\r\n                fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\"\r\n            };\r\n            const inputParam = {\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchcreation\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n                inputData: inputData,\r\n                postParam,\r\n                searchRef: this.searchRef,\r\n                operation: this.props.Login.operation,\r\n                saveType,\r\n                formRef,\r\n            }\r\n            if (this.props.Login.operation === \"create\") {\r\n                this.searchRef.current.value = \"\";\r\n                this.props.createBatchmasterAction(inputParam[\"inputData\"], this.props.Login.masterData, inputParam[\"operation\"]);\r\n            } else {\r\n                inputData[\"nbatchmastercode\"] = this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode;\r\n                inputData[\"SelectedBatchmaster\"] = this.props.Login.masterData.SelectedBatchmaster;\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.editId)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: {\r\n                                inputParam,\r\n                                masterData: this.props.Login.masterData\r\n                            },\r\n                            openModal: true,\r\n                            screenName: \"IDS_BATCHCREATION\",\r\n                            operation: inputParam.operation\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.updateBatchcreationAction(inputParam[\"inputData\"], this.props.Login.masterData, inputParam[\"operation\"]);\r\n                }\r\n            }\r\n        }\r\n        // const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        // if (esignNeeded) {\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n        //             openModal: true, screenName: \"IDS_BATCHCREATION\",\r\n        //             operation: this.props.Login.operation\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n        //     const selectedRecord = { ...this.state.selectedRecord, sbatchfillinglotno: \"\" }\r\n        //     this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", selectedRecord);\r\n        // }\r\n    }\r\n\r\n    //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\r\n\r\n    addSaveDataGrid = () => {\r\n\r\n    let filterdata1=this.state.dataState ?process(this.state.addComponentDataListCopy || [], {...this.state.dataState,take:this.state.samples.length}).data:[];\r\n            let sortListedData1 = filterdata1.filter(x => \r\n             this.state.addedSamplesList.some(item => item.ntransactiontestcode === x.ntransactiontestcode)\r\n           );\r\n           let exists=this.state.dataState && this.state.dataState.filter!==null && this.state.dataState.filter!==undefined ? sortListedData1.length>0 ? true : false :true;\r\n            if (this.state.addedSamplesList.length > 0 && exists) {\r\n              let addedSamplesListSortedList = [];\r\n              let   updatedList =[];\r\n              let ListedData =[];\r\n              let sortListedData=[];\r\n              if(this.state.dataState && this.state.dataState.filter!==null && this.state.dataState.filter!==undefined){\r\n                let filterdata=process(this.state.addComponentDataListCopy  || this.state.samples ,\r\n                      {...this.state.dataState,take:this.state.samples.length}).data||[];\r\n                 sortListedData = filterdata.filter(x => \r\n                  this.state.addedSamplesList.some(item => item.ntransactiontestcode === x.ntransactiontestcode)\r\n                );\r\n                 updatedList = filterdata.filter(\r\n                  (item) => !sortListedData.some(\r\n                    (addedItem) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n                  )\r\n                );\r\n                 updatedList.map(x =>{if(x.selected){ \r\n                    \r\n                    ListedData.push({...x,'jsondata':{\r\n                        'samplelist':x\r\n                      },'jsonuidata':{\r\n                        'samplelist':x\r\n                      }});\r\n                \r\n                \r\n                \r\n                }});\r\n        \r\n              }else{\r\n               updatedList = this.state.samples.filter(\r\n                (item) => !this.state.addedSamplesList.some(\r\n                  (addedItem) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n                )\r\n              );\r\n              ListedData=[];\r\n              sortListedData= this.state.addedSamplesList;\r\n            }\r\n              if (this.state.addedSamplesListSortedList.length > 0) {\r\n                this.state.addedSamplesListSortedList.map(item => {\r\n                    const newItem = JSON.parse(JSON.stringify(item));\r\n                    newItem[\"jsondata\"] = {}\r\n                    newItem[\"jsonuidata\"] = {}\r\n                    newItem[\"selected\"] = false;\r\n                    newItem[\"jsondata\"]['samplelist'] = {...item,selected:false}\r\n                    newItem[\"jsonuidata\"]['samplelist'] = {...item,selected:false}\r\n                   addedSamplesListSortedList.push(newItem)\r\n                })\r\n              }\r\n              sortListedData.map(item => {\r\n                const newItem = JSON.parse(JSON.stringify(item));\r\n                newItem[\"jsondata\"] = {}\r\n                newItem[\"jsonuidata\"] = {}\r\n                newItem[\"selected\"] = false;\r\n                newItem[\"jsondata\"]['samplelist'] = {...item,selected:false}\r\n                newItem[\"jsonuidata\"]['samplelist'] = {...item,selected:false}\r\n                addedSamplesListSortedList.push(newItem)\r\n\r\n                })\r\n              this.setState({\r\n                samples: updatedList, addSelectAll: this.valiateCheckAll(updatedList)\r\n                , addedSamplesListSortedList: addedSamplesListSortedList\r\n                , addedSamplesList: ListedData,addComponentDataListCopy:this.valiateCopy(addedSamplesListSortedList||[],updatedList||[],ListedData||[]) \r\n              })\r\n            } else {\r\n              toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELCETONESAMPLE\" }));\r\n            }\r\n      }\r\n      valiateCopy(sortedList,addComponentDataList,addedSamplesList){\r\n        let addedSamplesLists=addedSamplesList||this.state.addedSamplesList||[];\r\n        let listData = this.props.Login.masterData.samples || [];\r\n        let copyingList = listData.filter(item1 => \r\n          !sortedList.some(item2 => item1.ntransactiontestcode === item2.ntransactiontestcode)\r\n        ) ||[];\r\n        let copyingListData = copyingList.map(item => {\r\n          const existsInAddComponentDataList = addedSamplesLists.some(\r\n            item1 => item1.ntransactiontestcode === item.ntransactiontestcode \r\n          );\r\n         \r\n          if(existsInAddComponentDataList){\r\n            return {...item,selected: true};\r\n          }else{\r\n            return {...item,selected: false};\r\n          }\r\n         \r\n        });\r\n        return copyingListData;\r\n      }\r\n    handleClickDelete = (row) => {\r\n        let updatedAddList=[];\r\n        const ntransactiontestcode = row.dataItem.ntransactiontestcode;\r\n        const updatedList = this.state.addedSamplesListSortedList.filter(\r\n          (item) => item.ntransactiontestcode !== ntransactiontestcode\r\n        );\r\n    \r\n        const exists = this.state.samples.some(\r\n          (item) => item.ntransactiontestcode === ntransactiontestcode\r\n        );\r\n        if (!exists) {\r\n           updatedAddList = this.state.samples.map(item => {\r\n            return item\r\n          })\r\n           updatedAddList.push({...row.dataItem,selected:false});\r\n        }\r\n        //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\r\n\r\n        this.setState({ samples: updatedAddList, addedSamplesListSortedList: updatedList ,\r\n            addSelectAll: this.valiateCheckAll(updatedAddList),\r\n            deleteSelectAll:this.valiateCheckAll(updatedAddList),\r\n            addComponentDataListCopy:this.valiateCopy(updatedList||[],updatedAddList||[]) })\r\n    \r\n      }\r\n\r\n\r\n    deleteBatchCreation = (selectedBatch, deleteId, operation) => {\r\n        if (selectedBatch.ntransactionstatus === transactionStatus.COMPLETED ||\r\n            selectedBatch.ntransactionstatus === transactionStatus.INITIATED ||\r\n            selectedBatch.ntransactionstatus === transactionStatus.CANCELLED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n        }\r\n        else {\r\n            let inputData = {};\r\n            const masterData = this.props.Login.masterData;\r\n            const postParam = {\r\n                inputListName: \"Batchmaster\",\r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                primaryKeyValue: selectedBatch.nbatchmastercode,\r\n                fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\r\n                isSingleGet: true,\r\n                //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                fecthInputObject: {\r\n                    userInfo: this.props.Login.userInfo,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : transactionStatus.NA,\r\n                    nsampletypecode: this.props.Login.masterData.defaultSampleType.nsampletypecode\r\n                },\r\n            }\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n            inputData[\"fromDate\"] = obj.fromDate;\r\n            inputData[\"toDate\"] = obj.toDate;\r\n            inputData[\"currentdate\"] = formatInputDate(new Date(), true)\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n            inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType\r\n            inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n            //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nbatchmastercode\"] = selectedBatch.nbatchmastercode;\r\n            //inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n            inputData[\"ntranscode\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.value===transactionStatus.ALL ? this.state.BCFilterStatus.filter(item1=>item1.item.ntransactionstatus!==transactionStatus.ALL).map(item1=>item1.item.ntransactionstatus).join(\",\") : this.state.FilterStatusValue.value;\r\n\r\n            // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n            // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n            inputData[\"napprovalversioncode\"] = this.props.Login.masterData.realApproveConfigVersion &&\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ?\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\r\n            inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion &&\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\r\n            inputData[\"selectedBatch\"] = selectedBatch;\r\n            inputData[\"samples\"] = this.props.Login.masterData.Samples;\r\n            const inputParam = {\r\n                postParam,\r\n                inputData: inputData,\r\n                operation,\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchcreation\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: \"IDS_BATCHCREATION\", operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    fetchEditData = (editParam) => {\r\n        if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT) {\r\n            this.props.getActiveBatchCreationService(editParam,\r\n                this.props.Login.masterData.SelectedBatchmaster)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n        }\r\n    }\r\n\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\t\t//ALPD-3399\r\n        if(this.props.Login.operation==\"complete\"|| this.props.Login.operation==\"initiate\"){\r\n            this.props.validateEsignforBatch(inputParam,);\r\n        }else{\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n       \r\n    }\r\n    closeFilter = () => {\r\n        let inputValues = {\r\n            fromDate:this.props.Login.masterData.realFromDate||new Date(),//this.state.selectedFilter[\"fromDate\"] != undefined ?\r\n                //rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"fromDate\"]) : this.fromDate,\r\n            toDate:  this.props.Login.masterData.realToDate||new Date(), //this.state.selectedFilter[\"toDate\"] != undefined ?\r\n               // rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"toDate\"]) : this.toDate,\r\n            SampleType: this.props.Login.masterData.realSampleTypeList || [],\r\n            SampleTypeValue: this.props.Login.masterData.realSampleTypeValue || {},\r\n            defaultSampleType: this.props.Login.masterData.realSampleTypeValue || {},\r\n            RegistrationType: this.props.Login.masterData.realRegistrationTypeList || [],\r\n            RegTypeValue: this.props.Login.masterData.realRegTypeValue || {},\r\n            defaultRegistrationType: this.props.Login.masterData.realRegTypeValue || {},\r\n            RegistrationSubType: this.props.Login.masterData.realRegistrationSubTypeList || [],\r\n            RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue || {},\r\n            BCFilterStatus: this.props.Login.masterData.realBCFilterStatusList || [],\r\n            FilterStatusValue: this.props.Login.masterData.realdefaultFilterStatus || {},\r\n            ApprovalConfigVersion: this.props.Login.masterData.realApprovalConfigVersionList || [],\r\n            ApprovalVersionValue: this.props.Login.masterData.realApproveConfigVersion || {},\r\n            defaultFilterStatus:this.props.Login.masterData.realdefaultFilterStatus || {},\r\n            defaultApprovalConfigVersion:this.props.Login.masterData.realApproveConfigVersion || {},\r\n            defaultRegistrationSubType:this.props.Login.masterData.realRegSubTypeValue || {},\r\n            ndesigntemplatemappingcode:this.props.Login.masterData.realndesigntemplatemappingcode || -1\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false, masterData: { ...this.props.Login.masterData, ...inputValues } },\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onFilterSubmit = () => {\r\n\r\n        if (this.props.Login.masterData.defaultRegistrationType != undefined && this.state.FilterStatusValue.item != undefined && this.state.nregsubtypecode.item != undefined &&\r\n            this.state.ApprovalVersionValue.item != undefined\r\n        ) {\r\n            let inputData = {};\r\n\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.fromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n            inputData[\"fromDate\"] = obj.fromDate;\r\n            inputData[\"toDate\"] = obj.toDate;\r\n            inputData[\"realFromDate\"] = obj.fromDate;\r\n            inputData[\"realToDate\"] = obj.toDate;\r\n            inputData[\"needFilterSubmit\"] = \"true\";\r\n            inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n            inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n            inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType\r\n            inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n           // inputData[\"ntranscode\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.value===0 ? this.state.BCFilterStatus.map(item1=>\"'\"+item1.item.ntransactionstatus+\"'\").join(\",\") : this.state.FilterStatusValue.value;\r\n\t\t\t//ALPD-3399          \r\n \t\t\tinputData[\"ntranscode\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.value===transactionStatus.ALL ? this.state.BCFilterStatus.filter(item1=>item1.item.ntransactionstatus!==transactionStatus.ALL).map(item1=>item1.item.ntransactionstatus).join(\",\") : this.state.FilterStatusValue.value;\r\n\r\n           inputData[\"napprovalconfigcode\"] = this.state.ApprovalVersionValue ?\r\n                this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n            //  inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n            //  this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\r\n            inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ?\r\n                this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n            // inputData[\"napprovalversioncode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n            //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? \r\n            //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode: transactionStatus.NA;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode ||\r\n            transactionStatus.NA;\r\n        //inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\r\n       // inputData[\"realdefaultFilterStatus\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\r\n\r\n        inputData[\"realRegistrationTypeList\"] = this.props.Login.masterData.RegistrationType;\r\n        inputData[\"realRegTypeValue\"] =this.props.Login.masterData.defaultRegistrationType;\r\n        inputData[\"realRegistrationSubTypeList\"] = this.props.Login.masterData.RegistrationSubType;\r\n        inputData[\"realRegSubTypeValue\"] =this.props.Login.masterData.defaultRegistrationSubType;\r\n        inputData[\"realBCFilterStatusList\"] =this.props.Login.masterData.BCFilterStatus;\r\n        inputData[\"realdefaultFilterStatus\"] = this.state.FilterStatusValue!==undefined? this.state.FilterStatusValue && this.state.FilterStatusValue.item :this.props.Login.masterData.defaultFilterStatus;\r\n        inputData[\"realApprovalConfigVersionList\"] = this.props.Login.masterData.ApprovalConfigVersion;\r\n        //inputData[\"realApproveConfigVersion\"] = this.props.Login.masterData.defaultApprovalConfigVersion;\r\n        inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue!==undefined? this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item :this.props.Login.masterData.defaultApprovalConfigVersion;\r\n\r\n        inputData[\"realndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n        inputData[\"operation\"]=\"filtersubmit\";\r\n            \r\n            const inputParam = {\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchmaster\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n                inputData: inputData,\r\n                searchRef: this.searchRef,\r\n            }\r\n            this.props.onActionFilterSubmit(inputParam[\"inputData\"], this.props.Login.masterData);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    reloadData = (isFilterSubmit) => {\r\n        this.searchRef.current.value = \"\";\r\n        // let obj = this.convertDatetoString((selectedRecord && selectedRecord[\"fromdate\"]) || this.props.Login.masterData.FromDate, (selectedRecord && selectedRecord[\"todate\"]) || this.props.Login.masterData.ToDate)\r\n        if ((this.props.Login.masterData.realRegTypeValue !== transactionStatus.NA &&\r\n            this.props.Login.masterData.realRegTypeValue !== null) &&\r\n            (this.props.Login.masterData.realRegSubTypeValue !== transactionStatus.NA &&\r\n            this.props.Login.masterData.realRegSubTypeValue !== null && this.props.Login.masterData.realRegSubTypeValue !== undefined) &&\r\n            (this.props.Login.masterData.realApproveConfigVersion !== transactionStatus.NA ||\r\n            this.props.Login.masterData.realApproveConfigVersion !== null &&  this.props.Login.masterData.realApproveConfigVersion !== undefined )&&\r\n            (this.props.Login.masterData.defaultFilterStatus !== transactionStatus.NA ||\r\n            this.props.Login.masterData.defaultFilterStatus !== null && this.props.Login.masterData.defaultFilterStatus!==undefined)) {\r\n\r\n            let inputData = {};\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n            inputData[\"fromDate\"] = obj.fromDate;\r\n            inputData[\"toDate\"] = obj.toDate;\r\n            inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue &&\r\n                this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ?\r\n                this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n\r\n            inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n\r\n            inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\r\n\r\n            inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\r\n\r\n            inputData[\"defaultRegistrationSubType\"] = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA;\r\n\r\n            //inputData[\"ntranscode\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus || transactionStatus.NA;\r\n            inputData[\"ntranscode\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus===transactionStatus.ALL ? this.state.BCFilterStatus.filter(item1=>item1.item.ntransactionstatus!==transactionStatus.ALL).map(item1=>item1.item.ntransactionstatus).join(\",\") :this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus;\r\n\r\n            inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode || transactionStatus.NA;\r\n\r\n            inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\r\n\r\n            inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item.napprovalconfigversioncode || transactionStatus.NA;\r\n\r\n            //inputData[\"defaultFilterStatus\"]=this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\r\n            inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\r\n            inputData[\"realdefaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\r\n            inputData[\"realRegistrationTypeList\"] =this.props.Login.masterData.realRegistrationTypeList;\r\n            inputData[\"realRegTypeValue\"]=this.props.Login.masterData.realRegTypeValue ;\r\n            inputData[\"realRegistrationSubTypeList\"] =this.props.Login.masterData.realRegistrationSubTypeList;\r\n            inputData[\"realRegSubTypeValue\"] =this.props.Login.masterData.realRegSubTypeValue;\r\n            inputData[\"realBCFilterStatusList\"]=this.props.Login.masterData.realBCFilterStatusList;\r\n            inputData[\"realdefaultFilterStatus\"] =this.state.FilterStatusValue!==undefined? this.state.FilterStatusValue && this.state.FilterStatusValue.item :this.props.Login.masterData.realdefaultFilterStatus;\r\n           // inputData[\"realdefaultFilterStatus\"] =this.props.Login.masterData.realdefaultFilterStatus!==undefined?this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus :this.props.Login.masterData.realdefaultFilterStatus;\r\n            inputData[\"realApprovalConfigVersionList\"] =this.props.Login.masterData.realApprovalConfigVersionList;\r\n            inputData[\"realApproveConfigVersion\"]=this.props.Login.masterData.realApproveConfigVersion ;\r\n            inputData[\"realndesigntemplatemappingcode\"]=this.props.Login.masterData.realndesigntemplatemappingcode;\r\n            const inputParam = {\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchmaster\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n                inputData: inputData,\r\n                searchRef: this.searchRef,\r\n            }\r\n\r\n            this.props.onActionFilterSubmit(inputParam[\"inputData\"], this.props.Login.masterData);\r\n        } else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }));\r\n        }\r\n    }\r\n\r\n\r\n    // addtest=(addParam)=>{\r\n    //     if(this.props.Login.masterData.Batchmaster == undefined ){\r\n    //         toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" })); \r\n    //     }else{\r\n    //         this.props.getTestInstrumentComboService(addParam)\r\n    //     }\r\n    // }\r\n\r\n    // convertDatetoString(startDateValue, endDateValue) {\r\n    //     const startDate = new Date(startDateValue);\r\n    //     const endDate = new Date(endDateValue);\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n\r\n    //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay\r\n    //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay\r\n    //     const fromDate = fromDateOnly + \"T00:00:00\";\r\n    //     const toDate = toDateOnly + \"T23:59:59\";\r\n    //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    // }\r\n\r\n    onClickReport = (selectedRecord, flag, ncontrolcode) => {\r\n        const reportParam = {\r\n            classUrl: \"certificategeneration\",\r\n            methodUrl: \"reportGeneration\",\r\n            screenName: \"CertificateGeneration\",\r\n            operation: \"previewReport\",\r\n            primaryKeyField: \"nreleasebatchcode\",\r\n            inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: -1,\r\n            inputData: {\r\n                sprimarykeyname: 'nreleasebatchcode',\r\n                nprimarykey: selectedRecord.nreleasebatchcode,\r\n                nreleasebatchcode: selectedRecord.nreleasebatchcode,\r\n                ncertificatetypecode: selectedRecord.ndecision === transactionStatus.PASS && flag === 1 ? selectedRecord.ncertificatetypecode : -1,\r\n                ndecisionstatus: selectedRecord.ndecision,// === transactionStatus.DRAFT ? transactionStatus.PASS : selectedRecord.ndecision,\r\n                nreporttypecode: flag === 2 ? reportTypeEnum.SCREENWISE : reportTypeEnum.BATCH,\r\n                ncontrolcode,\r\n                ncoareporttypecode: flag === 2 ? -1 : reportCOAType.BATCHPREVIEW,\r\n                userinfo: this.props.Login.userInfo,\r\n                nflag: flag,\r\n                skipbatchvalidation: true,\r\n            }\r\n        };\r\n        this.props.onClickReport(reportParam)\r\n    }\r\n\r\n    reportMethod = (value) => {\r\n        if (value.method === 1) {\r\n            this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 2, value.controlId);\r\n        }\r\n        else {\r\n            this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 1, value.controlId);\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore,\r\n    getTestInstrumentComboService, getTestInstrumentCategory, getInstrumentForInstCategory,\r\n    getProductBasedInstrument,\r\n    getBatchCreationDetails, onActionFilterSubmit, getProductcategoryAction,\r\n    createBatchmasterAction, getSamplesForGrid, getSelectedBatchCreationDetail,\r\n    createSampleAction, deleteSampleAction, getActiveBatchCreationService,\r\n    updateBatchcreationAction, deleteBatchCreation, batchInitiateAction,\r\n    getBCRegistrationSubType, batchCompleteAction, validateEsignCredential,\r\n    filterColumnData, getBatchhistoryAction,\r\n    getBatchSection, viewInfo, getIqcSamples, getMaterialBasedOnMaterialCategory,\r\n    getMaterialInventoryBasedOnMaterial, batchSaveIQCActions, getMaterialAvailQtyBasedOnInv,\r\n    getBatchIqcSampleAction, getBCApprovalConfigVersion, getBCRegistrationType,\r\n    getTreeByMaterial, getNewRegSpecification, cancelIQCSampleAction, batchCancelAction,\r\n    batchInitiateDatePopup, batchCompleteDatePopup, getInstrumentID, getBatchViewResultAction,validateEsignforBatch\r\n    //,batchTAT\r\n})(injectIntl(BatchCreation));"]},"metadata":{},"sourceType":"module"}