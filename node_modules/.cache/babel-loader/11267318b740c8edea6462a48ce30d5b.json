{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\DesignTemplateMapping.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faThumbsUp, faChevronCircleDown } from '@fortawesome/free-solid-svg-icons'; //,faUserTimes, faTrash\n//import { falistUl } from '@fortawesome/free-regular-svg-icons';\n\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getDesignTemplateMappingDetail, getMappedFieldProps, editFieldConfigService, auditFieldConfigService, getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit, combinationUniqueConfigService } from '../../actions';\nimport TemplateFilter from './TemplateFilter';\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\nimport { getControlMap, showEsign, constructOptionList } from '../../components/CommonScript'; //searchData, sortData,\n\nimport ListMaster from '../../components/list-master/list-master.component'; // import DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\n\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddDesignTemplateMapping from './AddDesignTemplateMapping';\nimport Esign from '../../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { designProperties, formCode, SampleType, transactionStatus, templateMappingAction, //SAMPLEAUDITFIELDS, SAMPLEAUDITEDITABLE, SAMPLEAUDITMULTILINGUALFIELDS,\n// SUBSAMPLEAUDITFIELDS, SUBSAMPLEAUDITEDITABLE, SUBSAMPLEAUDITMULTILINGUALFIELDS,\nSAMPLETEMPLATEFIELDS, SUBSAMPLETEMPLATEFIELDS, designComponents } from '../../components/Enumeration';\nimport AddSynonym from '../../components/droparea/AddSynonym';\nimport { Affix } from 'rsuite';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component'; // import ReactTooltip from 'react-tooltip';\n\nimport ConfigureScreenFields from './ConfigureScreenFields';\nimport ConfigureEditFields from './ConfigureEditFields';\nimport ConfigureUniqueFields from './ConfigureUniqueFields.jsx';\nimport ConfigureAuditFields from './ConfigureAuditFields';\nimport CustomPopover from '../../components/customPopover'; //import { faCaretDown } from '@fortawesome/free-solid-svg-icons';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DesignTemplateMapping extends React.Component {\n  constructor(props) {\n    super(props); // const dataState = {\n    //     skip: 0,\n    //     take: 10,\n    // };\n\n    this.filterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        // let uRL = \"\";\n        let inputData = [];\n\n        if (fieldname === \"sampleType\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 1,\n            nsampletypecode: parseInt(event.value)\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultsampletype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n\n          if (event.value === SampleType.Masters) {\n            const masterTypeArray = this.state.masterTypeArray;\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...masterData,\n                  masterTypeArray,\n                  defaultMasterType: masterTypeArray[0],\n                  qualisforms: [],\n                  defaultform: this.state.newMasterForm,\n                  nregtypecode: -1,\n                  nregsubtypecode: -1\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            inputParam[\"masterData\"][\"defaultform\"] = {\n              value: -1,\n              label: \"-\"\n            };\n            this.props.getTMPFilterRegType(inputParam);\n          }\n        } else if (fieldname === \"registrationType\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nregtypecode: parseInt(event.value),\n            nsampletypecode: this.props.Login.masterData.defaultsampletype.value\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultregtype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n          this.props.getTMPFilterRegSubType(inputParam);\n        } else if (fieldname === \"registrationSubType\") {\n          let masterData = { ...this.props.Login.masterData,\n            defaultregsubtype: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else if (fieldname === \"masterType\") {\n          let masterData = { ...this.props.Login.masterData,\n            defaultMasterType: event\n          };\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 1,\n            nsampletypecode: SampleType.Masters\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n\n          if (event.value === 1) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...masterData,\n                  qualisforms: [],\n                  defaultform: this.state.newMasterForm\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.getTMPFilterRegType(inputParam);\n          }\n        } else {\n          let masterData = { ...this.props.Login.masterData,\n            defaultform: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.actionMethod = value => {\n      if (value.method === templateMappingAction.CONFIGSAMPLEDISPLAY) {\n        this.openFieldConfiguration(value.controlId, \"configure\");\n      } else if (value.method === templateMappingAction.CONFIGSAMPLEEDIT) {\n        this.editFieldConfiguration(value.controlId, 'configureedit');\n      } else if (value.method === templateMappingAction.CONFIGSUBSAMPLEDISPLAY) {\n        this.openFieldConfiguration(value.controlId, 'configuresubsample');\n      } else if (value.method === templateMappingAction.CONFIGSUBSAMPLEEDIT) {\n        this.editFieldConfiguration(value.controlId, 'configuresubsampleedit');\n      } else if (value.method === templateMappingAction.CONFIGUNIQUE) {\n        this.openCombinationUniqueFieldConfiguration(value.controlId);\n      } else if (value.method === templateMappingAction.CONFIGSAMPLEAUDIT) {\n        this.auditFieldConfiguration(value.controlId, 'configureaudit');\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\n        nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\n        // nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\n        //nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\n        nsampletypecode: this.props.Login.masterData.realSampleValue.value,\n        nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData[\"realFormValue\"].value : -1\n      };\n      let inputParam = {\n        masterData: this.props.Login.masterData,\n        inputData\n      };\n      this.props.reloadDesignTemplateMapping(inputParam);\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: this.props.Login.masterData.defaultsampletype.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\n        nregsubtypecode: this.props.Login.masterData.defaultsampletype.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\n        nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\n        nformcode: this.props.Login.masterData.defaultform ? this.props.Login.masterData.defaultform.value || -1 : -1\n      };\n      let masterData = { ...this.props.Login.masterData,\n        realSampleValue: this.props.Login.masterData.defaultsampletype,\n        realFormValue: this.props.Login.masterData.defaultform,\n        realRegTypeValue: this.props.Login.masterData.defaultregtype,\n        realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\n      };\n      let inputParam = {\n        masterData,\n        inputData\n      };\n      this.props.getTMPFilterSubmit(inputParam);\n    };\n\n    this.onApproveClick = () => {\n      if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus !== transactionStatus.RETIRED) {\n        //console.log(\"this.state.selectedRecord.nreactregtemplatecode.item.jsondata:\", this.state, this.props.Login);\n        //console.log(\"this.props.Login.masterData.selectedDesignTemplateMapping.jsondata:\", this.props.Login.masterData.selectedDesignTemplateMapping.jsondata);\n        let {\n          jsondata,\n          jdynamiccolumns,\n          jnumericcolumns,\n          templatePrimaryKey,\n          deleteValidation,\n          jsqlquerycolumns\n        } = this.getGridJsondata(this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\"); // console.log(\"deleteValidation 2:\", deleteValidation);\n\n        const ncontrolCode = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\n        let inputData = {\n          jdynamiccolumns,\n          jnumericcolumns,\n          jsqlquerycolumns,\n          sprimarykeyname: templatePrimaryKey\n        };\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"designtemplatemapping\"] = {\n          \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n        };\n        inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n        inputData[\"deletevalidationlist\"] = deleteValidation;\n        postParam = {\n          inputListName: \"DesignTemplateMapping\",\n          selectedObject: \"selectedDesignTemplateMapping\",\n          primaryKeyField: \"ndesigntemplatemappingcode\"\n        };\n        const inputParam = {\n          inputData: { ...inputData\n          },\n          classUrl: 'designtemplatemapping',\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          operation: \"approve\",\n          postParam\n        };\n        let saveType; // console.log(\"approve:\", inputParam);\n\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"approve\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATERETIRED\"\n        }));\n      }\n    };\n\n    this.ConfirmDelete = () => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteTemplate());\n    };\n\n    this.deleteTemplate = () => {\n      if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT) {\n        const ncontrolCode = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"designtemplatemapping\"] = {\n          \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n        };\n        inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n        postParam = {\n          inputListName: \"DesignTemplateMapping\",\n          selectedObject: \"selectedDesignTemplateMapping\",\n          primaryKeyField: \"ndesigntemplatemappingcode\"\n        };\n        const inputParam = {\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo\n          },\n          classUrl: 'designtemplatemapping',\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          operation: \"delete\",\n          postParam\n        };\n        let saveType;\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"delete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORDTODELETE\"\n        }));\n      }\n    };\n\n    this.deleteCombinationUnique = (index, eventKey) => {\n      if (eventKey === \"subsample\") {\n        let dataList = this.props.Login.subsampledataList || [];\n        let dataListCount = this.props.Login.subsampledataListCount || [];\n        dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]; //   delete dataListCount[index]\n\n        if (dataList[index] || dataList[index] === null) {\n          dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]; // delete dataList[index]\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            subsampledataListCount: dataListCount,\n            subsampledataList: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        let dataList = this.props.Login.dataList || [];\n        let dataListCount = this.props.Login.dataListCount || [];\n        dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]; //   delete dataListCount[index]\n\n        if (dataList[index] || dataList[index] === null) {\n          dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]; // delete dataList[index]\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCount,\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.addCombinatonUnique = (designData, eventKey) => {\n      if (eventKey === \"subsample\") {\n        const dataList = this.props.Login.dataListSubSample || []; //    const obj={}\n        //     designData.map(item=>{\n        //         obj[item[\"2\"]]={...item}\n        //     })\n        //dataList.push({})\n\n        const dataListCount = this.props.Login.dataListCountSubSample || [];\n        dataListCount.push(dataListCount.length + 1);\n        dataList.push({});\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCountSubSample: dataListCount,\n            dataListSubSample: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const dataList = this.props.Login.dataList || []; //    const obj={}\n        //     designData.map(item=>{\n        //         obj[item[\"2\"]]={...item}\n        //     })\n        //dataList.push({})\n\n        const dataListCount = this.props.Login.dataListCount || [];\n        dataListCount.push(dataListCount.length + 1);\n        dataList.push({});\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCount,\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.openCombinationUniqueFieldConfiguration = controlCode => {\n      let openModal = true;\n      let operation = 'configureunique';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n\n      if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n        inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.combinationUniqueConfigService(inputParam);\n    };\n\n    this.openFieldConfiguration = (controlCode, operation) => {\n      let openModal = true; //let operation = 'configure';\n\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n\n      if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n        inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.getMappedFieldProps(inputParam);\n    };\n\n    this.editFieldConfiguration = (controlCode, operation) => {\n      //console.log(\"edit config:\", this.props.Login);\n      // let operation = 'configureedit';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.defaultregtype.value,\n          nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      }; // if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){\n      //     inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      //  }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.editFieldConfigService(inputParam);\n    };\n\n    this.auditFieldConfiguration = (controlCode, operation) => {\n      //console.log(\"edit config:\", this.props.Login);\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value : -1,\n          nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value : -1,\n          //nregtypecode: this.props.Login.masterData.defaultregtype.value,\n          //nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\n          userinfo: this.props.Login.userInfo,\n          nneedsubsample: this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.auditFieldConfigService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"approve\" || this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          dataList: [],\n          dataListCount: [],\n          dataListSubSample: [],\n          dataListCountSubSample: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onConfigureComboChange = (comboData, formCode, item) => {\n      const fieldName = item.label;\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[formCode] = { ...selectedRecord[formCode],\n        [fieldName]: comboData\n      };\n      this.setState({\n        selectedRecord\n      }); // let designData = this.props.Login.editFieldDesignData;\n      // let dataResult = this.props.Login.editFieldDataResult;\n      // if (formCode === undefined){\n      //     dataResult[dataIndex][field] = event.target.checked;\n      //     if (event.target.checked) {\n      //         designData[field].splice(dataIndex, 0, dataItem.realData)\n      //     } else {\n      //         designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\n      //     }\n      // }\n      // else{\n      //     dataResult[formCode][\"sampleeditable\"] = comboData;\n      //     if (event.target.checked) {\n      //         if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\n      //             return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\n      //         } else {\n      //             designData[formCode][field].splice(dataIndex, 0, dataItem.realData)\n      //         }\n      //         if (field === 'sampledisplayfields') {\n      //             designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label)\n      //         }\n      //     } else {\n      //         if (field === 'sampledisplayfields') {\n      //             designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1)\n      //         }\n      //         designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\n      //     }\n      // }\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { designData, dataResult }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChangeForUnique = (event, radiotext, index, multilinguallabel, eventKey) => {\n      if (eventKey === \"subsample\") {\n        const dataList = this.props.Login.dataListSubSample || [];\n\n        if (dataList[index]) {\n          const value = dataList[index] && dataList[index][event.target.name];\n\n          if (value !== '' && value !== undefined) {\n            delete dataList[index][event.target.name];\n          } else {\n            dataList[index][event.target.name] = {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            };\n          }\n        } else {\n          dataList[index] = {\n            [event.target.name]: {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            }\n          };\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListSubSample: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const dataList = this.props.Login.dataList || [];\n\n        if (dataList[index]) {\n          const value = dataList[index] && dataList[index][event.target.name];\n\n          if (value !== '' && value !== undefined) {\n            delete dataList[index][event.target.name];\n          } else {\n            dataList[index][event.target.name] = {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            };\n          }\n        } else {\n          dataList[index] = {\n            [event.target.name]: {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            }\n          };\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.getGridJsondata = (templatedata, task) => {\n      // console.log(\"task:\", task);\n      let gridItem = [];\n      let gridMoreItem = [];\n      let masterdatefields = [];\n      let masterdateconstraints = [];\n      let masteruniquevalidation = [];\n      let mastercombinationunique = [];\n      let editable = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let templatePrimaryKey = \"\";\n      let mastertemplatefields = [];\n      let sampleAuditFields = [];\n      let sampleAuditEditable = [];\n      let sampleAuditMultilingualFields = [];\n      let deleteValidation = [];\n      let jsqlquerycolumns = [{\n        \"columnname\": \"ndynamicmastercode\",\n        \"displayname\": {\n          \"en-US\": \"DynamicMaster Code PK\",\n          \"ru-RU\": \"Код DynamicMaster ПК\",\n          \"tg-TG\": \"Рамзи DynamicMaster PK\"\n        },\n        \"columndatatype\": \"numeric\"\n      }, {\n        \"columnname\": \"nstatus\",\n        \"displayname\": {\n          \"en-US\": \"Status\",\n          \"ru-RU\": \"Статус\",\n          \"tg-TG\": \"Статус\"\n        },\n        \"columndatatype\": \"numeric\"\n      }]; // console.log(\"grid json:\", this.props.Login, templatedata);\n      // console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\n\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map((component, index) => {\n          //console.log(\"component2:\", component);\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              jsqlquerycolumns.push({\n                \"columnname\": componentRow.label,\n                \"displayname\": componentRow.displayname,\n                \"isjsoncolumn\": true,\n                \"columndatatype\": \"string\",\n                \"jsoncolumnname\": \"jsonuidata\"\n              }); //console.log(\"component row2:\", componentRow);\n\n              componentRow.unique && masteruniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && mastercombinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n              templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\n              let filterinputtype = \"text\";\n              let comboDataInputObject = {};\n\n              if (componentRow.componentcode === designComponents.COMBOBOX) {\n                deleteValidation.push({\n                  \"smastertablename\": componentRow.table.item.stablename,\n                  \"smasterprimarykeyname\": componentRow.valuemember,\n                  \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                  \"stranstableforeignkeyname\": componentRow.valuemember,\n                  //  \"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\n                  \"sjsonfieldname\": \"jsondata\",\n                  \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                  // \"nformcode\":componentRow.table.item.nformcode,\n                  \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                });\n              }\n\n              if (componentRow.inputtype === 'combo') {\n                comboDataInputObject = {\n                  \"predefinedtablename\": componentRow.source,\n                  \"predefinedvaluemember\": componentRow.valuemember,\n                  \"predefineddisplaymember\": componentRow.displaymember,\n                  \"predefinedismultilingual\": false,\n                  \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\n                };\n                jnumericcolumns.push({\n                  \"columnname\": componentRow.displaymember,\n                  \"displayname\": componentRow.displayname,\n                  \"foriegntablePK\": componentRow.label,\n                  // \"ismultilingual\": true,\n                  // \"conditionstring\": \" and nformcode in (\"+componentRow.table.item.nformcode+\") \",\n                  \"tablecolumnname\": componentRow.valuemember,\n                  \"foriegntablename\": componentRow.source,\n                  ...comboDataInputObject\n                });\n                filterinputtype = \"predefinednumeric\";\n              } // samplesearchfields.push(componentRow.label)\n\n\n              if (componentRow.inputtype === 'date') {\n                filterinputtype = \"date\";\n                masterdatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n              }\n\n              if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\n                filterinputtype = \"numeric\";\n              }\n\n              jdynamiccolumns.push({\n                default: componentRow.unique ? true : false,\n                filterinputtype,\n                columnname: componentRow.label,\n                displayname: componentRow.displayname,\n                ...comboDataInputObject\n              }); // displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\n              // componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n                sampleAuditEditable.push(componentRow.label);\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              }\n\n              mastertemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n              sampleAuditFields.push(componentRow.label);\n              sampleAuditMultilingualFields.push({\n                [componentRow.label]: componentRow.displayname\n              });\n\n              if (componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });\n              } else {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: [transactionStatus.DRAFT]\n                });\n              }\n\n              return null;\n            });\n          } else {\n            //console.log(\"component2:\", component);\n            component.unique && masteruniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && mastercombinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n            templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\n            jsqlquerycolumns.push({\n              \"columnname\": component.label,\n              \"displayname\": component.displayname,\n              \"isjsoncolumn\": true,\n              \"columndatatype\": \"string\",\n              \"jsoncolumnname\": \"jsondata\"\n            });\n            let filterinputtype = \"text\";\n            let comboDataInputObject = {};\n            mastertemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n            sampleAuditFields.push(component.label);\n            sampleAuditMultilingualFields.push({\n              [component.label]: component.displayname\n            });\n\n            if (component.componentcode === designComponents.COMBOBOX) {\n              deleteValidation.push({\n                \"smastertablename\": component.table.item.stablename,\n                \"smasterprimarykeyname\": component.valuemember,\n                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                \"stranstableforeignkeyname\": component.valuemember,\n                //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\n                \"sjsonfieldname\": \"jsondata\",\n                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                \"nquerybuildertablecode\": component.nquerybuildertablecode // \"nformcode\":component.table.item.nformcode\n\n              });\n            }\n\n            if (component.inputtype === 'combo') {\n              filterinputtype = \"predefinednumeric\";\n              comboDataInputObject = {\n                \"predefinedtablename\": component.source,\n                \"predefinedvaluemember\": component.valuemember,\n                \"predefineddisplaymember\": component.displaymember,\n                \"predefinedismultilingual\": false,\n                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\n              };\n              jnumericcolumns.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"foriegntablePK\": component.label,\n                // \"ismultilingual\": true,\n                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\n                \"tablecolumnname\": component.column.value,\n                \"foriegntablename\": component.source,\n                ...comboDataInputObject\n              });\n            } // samplesearchfields.push(component.label)\n\n\n            if (component.inputtype === 'date') {\n              filterinputtype = \"date\";\n              masterdatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n            }\n\n            if (component.inputtype === 'numeric' || component.inputtype === 'radio') {\n              filterinputtype = \"numeric\";\n            }\n\n            jdynamiccolumns.push({\n              default: component.unique ? true : false,\n              columnname: component.label,\n              displayname: component.displayname,\n              filterinputtype,\n              ...comboDataInputObject\n            });\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n              sampleAuditEditable.push(component.label);\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: []\n              });\n            } else {\n              editable.push({\n                label: component.label,\n                editableuntill: [transactionStatus.DRAFT]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n\n      if (task === \"DeleteValidation\" && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n        const selectedSubSampleTemplate = this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\n        const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n\n        if (needsubsample) {\n          selectedSubSampleTemplate.map(row => row.children && row.children.map(column => {\n            column.children && column.children.map(component => {\n              if (component.hasOwnProperty('children')) {\n                component.children.map(componentRow => {\n                  //  console.log(\"componentRow sub:\", componentRow);\n                  if (componentRow.componentcode === designComponents.COMBOBOX) {\n                    deleteValidation.push({\n                      \"smastertablename\": componentRow.table.item.stablename,\n                      \"smasterprimarykeyname\": componentRow.valuemember,\n                      \"stranstablename\": \"registrationsample\",\n                      \"stranstableforeignkeyname\": componentRow.valuemember,\n                      // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                      \"sjsonfieldname\": \"jsondata\",\n                      \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                      \"nquerybuildertablecode\": componentRow.nquerybuildertablecode //\"nformcode\":componentRow.table.item.nformcode\n\n                    });\n                  }\n                });\n              } else {\n                //console.log(\"componentRow2 sub:\", component);                         \n                if (component.componentcode === designComponents.COMBOBOX) {\n                  deleteValidation.push({\n                    \"smastertablename\": component.table.item.stablename,\n                    \"smasterprimarykeyname\": component.valuemember,\n                    \"stranstablename\": \"registrationsample\",\n                    \"stranstableforeignkeyname\": component.valuemember,\n                    //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                    \"sjsonfieldname\": \"jsondata\",\n                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                    //\"nformcode\":component.table.item.nformcode,\n                    \"nquerybuildertablecode\": component.nquerybuildertablecode\n                  });\n                }\n              }\n            });\n          }));\n        }\n      }\n\n      let jsondata = {\n        griditem: gridItem,\n        gridmoreitem: gridMoreItem,\n        masterdatefields,\n        masterdateconstraints,\n        masteruniquevalidation,\n        editable,\n        mastertemplatefields,\n        mastercombinationunique,\n        sampleAuditFields,\n        sampleAuditEditable,\n        sampleAuditMultilingualFields\n      }; //console.log(\"dynamiccolumns:\", jdynamiccolumns);\n      //console.log(\"deleteValidation 1:\", deleteValidation);\n\n      return {\n        jsondata,\n        jdynamiccolumns,\n        jnumericcolumns,\n        templatePrimaryKey,\n        deleteValidation,\n        jsqlquerycolumns\n      };\n    };\n\n    this.getJsondata = templatedata => {\n      //let displayFields = [];\n      //ALPD-533\n      let displayFields = [{\n        [designProperties.LABEL]: {\n          \"en-US\": \"Order No.\",\n          \"ru-RU\": \"№ заказа.\",\n          \"tg-TG\": \"Фармоиш №\"\n        },\n        [designProperties.VALUE]: 'sarno'\n      }];\n      let listItem = []; // let gridItem = [];\n\n      let gridItem = [{\n        [designProperties.LABEL]: {\n          \"en-US\": \"Order No.\",\n          \"ru-RU\": \"№ заказа.\",\n          \"tg-TG\": \"Фармоиш №\"\n        },\n        [designProperties.VALUE]: \"sarno\"\n      }];\n      let gridMoreItem = [];\n      let editable = [];\n      let subsampleeditable = [];\n      let subsamplelistitem = [];\n      let sampledatefields = [{\n        [designProperties.VALUE]: 'dregdate',\n        dateonly: false\n      }];\n      let sampledateconstraints = [];\n      let subsampledatefields = [];\n      let subsampledateconstraints = [];\n      let samplesearchfields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\"];\n      let subsamplesearchfields = [\"sarno\", \"ssamplearno\", \"stransdisplaystatus\"];\n      let sampletemplatefields = [];\n      let subsampletemplatefields = [];\n      let sampleuniquevalidation = [];\n      let subsampleuniquevalidation = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let samplecombinationunique = [];\n      let subsamplecombinationunique = [];\n      let sampleAuditFields = [];\n      let sampleAuditEditable = [];\n      let sampleAuditMultilingualFields = [];\n      let subSampleAuditFields = [];\n      let subSampleAuditEditable = [];\n      let subSampleAuditMultilingualFields = [];\n      let deleteValidation = []; //if(this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){        \n\n      sampleAuditFields = [\"sarno\"];\n      sampleAuditEditable = [\"sarno\"];\n      sampleAuditMultilingualFields = [{\n        \"sarno\": {\n          \"en-US\": \"Order No.\",\n          \"ru-RU\": \"Order No.\",\n          \"tg-TG\": \"Order No.\"\n        }\n      }];\n      subSampleAuditFields = [\"sarno\", \"ssamplearno\"];\n      subSampleAuditEditable = [\"sarno\", \"ssamplearno\"];\n      subSampleAuditMultilingualFields = [{\n        \"sarno\": {\n          \"en-US\": \"Order No.\",\n          \"ru-RU\": \"№ заказа.\",\n          \"tg-TG\": \"Фармоиш №\"\n        }\n      }, {\n        \"ssamplearno\": {\n          \"en-US\": \"Sub Order No.\",\n          \"ru-RU\": \"Под заказ №\",\n          \"tg-TG\": \"№ Фармони зер\"\n        }\n      }]; //}\n      ////////////////////////////////////////////\n      // let sampleAuditFields = SAMPLEAUDITFIELDS;\n      // let sampleAuditEditable = SAMPLEAUDITEDITABLE\n      // let sampleAuditMultilingualFields = SAMPLEAUDITMULTILINGUALFIELDS\n      // let subSampleAuditFields = SUBSAMPLEAUDITFIELDS\n      // let subSampleAuditEditable = SUBSAMPLEAUDITEDITABLE\n      // let subSampleAuditMultilingualFields = SUBSAMPLEAUDITMULTILINGUALFIELDS;\n\n      let testdatefields = [{\n        [designProperties.VALUE]: 'dtransactiondate',\n        dateonly: false\n      }]; //console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\n\n      this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              //console.log(\"componentRow sub:\", componentRow);\n              componentRow.unique && subsampleuniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && subsamplecombinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n              subsamplesearchfields.push(componentRow.label); //subsampleeditable.push({ label: componentRow.label, editableuntill: [17] })\n\n              subsampletemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label,\n                [designProperties.PRIMARYKEY]: componentRow.valuemember,\n                [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\n              });\n\n              if (componentRow.componentcode === designComponents.COMBOBOX) {\n                deleteValidation.push({\n                  \"smastertablename\": componentRow.table.item.stablename,\n                  \"smasterprimarykeyname\": componentRow.table.valuemember,\n                  \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\n                  \"stranstableforeignkeyname\": componentRow.table.valuemember,\n                  //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                  \"sjsonfieldname\": \"jsondata\",\n                  \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                  \"nquerybuildertablecode\": componentRow.nquerybuildertablecode //\"nformcode\":componentRow.table.item.nformcode\n\n                });\n              }\n\n              subSampleAuditFields.push(componentRow.label);\n              subSampleAuditMultilingualFields.push({\n                [componentRow.label]: componentRow.displayname\n              });\n\n              if (componentRow.mandatory) {\n                subSampleAuditEditable.push(componentRow.label);\n              }\n\n              if (componentRow.readonly) subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: []\n              });else subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: [transactionStatus.PREREGISTER]\n              });\n\n              if (componentRow.inputtype === 'date') {\n                subsampledatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n              }\n\n              subsamplelistitem.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n            });\n          } else {\n            //console.log(\"componentRow2 sub:\", component);\n            component.unique && subsampleuniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && subsamplecombinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n            subsamplesearchfields.push(component.label); // subsampleeditable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\n\n            subsampletemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label,\n              [designProperties.PRIMARYKEY]: component.valuemember,\n              [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\n            });\n\n            if (component.componentcode === designComponents.COMBOBOX) {\n              deleteValidation.push({\n                \"smastertablename\": component.table.item.stablename,\n                \"smasterprimarykeyname\": component.table.valuemember,\n                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\n                \"stranstableforeignkeyname\": component.table.valuemember,\n                // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                \"sjsonfieldname\": \"jsondata\",\n                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                //\"nformcode\":component.table.item.nformcode,\n                \"nquerybuildertablecode\": component.nquerybuildertablecode\n              });\n            }\n\n            subSampleAuditFields.push(component.label);\n            subSampleAuditMultilingualFields.push({\n              [component.label]: component.displayname\n            });\n\n            if (component.mandatory) {\n              subSampleAuditEditable.push(component.label);\n            }\n\n            if (component.readonly) subsampleeditable.push({\n              label: component.label,\n              editableuntill: []\n            });else subsampleeditable.push({\n              label: component.label,\n              editableuntill: [transactionStatus.PREREGISTER]\n            });\n\n            if (component.inputtype === 'date') {\n              subsampledatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n            }\n\n            subsamplelistitem.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n          }\n        });\n      }));\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          //console.log(\"componentRow main:\", component);\n          if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n            if (component.hasOwnProperty('children')) {\n              if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n                // let combinedField = [];\n                component.children.map(componentRow => {\n                  // combinedField.push(componentRow.label)\n                  jdynamiccolumns.push({\n                    columnname: componentRow.label,\n                    displayname: componentRow.displayname\n                  });\n\n                  if (componentRow.hasOwnProperty('child')) {\n                    componentRow.child.map(childData => {\n                      jnumericcolumns.push({\n                        \"columnname\": componentRow.label,\n                        \"displayname\": componentRow.displayname,\n                        \"foriegntablePK\": componentRow.label,\n                        // \"ismultilingual\": true,\n                        // \"conditionstring\": \" and nformcode in (140) \",\n                        \"tablecolumnname\": childData.tablecolumnname,\n                        \"foriegntablename\": \"dynamicmaster\"\n                      });\n                    });\n                  }\n\n                  if (componentRow.componentcode === designComponents.COMBOBOX) {\n                    deleteValidation.push({\n                      \"smastertablename\": componentRow.table.item.stablename,\n                      \"smasterprimarykeyname\": componentRow.table.valuemember,\n                      \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                      \"stranstableforeignkeyname\": componentRow.table.valuemember,\n                      //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\n                      \"sjsonfieldname\": \"jsondata\",\n                      \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                      //\"nformcode\":componentRow.table.item.nformcode,\n                      \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                    });\n                  }\n\n                  componentRow.unique && sampleuniquevalidation.push({\n                    [designProperties.LABEL]: componentRow.label\n                  });\n                  componentRow.unique && samplecombinationunique.push({\n                    [componentRow.label]: {\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label\n                    }\n                  });\n                  samplesearchfields.push(componentRow.label);\n                  sampletemplatefields.push({\n                    [designProperties.LABEL]: componentRow.displayname,\n                    [designProperties.VALUE]: componentRow.label,\n                    [designProperties.PRIMARYKEY]: componentRow.valuemember,\n                    [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\n                  });\n                  sampleAuditFields.push(componentRow.label);\n                  sampleAuditMultilingualFields.push({\n                    [componentRow.label]: componentRow.displayname\n                  });\n\n                  if (componentRow.inputtype === 'date') {\n                    sampledatefields.push({\n                      [designProperties.VALUE]: componentRow.label,\n                      dateonly: componentRow.dateonly || false\n                    });\n                    sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n                  }\n\n                  displayFields.push({\n                    [designProperties.LABEL]: componentRow.displayname,\n                    [designProperties.VALUE]: componentRow.label\n                  });\n                  componentRow.templatemandatory && listItem.push({\n                    [designProperties.LABEL]: componentRow.displayname,\n                    [designProperties.VALUE]: componentRow.label\n                  });\n\n                  if (componentRow.mandatory || componentRow.templatemandatory) {\n                    gridItem.push({\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label\n                    });\n                    sampleAuditEditable.push(componentRow.label);\n                  } else {\n                    gridMoreItem.push({\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label\n                    });\n                  }\n\n                  if (componentRow.templatemandatory) {\n                    editable.push({\n                      label: componentRow.label,\n                      editableuntill: []\n                    });\n                  } else {\n                    if (componentRow.readonly) editable.push({\n                      label: componentRow.label,\n                      editableuntill: []\n                    });else editable.push({\n                      label: componentRow.label,\n                      editableuntill: [transactionStatus.PREREGISTER]\n                    });\n                  }\n\n                  return null;\n                }); // let fieldSet = combinedField.join(\"&\")\n                // displayFields.push(fieldSet);\n                // componentRow.templatemandatory && listItem.push(fieldSet)\n                // gridMoreItem.push(fieldSet);\n              }\n            } else {\n              if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n                //console.log(\"componentRow main:\", component);\n                jdynamiccolumns.push({\n                  columnname: component.label,\n                  displayname: component.displayname\n                });\n\n                if (component.componentcode === designComponents.COMBOBOX) {\n                  deleteValidation.push({\n                    \"smastertablename\": component.table.item.stablename,\n                    \"smasterprimarykeyname\": component.table.valuemember,\n                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                    \"stranstableforeignkeyname\": component.table.valuemember,\n                    //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\n                    \"sjsonfieldname\": \"jsondata\",\n                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                    //\"nformcode\":component.table.item.nformcode,\n                    \"nquerybuildertablecode\": component.nquerybuildertablecode\n                  });\n                }\n\n                if (component.hasOwnProperty('child')) {\n                  component.child.map(childData => {\n                    jnumericcolumns.push({\n                      \"columnname\": component.label,\n                      \"displayname\": component.displayname,\n                      \"foriegntablePK\": component.label,\n                      // \"ismultilingual\": true,\n                      // \"conditionstring\": \" and nformcode in (140) \",\n                      \"tablecolumnname\": childData.tablecolumnname,\n                      \"foriegntablename\": \"dynamicmaster\"\n                    });\n                  });\n                }\n\n                component.unique && sampleuniquevalidation.push({\n                  [designProperties.LABEL]: component.label\n                });\n                component.unique && samplecombinationunique.push({\n                  [component.label]: {\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label\n                  }\n                });\n                samplesearchfields.push(component.label);\n                sampletemplatefields.push({\n                  [designProperties.LABEL]: component.displayname,\n                  [designProperties.VALUE]: component.label,\n                  [designProperties.PRIMARYKEY]: component.valuemember,\n                  [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\n                });\n                sampleAuditFields.push(component.label);\n                sampleAuditMultilingualFields.push({\n                  [component.label]: component.displayname\n                });\n\n                if (component.inputtype === 'date') {\n                  sampledatefields.push({\n                    [designProperties.VALUE]: component.label,\n                    dateonly: component.dateonly || false\n                  });\n                  sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n                }\n\n                displayFields.push({\n                  [designProperties.LABEL]: component.displayname,\n                  [designProperties.VALUE]: component.label\n                }); // component.templatemandatory \n                //&& listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\n\n                if (component.mandatory || component.templatemandatory) {\n                  gridItem.push({\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label\n                  });\n                  listItem.push({\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label,\n                    mandatory: true\n                  });\n                  sampleAuditEditable.push(component.label);\n                } else {\n                  gridMoreItem.push({\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label\n                  });\n                }\n\n                if (component.templatemandatory) {\n                  editable.push({\n                    label: component.label,\n                    editableuntill: []\n                  });\n                } else {\n                  // editable.push({ label: component.label, editableuntill: [17] })\n                  if (component.readonly) editable.push({\n                    label: component.label,\n                    editableuntill: []\n                  });else editable.push({\n                    label: component.label,\n                    editableuntill: [transactionStatus.PREREGISTER]\n                  });\n                }\n\n                return null;\n              }\n            }\n          }\n        });\n      })); // if(this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){        \n\n      displayFields.push({\n        [designProperties.LABEL]: {\n          \"en-US\": \"Reg. Date\",\n          \"ru-RU\": \"Reg. Date\",\n          \"tg-TG\": \"Reg. Date\"\n        },\n        [designProperties.VALUE]: 'dregdate'\n      }); // }\n      //samplesearchfields.push(...staticSearchFields);\n      //console.log(\"reg sub type:\", this.props.Login);\n\n      const testListFields = { ...this.props.Login.testListFields\n      };\n      let obj = {\n        sampledisplayfields: displayFields,\n        samplelistitem: listItem,\n        samplegriditem: gridItem,\n        samplegridmoreitem: gridMoreItem,\n        subsamplelistitem,\n        sampledatefields,\n        subsampledatefields,\n        samplesearchfields,\n        subsamplesearchfields,\n        testdatefields,\n        sampledateconstraints,\n        subsampledateconstraints,\n        // sampleuniquevalidation,\n        //  subsamplecombinationunique,\n        samplecombinationunique,\n        testListFields,\n        deleteValidation //combinedsearchfields:[...samplesearchfields,...subsamplesearchfields,...testListFields[\"testsearchfields\"] ]\n\n      };\n      sampleAuditFields.push(\"dregdate\", \"stransdisplaystatus\");\n      sampleAuditEditable.push(\"stransdisplaystatus\");\n      subSampleAuditFields.push(\"stransdisplaystatus\");\n      subSampleAuditEditable.push(\"stransdisplaystatus\");\n      sampleAuditMultilingualFields.push({\n        \"dregdate\": {\n          \"en-US\": \"Reg. Date\",\n          \"ru-RU\": \"Reg. Date\",\n          \"tg-TG\": \"Reg. Date\"\n        }\n      }, {\n        \"stransdisplaystatus\": {\n          \"en-US\": \"Transaction Status\",\n          \"ru-RU\": \"Transaction Status\",\n          \"tg-TG\": \"Transaction Status\"\n        }\n      });\n      subSampleAuditMultilingualFields.push({\n        \"stransdisplaystatus\": {\n          \"en-US\": \"Transaction Status\",\n          \"ru-RU\": \"Transaction Status\",\n          \"tg-TG\": \"Transaction Status\"\n        }\n      });\n      let jsondata = {\n        subsamplecombinationunique,\n        samplecombinationunique,\n        sampletemplatefields: [...SAMPLETEMPLATEFIELDS, ...sampletemplatefields],\n        subsampletemplatefields: [...SUBSAMPLETEMPLATEFIELDS, ...subsampletemplatefields],\n        //: subsamplesearchfields,\n        [formCode.SAMPLEREGISTRATION]: { ...obj,\n          sampleeditable: editable,\n          subsampleeditable,\n          samplecombinationunique,\n          subsamplecombinationunique\n        },\n        [formCode.RESULTENTRY]: { ...obj\n        },\n        [formCode.APPROVAL]: { ...obj\n        },\n        [formCode.JOBALLOCATION]: { ...obj,\n          samplegriditem: [...obj.samplegriditem, {\n            \"1\": {\n              \"en-US\": \"Section\",\n              \"ru-RU\": \"Раздел\",\n              \"tg-TG\": \"Ҷудокунӣ\"\n            },\n            \"2\": \"Section\"\n          } //...obj.samplegriditem,   \n          ],\n          samplelistitem: [{\n            \"1\": {\n              \"en-US\": \"Sample Category\",\n              \"ru-RU\": \"Sample Category\",\n              \"tg-TG\": \"Sample Category\"\n            },\n            \"2\": \"Sample Category\"\n          }, {\n            \"1\": {\n              \"en-US\": \"Section\",\n              \"ru-RU\": \"Раздел\",\n              \"tg-TG\": \"Ҷудокунӣ\"\n            },\n            \"2\": \"Section\"\n          }] //...obj, \n\n        },\n        //[formCode.JOBALLOCATION]: {...obj,},\n        [formCode.MYJOBS]: { ...obj\n        },\n        [formCode.WORKLIST]: { ...obj\n        },\n        [formCode.BATCHCREATION]: {\n          samplegriditem: [{\n            \"1\": {\n              \"en-US\": \"Order No.\",\n              \"ru-RU\": \"№ заказа.\",\n              \"tg-TG\": \"Фармоиш №\"\n            },\n            \"2\": \"sarno\"\n          }, ...obj.samplegriditem],\n          subsamplelistitem: [{\n            \"1\": {\n              \"en-US\": \"Sub Order No.\",\n              \"ru-RU\": \"Под заказ №\",\n              \"tg-TG\": \"Фармоиш №\"\n            },\n            \"2\": \"ssamplearno\"\n          }, ...obj.subsamplelistitem],\n          ...obj\n        },\n        [formCode.TESTWISEMYJOBS]: { ...obj\n        },\n        [formCode.RELEASE]: { ...obj,\n          // sampledisplayfields: [\n          //     {  \"1\": {\n          //         \"en-US\": \"Order No.\",\n          //         \"ru-RU\": \"Ар №\",\n          //         \"tg-TG\": \"Ар №\"\n          //         },\n          //     \"2\": \"sarno\"\n          // },\n          // ...obj.sampledisplayfields\n          // ],\n          // samplegriditem: [\n          //     {\n          //         \"1\": {\n          //             \"en-US\": \"Order No.\",\n          //             \"ru-RU\": \"№ заказа.\",\n          //             \"tg-TG\": \"Фармоиш №\"\n          //         },\n          //         \"2\": \"sarno\"\n          //     },\n          //     ...obj.samplegriditem\n          // ],\n          subsamplelistitem: [{\n            \"1\": {\n              \"en-US\": \"Sub Order No.\",\n              \"ru-RU\": \"Под заказ №\",\n              \"tg-TG\": \"№ Фармони зер\"\n            },\n            \"2\": \"ssamplearno\"\n          }, ...obj.subsamplelistitem] // },\n\n        },\n        sampleAuditEditable,\n        sampleAuditFields,\n        sampleAuditMultilingualFields,\n        subSampleAuditEditable,\n        subSampleAuditFields,\n        subSampleAuditMultilingualFields,\n        deleteValidation\n      }; //console.log(\"jsondata:\", jsondata);\n\n      return jsondata;\n    };\n\n    this.onChangeToggle = (event, dataItem, field, dataIndex, formCode, operation) => {\n      let designData = this.props.Login.designData;\n      let dataResult = this.props.Login.dataResult;\n\n      if (operation === 'configureaudit') {\n        designData = this.props.Login.auditFieldDesignData;\n        dataResult = this.props.Login.auditFieldDataResult;\n      }\n\n      let tableName = \"registration\";\n\n      if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n        tableName = \"dynamicmaster\";\n      }\n\n      if (formCode === undefined) {\n        dataResult[dataIndex][field] = event.target.checked;\n\n        if (event.target.checked) {\n          designData[field].splice(dataIndex, 0, dataItem.realData);\n        } else {\n          designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1);\n        }\n      } else {\n        //dataResult[formCode][dataIndex][field] = event.target.checked;\n        if (event.target.checked) {\n          if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_MAXIMUMSELECTIONEXCEEDS\"\n            }));\n          } else {\n            if (field === 'sampledisplayfields') {\n              dataResult[formCode][dataIndex][field] = event.target.checked;\n              designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label);\n              designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\n            } else if (field === 'sampleauditfields') {\n              dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\n\n              if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, {\n                  [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                });\n              }\n            } else if (field === 'sampleauditeditfields') {\n              dataResult[formCode][tableName][dataIndex][\"sampleauditfields\"] = event.target.checked;\n              dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\n\n              if (designData[formCode][tableName]['sampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode][tableName][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n\n                if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                  designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                  designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, {\n                    [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                  });\n                }\n              }\n            } else if (field === 'subsampleauditfields') {\n              dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\n\n              if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, {\n                  [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                });\n              }\n            } else if (field === 'subsampleauditeditfields') {\n              dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditfields\"] = event.target.checked;\n              dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\n\n              if (designData[formCode]['registrationsample']['subsampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode]['registrationsample'][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n\n                if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                  designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                  designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, {\n                    [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                  });\n                }\n              }\n            } else {\n              dataResult[formCode][dataIndex][field] = event.target.checked;\n              designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\n            }\n          }\n        } else {\n          if (field === 'sampledisplayfields') {\n            dataResult[formCode][dataIndex][field] = event.target.checked;\n            designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1);\n            const index = designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index !== -1) {\n              designData[formCode]['samplesearchfields'].splice(index, 1);\n            }\n          } else if (field === 'sampleauditfields') {\n            dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\n            const index = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index !== -1) {\n              designData[formCode][tableName][field].splice(index, 1);\n            }\n\n            const index1 = designData[formCode][tableName]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\n\n            if (index1 !== -1) {\n              designData[formCode][tableName]['multilingualfields'].splice(index1, 1);\n            }\n\n            const index3 = designData[formCode][tableName][\"sampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index3 !== -1) {\n              designData[formCode][tableName][\"sampleauditeditfields\"].splice(index3, 1);\n            }\n\n            dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\n          } else if (field === 'sampleauditeditfields') {\n            dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\n            const index4 = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index4 !== -1) {\n              designData[formCode][tableName][field].splice(index4, 1);\n            }\n          } else if (field === 'subsampleauditfields') {\n            dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\n            const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index1 !== -1) {\n              designData[formCode][\"registrationsample\"][field].splice(index1, 1);\n            }\n\n            const index2 = designData[formCode][\"registrationsample\"]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\n\n            if (index2 !== -1) {\n              designData[formCode][\"registrationsample\"]['multilingualfields'].splice(index2, 1);\n            }\n\n            const index3 = designData[formCode]['registrationsample'][\"subsampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index3 !== -1) {\n              designData[formCode][\"registrationsample\"][\"subsampleauditeditfields\"].splice(index3, 1);\n            }\n\n            dataResult[formCode][\"registrationsample\"][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\n          } else if (field === 'subsampleauditeditfields') {\n            dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\n            const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index1 !== -1) {\n              designData[formCode][\"registrationsample\"][field].splice(index1, 1);\n            }\n          } else {\n            dataResult[formCode][dataIndex][field] = event.target.checked;\n            designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.realData[designProperties.VALUE]), 1);\n          }\n        }\n      }\n\n      let data = {\n        designData,\n        dataResult\n      };\n\n      if (operation === 'configureaudit') {\n        data = {\n          auditFieldDesignData: designData,\n          auditFieldDataResult: dataResult\n        };\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: { ...data\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      // console.log(\"save:\", this.props.Login.masterData.realRegSubTypeValue);\n      //console.log(\"data:\", this.props.Login.editFieldDesignData)\n      let inputData = [];\n      let operation = this.props.Login.operation;\n      const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n\n      if (operation === 'configure' || operation === 'configuresubsample') {\n        inputData = {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n            jsondataobj: this.props.Login.designData\n          },\n          userinfo: this.props.Login.userInfo\n        };\n        operation = 'configure';\n      } else if (operation === 'configureedit' || operation === 'configuresubsampleedit') {\n        let designData = this.props.Login.editFieldDesignData;\n        let formCodeArray = Object.keys(this.state.selectedRecord);\n        formCodeArray.forEach(formCode => {\n          const data = this.state.selectedRecord[formCode];\n          let editableData = designData[formCode]['sampleeditable'];\n          ;\n\n          if (operation === 'configuresubsampleedit') {\n            editableData = designData[formCode]['subsampleeditable'];\n            ;\n          }\n\n          Object.keys(data).map(label => {\n            const editableuntil = [];\n            data[label].map(statusItem => editableuntil.push(statusItem.value));\n            const index = editableData.findIndex(item => item.label === label);\n\n            if (index === -1) {\n              editableData.push({\n                \"label\": label,\n                \"editableuntill\": editableuntil\n              });\n            } else {\n              editableData[index] = {\n                \"label\": label,\n                \"editableuntill\": editableuntil\n              };\n            } //designData[formCode]['sampleeditable'].push({\"label\":label, \"editableuntill\":editableuntil});\n\n          });\n        });\n        inputData = {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n            jsondataobj: designData\n          },\n          userinfo: this.props.Login.userInfo\n        };\n        operation = 'configure';\n      } else if (operation === 'configureunique') {\n        let designData = this.props.Login.designData; //  let formCodeArray = Object.keys(this.state.selectedRecord);\n\n        const dataList = [];\n        const dataListsubsample = [];\n        this.props.Login.dataList.map(x => {\n          if (Object.keys(x).length !== 0) {\n            dataList.push(x);\n          }\n        });\n\n        if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n          designData['mastercombinationunique'] = dataList;\n        } else {\n          designData['samplecombinationunique'] = dataList;\n          designData[formCode.SAMPLEREGISTRATION]['samplecombinationunique'] = dataList;\n          this.props.Login.dataListSubSample.map(x => {\n            if (Object.keys(x).length !== 0) {\n              dataListsubsample.push(x);\n            }\n          });\n          designData['subsamplecombinationunique'] = dataListsubsample;\n          designData[formCode.SAMPLEREGISTRATION]['subsamplecombinationunique'] = dataListsubsample;\n        }\n\n        inputData = {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n            jsondataobj: designData\n          },\n          userinfo: this.props.Login.userInfo\n        };\n        operation = 'configure';\n      } else if (operation === 'configureaudit') {\n        //console.log(\"auditFieldDesignData:\", this.props.Login);\n        inputData = {\n          //dynamicaudit: {\n          ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n          auditdata: this.props.Login.auditData,\n          //nregtypecode:this.props.Login.masterData.realRegTypeValue.value, \n          //nregsubtypecode:this.props.Login.masterData.realRegSubTypeValue.value, \n          //nformcode:43, stablename:'registration',\n          // },\n          userinfo: this.props.Login.userInfo\n        }; //operation = 'configure';\n      } else {\n        // console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\n        let {\n          jsondata,\n          jdynamiccolumns,\n          jnumericcolumns,\n          templatePrimaryKey\n        } = this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? this.getGridJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata) : {};\n        let auditData = {};\n        let dataObject = {};\n\n        if (this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n          dataObject = this.getJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata); // console.log(\"json:\",dataObject);\n\n          auditData = {\n            \"registration\": {\n              editmandatoryfields: dataObject[\"sampleAuditEditable\"],\n              auditcapturefields: dataObject[\"sampleAuditFields\"],\n              multilingualfields: dataObject[\"sampleAuditMultilingualFields\"]\n            }\n          };\n\n          if (needsubsample) {\n            auditData = { ...auditData,\n              registrationsample: {\n                editmandatoryfields: dataObject[\"subSampleAuditEditable\"],\n                auditcapturefields: dataObject[\"subSampleAuditFields\"],\n                multilingualfields: dataObject[\"subSampleAuditMultilingualFields\"]\n              }\n            };\n            delete dataObject[\"subSampleAuditEditable\"];\n            delete dataObject[\"subSampleAuditFields\"];\n            delete dataObject[\"subSampleAuditMultilingualFields\"];\n          }\n\n          delete dataObject[\"sampleAuditEditable\"];\n          delete dataObject[\"sampleAuditFields\"];\n          delete dataObject[\"sampleAuditMultilingualFields\"];\n        } else {\n          // if(this.props.Login.masterData.realSampleValue.value === SampleType.Masters){\n          auditData = {\n            \"dynamicmaster\": {\n              editmandatoryfields: jsondata[\"sampleAuditEditable\"],\n              auditcapturefields: jsondata[\"sampleAuditFields\"],\n              multilingualfields: jsondata[\"sampleAuditMultilingualFields\"]\n            }\n          };\n        }\n\n        inputData = {\n          \"userinfo\": this.props.Login.userInfo,\n          \"ncontrolcode\": this.props.Login.ncontrolCode,\n          \"nreactregtemplatecode\": this.state.selectedRecord.nreactregtemplatecode.value,\n          \"nsampletypecode\": this.props.Login.masterData.realSampleValue.value,\n          \"nregtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n          \"nregsubtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n          \"sregsubtypename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"\",\n          \"nformcode\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\n          \"nsubsampletemplatecode\": this.state.selectedRecord.nsubsampletemplatecode ? this.state.selectedRecord.nsubsampletemplatecode.value : -1,\n          \"jsondataobj\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? jsondata : dataObject,\n          auditdata: auditData,\n          needsubsample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false\n        };\n        inputData[\"designtemplatemapping\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n\n        if (this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value === -2) {\n          let qf_jsonData = {\n            sdisplayname: {}\n          };\n          let qbt_jsonData = {\n            tablename: {}\n          };\n          this.props.Login.languageList.map(lang => {\n            qf_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord.sformname;\n            qbt_jsonData['tablename'][lang.value] = this.state.selectedRecord.sformname;\n          });\n          let qm_jsonData = {\n            sdisplayname: {}\n          };\n          let nmodulecode = 0;\n          let smoduledisplayname = \"\";\n\n          if (this.state.selectedRecord[\"nnewmodule\"].value === transactionStatus.YES) {\n            smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"];\n            this.props.Login.languageList.map(lang => {\n              qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"];\n            });\n          } else {\n            nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\n          }\n\n          inputData = { ...inputData,\n            sformname: this.state.selectedRecord.sformname,\n            sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\n            nmodulecode,\n            smoduledisplayname,\n            qm_jsonData,\n            qf_jsonData,\n            qbt_jsonData,\n            sprimarykeyname: templatePrimaryKey,\n            jdynamiccolumns,\n            jnumericcolumns\n          };\n        } else {\n          inputData = { ...inputData,\n            sformname: this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label,\n            sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\n            ssubregtemplatename: this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.label,\n            sprimarykeyname: templatePrimaryKey,\n            jdynamiccolumns,\n            jnumericcolumns\n          };\n        } // this.designtemplatemappingFieldList.map(item => {\n        //     return inputData[\"designtemplatemapping\"][item] = this.state.selectedRecord[item]\n        // });\n\n      } //console.log(\"input:\", inputData);\n\n\n      let postParam = undefined;\n      const inputParam = {\n        classUrl: \"designtemplatemapping\",\n        methodUrl: \"DesignTemplateMapping\",\n        inputData: inputData,\n        operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        dataList: [],\n        dataListCount: [],\n        dataListCountSubSample: [],\n        dataListSubSample: []\n      };\n\n      if (operation === 'configureaudit') {\n        inputParam[\"methodUrl\"] = \"DynamicAudit\";\n        inputParam[\"operation\"] = \"configure\"; //operation = 'configure';\n      }\n\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            dataList: [],\n            dataListCount: [],\n            dataListCountSubSample: [],\n            dataListSubSample: []\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.state = {\n      isOpen: false,\n      designtemplatemappingData: [],\n      masterStatus: \"\",\n      error: \"\",\n      //selectedRecord: {},\n      operation: \"\",\n      screenName: undefined,\n      userLogged: true,\n      selectedDesignTemplateMapping: undefined,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      selectedInput: \"\",\n      masterTypeArray: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NEWMASTER\"\n        }),\n        value: 1,\n        item: {\n          nmastertypecode: 1,\n          smastertype: this.props.intl.formatMessage({\n            id: \"IDS_NEWMASTER\"\n          })\n        }\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EXISTINGMASTER\"\n        }),\n        value: 2,\n        item: {\n          nmastertypecode: 2,\n          smastertype: this.props.intl.formatMessage({\n            id: \"IDS_EXISTINGMASTER\"\n          })\n        }\n      }],\n      newMasterForm: {\n        value: -2,\n        label: \"-\"\n      },\n      moduleTypeArray: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NEWMODULE\"\n        }),\n        value: 3\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EXISTINGMODULE\"\n        }),\n        value: 4\n      }]\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"sregtemplatename\", \"sversionno\", \"stransdisplaystatus\"];\n    this.designtemplatemappingFieldList = ['ndesigntemplatemappingcode', 'nsampletypecode', 'nformcode', 'nregtypecode', 'nregsubtypecode', 'nformwisetypecode', 'nreactregtemplatecode', 'ntransactionstatus', 'nversionno']; //'nmahcode',\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const Layout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata; // let userStatusCSS = \"outline-secondary\";\n    // if (this.props.Login.masterData.selectedDesignTemplateMapping ? this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.ACTIVE\n    //     || this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED : false) {\n    //     userStatusCSS = \"outline-success\";\n    // }\n    // else if (this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.RETIRED) {\n    //     userStatusCSS = \"outline-danger\";\n    // }\n\n    const addId = this.state.controlMap.has(\"AddDesignTemplateMapping\") && this.state.controlMap.get(\"AddDesignTemplateMapping\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\n    const sampleFieldId = this.state.controlMap.has(\"ConfigureSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSampleDisplayFields\").ncontrolcode;\n    const sampleEditFieldId = this.state.controlMap.has(\"ConfigureSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSampleEditableFields\").ncontrolcode;\n    const subSampleFieldId = this.state.controlMap.has(\"ConfigureSubSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSubSampleDisplayFields\").ncontrolcode;\n    const subSampleEditFieldId = this.state.controlMap.has(\"ConfigureSubSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSubSampleEditableFields\").ncontrolcode;\n    const combinationUniqueFieldId = this.state.controlMap.has(\"ConfigureCombinationUniqueFields\") && this.state.controlMap.get(\"ConfigureCombinationUniqueFields\").ncontrolcode; //const sampleAuditConfigId = this.state.controlMap.has(\"ConfigureSampleAuditFields\") && this.state.controlMap.get(\"ConfigureSampleAuditFields\").ncontrolcode;\n\n    const actionList = [];\n\n    if (this.state.userRoleControlRights.indexOf(sampleFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSAMPLEDISPLAY,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREDISPLAYFIELDS\"\n        }),\n        \"controlId\": sampleFieldId\n      });\n    }\n\n    if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.state.userRoleControlRights.indexOf(sampleEditFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSAMPLEEDIT,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREEDITFIELDS\"\n        }),\n        \"controlId\": sampleEditFieldId\n      });\n\n      if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\n        if (this.state.userRoleControlRights.indexOf(subSampleFieldId) !== -1) {\n          actionList.push({\n            \"method\": templateMappingAction.CONFIGSUBSAMPLEDISPLAY,\n            \"value\": this.props.intl.formatMessage({\n              id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\"\n            }),\n            \"controlId\": subSampleFieldId\n          });\n        }\n\n        if (this.state.userRoleControlRights.indexOf(subSampleEditFieldId) !== -1) {\n          actionList.push({\n            \"method\": templateMappingAction.CONFIGSUBSAMPLEEDIT,\n            \"value\": this.props.intl.formatMessage({\n              id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\"\n            }),\n            \"controlId\": subSampleEditFieldId\n          });\n        }\n      }\n    }\n\n    if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGUNIQUE,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\"\n        }),\n        \"controlId\": combinationUniqueFieldId\n      });\n    }\n\n    if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {\n      //sampleAuditConfigId\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSAMPLEAUDIT,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREAUDITFIELDS\"\n        }),\n        \"controlId\": combinationUniqueFieldId\n      });\n    }\n\n    const filterParam = {\n      inputListName: \"DesignTemplateMapping\",\n      selectedObject: \"selectedDesignTemplateMapping\",\n      primaryKeyField: \"ndesigntemplatemappingcode\",\n      fetchUrl: \"designtemplatemapping/getDesignTemplateMapping\",\n      fecthInputObject: {\n        nregtypecode: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1) : -1,\n        nregsubtypecode: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1) : -1,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData[\"realSampleValue\"] ? this.props.Login.masterData[\"realSampleValue\"].value : -1,\n        //nregtypecode: this.props.Login.masterData[\"realRegTypeValue\"] ? this.props.Login.masterData[\"realRegTypeValue\"].value : -1,\n        //nregsubtypecode: this.props.Login.masterData[\"realRegSubTypeValue\"] ? this.props.Login.masterData[\"realRegSubTypeValue\"].value : -1,\n        nformcode: this.props.Login.masterData[\"realFormValue\"] ? this.props.Login.masterData[\"realFormValue\"].value : -1\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    this.validationColumnList = [{\n      \"idsName\": \"IDS_TEMPLATENAME\",\n      \"dataField\": \"nreactregtemplatecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFields = [];\n    this.validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\"); // let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\n    //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\n    //     this.props.Login.userInfo)\n    // const breadCrumbData = [\n\n    let breadCrumbData = [];\n    this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 4 ? breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }, //defaultMasterType\n    // {\n    //     \"label\": \"IDS_MASTERTYPE\",\n    //     \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\n    // },\n    {\n      \"label\": \"IDS_SCREEN\",\n      \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\n    }] : breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\n    }];\n    const addParam = {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_DESIGNTEMPLATEMAPPING\"\n      }),\n      operation: \"create\",\n      userInfo: this.props.Login.userInfo,\n      realSampleValue: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1,\n      realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n      realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n      controlId: addId,\n      moduleTypeArray: this.state.moduleTypeArray\n    }; // console.log(\"render, props, state:\", this.props.Login);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_DESIGNTEMPLATEMAPPING\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.DesignTemplateMapping,\n      getMasterDetail: designtemplatemapping => this.props.getDesignTemplateMappingDetail(designtemplatemapping, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedDesignTemplateMapping,\n      primaryKeyField: \"ndesigntemplatemappingcode\",\n      mainField: \"sregtemplatename\",\n      firstField: \"sversionno\",\n      secondField: \"stransdisplaystatus\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: true,\n      openModal: () => this.props.getDesignTemplateMappingComboService(addParam),\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_TEMPLATEFILTER\": /*#__PURE__*/React.createElement(TemplateFilter, {\n          formatMessage: this.props.intl.formatMessage,\n          filterSampletype: this.state.listSampletype || [],\n          filterRegistrationType: this.state.listRegistrationType || [],\n          filterRegistrationSubType: this.state.listRegistrationSubType || [],\n          filterForms: this.state.listForms || [],\n          defaultsampletype: this.props.Login.masterData[\"defaultsampletype\"] || {},\n          defaultregsubtype: this.props.Login.masterData[\"defaultregsubtype\"] || [],\n          defaultregtype: this.props.Login.masterData[\"defaultregtype\"] || [],\n          defaultform: this.props.Login.masterData.defaultform || [],\n          filterComboChange: this.filterComboChange,\n          masterTypeArray: this.props.Login.masterData.masterTypeArray || [],\n          defaultMasterType: this.props.Login.masterData.defaultMasterType || {},\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping.length > 0 && this.props.Login.masterData.selectedDesignTemplateMapping ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.sregtemplatename)), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      className: \"text-muted font-weight-normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 10,\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 61\n      }\n    }, `${this.props.intl.formatMessage({\n      id: \"IDS_VERSION\"\n    })} : ${this.props.Login.masterData.selectedDesignTemplateMapping.sversionno}`, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.stransdisplaystatus))), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category float-right icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.onApproveClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \" btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //    data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1 // onClick={() => this.ConfirmDelete(this.state.approveId)}>\n      ,\n      onClick: () => this.ConfirmDelete(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 69\n      }\n    })), actionList.length > 0 ? /*#__PURE__*/React.createElement(CustomPopover, {\n      nav: true,\n      data: actionList,\n      Button: false,\n      hideIcon: true,\n      btnClasses: \"btn-circle btn_grey ml-2\",\n      textKey: \"value\",\n      icon: faChevronCircleDown // toolTip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURE\" })}\n      ,\n      dynamicButton: value => this.actionMethod(value),\n      userRoleControlRights: this.state.userRoleControlRights,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 69\n      }\n    }) : \"\"))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.nformcode > 0 && /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MODULENAME\",\n      message: \"Module Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 76\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 65\n      }\n    }, \"   \", this.props.Login.masterData.selectedDesignTemplateMapping.smodulename))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_FORMNAME\",\n      message: \"Form Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.sformname))), /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TEMPLATE\",\n      message: \"Template\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 66\n      }\n    })), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 53\n      }\n    }, Layout ? Layout.map(item => /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 69\n      }\n    }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n      md: 12 / item.children.length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 81\n      }\n    }, column.children.map(component => {\n      return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 101\n        }\n      }, component.children.map(componentrow => componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(Col, {\n        md: 12 / componentrow.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 109\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 113\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 117\n        }\n      }, componentrow.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 117\n        }\n      }, \"-\"))))) : component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 101\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 105\n        }\n      }, component.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 105\n        }\n      }, \" \", \"-\"));\n    }))) : \"\")) : \"\")))) : \"\"))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal // size={(this.props.Login.operation === 'configure'\n      //     || this.props.Login.operation === 'configuresubsample'\n      //     || this.props.Login.operation === 'configureaudit') ? \"xl\" : \"lg\"}\n      ,\n      size: this.props.Login.screenName === 'Design Template Mapping' ? 'lg' : \"xl\",\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' || this.props.Login.operation === 'configureedit' || this.props.Login.operation === 'configuresubsampleedit' || this.props.Login.operation === 'configureunique' || this.props.Login.operation === 'configureaudit' ? [] : mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' ? /*#__PURE__*/React.createElement(ConfigureScreenFields, {\n        operation: this.props.Login.operation,\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ? this.props.Login.dataResult || [] : this.props.Login.dataResult || {},\n        onChangeToggle: this.onChangeToggle,\n        approvedRegSubTypeVersion: this.props.Login.approvedRegSubTypeVersion,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 33\n        }\n      }) : this.props.Login.operation === 'configureedit' || this.props.Login.operation === 'configuresubsampleedit' ? /*#__PURE__*/React.createElement(ConfigureEditFields, {\n        operation: this.props.Login.operation,\n        designData: this.props.Login.editFieldDesignData || {},\n        inputParam: this.props.Login.inputParam,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ? this.props.Login.editFieldDataResult || [] : this.props.Login.editFieldDataResult || {},\n        selectedRecord: this.state.selectedRecord || {} // onChangeToggle={this.onChangeToggle}\n        ,\n        onComboChange: this.onConfigureComboChange // approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\n        ,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 37\n        }\n      }) : this.props.Login.operation === 'configureaudit' ? /*#__PURE__*/React.createElement(ConfigureAuditFields, {\n        operation: this.props.Login.operation,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false,\n        designData: this.props.Login.auditFieldDesignData || {},\n        auditTable: this.props.Login.auditTable || {},\n        auditData: this.props.Login.auditData || {},\n        inputParam: this.props.Login.inputParam,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ? this.props.Login.auditFieldDataResult || [] : this.props.Login.auditFieldDataResult || {},\n        selectedRecord: this.state.selectedRecord || {},\n        onChangeToggle: this.onChangeToggle,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 41\n        }\n      }) : this.props.Login.operation === 'configureunique' ? /*#__PURE__*/React.createElement(ConfigureUniqueFields, {\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam // dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\n        //     this.props.Login.dataResult || [] :\n        //     this.props.Login.dataResult || {}}\n        ,\n        dataList: this.props.Login.dataList || [],\n        dataListCount: this.props.Login.dataListCount || [],\n        dataListsubsample: this.props.Login.dataListSubSample || [],\n        dataListCountsubsample: this.props.Login.dataListCountSubSample || [],\n        onInputOnChange: this.onInputOnChangeForUnique,\n        addCombinatonUnique: this.addCombinatonUnique,\n        deleteCombinationUnique: this.deleteCombinationUnique,\n        slanguagetypecode: this.props.Login.userInfo.slanguagetypecode,\n        approvedRegSubTypeVersion: this.props.Login.approvedRegSubTypeVersion,\n        selectedTemplateType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 45\n        }\n      }) : this.state.showSynonym ? /*#__PURE__*/React.createElement(AddSynonym, {\n        selectedFieldRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        languages: this.props.Login.languageList || [],\n        fieldName: \"nmodulecode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 49\n        }\n      }) : /*#__PURE__*/React.createElement(AddDesignTemplateMapping, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        formatMessage: this.props.intl.formatMessage,\n        designtemplatemappingList: this.props.Login.designtemplatemappingList,\n        subSampleTemplateList: this.props.Login.subSampleTemplateList,\n        selectedDesignTemplateMapping: this.props.Login.masterData.selectedDesignTemplateMapping || {},\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false,\n        designTemplateQualisModule: this.props.Login.designTemplateQualisModule,\n        language: this.props.Login.language,\n        moduleTypeArray: this.state.moduleTypeArray || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 51\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      userRoleControlRights,\n      controlMap,\n      listSampletype,\n      listRegistrationType,\n      listRegistrationSubType,\n      listForms\n    } = this.state;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        updateState = true;\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    const selectedInput = {};\n    let Taglstsampletype;\n    let TaglistRegistrationType;\n    let TaglistRegistrationSubType;\n    let ListFormsMap;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      updateState = true;\n\n      if (this.props.Login.masterData.SampleTypes) {\n        Taglstsampletype = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", undefined);\n        listSampletype = Taglstsampletype.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationTypes) {\n        TaglistRegistrationType = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\n        listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationSubTypes) {\n        TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.registrationSubTypes || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\n        listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.qualisforms) {\n        ListFormsMap = constructOptionList(this.props.Login.masterData.qualisforms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, undefined);\n        listForms = ListFormsMap.get(\"OptionList\");\n      }\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        listSampletype,\n        listRegistrationType,\n        listRegistrationSubType,\n        selectedInput,\n        listForms\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  editFieldConfigService,\n  updateStore,\n  getDesignTemplateMappingDetail,\n  getMappedFieldProps,\n  getDesignTemplateMappingComboService,\n  filterColumnData,\n  auditFieldConfigService,\n  reloadDesignTemplateMapping,\n  getTMPFilterRegType,\n  getTMPFilterRegSubType,\n  getTMPFilterSubmit,\n  combinationUniqueConfigService\n})(injectIntl(DesignTemplateMapping));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/designtemplatemapping/DesignTemplateMapping.jsx"],"names":["React","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faTrashAlt","faThumbsUp","faChevronCircleDown","connect","injectIntl","FormattedMessage","toast","callService","crudMaster","validateEsignCredential","updateStore","getDesignTemplateMappingDetail","getMappedFieldProps","editFieldConfigService","auditFieldConfigService","getDesignTemplateMappingComboService","filterColumnData","reloadDesignTemplateMapping","getTMPFilterRegType","getTMPFilterRegSubType","getTMPFilterSubmit","combinationUniqueConfigService","TemplateFilter","ContentPanel","ReadOnlyText","getControlMap","showEsign","constructOptionList","ListMaster","SlideOutModal","AddDesignTemplateMapping","Esign","DEFAULT_RETURN","BreadcrumbComponent","ListWrapper","designProperties","formCode","SampleType","transactionStatus","templateMappingAction","SAMPLETEMPLATEFIELDS","SUBSAMPLETEMPLATEFIELDS","designComponents","AddSynonym","Affix","ConfirmMessage","ConfigureScreenFields","ConfigureEditFields","ConfigureUniqueFields","ConfigureAuditFields","CustomPopover","mapStateToProps","state","Login","DesignTemplateMapping","Component","constructor","props","filterComboChange","event","fieldname","inputData","userinfo","userInfo","nflag","nsampletypecode","parseInt","value","masterData","defaultsampletype","inputParam","Masters","masterTypeArray","updateInfo","typeName","data","defaultMasterType","qualisforms","defaultform","newMasterForm","nregtypecode","nregsubtypecode","label","defaultregtype","defaultregsubtype","actionMethod","method","CONFIGSAMPLEDISPLAY","openFieldConfiguration","controlId","CONFIGSAMPLEEDIT","editFieldConfiguration","CONFIGSUBSAMPLEDISPLAY","CONFIGSUBSAMPLEEDIT","CONFIGUNIQUE","openCombinationUniqueFieldConfiguration","CONFIGSAMPLEAUDIT","auditFieldConfiguration","reloadData","searchRef","current","realSampleValue","NA","realRegTypeValue","realRegSubTypeValue","nformcode","realFormValue","openFilter","showFilter","closeFilter","onFilterSubmit","onApproveClick","selectedDesignTemplateMapping","ntransactionstatus","RETIRED","jsondata","jdynamiccolumns","jnumericcolumns","templatePrimaryKey","deleteValidation","jsqlquerycolumns","getGridJsondata","ncontrolCode","controlMap","has","get","ncontrolcode","sprimarykeyname","postParam","undefined","Value","inputListName","selectedObject","primaryKeyField","classUrl","methodUrl","operation","saveType","esignNeeded","userRoleControlRights","loadEsign","screenData","openModal","warn","intl","formatMessage","id","ConfirmDelete","confirmMessage","confirm","deleteTemplate","DRAFT","deleteCombinationUnique","index","eventKey","dataList","subsampledataList","dataListCount","subsampledataListCount","slice","addCombinatonUnique","designData","dataListSubSample","dataListCountSubSample","push","length","controlCode","screenName","designtemplatemapping","ndesigntemplatemappingcode","item","napprovalconfigcode","nneedsubsample","validateEsign","sreason","selectedRecord","nreasoncode","spredefinedreason","password","closeModal","selectedId","onComboChange","comboData","fieldName","setState","onConfigureComboChange","onInputOnChange","target","type","name","checked","YES","NO","onInputOnChangeForUnique","radiotext","multilinguallabel","LABEL","VALUE","handleDateChange","dateName","dateValue","templatedata","task","gridItem","gridMoreItem","masterdatefields","masterdateconstraints","masteruniquevalidation","mastercombinationunique","editable","mastertemplatefields","sampleAuditFields","sampleAuditEditable","sampleAuditMultilingualFields","map","row","children","column","component","hasOwnProperty","componentRow","displayname","unique","filterinputtype","comboDataInputObject","componentcode","COMBOBOX","table","stablename","valuemember","nquerybuildertablecode","inputtype","source","displaymember","dateonly","dateConstraintArraySQL","default","columnname","mandatory","templatemandatory","editableuntill","selectedSubSampleTemplate","subsamplejsondata","needsubsample","griditem","gridmoreitem","getJsondata","displayFields","listItem","subsampleeditable","subsamplelistitem","sampledatefields","sampledateconstraints","subsampledatefields","subsampledateconstraints","samplesearchfields","subsamplesearchfields","sampletemplatefields","subsampletemplatefields","sampleuniquevalidation","subsampleuniquevalidation","samplecombinationunique","subsamplecombinationunique","subSampleAuditFields","subSampleAuditEditable","subSampleAuditMultilingualFields","testdatefields","nsubsampletemplatecode","PRIMARYKEY","QUERYBUILDERTABLECODE","readonly","PREREGISTER","child","childData","tablecolumnname","testListFields","obj","sampledisplayfields","samplelistitem","samplegriditem","samplegridmoreitem","SAMPLEREGISTRATION","sampleeditable","RESULTENTRY","APPROVAL","JOBALLOCATION","MYJOBS","WORKLIST","BATCHCREATION","TESTWISEMYJOBS","RELEASE","onChangeToggle","dataItem","field","dataIndex","dataResult","auditFieldDesignData","auditFieldDataResult","tableName","splice","realData","findIndex","x","indexOf","index1","object","Object","keys","index3","index4","index2","onSaveClick","formRef","jsondataobj","editFieldDesignData","formCodeArray","forEach","editableData","editableuntil","statusItem","dataListsubsample","auditdata","auditData","nreactregtemplatecode","dataObject","editmandatoryfields","auditcapturefields","multilingualfields","registrationsample","nmastersitecode","qf_jsonData","sdisplayname","qbt_jsonData","tablename","languageList","lang","sformname","qm_jsonData","nmodulecode","smoduledisplayname","sregtemplatename","ssubregtemplatename","onTabChange","tabProps","isOpen","designtemplatemappingData","masterStatus","error","userLogged","Map","showAccordian","selectedInput","nmastertypecode","smastertype","moduleTypeArray","createRef","searchFieldList","designtemplatemappingFieldList","getDerivedStateFromProps","render","Layout","addId","deleteId","approveId","sampleFieldId","sampleEditFieldId","subSampleFieldId","subSampleEditFieldId","combinationUniqueFieldId","actionList","filterParam","fetchUrl","fecthInputObject","validationColumnList","mandatoryFields","breadCrumbData","addParam","searchedData","listSampletype","listRegistrationType","listRegistrationSubType","listForms","sversionno","APPROVED","stransdisplaystatus","smodulename","componentrow","approvedRegSubTypeVersion","editFieldDataResult","auditTable","slanguagetypecode","showSynonym","designtemplatemappingList","subSampleTemplateList","designTemplateQualisModule","language","componentDidUpdate","previousProps","updateState","values","Taglstsampletype","TaglistRegistrationType","TaglistRegistrationSubType","ListFormsMap","SampleTypes","registrationTypes","registrationSubTypes","componentWillUnmount","modalName"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,SAA9B,EAAyCC,SAAzC,QAA0D,iBAA1D;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,mBAAjC,QAA4D,mCAA5D,C,CAAgG;AAChG;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,YAA7C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SACIC,WADJ,EACiBC,UADjB,EAC6BC,uBAD7B,EACsDC,WADtD,EACmEC,8BADnE,EAEIC,mBAFJ,EAEyBC,sBAFzB,EAEiDC,uBAFjD,EAGIC,oCAHJ,EAG0CC,gBAH1C,EAG4DC,2BAH5D,EAIIC,mBAJJ,EAIyBC,sBAJzB,EAIiDC,kBAJjD,EAIqEC,8BAJrE,QAKO,eALP;AAMA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,6BAA3C;AACA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,mBAAnC,QAA8D,+BAA9D,C,CAA8F;;AAC9F,OAAOC,UAAP,MAAuB,oDAAvB,C,CACA;;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SACIC,gBADJ,EACsBC,QADtB,EACgCC,UADhC,EAC4CC,iBAD5C,EAEIC,qBAFJ,EAE2B;AACvB;AACAC,oBAJJ,EAI0BC,uBAJ1B,EAImDC,gBAJnD,QAKO,8BALP;AAOA,OAAOC,UAAP,MAAuB,sCAAvB;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,OAAOC,cAAP,MAA2B,0DAA3B,C,CACA;;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,qBAAP,MAAkC,6BAAlC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,aAAP,MAA0B,gCAA1B,C,CACA;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAIA,MAAMC,qBAAN,SAAoC9D,KAAK,CAAC+D,SAA1C,CAAoD;AAChDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAGf;AACA;AACA;AACA;;AANe,SAwDnBC,iBAxDmB,GAwDC,CAACC,KAAD,EAAQC,SAAR,KAAsB;AACtC,UAAID,KAAK,KAAK,IAAd,EAAoB;AAChB;AACA,YAAIE,SAAS,GAAG,EAAhB;;AACA,YAAID,SAAS,KAAK,YAAlB,EAAgC;AAE5BC,UAAAA,SAAS,GAAG;AACRC,YAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU,QADnB;AAERC,YAAAA,KAAK,EAAE,CAFC;AAGRC,YAAAA,eAAe,EAAEC,QAAQ,CAACP,KAAK,CAACQ,KAAP;AAHjB,WAAZ;AAMA,cAAIC,UAAU,GAAG,EAAE,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAtB;AAAkCC,YAAAA,iBAAiB,EAAEV;AAArD,WAAjB;AACA,cAAIW,UAAU,GAAG;AAAEF,YAAAA,UAAF;AAAcP,YAAAA;AAAd,WAAjB;;AACA,cAAIF,KAAK,CAACQ,KAAN,KAAgB9B,UAAU,CAACkC,OAA/B,EAAwC;AACpC,kBAAMC,eAAe,GAAG,KAAKpB,KAAL,CAAWoB,eAAnC;AAEA,kBAAMC,UAAU,GAAG;AACfC,cAAAA,QAAQ,EAAE1C,cADK;AAEf2C,cAAAA,IAAI,EAAE;AACFP,gBAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAERI,kBAAAA,eAFQ;AAGRI,kBAAAA,iBAAiB,EAAEJ,eAAe,CAAC,CAAD,CAH1B;AAIRK,kBAAAA,WAAW,EAAE,EAJL;AAISC,kBAAAA,WAAW,EAAE,KAAK1B,KAAL,CAAW2B,aAJjC;AAKRC,kBAAAA,YAAY,EAAE,CAAC,CALP;AAKUC,kBAAAA,eAAe,EAAE,CAAC;AAL5B;AADV;AAFS,aAAnB;AAaA,iBAAKxB,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH,WAjBD,MAkBK;AACDH,YAAAA,UAAU,CAAC,YAAD,CAAV,CAAyB,aAAzB,IAA0C;AAAEH,cAAAA,KAAK,EAAE,CAAC,CAAV;AAAae,cAAAA,KAAK,EAAE;AAApB,aAA1C;AACA,iBAAKzB,KAAL,CAAWvC,mBAAX,CAA+BoD,UAA/B;AACH;AACJ,SAhCD,MAiCK,IAAIV,SAAS,KAAK,kBAAlB,EAAsC;AAEvCC,UAAAA,SAAS,GAAG;AACRC,YAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU,QADnB;AAGRiB,YAAAA,YAAY,EAAEd,QAAQ,CAACP,KAAK,CAACQ,KAAP,CAHd;AAIRF,YAAAA,eAAe,EAAE,KAAKR,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BC,iBAA5B,CAA8CF;AAJvD,WAAZ;AAOA,cAAIC,UAAU,GAAG,EAAE,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAtB;AAAkCe,YAAAA,cAAc,EAAExB;AAAlD,WAAjB;AACA,cAAIW,UAAU,GAAG;AAAEF,YAAAA,UAAF;AAAcP,YAAAA;AAAd,WAAjB;AACA,eAAKJ,KAAL,CAAWtC,sBAAX,CAAkCmD,UAAlC;AAEH,SAbI,MAaE,IAAIV,SAAS,KAAK,qBAAlB,EAAyC;AAE5C,cAAIQ,UAAU,GAAG,EAAE,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAtB;AAAkCgB,YAAAA,iBAAiB,EAAEzB;AAArD,WAAjB;AACA,gBAAMc,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAE1C,cADK;AAEf2C,YAAAA,IAAI,EAAE;AAAEP,cAAAA;AAAF;AAFS,WAAnB;AAKA,eAAKX,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH,SATM,MAUF,IAAIb,SAAS,KAAK,YAAlB,EAAgC;AAEjC,cAAIQ,UAAU,GAAG,EAAE,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAtB;AAAkCQ,YAAAA,iBAAiB,EAAEjB;AAArD,WAAjB;AAEAE,UAAAA,SAAS,GAAG;AACRC,YAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU,QADnB;AAERC,YAAAA,KAAK,EAAE,CAFC;AAGRC,YAAAA,eAAe,EAAE5B,UAAU,CAACkC;AAHpB,WAAZ;AAMA,cAAID,UAAU,GAAG;AAAEF,YAAAA,UAAF;AAAcP,YAAAA;AAAd,WAAjB;;AACA,cAAIF,KAAK,CAACQ,KAAN,KAAgB,CAApB,EAAuB;AACnB,kBAAMM,UAAU,GAAG;AACfC,cAAAA,QAAQ,EAAE1C,cADK;AAEf2C,cAAAA,IAAI,EAAE;AAAEP,gBAAAA,UAAU,EAAE,EAAE,GAAGA,UAAL;AAAiBS,kBAAAA,WAAW,EAAE,EAA9B;AAAkCC,kBAAAA,WAAW,EAAE,KAAK1B,KAAL,CAAW2B;AAA1D;AAAd;AAFS,aAAnB;AAKA,iBAAKtB,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH,WAPD,MAQK;AACD,iBAAKhB,KAAL,CAAWvC,mBAAX,CAA+BoD,UAA/B;AACH;AAEJ,SAvBI,MAuBE;AACH,cAAIF,UAAU,GAAG,EAAE,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAtB;AAAkCU,YAAAA,WAAW,EAAEnB;AAA/C,WAAjB;AACA,gBAAMc,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAE1C,cADK;AAEf2C,YAAAA,IAAI,EAAE;AAAEP,cAAAA;AAAF;AAFS,WAAnB;AAKA,eAAKX,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH;AACJ;AACJ,KArJkB;;AAAA,SA6pBnBY,YA7pBmB,GA6pBHlB,KAAD,IAAW;AACtB,UAAIA,KAAK,CAACmB,MAAN,KAAiB/C,qBAAqB,CAACgD,mBAA3C,EAAgE;AAC5D,aAAKC,sBAAL,CAA4BrB,KAAK,CAACsB,SAAlC,EAA6C,WAA7C;AACH,OAFD,MAGK,IAAItB,KAAK,CAACmB,MAAN,KAAiB/C,qBAAqB,CAACmD,gBAA3C,EAA6D;AAC9D,aAAKC,sBAAL,CAA4BxB,KAAK,CAACsB,SAAlC,EAA6C,eAA7C;AACH,OAFI,MAGA,IAAItB,KAAK,CAACmB,MAAN,KAAiB/C,qBAAqB,CAACqD,sBAA3C,EAAmE;AACpE,aAAKJ,sBAAL,CAA4BrB,KAAK,CAACsB,SAAlC,EAA6C,oBAA7C;AACH,OAFI,MAGA,IAAItB,KAAK,CAACmB,MAAN,KAAiB/C,qBAAqB,CAACsD,mBAA3C,EAAgE;AACjE,aAAKF,sBAAL,CAA4BxB,KAAK,CAACsB,SAAlC,EAA6C,wBAA7C;AACH,OAFI,MAGA,IAAItB,KAAK,CAACmB,MAAN,KAAiB/C,qBAAqB,CAACuD,YAA3C,EAAyD;AAC1D,aAAKC,uCAAL,CAA6C5B,KAAK,CAACsB,SAAnD;AACH,OAFI,MAGA,IAAItB,KAAK,CAACmB,MAAN,KAAiB/C,qBAAqB,CAACyD,iBAA3C,EAA8D;AAC/D,aAAKC,uBAAL,CAA6B9B,KAAK,CAACsB,SAAnC,EAA8C,gBAA9C;AACH;AACJ,KAhrBkB;;AAAA,SAqrBnBS,UArrBmB,GAqrBN,MAAM;AACf,WAAKC,SAAL,CAAeC,OAAf,CAAuBjC,KAAvB,GAA+B,EAA/B;AAEA,UAAIN,SAAS,GAAG;AACZC,QAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU,QADf;AAEZiB,QAAAA,YAAY,EAAE,KAAKvB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2EjC,iBAAiB,CAACgE,EAA7F,GAAkGpC,QAAQ,CAAC,KAAKT,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmC,gBAA5B,GAA+C,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmC,gBAA5B,CAA6CpC,KAA7C,IAAsD,CAAC,CAAtG,GAA0G,CAAC,CAA5G,CAF5G;AAGZc,QAAAA,eAAe,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2EjC,iBAAiB,CAACgE,EAA7F,GAAkGpC,QAAQ,CAAC,KAAKT,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,GAAkD,KAAK/C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,CAAgDrC,KAAhD,IAAyD,CAAC,CAA5G,GAAgH,CAAC,CAAlH,CAH/G;AAKZ;AACA;AACAF,QAAAA,eAAe,EAAE,KAAKR,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAPjD;AAQZsC,QAAAA,SAAS,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsC,aAA5B,GAA4C,KAAKjD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,eAA5B,EAA6CD,KAAzF,GAAiG,CAAC;AARjG,OAAhB;AAWA,UAAIG,UAAU,GAAG;AAAEF,QAAAA,UAAU,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAA/B;AAA2CP,QAAAA;AAA3C,OAAjB;AACA,WAAKJ,KAAL,CAAWxC,2BAAX,CAAuCqD,UAAvC;AAGH,KAvsBkB;;AAAA,SAowBnBqC,UApwBmB,GAowBN,MAAM;AACf,UAAIC,UAAU,GAAG,CAAC,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBuD,UAAnC;AACA,YAAMnC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE1C,cADK;AAEf2C,QAAAA,IAAI,EAAE;AAAEiC,UAAAA;AAAF;AAFS,OAAnB;AAIA,WAAKnD,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH,KA3wBkB;;AAAA,SA6wBnBoC,WA7wBmB,GA6wBL,MAAM;AAEhB,YAAMpC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE1C,cADK;AAEf2C,QAAAA,IAAI,EAAE;AAAEiC,UAAAA,UAAU,EAAE;AAAd;AAFS,OAAnB;AAIA,WAAKnD,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH,KApxBkB;;AAAA,SAsxBnBqC,cAtxBmB,GAsxBF,MAAM;AAEnB,UAAIjD,SAAS,GAAG;AACZC,QAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU,QADf;AAEZiB,QAAAA,YAAY,EAAE,KAAKvB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BC,iBAA5B,CAA8CF,KAA9C,KAAwD9B,UAAU,CAACkC,OAAnE,GAA6EjC,iBAAiB,CAACgE,EAA/F,GAAoGpC,QAAQ,CAAC,KAAKT,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4Be,cAA5B,GAA6C,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4Be,cAA5B,CAA2ChB,KAA3C,IAAoD,CAAC,CAAlG,GAAsG,CAAC,CAAxG,CAF9G;AAGZc,QAAAA,eAAe,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BC,iBAA5B,CAA8CF,KAA9C,KAAwD9B,UAAU,CAACkC,OAAnE,GAA6EjC,iBAAiB,CAACgE,EAA/F,GAAoGpC,QAAQ,CAAC,KAAKT,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BgB,iBAA5B,GAAgD,KAAK3B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BgB,iBAA5B,CAA8CjB,KAA9C,IAAuD,CAAC,CAAxG,GAA4G,CAAC,CAA9G,CAHjH;AAIZF,QAAAA,eAAe,EAAE,KAAKR,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BC,iBAA5B,CAA8CF,KAJnD;AAKZsC,QAAAA,SAAS,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BU,WAA5B,GAA0C,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BU,WAA5B,CAAwCX,KAAxC,IAAiD,CAAC,CAA5F,GAAgG,CAAC;AALhG,OAAhB;AAQA,UAAIC,UAAU,GAAG,EACb,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UADP;AAEbiC,QAAAA,eAAe,EAAE,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BC,iBAFhC;AAGbqC,QAAAA,aAAa,EAAE,KAAKjD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BU,WAH9B;AAIbyB,QAAAA,gBAAgB,EAAE,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4Be,cAJjC;AAKbqB,QAAAA,mBAAmB,EAAE,KAAK/C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BgB;AALpC,OAAjB;AAOA,UAAId,UAAU,GAAG;AAAEF,QAAAA,UAAF;AAAcP,QAAAA;AAAd,OAAjB;AACA,WAAKJ,KAAL,CAAWrC,kBAAX,CAA8BkD,UAA9B;AACH,KAzyBkB;;AAAA,SA2yBnByC,cA3yBmB,GA2yBF,MAAM;AACnB,UAAI,KAAKtD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DC,kBAA1D,KAAiF3E,iBAAiB,CAAC4E,OAAvG,EAAgH;AAE5G;AACA;AAEA,YAAI;AAAEC,UAAAA,QAAF;AAAYC,UAAAA,eAAZ;AAA6BC,UAAAA,eAA7B;AAA8CC,UAAAA,kBAA9C;AAAkEC,UAAAA,gBAAlE;AAAoFC,UAAAA;AAApF,YAAyG,KAAKC,eAAL,CAAqB,KAAKhE,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,IAC9H,KAAKvD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DG,QAD+C,EACrC,kBADqC,CAA7G,CAL4G,CAQ5G;;AACA,cAAMO,YAAY,GAAG,KAAKtE,KAAL,CAAWuE,UAAX,CAAsBC,GAAtB,CAA0B,8BAA1B,KAA6D,KAAKxE,KAAL,CAAWuE,UAAX,CAAsBE,GAAtB,CAA0B,8BAA1B,EAA0DC,YAA5I;AACA,YAAIjE,SAAS,GAAG;AAAEuD,UAAAA,eAAF;AAAmBC,UAAAA,eAAnB;AAAoCG,UAAAA,gBAApC;AAAsDO,UAAAA,eAAe,EAAET;AAAvE,SAAhB;AACAzD,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBU,QAAzC;AAEA,YAAIiE,SAAS,GAAGC,SAAhB;AACApE,QAAAA,SAAS,CAAC,uBAAD,CAAT,GAAqC;AAAE,wCAA8B,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0D,4BAA1D,IAA0F,KAAKvD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0D,4BAA1D,EAAwFkB,KAAlL,GAA0L;AAA1N,SAArC;AACArE,QAAAA,SAAS,CAAC,uBAAD,CAAT,GAAqC,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAAjE;AACAnD,QAAAA,SAAS,CAAC,sBAAD,CAAT,GAAoC0D,gBAApC;AACAS,QAAAA,SAAS,GAAG;AAAEG,UAAAA,aAAa,EAAE,uBAAjB;AAA0CC,UAAAA,cAAc,EAAE,+BAA1D;AAA2FC,UAAAA,eAAe,EAAE;AAA5G,SAAZ;AAEA,cAAM/D,UAAU,GAAG;AACfT,UAAAA,SAAS,EAAE,EACP,GAAGA;AADI,WADI;AAKfyE,UAAAA,QAAQ,EAAE,uBALK;AAMfC,UAAAA,SAAS,EAAE,uBANI;AAOf1E,UAAAA,SAAS,EAAEA,SAPI;AAQf2E,UAAAA,SAAS,EAAE,SARI;AAQOR,UAAAA;AARP,SAAnB;AAUA,YAAIS,QAAJ,CA7B4G,CA+B5G;;AACA,cAAMrE,UAAU,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAApC;AAEA,cAAMsE,WAAW,GAAGhH,SAAS,CAAC,KAAK+B,KAAL,CAAWJ,KAAX,CAAiBsF,qBAAlB,EAAyC,KAAKlF,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0B0C,SAAnE,EAA8EiB,YAA9E,CAA7B;;AACA,YAAIgB,WAAJ,EAAiB;AACb,gBAAMjE,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAE1C,cADK;AAEf2C,YAAAA,IAAI,EAAE;AACFiE,cAAAA,SAAS,EAAE,IADT;AACeC,cAAAA,UAAU,EAAE;AAAEvE,gBAAAA,UAAF;AAAcF,gBAAAA;AAAd,eAD3B;AACuDqE,cAAAA,QADvD;AACiEK,cAAAA,SAAS,EAAE,IAD5E;AACkFN,cAAAA,SAAS,EAAE;AAD7F;AAFS,WAAnB;AAMA,eAAK/E,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH,SARD,MASK;AACD,eAAKhB,KAAL,CAAWjD,UAAX,CAAsB8D,UAAtB,EAAkCF,UAAlC,EAA8C,WAA9C;AACH;AAEJ,OAhDD,MAiDK;AAED9D,QAAAA,KAAK,CAACyI,IAAN,CAAW,KAAKtF,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KAj2BkB;;AAAA,SAm2BnBC,aAn2BmB,GAm2BH,MAAM;AAClB,WAAKC,cAAL,CAAoBC,OAApB,CAA4B,eAA5B,EAA6C,KAAK5F,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA7C,EAAkG,KAAKzF,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAlG,EACI,KAAKzF,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADJ,EACqD,KAAKzF,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADrD,EAEI,MAAM,KAAKI,cAAL,EAFV;AAGH,KAv2BkB;;AAAA,SAy2BnBA,cAz2BmB,GAy2BF,MAAM;AACnB,UAAK,KAAK7F,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DC,kBAA1D,KAAiF3E,iBAAiB,CAACiH,KAAxG,EAAgH;AAC5G,cAAM7B,YAAY,GAAG,KAAKtE,KAAL,CAAWuE,UAAX,CAAsBC,GAAtB,CAA0B,6BAA1B,KAA4D,KAAKxE,KAAL,CAAWuE,UAAX,CAAsBE,GAAtB,CAA0B,6BAA1B,EAAyDC,YAA1I;AACA,YAAIjE,SAAS,GAAG,EAAhB;AACAA,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBU,QAAzC;AAEA,YAAIiE,SAAS,GAAGC,SAAhB;AACApE,QAAAA,SAAS,CAAC,uBAAD,CAAT,GAAqC;AAAE,wCAA8B,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0D,4BAA1D,IAA0F,KAAKvD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0D,4BAA1D,EAAwFkB,KAAlL,GAA0L;AAA1N,SAArC;AACArE,QAAAA,SAAS,CAAC,uBAAD,CAAT,GAAqC,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAAjE;AACAgB,QAAAA,SAAS,GAAG;AAAEG,UAAAA,aAAa,EAAE,uBAAjB;AAA0CC,UAAAA,cAAc,EAAE,+BAA1D;AAA2FC,UAAAA,eAAe,EAAE;AAA5G,SAAZ;AAGA,cAAM/D,UAAU,GAAG;AACfT,UAAAA,SAAS,EAAE;AACP,wBAAY,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBU;AADtB,WADI;AAKfuE,UAAAA,QAAQ,EAAE,uBALK;AAMfC,UAAAA,SAAS,EAAE,uBANI;AAOf1E,UAAAA,SAAS,EAAEA,SAPI;AAQf2E,UAAAA,SAAS,EAAE,QARI;AAQMR,UAAAA;AARN,SAAnB;AAUA,YAAIS,QAAJ;AAEA,cAAMrE,UAAU,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAApC;AAEA,cAAMsE,WAAW,GAAGhH,SAAS,CAAC,KAAK+B,KAAL,CAAWJ,KAAX,CAAiBsF,qBAAlB,EAAyC,KAAKlF,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0B0C,SAAnE,EAA8EiB,YAA9E,CAA7B;;AACA,YAAIgB,WAAJ,EAAiB;AACb,gBAAMjE,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAE1C,cADK;AAEf2C,YAAAA,IAAI,EAAE;AACFiE,cAAAA,SAAS,EAAE,IADT;AACeC,cAAAA,UAAU,EAAE;AAAEvE,gBAAAA,UAAF;AAAcF,gBAAAA;AAAd,eAD3B;AACuDqE,cAAAA,QADvD;AACiEK,cAAAA,SAAS,EAAE,IAD5E;AACkFN,cAAAA,SAAS,EAAE;AAD7F;AAFS,WAAnB;AAMA,eAAK/E,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH,SARD,MASK;AACD,eAAKhB,KAAL,CAAWjD,UAAX,CAAsB8D,UAAtB,EAAkCF,UAAlC,EAA8C,WAA9C;AACH;AAEJ,OAvCD,MAwCK;AAED9D,QAAAA,KAAK,CAACyI,IAAN,CAAW,KAAKtF,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KAt5BkB;;AAAA,SAw5BnBM,uBAx5BmB,GAw5BO,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,UAAIA,QAAQ,KAAK,WAAjB,EAA8B;AAC1B,YAAIC,QAAQ,GAAG,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBuG,iBAAjB,IAAsC,EAArD;AACA,YAAIC,aAAa,GAAG,KAAKpG,KAAL,CAAWJ,KAAX,CAAiByG,sBAAjB,IAA2C,EAA/D;AACAD,QAAAA,aAAa,GAAG,CAAC,GAAGA,aAAa,CAACE,KAAd,CAAoB,CAApB,EAAuBN,KAAvB,CAAJ,EAAmC,GAAGI,aAAa,CAACE,KAAd,CAAoBN,KAAK,GAAG,CAA5B,CAAtC,CAAhB,CAH0B,CAI1B;;AACA,YAAIE,QAAQ,CAACF,KAAD,CAAR,IAAmBE,QAAQ,CAACF,KAAD,CAAR,KAAoB,IAA3C,EAAiD;AAC7CE,UAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAQ,CAACI,KAAT,CAAe,CAAf,EAAkBN,KAAlB,CAAJ,EAA8B,GAAGE,QAAQ,CAACI,KAAT,CAAeN,KAAK,GAAG,CAAvB,CAAjC,CAAX,CAD6C,CAG7C;AACH;;AACD,cAAMhF,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE1C,cADK;AAEf2C,UAAAA,IAAI,EAAE;AAAEmF,YAAAA,sBAAsB,EAAED,aAA1B;AAAyCD,YAAAA,iBAAiB,EAAED;AAA5D;AAFS,SAAnB;AAIA,aAAKlG,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH,OAfD,MAeO;AACH,YAAIkF,QAAQ,GAAG,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBsG,QAAjB,IAA6B,EAA5C;AACA,YAAIE,aAAa,GAAG,KAAKpG,KAAL,CAAWJ,KAAX,CAAiBwG,aAAjB,IAAkC,EAAtD;AACAA,QAAAA,aAAa,GAAG,CAAC,GAAGA,aAAa,CAACE,KAAd,CAAoB,CAApB,EAAuBN,KAAvB,CAAJ,EAAmC,GAAGI,aAAa,CAACE,KAAd,CAAoBN,KAAK,GAAG,CAA5B,CAAtC,CAAhB,CAHG,CAIH;;AACA,YAAIE,QAAQ,CAACF,KAAD,CAAR,IAAmBE,QAAQ,CAACF,KAAD,CAAR,KAAoB,IAA3C,EAAiD;AAC7CE,UAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAQ,CAACI,KAAT,CAAe,CAAf,EAAkBN,KAAlB,CAAJ,EAA8B,GAAGE,QAAQ,CAACI,KAAT,CAAeN,KAAK,GAAG,CAAvB,CAAjC,CAAX,CAD6C,CAG7C;AACH;;AACD,cAAMhF,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE1C,cADK;AAEf2C,UAAAA,IAAI,EAAE;AAAEkF,YAAAA,aAAF;AAAiBF,YAAAA;AAAjB;AAFS,SAAnB;AAIA,aAAKlG,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH;AAEJ,KAz7BkB;;AAAA,SA27BnBuF,mBA37BmB,GA27BG,CAACC,UAAD,EAAaP,QAAb,KAA0B;AAC5C,UAAIA,QAAQ,KAAK,WAAjB,EAA8B;AAC1B,cAAMC,QAAQ,GAAG,KAAKlG,KAAL,CAAWJ,KAAX,CAAiB6G,iBAAjB,IAAsC,EAAvD,CAD0B,CAE1B;AACA;AACA;AACA;AACA;;AACA,cAAML,aAAa,GAAG,KAAKpG,KAAL,CAAWJ,KAAX,CAAiB8G,sBAAjB,IAA2C,EAAjE;AACAN,QAAAA,aAAa,CAACO,IAAd,CAAmBP,aAAa,CAACQ,MAAd,GAAuB,CAA1C;AACAV,QAAAA,QAAQ,CAACS,IAAT,CAAc,EAAd;AACA,cAAM3F,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE1C,cADK;AAEf2C,UAAAA,IAAI,EAAE;AAAEwF,YAAAA,sBAAsB,EAAEN,aAA1B;AAAyCK,YAAAA,iBAAiB,EAAEP;AAA5D;AAFS,SAAnB;AAIA,aAAKlG,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH,OAfD,MAeO;AACH,cAAMkF,QAAQ,GAAG,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBsG,QAAjB,IAA6B,EAA9C,CADG,CAEH;AACA;AACA;AACA;AACA;;AACA,cAAME,aAAa,GAAG,KAAKpG,KAAL,CAAWJ,KAAX,CAAiBwG,aAAjB,IAAkC,EAAxD;AACAA,QAAAA,aAAa,CAACO,IAAd,CAAmBP,aAAa,CAACQ,MAAd,GAAuB,CAA1C;AACAV,QAAAA,QAAQ,CAACS,IAAT,CAAc,EAAd;AACA,cAAM3F,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE1C,cADK;AAEf2C,UAAAA,IAAI,EAAE;AAAEkF,YAAAA,aAAF;AAAiBF,YAAAA;AAAjB;AAFS,SAAnB;AAIA,aAAKlG,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH;AAEJ,KA59BkB;;AAAA,SA89BnBsB,uCA99BmB,GA89BwBuE,WAAD,IAAiB;AACvD,UAAIxB,SAAS,GAAG,IAAhB;AACA,UAAIN,SAAS,GAAG,iBAAhB;AACA,UAAIV,YAAY,GAAGwC,WAAnB;AACA,UAAIC,UAAU,GAAG,YAAjB;AACA,UAAIjG,UAAU,GAAG;AACbT,QAAAA,SAAS,EAAE;AACP2G,UAAAA,qBAAqB,EAAE;AACnBC,YAAAA,0BAA0B,EAAE,KAAKhH,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DyD;AADnE,WADhB;AAIP3G,UAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU;AAJpB,SADE;AAObyE,QAAAA,SAPa;AAQbV,QAAAA,YARa;AASbyC,QAAAA;AATa,OAAjB;;AAWA,UAAI,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,IAA+C,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAApH,EAA6H;AACzHD,QAAAA,UAAU,CAACT,SAAX,CAAqB,qBAArB,IAA8C,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BgB,iBAA5B,CAA8CsF,IAA9C,CAAmDC,mBAAjG;AACH;;AACDrG,MAAAA,UAAU,CAAC,YAAD,CAAV,GAA2B,KAAKb,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAAvE;AAEA,WAAKV,KAAL,CAAWpC,8BAAX,CAA0CiD,UAA1C;AACH,KAp/BkB;;AAAA,SAs/BnBkB,sBAt/BmB,GAs/BM,CAAC8E,WAAD,EAAc9B,SAAd,KAA4B;AACjD,UAAIM,SAAS,GAAG,IAAhB,CADiD,CAEjD;;AACA,UAAIhB,YAAY,GAAGwC,WAAnB;AACA,UAAIC,UAAU,GAAG,YAAjB;AACA,UAAIjG,UAAU,GAAG;AACbT,QAAAA,SAAS,EAAE;AACP2G,UAAAA,qBAAqB,EAAE;AACnBC,YAAAA,0BAA0B,EAAE,KAAKhH,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DyD;AADnE,WADhB;AAIP3G,UAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU;AAJpB,SADE;AAObyE,QAAAA,SAPa;AAQbV,QAAAA,YARa;AASbyC,QAAAA;AATa,OAAjB;;AAWA,UAAI,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,IAA+C,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAApH,EAA6H;AACzHD,QAAAA,UAAU,CAACT,SAAX,CAAqB,qBAArB,IAA8C,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BgB,iBAA5B,CAA8CsF,IAA9C,CAAmDC,mBAAjG;AACH;;AACDrG,MAAAA,UAAU,CAAC,YAAD,CAAV,GAA2B,KAAKb,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAAvE;AAEA,WAAKV,KAAL,CAAW7C,mBAAX,CAA+B0D,UAA/B;AACH,KA5gCkB;;AAAA,SA8gCnBqB,sBA9gCmB,GA8gCM,CAAC2E,WAAD,EAAc9B,SAAd,KAA4B;AAEjD;AACA;AACA,UAAIV,YAAY,GAAGwC,WAAnB;AACA,UAAIC,UAAU,GAAG,YAAjB;AACA,UAAIjG,UAAU,GAAG;AACbT,QAAAA,SAAS,EAAE;AACP2G,UAAAA,qBAAqB,EAAE;AACnBC,YAAAA,0BAA0B,EAAE,KAAKhH,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DyD;AADnE,WADhB;AAIPzF,UAAAA,YAAY,EAAE,KAAKvB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4Be,cAA5B,CAA2ChB,KAJlD;AAKPc,UAAAA,eAAe,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BgB,iBAA5B,CAA8CjB,KALxD;AAMPL,UAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU;AANpB,SADE;AASbyE,QAAAA,SATa;AAUbV,QAAAA,YAVa;AAWbyC,QAAAA;AAXa,OAAjB,CANiD,CAmBjD;AACA;AACA;;AACAjG,MAAAA,UAAU,CAAC,YAAD,CAAV,GAA2B,KAAKb,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAAvE;AAEA,WAAKV,KAAL,CAAW5C,sBAAX,CAAkCyD,UAAlC;AACH,KAviCkB;;AAAA,SAyiCnB2B,uBAziCmB,GAyiCO,CAACqE,WAAD,EAAc9B,SAAd,KAA4B;AAElD;AACA,UAAIV,YAAY,GAAGwC,WAAnB;AACA,UAAIC,UAAU,GAAG,YAAjB;AACA,UAAIjG,UAAU,GAAG;AACbT,QAAAA,SAAS,EAAE;AACP2G,UAAAA,qBAAqB,EAAE;AACnBC,YAAAA,0BAA0B,EAAE,KAAKhH,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DyD;AADnE,WADhB;AAIPzF,UAAAA,YAAY,EAAE,KAAKvB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GACR,CAAC,CADO,GACH,KAAKd,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4Be,cAA5B,GACD,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4Be,cAA5B,CAA2ChB,KAD1C,GACkD,CAAC,CANvD;AAOPc,UAAAA,eAAe,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GACX,CAAC,CADU,GACN,KAAKd,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BgB,iBAA5B,GACD,KAAK3B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BgB,iBAA5B,CAA8CjB,KAD7C,GACqD,CAAC,CAT1D;AAUP;AACA;AACAL,UAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU,QAZpB;AAaP6G,UAAAA,cAAc,EAAE,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BgB,iBAA5B,CAA8CsF,IAA9C,CAAmDE;AAb5D,SADE;AAgBbpC,QAAAA,SAhBa;AAiBbV,QAAAA,YAjBa;AAkBbyC,QAAAA;AAlBa,OAAjB;AAoBAjG,MAAAA,UAAU,CAAC,YAAD,CAAV,GAA2B,KAAKb,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAAvE;AAEA,WAAKV,KAAL,CAAW3C,uBAAX,CAAmCwD,UAAnC;AACH,KArkCkB;;AAAA,SAukCnBuG,aAvkCmB,GAukCH,MAAM;AAClB,YAAMvG,UAAU,GAAG;AACfT,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBU,QADZ;AAER+G,YAAAA,OAAO,EAAE,KAAK1H,KAAL,CAAW2H,cAAX,CAA0B,eAA1B,CAFD;AAGRC,YAAAA,WAAW,EAAE,KAAK5H,KAAL,CAAW2H,cAAX,CAA0B,aAA1B,KAA4C,KAAK3H,KAAL,CAAW2H,cAAX,CAA0B,aAA1B,EAAyC5G,KAH1F;AAIR8G,YAAAA,iBAAiB,EAAE,KAAK7H,KAAL,CAAW2H,cAAX,CAA0B,aAA1B,KAA4C,KAAK3H,KAAL,CAAW2H,cAAX,CAA0B,aAA1B,EAAyC7F;AAJhG,WADL;AAQPgG,UAAAA,QAAQ,EAAE,KAAK9H,KAAL,CAAW2H,cAAX,CAA0B,eAA1B;AARH,SADI;AAWflC,QAAAA,UAAU,EAAE,KAAKpF,KAAL,CAAWJ,KAAX,CAAiBwF;AAXd,OAAnB;AAcA,WAAKpF,KAAL,CAAWhD,uBAAX,CAAmC6D,UAAnC,EAA+C,WAA/C;AACH,KAvlCkB;;AAAA,SAylCnB6G,UAzlCmB,GAylCN,MAAM;AACf,UAAIvC,SAAS,GAAG,KAAKnF,KAAL,CAAWJ,KAAX,CAAiBuF,SAAjC;AACA,UAAIE,SAAS,GAAG,KAAKrF,KAAL,CAAWJ,KAAX,CAAiByF,SAAjC;AACA,UAAIiC,cAAc,GAAG,KAAKtH,KAAL,CAAWJ,KAAX,CAAiB0H,cAAtC;;AACA,UAAI,KAAKtH,KAAL,CAAWJ,KAAX,CAAiBuF,SAArB,EAAgC;AAC5B,YAAI,KAAKnF,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjB,KAA+B,SAA/B,IACG,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjB,KAA+B,QADtC,EACgD;AAC5CI,UAAAA,SAAS,GAAG,KAAZ;AACAE,UAAAA,SAAS,GAAG,KAAZ;AACAiC,UAAAA,cAAc,GAAG,EAAjB;AACH,SALD,MAMK;AACDnC,UAAAA,SAAS,GAAG,KAAZ;AACH;AACJ,OAVD,MAWK;AACDE,QAAAA,SAAS,GAAG,KAAZ;AACAiC,QAAAA,cAAc,GAAG,EAAjB;AACH;;AAED,YAAMtG,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE1C,cADK;AAEf2C,QAAAA,IAAI,EAAE;AAAEmE,UAAAA,SAAF;AAAaF,UAAAA,SAAb;AAAwBmC,UAAAA,cAAxB;AAAwCK,UAAAA,UAAU,EAAE,IAApD;AAA0DzB,UAAAA,QAAQ,EAAE,EAApE;AAAwEE,UAAAA,aAAa,EAAE,EAAvF;AAA2FK,UAAAA,iBAAiB,EAAE,EAA9G;AAAkHC,UAAAA,sBAAsB,EAAE;AAA1I;AAFS,OAAnB;AAIA,WAAK1G,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AAEH,KAnnCkB;;AAAA,SAqnCnB4G,aArnCmB,GAqnCH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,YAAMR,cAAc,GAAG,KAAK3H,KAAL,CAAW2H,cAAX,IAA6B,EAApD;AACAA,MAAAA,cAAc,CAACQ,SAAD,CAAd,GAA4BD,SAA5B;AAAsC;AAEtC,WAAKE,QAAL,CAAc;AAAET,QAAAA;AAAF,OAAd;AACH,KA1nCkB;;AAAA,SA4nCnBU,sBA5nCmB,GA4nCM,CAACH,SAAD,EAAYlJ,QAAZ,EAAsBsI,IAAtB,KAA+B;AACpD,YAAMa,SAAS,GAAGb,IAAI,CAACxF,KAAvB;AACA,YAAM6F,cAAc,GAAG,KAAK3H,KAAL,CAAW2H,cAAX,IAA6B,EAApD;AACAA,MAAAA,cAAc,CAAC3I,QAAD,CAAd,GAA2B,EAAE,GAAG2I,cAAc,CAAC3I,QAAD,CAAnB;AAA+B,SAACmJ,SAAD,GAAaD;AAA5C,OAA3B;AAEA,WAAKE,QAAL,CAAc;AAAET,QAAAA;AAAF,OAAd,EALoD,CAOpD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH,KAtqCkB;;AAAA,SAwqCnBW,eAxqCmB,GAwqCA/H,KAAD,IAAW;AACzB,YAAMoH,cAAc,GAAG,KAAK3H,KAAL,CAAW2H,cAAX,IAA6B,EAApD;;AACA,UAAIpH,KAAK,CAACgI,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClCb,QAAAA,cAAc,CAACpH,KAAK,CAACgI,MAAN,CAAaE,IAAd,CAAd,GAAoClI,KAAK,CAACgI,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgCxJ,iBAAiB,CAACyJ,GAAlD,GAAwDzJ,iBAAiB,CAAC0J,EAA9G;AACH,OAFD,MAGK;AACDjB,QAAAA,cAAc,CAACpH,KAAK,CAACgI,MAAN,CAAaE,IAAd,CAAd,GAAoClI,KAAK,CAACgI,MAAN,CAAaxH,KAAjD;AACH;;AAED,WAAKqH,QAAL,CAAc;AAAET,QAAAA;AAAF,OAAd;AACH,KAlrCkB;;AAAA,SAorCnBkB,wBAprCmB,GAorCQ,CAACtI,KAAD,EAAQuI,SAAR,EAAmBzC,KAAnB,EAA0B0C,iBAA1B,EAA6CzC,QAA7C,KAA0D;AACjF,UAAIA,QAAQ,KAAK,WAAjB,EAA8B;AAC1B,cAAMC,QAAQ,GAAG,KAAKlG,KAAL,CAAWJ,KAAX,CAAiB6G,iBAAjB,IAAsC,EAAvD;;AACA,YAAIP,QAAQ,CAACF,KAAD,CAAZ,EAAqB;AACjB,gBAAMtF,KAAK,GAAGwF,QAAQ,CAACF,KAAD,CAAR,IAAmBE,QAAQ,CAACF,KAAD,CAAR,CAAgB9F,KAAK,CAACgI,MAAN,CAAaE,IAA7B,CAAjC;;AACA,cAAI1H,KAAK,KAAK,EAAV,IAAgBA,KAAK,KAAK8D,SAA9B,EAAyC;AACrC,mBAAO0B,QAAQ,CAACF,KAAD,CAAR,CAAgB9F,KAAK,CAACgI,MAAN,CAAaE,IAA7B,CAAP;AACH,WAFD,MAEO;AAEHlC,YAAAA,QAAQ,CAACF,KAAD,CAAR,CAAgB9F,KAAK,CAACgI,MAAN,CAAaE,IAA7B,IAAqC;AACjC,eAAC1J,gBAAgB,CAACiK,KAAlB,GAA0B,EAAE,GAAGD;AAAL,eADO;AAEjC,eAAChK,gBAAgB,CAACkK,KAAlB,GAA0BH;AAFO,aAArC;AAIH;AACJ,SAXD,MAWO;AACHvC,UAAAA,QAAQ,CAACF,KAAD,CAAR,GAAkB;AACd,aAAC9F,KAAK,CAACgI,MAAN,CAAaE,IAAd,GAAqB;AAAE,eAAC1J,gBAAgB,CAACiK,KAAlB,GAA0B,EAAE,GAAGD;AAAL,eAA5B;AAAsD,eAAChK,gBAAgB,CAACkK,KAAlB,GAA0BH;AAAhF;AADP,WAAlB;AAGH;;AACD,cAAMzH,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE1C,cADK;AAEf2C,UAAAA,IAAI,EAAE;AAAEuF,YAAAA,iBAAiB,EAAEP;AAArB;AAFS,SAAnB;AAIA,aAAKlG,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH,OAvBD,MAuBO;AACH,cAAMkF,QAAQ,GAAG,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBsG,QAAjB,IAA6B,EAA9C;;AACA,YAAIA,QAAQ,CAACF,KAAD,CAAZ,EAAqB;AACjB,gBAAMtF,KAAK,GAAGwF,QAAQ,CAACF,KAAD,CAAR,IAAmBE,QAAQ,CAACF,KAAD,CAAR,CAAgB9F,KAAK,CAACgI,MAAN,CAAaE,IAA7B,CAAjC;;AACA,cAAI1H,KAAK,KAAK,EAAV,IAAgBA,KAAK,KAAK8D,SAA9B,EAAyC;AACrC,mBAAO0B,QAAQ,CAACF,KAAD,CAAR,CAAgB9F,KAAK,CAACgI,MAAN,CAAaE,IAA7B,CAAP;AACH,WAFD,MAEO;AAEHlC,YAAAA,QAAQ,CAACF,KAAD,CAAR,CAAgB9F,KAAK,CAACgI,MAAN,CAAaE,IAA7B,IAAqC;AACjC,eAAC1J,gBAAgB,CAACiK,KAAlB,GAA0B,EAAE,GAAGD;AAAL,eADO;AAEjC,eAAChK,gBAAgB,CAACkK,KAAlB,GAA0BH;AAFO,aAArC;AAIH;AACJ,SAXD,MAWO;AACHvC,UAAAA,QAAQ,CAACF,KAAD,CAAR,GAAkB;AACd,aAAC9F,KAAK,CAACgI,MAAN,CAAaE,IAAd,GAAqB;AAAE,eAAC1J,gBAAgB,CAACiK,KAAlB,GAA0B,EAAE,GAAGD;AAAL,eAA5B;AAAsD,eAAChK,gBAAgB,CAACkK,KAAlB,GAA0BH;AAAhF;AADP,WAAlB;AAGH;;AACD,cAAMzH,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE1C,cADK;AAEf2C,UAAAA,IAAI,EAAE;AAAEgF,YAAAA;AAAF;AAFS,SAAnB;AAIA,aAAKlG,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AAEH;AAIJ,KAxuCkB;;AAAA,SA0uCnB6H,gBA1uCmB,GA0uCA,CAACC,QAAD,EAAWC,SAAX,KAAyB;AACxC,YAAM;AAAEzB,QAAAA;AAAF,UAAqB,KAAK3H,KAAhC;AACA2H,MAAAA,cAAc,CAACwB,QAAD,CAAd,GAA2BC,SAA3B;AACA,WAAKhB,QAAL,CAAc;AAAET,QAAAA;AAAF,OAAd;AACH,KA9uCkB;;AAAA,SAgvCnBtD,eAhvCmB,GAgvCD,CAACgF,YAAD,EAAeC,IAAf,KAAwB;AACtC;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAIC,YAAY,GAAG,EAAnB;AACA,UAAIC,gBAAgB,GAAG,EAAvB;AACA,UAAIC,qBAAqB,GAAG,EAA5B;AACA,UAAIC,sBAAsB,GAAG,EAA7B;AACA,UAAIC,uBAAuB,GAAG,EAA9B;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAI7F,eAAe,GAAG,EAAtB;AACA,UAAIC,eAAe,GAAG,EAAtB;AACA,UAAIC,kBAAkB,GAAG,EAAzB;AACA,UAAI4F,oBAAoB,GAAG,EAA3B;AACA,UAAIC,iBAAiB,GAAG,EAAxB;AACA,UAAIC,mBAAmB,GAAG,EAA1B;AACA,UAAIC,6BAA6B,GAAG,EAApC;AACA,UAAI9F,gBAAgB,GAAG,EAAvB;AACA,UAAIC,gBAAgB,GAAG,CAAC;AACpB,sBAAc,oBADM;AAEpB,uBAAe;AACX,mBAAS,uBADE;AAEX,mBAAS,sBAFE;AAGX,mBAAS;AAHE,SAFK;AAOpB,0BAAkB;AAPE,OAAD,EASvB;AACI,sBAAc,SADlB;AAEI,uBAAe;AACX,mBAAS,QADE;AAEX,mBAAS,QAFE;AAGX,mBAAS;AAHE,SAFnB;AAOI,0BAAkB;AAPtB,OATuB,CAAvB,CAjBsC,CAsCtC;AACA;;AAEAiF,MAAAA,YAAY,IAAIA,YAAY,CAACa,GAAb,CAAiBC,GAAG,IAChCA,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaF,GAAb,CAAiBG,MAAM,IAAI;AACvCA,QAAAA,MAAM,CAACD,QAAP,IAAmBC,MAAM,CAACD,QAAP,CAAgBF,GAAhB,CAAoB,CAACI,SAAD,EAAYjE,KAAZ,KAAsB;AACzD;AACA,cAAIiE,SAAS,CAACC,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtCD,YAAAA,SAAS,CAACF,QAAV,CAAmBF,GAAnB,CAAuBM,YAAY,IAAI;AACnCpG,cAAAA,gBAAgB,CAAC4C,IAAjB,CAAsB;AAClB,8BAAcwD,YAAY,CAAC1I,KADT;AAElB,+BAAe0I,YAAY,CAACC,WAFV;AAGlB,gCAAgB,IAHE;AAIlB,kCAAkB,QAJA;AAKlB,kCAAkB;AALA,eAAtB,EADmC,CAQnC;;AACAD,cAAAA,YAAY,CAACE,MAAb,IAAuBf,sBAAsB,CAAC3C,IAAvB,CAA4B;AAAE,iBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAAC1I;AAAzC,eAA5B,CAAvB;AACA0I,cAAAA,YAAY,CAACE,MAAb,IAAuBd,uBAAuB,CAAC5C,IAAxB,CAA6B;AAAE,iBAACwD,YAAY,CAAC1I,KAAd,GAAsB;AAAE,mBAAC/C,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAACC,WAAzC;AAAsD,mBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I;AAA7F;AAAxB,eAA7B,CAAvB;AAIAoC,cAAAA,kBAAkB,GAAGA,kBAAkB,KAAK,EAAvB,IAA6BsG,YAAY,CAACE,MAA1C,GAAmDF,YAAY,CAAC1I,KAAhE,GAAwEoC,kBAA7F;AAEA,kBAAIyG,eAAe,GAAG,MAAtB;AACA,kBAAIC,oBAAoB,GAAG,EAA3B;;AAEA,kBAAIJ,YAAY,CAACK,aAAb,KAA+BvL,gBAAgB,CAACwL,QAApD,EAA8D;AAC1D3G,gBAAAA,gBAAgB,CAAC6C,IAAjB,CAAsB;AAClB,sCAAoBwD,YAAY,CAACO,KAAb,CAAmBzD,IAAnB,CAAwB0D,UAD1B;AAElB,2CAAyBR,YAAY,CAACS,WAFpB;AAGlB,qCAAmB,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2E,eAA3E,GAA6F,cAH9F;AAIlB,+CAA6BqJ,YAAY,CAACS,WAJxB;AAKlB;AACA,oCAAkB,UANA;AAOlB,sCAAoB,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2EjC,iBAAiB,CAACyJ,GAA7F,GAAmGzJ,iBAAiB,CAAC0J,EAPvH;AAQlB;AACA,4CAA0B4B,YAAY,CAACU;AATrB,iBAAtB;AAWH;;AAED,kBAAIV,YAAY,CAACW,SAAb,KAA2B,OAA/B,EAAwC;AAEpCP,gBAAAA,oBAAoB,GAAG;AACnB,yCAAuBJ,YAAY,CAACY,MADjB;AAEnB,2CAAyBZ,YAAY,CAACS,WAFnB;AAGnB,6CAA2BT,YAAY,CAACa,aAHrB;AAInB,8CAA4B,KAJT;AAKnB,iDAA+B,OAAOb,YAAY,CAACS,WAApB,GAAkC,IAAlC,GAAyC;AALrD,iBAAvB;AAOAhH,gBAAAA,eAAe,CAAC+C,IAAhB,CAAqB;AACjB,gCAAcwD,YAAY,CAACa,aADV;AAEjB,iCAAeb,YAAY,CAACC,WAFX;AAGjB,oCAAkBD,YAAY,CAAC1I,KAHd;AAIjB;AACA;AACA,qCAAmB0I,YAAY,CAACS,WANf;AAOjB,sCAAoBT,YAAY,CAACY,MAPhB;AAQjB,qBAAGR;AARc,iBAArB;AAUAD,gBAAAA,eAAe,GAAG,mBAAlB;AACH,eArDkC,CAsDnC;;;AACA,kBAAIH,YAAY,CAACW,SAAb,KAA2B,MAA/B,EAAuC;AACnCR,gBAAAA,eAAe,GAAG,MAAlB;AACAlB,gBAAAA,gBAAgB,CAACzC,IAAjB,CAAsB;AAAE,mBAACjI,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I,KAAzC;AAAgDwJ,kBAAAA,QAAQ,EAAEd,YAAY,CAACc,QAAb,IAAyB;AAAnF,iBAAtB;AACA5B,gBAAAA,qBAAqB,GAAGc,YAAY,CAACe,sBAAb,GAAsC,CAAC,GAAGf,YAAY,CAACe,sBAAjB,EAAyC,GAAG7B,qBAA5C,CAAtC,GAA2GA,qBAAnI;AACH;;AACD,kBAAIc,YAAY,CAACW,SAAb,KAA2B,SAA3B,IAAwCX,YAAY,CAACW,SAAb,KAA2B,OAAvE,EAAgF;AAC5ER,gBAAAA,eAAe,GAAG,SAAlB;AACH;;AAED3G,cAAAA,eAAe,CAACgD,IAAhB,CAAqB;AACjBwE,gBAAAA,OAAO,EAAEhB,YAAY,CAACE,MAAb,GAAsB,IAAtB,GAA6B,KADrB;AAEjBC,gBAAAA,eAFiB;AAGjBc,gBAAAA,UAAU,EAAEjB,YAAY,CAAC1I,KAHR;AAIjB2I,gBAAAA,WAAW,EAAED,YAAY,CAACC,WAJT;AAKjB,mBAAGG;AALc,eAArB,EAhEmC,CAuEnC;AACA;;AACA,kBAAIJ,YAAY,CAACkB,SAAb,IAA0BlB,YAAY,CAACmB,iBAA3C,EAA8D;AAC1DpC,gBAAAA,QAAQ,CAACvC,IAAT,CAAc;AAAE,mBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAACC,WAAzC;AAAsD,mBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I;AAA7F,iBAAd;AACAkI,gBAAAA,mBAAmB,CAAChD,IAApB,CAAyBwD,YAAY,CAAC1I,KAAtC;AACH,eAHD,MAIK;AACD0H,gBAAAA,YAAY,CAACxC,IAAb,CAAkB;AAAE,mBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAACC,WAAzC;AAAsD,mBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I;AAA7F,iBAAlB;AACH;;AACDgI,cAAAA,oBAAoB,CAAC9C,IAArB,CAA0B;AAAE,iBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAACC,WAAzC;AAAsD,iBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I;AAA7F,eAA1B;AACAiI,cAAAA,iBAAiB,CAAC/C,IAAlB,CAAuBwD,YAAY,CAAC1I,KAApC;AACAmI,cAAAA,6BAA6B,CAACjD,IAA9B,CAAmC;AAAE,iBAACwD,YAAY,CAAC1I,KAAd,GAAsB0I,YAAY,CAACC;AAArC,eAAnC;;AAGA,kBAAID,YAAY,CAACmB,iBAAjB,EAAoC;AAChC9B,gBAAAA,QAAQ,CAAC7C,IAAT,CAAc;AAAElF,kBAAAA,KAAK,EAAE0I,YAAY,CAAC1I,KAAtB;AAA6B8J,kBAAAA,cAAc,EAAE;AAA7C,iBAAd;AACH,eAFD,MAGK;AACD/B,gBAAAA,QAAQ,CAAC7C,IAAT,CAAc;AAAElF,kBAAAA,KAAK,EAAE0I,YAAY,CAAC1I,KAAtB;AAA6B8J,kBAAAA,cAAc,EAAE,CAAC1M,iBAAiB,CAACiH,KAAnB;AAA7C,iBAAd;AACH;;AAED,qBAAO,IAAP;AACH,aA7FD;AA8FH,WA/FD,MA+FO;AACH;AACAmE,YAAAA,SAAS,CAACI,MAAV,IAAoBf,sBAAsB,CAAC3C,IAAvB,CAA4B;AAAE,eAACjI,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACxI;AAAtC,aAA5B,CAApB;AACAwI,YAAAA,SAAS,CAACI,MAAV,IAAoBd,uBAAuB,CAAC5C,IAAxB,CAA6B;AAAE,eAACsD,SAAS,CAACxI,KAAX,GAAmB;AAAE,iBAAC/C,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACG,WAAtC;AAAmD,iBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI;AAAvF;AAArB,aAA7B,CAApB;AACAoC,YAAAA,kBAAkB,GAAGA,kBAAkB,KAAK,EAAvB,IAA6BoG,SAAS,CAACI,MAAvC,GAAgDJ,SAAS,CAACxI,KAA1D,GAAkEoC,kBAAvF;AACAE,YAAAA,gBAAgB,CAAC4C,IAAjB,CAAsB;AAClB,4BAAcsD,SAAS,CAACxI,KADN;AAElB,6BAAewI,SAAS,CAACG,WAFP;AAGlB,8BAAgB,IAHE;AAIlB,gCAAkB,QAJA;AAKlB,gCAAkB;AALA,aAAtB;AAQA,gBAAIE,eAAe,GAAG,MAAtB;AACA,gBAAIC,oBAAoB,GAAG,EAA3B;AAEAd,YAAAA,oBAAoB,CAAC9C,IAArB,CAA0B;AAAE,eAACjI,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACG,WAAtC;AAAmD,eAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI;AAAvF,aAA1B;AACAiI,YAAAA,iBAAiB,CAAC/C,IAAlB,CAAuBsD,SAAS,CAACxI,KAAjC;AACAmI,YAAAA,6BAA6B,CAACjD,IAA9B,CAAmC;AAAE,eAACsD,SAAS,CAACxI,KAAX,GAAmBwI,SAAS,CAACG;AAA/B,aAAnC;;AAEA,gBAAIH,SAAS,CAACO,aAAV,KAA4BvL,gBAAgB,CAACwL,QAAjD,EAA2D;AACvD3G,cAAAA,gBAAgB,CAAC6C,IAAjB,CAAsB;AAClB,oCAAoBsD,SAAS,CAACS,KAAV,CAAgBzD,IAAhB,CAAqB0D,UADvB;AAElB,yCAAyBV,SAAS,CAACW,WAFjB;AAGlB,mCAAmB,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2E,eAA3E,GAA6F,cAH9F;AAIlB,6CAA6BmJ,SAAS,CAACW,WAJrB;AAKlB;AACA,kCAAkB,UANA;AAOlB,oCAAoB,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2EjC,iBAAiB,CAACyJ,GAA7F,GAAmGzJ,iBAAiB,CAAC0J,EAPvH;AAQlB,0CAA0B0B,SAAS,CAACY,sBARlB,CASlB;;AATkB,eAAtB;AAWH;;AAED,gBAAIZ,SAAS,CAACa,SAAV,KAAwB,OAA5B,EAAqC;AACjCR,cAAAA,eAAe,GAAG,mBAAlB;AACAC,cAAAA,oBAAoB,GAAG;AACnB,uCAAuBN,SAAS,CAACc,MADd;AAEnB,yCAAyBd,SAAS,CAACW,WAFhB;AAGnB,2CAA2BX,SAAS,CAACe,aAHlB;AAInB,4CAA4B,KAJT;AAKnB,+CAA+B,OAAOf,SAAS,CAACW,WAAjB,GAA+B,IAA/B,GAAsC;AALlD,eAAvB;AAOAhH,cAAAA,eAAe,CAAC+C,IAAhB,CAAqB;AACjB,8BAAcsD,SAAS,CAACxI,KADP;AAEjB,+BAAewI,SAAS,CAACG,WAFR;AAGjB,kCAAkBH,SAAS,CAACxI,KAHX;AAIjB;AACA;AACA,mCAAmBwI,SAAS,CAACD,MAAV,CAAiBtJ,KANnB;AAOjB,oCAAoBuJ,SAAS,CAACc,MAPb;AAQjB,mBAAGR;AARc,eAArB;AAUH,aArDE,CAsDH;;;AACA,gBAAIN,SAAS,CAACa,SAAV,KAAwB,MAA5B,EAAoC;AAChCR,cAAAA,eAAe,GAAG,MAAlB;AACAlB,cAAAA,gBAAgB,CAACzC,IAAjB,CAAsB;AAAE,iBAACjI,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI,KAAtC;AAA6CwJ,gBAAAA,QAAQ,EAAEhB,SAAS,CAACgB,QAAV,IAAsB;AAA7E,eAAtB;AACA5B,cAAAA,qBAAqB,GAAGY,SAAS,CAACiB,sBAAV,GAAmC,CAAC,GAAGjB,SAAS,CAACiB,sBAAd,EAAsC,GAAG7B,qBAAzC,CAAnC,GAAqGA,qBAA7H;AACH;;AACD,gBAAIY,SAAS,CAACa,SAAV,KAAwB,SAAxB,IAAqCb,SAAS,CAACa,SAAV,KAAwB,OAAjE,EAA0E;AACtER,cAAAA,eAAe,GAAG,SAAlB;AACH;;AAED3G,YAAAA,eAAe,CAACgD,IAAhB,CAAqB;AACjBwE,cAAAA,OAAO,EAAElB,SAAS,CAACI,MAAV,GAAmB,IAAnB,GAA0B,KADlB;AAEjBe,cAAAA,UAAU,EAAEnB,SAAS,CAACxI,KAFL;AAGjB2I,cAAAA,WAAW,EAAEH,SAAS,CAACG,WAHN;AAIjBE,cAAAA,eAJiB;AAKjB,iBAAGC;AALc,aAArB;;AAQA,gBAAIN,SAAS,CAACoB,SAAV,IAAuBpB,SAAS,CAACqB,iBAArC,EAAwD;AACpDpC,cAAAA,QAAQ,CAACvC,IAAT,CAAc;AAAE,iBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACG,WAAtC;AAAmD,iBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI;AAAvF,eAAd;AACAkI,cAAAA,mBAAmB,CAAChD,IAApB,CAAyBsD,SAAS,CAACxI,KAAnC;AACH,aAHD,MAGO;AACH0H,cAAAA,YAAY,CAACxC,IAAb,CAAkB;AAAE,iBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACG,WAAtC;AAAmD,iBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI;AAAvF,eAAlB;AACH;;AACD,gBAAIwI,SAAS,CAACqB,iBAAd,EAAiC;AAC7B9B,cAAAA,QAAQ,CAAC7C,IAAT,CAAc;AAAElF,gBAAAA,KAAK,EAAEwI,SAAS,CAACxI,KAAnB;AAA0B8J,gBAAAA,cAAc,EAAE;AAA1C,eAAd;AAEH,aAHD,MAIK;AACD/B,cAAAA,QAAQ,CAAC7C,IAAT,CAAc;AAAElF,gBAAAA,KAAK,EAAEwI,SAAS,CAACxI,KAAnB;AAA0B8J,gBAAAA,cAAc,EAAE,CAAC1M,iBAAiB,CAACiH,KAAnB;AAA1C,eAAd;AACH;;AACD,mBAAO,IAAP;AACH;AAEJ,SAzLkB,CAAnB;AA0LH,OA3Le,CADJ,CAAhB;;AA+LA,UAAImD,IAAI,KAAK,kBAAT,IAA+B,KAAKjJ,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAApG,EAA6G;AAEzG,cAAM0K,yBAAyB,GAAG,KAAKxL,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DkI,iBAA5F;AAEA,cAAMC,aAAa,GAAG,KAAK1L,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,GAAkD,KAAK/C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,CAAgDkE,IAAhD,CAAqDE,cAAvG,GAAwH,KAA9I;;AAEA,YAAIuE,aAAJ,EAAmB;AACfF,UAAAA,yBAAyB,CAAC3B,GAA1B,CAA8BC,GAAG,IAC7BA,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaF,GAAb,CAAiBG,MAAM,IAAI;AACvCA,YAAAA,MAAM,CAACD,QAAP,IAAmBC,MAAM,CAACD,QAAP,CAAgBF,GAAhB,CAAoBI,SAAS,IAAI;AAChD,kBAAIA,SAAS,CAACC,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtCD,gBAAAA,SAAS,CAACF,QAAV,CAAmBF,GAAnB,CAAuBM,YAAY,IAAI;AACnC;AAEA,sBAAIA,YAAY,CAACK,aAAb,KAA+BvL,gBAAgB,CAACwL,QAApD,EAA8D;AAC1D3G,oBAAAA,gBAAgB,CAAC6C,IAAjB,CAAsB;AAClB,0CAAoBwD,YAAY,CAACO,KAAb,CAAmBzD,IAAnB,CAAwB0D,UAD1B;AAElB,+CAAyBR,YAAY,CAACS,WAFpB;AAGlB,yCAAmB,oBAHD;AAIlB,mDAA6BT,YAAY,CAACS,WAJxB;AAKlB;AACA,wCAAkB,UANA;AAOlB,0CAAoB,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2EjC,iBAAiB,CAACyJ,GAA7F,GAAmGzJ,iBAAiB,CAAC0J,EAPvH;AAQlB,gDAA0B4B,YAAY,CAACU,sBARrB,CASlB;;AATkB,qBAAtB;AAWH;AACJ,iBAhBD;AAkBH,eAnBD,MAmBO;AACH;AAEA,oBAAIZ,SAAS,CAACO,aAAV,KAA4BvL,gBAAgB,CAACwL,QAAjD,EAA2D;AACvD3G,kBAAAA,gBAAgB,CAAC6C,IAAjB,CAAsB;AAClB,wCAAoBsD,SAAS,CAACS,KAAV,CAAgBzD,IAAhB,CAAqB0D,UADvB;AAElB,6CAAyBV,SAAS,CAACW,WAFjB;AAGlB,uCAAmB,oBAHD;AAIlB,iDAA6BX,SAAS,CAACW,WAJrB;AAKlB;AACA,sCAAkB,UANA;AAOlB,wCAAoB,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2EjC,iBAAiB,CAACyJ,GAA7F,GAAmGzJ,iBAAiB,CAAC0J,EAPvH;AAQlB;AACA,8CAA0B0B,SAAS,CAACY;AATlB,mBAAtB;AAWH;AACJ;AACJ,aArCkB,CAAnB;AAsCH,WAvCe,CADpB;AA0CH;AACJ;;AAGD,UAAInH,QAAQ,GAAG;AACXiI,QAAAA,QAAQ,EAAEzC,QADC;AAEX0C,QAAAA,YAAY,EAAEzC,YAFH;AAGXC,QAAAA,gBAHW;AAIXC,QAAAA,qBAJW;AAKXC,QAAAA,sBALW;AAMXE,QAAAA,QANW;AAOXC,QAAAA,oBAPW;AAQXF,QAAAA,uBARW;AASXG,QAAAA,iBATW;AAUXC,QAAAA,mBAVW;AAWXC,QAAAA;AAXW,OAAf,CA7RsC,CA2StC;AACA;;AACA,aAAO;AAAElG,QAAAA,QAAF;AAAYC,QAAAA,eAAZ;AAA6BC,QAAAA,eAA7B;AAA8CC,QAAAA,kBAA9C;AAAkEC,QAAAA,gBAAlE;AAAoFC,QAAAA;AAApF,OAAP;AACH,KA9hDkB;;AAAA,SAgiDnB8H,WAhiDmB,GAgiDJ7C,YAAD,IAAkB;AAC5B;AACA;AACA,UAAI8C,aAAa,GAAG,CAAC;AAAC,SAACpN,gBAAgB,CAACiK,KAAlB,GAA0B;AAAE,mBAAS,WAAX;AAAwB,mBAAS,WAAjC;AAA8C,mBAAS;AAAvD,SAA3B;AACC,SAACjK,gBAAgB,CAACkK,KAAlB,GAA0B;AAD3B,OAAD,CAApB;AAEA,UAAImD,QAAQ,GAAG,EAAf,CAL4B,CAM7B;;AACC,UAAI7C,QAAQ,GAAI,CAAC;AAAE,SAACxK,gBAAgB,CAACiK,KAAlB,GAAyB;AAAE,mBAAS,WAAX;AAAwB,mBAAS,WAAjC;AAA8C,mBAAS;AAAvD,SAA3B;AAAiG,SAACjK,gBAAgB,CAACkK,KAAlB,GAA0B;AAA3H,OAAD,CAAhB;AACA,UAAIO,YAAY,GAAG,EAAnB;AACA,UAAIK,QAAQ,GAAG,EAAf;AACA,UAAIwC,iBAAiB,GAAG,EAAxB;AACA,UAAIC,iBAAiB,GAAG,EAAxB;AACA,UAAIC,gBAAgB,GAAG,CAAC;AAAE,SAACxN,gBAAgB,CAACkK,KAAlB,GAA0B,UAA5B;AAAwCqC,QAAAA,QAAQ,EAAE;AAAlD,OAAD,CAAvB;AACA,UAAIkB,qBAAqB,GAAG,EAA5B;AACA,UAAIC,mBAAmB,GAAG,EAA1B;AACA,UAAIC,wBAAwB,GAAG,EAA/B;AACA,UAAIC,kBAAkB,GAAG,CAAC,UAAD,EAAa,OAAb,EAAsB,qBAAtB,CAAzB;AACA,UAAIC,qBAAqB,GAAG,CAAC,OAAD,EAAU,aAAV,EAAyB,qBAAzB,CAA5B;AACA,UAAIC,oBAAoB,GAAG,EAA3B;AACA,UAAIC,uBAAuB,GAAG,EAA9B;AACA,UAAIC,sBAAsB,GAAG,EAA7B;AACA,UAAIC,yBAAyB,GAAG,EAAhC;AACA,UAAIhJ,eAAe,GAAG,EAAtB;AACA,UAAIC,eAAe,GAAG,EAAtB;AACA,UAAIgJ,uBAAuB,GAAG,EAA9B;AACA,UAAIC,0BAA0B,GAAG,EAAjC;AAEA,UAAInD,iBAAiB,GAAG,EAAxB;AACA,UAAIC,mBAAmB,GAAG,EAA1B;AACA,UAAIC,6BAA6B,GAAG,EAApC;AACA,UAAIkD,oBAAoB,GAAG,EAA3B;AACA,UAAIC,sBAAsB,GAAG,EAA7B;AACA,UAAIC,gCAAgC,GAAG,EAAvC;AACA,UAAIlJ,gBAAgB,GAAG,EAAvB,CAjC4B,CAmC5B;;AAEA4F,MAAAA,iBAAiB,GAAG,CAAC,OAAD,CAApB;AACAC,MAAAA,mBAAmB,GAAG,CAAC,OAAD,CAAtB;AACAC,MAAAA,6BAA6B,GAAG,CAAC;AAAE,iBAAS;AAAE,mBAAS,WAAX;AAAwB,mBAAS,WAAjC;AAA8C,mBAAS;AAAvD;AAAX,OAAD,CAAhC;AACAkD,MAAAA,oBAAoB,GAAG,CAAC,OAAD,EAAU,aAAV,CAAvB;AACAC,MAAAA,sBAAsB,GAAG,CAAC,OAAD,EAAU,aAAV,CAAzB;AACAC,MAAAA,gCAAgC,GAAG,CAAC;AAAE,iBAAS;AAAE,mBAAS,WAAX;AAAwB,mBAAS,WAAjC;AAA8C,mBAAS;AAAvD;AAAX,OAAD,EACnC;AAAE,uBAAe;AAAE,mBAAS,eAAX;AAA4B,mBAAS,aAArC;AAAoD,mBAAS;AAA7D;AAAjB,OADmC,CAAnC,CA1C4B,CA4C5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAIC,cAAc,GAAG,CAAC;AAAE,SAACvO,gBAAgB,CAACkK,KAAlB,GAA0B,kBAA5B;AAAgDqC,QAAAA,QAAQ,EAAE;AAA1D,OAAD,CAArB,CAtD4B,CAuD5B;;AACA,WAAKtL,KAAL,CAAW2H,cAAX,CAA0B4F,sBAA1B,IAAoD,KAAKvN,KAAL,CAAW2H,cAAX,CAA0B4F,sBAA1B,CAAiDjG,IAAjD,CAAsDvD,QAAtD,CAA+DmG,GAA/D,CAAmEC,GAAG,IACtHA,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaF,GAAb,CAAiBG,MAAM,IAAI;AACvCA,QAAAA,MAAM,CAACD,QAAP,IAAmBC,MAAM,CAACD,QAAP,CAAgBF,GAAhB,CAAoBI,SAAS,IAAI;AAChD,cAAIA,SAAS,CAACC,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtCD,YAAAA,SAAS,CAACF,QAAV,CAAmBF,GAAnB,CAAuBM,YAAY,IAAI;AACnC;AACAA,cAAAA,YAAY,CAACE,MAAb,IAAuBsC,yBAAyB,CAAChG,IAA1B,CAA+B;AAAE,iBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAAC1I;AAAzC,eAA/B,CAAvB;AACA0I,cAAAA,YAAY,CAACE,MAAb,IAAuBwC,0BAA0B,CAAClG,IAA3B,CAAgC;AAAE,iBAACwD,YAAY,CAAC1I,KAAd,GAAsB;AAAE,mBAAC/C,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAACC,WAAzC;AAAsD,mBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I;AAA7F;AAAxB,eAAhC,CAAvB;AACA8K,cAAAA,qBAAqB,CAAC5F,IAAtB,CAA2BwD,YAAY,CAAC1I,KAAxC,EAJmC,CAKnC;;AAEAgL,cAAAA,uBAAuB,CAAC9F,IAAxB,CAA6B;AACzB,iBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAACC,WADd;AAEzB,iBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I,KAFd;AAGzB,iBAAC/C,gBAAgB,CAACyO,UAAlB,GAA+BhD,YAAY,CAACS,WAHnB;AAIzB,iBAAClM,gBAAgB,CAAC0O,qBAAlB,GAA0CjD,YAAY,CAACU;AAJ9B,eAA7B;;AAMA,kBAAIV,YAAY,CAACK,aAAb,KAA+BvL,gBAAgB,CAACwL,QAApD,EAA8D;AAC1D3G,gBAAAA,gBAAgB,CAAC6C,IAAjB,CAAsB;AAClB,sCAAoBwD,YAAY,CAACO,KAAb,CAAmBzD,IAAnB,CAAwB0D,UAD1B;AAElB,2CAAyBR,YAAY,CAACO,KAAb,CAAmBE,WAF1B;AAGlB,qCAAmB,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2E,eAA3E,GAA6F,oBAH9F;AAIlB,+CAA6BqJ,YAAY,CAACO,KAAb,CAAmBE,WAJ9B;AAKlB;AACA,oCAAkB,UANA;AAOlB,sCAAoB,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2EjC,iBAAiB,CAACyJ,GAA7F,GAAmGzJ,iBAAiB,CAAC0J,EAPvH;AAQlB,4CAA0B4B,YAAY,CAACU,sBARrB,CASlB;;AATkB,iBAAtB;AAWH;;AACDiC,cAAAA,oBAAoB,CAACnG,IAArB,CAA0BwD,YAAY,CAAC1I,KAAvC;AACAuL,cAAAA,gCAAgC,CAACrG,IAAjC,CAAsC;AAAE,iBAACwD,YAAY,CAAC1I,KAAd,GAAsB0I,YAAY,CAACC;AAArC,eAAtC;;AAEA,kBAAID,YAAY,CAACkB,SAAjB,EAA4B;AACxB0B,gBAAAA,sBAAsB,CAACpG,IAAvB,CAA4BwD,YAAY,CAAC1I,KAAzC;AACH;;AAED,kBAAI0I,YAAY,CAACkD,QAAjB,EACIrB,iBAAiB,CAACrF,IAAlB,CAAuB;AAAElF,gBAAAA,KAAK,EAAE0I,YAAY,CAAC1I,KAAtB;AAA6B8J,gBAAAA,cAAc,EAAE;AAA7C,eAAvB,EADJ,KAGIS,iBAAiB,CAACrF,IAAlB,CAAuB;AAAElF,gBAAAA,KAAK,EAAE0I,YAAY,CAAC1I,KAAtB;AAA6B8J,gBAAAA,cAAc,EAAE,CAAC1M,iBAAiB,CAACyO,WAAnB;AAA7C,eAAvB;;AAEJ,kBAAInD,YAAY,CAACW,SAAb,KAA2B,MAA/B,EAAuC;AACnCsB,gBAAAA,mBAAmB,CAACzF,IAApB,CAAyB;AAAE,mBAACjI,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I,KAAzC;AAAgDwJ,kBAAAA,QAAQ,EAAEd,YAAY,CAACc,QAAb,IAAyB;AAAnF,iBAAzB;AACAoB,gBAAAA,wBAAwB,GAAGlC,YAAY,CAACe,sBAAb,GAAsC,CAAC,GAAGf,YAAY,CAACe,sBAAjB,EAAyC,GAAGmB,wBAA5C,CAAtC,GAA8GA,wBAAzI;AACH;;AACDJ,cAAAA,iBAAiB,CAACtF,IAAlB,CAAuB;AAAE,iBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAACC,WAAzC;AAAsD,iBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I;AAA7F,eAAvB;AACH,aA3CD;AA6CH,WA9CD,MA8CO;AACH;AACAwI,YAAAA,SAAS,CAACI,MAAV,IAAoBsC,yBAAyB,CAAChG,IAA1B,CAA+B;AAAE,eAACjI,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACxI;AAAtC,aAA/B,CAApB;AACAwI,YAAAA,SAAS,CAACI,MAAV,IAAoBwC,0BAA0B,CAAClG,IAA3B,CAAgC;AAAE,eAACsD,SAAS,CAACxI,KAAX,GAAmB;AAAE,iBAAC/C,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACG,WAAtC;AAAmD,iBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI;AAAvF;AAArB,aAAhC,CAApB;AACA8K,YAAAA,qBAAqB,CAAC5F,IAAtB,CAA2BsD,SAAS,CAACxI,KAArC,EAJG,CAMH;;AACAgL,YAAAA,uBAAuB,CAAC9F,IAAxB,CAA6B;AACzB,eAACjI,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACG,WADX;AAEzB,eAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI,KAFX;AAGzB,eAAC/C,gBAAgB,CAACyO,UAAlB,GAA+BlD,SAAS,CAACW,WAHhB;AAIzB,eAAClM,gBAAgB,CAAC0O,qBAAlB,GAA0CnD,SAAS,CAACY;AAJ3B,aAA7B;;AAOA,gBAAIZ,SAAS,CAACO,aAAV,KAA4BvL,gBAAgB,CAACwL,QAAjD,EAA2D;AACvD3G,cAAAA,gBAAgB,CAAC6C,IAAjB,CAAsB;AAClB,oCAAoBsD,SAAS,CAACS,KAAV,CAAgBzD,IAAhB,CAAqB0D,UADvB;AAElB,yCAAyBV,SAAS,CAACS,KAAV,CAAgBE,WAFvB;AAGlB,mCAAmB,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2E,eAA3E,GAA6F,oBAH9F;AAIlB,6CAA6BmJ,SAAS,CAACS,KAAV,CAAgBE,WAJ3B;AAKlB;AACA,kCAAkB,UANA;AAOlB,oCAAoB,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2EjC,iBAAiB,CAACyJ,GAA7F,GAAmGzJ,iBAAiB,CAAC0J,EAPvH;AAQlB;AACA,0CAA0B0B,SAAS,CAACY;AATlB,eAAtB;AAWH;;AACDiC,YAAAA,oBAAoB,CAACnG,IAArB,CAA0BsD,SAAS,CAACxI,KAApC;AACAuL,YAAAA,gCAAgC,CAACrG,IAAjC,CAAsC;AAAE,eAACsD,SAAS,CAACxI,KAAX,GAAmBwI,SAAS,CAACG;AAA/B,aAAtC;;AAEA,gBAAIH,SAAS,CAACoB,SAAd,EAAyB;AACrB0B,cAAAA,sBAAsB,CAACpG,IAAvB,CAA4BsD,SAAS,CAACxI,KAAtC;AACH;;AACD,gBAAIwI,SAAS,CAACoD,QAAd,EACIrB,iBAAiB,CAACrF,IAAlB,CAAuB;AAAElF,cAAAA,KAAK,EAAEwI,SAAS,CAACxI,KAAnB;AAA0B8J,cAAAA,cAAc,EAAE;AAA1C,aAAvB,EADJ,KAGIS,iBAAiB,CAACrF,IAAlB,CAAuB;AAAElF,cAAAA,KAAK,EAAEwI,SAAS,CAACxI,KAAnB;AAA0B8J,cAAAA,cAAc,EAAE,CAAC1M,iBAAiB,CAACyO,WAAnB;AAA1C,aAAvB;;AAEJ,gBAAIrD,SAAS,CAACa,SAAV,KAAwB,MAA5B,EAAoC;AAChCsB,cAAAA,mBAAmB,CAACzF,IAApB,CAAyB;AAAE,iBAACjI,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI,KAAtC;AAA6CwJ,gBAAAA,QAAQ,EAAEhB,SAAS,CAACgB,QAAV,IAAsB;AAA7E,eAAzB;AACAoB,cAAAA,wBAAwB,GAAGpC,SAAS,CAACiB,sBAAV,GAAmC,CAAC,GAAGjB,SAAS,CAACiB,sBAAd,EAAsC,GAAGmB,wBAAzC,CAAnC,GAAwGA,wBAAnI;AACH;;AACDJ,YAAAA,iBAAiB,CAACtF,IAAlB,CAAuB;AAAE,eAACjI,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACG,WAAtC;AAAmD,eAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI;AAAvF,aAAvB;AACH;AACJ,SA3FkB,CAAnB;AA4FH,OA7Fe,CADgC,CAApD;AAgGAuH,MAAAA,YAAY,IAAIA,YAAY,CAACa,GAAb,CAAiBC,GAAG,IAChCA,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaF,GAAb,CAAiBG,MAAM,IAAI;AACvCA,QAAAA,MAAM,CAACD,QAAP,IAAmBC,MAAM,CAACD,QAAP,CAAgBF,GAAhB,CAAoBI,SAAS,IAAI;AAChD;AACA,cAAIA,SAAS,CAACa,SAAV,KAAwB,sBAAxB,IAAkDb,SAAS,CAACa,SAAV,KAAwB,qBAA9E,EAAqG;AACjG,gBAAIb,SAAS,CAACC,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtC,kBAAID,SAAS,CAACa,SAAV,KAAwB,sBAAxB,IAAkDb,SAAS,CAACa,SAAV,KAAwB,qBAA9E,EAAqG;AACjG;AACAb,gBAAAA,SAAS,CAACF,QAAV,CAAmBF,GAAnB,CAAuBM,YAAY,IAAI;AACnC;AACAxG,kBAAAA,eAAe,CAACgD,IAAhB,CAAqB;AACjByE,oBAAAA,UAAU,EAAEjB,YAAY,CAAC1I,KADR;AAEjB2I,oBAAAA,WAAW,EAAED,YAAY,CAACC;AAFT,mBAArB;;AAIA,sBAAID,YAAY,CAACD,cAAb,CAA4B,OAA5B,CAAJ,EAA0C;AACtCC,oBAAAA,YAAY,CAACoD,KAAb,CAAmB1D,GAAnB,CAAuB2D,SAAS,IAAI;AAChC5J,sBAAAA,eAAe,CAAC+C,IAAhB,CAAqB;AACjB,sCAAcwD,YAAY,CAAC1I,KADV;AAEjB,uCAAe0I,YAAY,CAACC,WAFX;AAGjB,0CAAkBD,YAAY,CAAC1I,KAHd;AAIjB;AACA;AACA,2CAAmB+L,SAAS,CAACC,eANZ;AAOjB,4CAAoB;AAPH,uBAArB;AASH,qBAVD;AAWH;;AACD,sBAAItD,YAAY,CAACK,aAAb,KAA+BvL,gBAAgB,CAACwL,QAApD,EAA8D;AAC1D3G,oBAAAA,gBAAgB,CAAC6C,IAAjB,CAAsB;AAClB,0CAAoBwD,YAAY,CAACO,KAAb,CAAmBzD,IAAnB,CAAwB0D,UAD1B;AAElB,+CAAyBR,YAAY,CAACO,KAAb,CAAmBE,WAF1B;AAGlB,yCAAmB,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2E,eAA3E,GAA6F,cAH9F;AAIlB,mDAA6BqJ,YAAY,CAACO,KAAb,CAAmBE,WAJ9B;AAKlB;AACA,wCAAkB,UANA;AAOlB,0CAAoB,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2EjC,iBAAiB,CAACyJ,GAA7F,GAAmGzJ,iBAAiB,CAAC0J,EAPvH;AAQlB;AACA,gDAA0B4B,YAAY,CAACU;AATrB,qBAAtB;AAWH;;AACDV,kBAAAA,YAAY,CAACE,MAAb,IAAuBqC,sBAAsB,CAAC/F,IAAvB,CAA4B;AAAE,qBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAAC1I;AAAzC,mBAA5B,CAAvB;AACA0I,kBAAAA,YAAY,CAACE,MAAb,IAAuBuC,uBAAuB,CAACjG,IAAxB,CAA6B;AAAE,qBAACwD,YAAY,CAAC1I,KAAd,GAAsB;AAAE,uBAAC/C,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAACC,WAAzC;AAAsD,uBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I;AAA7F;AAAxB,mBAA7B,CAAvB;AACA6K,kBAAAA,kBAAkB,CAAC3F,IAAnB,CAAwBwD,YAAY,CAAC1I,KAArC;AACA+K,kBAAAA,oBAAoB,CAAC7F,IAArB,CAA0B;AACtB,qBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAACC,WADjB;AAEtB,qBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I,KAFjB;AAGtB,qBAAC/C,gBAAgB,CAACyO,UAAlB,GAA+BhD,YAAY,CAACS,WAHtB;AAItB,qBAAClM,gBAAgB,CAAC0O,qBAAlB,GAA0CjD,YAAY,CAACU;AAJjC,mBAA1B;AAMAnB,kBAAAA,iBAAiB,CAAC/C,IAAlB,CAAuBwD,YAAY,CAAC1I,KAApC;AACAmI,kBAAAA,6BAA6B,CAACjD,IAA9B,CAAmC;AAAE,qBAACwD,YAAY,CAAC1I,KAAd,GAAsB0I,YAAY,CAACC;AAArC,mBAAnC;;AACA,sBAAID,YAAY,CAACW,SAAb,KAA2B,MAA/B,EAAuC;AACnCoB,oBAAAA,gBAAgB,CAACvF,IAAjB,CAAsB;AAAE,uBAACjI,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I,KAAzC;AAAgDwJ,sBAAAA,QAAQ,EAAEd,YAAY,CAACc,QAAb,IAAyB;AAAnF,qBAAtB;AACAkB,oBAAAA,qBAAqB,GAAGhC,YAAY,CAACe,sBAAb,GAAsC,CAAC,GAAGf,YAAY,CAACe,sBAAjB,EAAyC,GAAGiB,qBAA5C,CAAtC,GAA2GA,qBAAnI;AACH;;AACDL,kBAAAA,aAAa,CAACnF,IAAd,CAAmB;AAAE,qBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAACC,WAAzC;AAAsD,qBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I;AAA7F,mBAAnB;AACA0I,kBAAAA,YAAY,CAACmB,iBAAb,IAAkCS,QAAQ,CAACpF,IAAT,CAAc;AAAE,qBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAACC,WAAzC;AAAsD,qBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I;AAA7F,mBAAd,CAAlC;;AACA,sBAAI0I,YAAY,CAACkB,SAAb,IAA0BlB,YAAY,CAACmB,iBAA3C,EAA8D;AAC1DpC,oBAAAA,QAAQ,CAACvC,IAAT,CAAc;AAAE,uBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAACC,WAAzC;AAAsD,uBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I;AAA7F,qBAAd;AACAkI,oBAAAA,mBAAmB,CAAChD,IAApB,CAAyBwD,YAAY,CAAC1I,KAAtC;AACH,mBAHD,MAIK;AACD0H,oBAAAA,YAAY,CAACxC,IAAb,CAAkB;AAAE,uBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BwB,YAAY,CAACC,WAAzC;AAAsD,uBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BuB,YAAY,CAAC1I;AAA7F,qBAAlB;AACH;;AACD,sBAAI0I,YAAY,CAACmB,iBAAjB,EAAoC;AAChC9B,oBAAAA,QAAQ,CAAC7C,IAAT,CAAc;AAAElF,sBAAAA,KAAK,EAAE0I,YAAY,CAAC1I,KAAtB;AAA6B8J,sBAAAA,cAAc,EAAE;AAA7C,qBAAd;AACH,mBAFD,MAGK;AACD,wBAAIpB,YAAY,CAACkD,QAAjB,EACI7D,QAAQ,CAAC7C,IAAT,CAAc;AAAElF,sBAAAA,KAAK,EAAE0I,YAAY,CAAC1I,KAAtB;AAA6B8J,sBAAAA,cAAc,EAAE;AAA7C,qBAAd,EADJ,KAGI/B,QAAQ,CAAC7C,IAAT,CAAc;AAAElF,sBAAAA,KAAK,EAAE0I,YAAY,CAAC1I,KAAtB;AAA6B8J,sBAAAA,cAAc,EAAE,CAAC1M,iBAAiB,CAACyO,WAAnB;AAA7C,qBAAd;AAEP;;AACD,yBAAO,IAAP;AACH,iBAnED,EAFiG,CAsEjG;AACA;AACA;AACA;AACH;AACJ,aA5ED,MA6EK;AACD,kBAAIrD,SAAS,CAACa,SAAV,KAAwB,sBAAxB,IAAkDb,SAAS,CAACa,SAAV,KAAwB,qBAA9E,EAAqG;AACjG;AACAnH,gBAAAA,eAAe,CAACgD,IAAhB,CAAqB;AACjByE,kBAAAA,UAAU,EAAEnB,SAAS,CAACxI,KADL;AAEjB2I,kBAAAA,WAAW,EAAEH,SAAS,CAACG;AAFN,iBAArB;;AAIA,oBAAIH,SAAS,CAACO,aAAV,KAA4BvL,gBAAgB,CAACwL,QAAjD,EAA2D;AACvD3G,kBAAAA,gBAAgB,CAAC6C,IAAjB,CAAsB;AAClB,wCAAoBsD,SAAS,CAACS,KAAV,CAAgBzD,IAAhB,CAAqB0D,UADvB;AAElB,6CAAyBV,SAAS,CAACS,KAAV,CAAgBE,WAFvB;AAGlB,uCAAmB,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2E,eAA3E,GAA6F,cAH9F;AAIlB,iDAA6BmJ,SAAS,CAACS,KAAV,CAAgBE,WAJ3B;AAKlB;AACA,sCAAkB,UANA;AAOlB,wCAAoB,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2EjC,iBAAiB,CAACyJ,GAA7F,GAAmGzJ,iBAAiB,CAAC0J,EAPvH;AAQlB;AACA,8CAA0B0B,SAAS,CAACY;AATlB,mBAAtB;AAWH;;AACD,oBAAIZ,SAAS,CAACC,cAAV,CAAyB,OAAzB,CAAJ,EAAuC;AACnCD,kBAAAA,SAAS,CAACsD,KAAV,CAAgB1D,GAAhB,CAAoB2D,SAAS,IAAI;AAC7B5J,oBAAAA,eAAe,CAAC+C,IAAhB,CAAqB;AACjB,oCAAcsD,SAAS,CAACxI,KADP;AAEjB,qCAAewI,SAAS,CAACG,WAFR;AAGjB,wCAAkBH,SAAS,CAACxI,KAHX;AAIjB;AACA;AACA,yCAAmB+L,SAAS,CAACC,eANZ;AAOjB,0CAAoB;AAPH,qBAArB;AASH,mBAVD;AAWH;;AACDxD,gBAAAA,SAAS,CAACI,MAAV,IAAoBqC,sBAAsB,CAAC/F,IAAvB,CAA4B;AAAE,mBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACxI;AAAtC,iBAA5B,CAApB;AACAwI,gBAAAA,SAAS,CAACI,MAAV,IAAoBuC,uBAAuB,CAACjG,IAAxB,CAA6B;AAAE,mBAACsD,SAAS,CAACxI,KAAX,GAAmB;AAAE,qBAAC/C,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACG,WAAtC;AAAmD,qBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI;AAAvF;AAArB,iBAA7B,CAApB;AACA6K,gBAAAA,kBAAkB,CAAC3F,IAAnB,CAAwBsD,SAAS,CAACxI,KAAlC;AACA+K,gBAAAA,oBAAoB,CAAC7F,IAArB,CAA0B;AACtB,mBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACG,WADd;AAEtB,mBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI,KAFd;AAGtB,mBAAC/C,gBAAgB,CAACyO,UAAlB,GAA+BlD,SAAS,CAACW,WAHnB;AAItB,mBAAClM,gBAAgB,CAAC0O,qBAAlB,GAA0CnD,SAAS,CAACY;AAJ9B,iBAA1B;AAMAnB,gBAAAA,iBAAiB,CAAC/C,IAAlB,CAAuBsD,SAAS,CAACxI,KAAjC;AACAmI,gBAAAA,6BAA6B,CAACjD,IAA9B,CAAmC;AAAE,mBAACsD,SAAS,CAACxI,KAAX,GAAmBwI,SAAS,CAACG;AAA/B,iBAAnC;;AACA,oBAAIH,SAAS,CAACa,SAAV,KAAwB,MAA5B,EAAoC;AAChCoB,kBAAAA,gBAAgB,CAACvF,IAAjB,CAAsB;AAAE,qBAACjI,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI,KAAtC;AAA6CwJ,oBAAAA,QAAQ,EAAEhB,SAAS,CAACgB,QAAV,IAAsB;AAA7E,mBAAtB;AACAkB,kBAAAA,qBAAqB,GAAGlC,SAAS,CAACiB,sBAAV,GAAmC,CAAC,GAAGjB,SAAS,CAACiB,sBAAd,EAAsC,GAAGiB,qBAAzC,CAAnC,GAAqGA,qBAA7H;AACH;;AACDL,gBAAAA,aAAa,CAACnF,IAAd,CAAmB;AAAE,mBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACG,WAAtC;AAAmD,mBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI;AAAvF,iBAAnB,EA/CiG,CAgDjG;AACA;;AACA,oBAAIwI,SAAS,CAACoB,SAAV,IAAuBpB,SAAS,CAACqB,iBAArC,EAAwD;AACpDpC,kBAAAA,QAAQ,CAACvC,IAAT,CAAc;AAAE,qBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACG,WAAtC;AAAmD,qBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI;AAAvF,mBAAd;AACAsK,kBAAAA,QAAQ,CAACpF,IAAT,CAAc;AAAE,qBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACG,WAAtC;AAAmD,qBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI,KAAvF;AAA8F4J,oBAAAA,SAAS,EAAE;AAAzG,mBAAd;AACA1B,kBAAAA,mBAAmB,CAAChD,IAApB,CAAyBsD,SAAS,CAACxI,KAAnC;AACH,iBAJD,MAIO;AACH0H,kBAAAA,YAAY,CAACxC,IAAb,CAAkB;AAAE,qBAACjI,gBAAgB,CAACiK,KAAlB,GAA0BsB,SAAS,CAACG,WAAtC;AAAmD,qBAAC1L,gBAAgB,CAACkK,KAAlB,GAA0BqB,SAAS,CAACxI;AAAvF,mBAAlB;AACH;;AACD,oBAAIwI,SAAS,CAACqB,iBAAd,EAAiC;AAC7B9B,kBAAAA,QAAQ,CAAC7C,IAAT,CAAc;AAAElF,oBAAAA,KAAK,EAAEwI,SAAS,CAACxI,KAAnB;AAA0B8J,oBAAAA,cAAc,EAAE;AAA1C,mBAAd;AACH,iBAFD,MAGK;AACD;AACA,sBAAItB,SAAS,CAACoD,QAAd,EACI7D,QAAQ,CAAC7C,IAAT,CAAc;AAAElF,oBAAAA,KAAK,EAAEwI,SAAS,CAACxI,KAAnB;AAA0B8J,oBAAAA,cAAc,EAAE;AAA1C,mBAAd,EADJ,KAGI/B,QAAQ,CAAC7C,IAAT,CAAc;AAAElF,oBAAAA,KAAK,EAAEwI,SAAS,CAACxI,KAAnB;AAA0B8J,oBAAAA,cAAc,EAAE,CAAC1M,iBAAiB,CAACyO,WAAnB;AAA1C,mBAAd;AAEP;;AACD,uBAAO,IAAP;AACH;AACJ;AACJ;AACJ,SAzJkB,CAAnB;AA0JH,OA3Je,CADJ,CAAhB,CAxJ4B,CAuT5B;;AACAxB,MAAAA,aAAa,CAACnF,IAAd,CAAmB;AACf,SAACjI,gBAAgB,CAACiK,KAAlB,GAA0B;AAAE,mBAAS,WAAX;AAAwB,mBAAS,WAAjC;AAA8C,mBAAS;AAAvD,SADX;AAEf,SAACjK,gBAAgB,CAACkK,KAAlB,GAA0B;AAFX,OAAnB,EAxT4B,CA6T5B;AACA;AAEA;;AACA,YAAM8E,cAAc,GAAG,EAAE,GAAG,KAAK1N,KAAL,CAAWJ,KAAX,CAAiB8N;AAAtB,OAAvB;AAEA,UAAIC,GAAG,GAAG;AACNC,QAAAA,mBAAmB,EAAE9B,aADf;AAEN+B,QAAAA,cAAc,EAAE9B,QAFV;AAGN+B,QAAAA,cAAc,EAAE5E,QAHV;AAIN6E,QAAAA,kBAAkB,EAAE5E,YAJd;AAKN8C,QAAAA,iBALM;AAMNC,QAAAA,gBANM;AAONE,QAAAA,mBAPM;AAQNE,QAAAA,kBARM;AASNC,QAAAA,qBATM;AAUNU,QAAAA,cAVM;AAWNd,QAAAA,qBAXM;AAYNE,QAAAA,wBAZM;AAaN;AACA;AACAO,QAAAA,uBAfM;AAgBNc,QAAAA,cAhBM;AAiBN5J,QAAAA,gBAjBM,CAkBN;;AAlBM,OAAV;AAsBA4F,MAAAA,iBAAiB,CAAC/C,IAAlB,CAAuB,UAAvB,EAAmC,qBAAnC;AACAgD,MAAAA,mBAAmB,CAAChD,IAApB,CAAyB,qBAAzB;AACAmG,MAAAA,oBAAoB,CAACnG,IAArB,CAA0B,qBAA1B;AACAoG,MAAAA,sBAAsB,CAACpG,IAAvB,CAA4B,qBAA5B;AACAiD,MAAAA,6BAA6B,CAACjD,IAA9B,CAAmC;AAAE,oBAAY;AAAE,mBAAS,WAAX;AAAwB,mBAAS,WAAjC;AAA8C,mBAAS;AAAvD;AAAd,OAAnC,EACI;AAAE,+BAAuB;AAAE,mBAAS,oBAAX;AAAiC,mBAAS,oBAA1C;AAAgE,mBAAS;AAAzE;AAAzB,OADJ;AAEAqG,MAAAA,gCAAgC,CAACrG,IAAjC,CAAsC;AAAE,+BAAuB;AAAE,mBAAS,oBAAX;AAAiC,mBAAS,oBAA1C;AAAgE,mBAAS;AAAzE;AAAzB,OAAtC;AAEA,UAAIjD,QAAQ,GAAG;AAEXmJ,QAAAA,0BAFW;AAGXD,QAAAA,uBAHW;AAIXJ,QAAAA,oBAAoB,EAAE,CAAC,GAAGzN,oBAAJ,EAA0B,GAAGyN,oBAA7B,CAJX;AAKXC,QAAAA,uBAAuB,EAAE,CAAC,GAAGzN,uBAAJ,EAA6B,GAAGyN,uBAAhC,CALd;AAKuE;AAClF,SAAC9N,QAAQ,CAACqP,kBAAV,GAA+B,EAC3B,GAAGL,GADwB;AAE3BM,UAAAA,cAAc,EAAEzE,QAFW;AAG3BwC,UAAAA,iBAH2B;AAI3BY,UAAAA,uBAJ2B;AAK3BC,UAAAA;AAL2B,SANpB;AAaX,SAAClO,QAAQ,CAACuP,WAAV,GAAwB,EAAE,GAAGP;AAAL,SAbb;AAcX,SAAChP,QAAQ,CAACwP,QAAV,GAAqB,EAAE,GAAGR;AAAL,SAdV;AAeX,SAAChP,QAAQ,CAACyP,aAAV,GAA0B,EACtB,GAAGT,GADmB;AAEtBG,UAAAA,cAAc,EAAE,CACZ,GAAGH,GAAG,CAACG,cADK,EAEZ;AACI,iBAAK;AACD,uBAAS,SADR;AAED,uBAAS,QAFR;AAGD,uBAAS;AAHR,aADT;AAMI,iBAAK;AANT,WAFY,CAUZ;AAVY,WAFM;AActBD,UAAAA,cAAc,EAAE,CACZ;AACI,iBAAK;AACD,uBAAS,iBADR;AAED,uBAAS,iBAFR;AAGD,uBAAS;AAHR,aADT;AAMI,iBAAK;AANT,WADY,EASZ;AACI,iBAAK;AACD,uBAAS,SADR;AAED,uBAAS,QAFR;AAGD,uBAAS;AAHR,aADT;AAMI,iBAAK;AANT,WATY,CAdM,CAgCtB;;AAhCsB,SAff;AAkDX;AACA,SAAClP,QAAQ,CAAC0P,MAAV,GAAmB,EAAE,GAAGV;AAAL,SAnDR;AAoDX,SAAChP,QAAQ,CAAC2P,QAAV,GAAqB,EAAE,GAAGX;AAAL,SApDV;AAqDX,SAAChP,QAAQ,CAAC4P,aAAV,GAA0B;AAEtBT,UAAAA,cAAc,EAAE,CACZ;AACI,iBAAK;AACD,uBAAS,WADR;AAED,uBAAS,WAFR;AAGD,uBAAS;AAHR,aADT;AAMI,iBAAK;AANT,WADY,EASZ,GAAGH,GAAG,CAACG,cATK,CAFM;AAetB7B,UAAAA,iBAAiB,EAAE,CAAC;AAEhB,iBAAK;AACD,uBAAS,eADR;AAED,uBAAS,aAFR;AAGD,uBAAS;AAHR,aAFW;AAOhB,iBAAK;AAPW,WAAD,EASnB,GAAG0B,GAAG,CAAC1B,iBATY,CAfG;AA0BtB,aAAG0B;AA1BmB,SArDf;AAiFX,SAAChP,QAAQ,CAAC6P,cAAV,GAA2B,EAAE,GAAGb;AAAL,SAjFhB;AAkFX,SAAChP,QAAQ,CAAC8P,OAAV,GAAoB,EAChB,GAAGd,GADa;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1B,UAAAA,iBAAiB,EAAE,CAAC;AAChB,iBAAK;AACD,uBAAS,eADR;AAED,uBAAS,aAFR;AAGD,uBAAS;AAHR,aADW;AAMhB,iBAAK;AANW,WAAD,EAQnB,GAAG0B,GAAG,CAAC1B,iBARY,CAvBH,CAiChB;;AAjCgB,SAlFT;AAqHXtC,QAAAA,mBArHW;AAsHXD,QAAAA,iBAtHW;AAuHXE,QAAAA,6BAvHW;AAwHXmD,QAAAA,sBAxHW;AAyHXD,QAAAA,oBAzHW;AA0HXE,QAAAA,gCA1HW;AA2HXlJ,QAAAA;AA3HW,OAAf,CAjW4B,CA+d5B;;AACA,aAAOJ,QAAP;AACH,KAjgEkB;;AAAA,SAmgEnBgL,cAngEmB,GAmgEF,CAACxO,KAAD,EAAQyO,QAAR,EAAkBC,KAAlB,EAAyBC,SAAzB,EAAoClQ,QAApC,EAA8CoG,SAA9C,KAA4D;AAEzE,UAAIyB,UAAU,GAAG,KAAKxG,KAAL,CAAWJ,KAAX,CAAiB4G,UAAlC;AACA,UAAIsI,UAAU,GAAG,KAAK9O,KAAL,CAAWJ,KAAX,CAAiBkP,UAAlC;;AACA,UAAI/J,SAAS,KAAK,gBAAlB,EAAoC;AAChCyB,QAAAA,UAAU,GAAG,KAAKxG,KAAL,CAAWJ,KAAX,CAAiBmP,oBAA9B;AACAD,QAAAA,UAAU,GAAG,KAAK9O,KAAL,CAAWJ,KAAX,CAAiBoP,oBAA9B;AACH;;AAED,UAAIC,SAAS,GAAG,cAAhB;;AACA,UAAI,KAAKjP,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAArE,EAA8E;AAC1EmO,QAAAA,SAAS,GAAG,eAAZ;AACH;;AACD,UAAItQ,QAAQ,KAAK6F,SAAjB,EAA4B;AACxBsK,QAAAA,UAAU,CAACD,SAAD,CAAV,CAAsBD,KAAtB,IAA+B1O,KAAK,CAACgI,MAAN,CAAaG,OAA5C;;AACA,YAAInI,KAAK,CAACgI,MAAN,CAAaG,OAAjB,EAA0B;AACtB7B,UAAAA,UAAU,CAACoI,KAAD,CAAV,CAAkBM,MAAlB,CAAyBL,SAAzB,EAAoC,CAApC,EAAuCF,QAAQ,CAACQ,QAAhD;AAEH,SAHD,MAGO;AACH3I,UAAAA,UAAU,CAACoI,KAAD,CAAV,CAAkBM,MAAlB,CAAyB1I,UAAU,CAACoI,KAAD,CAAV,CAAkBQ,SAAlB,CAA4BC,CAAC,IAAIA,CAAC,CAAC3Q,gBAAgB,CAACkK,KAAlB,CAAD,KAA8B+F,QAAQ,CAAClN,KAAxE,CAAzB,EAAyG,CAAzG;AACH;AACJ,OARD,MASK;AACD;AACA,YAAIvB,KAAK,CAACgI,MAAN,CAAaG,OAAjB,EAA0B;AACtB,cAAIuG,KAAK,KAAK,gBAAV,IAA8BpI,UAAU,CAAC7H,QAAD,CAAV,CAAqBiQ,KAArB,EAA4BhI,MAA5B,IAAsC,CAAxE,EAA2E;AACvE,mBAAO/J,KAAK,CAACyI,IAAN,CAAW,KAAKtF,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAA9B,CAAX,CAAP;AACH,WAFD,MAGK;AAED,gBAAImJ,KAAK,KAAK,qBAAd,EAAqC;AACjCE,cAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqBkQ,SAArB,EAAgCD,KAAhC,IAAyC1O,KAAK,CAACgI,MAAN,CAAaG,OAAtD;AACA7B,cAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2CuQ,MAA3C,CAAkDL,SAAlD,EAA6D,CAA7D,EAAgEF,QAAQ,CAAClN,KAAzE;AACA+E,cAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqBiQ,KAArB,EAA4BM,MAA5B,CAAmCL,SAAnC,EAA8C,CAA9C,EAAiDF,QAAQ,CAACQ,QAA1D;AACH,aAJD,MAKK,IAAIP,KAAK,KAAK,mBAAd,EAAmC;AACpCE,cAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqBsQ,SAArB,EAAgCJ,SAAhC,EAA2CD,KAA3C,IAAoD1O,KAAK,CAACgI,MAAN,CAAaG,OAAjE;;AACA,kBAAI7B,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgC,mBAAhC,EAAqDK,OAArD,CAA6DX,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAA7D,MAA4G,CAAC,CAAjH,EAAoH;AAChHpC,gBAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgC,mBAAhC,EAAqDC,MAArD,CAA4DL,SAA5D,EAAuE,CAAvE,EAA0EF,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAA1E;AACApC,gBAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgC,oBAAhC,EAAsDC,MAAtD,CAA6DL,SAA7D,EAAwE,CAAxE,EAA2E;AAAE,mBAACF,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAAD,GAA6C+F,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACiK,KAAnC;AAA/C,iBAA3E;AACH;AACJ,aANI,MAOA,IAAIiG,KAAK,KAAK,uBAAd,EAAuC;AACxCE,cAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqBsQ,SAArB,EAAgCJ,SAAhC,EAA2C,mBAA3C,IAAkE3O,KAAK,CAACgI,MAAN,CAAaG,OAA/E;AACAyG,cAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqBsQ,SAArB,EAAgCJ,SAAhC,EAA2C,uBAA3C,IAAsE3O,KAAK,CAACgI,MAAN,CAAaG,OAAnF;;AACA,kBAAI7B,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgC,uBAAhC,EAAyDK,OAAzD,CAAiEX,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAAjE,MAAgH,CAAC,CAArH,EAAwH;AAEpHpC,gBAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgCL,KAAhC,EAAuCM,MAAvC,CAA8CL,SAA9C,EAAyD,CAAzD,EAA4DF,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAA5D;;AACA,oBAAIpC,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgC,mBAAhC,EAAqDK,OAArD,CAA6DX,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAA7D,MAA4G,CAAC,CAAjH,EAAoH;AAChHpC,kBAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgC,mBAAhC,EAAqDC,MAArD,CAA4DL,SAA5D,EAAuE,CAAvE,EAA0EF,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAA1E;AACApC,kBAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgC,oBAAhC,EAAsDC,MAAtD,CAA6DL,SAA7D,EAAwE,CAAxE,EAA2E;AAAE,qBAACF,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAAD,GAA6C+F,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACiK,KAAnC;AAA/C,mBAA3E;AACH;AACJ;AACJ,aAXI,MAYA,IAAIiG,KAAK,KAAK,sBAAd,EAAsC;AACvCE,cAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqB,oBAArB,EAA2CkQ,SAA3C,EAAsDD,KAAtD,IAA+D1O,KAAK,CAACgI,MAAN,CAAaG,OAA5E;;AACA,kBAAI7B,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2C,sBAA3C,EAAmE2Q,OAAnE,CAA2EX,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAA3E,MAA0H,CAAC,CAA/H,EAAkI;AAC9HpC,gBAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2C,sBAA3C,EAAmEuQ,MAAnE,CAA0EL,SAA1E,EAAqF,CAArF,EAAwFF,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAAxF;AACApC,gBAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2C,oBAA3C,EAAiEuQ,MAAjE,CAAwEL,SAAxE,EAAmF,CAAnF,EAAsF;AAAE,mBAACF,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAAD,GAA6C+F,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACiK,KAAnC;AAA/C,iBAAtF;AACH;AACJ,aANI,MAOA,IAAIiG,KAAK,KAAK,0BAAd,EAA0C;AAC3CE,cAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqB,oBAArB,EAA2CkQ,SAA3C,EAAsD,sBAAtD,IAAgF3O,KAAK,CAACgI,MAAN,CAAaG,OAA7F;AACAyG,cAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqB,oBAArB,EAA2CkQ,SAA3C,EAAsD,0BAAtD,IAAoF3O,KAAK,CAACgI,MAAN,CAAaG,OAAjG;;AACA,kBAAI7B,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2C,0BAA3C,EAAuE2Q,OAAvE,CAA+EX,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAA/E,MAA8H,CAAC,CAAnI,EAAsI;AAElIpC,gBAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2CiQ,KAA3C,EAAkDM,MAAlD,CAAyDL,SAAzD,EAAoE,CAApE,EAAuEF,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAAvE;;AACA,oBAAIpC,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2C,sBAA3C,EAAmE2Q,OAAnE,CAA2EX,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAA3E,MAA0H,CAAC,CAA/H,EAAkI;AAC9HpC,kBAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2C,sBAA3C,EAAmEuQ,MAAnE,CAA0EL,SAA1E,EAAqF,CAArF,EAAwFF,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAAxF;AACApC,kBAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2C,oBAA3C,EAAiEuQ,MAAjE,CAAwEL,SAAxE,EAAmF,CAAnF,EAAsF;AAAE,qBAACF,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAAD,GAA6C+F,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACiK,KAAnC;AAA/C,mBAAtF;AACH;AACJ;AACJ,aAXI,MAYA;AACDmG,cAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqBkQ,SAArB,EAAgCD,KAAhC,IAAyC1O,KAAK,CAACgI,MAAN,CAAaG,OAAtD;AACA7B,cAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqBiQ,KAArB,EAA4BM,MAA5B,CAAmCL,SAAnC,EAA8C,CAA9C,EAAiDF,QAAQ,CAACQ,QAA1D;AACH;AACJ;AACJ,SAtDD,MAuDK;AAED,cAAIP,KAAK,KAAK,qBAAd,EAAqC;AACjCE,YAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqBkQ,SAArB,EAAgCD,KAAhC,IAAyC1O,KAAK,CAACgI,MAAN,CAAaG,OAAtD;AACA7B,YAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqBiQ,KAArB,EAA4BM,MAA5B,CAAmC1I,UAAU,CAAC7H,QAAD,CAAV,CAAqBiQ,KAArB,EAA4BQ,SAA5B,CAAsCC,CAAC,IAAIA,CAAC,CAAC3Q,gBAAgB,CAACkK,KAAlB,CAAD,KAA8B+F,QAAQ,CAAClN,KAAlF,CAAnC,EAA6H,CAA7H;AAEA,kBAAMuE,KAAK,GAAGQ,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2CyQ,SAA3C,CAAqDC,CAAC,IAAIA,CAAC,KAAKV,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAAhE,CAAd;;AACA,gBAAI5C,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdQ,cAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2CuQ,MAA3C,CAAkDlJ,KAAlD,EAAyD,CAAzD;AACH;AACJ,WARD,MASK,IAAI4I,KAAK,KAAK,mBAAd,EAAmC;AACpCE,YAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqBsQ,SAArB,EAAgCJ,SAAhC,EAA2CD,KAA3C,IAAoD1O,KAAK,CAACgI,MAAN,CAAaG,OAAjE;AACA,kBAAMrC,KAAK,GAAGQ,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgCL,KAAhC,EAAuCQ,SAAvC,CAAiDC,CAAC,IAAIA,CAAC,KAAKV,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAA5D,CAAd;;AACA,gBAAI5C,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdQ,cAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgCL,KAAhC,EAAuCM,MAAvC,CAA8ClJ,KAA9C,EAAqD,CAArD;AACH;;AAED,kBAAMuJ,MAAM,GAAG/I,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgC,oBAAhC,EAAsDpF,GAAtD,CAA0D2F,MAAM,IAAIC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoB,CAApB,CAApE,EAA4FF,OAA5F,CAAoGX,QAAQ,CAAClN,KAA7G,CAAf;;AACA,gBAAI8N,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACf/I,cAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgC,oBAAhC,EAAsDC,MAAtD,CAA6DK,MAA7D,EAAqE,CAArE;AACH;;AAED,kBAAMI,MAAM,GAAGnJ,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgC,uBAAhC,EAAyDG,SAAzD,CAAmEC,CAAC,IAAIA,CAAC,KAAKV,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAA9E,CAAf;;AACA,gBAAI+G,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACfnJ,cAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgC,uBAAhC,EAAyDC,MAAzD,CAAgES,MAAhE,EAAwE,CAAxE;AACH;;AACDb,YAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqBsQ,SAArB,EAAgCJ,SAAhC,EAA2C,uBAA3C,IAAsE3O,KAAK,CAACgI,MAAN,CAAaG,OAAnF;AACH,WAjBI,MAkBA,IAAIuG,KAAK,KAAK,uBAAd,EAAuC;AACxCE,YAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqBsQ,SAArB,EAAgCJ,SAAhC,EAA2CD,KAA3C,IAAoD1O,KAAK,CAACgI,MAAN,CAAaG,OAAjE;AACA,kBAAMuH,MAAM,GAAGpJ,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgCL,KAAhC,EAAuCQ,SAAvC,CAAiDC,CAAC,IAAIA,CAAC,KAAKV,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAA5D,CAAf;;AACA,gBAAIgH,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACfpJ,cAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqBsQ,SAArB,EAAgCL,KAAhC,EAAuCM,MAAvC,CAA8CU,MAA9C,EAAsD,CAAtD;AACH;AACJ,WANI,MAOA,IAAIhB,KAAK,KAAK,sBAAd,EAAsC;AACvCE,YAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqB,oBAArB,EAA2CkQ,SAA3C,EAAsDD,KAAtD,IAA+D1O,KAAK,CAACgI,MAAN,CAAaG,OAA5E;AACA,kBAAMkH,MAAM,GAAG/I,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2CiQ,KAA3C,EAAkDQ,SAAlD,CAA4DC,CAAC,IAAIA,CAAC,KAAKV,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAAvE,CAAf;;AACA,gBAAI2G,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACf/I,cAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2CiQ,KAA3C,EAAkDM,MAAlD,CAAyDK,MAAzD,EAAiE,CAAjE;AACH;;AAED,kBAAMM,MAAM,GAAGrJ,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2C,oBAA3C,EAAiEkL,GAAjE,CAAqE2F,MAAM,IAAIC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoB,CAApB,CAA/E,EAAuGF,OAAvG,CAA+GX,QAAQ,CAAClN,KAAxH,CAAf;;AACA,gBAAIoO,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACfrJ,cAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2C,oBAA3C,EAAiEuQ,MAAjE,CAAwEW,MAAxE,EAAgF,CAAhF;AACH;;AACD,kBAAMF,MAAM,GAAGnJ,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2C,0BAA3C,EAAuEyQ,SAAvE,CAAiFC,CAAC,IAAIA,CAAC,KAAKV,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAA5F,CAAf;;AACA,gBAAI+G,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACfnJ,cAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2C,0BAA3C,EAAuEuQ,MAAvE,CAA8ES,MAA9E,EAAsF,CAAtF;AACH;;AACDb,YAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqB,oBAArB,EAA2CkQ,SAA3C,EAAsD,0BAAtD,IAAoF3O,KAAK,CAACgI,MAAN,CAAaG,OAAjG;AACH,WAhBI,MAiBA,IAAIuG,KAAK,KAAK,0BAAd,EAA0C;AAC3CE,YAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqB,oBAArB,EAA2CkQ,SAA3C,EAAsDD,KAAtD,IAA+D1O,KAAK,CAACgI,MAAN,CAAaG,OAA5E;AACA,kBAAMkH,MAAM,GAAG/I,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2CiQ,KAA3C,EAAkDQ,SAAlD,CAA4DC,CAAC,IAAIA,CAAC,KAAKV,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAAvE,CAAf;;AACA,gBAAI2G,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACf/I,cAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqB,oBAArB,EAA2CiQ,KAA3C,EAAkDM,MAAlD,CAAyDK,MAAzD,EAAiE,CAAjE;AACH;AACJ,WANI,MAOA;AACDT,YAAAA,UAAU,CAACnQ,QAAD,CAAV,CAAqBkQ,SAArB,EAAgCD,KAAhC,IAAyC1O,KAAK,CAACgI,MAAN,CAAaG,OAAtD;AACA7B,YAAAA,UAAU,CAAC7H,QAAD,CAAV,CAAqBiQ,KAArB,EAA4BM,MAA5B,CAAmC1I,UAAU,CAAC7H,QAAD,CAAV,CAAqBiQ,KAArB,EAA4BQ,SAA5B,CAAsCC,CAAC,IAAIA,CAAC,CAAC3Q,gBAAgB,CAACkK,KAAlB,CAAD,KAA8B+F,QAAQ,CAACQ,QAAT,CAAkBzQ,gBAAgB,CAACkK,KAAnC,CAAzE,CAAnC,EAAwJ,CAAxJ;AAEH;AACJ;AACJ;;AAED,UAAI1H,IAAI,GAAG;AAAEsF,QAAAA,UAAF;AAAcsI,QAAAA;AAAd,OAAX;;AACA,UAAI/J,SAAS,KAAK,gBAAlB,EAAoC;AAChC7D,QAAAA,IAAI,GAAG;AACH6N,UAAAA,oBAAoB,EAAEvI,UADnB;AAEHwI,UAAAA,oBAAoB,EAAEF;AAFnB,SAAP;AAIH;;AACD,YAAM9N,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE1C,cADK;AAEf2C,QAAAA,IAAI,EAAE,EAAE,GAAGA;AAAL;AAFS,OAAnB;AAIA,WAAKlB,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AAEH,KAnqEkB;;AAAA,SAsqEnB8O,WAtqEmB,GAsqEL,CAAC9K,QAAD,EAAW+K,OAAX,KAAuB;AAEjC;AACA;AACA,UAAI3P,SAAS,GAAG,EAAhB;AAEA,UAAI2E,SAAS,GAAG,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjC;AACA,YAAM2G,aAAa,GAAG,KAAK1L,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,GAAkD,KAAK/C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,CAAgDkE,IAAhD,CAAqDE,cAAvG,GAAwH,KAA9I;;AAEA,UAAIpC,SAAS,KAAK,WAAd,IAA6BA,SAAS,KAAK,oBAA/C,EAAqE;AACjE3E,QAAAA,SAAS,GAAG;AACR2G,UAAAA,qBAAqB,EAAE;AACnBC,YAAAA,0BAA0B,EAAE,KAAKhH,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DyD,0BADnE;AAEnBgJ,YAAAA,WAAW,EAAE,KAAKhQ,KAAL,CAAWJ,KAAX,CAAiB4G;AAFX,WADf;AAKRnG,UAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU;AALnB,SAAZ;AAOAyE,QAAAA,SAAS,GAAG,WAAZ;AACH,OATD,MAUK,IAAIA,SAAS,KAAK,eAAd,IAAiCA,SAAS,KAAK,wBAAnD,EAA6E;AAE9E,YAAIyB,UAAU,GAAG,KAAKxG,KAAL,CAAWJ,KAAX,CAAiBqQ,mBAAlC;AACA,YAAIC,aAAa,GAAGT,MAAM,CAACC,IAAP,CAAY,KAAK/P,KAAL,CAAW2H,cAAvB,CAApB;AAEA4I,QAAAA,aAAa,CAACC,OAAd,CAAsBxR,QAAQ,IAAI;AAC9B,gBAAMuC,IAAI,GAAG,KAAKvB,KAAL,CAAW2H,cAAX,CAA0B3I,QAA1B,CAAb;AAEA,cAAIyR,YAAY,GAAG5J,UAAU,CAAC7H,QAAD,CAAV,CAAqB,gBAArB,CAAnB;AAA0D;;AAC1D,cAAIoG,SAAS,KAAK,wBAAlB,EAA4C;AACxCqL,YAAAA,YAAY,GAAG5J,UAAU,CAAC7H,QAAD,CAAV,CAAqB,mBAArB,CAAf;AAAyD;AAC5D;;AAED8Q,UAAAA,MAAM,CAACC,IAAP,CAAYxO,IAAZ,EAAkB2I,GAAlB,CAAsBpI,KAAK,IAAI;AAC3B,kBAAM4O,aAAa,GAAG,EAAtB;AACAnP,YAAAA,IAAI,CAACO,KAAD,CAAJ,CAAYoI,GAAZ,CAAgByG,UAAU,IACtBD,aAAa,CAAC1J,IAAd,CAAmB2J,UAAU,CAAC5P,KAA9B,CADJ;AAGA,kBAAMsF,KAAK,GAAGoK,YAAY,CAAChB,SAAb,CAAuBnI,IAAI,IAAIA,IAAI,CAACxF,KAAL,KAAeA,KAA9C,CAAd;;AACA,gBAAIuE,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdoK,cAAAA,YAAY,CAACzJ,IAAb,CAAkB;AAAE,yBAASlF,KAAX;AAAkB,kCAAkB4O;AAApC,eAAlB;AACH,aAFD,MAGK;AACDD,cAAAA,YAAY,CAACpK,KAAD,CAAZ,GAAsB;AAAE,yBAASvE,KAAX;AAAkB,kCAAkB4O;AAApC,eAAtB;AACH,aAX0B,CAY3B;;AACH,WAbD;AAeH,SAvBD;AAwBAjQ,QAAAA,SAAS,GAAG;AACR2G,UAAAA,qBAAqB,EAAE;AACnBC,YAAAA,0BAA0B,EAAE,KAAKhH,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DyD,0BADnE;AAEnBgJ,YAAAA,WAAW,EAAExJ;AAFM,WADf;AAKRnG,UAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU;AALnB,SAAZ;AAQAyE,QAAAA,SAAS,GAAG,WAAZ;AACH,OAtCI,MAuCA,IAAIA,SAAS,KAAK,iBAAlB,EAAqC;AACtC,YAAIyB,UAAU,GAAG,KAAKxG,KAAL,CAAWJ,KAAX,CAAiB4G,UAAlC,CADsC,CAEtC;;AACA,cAAMN,QAAQ,GAAG,EAAjB;AACA,cAAMqK,iBAAiB,GAAG,EAA1B;AACA,aAAKvQ,KAAL,CAAWJ,KAAX,CAAiBsG,QAAjB,CAA0B2D,GAA1B,CAA8BwF,CAAC,IAAI;AAC/B,cAAII,MAAM,CAACC,IAAP,CAAYL,CAAZ,EAAezI,MAAf,KAA0B,CAA9B,EAAiC;AAC7BV,YAAAA,QAAQ,CAACS,IAAT,CAAc0I,CAAd;AACH;AACJ,SAJD;;AAKA,YAAI,KAAKrP,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAArE,EAA8E;AAC1E0F,UAAAA,UAAU,CAAC,yBAAD,CAAV,GAAwCN,QAAxC;AACH,SAFD,MAEO;AACHM,UAAAA,UAAU,CAAC,yBAAD,CAAV,GAAwCN,QAAxC;AACAM,UAAAA,UAAU,CAAC7H,QAAQ,CAACqP,kBAAV,CAAV,CAAwC,yBAAxC,IAAqE9H,QAArE;AACA,eAAKlG,KAAL,CAAWJ,KAAX,CAAiB6G,iBAAjB,CAAmCoD,GAAnC,CAAuCwF,CAAC,IAAI;AACxC,gBAAII,MAAM,CAACC,IAAP,CAAYL,CAAZ,EAAezI,MAAf,KAA0B,CAA9B,EAAiC;AAC7B2J,cAAAA,iBAAiB,CAAC5J,IAAlB,CAAuB0I,CAAvB;AACH;AACJ,WAJD;AAKA7I,UAAAA,UAAU,CAAC,4BAAD,CAAV,GAA2C+J,iBAA3C;AACA/J,UAAAA,UAAU,CAAC7H,QAAQ,CAACqP,kBAAV,CAAV,CAAwC,4BAAxC,IAAwEuC,iBAAxE;AACH;;AAGDnQ,QAAAA,SAAS,GAAG;AACR2G,UAAAA,qBAAqB,EAAE;AACnBC,YAAAA,0BAA0B,EAAE,KAAKhH,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DyD,0BADnE;AAEnBgJ,YAAAA,WAAW,EAAExJ;AAFM,WADf;AAKRnG,UAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU;AALnB,SAAZ;AAQAyE,QAAAA,SAAS,GAAG,WAAZ;AACH,OAlCI,MAmCA,IAAIA,SAAS,KAAK,gBAAlB,EAAoC;AACrC;AAEA3E,QAAAA,SAAS,GAAG;AACR;AACA4G,UAAAA,0BAA0B,EAAE,KAAKhH,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DyD,0BAF9E;AAGRwJ,UAAAA,SAAS,EAAE,KAAKxQ,KAAL,CAAWJ,KAAX,CAAiB6Q,SAHpB;AAIR;AACA;AACA;AAEA;AACApQ,UAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU;AATnB,SAAZ,CAHqC,CAerC;AACH,OAhBI,MAiBA;AACD;AACA,YAAI;AAAEoD,UAAAA,QAAF;AAAYC,UAAAA,eAAZ;AAA6BC,UAAAA,eAA7B;AAA8CC,UAAAA;AAA9C,YAAqE,KAAK7D,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GACrE,KAAKkD,eAAL,CAAqB,KAAKrE,KAAL,CAAW2H,cAAX,CAA0BoJ,qBAA1B,CAAgDzJ,IAAhD,CAAqDvD,QAA1E,CADqE,GAEnE,EAFN;AAIA,YAAI+M,SAAS,GAAG,EAAhB;AAEA,YAAIE,UAAU,GAAG,EAAjB;;AACA,YAAI,KAAK3Q,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAArE,EAA8E;AAC1E6P,UAAAA,UAAU,GAAG,KAAK9E,WAAL,CAAiB,KAAKlM,KAAL,CAAW2H,cAAX,CAA0BoJ,qBAA1B,CAAgDzJ,IAAhD,CAAqDvD,QAAtE,CAAb,CAD0E,CAE1E;;AAEA+M,UAAAA,SAAS,GAAG;AACR,4BAAgB;AACZG,cAAAA,mBAAmB,EAAED,UAAU,CAAC,qBAAD,CADnB;AAEZE,cAAAA,kBAAkB,EAAEF,UAAU,CAAC,mBAAD,CAFlB;AAGZG,cAAAA,kBAAkB,EAAEH,UAAU,CAAC,+BAAD;AAHlB;AADR,WAAZ;;AAQA,cAAIjF,aAAJ,EAAmB;AACf+E,YAAAA,SAAS,GAAG,EACR,GAAGA,SADK;AAERM,cAAAA,kBAAkB,EAAE;AAChBH,gBAAAA,mBAAmB,EAAED,UAAU,CAAC,wBAAD,CADf;AAEhBE,gBAAAA,kBAAkB,EAAEF,UAAU,CAAC,sBAAD,CAFd;AAGhBG,gBAAAA,kBAAkB,EAAEH,UAAU,CAAC,kCAAD;AAHd;AAFZ,aAAZ;AAQA,mBAAOA,UAAU,CAAC,wBAAD,CAAjB;AACA,mBAAOA,UAAU,CAAC,sBAAD,CAAjB;AACA,mBAAOA,UAAU,CAAC,kCAAD,CAAjB;AACH;;AACD,iBAAOA,UAAU,CAAC,qBAAD,CAAjB;AACA,iBAAOA,UAAU,CAAC,mBAAD,CAAjB;AACA,iBAAOA,UAAU,CAAC,+BAAD,CAAjB;AACH,SA5BD,MA6BK;AACD;AACAF,UAAAA,SAAS,GAAG;AACR,6BAAiB;AACbG,cAAAA,mBAAmB,EAAElN,QAAQ,CAAC,qBAAD,CADhB;AAEbmN,cAAAA,kBAAkB,EAAEnN,QAAQ,CAAC,mBAAD,CAFf;AAGboN,cAAAA,kBAAkB,EAAEpN,QAAQ,CAAC,+BAAD;AAHf;AADT,WAAZ;AAOH;;AAEDtD,QAAAA,SAAS,GAAG;AACR,sBAAY,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBU,QADrB;AAER,0BAAgB,KAAKN,KAAL,CAAWJ,KAAX,CAAiBqE,YAFzB;AAGR,mCAAyB,KAAKtE,KAAL,CAAW2H,cAAX,CAA0BoJ,qBAA1B,CAAgDhQ,KAHjE;AAIR,6BAAmB,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAJvD;AAKR,0BAAgB,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2E,CAAC,CAA5E,GAAgF,KAAKd,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmC,gBAA5B,GAA+C,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmC,gBAA5B,CAA6CpC,KAA5F,GAAoG,CAAC,CAL7L;AAMR,6BAAmB,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2E,CAAC,CAA5E,GAAgF,KAAKd,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,GAAkD,KAAK/C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,CAAgDrC,KAAlG,GAA0G,CAAC,CANtM;AAOR,6BAAmB,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2E,CAAC,CAA5E,GAAgF,KAAKd,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,GAAkD,KAAK/C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,CAAgDtB,KAAlG,GAA0G,EAPrM;AAQR,uBAAa,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsC,aAA5B,GAA4C,KAAKjD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsC,aAA5B,CAA0CvC,KAAtF,GAA8F,CAAC,CARpG;AASR,oCAA0B,KAAKf,KAAL,CAAW2H,cAAX,CAA0B4F,sBAA1B,GAAmD,KAAKvN,KAAL,CAAW2H,cAAX,CAA0B4F,sBAA1B,CAAiDxM,KAApG,GAA4G,CAAC,CAT/H;AAUR,yBAAe,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2E4C,QAA3E,GACTiN,UAXE;AAYRH,UAAAA,SAAS,EAAEC,SAZH;AAaR/E,UAAAA,aAAa,EAAE,KAAK1L,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,GAAkD,KAAK/C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,CAAgDkE,IAAhD,CAAqDE,cAAvG,GAAwH;AAb/H,SAAZ;AAgBA/G,QAAAA,SAAS,CAAC,uBAAD,CAAT,GAAqC;AAAE,uBAAa,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0B0Q;AAAzC,SAArC;;AACA,YAAI,KAAKhR,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsC,aAA5B,IAA6C,KAAKjD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsC,aAA5B,CAA0CvC,KAA1C,KAAoD,CAAC,CAAtG,EAAyG;AACrG,cAAIuQ,WAAW,GAAG;AAAEC,YAAAA,YAAY,EAAE;AAAhB,WAAlB;AACA,cAAIC,YAAY,GAAG;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAAnB;AAEA,eAAKpR,KAAL,CAAWJ,KAAX,CAAiByR,YAAjB,CAA8BxH,GAA9B,CAAkCyH,IAAI,IAAI;AACtCL,YAAAA,WAAW,CAAC,cAAD,CAAX,CAA4BK,IAAI,CAAC5Q,KAAjC,IAA0C,KAAKf,KAAL,CAAW2H,cAAX,CAA0BiK,SAApE;AACAJ,YAAAA,YAAY,CAAC,WAAD,CAAZ,CAA0BG,IAAI,CAAC5Q,KAA/B,IAAwC,KAAKf,KAAL,CAAW2H,cAAX,CAA0BiK,SAAlE;AACH,WAHD;AAKA,cAAIC,WAAW,GAAG;AAAEN,YAAAA,YAAY,EAAE;AAAhB,WAAlB;AAEA,cAAIO,WAAW,GAAG,CAAlB;AACA,cAAIC,kBAAkB,GAAG,EAAzB;;AAEA,cAAI,KAAK/R,KAAL,CAAW2H,cAAX,CAA0B,YAA1B,EAAwC5G,KAAxC,KAAkD7B,iBAAiB,CAACyJ,GAAxE,EAA6E;AACzEoJ,YAAAA,kBAAkB,GAAG,KAAK/R,KAAL,CAAW2H,cAAX,CAA0B,aAA1B,CAArB;AACA,iBAAKtH,KAAL,CAAWJ,KAAX,CAAiByR,YAAjB,CAA8BxH,GAA9B,CAAkCyH,IAAI,IAAI;AACtCE,cAAAA,WAAW,CAAC,cAAD,CAAX,CAA4BF,IAAI,CAAC5Q,KAAjC,IAA0C,KAAKf,KAAL,CAAW2H,cAAX,CAA0B,aAA1B,CAA1C;AACH,aAFD;AAGH,WALD,MAMK;AACDmK,YAAAA,WAAW,GAAG,KAAK9R,KAAL,CAAW2H,cAAX,CAA0B,aAA1B,EAAyC5G,KAAvD;AACH;;AACDN,UAAAA,SAAS,GAAG,EACR,GAAGA,SADK;AAERmR,YAAAA,SAAS,EAAE,KAAK5R,KAAL,CAAW2H,cAAX,CAA0BiK,SAF7B;AAGRI,YAAAA,gBAAgB,EAAE,KAAKhS,KAAL,CAAW2H,cAAX,CAA0BoJ,qBAA1B,CAAgDjP,KAH1D;AAIRgQ,YAAAA,WAJQ;AAKRC,YAAAA,kBALQ;AAMRF,YAAAA,WANQ;AAORP,YAAAA,WAPQ;AAQRE,YAAAA,YARQ;AASR7M,YAAAA,eAAe,EAAET,kBATT;AAURF,YAAAA,eAVQ;AAWRC,YAAAA;AAXQ,WAAZ;AAaH,SApCD,MAoCO;AACHxD,UAAAA,SAAS,GAAG,EACR,GAAGA,SADK;AAERmR,YAAAA,SAAS,EAAE,KAAKvR,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsC,aAA5B,IAA6C,KAAKjD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsC,aAA5B,CAA0CxB,KAF1F;AAGRkQ,YAAAA,gBAAgB,EAAE,KAAKhS,KAAL,CAAW2H,cAAX,CAA0BoJ,qBAA1B,CAAgDjP,KAH1D;AAIRmQ,YAAAA,mBAAmB,EAAE,KAAKjS,KAAL,CAAW2H,cAAX,CAA0B4F,sBAA1B,IAAoD,KAAKvN,KAAL,CAAW2H,cAAX,CAA0B4F,sBAA1B,CAAiDzL,KAJlH;AAKR6C,YAAAA,eAAe,EAAET,kBALT;AAMRF,YAAAA,eANQ;AAORC,YAAAA;AAPQ,WAAZ;AAUH,SAjHA,CAkHD;AACA;AACA;;AACH,OAnOgC,CAoOjC;;;AACA,UAAIW,SAAS,GAAGC,SAAhB;AACA,YAAM3D,UAAU,GAAG;AACfgE,QAAAA,QAAQ,EAAE,uBADK;AAEfC,QAAAA,SAAS,EAAE,uBAFI;AAGf1E,QAAAA,SAAS,EAAEA,SAHI;AAIf2E,QAAAA,SAJe;AAKfC,QAAAA,QALe;AAKL+K,QAAAA,OALK;AAKIxL,QAAAA,SALJ;AAKe7B,QAAAA,SAAS,EAAE,KAAKA,SAL/B;AAK0CwD,QAAAA,QAAQ,EAAE,EALpD;AAKwDE,QAAAA,aAAa,EAAE,EALvE;AAK2EM,QAAAA,sBAAsB,EAAE,EALnG;AAKuGD,QAAAA,iBAAiB,EAAE;AAL1H,OAAnB;;AAOA,UAAI1B,SAAS,KAAK,gBAAlB,EAAoC;AAChClE,QAAAA,UAAU,CAAC,WAAD,CAAV,GAA0B,cAA1B;AACAA,QAAAA,UAAU,CAAC,WAAD,CAAV,GAA0B,WAA1B,CAFgC,CAGhC;AACH;;AACD,YAAMF,UAAU,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAApC;;AACA,UACI1C,SAAS,CAAC,KAAK+B,KAAL,CAAWJ,KAAX,CAAiBsF,qBAAlB,EAAyC,KAAKlF,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0B0C,SAAnE,EAA8E,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBqE,YAA/F,CADb,EAC2H;AACvH,cAAMjD,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE1C,cADK;AAEf2C,UAAAA,IAAI,EAAE;AACFiE,YAAAA,SAAS,EAAE,IADT;AACeC,YAAAA,UAAU,EAAE;AAAEvE,cAAAA,UAAF;AAAcF,cAAAA;AAAd,aAD3B;AACuDqE,YAAAA,QADvD;AACiEkB,YAAAA,QAAQ,EAAE,EAD3E;AAC+EE,YAAAA,aAAa,EAAE,EAD9F;AACkGM,YAAAA,sBAAsB,EAAE,EAD1H;AAC8HD,YAAAA,iBAAiB,EAAE;AADjJ;AAFS,SAAnB;AAMA,aAAKzG,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH,OATD,MAUK;AACD,aAAKhB,KAAL,CAAWjD,UAAX,CAAsB8D,UAAtB,EAAkCF,UAAlC,EAA8C,WAA9C;AACH;AACJ,KAt6EkB;;AAAA,SAk7EnBkR,WAl7EmB,GAk7EJC,QAAD,IAAc;AACxB,YAAMhL,UAAU,GAAGgL,QAAQ,CAAChL,UAA5B;AACA,YAAM9F,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE1C,cADK;AAEf2C,QAAAA,IAAI,EAAE;AAAE4F,UAAAA;AAAF;AAFS,OAAnB;AAIA,WAAK9G,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH,KAz7EkB;;AAQf,SAAKrB,KAAL,GAAa;AACToS,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,yBAAyB,EAAE,EAFlB;AAGTC,MAAAA,YAAY,EAAE,EAHL;AAITC,MAAAA,KAAK,EAAE,EAJE;AAKT;AACAnN,MAAAA,SAAS,EAAE,EANF;AAQT+B,MAAAA,UAAU,EAAEtC,SARH;AAST2N,MAAAA,UAAU,EAAE,IATH;AAUT5O,MAAAA,6BAA6B,EAAEiB,SAVtB;AAYTU,MAAAA,qBAAqB,EAAE,EAZd;AAaThB,MAAAA,UAAU,EAAE,IAAIkO,GAAJ,EAbH;AAcTC,MAAAA,aAAa,EAAE,IAdN;AAeTC,MAAAA,aAAa,EAAE,EAfN;AAgBTvR,MAAAA,eAAe,EAAE,CAAC;AAAEU,QAAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAT;AAAiE/E,QAAAA,KAAK,EAAE,CAAxE;AAA2EuG,QAAAA,IAAI,EAAE;AAAEsL,UAAAA,eAAe,EAAE,CAAnB;AAAsBC,UAAAA,WAAW,EAAE,KAAKxS,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B;AAAnC;AAAjF,OAAD,EACjB;AAAEhE,QAAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAT;AAAsE/E,QAAAA,KAAK,EAAE,CAA7E;AAAgFuG,QAAAA,IAAI,EAAE;AAAEsL,UAAAA,eAAe,EAAE,CAAnB;AAAsBC,UAAAA,WAAW,EAAE,KAAKxS,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B;AAAnC;AAAtF,OADiB,CAhBR;AAkBTnE,MAAAA,aAAa,EAAE;AAAEZ,QAAAA,KAAK,EAAE,CAAC,CAAV;AAAae,QAAAA,KAAK,EAAE;AAApB,OAlBN;AAmBTgR,MAAAA,eAAe,EAAE,CAAC;AAAEhR,QAAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAT;AAAiE/E,QAAAA,KAAK,EAAE;AAAxE,OAAD,EACjB;AAAEe,QAAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAT;AAAsE/E,QAAAA,KAAK,EAAE;AAA7E,OADiB;AAnBR,KAAb;AAuBA,SAAKgC,SAAL,GAAiB3G,KAAK,CAAC2W,SAAN,EAAjB;AACA,SAAK/M,cAAL,GAAsB,IAAIvG,cAAJ,EAAtB;AACA,SAAKuT,eAAL,GAAuB,CAAC,kBAAD,EAAqB,YAArB,EAAmC,qBAAnC,CAAvB;AAEA,SAAKC,8BAAL,GAAsC,CAAC,4BAAD,EAA+B,iBAA/B,EAAkD,WAAlD,EAClC,cADkC,EAClB,iBADkB,EACC,mBADD,EACsB,uBADtB,EAC+C,oBAD/C,EACqE,YADrE,CAAtC,CAnCe,CAoC0G;AAC5H;;AAE8B,SAAxBC,wBAAwB,CAAC7S,KAAD,EAAQL,KAAR,EAAe;AAE1C,QAAIK,KAAK,CAACJ,KAAN,CAAYqS,YAAZ,KAA6B,EAA7B,IAAmCjS,KAAK,CAACJ,KAAN,CAAYqS,YAAZ,KAA6BtS,KAAK,CAACsS,YAA1E,EAAwF;AACpFpV,MAAAA,KAAK,CAACyI,IAAN,CAAWtF,KAAK,CAACJ,KAAN,CAAYqS,YAAvB;AACAjS,MAAAA,KAAK,CAACJ,KAAN,CAAYqS,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAIjS,KAAK,CAACJ,KAAN,CAAYsS,KAAZ,KAAsBvS,KAAK,CAACuS,KAAhC,EAAuC;AACnCrV,MAAAA,KAAK,CAACqV,KAAN,CAAYlS,KAAK,CAACJ,KAAN,CAAYsS,KAAxB;AACAlS,MAAAA,KAAK,CAACJ,KAAN,CAAYsS,KAAZ,GAAoB,EAApB;AACH;;AACD,QAAIlS,KAAK,CAACJ,KAAN,CAAY0H,cAAZ,KAA+B9C,SAAnC,EAA8C;AAC1C,aAAO;AAAE8C,QAAAA,cAAc,EAAE;AAAlB,OAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAiGDwL,EAAAA,MAAM,GAAG;AAEL,UAAMC,MAAM,GAAG,KAAK/S,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,IACX,KAAKvD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DG,QAD9D,CAFK,CAKL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAMsP,KAAK,GAAG,KAAKrT,KAAL,CAAWuE,UAAX,CAAsBC,GAAtB,CAA0B,0BAA1B,KAAyD,KAAKxE,KAAL,CAAWuE,UAAX,CAAsBE,GAAtB,CAA0B,0BAA1B,EAAsDC,YAA7H;AACA,UAAM4O,QAAQ,GAAG,KAAKtT,KAAL,CAAWuE,UAAX,CAAsBC,GAAtB,CAA0B,6BAA1B,KAA4D,KAAKxE,KAAL,CAAWuE,UAAX,CAAsBE,GAAtB,CAA0B,6BAA1B,EAAyDC,YAAtI;AACA,UAAM6O,SAAS,GAAG,KAAKvT,KAAL,CAAWuE,UAAX,CAAsBC,GAAtB,CAA0B,8BAA1B,KAA6D,KAAKxE,KAAL,CAAWuE,UAAX,CAAsBE,GAAtB,CAA0B,8BAA1B,EAA0DC,YAAzI;AACA,UAAM8O,aAAa,GAAG,KAAKxT,KAAL,CAAWuE,UAAX,CAAsBC,GAAtB,CAA0B,8BAA1B,KAA6D,KAAKxE,KAAL,CAAWuE,UAAX,CAAsBE,GAAtB,CAA0B,8BAA1B,EAA0DC,YAA7I;AACA,UAAM+O,iBAAiB,GAAG,KAAKzT,KAAL,CAAWuE,UAAX,CAAsBC,GAAtB,CAA0B,+BAA1B,KAA8D,KAAKxE,KAAL,CAAWuE,UAAX,CAAsBE,GAAtB,CAA0B,+BAA1B,EAA2DC,YAAnJ;AACA,UAAMgP,gBAAgB,GAAG,KAAK1T,KAAL,CAAWuE,UAAX,CAAsBC,GAAtB,CAA0B,iCAA1B,KAAgE,KAAKxE,KAAL,CAAWuE,UAAX,CAAsBE,GAAtB,CAA0B,iCAA1B,EAA6DC,YAAtJ;AACA,UAAMiP,oBAAoB,GAAG,KAAK3T,KAAL,CAAWuE,UAAX,CAAsBC,GAAtB,CAA0B,kCAA1B,KAAiE,KAAKxE,KAAL,CAAWuE,UAAX,CAAsBE,GAAtB,CAA0B,kCAA1B,EAA8DC,YAA5J;AACA,UAAMkP,wBAAwB,GAAG,KAAK5T,KAAL,CAAWuE,UAAX,CAAsBC,GAAtB,CAA0B,kCAA1B,KAAiE,KAAKxE,KAAL,CAAWuE,UAAX,CAAsBE,GAAtB,CAA0B,kCAA1B,EAA8DC,YAAhK,CArBK,CAsBL;;AAGA,UAAMmP,UAAU,GAAG,EAAnB;;AACA,QAAI,KAAK7T,KAAL,CAAWuF,qBAAX,CAAiCoK,OAAjC,CAAyC6D,aAAzC,MAA4D,CAAC,CAAjE,EAAoE;AAChEK,MAAAA,UAAU,CAAC7M,IAAX,CAAgB;AAAE,kBAAU7H,qBAAqB,CAACgD,mBAAlC;AAAuD,iBAAS,KAAK9B,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAhE;AAAqI,qBAAa0N;AAAlJ,OAAhB;AACH;;AACD,QAAI,KAAKnT,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,IAA+C,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAhH,IACA,KAAKnB,KAAL,CAAWuF,qBAAX,CAAiCoK,OAAjC,CAAyC8D,iBAAzC,MAAgE,CAAC,CADrE,EACwE;AACpEI,MAAAA,UAAU,CAAC7M,IAAX,CAAgB;AAAE,kBAAU7H,qBAAqB,CAACmD,gBAAlC;AAAoD,iBAAS,KAAKjC,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAA7D;AAA+H,qBAAa2N;AAA5I,OAAhB;;AAEA,UAAI,KAAKpT,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,IAAmD,KAAK/C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,CAAgDkE,IAAhD,CAAqDE,cAArD,KAAwE,IAA/H,EAAqI;AACjI,YAAI,KAAKxH,KAAL,CAAWuF,qBAAX,CAAiCoK,OAAjC,CAAyC+D,gBAAzC,MAA+D,CAAC,CAApE,EAAuE;AACnEG,UAAAA,UAAU,CAAC7M,IAAX,CAAgB;AAAE,sBAAU7H,qBAAqB,CAACqD,sBAAlC;AAA0D,qBAAS,KAAKnC,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAA9B,CAAnE;AAAiJ,yBAAa4N;AAA9J,WAAhB;AACH;;AAED,YAAI,KAAK1T,KAAL,CAAWuF,qBAAX,CAAiCoK,OAAjC,CAAyCgE,oBAAzC,MAAmE,CAAC,CAAxE,EAA2E;AACvEE,UAAAA,UAAU,CAAC7M,IAAX,CAAgB;AAAE,sBAAU7H,qBAAqB,CAACsD,mBAAlC;AAAuD,qBAAS,KAAKpC,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAA9B,CAAhE;AAA2I,yBAAa6N;AAAxJ,WAAhB;AACH;AACJ;AACJ;;AACD,QAAI,KAAK3T,KAAL,CAAWuF,qBAAX,CAAiCoK,OAAjC,CAAyCiE,wBAAzC,MAAuE,CAAC,CAA5E,EAA+E;AAC3EC,MAAAA,UAAU,CAAC7M,IAAX,CAAgB;AAAE,kBAAU7H,qBAAqB,CAACuD,YAAlC;AAAgD,iBAAS,KAAKrC,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAzD;AAAwI,qBAAa8N;AAArJ,OAAhB;AACH;;AACD,QAAI,KAAK5T,KAAL,CAAWuF,qBAAX,CAAiCoK,OAAjC,CAAyCiE,wBAAzC,MAAuE,CAAC,CAA5E,EAA+E;AAAC;AAC5EC,MAAAA,UAAU,CAAC7M,IAAX,CAAgB;AAAE,kBAAU7H,qBAAqB,CAACyD,iBAAlC;AAAqD,iBAAS,KAAKvC,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAA9D;AAAiI,qBAAa8N;AAA9I,OAAhB;AACH;;AAGD,UAAME,WAAW,GAAG;AAChB/O,MAAAA,aAAa,EAAE,uBADC;AAEhBC,MAAAA,cAAc,EAAE,+BAFA;AAGhBC,MAAAA,eAAe,EAAE,4BAHD;AAIhB8O,MAAAA,QAAQ,EAAE,gDAJM;AAKhBC,MAAAA,gBAAgB,EAAE;AACdpS,QAAAA,YAAY,EAAE,KAAKvB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,GACV,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2EjC,iBAAiB,CAACgE,EAA7F,GAAkGpC,QAAQ,CAAC,KAAKT,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmC,gBAA5B,GAA+C,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmC,gBAA5B,CAA6CpC,KAA7C,IAAsD,CAAC,CAAtG,GAA0G,CAAC,CAA5G,CADhG,GACiN,CAAC,CAFlN;AAGdc,QAAAA,eAAe,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,GAA8C,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA5C,KAAsD9B,UAAU,CAACkC,OAAjE,GAA2EjC,iBAAiB,CAACgE,EAA7F,GAAkGpC,QAAQ,CAAC,KAAKT,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,GAAkD,KAAK/C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,CAAgDrC,KAAhD,IAAyD,CAAC,CAA5G,GAAgH,CAAC,CAAlH,CAAxJ,GAA+Q,CAAC,CAHnR;AAKdL,QAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU,QALb;AAMdE,QAAAA,eAAe,EAAE,KAAKR,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,iBAA5B,IAAiD,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,iBAA5B,EAA+CD,KAAhG,GAAwG,CAAC,CAN5G;AAOd;AACA;AACAsC,QAAAA,SAAS,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,eAA5B,IAA+C,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,eAA5B,EAA6CD,KAA5F,GAAoG,CAAC;AATlG,OALF;AAgBhBC,MAAAA,UAAU,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAhBb;AAiBhBgS,MAAAA,eAAe,EAAE,KAAKA;AAjBN,KAApB;AAoBA,SAAKiB,oBAAL,GAA4B,CACxB;AAAE,iBAAW,kBAAb;AAAiC,mBAAa,uBAA9C;AAAuE,eAAS,OAAhF;AAAyF,mBAAa,IAAtG;AAA4G,wBAAkB,YAA9H;AAA4I,qBAAe;AAA3J,KADwB,CAA5B;AAKA,UAAMC,eAAe,GAAG,EAAxB;AACA,SAAKD,oBAAL,CAA0BzD,OAA1B,CAAkClJ,IAAI,IAAIA,IAAI,CAACoE,SAAL,KAAmB,IAAnB,GACtCwI,eAAe,CAAClN,IAAhB,CAAqBM,IAArB,CADsC,GACT,EADjC,EA7EK,CAgFL;AACA;AACA;AAEA;;AAEA,QAAI6M,cAAc,GAAG,EAArB;AACA,SAAK9T,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,iBAA5B,KAAkD,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,iBAA5B,EAA+CD,KAA/C,KAAyD,CAA3G,GACIoT,cAAc,GAAG,CACb;AACI,eAAS,gBADb;AAEI,eAAS,KAAK9T,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,GAA8C,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4CnB,KAA1F,GAAkG;AAF/G,KADa,EAKb;AACA;AACA;AACA;AACA;AACA;AACI,eAAS,YADb;AAEI,eAAS,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsC,aAA5B,GAA4C,KAAKjD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsC,aAA5B,CAA0CxB,KAAtF,GAA8F;AAF3G,KAVa,CADrB,GAgBIqS,cAAc,GAAG,CACb;AACI,eAAS,gBADb;AAEI,eAAS,KAAK9T,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,GAA8C,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4CnB,KAA1F,GAAkG;AAF/G,KADa,EAIV;AACC,eAAS,aADV;AAEC,eAAS,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmC,gBAA5B,GAA+C,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmC,gBAA5B,CAA6CrB,KAA5F,GAAoG;AAF9G,KAJU,EAOV;AACC,eAAS,gBADV;AAEC,eAAS,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,GAAkD,KAAK/C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,CAAgDtB,KAAlG,GAA0G;AAFpH,KAPU,CAhBrB;AA6BA,UAAMsS,QAAQ,GAAG;AACbjN,MAAAA,UAAU,EAAE,KAAK9G,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADC;AAEbV,MAAAA,SAAS,EAAE,QAFE;AAGbzE,MAAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWJ,KAAX,CAAiBU,QAHd;AAIbsC,MAAAA,eAAe,EAAE,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,GAA8C,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiC,eAA5B,CAA4ClC,KAA1F,GAAkG,CAAC,CAJvG;AAKboC,MAAAA,gBAAgB,EAAE,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmC,gBAA5B,GAA+C,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmC,gBAA5B,CAA6CpC,KAA5F,GAAoG,CAAC,CAL1G;AAMbqC,MAAAA,mBAAmB,EAAE,KAAK/C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,GAAkD,KAAK/C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,CAAgDrC,KAAlG,GAA0G,CAAC,CANnH;AAObsB,MAAAA,SAAS,EAAEgR,KAPE;AAQbP,MAAAA,eAAe,EAAE,KAAK9S,KAAL,CAAW8S;AARf,KAAjB,CApHK,CA+HL;;AACA,wBACI,uDACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,4DAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEKqB,cAAc,CAAClN,MAAf,GAAwB,CAAxB,gBACG,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,mBAAD;AAAqB,MAAA,cAAc,EAAEkN,cAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADH,GAGc,EALnB,eAUI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AACI,MAAA,aAAa,EAAE,KAAK9T,KAAL,CAAWuF,IAAX,CAAgBC,aADnC;AAEI,MAAA,UAAU,EAAE,KAAKxF,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFhB;AAGI,MAAA,UAAU,EAAE,KAAKzF,KAAL,CAAWJ,KAAX,CAAiBe,UAHjC;AAII,MAAA,QAAQ,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBU,QAJ/B;AAKI,MAAA,UAAU,EAAE,KAAKN,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BqT,YAA5B,IAA4C,KAAKhU,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4Bd,qBALxF;AAMI,MAAA,eAAe,EAAGkH,qBAAD,IAA2B,KAAK/G,KAAL,CAAW9C,8BAAX,CAA0C6J,qBAA1C,EAAiE,KAAK/G,KAAL,CAAWJ,KAAX,CAAiBU,QAAlF,EAA4F,KAAKN,KAAL,CAAWJ,KAAX,CAAiBe,UAA7G,CANhD;AAOI,MAAA,cAAc,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAPhD;AAQI,MAAA,eAAe,EAAC,4BARpB;AASI,MAAA,SAAS,EAAC,kBATd;AAUI,MAAA,UAAU,EAAC,YAVf;AAWI,MAAA,WAAW,EAAC,qBAXhB;AAYI,MAAA,gBAAgB,EAAE,KAAKvD,KAAL,CAAWzC,gBAZjC;AAaI,MAAA,WAAW,EAAEkW,WAbjB;AAcI,MAAA,qBAAqB,EAAE,KAAK9T,KAAL,CAAWuF,qBAdtC;AAeI,MAAA,KAAK,EAAE8N,KAfX;AAgBI,MAAA,SAAS,EAAE,KAAKtQ,SAhBpB;AAiBI,MAAA,UAAU,EAAE,KAAKD,UAjBrB;AAkBI,MAAA,UAAU,EAAE,IAlBhB;AAmBI,MAAA,SAAS,EAAE,MAAM,KAAKzC,KAAL,CAAW1C,oCAAX,CAAgDyW,QAAhD,CAnBrB;AAoBI,MAAA,cAAc,EAAE,IApBpB;AAqBI,MAAA,UAAU,EAAE,KAAK/T,KAAL,CAAWJ,KAAX,CAAiBuD,UArBjC;AAsBI,MAAA,UAAU,EAAE,KAAKD,UAtBrB;AAuBI,MAAA,WAAW,EAAE,KAAKE,WAvBtB;AAwBI,MAAA,cAAc,EAAE,KAAKC,cAxBzB;AA0BI,MAAA,eAAe,EAAE,CACb;AACI,2CACI,oBAAC,cAAD;AACI,UAAA,aAAa,EAAE,KAAKrD,KAAL,CAAWuF,IAAX,CAAgBC,aADnC;AAEI,UAAA,gBAAgB,EAAE,KAAK7F,KAAL,CAAWsU,cAAX,IAA6B,EAFnD;AAGI,UAAA,sBAAsB,EAAE,KAAKtU,KAAL,CAAWuU,oBAAX,IAAmC,EAH/D;AAII,UAAA,yBAAyB,EAAE,KAAKvU,KAAL,CAAWwU,uBAAX,IAAsC,EAJrE;AAKI,UAAA,WAAW,EAAE,KAAKxU,KAAL,CAAWyU,SAAX,IAAwB,EALzC;AAMI,UAAA,iBAAiB,EAAE,KAAKpU,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,mBAA5B,KAAoD,EAN3E;AAOI,UAAA,iBAAiB,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,mBAA5B,KAAoD,EAP3E;AAQI,UAAA,cAAc,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,gBAA5B,KAAiD,EARrE;AASI,UAAA,WAAW,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BU,WAA5B,IAA2C,EAT5D;AAUI,UAAA,iBAAiB,EAAE,KAAKpB,iBAV5B;AAWI,UAAA,eAAe,EAAE,KAAKD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BI,eAA5B,IAA+C,EAXpE;AAYI,UAAA,iBAAiB,EAAE,KAAKf,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BQ,iBAA5B,IAAiD,EAZxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR,OADa,CA1BrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAmDI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC,oBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4Bd,qBAA5B,IAAqD,KAAKG,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4Bd,qBAA5B,CAAkD+G,MAAlD,GAA2D,CAAhH,IAAqH,KAAK5G,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAAjJ,gBACG,uDACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoC,KAAKvD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DoO,gBAA9F,CADJ,CADJ,eAII,oBAAC,IAAD,CAAM,QAAN;AAAe,MAAA,SAAS,EAAC,+BAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,SAAS,EAAC,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,+BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,GAAE,KAAK3R,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAAqD,MAAK,KAAKzF,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0D8Q,UAAW,EADvI,eAEI;AAAM,MAAA,SAAS,EAAG,oBAAmB,KAAKrU,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DC,kBAA1D,KAAiF3E,iBAAiB,CAACiH,KAAnG,GAA2G,mBAA3G,GAAiI,KAAK9F,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DC,kBAA1D,KAAiF3E,iBAAiB,CAACyV,QAAnG,GAA8G,iBAA9G,GAAkI,gBAAiB,yBAAzT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKtU,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DgR,mBAD/D,CAFJ,CADJ,CADJ,eAUI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,qDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,kCAApB;AACI,MAAA,MAAM,EAAE,KAAK5U,KAAL,CAAWuF,qBAAX,CAAiCoK,OAAjC,CAAyC4D,SAAzC,MAAwD,CAAC,CADrE;AAEI,kBAAU,KAAKlT,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFd,CAGI;AAHJ;AAII,MAAA,OAAO,EAAE,MAAM,KAAKnC,cAAL,EAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAMI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE9G,UAAvB;AAAmC,MAAA,KAAK,EAAE,KAAKwD,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ,eAqEI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,mCAApB;AACI,kBAAU,KAAKzF,KAAL,CAAWuF,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADd,CAEI;AAFJ;AAGI,MAAA,MAAM,EAAE,KAAK9F,KAAL,CAAWuF,qBAAX,CAAiCoK,OAAjC,CAAyC2D,QAAzC,MAAuD,CAAC,CAHpE,CAII;AAJJ;AAKI,MAAA,OAAO,EAAE,MAAM,KAAKvN,aAAL,EALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAMI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEnJ,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CArEJ,EA8EKiX,UAAU,CAAC5M,MAAX,GAAoB,CAApB,gBACG,oBAAC,aAAD;AACI,MAAA,GAAG,EAAE,IADT;AAEI,MAAA,IAAI,EAAE4M,UAFV;AAGI,MAAA,MAAM,EAAE,KAHZ;AAII,MAAA,QAAQ,EAAE,IAJd;AAKI,MAAA,UAAU,EAAC,0BALf;AAMI,MAAA,OAAO,EAAC,OANZ;AAOI,MAAA,IAAI,EAAE/W,mBAPV,CAQI;AARJ;AASI,MAAA,aAAa,EAAGiE,KAAD,IAAW,KAAKkB,YAAL,CAAkBlB,KAAlB,CAT9B;AAUI,MAAA,qBAAqB,EAAE,KAAKf,KAAL,CAAWuF,qBAVtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAcG,EA5FR,CADJ,CAVJ,CADJ,CAJJ,CADJ,eAqHI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKlF,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,IACG,KAAKvD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DP,SAA1D,GAAsE,CADzE,iBAEG,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,gBAArB;AAAsC,MAAA,OAAO,EAAC,aAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAkB,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DiR,WAA5E,CAFJ,CADJ,CADJ,eASI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,cAArB;AAAoC,MAAA,OAAO,EAAC,WAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKxU,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0DgO,SAD/D,CAFJ,CATJ,CAHR,eAoBI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAa,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,cAArB;AAAoC,MAAA,OAAO,EAAC,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb,CADJ,eAEI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQwB,MAAM,GACFA,MAAM,CAAClJ,GAAP,CAAY5C,IAAD,iBACP,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,IAAI,CAAC8C,QAAL,CAAcnD,MAAd,GAAuB,CAAvB,GACGK,IAAI,CAAC8C,QAAL,CAAcF,GAAd,CAAmBG,MAAD,iBACd,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,KAAK/C,IAAI,CAAC8C,QAAL,CAAcnD,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQoD,MAAM,CAACD,QAAP,CAAgBF,GAAhB,CAAqBI,SAAD,IAAe;AAC/B,aACIA,SAAS,CAACC,cAAV,CAAyB,UAAzB,iBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKD,SAAS,CAACF,QAAV,CAAmBF,GAAnB,CAAuB4K,YAAY,IAChCA,YAAY,CAAC3J,SAAb,KAA2B,sBAA3B,IAAqD2J,YAAY,CAAC3J,SAAb,KAA2B,qBAAhF,iBACA,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,KAAK2J,YAAY,CAAC7N,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAY6N,YAAY,CAAChT,KAAzB,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAe,GAAf,CAFJ,CADJ,CAFH,CADL,CADJ,GAcIwI,SAAS,CAACa,SAAV,KAAwB,sBAAxB,IAAkDb,SAAS,CAACa,SAAV,KAAwB,qBAA1E,iBACA,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAYb,SAAS,CAACxI,KAAtB,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAgB,GAAhB,CAFJ,CAhBR;AAqBH,KAtBD,CAFR,CADJ,CADH,GA+BK,EAhCV,CADJ,CADE,GAsCF,EAxCZ,CAFJ,CApBJ,CArHJ,CADH,GA2LK,EA5LV,CADJ,CADJ,CAnDJ,CAVJ,CADJ,EAqQK,KAAKzB,KAAL,CAAWJ,KAAX,CAAiByF,SAAjB,iBACG,oBAAC,aAAD;AACI,MAAA,IAAI,EAAE,KAAKrF,KAAL,CAAWJ,KAAX,CAAiByF,SAD3B,CAEI;AACA;AACA;AAJJ;AAKI,MAAA,IAAI,EAAE,KAAKrF,KAAL,CAAWJ,KAAX,CAAiBkH,UAAjB,KAAgC,yBAAhC,GAA4D,IAA5D,GAAmE,IAL7E;AAMI,MAAA,UAAU,EAAE,KAAKY,UANrB;AAOI,MAAA,SAAS,EAAE,KAAK1H,KAAL,CAAWJ,KAAX,CAAiBmF,SAPhC;AAQI,MAAA,UAAU,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBiB,UARjC;AASI,MAAA,UAAU,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBkH,UATjC;AAUI,MAAA,WAAW,EAAE,KAAKgJ,WAVtB;AAWI,MAAA,KAAK,EAAE,KAAK9P,KAAL,CAAWJ,KAAX,CAAiBuF,SAX5B;AAYI,MAAA,aAAa,EAAE,KAAKiC,aAZxB;AAaI,MAAA,YAAY,EAAE,KAAKpH,KAAL,CAAWJ,KAAX,CAAiBqS,YAbnC;AAcI,MAAA,WAAW,EAAE,KAAKjS,KAAL,CAAW/C,WAd5B;AAeI,MAAA,cAAc,EAAE,KAAK0C,KAAL,CAAW2H,cAAX,IAA6B,EAfjD;AAiBI,MAAA,eAAe,EAAG,KAAKtH,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjB,KAA+B,WAA/B,IACX,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjB,KAA+B,oBADpB,IAEX,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjB,KAA+B,eAFpB,IAGX,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjB,KAA+B,wBAHpB,IAIX,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjB,KAA+B,iBAJpB,IAKX,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjB,KAA+B,gBALrB,GAKyC,EALzC,GAK8C8O,eAtBnE;AAwBI,MAAA,YAAY,EAAE,KAAK7T,KAAL,CAAWJ,KAAX,CAAiBuF,SAAjB,gBACV,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE,KAAKnF,KAAL,CAAWJ,KAAX,CAAiBmF,SAAnC;AACI,QAAA,aAAa,EAAE,KAAK/E,KAAL,CAAWuF,IAAX,CAAgBC,aADnC;AAEI,QAAA,eAAe,EAAE,KAAKyC,eAF1B;AAGI,QAAA,UAAU,EAAE,KAAKjI,KAAL,CAAWJ,KAAX,CAAiBiB,UAHjC;AAII,QAAA,cAAc,EAAE,KAAKlB,KAAL,CAAW2H,cAAX,IAA6B,EAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,GAOR,KAAKtH,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjB,KAA+B,WAA/B,IAA8C,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjB,KAA+B,oBAA7E,gBACE,oBAAC,qBAAD;AACI,QAAA,SAAS,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBmF,SADhC;AAEI,QAAA,UAAU,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiB4G,UAAjB,IAA+B,EAF/C;AAGI,QAAA,UAAU,EAAE,KAAKxG,KAAL,CAAWJ,KAAX,CAAiBiB,UAHjC;AAII,QAAA,UAAU,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0D/C,eAA1D,KAA8E5B,UAAU,CAACkC,OAAzF,GACR,KAAKd,KAAL,CAAWJ,KAAX,CAAiBkP,UAAjB,IAA+B,EADvB,GAER,KAAK9O,KAAL,CAAWJ,KAAX,CAAiBkP,UAAjB,IAA+B,EANvC;AAOI,QAAA,cAAc,EAAE,KAAKJ,cAPzB;AAQI,QAAA,yBAAyB,EAAE,KAAK1O,KAAL,CAAWJ,KAAX,CAAiB8U,yBARhD;AASI,QAAA,kBAAkB,EAAE,KAAK1U,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0D/C,eATlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,GAYK,KAAKR,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjB,KAA+B,eAA/B,IACI,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjB,KAA+B,wBADpC,gBAEE,oBAAC,mBAAD;AACI,QAAA,SAAS,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBmF,SADhC;AAEI,QAAA,UAAU,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBqQ,mBAAjB,IAAwC,EAFxD;AAGI,QAAA,UAAU,EAAE,KAAKjQ,KAAL,CAAWJ,KAAX,CAAiBiB,UAHjC;AAII,QAAA,UAAU,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0D/C,eAA1D,KAA8E5B,UAAU,CAACkC,OAAzF,GACR,KAAKd,KAAL,CAAWJ,KAAX,CAAiB+U,mBAAjB,IAAwC,EADhC,GAER,KAAK3U,KAAL,CAAWJ,KAAX,CAAiB+U,mBAAjB,IAAwC,EANhD;AAOI,QAAA,cAAc,EAAE,KAAKhV,KAAL,CAAW2H,cAAX,IAA6B,EAPjD,CAQI;AARJ;AASI,QAAA,aAAa,EAAE,KAAKU,sBATxB,CAUI;AAVJ;AAWI,QAAA,kBAAkB,EAAE,KAAKhI,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0D/C,eAXlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,GAeK,KAAKR,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjB,KAA+B,gBAAhC,gBACE,oBAAC,oBAAD;AACI,QAAA,SAAS,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBmF,SADhC;AAEI,QAAA,aAAa,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,GACX,KAAK/C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,CAAgDkE,IAAhD,CAAqDE,cAD1C,GAC2D,KAH9E;AAII,QAAA,UAAU,EAAE,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBmP,oBAAjB,IAAyC,EAJzD;AAKI,QAAA,UAAU,EAAE,KAAK/O,KAAL,CAAWJ,KAAX,CAAiBgV,UAAjB,IAA+B,EAL/C;AAMI,QAAA,SAAS,EAAE,KAAK5U,KAAL,CAAWJ,KAAX,CAAiB6Q,SAAjB,IAA8B,EAN7C;AAOI,QAAA,UAAU,EAAE,KAAKzQ,KAAL,CAAWJ,KAAX,CAAiBiB,UAPjC;AAQI,QAAA,UAAU,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0D/C,eAA1D,KAA8E5B,UAAU,CAACkC,OAAzF,GACR,KAAKd,KAAL,CAAWJ,KAAX,CAAiBoP,oBAAjB,IAAyC,EADjC,GAER,KAAKhP,KAAL,CAAWJ,KAAX,CAAiBoP,oBAAjB,IAAyC,EAVjD;AAWI,QAAA,cAAc,EAAE,KAAKrP,KAAL,CAAW2H,cAAX,IAA6B,EAXjD;AAYI,QAAA,cAAc,EAAE,KAAKoH,cAZzB;AAaI,QAAA,kBAAkB,EAAE,KAAK1O,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0D/C,eAblF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,GAgBI,KAAKR,KAAL,CAAWJ,KAAX,CAAiBmF,SAAjB,KAA+B,iBAA/B,gBACE,oBAAC,qBAAD;AACI,QAAA,UAAU,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiB4G,UAAjB,IAA+B,EAD/C;AAEI,QAAA,UAAU,EAAE,KAAKxG,KAAL,CAAWJ,KAAX,CAAiBiB,UAFjC,CAGI;AACA;AACA;AALJ;AAMI,QAAA,QAAQ,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBsG,QAAjB,IAA6B,EAN3C;AAOI,QAAA,aAAa,EAAE,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBwG,aAAjB,IAAkC,EAPrD;AAQI,QAAA,iBAAiB,EAAE,KAAKpG,KAAL,CAAWJ,KAAX,CAAiB6G,iBAAjB,IAAsC,EAR7D;AASI,QAAA,sBAAsB,EAAE,KAAKzG,KAAL,CAAWJ,KAAX,CAAiB8G,sBAAjB,IAA2C,EATvE;AAUI,QAAA,eAAe,EAAE,KAAK8B,wBAV1B;AAWI,QAAA,mBAAmB,EAAE,KAAKjC,mBAX9B;AAYI,QAAA,uBAAuB,EAAE,KAAKR,uBAZlC;AAaI,QAAA,iBAAiB,EAAE,KAAK/F,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0BuU,iBAbjD;AAcI,QAAA,yBAAyB,EAAE,KAAK7U,KAAL,CAAWJ,KAAX,CAAiB8U,yBAdhD;AAeI,QAAA,oBAAoB,EAAE,KAAK1U,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,CAA0D/C,eAfpF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,GAmBE,KAAKb,KAAL,CAAWmV,WAAX,gBACI,oBAAC,UAAD;AACI,QAAA,mBAAmB,EAAE,KAAKnV,KAAL,CAAW2H,cADpC;AAEI,QAAA,eAAe,EAAE,KAAKW,eAF1B;AAGI,QAAA,SAAS,EAAE,KAAKjI,KAAL,CAAWJ,KAAX,CAAiByR,YAAjB,IAAiC,EAHhD;AAII,QAAA,SAAS,EAAC,aAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,gBAOM,oBAAC,wBAAD;AACE,QAAA,cAAc,EAAE,KAAK1R,KAAL,CAAW2H,cAAX,IAA6B,EAD/C;AAEE,QAAA,eAAe,EAAE,KAAKW,eAFxB;AAGE,QAAA,aAAa,EAAE,KAAKL,aAHtB;AAIE,QAAA,gBAAgB,EAAE,KAAKiB,gBAJzB;AAKE,QAAA,aAAa,EAAE,KAAK7I,KAAL,CAAWuF,IAAX,CAAgBC,aALjC;AAME,QAAA,yBAAyB,EAAE,KAAKxF,KAAL,CAAWJ,KAAX,CAAiBmV,yBAN9C;AAOE,QAAA,qBAAqB,EAAE,KAAK/U,KAAL,CAAWJ,KAAX,CAAiBoV,qBAP1C;AAQE,QAAA,6BAA6B,EAAE,KAAKhV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B4C,6BAA5B,IAA6D,EAR9F;AASE,QAAA,SAAS,EAAE,KAAKvD,KAAL,CAAWJ,KAAX,CAAiBmF,SAT9B;AAUE,QAAA,UAAU,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBuS,UAV/B;AAWE,QAAA,UAAU,EAAE,KAAKnS,KAAL,CAAWJ,KAAX,CAAiBiB,UAX/B;AAYE,QAAA,QAAQ,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBU,QAZ7B;AAaE,QAAA,SAAS,EAAE,KAAKN,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsC,aAA5B,GAA4C,KAAKjD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsC,aAA5B,CAA0CvC,KAAtF,GAA8F,CAAC,CAb5G;AAcE,QAAA,aAAa,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,GAAkD,KAAK/C,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoC,mBAA5B,CAAgDkE,IAAhD,CAAqDE,cAAvG,GAAwH,KAdzI;AAeE,QAAA,0BAA0B,EAAE,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBqV,0BAf/C;AAgBE,QAAA,QAAQ,EAAE,KAAKjV,KAAL,CAAWJ,KAAX,CAAiBsV,QAhB7B;AAiBE,QAAA,eAAe,EAAE,KAAKvV,KAAL,CAAW8S,eAAX,IAA8B,EAjBjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QApG9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtQR,CADJ;AAoYH;;AA8CD0C,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAIC,WAAW,GAAG,KAAlB;AAEA,QAAI;AAAE/N,MAAAA,cAAF;AAAkBpC,MAAAA,qBAAlB;AAAyChB,MAAAA,UAAzC;AACA+P,MAAAA,cADA;AACgBC,MAAAA,oBADhB;AACsCC,MAAAA,uBADtC;AAC+DC,MAAAA;AAD/D,QAC6E,KAAKzU,KADtF;;AAIA,QAAI,KAAKK,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0B0C,SAA1B,KAAwCoS,aAAa,CAACxV,KAAd,CAAoBU,QAApB,CAA6B0C,SAAzE,EAAoF;AAChF,UAAI,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBsF,qBAArB,EAA4C;AACxC,aAAKlF,KAAL,CAAWJ,KAAX,CAAiBsF,qBAAjB,CAAuC,KAAKlF,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0B0C,SAAjE,KACOyM,MAAM,CAAC6F,MAAP,CAAc,KAAKtV,KAAL,CAAWJ,KAAX,CAAiBsF,qBAAjB,CAAuC,KAAKlF,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0B0C,SAAjE,CAAd,EAA2F6G,GAA3F,CAA+F5C,IAAI,IAClG/B,qBAAqB,CAACyB,IAAtB,CAA2BM,IAAI,CAAC5C,YAAhC,CADD,CADP;AAGAH,QAAAA,UAAU,GAAGlG,aAAa,CAAC,KAAKgC,KAAL,CAAWJ,KAAX,CAAiBsF,qBAAlB,EAAyC,KAAKlF,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0B0C,SAAnE,CAA1B;AAEAqS,QAAAA,WAAW,GAAG,IAAd;AACH;AAEJ;;AACD,QAAI,KAAKrV,KAAL,CAAWJ,KAAX,CAAiB0H,cAAjB,KAAoC8N,aAAa,CAACxV,KAAd,CAAoB0H,cAA5D,EAA4E;AACxE+N,MAAAA,WAAW,GAAG,IAAd;AACA/N,MAAAA,cAAc,GAAG,KAAKtH,KAAL,CAAWJ,KAAX,CAAiB0H,cAAlC;AACH;;AAED,UAAMgL,aAAa,GAAG,EAAtB;AACA,QAAIiD,gBAAJ;AACA,QAAIC,uBAAJ;AACA,QAAIC,0BAAJ;AACA,QAAIC,YAAJ;;AAEA,QAAI,KAAK1V,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,KAAgCyU,aAAa,CAACxV,KAAd,CAAoBe,UAAxD,EAAoE;AAEhE0U,MAAAA,WAAW,GAAG,IAAd;;AACA,UAAI,KAAKrV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BgV,WAAhC,EAA6C;AACzCJ,QAAAA,gBAAgB,GAAGrX,mBAAmB,CAAC,KAAK8B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BgV,WAA5B,IAA2C,EAA5C,EAAgD,iBAAhD,EAAmE,iBAAnE,EAAsF,SAAtF,EAAiG,WAAjG,EAA8GnR,SAA9G,CAAtC;AACAyP,QAAAA,cAAc,GAAGsB,gBAAgB,CAACnR,GAAjB,CAAqB,YAArB,CAAjB;AACH;;AACD,UAAI,KAAKpE,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiV,iBAAhC,EAAmD;AAC/CJ,QAAAA,uBAAuB,GAAGtX,mBAAmB,CAAC,KAAK8B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiV,iBAA5B,IAAiD,EAAlD,EAAsD,cAAtD,EAAsE,cAAtE,EAAsFpR,SAAtF,EAAiGA,SAAjG,EAA4GA,SAA5G,CAA7C;AACA0P,QAAAA,oBAAoB,GAAGsB,uBAAuB,CAACpR,GAAxB,CAA4B,YAA5B,CAAvB;AACH;;AACD,UAAI,KAAKpE,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BkV,oBAAhC,EAAsD;AAClDJ,QAAAA,0BAA0B,GAAGvX,mBAAmB,CAAC,KAAK8B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BkV,oBAA5B,IAAoD,EAArD,EAAyD,iBAAzD,EAA4E,iBAA5E,EAA+F,SAA/F,EAA0G,WAA1G,EAAuHrR,SAAvH,CAAhD;AACA2P,QAAAA,uBAAuB,GAAGsB,0BAA0B,CAACrR,GAA3B,CAA+B,YAA/B,CAA1B;AACH;;AACD,UAAI,KAAKpE,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BS,WAAhC,EAA6C;AACzCsU,QAAAA,YAAY,GAAGxX,mBAAmB,CAAC,KAAK8B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BS,WAA5B,IAA2C,EAA5C,EAAgD,WAAhD,EAA6D,cAA7D,EAA6EoD,SAA7E,EAAwFA,SAAxF,EAAmGA,SAAnG,CAAlC;AACA4P,QAAAA,SAAS,GAAGsB,YAAY,CAACtR,GAAb,CAAiB,YAAjB,CAAZ;AACH;AACJ;;AAED,QAAIiR,WAAJ,EAAiB;AACb,WAAKtN,QAAL,CAAc;AACVT,QAAAA,cADU;AACMpD,QAAAA,UADN;AACkBgB,QAAAA,qBADlB;AAEV+O,QAAAA,cAFU;AAEMC,QAAAA,oBAFN;AAE4BC,QAAAA,uBAF5B;AAGV7B,QAAAA,aAHU;AAGK8B,QAAAA;AAHL,OAAd;AAKH;AACJ;;AAsqDD0B,EAAAA,oBAAoB,GAAG;AACnB,UAAM9U,UAAU,GAAG;AACfC,MAAAA,QAAQ,EAAE1C,cADK;AAEf2C,MAAAA,IAAI,EAAE;AACFP,QAAAA,UAAU,EAAE,EADV;AACcE,QAAAA,UAAU,EAAE2D,SAD1B;AACqCO,QAAAA,SAAS,EAAE,IADhD;AACsDgR,QAAAA,SAAS,EAAEvR;AADjE;AAFS,KAAnB;AAMA,SAAKxE,KAAL,CAAW/C,WAAX,CAAuB+D,UAAvB;AACH;;AAj7E+C;;AA47EpD,eAAetE,OAAO,CAACgD,eAAD,EAAkB;AACpC5C,EAAAA,WADoC;AACvBC,EAAAA,UADuB;AACXC,EAAAA,uBADW;AACcI,EAAAA,sBADd;AAEpCH,EAAAA,WAFoC;AAEvBC,EAAAA,8BAFuB;AAESC,EAAAA,mBAFT;AAGpCG,EAAAA,oCAHoC;AAGEC,EAAAA,gBAHF;AAGoBF,EAAAA,uBAHpB;AAIpCG,EAAAA,2BAJoC;AAIPC,EAAAA,mBAJO;AAIcC,EAAAA,sBAJd;AAIsCC,EAAAA,kBAJtC;AAI0DC,EAAAA;AAJ1D,CAAlB,CAAP,CAKZjB,UAAU,CAACkD,qBAAD,CALE,CAAf","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faThumbsUp, faChevronCircleDown } from '@fortawesome/free-solid-svg-icons';//,faUserTimes, faTrash\r\n//import { falistUl } from '@fortawesome/free-regular-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getDesignTemplateMappingDetail,\r\n    getMappedFieldProps, editFieldConfigService, auditFieldConfigService,\r\n    getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping,\r\n    getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit, combinationUniqueConfigService\r\n} from '../../actions';\r\nimport TemplateFilter from './TemplateFilter';\r\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\r\nimport { getControlMap, showEsign, constructOptionList } from '../../components/CommonScript';//searchData, sortData,\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\n// import DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddDesignTemplateMapping from './AddDesignTemplateMapping'\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport {\r\n    designProperties, formCode, SampleType, transactionStatus,\r\n    templateMappingAction, //SAMPLEAUDITFIELDS, SAMPLEAUDITEDITABLE, SAMPLEAUDITMULTILINGUALFIELDS,\r\n    // SUBSAMPLEAUDITFIELDS, SUBSAMPLEAUDITEDITABLE, SUBSAMPLEAUDITMULTILINGUALFIELDS,\r\n    SAMPLETEMPLATEFIELDS, SUBSAMPLETEMPLATEFIELDS, designComponents\r\n} from '../../components/Enumeration';\r\n\r\nimport AddSynonym from '../../components/droparea/AddSynonym';\r\nimport { Affix } from 'rsuite';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport ConfigureScreenFields from './ConfigureScreenFields';\r\nimport ConfigureEditFields from './ConfigureEditFields';\r\nimport ConfigureUniqueFields from './ConfigureUniqueFields.jsx';\r\nimport ConfigureAuditFields from './ConfigureAuditFields';\r\nimport CustomPopover from '../../components/customPopover';\r\n//import { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass DesignTemplateMapping extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // const dataState = {\r\n        //     skip: 0,\r\n        //     take: 10,\r\n        // };\r\n\r\n        this.state = {\r\n            isOpen: false,\r\n            designtemplatemappingData: [],\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            //selectedRecord: {},\r\n            operation: \"\",\r\n\r\n            screenName: undefined,\r\n            userLogged: true,\r\n            selectedDesignTemplateMapping: undefined,\r\n\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            selectedInput: \"\",\r\n            masterTypeArray: [{ label: this.props.intl.formatMessage({ id: \"IDS_NEWMASTER\" }), value: 1, item: { nmastertypecode: 1, smastertype: this.props.intl.formatMessage({ id: \"IDS_NEWMASTER\" }) } },\r\n            { label: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMASTER\" }), value: 2, item: { nmastertypecode: 2, smastertype: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMASTER\" }) } }],\r\n            newMasterForm: { value: -2, label: \"-\" },\r\n            moduleTypeArray: [{ label: this.props.intl.formatMessage({ id: \"IDS_NEWMODULE\" }), value: 3 },\r\n            { label: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMODULE\" }), value: 4 }]\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.searchFieldList = [\"sregtemplatename\", \"sversionno\", \"stransdisplaystatus\"];\r\n\r\n        this.designtemplatemappingFieldList = ['ndesigntemplatemappingcode', 'nsampletypecode', 'nformcode',\r\n            'nregtypecode', 'nregsubtypecode', 'nformwisetypecode', 'nreactregtemplatecode', 'ntransactionstatus', 'nversionno'];//'nmahcode',\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    filterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            // let uRL = \"\";\r\n            let inputData = [];\r\n            if (fieldname === \"sampleType\") {\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 1,\r\n                    nsampletypecode: parseInt(event.value),\r\n\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultsampletype: event }\r\n                let inputParam = { masterData, inputData }\r\n                if (event.value === SampleType.Masters) {\r\n                    const masterTypeArray = this.state.masterTypeArray\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                masterTypeArray,\r\n                                defaultMasterType: masterTypeArray[0],\r\n                                qualisforms: [], defaultform: this.state.newMasterForm,\r\n                                nregtypecode: -1, nregsubtypecode: -1\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    inputParam[\"masterData\"][\"defaultform\"] = { value: -1, label: \"-\" };\r\n                    this.props.getTMPFilterRegType(inputParam)\r\n                }\r\n            }\r\n            else if (fieldname === \"registrationType\") {\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n\r\n                    nregtypecode: parseInt(event.value),\r\n                    nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\r\n\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultregtype: event }\r\n                let inputParam = { masterData, inputData }\r\n                this.props.getTMPFilterRegSubType(inputParam)\r\n\r\n            } else if (fieldname === \"registrationSubType\") {\r\n\r\n                let masterData = { ...this.props.Login.masterData, defaultregsubtype: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else if (fieldname === \"masterType\") {\r\n\r\n                let masterData = { ...this.props.Login.masterData, defaultMasterType: event }\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 1,\r\n                    nsampletypecode: SampleType.Masters,\r\n                }\r\n\r\n                let inputParam = { masterData, inputData }\r\n                if (event.value === 1) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { masterData: { ...masterData, qualisforms: [], defaultform: this.state.newMasterForm } }\r\n                    }\r\n\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.getTMPFilterRegType(inputParam)\r\n                }\r\n\r\n            } else {\r\n                let masterData = { ...this.props.Login.masterData, defaultform: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const Layout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.jsondata\r\n\r\n        // let userStatusCSS = \"outline-secondary\";\r\n        // if (this.props.Login.masterData.selectedDesignTemplateMapping ? this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.ACTIVE\r\n        //     || this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED : false) {\r\n        //     userStatusCSS = \"outline-success\";\r\n        // }\r\n        // else if (this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.RETIRED) {\r\n        //     userStatusCSS = \"outline-danger\";\r\n        // }\r\n\r\n        const addId = this.state.controlMap.has(\"AddDesignTemplateMapping\") && this.state.controlMap.get(\"AddDesignTemplateMapping\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\r\n        const sampleFieldId = this.state.controlMap.has(\"ConfigureSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSampleDisplayFields\").ncontrolcode;\r\n        const sampleEditFieldId = this.state.controlMap.has(\"ConfigureSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSampleEditableFields\").ncontrolcode;\r\n        const subSampleFieldId = this.state.controlMap.has(\"ConfigureSubSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSubSampleDisplayFields\").ncontrolcode;\r\n        const subSampleEditFieldId = this.state.controlMap.has(\"ConfigureSubSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSubSampleEditableFields\").ncontrolcode;\r\n        const combinationUniqueFieldId = this.state.controlMap.has(\"ConfigureCombinationUniqueFields\") && this.state.controlMap.get(\"ConfigureCombinationUniqueFields\").ncontrolcode;\r\n        //const sampleAuditConfigId = this.state.controlMap.has(\"ConfigureSampleAuditFields\") && this.state.controlMap.get(\"ConfigureSampleAuditFields\").ncontrolcode;\r\n\r\n\r\n        const actionList = [];\r\n        if (this.state.userRoleControlRights.indexOf(sampleFieldId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSAMPLEDISPLAY, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREDISPLAYFIELDS\" }), \"controlId\": sampleFieldId })\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters &&\r\n            this.state.userRoleControlRights.indexOf(sampleEditFieldId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSAMPLEEDIT, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEDITFIELDS\" }), \"controlId\": sampleEditFieldId })\r\n\r\n            if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\r\n                if (this.state.userRoleControlRights.indexOf(subSampleFieldId) !== -1) {\r\n                    actionList.push({ \"method\": templateMappingAction.CONFIGSUBSAMPLEDISPLAY, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\" }), \"controlId\": subSampleFieldId })\r\n                }\r\n\r\n                if (this.state.userRoleControlRights.indexOf(subSampleEditFieldId) !== -1) {\r\n                    actionList.push({ \"method\": templateMappingAction.CONFIGSUBSAMPLEEDIT, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\" }), \"controlId\": subSampleEditFieldId })\r\n                }\r\n            }\r\n        }\r\n        if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGUNIQUE, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\" }), \"controlId\": combinationUniqueFieldId })\r\n        }\r\n        if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {//sampleAuditConfigId\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSAMPLEAUDIT, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREAUDITFIELDS\" }), \"controlId\": combinationUniqueFieldId })\r\n        }\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"DesignTemplateMapping\",\r\n            selectedObject: \"selectedDesignTemplateMapping\",\r\n            primaryKeyField: \"ndesigntemplatemappingcode\",\r\n            fetchUrl: \"designtemplatemapping/getDesignTemplateMapping\",\r\n            fecthInputObject: {\r\n                nregtypecode: this.props.Login.masterData.realSampleValue ?\r\n                    this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1) : -1,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1) : -1,\r\n\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData[\"realSampleValue\"] ? this.props.Login.masterData[\"realSampleValue\"].value : -1,\r\n                //nregtypecode: this.props.Login.masterData[\"realRegTypeValue\"] ? this.props.Login.masterData[\"realRegTypeValue\"].value : -1,\r\n                //nregsubtypecode: this.props.Login.masterData[\"realRegSubTypeValue\"] ? this.props.Login.masterData[\"realRegSubTypeValue\"].value : -1,\r\n                nformcode: this.props.Login.masterData[\"realFormValue\"] ? this.props.Login.masterData[\"realFormValue\"].value : -1,\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: this.searchFieldList\r\n\r\n        };\r\n        this.validationColumnList = [\r\n            { \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"nreactregtemplatecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n\r\n\r\n        ]\r\n        const mandatoryFields = [];\r\n        this.validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        // let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\r\n        //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\r\n        //     this.props.Login.userInfo)\r\n\r\n        // const breadCrumbData = [\r\n\r\n        let breadCrumbData = [];\r\n        this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 4 ?\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                },\r\n                //defaultMasterType\r\n                // {\r\n                //     \"label\": \"IDS_MASTERTYPE\",\r\n                //     \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\r\n                // },\r\n                {\r\n                    \"label\": \"IDS_SCREEN\",\r\n                    \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\r\n                }\r\n            ] :\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                }, {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\r\n                }, {\r\n                    \"label\": \"IDS_REGSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\r\n                }\r\n            ];\r\n\r\n        const addParam = {\r\n            screenName: this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATEMAPPING\" }),\r\n            operation: \"create\",\r\n            userInfo: this.props.Login.userInfo,\r\n            realSampleValue: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1,\r\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n            controlId: addId,\r\n            moduleTypeArray: this.state.moduleTypeArray\r\n        }\r\n\r\n        // console.log(\"render, props, state:\", this.props.Login);\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    {/* Start of get display*/}\r\n                    {/* <div className=\"client-listing-wrap mtop-4\"> */}\r\n                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATEMAPPING\" })}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.DesignTemplateMapping}\r\n                                getMasterDetail={(designtemplatemapping) => this.props.getDesignTemplateMappingDetail(designtemplatemapping, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedDesignTemplateMapping}\r\n                                primaryKeyField=\"ndesigntemplatemappingcode\"\r\n                                mainField=\"sregtemplatename\"\r\n                                firstField=\"sversionno\"\r\n                                secondField=\"stransdisplaystatus\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n                                openModal={() => this.props.getDesignTemplateMappingComboService(addParam)}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TEMPLATEFILTER\":\r\n                                            <TemplateFilter\r\n                                                formatMessage={this.props.intl.formatMessage}\r\n                                                filterSampletype={this.state.listSampletype || []}\r\n                                                filterRegistrationType={this.state.listRegistrationType || []}\r\n                                                filterRegistrationSubType={this.state.listRegistrationSubType || []}\r\n                                                filterForms={this.state.listForms || []}\r\n                                                defaultsampletype={this.props.Login.masterData[\"defaultsampletype\"] || {}}\r\n                                                defaultregsubtype={this.props.Login.masterData[\"defaultregsubtype\"] || []}\r\n                                                defaultregtype={this.props.Login.masterData[\"defaultregtype\"] || []}\r\n                                                defaultform={this.props.Login.masterData.defaultform || []}\r\n                                                filterComboChange={this.filterComboChange}\r\n                                                masterTypeArray={this.props.Login.masterData.masterTypeArray || []}\r\n                                                defaultMasterType={this.props.Login.masterData.defaultMasterType || {}}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n\r\n\r\n                        <Col md={8}>\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping.length > 0 && this.props.Login.masterData.selectedDesignTemplateMapping ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <Card.Title>\r\n                                                    <h1 className=\"product-title-main\">{this.props.Login.masterData.selectedDesignTemplateMapping.sregtemplatename}</h1>\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle className=\"text-muted font-weight-normal\">\r\n                                                    <Row>\r\n                                                        <Col md={10} className=\"d-flex\">\r\n                                                            <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                {`${this.props.intl.formatMessage({ id: \"IDS_VERSION\" })} : ${this.props.Login.masterData.selectedDesignTemplateMapping.sversionno}`}\r\n                                                                <span className={`btn btn-outlined ${this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`}>\r\n                                                                    {this.props.Login.masterData.selectedDesignTemplateMapping.stransdisplaystatus}\r\n                                                                </span>\r\n\r\n                                                            </h2>\r\n                                                        </Col>\r\n                                                        <Col md={2}>\r\n                                                            <div className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                    // data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.onApproveClick()}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faThumbsUp} title={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })} />\r\n                                                                </Nav.Link>\r\n                                                                {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.openCombinationUniqueFieldConfiguration(combinationUniqueFieldId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\" })} />\r\n                                                                </Nav.Link>\r\n                                                                                                                          \r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(sampleFieldId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREDISPLAYFIELDS\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.openFieldConfiguration(sampleFieldId, \"configure\")}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREDISPLAYFIELDS\" })} />\r\n                                                                </Nav.Link>\r\n                                                             \r\n                                                                {this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters ?\r\n                                                                    <><Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(sampleEditFieldId) === -1}\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEDITFIELDS\" })}\r\n\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        onClick={() => this.editFieldConfiguration(sampleEditFieldId, 'configureedit')}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEDITFIELDS\" })} />\r\n                                                                    </Nav.Link>\r\n\r\n\r\n                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(sampleFieldId) === -1}\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREAUDITFIELDS\" })}\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        onClick={() => this.auditFieldConfiguration(sampleFieldId, \"configureaudit\")}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREAUDITFIELDS\" })} />\r\n                                                                    </Nav.Link>\r\n                                                                    {this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true ?\r\n                                                                        <>\r\n                                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                        hidden={this.state.userRoleControlRights.indexOf(subSampleFieldId) === -1}\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\" })}\r\n                                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                                        onClick={() => this.openFieldConfiguration(subSampleFieldId, 'configuresubsample')}\r\n                                                                                    > \r\n                                                                                        <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\" })} />\r\n                                                                            </Nav.Link>\r\n                                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(subSampleEditFieldId) === -1}\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\" })}\r\n                                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                                    onClick={() => this.editFieldConfiguration(subSampleEditFieldId, 'configuresubsampleedit')}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\" })} />\r\n                                                                                </Nav.Link>\r\n                                                                            </>\r\n                                                                            : \"\"}\r\n                                                                    </>\r\n                                                                    : \"\"} */}\r\n                                                                <Nav.Link className=\" btn btn-circle outline-grey mr-2\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    //    data-for=\"tooltip_list_wrap\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    // onClick={() => this.ConfirmDelete(this.state.approveId)}>\r\n                                                                    onClick={() => this.ConfirmDelete()}>\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                {actionList.length > 0 ?\r\n                                                                    <CustomPopover\r\n                                                                        nav={true}\r\n                                                                        data={actionList}\r\n                                                                        Button={false}\r\n                                                                        hideIcon={true}\r\n                                                                        btnClasses=\"btn-circle btn_grey ml-2\"\r\n                                                                        textKey=\"value\"\r\n                                                                        icon={faChevronCircleDown}\r\n                                                                        // toolTip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURE\" })}\r\n                                                                        dynamicButton={(value) => this.actionMethod(value)}\r\n                                                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                    />\r\n                                                                    :\r\n                                                                    \"\"}\r\n\r\n                                                            </div>\r\n\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                {this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                                                    this.props.Login.masterData.selectedDesignTemplateMapping.nformcode > 0 &&\r\n                                                    <Row>\r\n                                                        <Col md={6}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id=\"IDS_MODULENAME\" message=\"Module Name\" /></FormLabel>\r\n                                                                <ReadOnlyText>   {this.props.Login.masterData.selectedDesignTemplateMapping.smodulename}\r\n                                                                </ReadOnlyText>\r\n                                                            </FormGroup>\r\n\r\n                                                        </Col>\r\n                                                        <Col md={6}>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_FORMNAME\" message=\"Form Name\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.selectedDesignTemplateMapping.sformname}\r\n                                                            </ReadOnlyText>\r\n\r\n                                                        </Col>\r\n                                                    </Row>}\r\n                                                <Card>\r\n                                                    <Card.Header><FormattedMessage id=\"IDS_TEMPLATE\" message=\"Template\" /></Card.Header>\r\n                                                    <Card.Body>\r\n                                                        {\r\n                                                            Layout ?\r\n                                                                Layout.map((item) =>\r\n                                                                    <Row>\r\n                                                                        {item.children.length > 0 ?\r\n                                                                            item.children.map((column) =>\r\n                                                                                <Col md={12 / item.children.length}>\r\n                                                                                    {\r\n                                                                                        column.children.map((component) => {\r\n                                                                                            return (\r\n                                                                                                component.hasOwnProperty(\"children\") ?\r\n                                                                                                    <Row>\r\n                                                                                                        {component.children.map(componentrow =>\r\n                                                                                                            componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" &&\r\n                                                                                                            <Col md={12 / componentrow.length}>\r\n                                                                                                                <FormGroup>\r\n                                                                                                                    <FormLabel>{componentrow.label}</FormLabel>\r\n                                                                                                                    <ReadOnlyText>{\"-\"}</ReadOnlyText>\r\n                                                                                                                </FormGroup>\r\n                                                                                                            </Col>\r\n                                                                                                        )\r\n                                                                                                        }\r\n                                                                                                    </Row>\r\n                                                                                                    :\r\n                                                                                                    component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" &&\r\n                                                                                                    <FormGroup>\r\n                                                                                                        <FormLabel>{component.label}</FormLabel>\r\n                                                                                                        <ReadOnlyText> {\"-\"}</ReadOnlyText>\r\n                                                                                                    </FormGroup>\r\n                                                                                            )\r\n                                                                                        })\r\n                                                                                    }\r\n\r\n                                                                                </Col>\r\n                                                                            )\r\n                                                                            : \"\"}\r\n                                                                    </Row>\r\n                                                                )\r\n                                                                :\r\n                                                                \"\"\r\n                                                        }\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                            </Card.Body>\r\n\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        // size={(this.props.Login.operation === 'configure'\r\n                        //     || this.props.Login.operation === 'configuresubsample'\r\n                        //     || this.props.Login.operation === 'configureaudit') ? \"xl\" : \"lg\"}\r\n                        size={this.props.Login.screenName === 'Design Template Mapping' ? 'lg' : \"xl\"}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n\r\n                        mandatoryFields={(this.props.Login.operation === 'configure'\r\n                            || this.props.Login.operation === 'configuresubsample'\r\n                            || this.props.Login.operation === 'configureedit'\r\n                            || this.props.Login.operation === 'configuresubsampleedit'\r\n                            || this.props.Login.operation === 'configureunique'\r\n                            || this.props.Login.operation === 'configureaudit') ? [] : mandatoryFields}\r\n\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' ?\r\n                                <ConfigureScreenFields\r\n                                    operation={this.props.Login.operation}\r\n                                    designData={this.props.Login.designData || {}}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                        this.props.Login.dataResult || [] :\r\n                                        this.props.Login.dataResult || {}}\r\n                                    onChangeToggle={this.onChangeToggle}\r\n                                    approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                    selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                />\r\n                                : (this.props.Login.operation === 'configureedit'\r\n                                    || this.props.Login.operation === 'configuresubsampleedit') ?\r\n                                    <ConfigureEditFields\r\n                                        operation={this.props.Login.operation}\r\n                                        designData={this.props.Login.editFieldDesignData || {}}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                            this.props.Login.editFieldDataResult || [] :\r\n                                            this.props.Login.editFieldDataResult || {}}\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        // onChangeToggle={this.onChangeToggle}\r\n                                        onComboChange={this.onConfigureComboChange}\r\n                                        // approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                        selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                    />\r\n                                    : (this.props.Login.operation === 'configureaudit') ?\r\n                                        <ConfigureAuditFields\r\n                                            operation={this.props.Login.operation}\r\n                                            needSubSample={this.props.Login.masterData.realRegSubTypeValue ?\r\n                                                this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false}\r\n                                            designData={this.props.Login.auditFieldDesignData || {}}\r\n                                            auditTable={this.props.Login.auditTable || {}}\r\n                                            auditData={this.props.Login.auditData || {}}\r\n                                            inputParam={this.props.Login.inputParam}\r\n                                            dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                                this.props.Login.auditFieldDataResult || [] :\r\n                                                this.props.Login.auditFieldDataResult || {}}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onChangeToggle={this.onChangeToggle}\r\n                                            selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                        />\r\n                                        : this.props.Login.operation === 'configureunique' ?\r\n                                            <ConfigureUniqueFields\r\n                                                designData={this.props.Login.designData || {}}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                // dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                                //     this.props.Login.dataResult || [] :\r\n                                                //     this.props.Login.dataResult || {}}\r\n                                                dataList={this.props.Login.dataList || []}\r\n                                                dataListCount={this.props.Login.dataListCount || []}\r\n                                                dataListsubsample={this.props.Login.dataListSubSample || []}\r\n                                                dataListCountsubsample={this.props.Login.dataListCountSubSample || []}\r\n                                                onInputOnChange={this.onInputOnChangeForUnique}\r\n                                                addCombinatonUnique={this.addCombinatonUnique}\r\n                                                deleteCombinationUnique={this.deleteCombinationUnique}\r\n                                                slanguagetypecode={this.props.Login.userInfo.slanguagetypecode}\r\n                                                approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                                selectedTemplateType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                            />\r\n                                            :\r\n                                            this.state.showSynonym ?\r\n                                                <AddSynonym\r\n                                                    selectedFieldRecord={this.state.selectedRecord}\r\n                                                    onInputOnChange={this.onInputOnChange}\r\n                                                    languages={this.props.Login.languageList || []}\r\n                                                    fieldName=\"nmodulecode\"\r\n                                                />\r\n                                                : <AddDesignTemplateMapping\r\n                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                    onInputOnChange={this.onInputOnChange}\r\n                                                    onComboChange={this.onComboChange}\r\n                                                    handleDateChange={this.handleDateChange}\r\n                                                    formatMessage={this.props.intl.formatMessage}\r\n                                                    designtemplatemappingList={this.props.Login.designtemplatemappingList}\r\n                                                    subSampleTemplateList={this.props.Login.subSampleTemplateList}\r\n                                                    selectedDesignTemplateMapping={this.props.Login.masterData.selectedDesignTemplateMapping || {}}\r\n                                                    operation={this.props.Login.operation}\r\n                                                    userLogged={this.props.Login.userLogged}\r\n                                                    inputParam={this.props.Login.inputParam}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    nformcode={this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1}\r\n                                                    needSubSample={this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false}\r\n                                                    designTemplateQualisModule={this.props.Login.designTemplateQualisModule}\r\n                                                    language={this.props.Login.language}\r\n                                                    moduleTypeArray={this.state.moduleTypeArray || []}\r\n\r\n                                                />}\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    actionMethod = (value) => {\r\n        if (value.method === templateMappingAction.CONFIGSAMPLEDISPLAY) {\r\n            this.openFieldConfiguration(value.controlId, \"configure\");\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSAMPLEEDIT) {\r\n            this.editFieldConfiguration(value.controlId, 'configureedit')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSUBSAMPLEDISPLAY) {\r\n            this.openFieldConfiguration(value.controlId, 'configuresubsample')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSUBSAMPLEEDIT) {\r\n            this.editFieldConfiguration(value.controlId, 'configuresubsampleedit')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGUNIQUE) {\r\n            this.openCombinationUniqueFieldConfiguration(value.controlId)\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSAMPLEAUDIT) {\r\n            this.auditFieldConfiguration(value.controlId, 'configureaudit')\r\n        }\r\n    }\r\n\r\n    // onFilterSubmit = () => {\r\n    //     this.reloadData()\r\n    // }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\r\n            nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\r\n\r\n            // nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\r\n            //nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\r\n            nsampletypecode: this.props.Login.masterData.realSampleValue.value,\r\n            nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData[\"realFormValue\"].value : -1\r\n        };\r\n\r\n        let inputParam = { masterData: this.props.Login.masterData, inputData };\r\n        this.props.reloadDesignTemplateMapping(inputParam);\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n\r\n        let { selectedRecord, userRoleControlRights, controlMap,\r\n            listSampletype, listRegistrationType, listRegistrationSubType, listForms } = this.state;\r\n\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]\r\n                    && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                updateState = true;\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n\r\n        const selectedInput = {};\r\n        let Taglstsampletype;\r\n        let TaglistRegistrationType;\r\n        let TaglistRegistrationSubType;\r\n        let ListFormsMap;\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            updateState = true;\r\n            if (this.props.Login.masterData.SampleTypes) {\r\n                Taglstsampletype = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", undefined);\r\n                listSampletype = Taglstsampletype.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.registrationTypes) {\r\n                TaglistRegistrationType = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\r\n                listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.registrationSubTypes) {\r\n                TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.registrationSubTypes || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\r\n                listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.qualisforms) {\r\n                ListFormsMap = constructOptionList(this.props.Login.masterData.qualisforms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                listForms = ListFormsMap.get(\"OptionList\");\r\n            }\r\n        }\r\n\r\n        if (updateState) {\r\n            this.setState({\r\n                selectedRecord, controlMap, userRoleControlRights,\r\n                listSampletype, listRegistrationType, listRegistrationSubType,\r\n                selectedInput, listForms\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: this.props.Login.masterData.defaultsampletype.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\r\n            nregsubtypecode: this.props.Login.masterData.defaultsampletype.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\r\n            nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\r\n            nformcode: this.props.Login.masterData.defaultform ? this.props.Login.masterData.defaultform.value || -1 : -1\r\n\r\n        };\r\n        let masterData = {\r\n            ...this.props.Login.masterData,\r\n            realSampleValue: this.props.Login.masterData.defaultsampletype,\r\n            realFormValue: this.props.Login.masterData.defaultform,\r\n            realRegTypeValue: this.props.Login.masterData.defaultregtype,\r\n            realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\r\n        }\r\n        let inputParam = { masterData, inputData };\r\n        this.props.getTMPFilterSubmit(inputParam);\r\n    }\r\n\r\n    onApproveClick = () => {\r\n        if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus !== transactionStatus.RETIRED) {\r\n\r\n            //console.log(\"this.state.selectedRecord.nreactregtemplatecode.item.jsondata:\", this.state, this.props.Login);\r\n            //console.log(\"this.props.Login.masterData.selectedDesignTemplateMapping.jsondata:\", this.props.Login.masterData.selectedDesignTemplateMapping.jsondata);\r\n\r\n            let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey, deleteValidation, jsqlquerycolumns } = this.getGridJsondata(this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\r\n\r\n            // console.log(\"deleteValidation 2:\", deleteValidation);\r\n            const ncontrolCode = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode\r\n            let inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey, };\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let postParam = undefined;\r\n            inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n            inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n            inputData[\"deletevalidationlist\"] = deleteValidation;\r\n            postParam = { inputListName: \"DesignTemplateMapping\", selectedObject: \"selectedDesignTemplateMapping\", primaryKeyField: \"ndesigntemplatemappingcode\" };\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    ...inputData\r\n\r\n                },\r\n                classUrl: 'designtemplatemapping',\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                operation: \"approve\", postParam\r\n            }\r\n            let saveType;\r\n\r\n            // console.log(\"approve:\", inputParam);\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"approve\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TEMPLATERETIRED\" }));\r\n        }\r\n    }\r\n\r\n    ConfirmDelete = () => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteTemplate());\r\n    }\r\n\r\n    deleteTemplate = () => {\r\n        if ((this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT)) {\r\n            const ncontrolCode = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let postParam = undefined;\r\n            inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n            inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n            postParam = { inputListName: \"DesignTemplateMapping\", selectedObject: \"selectedDesignTemplateMapping\", primaryKeyField: \"ndesigntemplatemappingcode\" };\r\n\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n\r\n                },\r\n                classUrl: 'designtemplatemapping',\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                operation: \"delete\", postParam\r\n            }\r\n            let saveType;\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"delete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTODELETE\" }));\r\n        }\r\n    }\r\n\r\n    deleteCombinationUnique = (index, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            let dataList = this.props.Login.subsampledataList || []\r\n            let dataListCount = this.props.Login.subsampledataListCount || []\r\n            dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]\r\n            //   delete dataListCount[index]\r\n            if (dataList[index] || dataList[index] === null) {\r\n                dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]\r\n\r\n                // delete dataList[index]\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { subsampledataListCount: dataListCount, subsampledataList: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            let dataList = this.props.Login.dataList || []\r\n            let dataListCount = this.props.Login.dataListCount || []\r\n            dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]\r\n            //   delete dataListCount[index]\r\n            if (dataList[index] || dataList[index] === null) {\r\n                dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]\r\n\r\n                // delete dataList[index]\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCount, dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    addCombinatonUnique = (designData, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            const dataList = this.props.Login.dataListSubSample || []\r\n            //    const obj={}\r\n            //     designData.map(item=>{\r\n            //         obj[item[\"2\"]]={...item}\r\n            //     })\r\n            //dataList.push({})\r\n            const dataListCount = this.props.Login.dataListCountSubSample || []\r\n            dataListCount.push(dataListCount.length + 1)\r\n            dataList.push({})\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCountSubSample: dataListCount, dataListSubSample: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            const dataList = this.props.Login.dataList || []\r\n            //    const obj={}\r\n            //     designData.map(item=>{\r\n            //         obj[item[\"2\"]]={...item}\r\n            //     })\r\n            //dataList.push({})\r\n            const dataListCount = this.props.Login.dataListCount || []\r\n            dataListCount.push(dataListCount.length + 1)\r\n            dataList.push({})\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCount, dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    openCombinationUniqueFieldConfiguration = (controlCode) => {\r\n        let openModal = true;\r\n        let operation = 'configureunique';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n            inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.combinationUniqueConfigService(inputParam)\r\n    }\r\n\r\n    openFieldConfiguration = (controlCode, operation) => {\r\n        let openModal = true;\r\n        //let operation = 'configure';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n            inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.getMappedFieldProps(inputParam)\r\n    }\r\n\r\n    editFieldConfiguration = (controlCode, operation) => {\r\n\r\n        //console.log(\"edit config:\", this.props.Login);\r\n        // let operation = 'configureedit';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.defaultregtype.value,\r\n                nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        // if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){\r\n        //     inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        //  }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.editFieldConfigService(inputParam)\r\n    }\r\n\r\n    auditFieldConfiguration = (controlCode, operation) => {\r\n\r\n        //console.log(\"edit config:\", this.props.Login);\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters\r\n                    ? -1 : this.props.Login.masterData.defaultregtype\r\n                        ? this.props.Login.masterData.defaultregtype.value : -1,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters\r\n                    ? -1 : this.props.Login.masterData.defaultregsubtype\r\n                        ? this.props.Login.masterData.defaultregsubtype.value : -1,\r\n                //nregtypecode: this.props.Login.masterData.defaultregtype.value,\r\n                //nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\r\n                userinfo: this.props.Login.userInfo,\r\n                nneedsubsample: this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.auditFieldConfigService(inputParam)\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"approve\"\r\n                || this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null, dataList: [], dataListCount: [], dataListSubSample: [], dataListCountSubSample: [] }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onConfigureComboChange = (comboData, formCode, item) => {\r\n        const fieldName = item.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[formCode] = { ...selectedRecord[formCode], [fieldName]: comboData };\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n        // let designData = this.props.Login.editFieldDesignData;\r\n        // let dataResult = this.props.Login.editFieldDataResult;\r\n        // if (formCode === undefined){\r\n        //     dataResult[dataIndex][field] = event.target.checked;\r\n        //     if (event.target.checked) {\r\n        //         designData[field].splice(dataIndex, 0, dataItem.realData)\r\n\r\n        //     } else {\r\n        //         designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n        //     }\r\n        // }\r\n        // else{\r\n        //     dataResult[formCode][\"sampleeditable\"] = comboData;\r\n        //     if (event.target.checked) {\r\n        //         if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\r\n        //             return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\r\n        //         } else {\r\n        //             designData[formCode][field].splice(dataIndex, 0, dataItem.realData)\r\n        //         }\r\n        //         if (field === 'sampledisplayfields') {\r\n        //             designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label)\r\n        //         }\r\n        //     } else {\r\n        //         if (field === 'sampledisplayfields') {\r\n        //             designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1)\r\n        //         }\r\n        //         designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n        //     }\r\n        // }\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { designData, dataResult }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChangeForUnique = (event, radiotext, index, multilinguallabel, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            const dataList = this.props.Login.dataListSubSample || []\r\n            if (dataList[index]) {\r\n                const value = dataList[index] && dataList[index][event.target.name];\r\n                if (value !== '' && value !== undefined) {\r\n                    delete dataList[index][event.target.name]\r\n                } else {\r\n\r\n                    dataList[index][event.target.name] = {\r\n                        [designProperties.LABEL]: { ...multilinguallabel },\r\n                        [designProperties.VALUE]: radiotext\r\n                    };\r\n                }\r\n            } else {\r\n                dataList[index] = {\r\n                    [event.target.name]: { [designProperties.LABEL]: { ...multilinguallabel }, [designProperties.VALUE]: radiotext }\r\n                }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListSubSample: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            const dataList = this.props.Login.dataList || []\r\n            if (dataList[index]) {\r\n                const value = dataList[index] && dataList[index][event.target.name];\r\n                if (value !== '' && value !== undefined) {\r\n                    delete dataList[index][event.target.name]\r\n                } else {\r\n\r\n                    dataList[index][event.target.name] = {\r\n                        [designProperties.LABEL]: { ...multilinguallabel },\r\n                        [designProperties.VALUE]: radiotext\r\n                    };\r\n                }\r\n            } else {\r\n                dataList[index] = {\r\n                    [event.target.name]: { [designProperties.LABEL]: { ...multilinguallabel }, [designProperties.VALUE]: radiotext }\r\n                }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    getGridJsondata = (templatedata, task) => {\r\n        // console.log(\"task:\", task);\r\n        let gridItem = [];\r\n        let gridMoreItem = [];\r\n        let masterdatefields = [];\r\n        let masterdateconstraints = [];\r\n        let masteruniquevalidation = [];\r\n        let mastercombinationunique = [];\r\n        let editable = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let templatePrimaryKey = \"\";\r\n        let mastertemplatefields = [];\r\n        let sampleAuditFields = [];\r\n        let sampleAuditEditable = [];\r\n        let sampleAuditMultilingualFields = [];\r\n        let deleteValidation = [];\r\n        let jsqlquerycolumns = [{\r\n            \"columnname\": \"ndynamicmastercode\",\r\n            \"displayname\": {\r\n                \"en-US\": \"DynamicMaster Code PK\",\r\n                \"ru-RU\": \"Код DynamicMaster ПК\",\r\n                \"tg-TG\": \"Рамзи DynamicMaster PK\"\r\n            },\r\n            \"columndatatype\": \"numeric\"\r\n        },\r\n        {\r\n            \"columnname\": \"nstatus\",\r\n            \"displayname\": {\r\n                \"en-US\": \"Status\",\r\n                \"ru-RU\": \"Статус\",\r\n                \"tg-TG\": \"Статус\"\r\n            },\r\n            \"columndatatype\": \"numeric\"\r\n        }];\r\n\r\n\r\n\r\n        // console.log(\"grid json:\", this.props.Login, templatedata);\r\n        // console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\r\n\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map((component, index) => {\r\n                    //console.log(\"component2:\", component);\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                            jsqlquerycolumns.push({\r\n                                \"columnname\": componentRow.label,\r\n                                \"displayname\": componentRow.displayname,\r\n                                \"isjsoncolumn\": true,\r\n                                \"columndatatype\": \"string\",\r\n                                \"jsoncolumnname\": \"jsonuidata\"\r\n                            })\r\n                            //console.log(\"component row2:\", componentRow);\r\n                            componentRow.unique && masteruniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && mastercombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n\r\n\r\n\r\n                            templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\r\n\r\n                            let filterinputtype = \"text\";\r\n                            let comboDataInputObject = {};\r\n\r\n                            if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                deleteValidation.push({\r\n                                    \"smastertablename\": componentRow.table.item.stablename,\r\n                                    \"smasterprimarykeyname\": componentRow.valuemember,\r\n                                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                    \"stranstableforeignkeyname\": componentRow.valuemember,\r\n                                    //  \"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\r\n                                    \"sjsonfieldname\": \"jsondata\",\r\n                                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                    // \"nformcode\":componentRow.table.item.nformcode,\r\n                                    \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                });\r\n                            }\r\n\r\n                            if (componentRow.inputtype === 'combo') {\r\n\r\n                                comboDataInputObject = {\r\n                                    \"predefinedtablename\": componentRow.source,\r\n                                    \"predefinedvaluemember\": componentRow.valuemember,\r\n                                    \"predefineddisplaymember\": componentRow.displaymember,\r\n                                    \"predefinedismultilingual\": false,\r\n                                    \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\r\n                                };\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": componentRow.displaymember,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"foriegntablePK\": componentRow.label,\r\n                                    // \"ismultilingual\": true,\r\n                                    // \"conditionstring\": \" and nformcode in (\"+componentRow.table.item.nformcode+\") \",\r\n                                    \"tablecolumnname\": componentRow.valuemember,\r\n                                    \"foriegntablename\": componentRow.source,\r\n                                    ...comboDataInputObject\r\n                                })\r\n                                filterinputtype = \"predefinednumeric\";\r\n                            }\r\n                            // samplesearchfields.push(componentRow.label)\r\n                            if (componentRow.inputtype === 'date') {\r\n                                filterinputtype = \"date\";\r\n                                masterdatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n                            }\r\n                            if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\r\n                                filterinputtype = \"numeric\";\r\n                            }\r\n\r\n                            jdynamiccolumns.push({\r\n                                default: componentRow.unique ? true : false,\r\n                                filterinputtype,\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname,\r\n                                ...comboDataInputObject\r\n                            })\r\n                            // displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            // componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                                sampleAuditEditable.push(componentRow.label);\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            }\r\n                            mastertemplatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            sampleAuditFields.push(componentRow.label);\r\n                            sampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n\r\n\r\n                            if (componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                            }\r\n                            else {\r\n                                editable.push({ label: componentRow.label, editableuntill: [transactionStatus.DRAFT] })\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        //console.log(\"component2:\", component);\r\n                        component.unique && masteruniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && mastercombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\r\n                        jsqlquerycolumns.push({\r\n                            \"columnname\": component.label,\r\n                            \"displayname\": component.displayname,\r\n                            \"isjsoncolumn\": true,\r\n                            \"columndatatype\": \"string\",\r\n                            \"jsoncolumnname\": \"jsondata\"\r\n                        })\r\n\r\n                        let filterinputtype = \"text\";\r\n                        let comboDataInputObject = {};\r\n\r\n                        mastertemplatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        sampleAuditFields.push(component.label);\r\n                        sampleAuditMultilingualFields.push({ [component.label]: component.displayname });\r\n\r\n                        if (component.componentcode === designComponents.COMBOBOX) {\r\n                            deleteValidation.push({\r\n                                \"smastertablename\": component.table.item.stablename,\r\n                                \"smasterprimarykeyname\": component.valuemember,\r\n                                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                \"stranstableforeignkeyname\": component.valuemember,\r\n                                //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\r\n                                \"sjsonfieldname\": \"jsondata\",\r\n                                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                                // \"nformcode\":component.table.item.nformcode\r\n                            });\r\n                        }\r\n\r\n                        if (component.inputtype === 'combo') {\r\n                            filterinputtype = \"predefinednumeric\";\r\n                            comboDataInputObject = {\r\n                                \"predefinedtablename\": component.source,\r\n                                \"predefinedvaluemember\": component.valuemember,\r\n                                \"predefineddisplaymember\": component.displaymember,\r\n                                \"predefinedismultilingual\": false,\r\n                                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\r\n                            };\r\n                            jnumericcolumns.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"foriegntablePK\": component.label,\r\n                                // \"ismultilingual\": true,\r\n                                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\r\n                                \"tablecolumnname\": component.column.value,\r\n                                \"foriegntablename\": component.source,\r\n                                ...comboDataInputObject\r\n                            })\r\n                        }\r\n                        // samplesearchfields.push(component.label)\r\n                        if (component.inputtype === 'date') {\r\n                            filterinputtype = \"date\";\r\n                            masterdatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n                        }\r\n                        if (component.inputtype === 'numeric' || component.inputtype === 'radio') {\r\n                            filterinputtype = \"numeric\";\r\n                        }\r\n\r\n                        jdynamiccolumns.push({\r\n                            default: component.unique ? true : false,\r\n                            columnname: component.label,\r\n                            displayname: component.displayname,\r\n                            filterinputtype,\r\n                            ...comboDataInputObject\r\n                        });\r\n\r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                            sampleAuditEditable.push(component.label);\r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                        }\r\n                        if (component.templatemandatory) {\r\n                            editable.push({ label: component.label, editableuntill: [] });\r\n\r\n                        }\r\n                        else {\r\n                            editable.push({ label: component.label, editableuntill: [transactionStatus.DRAFT] })\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            })\r\n        );\r\n\r\n        if (task === \"DeleteValidation\" && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n\r\n            const selectedSubSampleTemplate = this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\r\n\r\n            const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n\r\n            if (needsubsample) {\r\n                selectedSubSampleTemplate.map(row =>\r\n                    row.children && row.children.map(column => {\r\n                        column.children && column.children.map(component => {\r\n                            if (component.hasOwnProperty('children')) {\r\n                                component.children.map(componentRow => {\r\n                                    //  console.log(\"componentRow sub:\", componentRow);\r\n\r\n                                    if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                        deleteValidation.push({\r\n                                            \"smastertablename\": componentRow.table.item.stablename,\r\n                                            \"smasterprimarykeyname\": componentRow.valuemember,\r\n                                            \"stranstablename\": \"registrationsample\",\r\n                                            \"stranstableforeignkeyname\": componentRow.valuemember,\r\n                                            // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                            \"sjsonfieldname\": \"jsondata\",\r\n                                            \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                            \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                            //\"nformcode\":componentRow.table.item.nformcode\r\n                                        });\r\n                                    }\r\n                                }\r\n                                )\r\n                            } else {\r\n                                //console.log(\"componentRow2 sub:\", component);                         \r\n\r\n                                if (component.componentcode === designComponents.COMBOBOX) {\r\n                                    deleteValidation.push({\r\n                                        \"smastertablename\": component.table.item.stablename,\r\n                                        \"smasterprimarykeyname\": component.valuemember,\r\n                                        \"stranstablename\": \"registrationsample\",\r\n                                        \"stranstableforeignkeyname\": component.valuemember,\r\n                                        //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                        \"sjsonfieldname\": \"jsondata\",\r\n                                        \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                        //\"nformcode\":component.table.item.nformcode,\r\n                                        \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                                    });\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                )\r\n            }\r\n        }\r\n\r\n\r\n        let jsondata = {\r\n            griditem: gridItem,\r\n            gridmoreitem: gridMoreItem,\r\n            masterdatefields,\r\n            masterdateconstraints,\r\n            masteruniquevalidation,\r\n            editable,\r\n            mastertemplatefields,\r\n            mastercombinationunique,\r\n            sampleAuditFields,\r\n            sampleAuditEditable,\r\n            sampleAuditMultilingualFields\r\n        }\r\n\r\n        //console.log(\"dynamiccolumns:\", jdynamiccolumns);\r\n        //console.log(\"deleteValidation 1:\", deleteValidation);\r\n        return { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey, deleteValidation, jsqlquerycolumns };\r\n    }\r\n\r\n    getJsondata = (templatedata) => {\r\n        //let displayFields = [];\r\n        //ALPD-533\r\n        let displayFields = [{[designProperties.LABEL]: { \"en-US\": \"Order No.\", \"ru-RU\": \"№ заказа.\", \"tg-TG\": \"Фармоиш №\" },\r\n                              [designProperties.VALUE]: 'sarno'}];\r\n        let listItem = []\r\n       // let gridItem = [];\r\n        let gridItem  = [{ [designProperties.LABEL]:{ \"en-US\": \"Order No.\", \"ru-RU\": \"№ заказа.\", \"tg-TG\": \"Фармоиш №\" }, [designProperties.VALUE]: \"sarno\" }];\r\n        let gridMoreItem = []\r\n        let editable = []\r\n        let subsampleeditable = [];\r\n        let subsamplelistitem = [];\r\n        let sampledatefields = [{ [designProperties.VALUE]: 'dregdate', dateonly: false }];\r\n        let sampledateconstraints = [];\r\n        let subsampledatefields = [];\r\n        let subsampledateconstraints = [];\r\n        let samplesearchfields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\"];\r\n        let subsamplesearchfields = [\"sarno\", \"ssamplearno\", \"stransdisplaystatus\"];\r\n        let sampletemplatefields = [];\r\n        let subsampletemplatefields = [];\r\n        let sampleuniquevalidation = [];\r\n        let subsampleuniquevalidation = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let samplecombinationunique = [];\r\n        let subsamplecombinationunique = [];\r\n\r\n        let sampleAuditFields = [];\r\n        let sampleAuditEditable = [];\r\n        let sampleAuditMultilingualFields = [];\r\n        let subSampleAuditFields = [];\r\n        let subSampleAuditEditable = [];\r\n        let subSampleAuditMultilingualFields = [];\r\n        let deleteValidation = [];\r\n\r\n        //if(this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){        \r\n\r\n        sampleAuditFields = [\"sarno\"];\r\n        sampleAuditEditable = [\"sarno\"];\r\n        sampleAuditMultilingualFields = [{ \"sarno\": { \"en-US\": \"Order No.\", \"ru-RU\": \"Order No.\", \"tg-TG\": \"Order No.\" } }];\r\n        subSampleAuditFields = [\"sarno\", \"ssamplearno\"];\r\n        subSampleAuditEditable = [\"sarno\", \"ssamplearno\"];\r\n        subSampleAuditMultilingualFields = [{ \"sarno\": { \"en-US\": \"Order No.\", \"ru-RU\": \"№ заказа.\", \"tg-TG\": \"Фармоиш №\" } },\r\n        { \"ssamplearno\": { \"en-US\": \"Sub Order No.\", \"ru-RU\": \"Под заказ №\", \"tg-TG\": \"№ Фармони зер\" } }];\r\n        //}\r\n\r\n        ////////////////////////////////////////////\r\n        // let sampleAuditFields = SAMPLEAUDITFIELDS;\r\n        // let sampleAuditEditable = SAMPLEAUDITEDITABLE\r\n        // let sampleAuditMultilingualFields = SAMPLEAUDITMULTILINGUALFIELDS\r\n        // let subSampleAuditFields = SUBSAMPLEAUDITFIELDS\r\n        // let subSampleAuditEditable = SUBSAMPLEAUDITEDITABLE\r\n        // let subSampleAuditMultilingualFields = SUBSAMPLEAUDITMULTILINGUALFIELDS;\r\n\r\n        let testdatefields = [{ [designProperties.VALUE]: 'dtransactiondate', dateonly: false }];\r\n        //console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\r\n        this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                            //console.log(\"componentRow sub:\", componentRow);\r\n                            componentRow.unique && subsampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && subsamplecombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n                            subsamplesearchfields.push(componentRow.label);\r\n                            //subsampleeditable.push({ label: componentRow.label, editableuntill: [17] })\r\n\r\n                            subsampletemplatefields.push({\r\n                                [designProperties.LABEL]: componentRow.displayname,\r\n                                [designProperties.VALUE]: componentRow.label,\r\n                                [designProperties.PRIMARYKEY]: componentRow.valuemember,\r\n                                [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\r\n                            })\r\n                            if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                deleteValidation.push({\r\n                                    \"smastertablename\": componentRow.table.item.stablename,\r\n                                    \"smasterprimarykeyname\": componentRow.table.valuemember,\r\n                                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\r\n                                    \"stranstableforeignkeyname\": componentRow.table.valuemember,\r\n                                    //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                    \"sjsonfieldname\": \"jsondata\",\r\n                                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                    \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                    //\"nformcode\":componentRow.table.item.nformcode\r\n                                });\r\n                            }\r\n                            subSampleAuditFields.push(componentRow.label);\r\n                            subSampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n\r\n                            if (componentRow.mandatory) {\r\n                                subSampleAuditEditable.push(componentRow.label);\r\n                            }\r\n\r\n                            if (componentRow.readonly)\r\n                                subsampleeditable.push({ label: componentRow.label, editableuntill: [] })\r\n                            else\r\n                                subsampleeditable.push({ label: componentRow.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                            if (componentRow.inputtype === 'date') {\r\n                                subsampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                            }\r\n                            subsamplelistitem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                        }\r\n                        )\r\n                    } else {\r\n                        //console.log(\"componentRow2 sub:\", component);\r\n                        component.unique && subsampleuniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && subsamplecombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        subsamplesearchfields.push(component.label);\r\n\r\n                        // subsampleeditable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n                        subsampletemplatefields.push({\r\n                            [designProperties.LABEL]: component.displayname,\r\n                            [designProperties.VALUE]: component.label,\r\n                            [designProperties.PRIMARYKEY]: component.valuemember,\r\n                            [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\r\n                        })\r\n\r\n                        if (component.componentcode === designComponents.COMBOBOX) {\r\n                            deleteValidation.push({\r\n                                \"smastertablename\": component.table.item.stablename,\r\n                                \"smasterprimarykeyname\": component.table.valuemember,\r\n                                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\r\n                                \"stranstableforeignkeyname\": component.table.valuemember,\r\n                                // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                \"sjsonfieldname\": \"jsondata\",\r\n                                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                //\"nformcode\":component.table.item.nformcode,\r\n                                \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                            });\r\n                        }\r\n                        subSampleAuditFields.push(component.label);\r\n                        subSampleAuditMultilingualFields.push({ [component.label]: component.displayname });\r\n\r\n                        if (component.mandatory) {\r\n                            subSampleAuditEditable.push(component.label);\r\n                        }\r\n                        if (component.readonly)\r\n                            subsampleeditable.push({ label: component.label, editableuntill: [] })\r\n                        else\r\n                            subsampleeditable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                        if (component.inputtype === 'date') {\r\n                            subsampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                        }\r\n                        subsamplelistitem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                    }\r\n                })\r\n            })\r\n        )\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    //console.log(\"componentRow main:\", component);\r\n                    if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                        if (component.hasOwnProperty('children')) {\r\n                            if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                                // let combinedField = [];\r\n                                component.children.map(componentRow => {\r\n                                    // combinedField.push(componentRow.label)\r\n                                    jdynamiccolumns.push({\r\n                                        columnname: componentRow.label,\r\n                                        displayname: componentRow.displayname\r\n                                    })\r\n                                    if (componentRow.hasOwnProperty('child')) {\r\n                                        componentRow.child.map(childData => {\r\n                                            jnumericcolumns.push({\r\n                                                \"columnname\": componentRow.label,\r\n                                                \"displayname\": componentRow.displayname,\r\n                                                \"foriegntablePK\": componentRow.label,\r\n                                                // \"ismultilingual\": true,\r\n                                                // \"conditionstring\": \" and nformcode in (140) \",\r\n                                                \"tablecolumnname\": childData.tablecolumnname,\r\n                                                \"foriegntablename\": \"dynamicmaster\"\r\n                                            })\r\n                                        })\r\n                                    }\r\n                                    if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                        deleteValidation.push({\r\n                                            \"smastertablename\": componentRow.table.item.stablename,\r\n                                            \"smasterprimarykeyname\": componentRow.table.valuemember,\r\n                                            \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                            \"stranstableforeignkeyname\": componentRow.table.valuemember,\r\n                                            //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\r\n                                            \"sjsonfieldname\": \"jsondata\",\r\n                                            \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                            //\"nformcode\":componentRow.table.item.nformcode,\r\n                                            \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                        });\r\n                                    }\r\n                                    componentRow.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                                    componentRow.unique && samplecombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n                                    samplesearchfields.push(componentRow.label)\r\n                                    sampletemplatefields.push({\r\n                                        [designProperties.LABEL]: componentRow.displayname,\r\n                                        [designProperties.VALUE]: componentRow.label,\r\n                                        [designProperties.PRIMARYKEY]: componentRow.valuemember,\r\n                                        [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\r\n                                    })\r\n                                    sampleAuditFields.push(componentRow.label);\r\n                                    sampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n                                    if (componentRow.inputtype === 'date') {\r\n                                        sampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                        sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                                    }\r\n                                    displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                                    componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                                    if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                        gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                                        sampleAuditEditable.push(componentRow.label);\r\n                                    }\r\n                                    else {\r\n                                        gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                                    }\r\n                                    if (componentRow.templatemandatory) {\r\n                                        editable.push({ label: componentRow.label, editableuntill: [] })\r\n                                    }\r\n                                    else {\r\n                                        if (componentRow.readonly)\r\n                                            editable.push({ label: componentRow.label, editableuntill: [] })\r\n                                        else\r\n                                            editable.push({ label: componentRow.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                // let fieldSet = combinedField.join(\"&\")\r\n                                // displayFields.push(fieldSet);\r\n                                // componentRow.templatemandatory && listItem.push(fieldSet)\r\n                                // gridMoreItem.push(fieldSet);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                                //console.log(\"componentRow main:\", component);\r\n                                jdynamiccolumns.push({\r\n                                    columnname: component.label,\r\n                                    displayname: component.displayname\r\n                                });\r\n                                if (component.componentcode === designComponents.COMBOBOX) {\r\n                                    deleteValidation.push({\r\n                                        \"smastertablename\": component.table.item.stablename,\r\n                                        \"smasterprimarykeyname\": component.table.valuemember,\r\n                                        \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                        \"stranstableforeignkeyname\": component.table.valuemember,\r\n                                        //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\r\n                                        \"sjsonfieldname\": \"jsondata\",\r\n                                        \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                        //\"nformcode\":component.table.item.nformcode,\r\n                                        \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                                    });\r\n                                }\r\n                                if (component.hasOwnProperty('child')) {\r\n                                    component.child.map(childData => {\r\n                                        jnumericcolumns.push({\r\n                                            \"columnname\": component.label,\r\n                                            \"displayname\": component.displayname,\r\n                                            \"foriegntablePK\": component.label,\r\n                                            // \"ismultilingual\": true,\r\n                                            // \"conditionstring\": \" and nformcode in (140) \",\r\n                                            \"tablecolumnname\": childData.tablecolumnname,\r\n                                            \"foriegntablename\": \"dynamicmaster\"\r\n                                        })\r\n                                    })\r\n                                }\r\n                                component.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                                component.unique && samplecombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                                samplesearchfields.push(component.label)\r\n                                sampletemplatefields.push({\r\n                                    [designProperties.LABEL]: component.displayname,\r\n                                    [designProperties.VALUE]: component.label,\r\n                                    [designProperties.PRIMARYKEY]: component.valuemember,\r\n                                    [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\r\n                                })\r\n                                sampleAuditFields.push(component.label);\r\n                                sampleAuditMultilingualFields.push({ [component.label]: component.displayname })\r\n                                if (component.inputtype === 'date') {\r\n                                    sampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                                    sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                                }\r\n                                displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                                // component.templatemandatory \r\n                                //&& listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                                if (component.mandatory || component.templatemandatory) {\r\n                                    gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                                    listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, mandatory: true })\r\n                                    sampleAuditEditable.push(component.label);\r\n                                } else {\r\n                                    gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                                }\r\n                                if (component.templatemandatory) {\r\n                                    editable.push({ label: component.label, editableuntill: [] })\r\n                                }\r\n                                else {\r\n                                    // editable.push({ label: component.label, editableuntill: [17] })\r\n                                    if (component.readonly)\r\n                                        editable.push({ label: component.label, editableuntill: [] })\r\n                                    else\r\n                                        editable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                                }\r\n                                return null;\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            )\r\n        )\r\n        // if(this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){        \r\n        displayFields.push({\r\n            [designProperties.LABEL]: { \"en-US\": \"Reg. Date\", \"ru-RU\": \"Reg. Date\", \"tg-TG\": \"Reg. Date\" },\r\n            [designProperties.VALUE]: 'dregdate'\r\n        });\r\n\r\n        // }\r\n        //samplesearchfields.push(...staticSearchFields);\r\n\r\n        //console.log(\"reg sub type:\", this.props.Login);\r\n        const testListFields = { ...this.props.Login.testListFields };\r\n\r\n        let obj = {\r\n            sampledisplayfields: displayFields,\r\n            samplelistitem: listItem,\r\n            samplegriditem: gridItem,\r\n            samplegridmoreitem: gridMoreItem,\r\n            subsamplelistitem,\r\n            sampledatefields,\r\n            subsampledatefields,\r\n            samplesearchfields,\r\n            subsamplesearchfields,\r\n            testdatefields,\r\n            sampledateconstraints,\r\n            subsampledateconstraints,\r\n            // sampleuniquevalidation,\r\n            //  subsamplecombinationunique,\r\n            samplecombinationunique,\r\n            testListFields,\r\n            deleteValidation\r\n            //combinedsearchfields:[...samplesearchfields,...subsamplesearchfields,...testListFields[\"testsearchfields\"] ]\r\n        }\r\n\r\n\r\n        sampleAuditFields.push(\"dregdate\", \"stransdisplaystatus\");\r\n        sampleAuditEditable.push(\"stransdisplaystatus\");\r\n        subSampleAuditFields.push(\"stransdisplaystatus\");\r\n        subSampleAuditEditable.push(\"stransdisplaystatus\");\r\n        sampleAuditMultilingualFields.push({ \"dregdate\": { \"en-US\": \"Reg. Date\", \"ru-RU\": \"Reg. Date\", \"tg-TG\": \"Reg. Date\" } },\r\n            { \"stransdisplaystatus\": { \"en-US\": \"Transaction Status\", \"ru-RU\": \"Transaction Status\", \"tg-TG\": \"Transaction Status\" } });\r\n        subSampleAuditMultilingualFields.push({ \"stransdisplaystatus\": { \"en-US\": \"Transaction Status\", \"ru-RU\": \"Transaction Status\", \"tg-TG\": \"Transaction Status\" } });\r\n\r\n        let jsondata = {\r\n\r\n            subsamplecombinationunique,\r\n            samplecombinationunique,\r\n            sampletemplatefields: [...SAMPLETEMPLATEFIELDS, ...sampletemplatefields],\r\n            subsampletemplatefields: [...SUBSAMPLETEMPLATEFIELDS, ...subsampletemplatefields],//: subsamplesearchfields,\r\n            [formCode.SAMPLEREGISTRATION]: {\r\n                ...obj,\r\n                sampleeditable: editable,\r\n                subsampleeditable,\r\n                samplecombinationunique,\r\n                subsamplecombinationunique\r\n            },\r\n            [formCode.RESULTENTRY]: { ...obj, },\r\n            [formCode.APPROVAL]: { ...obj, },\r\n            [formCode.JOBALLOCATION]: {\r\n                ...obj,\r\n                samplegriditem: [\r\n                    ...obj.samplegriditem,\r\n                    {\r\n                        \"1\": {\r\n                            \"en-US\": \"Section\",\r\n                            \"ru-RU\": \"Раздел\",\r\n                            \"tg-TG\": \"Ҷудокунӣ\"\r\n                        },\r\n                        \"2\": \"Section\"\r\n                    },\r\n                    //...obj.samplegriditem,   \r\n                ],\r\n                samplelistitem: [\r\n                    {\r\n                        \"1\": {\r\n                            \"en-US\": \"Sample Category\",\r\n                            \"ru-RU\": \"Sample Category\",\r\n                            \"tg-TG\": \"Sample Category\"\r\n                        },\r\n                        \"2\": \"Sample Category\"\r\n                    },\r\n                    {\r\n                        \"1\": {\r\n                            \"en-US\": \"Section\",\r\n                            \"ru-RU\": \"Раздел\",\r\n                            \"tg-TG\": \"Ҷудокунӣ\"\r\n                        },\r\n                        \"2\": \"Section\"\r\n                    },\r\n                ]\r\n                //...obj, \r\n\r\n            },\r\n            //[formCode.JOBALLOCATION]: {...obj,},\r\n            [formCode.MYJOBS]: { ...obj, },\r\n            [formCode.WORKLIST]: { ...obj, },\r\n            [formCode.BATCHCREATION]: {\r\n\r\n                samplegriditem: [\r\n                    {\r\n                        \"1\": {\r\n                            \"en-US\": \"Order No.\",\r\n                            \"ru-RU\": \"№ заказа.\",\r\n                            \"tg-TG\": \"Фармоиш №\"\r\n                        },\r\n                        \"2\": \"sarno\"\r\n                    },\r\n                    ...obj.samplegriditem,\r\n\r\n                ],\r\n\r\n                subsamplelistitem: [{\r\n\r\n                    \"1\": {\r\n                        \"en-US\": \"Sub Order No.\",\r\n                        \"ru-RU\": \"Под заказ №\",\r\n                        \"tg-TG\": \"Фармоиш №\"\r\n                    },\r\n                    \"2\": \"ssamplearno\"\r\n                },\r\n                ...obj.subsamplelistitem,\r\n                ],\r\n                ...obj,\r\n            },\r\n            [formCode.TESTWISEMYJOBS]: { ...obj, },\r\n            [formCode.RELEASE]: {\r\n                ...obj,\r\n                // sampledisplayfields: [\r\n                //     {  \"1\": {\r\n                //         \"en-US\": \"Order No.\",\r\n                //         \"ru-RU\": \"Ар №\",\r\n                //         \"tg-TG\": \"Ар №\"\r\n                //         },\r\n                //     \"2\": \"sarno\"\r\n                // },\r\n                // ...obj.sampledisplayfields\r\n                // ],\r\n                // samplegriditem: [\r\n                //     {\r\n                //         \"1\": {\r\n                //             \"en-US\": \"Order No.\",\r\n                //             \"ru-RU\": \"№ заказа.\",\r\n                //             \"tg-TG\": \"Фармоиш №\"\r\n                //         },\r\n                //         \"2\": \"sarno\"\r\n                //     },\r\n                //     ...obj.samplegriditem\r\n                // ],\r\n                subsamplelistitem: [{\r\n                    \"1\": {\r\n                        \"en-US\": \"Sub Order No.\",\r\n                        \"ru-RU\": \"Под заказ №\",\r\n                        \"tg-TG\": \"№ Фармони зер\"\r\n                    },\r\n                    \"2\": \"ssamplearno\"\r\n                },\r\n                ...obj.subsamplelistitem]\r\n\r\n                // },\r\n            },\r\n            sampleAuditEditable,\r\n            sampleAuditFields,\r\n            sampleAuditMultilingualFields,\r\n            subSampleAuditEditable,\r\n            subSampleAuditFields,\r\n            subSampleAuditMultilingualFields,\r\n            deleteValidation,\r\n\r\n        }\r\n        //console.log(\"jsondata:\", jsondata);\r\n        return jsondata;\r\n    }\r\n\r\n    onChangeToggle = (event, dataItem, field, dataIndex, formCode, operation) => {\r\n\r\n        let designData = this.props.Login.designData;\r\n        let dataResult = this.props.Login.dataResult;\r\n        if (operation === 'configureaudit') {\r\n            designData = this.props.Login.auditFieldDesignData;\r\n            dataResult = this.props.Login.auditFieldDataResult;\r\n        }\r\n\r\n        let tableName = \"registration\";\r\n        if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n            tableName = \"dynamicmaster\";\r\n        }\r\n        if (formCode === undefined) {\r\n            dataResult[dataIndex][field] = event.target.checked;\r\n            if (event.target.checked) {\r\n                designData[field].splice(dataIndex, 0, dataItem.realData)\r\n\r\n            } else {\r\n                designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n            }\r\n        }\r\n        else {\r\n            //dataResult[formCode][dataIndex][field] = event.target.checked;\r\n            if (event.target.checked) {\r\n                if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\r\n                }\r\n                else {\r\n\r\n                    if (field === 'sampledisplayfields') {\r\n                        dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                        designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label);\r\n                        designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\r\n                    }\r\n                    else if (field === 'sampleauditfields') {\r\n                        dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\r\n                        if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                            designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                        }\r\n                    }\r\n                    else if (field === 'sampleauditeditfields') {\r\n                        dataResult[formCode][tableName][dataIndex][\"sampleauditfields\"] = event.target.checked;\r\n                        dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\r\n                        if (designData[formCode][tableName]['sampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n\r\n                            designData[formCode][tableName][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                                designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                                designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (field === 'subsampleauditfields') {\r\n                        dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\r\n                        if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                            designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                        }\r\n                    }\r\n                    else if (field === 'subsampleauditeditfields') {\r\n                        dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditfields\"] = event.target.checked;\r\n                        dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\r\n                        if (designData[formCode]['registrationsample']['subsampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n\r\n                            designData[formCode]['registrationsample'][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                                designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                                designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                        designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n\r\n                if (field === 'sampledisplayfields') {\r\n                    dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                    designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n\r\n                    const index = designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index !== -1) {\r\n                        designData[formCode]['samplesearchfields'].splice(index, 1)\r\n                    }\r\n                }\r\n                else if (field === 'sampleauditfields') {\r\n                    dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\r\n                    const index = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index !== -1) {\r\n                        designData[formCode][tableName][field].splice(index, 1);\r\n                    }\r\n\r\n                    const index1 = designData[formCode][tableName]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\r\n                    if (index1 !== -1) {\r\n                        designData[formCode][tableName]['multilingualfields'].splice(index1, 1);\r\n                    }\r\n\r\n                    const index3 = designData[formCode][tableName][\"sampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index3 !== -1) {\r\n                        designData[formCode][tableName][\"sampleauditeditfields\"].splice(index3, 1)\r\n                    }\r\n                    dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\r\n                }\r\n                else if (field === 'sampleauditeditfields') {\r\n                    dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\r\n                    const index4 = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index4 !== -1) {\r\n                        designData[formCode][tableName][field].splice(index4, 1);\r\n                    }\r\n                }\r\n                else if (field === 'subsampleauditfields') {\r\n                    dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\r\n                    const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index1 !== -1) {\r\n                        designData[formCode][\"registrationsample\"][field].splice(index1, 1)\r\n                    }\r\n\r\n                    const index2 = designData[formCode][\"registrationsample\"]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\r\n                    if (index2 !== -1) {\r\n                        designData[formCode][\"registrationsample\"]['multilingualfields'].splice(index2, 1);\r\n                    }\r\n                    const index3 = designData[formCode]['registrationsample'][\"subsampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index3 !== -1) {\r\n                        designData[formCode][\"registrationsample\"][\"subsampleauditeditfields\"].splice(index3, 1)\r\n                    }\r\n                    dataResult[formCode][\"registrationsample\"][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\r\n                }\r\n                else if (field === 'subsampleauditeditfields') {\r\n                    dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\r\n                    const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index1 !== -1) {\r\n                        designData[formCode][\"registrationsample\"][field].splice(index1, 1);\r\n                    }\r\n                }\r\n                else {\r\n                    dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                    designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.realData[designProperties.VALUE]), 1)\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        let data = { designData, dataResult };\r\n        if (operation === 'configureaudit') {\r\n            data = {\r\n                auditFieldDesignData: designData,\r\n                auditFieldDataResult: dataResult\r\n            };\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { ...data }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        // console.log(\"save:\", this.props.Login.masterData.realRegSubTypeValue);\r\n        //console.log(\"data:\", this.props.Login.editFieldDesignData)\r\n        let inputData = [];\r\n\r\n        let operation = this.props.Login.operation;\r\n        const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n\r\n        if (operation === 'configure' || operation === 'configuresubsample') {\r\n            inputData = {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    jsondataobj: this.props.Login.designData\r\n                },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n            operation = 'configure'\r\n        }\r\n        else if (operation === 'configureedit' || operation === 'configuresubsampleedit') {\r\n\r\n            let designData = this.props.Login.editFieldDesignData;\r\n            let formCodeArray = Object.keys(this.state.selectedRecord);\r\n\r\n            formCodeArray.forEach(formCode => {\r\n                const data = this.state.selectedRecord[formCode];\r\n\r\n                let editableData = designData[formCode]['sampleeditable'];;\r\n                if (operation === 'configuresubsampleedit') {\r\n                    editableData = designData[formCode]['subsampleeditable'];;\r\n                }\r\n\r\n                Object.keys(data).map(label => {\r\n                    const editableuntil = [];\r\n                    data[label].map(statusItem =>\r\n                        editableuntil.push(statusItem.value)\r\n                    )\r\n                    const index = editableData.findIndex(item => item.label === label);\r\n                    if (index === -1) {\r\n                        editableData.push({ \"label\": label, \"editableuntill\": editableuntil });\r\n                    }\r\n                    else {\r\n                        editableData[index] = { \"label\": label, \"editableuntill\": editableuntil };\r\n                    }\r\n                    //designData[formCode]['sampleeditable'].push({\"label\":label, \"editableuntill\":editableuntil});\r\n                })\r\n\r\n            })\r\n            inputData = {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    jsondataobj: designData\r\n                },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n\r\n            operation = 'configure';\r\n        }\r\n        else if (operation === 'configureunique') {\r\n            let designData = this.props.Login.designData;\r\n            //  let formCodeArray = Object.keys(this.state.selectedRecord);\r\n            const dataList = []\r\n            const dataListsubsample = []\r\n            this.props.Login.dataList.map(x => {\r\n                if (Object.keys(x).length !== 0) {\r\n                    dataList.push(x);\r\n                }\r\n            })\r\n            if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n                designData['mastercombinationunique'] = dataList\r\n            } else {\r\n                designData['samplecombinationunique'] = dataList\r\n                designData[formCode.SAMPLEREGISTRATION]['samplecombinationunique'] = dataList\r\n                this.props.Login.dataListSubSample.map(x => {\r\n                    if (Object.keys(x).length !== 0) {\r\n                        dataListsubsample.push(x);\r\n                    }\r\n                })\r\n                designData['subsamplecombinationunique'] = dataListsubsample\r\n                designData[formCode.SAMPLEREGISTRATION]['subsamplecombinationunique'] = dataListsubsample\r\n            }\r\n\r\n\r\n            inputData = {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    jsondataobj: designData\r\n                },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n\r\n            operation = 'configure';\r\n        }\r\n        else if (operation === 'configureaudit') {\r\n            //console.log(\"auditFieldDesignData:\", this.props.Login);\r\n\r\n            inputData = {\r\n                //dynamicaudit: {\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                auditdata: this.props.Login.auditData,\r\n                //nregtypecode:this.props.Login.masterData.realRegTypeValue.value, \r\n                //nregsubtypecode:this.props.Login.masterData.realRegSubTypeValue.value, \r\n                //nformcode:43, stablename:'registration',\r\n\r\n                // },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n\r\n            //operation = 'configure';\r\n        }\r\n        else {\r\n            // console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\r\n            let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey } = this.props.Login.masterData.realSampleValue.value === SampleType.Masters ?\r\n                this.getGridJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)\r\n                : {};\r\n\r\n            let auditData = {};\r\n\r\n            let dataObject = {};\r\n            if (this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n                dataObject = this.getJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata);\r\n                // console.log(\"json:\",dataObject);\r\n\r\n                auditData = {\r\n                    \"registration\": {\r\n                        editmandatoryfields: dataObject[\"sampleAuditEditable\"],\r\n                        auditcapturefields: dataObject[\"sampleAuditFields\"],\r\n                        multilingualfields: dataObject[\"sampleAuditMultilingualFields\"]\r\n                    },\r\n                };\r\n\r\n                if (needsubsample) {\r\n                    auditData = {\r\n                        ...auditData,\r\n                        registrationsample: {\r\n                            editmandatoryfields: dataObject[\"subSampleAuditEditable\"],\r\n                            auditcapturefields: dataObject[\"subSampleAuditFields\"],\r\n                            multilingualfields: dataObject[\"subSampleAuditMultilingualFields\"]\r\n                        },\r\n                    }\r\n                    delete dataObject[\"subSampleAuditEditable\"];\r\n                    delete dataObject[\"subSampleAuditFields\"];\r\n                    delete dataObject[\"subSampleAuditMultilingualFields\"];\r\n                }\r\n                delete dataObject[\"sampleAuditEditable\"];\r\n                delete dataObject[\"sampleAuditFields\"];\r\n                delete dataObject[\"sampleAuditMultilingualFields\"];\r\n            }\r\n            else {\r\n                // if(this.props.Login.masterData.realSampleValue.value === SampleType.Masters){\r\n                auditData = {\r\n                    \"dynamicmaster\": {\r\n                        editmandatoryfields: jsondata[\"sampleAuditEditable\"],\r\n                        auditcapturefields: jsondata[\"sampleAuditFields\"],\r\n                        multilingualfields: jsondata[\"sampleAuditMultilingualFields\"]\r\n                    },\r\n                };\r\n            }\r\n\r\n            inputData = {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"ncontrolcode\": this.props.Login.ncontrolCode,\r\n                \"nreactregtemplatecode\": this.state.selectedRecord.nreactregtemplatecode.value,\r\n                \"nsampletypecode\": this.props.Login.masterData.realSampleValue.value,\r\n                \"nregtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n                \"nregsubtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n                \"sregsubtypename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"\",\r\n                \"nformcode\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\r\n                \"nsubsampletemplatecode\": this.state.selectedRecord.nsubsampletemplatecode ? this.state.selectedRecord.nsubsampletemplatecode.value : -1,\r\n                \"jsondataobj\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? jsondata\r\n                    : dataObject,\r\n                auditdata: auditData,\r\n                needsubsample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false\r\n            }\r\n\r\n            inputData[\"designtemplatemapping\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            if (this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value === -2) {\r\n                let qf_jsonData = { sdisplayname: {} };\r\n                let qbt_jsonData = { tablename: {} };\r\n\r\n                this.props.Login.languageList.map(lang => {\r\n                    qf_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord.sformname;\r\n                    qbt_jsonData['tablename'][lang.value] = this.state.selectedRecord.sformname\r\n                })\r\n\r\n                let qm_jsonData = { sdisplayname: {} };\r\n\r\n                let nmodulecode = 0;\r\n                let smoduledisplayname = \"\";\r\n\r\n                if (this.state.selectedRecord[\"nnewmodule\"].value === transactionStatus.YES) {\r\n                    smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"];\r\n                    this.props.Login.languageList.map(lang => {\r\n                        qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"];\r\n                    })\r\n                }\r\n                else {\r\n                    nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\r\n                }\r\n                inputData = {\r\n                    ...inputData,\r\n                    sformname: this.state.selectedRecord.sformname,\r\n                    sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\r\n                    nmodulecode,\r\n                    smoduledisplayname,\r\n                    qm_jsonData,\r\n                    qf_jsonData,\r\n                    qbt_jsonData,\r\n                    sprimarykeyname: templatePrimaryKey,\r\n                    jdynamiccolumns,\r\n                    jnumericcolumns\r\n                }\r\n            } else {\r\n                inputData = {\r\n                    ...inputData,\r\n                    sformname: this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label,\r\n                    sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\r\n                    ssubregtemplatename: this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.label,\r\n                    sprimarykeyname: templatePrimaryKey,\r\n                    jdynamiccolumns,\r\n                    jnumericcolumns\r\n\r\n                }\r\n            }\r\n            // this.designtemplatemappingFieldList.map(item => {\r\n            //     return inputData[\"designtemplatemapping\"][item] = this.state.selectedRecord[item]\r\n            // });\r\n        }\r\n        //console.log(\"input:\", inputData);\r\n        let postParam = undefined;\r\n        const inputParam = {\r\n            classUrl: \"designtemplatemapping\",\r\n            methodUrl: \"DesignTemplateMapping\",\r\n            inputData: inputData,\r\n            operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n        }\r\n        if (operation === 'configureaudit') {\r\n            inputParam[\"methodUrl\"] = \"DynamicAudit\";\r\n            inputParam[\"operation\"] = \"configure\";\r\n            //operation = 'configure';\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (\r\n            showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential, editFieldConfigService,\r\n    updateStore, getDesignTemplateMappingDetail, getMappedFieldProps,\r\n    getDesignTemplateMappingComboService, filterColumnData, auditFieldConfigService,\r\n    reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit, combinationUniqueConfigService\r\n})(injectIntl(DesignTemplateMapping));\r\n\r\n"]},"metadata":{},"sourceType":"module"}