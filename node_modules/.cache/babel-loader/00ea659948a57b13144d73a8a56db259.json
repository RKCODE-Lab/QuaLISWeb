{"ast":null,"code":"import _defineProperty from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{getComboLabelValue,constructOptionList}from'../components/CommonScript';import{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';export function getPackageService(packageParam){return function(dispatch){var packageService=rsapi.post(\"testpackage/getTestPackage\",{userinfo:packageParam.userInfo});var urlArray=[];var selectedId=null;if(packageParam.operation===\"create\"){urlArray=[packageService];}else{var _rsapi$post;var url=packageParam.inputParam.classUrl+\"/getActive\"+packageParam.inputParam.methodUrl+\"ById\";//\"method/getActiveMethodById\"      \nvar packageById=rsapi.post(url,(_rsapi$post={},_defineProperty(_rsapi$post,packageParam.primaryKeyField,packageParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",packageParam.userInfo),_rsapi$post));urlArray=[packageService,packageById];selectedId=packageParam.primaryKeyValue;}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord={};var packageMap=constructOptionList(response[0].data||[],\"ntestpackagecode\",\"stestpackagename\",undefined,undefined,true);var packageList=packageMap.get(\"OptionList\");if(packageParam.operation===\"update\"){selectedRecord=response[1].data;}dispatch({type:DEFAULT_RETURN,payload:{packageList:packageList,//:response[0].data || [],                               \noperation:packageParam.operation,screenName:packageParam.screenName,selectedRecord:selectedRecord,openModal:true,ncontrolCode:packageParam.ncontrolCode,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/PackageAction.js"],"names":["rsapi","DEFAULT_RETURN","getComboLabelValue","constructOptionList","toast","Axios","initRequest","getPackageService","packageParam","dispatch","packageService","post","userinfo","userInfo","urlArray","selectedId","operation","url","inputParam","classUrl","methodUrl","packageById","primaryKeyField","primaryKeyValue","all","then","response","selectedRecord","packageMap","data","undefined","packageList","get","type","payload","screenName","openModal","ncontrolCode","loading","catch","error","status","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {getComboLabelValue, constructOptionList} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\n\r\n\r\nexport function getPackageService (packageParam) {            \r\n    return function (dispatch) {   \r\n     const packageService = rsapi.post(\"testpackage/getTestPackage\", \r\n                                     {userinfo:packageParam.userInfo});\r\n    let urlArray = [];\r\n    let selectedId = null;\r\n    if (packageParam.operation === \"create\"){\r\n        urlArray = [packageService];\r\n    }\r\n    else{           \r\n        const url = packageParam.inputParam.classUrl+ \"/getActive\" + packageParam.inputParam.methodUrl + \"ById\";   //\"method/getActiveMethodById\"      \r\n        const packageById =  rsapi.post(url, { [packageParam.primaryKeyField] :packageParam.primaryKeyValue, \"userinfo\": packageParam.userInfo} );\r\n        urlArray = [packageService, packageById];\r\n        selectedId = packageParam.primaryKeyValue;\r\n    }\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response=>{                  \r\n            \r\n            let selectedRecord =  {};\r\n\r\n            const packageMap = constructOptionList(response[0].data || [], \"ntestpackagecode\",\r\n                                \"stestpackagename\", undefined, undefined, true);\r\n            const packageList = packageMap.get(\"OptionList\");\r\n            \r\n            if (packageParam.operation === \"update\"){\r\n                selectedRecord = response[1].data;\r\n               \r\n            }\r\n           \r\n            dispatch({type: DEFAULT_RETURN, payload:{packageList,//:response[0].data || [],                               \r\n                        operation:packageParam.operation, screenName:packageParam.screenName, selectedRecord, \r\n                        openModal : true,\r\n                        ncontrolCode:packageParam.ncontrolCode,\r\n                        loading:false,selectedId\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}