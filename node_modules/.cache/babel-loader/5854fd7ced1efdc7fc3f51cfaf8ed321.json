{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { filterRecordBasedOnTwoArrays, sortData, rearrangeDateFormat, convertDateTimetoString, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, updatedObjectWithNewElement, replaceUpdatedObject, parentChildComboLoad } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { intl } from '../components/App';\nimport { initRequest } from './LoginAction';\nimport { RegistrationSubType, RegistrationType, transactionStatus } from '../components/Enumeration';\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction';\nimport { getTestChildTabDetail } from './index.js';\nimport { constructOptionList } from '../components/CommonScript';\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getRegTypeBySampleType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getRegTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    rsapi.post(\"/registration/getRegSubTypeByRegType\", Map).then(response => {\n      // const RegistrationSubType = response.data[\"RegistrationSubType\"];\n      //  console.log(response.data);\n      // RegistrationSubType.length > 0 ?\n      //     selectedRecord[\"nregsubtypecode\"] = {\n      //         \"value\": RegistrationSubType[0].nregsubtypecode,\n      //         \"label\": RegistrationSubType[0].sregsubtypename\n      //     } : selectedRecord[\"nregsubtypecode\"] = \"\";\n      // const [labelname] = event.item;\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getRegSubTypeByRegType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getComponentTestBySpec(Map, selectedRecord, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getComponentTestBySpec\", Map).then(response => {\n      const {\n        Component,\n        Test\n      } = response.data;\n      let slno = Component.length > 0 ? Component[0].slno : -1;\n      let selectedComponent = Component.length > 0 ? Component[0] : undefined;\n      let SelectedTest = [];\n      let SelectedSource = [];\n\n      if (Object.keys(Test).length > 0) {\n        SelectedTest = Test[slno];\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Component,\n          Test,\n          SelectedTest,\n          selectedComponent,\n          loading: false,\n          SelectedSource,\n          selectedRecord,\n          popUptestDataState: {\n            skip: 0,\n            take: 10\n          },\n          Source: []\n        }\n      });\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTestfromDB(objComponent, LoginProps, nflag) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let component = { ...objComponent\n    };\n    component[\"ncomponentcode\"] = objComponent[\"ncomponentcode\"] ? objComponent[\"ncomponentcode\"].value : -1;\n    component[\"nstoragelocationcode\"] = objComponent[\"nstoragelocationcode\"] ? objComponent[\"nstoragelocationcode\"].value : -1;\n    component[\"nstorageconditioncode\"] = objComponent[\"nstorageconditioncode\"] ? objComponent[\"nstorageconditioncode\"].value : -1;\n    component[\"slno\"] = LoginProps.Component ? Object.keys(LoginProps.Component).length + 1 : 0;\n    component[\"scomponentname\"] = objComponent[\"ncomponentcode\"].label;\n    component[\"sstoragelocationname\"] = objComponent[\"nstoragelocationcode\"] && objComponent[\"nstoragelocationcode\"].label ? objComponent[\"nstoragelocationcode\"].label : \"\";\n    component[\"sstorageconditionname\"] = objComponent[\"nstorageconditioncode\"] && objComponent[\"nstorageconditioncode\"].label ? objComponent[\"nstorageconditioncode\"].label : \"\";\n    component[\"ntzdmanufdate\"] = objComponent[\"ntzdmanufdate\"] ? objComponent[\"ntzdmanufdate\"].value : -1;\n    component[\"ntzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].value : -1;\n    component[\"stzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].label : \"\";\n    component[\"nplasmafilecode\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].value : -1;\n    component[\"splasmafilenumber\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].label : \"\";\n    const dreceiveddate = objComponent[\"dreceiveddate\"];\n    component[\"dreceiveddate\"] = dreceiveddate; //formatInputDate(objComponent[\"dreceiveddate\"], false);\n\n    component[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, LoginProps.userInfo); //formatInputDateWithoutT(objComponent[\"dreceiveddate\"], false);//formatDate(objComponent[\"sreceiveddate\"]);\n    // rsapi.post(\"/registration/getTestfromDB\", { \"Component\": component })\n\n    rsapi.post(\"/registration/getTestfromDB\", {\n      nspecsampletypecode: component.nspecsampletypecode,\n      slno: component.slno\n    }).then(response => {\n      let TestData = response.data;\n      let slno = component.slno;\n      let SelectedTest = [];\n      let loadComponent = true;\n      let selectComponent = {};\n      let showSaveContinue = true;\n      let SelectedSource = []; // let openChildModal = true;\n\n      let selectedComponent = undefined;\n      let parentPopUpSize = \"lg\"; // selectComponent = objComponent\n\n      if (nflag === 1) {\n        loadComponent = true;\n        objComponent[\"smanuflotno\"] = \"\";\n        objComponent[\"dreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime); //new Date(LoginProps.CurrentTime);\n\n        objComponent[\"sreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime); //new Date(LoginProps.CurrentTime);\n\n        selectComponent = objComponent;\n      } else {\n        loadComponent = false;\n        parentPopUpSize = \"xl\"; // openChildModal = false;\n\n        showSaveContinue = false;\n        selectComponent = undefined;\n      }\n\n      let Test = LoginProps.Test || [];\n      let Component = LoginProps.Component || [];\n      Component.unshift(component);\n      selectedComponent = component;\n      Test[slno] = response.data;\n      SelectedTest = TestData;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Component,\n          Test,\n          SelectedTest,\n          selectComponent,\n          selectedComponent,\n          loadComponent,\n          showSaveContinue,\n          parentPopUpSize,\n          loading: false,\n          SelectedSource\n        }\n      }); // console.log(response.data);\n    }).catch(error => {\n      //   console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function EditComponent(Map, component, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [ComponentTestBySpec, timezone];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const TimeZoneField = response[1].data;\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\");\n      component[\"ncomponentcode\"] = {\n        label: component.scomponentname,\n        value: component.ncomponentcode\n      };\n      component[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, component[\"sreceiveddate\"]);\n      component[\"scomments\"] = component[\"scomments\"];\n      let ntzdreceivedate = component.ntzdreceivedate;\n\n      if (component.ntzdreceivedate !== null && typeof component.ntzdreceivedate === \"object\") {\n        ntzdreceivedate = component.ntzdreceivedate.value;\n      }\n\n      component[\"ntzdreceivedate\"] = component.ntzdreceivedate ? {\n        \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].stimezoneid,\n        \"value\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].ntimezonecode\n      } : \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          childoperation: \"update\",\n          lstComponent,\n          ChildscreenName: \"Component\",\n          openChildModal: false,\n          selectComponent: component,\n          parentPopUpSize: \"lg\",\n          timeZoneList,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function ReloadData(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\"; //masterData['searchedTests'] = undefined\n\n        masterData['searchedTest'] = undefined;\n      } // let selectedFilter = inputData.selectedFilter;\n      // selectedFilter[\"fromdate\"] = \"\";\n      // selectedFilter[\"todate\"] = \"\";\n\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          showSample: undefined //selectedFilter\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTreeByProduct(Map, selectedRecord, comboData, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getTreeByProduct\", Map).then(response => {\n      let {\n        Specification,\n        AgaramTree,\n        ActiveKey,\n        FocusKey,\n        OpenNodes,\n        Manufacturer\n      } = [];\n      const selectedSpec = {};\n\n      if (response.data[\"rtn\"] === true) {\n        Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n        AgaramTree = response.data[\"AgaramTree\"];\n        ActiveKey = response.data[\"ActiveKey\"];\n        FocusKey = response.data[\"FocusKey\"];\n        OpenNodes = response.data[\"OpenNodes\"]; //Manufacturer = response.data[\"Manufacturer\"];\n\n        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          \"value\": Specification[0].value,\n          \"label\": Specification[0].label\n        } : \"\";\n        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n      }\n\n      selectedRecord = { ...selectedRecord,\n        ...selectedSpec\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Specification,\n          selectedRecord,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes,\n          Test: [],\n          SelectedTest: [],\n          loading: false,\n          comboData,\n          ...inputParam,\n          selectedSpec,\n          Component: [],\n          selectComponent: {},\n          selectedComponent: {}\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport const getNewRegSpecification = (inputParam, masterData) => {\n  return dispatch => {\n    if (inputParam.selectedNode !== null) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam,\n        ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode\n      }).then(response => {\n        sortData(response.data);\n        let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\n        let selectedComponent = undefined;\n        inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          value: Specification[0].value,\n          label: Specification[0].label,\n          item: Specification[0].item\n        } : \"\";\n        inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ActiveKey: inputParam.activeKey,\n            FocusKey: inputParam.focusKey,\n            primaryKey: inputParam.primaryKey,\n            Specification: Specification,\n            selectedNode: inputParam.selectedNode,\n            selectedRecord: inputParam.selectedRecord,\n            Test: [],\n            selectedComponent,\n            SelectedTest: [],\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    }\n  };\n};\nexport function AddComponents(Map) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [ComponentTestBySpec, timezone];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\");\n      let dreceiveddate = null;\n      if (lstComponent[0].item.sreceiveddate) dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate); //new Date(lstComponent[0].item.sreceiveddate);//|| [];\n\n      let selectComponent = {\n        sreceiveddate: dreceiveddate,\n        dreceiveddate,\n        ntzdreceivedate: {\n          \"label\": Map[\"userinfo\"].stimezoneid,\n          \"value\": Map[\"userinfo\"].ntimezonecode\n        },\n        stzdreceivedate: Map[\"userinfo\"].stimezoneid,\n        scomments: \"\",\n        nallottedspeccode: lstComponent[0].item.nallottedspeccode\n      };\n      let CurrentTime = dreceiveddate;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          lstComponent,\n          dreceiveddate,\n          ChildscreenName: \"Component\",\n          showSaveContinue: true,\n          openChildModal: false,\n          childoperation: \"create\",\n          selectComponent,\n          parentPopUpSize: \"lg\",\n          CurrentTime,\n          timeZoneList,\n          loading: false,\n          openPortal: true,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTest(objComponent, LoginProps, nneedsubsample, specBasedComponent) {\n  return function (dispatch) {\n    if (Object.keys(objComponent).length > 0) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/registration/getTestfromDB\", {\n        nspecsampletypecode: objComponent.nspecsampletypecode,\n        slno: objComponent.slno,\n        nneedsubsample: nneedsubsample,\n        nallottedspeccode: objComponent.nallottedspeccode,\n        specBasedComponent: specBasedComponent\n      }).then(response => {\n        let TestData = response.data;\n        let Test = LoginProps.Test || [];\n        let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\n        const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestgrouptestcode\"); // const lstComponentMap = constructOptionList(TestCombined|| [], \"ntestgrouptestcode\",\n        //\"stestsynonym\", undefined, undefined, true);\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            TestCombined,\n            loadTest: true,\n            openChildModal: false,\n            ChildscreenName: \"Test\",\n            childoperation: \"create\",\n            parentPopUpSize: \"lg\",\n            loading: false\n          }\n        });\n      }).catch(error => {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTCOMPONENTTOADDTEST\"\n      }));\n    }\n  };\n}\nexport function addsubSample(masterData, columnList, selectComponent, userinfo, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map) {\n  return function (dispatch) {\n    dispatch(initRequest(true)); // let urlArray = []\n    // const Unit = rsapi.post(\"/unit/getUnit\",\n    //     { userinfo })\n    // let Componnet = {}\n    // if (specBasedComponent === 4) {\n    //     Componnet = rsapi.post(\"/component/getComponent\",\n    //         { userinfo })\n    // } else {\n    //     Componnet = rsapi.post(\"/registration/getComponentBySpec\",\n    //         Map);\n    // }\n    // urlArray = [Unit, Componnet\n    // ]\n    // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n    //     parentcolumnlist: columnList,\n    //     childcolumnlist: childColumnList,\n    //     userinfo\n    // })\n    // Axios.all(urlArray)\n\n    rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList,\n      childcolumnlist: childColumnList,\n      userinfo\n    }).then(response => {\n      const newcomboData = parentChildComboLoad(columnList, response.data, selectComponent, childColumnList, SubSamplewithoutCombocomponent); // const lstUnitMap = constructOptionList(response[0].data || [], \"nunitcode\",\n      //             \"sunitname\", undefined, undefined, true);\n      //         let comp = []\n      //         if (specBasedComponent === 4) {\n      //             comp = response[1].data\n      //         } else {\n      //             comp = response[1].data.lstComponent\n      //         }\n      //         const lstComponentMap = constructOptionList(comp || [], \"ncomponentcode\",\n      //             \"scomponentname\", undefined, undefined, true);\n      //         const lstUnit = lstUnitMap.get(\"OptionList\");\n      //         const lstComponent = lstComponentMap.get(\"OptionList\");\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ChildscreenName: \"SubSample\",\n          showSaveContinue: true,\n          openChildModal: false,\n          childoperation: \"create\",\n          parentPopUpSize: \"lg\",\n          loading: false,\n          lstComponent: [],\n          openPortal: true,\n          openModal: false,\n          //Unit: lstUnit,\n          operation: \"create\",\n          loadSubSample: true\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function editSubSample(Map, component, userInfo, specBasedComponent) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const Unit = rsapi.post(\"/unit/getUnit\", {\n      userinfo: userInfo\n    });\n    let Componnet = {};\n\n    if (specBasedComponent === 4) {\n      Componnet = rsapi.post(\"/component/getComponent\", {\n        userinfo: userInfo\n      });\n    } else {\n      Componnet = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    }\n\n    urlArray = [Unit, Componnet];\n    Axios.all(urlArray).then(response => {\n      const lstUnitMap = constructOptionList(response[0].data || [], \"nunitcode\", \"sunitname\", undefined, undefined, true);\n      let comp = [];\n\n      if (specBasedComponent === 4) {\n        comp = response[1].data;\n      } else {\n        comp = response[1].data.lstComponent;\n      }\n\n      const lstComponentMap = constructOptionList(comp || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const lstUnit = lstUnitMap.get(\"OptionList\");\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      component[\"nunitcode\"] = {\n        label: component.sunitname,\n        value: component.nunitcode\n      };\n      component[\"ssubsamplename\"] = component[\"ssubsamplename\"];\n      component[\"ssampleqty\"] = component[\"ssampleqty\"];\n      component[\"scomments\"] = component[\"scomments\"];\n      component[\"ncomponentcode\"] = {\n        label: component.scomponentname,\n        value: component.ncomponentcode\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadSubSample: true,\n          childoperation: \"update\",\n          ChildscreenName: \"SubSample\",\n          Unit: lstUnit,\n          openChildModal: false,\n          selectComponent: component,\n          parentPopUpSize: \"lg\",\n          loading: false,\n          lstComponent\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function insertRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/createRegistration\", inputParam.inputData).then(response => {\n      let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"RegistrationGetSample\"], masterData.RegistrationGetSample);\n      let selectedSample = response.data[\"selectedSample\"];\n      let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n      let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n      let selectedSubSample = RegistrationGetSubSample;\n      RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n      let selectedTest = response.data[\"selectedTest\"];\n      ;\n\n      if (inputParam.nneedsubsample === 3) {\n        RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n        selectedSubSample = response.data[\"selectedSubSample\"];\n      }\n\n      if (inputParam.multipleselectionFlag) {\n        selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\n        updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\n        updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\n        RegistrationGetSubSample = masterData.RegistrationGetSubSample;\n        RegistrationGetTest = masterData.RegistrationGetTest;\n      }\n\n      masterData = { ...masterData,\n        ...response.data,\n        selectedSample,\n        selectedSubSample,\n        selectedTest,\n        RegistrationGetSubSample,\n        RegistrationGetTest,\n        RegistrationGetSample\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        openModal: false,\n        loadEsign: false,\n        showConfirmAlert: false,\n        selectedRecord: undefined,\n        loading: false,\n        loadPreregister: false,\n        showSample: undefined,\n        openPortal: false,\n        selectedSpec: {},\n        selectComponent: {},\n        SelectedTest: {},\n        selectedComponent: {},\n        Component: [],\n        selectedRecord: {},\n        SelectedTest: [],\n        Test: [],\n        selectedComponent: {}\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          showConfirmAlert: false\n        }\n      });\n    });\n  };\n}\nexport function getRegistrationSample(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      let respObject = {};\n\n      if (inputData.selectedFilter) {\n        respObject = {\n          selectedFilter: { ...inputData.selectedFilter\n          }\n        };\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          showSample: undefined,\n          ...respObject,\n          activeSampleTab: inputData.inputData.activeSampleTab\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedsubsample: inputData.nneedsubsample,\n      checkBoxOperation: inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    const subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"registration/getRegistrationSubSample\", inputParamData).then(response => {\n        sortData(response.data);\n        let masterData = {};\n        let skipInfo = {};\n\n        if (subSample === 3) {\n          let oldSelectedSubSample = inputData.masterData.selectedSubSample;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample,\n            selectedPreregno: inputData.npreregno,\n            selectedSubSample: inputData.masterData.RegistrationGetSubSample.length > 0 ? [inputData.masterData.RegistrationGetSubSample[0]] : []\n          };\n\n          if (inputData.checkBoxOperation === 1) {\n            const wholeSubSampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((subsample, index) => {\n              if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n            });\n\n            if (oldSelectedSubSample.length > 0) {\n              masterData = { ...masterData,\n                selectedSubSample: oldSelectedSubSample\n              };\n            }\n          }\n\n          let {\n            testskip,\n            testtake,\n            subsampleskip,\n            subsampletake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.RegistrationGetSubSample.length < inputData.subsampleskip) {\n            testskip = 0;\n            subsampleskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake,\n              subsampleskip,\n              subsampletake\n            };\n          }\n        } else {\n          let oldSelectedTest = inputData.masterData.selectedTest; //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\n\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample,\n            selectedPreregno: inputData.npreregno,\n            selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n            selectedSubSample: inputData.masterData.RegistrationGetSubSample\n          };\n          let RegistrationTestComment = [];\n          let RegistrationParameter = [];\n\n          if (inputData.checkBoxOperation === 1) {\n            const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n            oldSelectedTest.forEach((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                selectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\";\n            }\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_PARAMETERRESULTS\":\n                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              default:\n                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          } else if (inputData.checkBoxOperation === 5) {\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment1 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n                let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              default:\n                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment2 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n                }\n\n                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n          } else {\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              default:\n                RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          }\n\n          masterData['RegistrationTestComment'] = RegistrationTestComment;\n          masterData[\"RegistrationParameter\"] = RegistrationParameter;\n          let {\n            testskip,\n            testtake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\n            testskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake\n            };\n          }\n        }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        let inputParam = {\n          attachmentskip: undefined\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            inputParam\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      // if(){\n      // }else{\n      // }\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let oldSelectedSubSample = inputData.masterData.selectedSubSample;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\n        let selectedSample = inputData.selectedSample;\n        let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\n        let selectedSubSample = inputData.masterData.RegistrationGetSubSample;\n\n        if (subSample === 3) {\n          selectedSubSample = inputData.masterData.RegistrationGetSubSample.length > 0 ? [inputData.masterData.RegistrationGetSubSample[0]] : [];\n          selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\n        }\n\n        let masterData = { ...inputData.masterData,\n          selectedSample,\n          selectedSubSample,\n          selectedTest\n        };\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"],\n          ntransactiontestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: 3\n        };\n\n        if (subSample === 3) {\n          if (selectedTest.length == 0) {\n            inputData[\"npreregno\"] = selectedSubSample.map(x => x.npreregno).join(\",\");\n            inputData[\"ntransactionsamplecode\"] = selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n            inputData[\"checkBoxOperation\"] = 3;\n            inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"];\n            dispatch(getRegistrationTestDetail(inputData, true));\n          } else {\n            dispatch(getTestChildTabDetail(inputData, true));\n          }\n        } else {\n          dispatch(getTestChildTabDetail(inputData, true));\n        }\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedSample: inputData.selectedSample,\n          selectedPreregno: inputData.npreregno,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n          selectedSubSample: inputData.masterData.RegistrationGetSubSample\n        };\n        const wholeSubSampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n        oldSelectedSubSample.forEach((subsample, index) => {\n          if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n            oldSelectedSubSample.splice(index, 1);\n          }\n        });\n        const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedSubSample.length > 0 && oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest,\n            selectedSubSample: oldSelectedSubSample\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n        let skipInfo = {};\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getRegistrationTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"registration/getRegistrationTest\", inputParamData).then(response => {\n        sortData(response.data);\n        let oldSelectedTest = inputData.masterData.selectedTest;\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          selectedSubSample: inputData.selectedSubSample,\n          selectedTransactionsamplecode: inputData.ntransactionsamplecode,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [] // RegistrationTestComment,\n\n        }; //let wholeRegistrationTestComments = [];\n\n        let RegistrationTestComment = [];\n        let RegistrationParameter = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n          oldSelectedTest.forEach((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              selectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\";\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_PARAMETERRESULTS\":\n              RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment1 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n              }\n\n              let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n              let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n              let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment2 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n              }\n\n              let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n        } else {\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        masterData['RegistrationTestComment'] = RegistrationTestComment;\n        masterData[\"RegistrationParameter\"] = RegistrationParameter;\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        let inputParam = {\n          attachmentskip: undefined\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            inputParam\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\n        let selectedSubSample = inputData.selectedSubSample; // let selectedPreregno = inputData.npreregno;\n\n        let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : []; // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\n\n        let masterData = { ...inputData.masterData,\n          selectedSubSample,\n          selectedTest\n        };\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"],\n          ntransactiontestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: 3\n        };\n        dispatch(getTestChildTabDetail(inputData, true));\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedSubSample: inputData.selectedSubSample,\n          selectedTransactioncode: inputData.ntransactionsamplecode,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : []\n        };\n        const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n        let skipInfo = {};\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function acceptRegistration(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/acceptRegistration\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\" || response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\" || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\n        replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n        replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n        delete response.data[\"RegistrationGetSample\"];\n        delete response.data[\"RegistrationGetSubSample\"];\n        delete response.data[\"RegistrationGetTest\"];\n        let masterData = { ...LoginProps,\n          ...response.data,\n          selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n          selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n          selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n\n        if (response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\" || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\n          toast.warn(intl.formatMessage({\n            id: response.data.rtn\n          }));\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      toast.error(error.message);\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/RegistrationAction.js"],"names":["rsapi","Axios","toast","filterRecordBasedOnTwoArrays","sortData","rearrangeDateFormat","convertDateTimetoString","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","updatedObjectWithNewElement","replaceUpdatedObject","parentChildComboLoad","DEFAULT_RETURN","intl","initRequest","RegistrationSubType","RegistrationType","transactionStatus","crudMaster","postCRUDOrganiseTransSearch","getTestChildTabDetail","constructOptionList","getSampleTypeChange","Map","masterData","event","labelname","dispatch","post","then","response","data","item","type","payload","loading","catch","error","message","getRegTypeChange","getRegSubTypeChange","getComponentTestBySpec","selectedRecord","Component","Test","slno","length","selectedComponent","undefined","SelectedTest","SelectedSource","Object","keys","popUptestDataState","skip","take","Source","getTestfromDB","objComponent","LoginProps","nflag","component","value","label","dreceiveddate","userInfo","nspecsampletypecode","TestData","loadComponent","selectComponent","showSaveContinue","parentPopUpSize","CurrentTime","unshift","EditComponent","urlArray","ComponentTestBySpec","timezone","all","lstComponentMap","lstComponent","timeZoneListMap","TimeZoneField","get","timeZoneList","scomponentname","ncomponentcode","ntzdreceivedate","findIndex","x","ntimezonecode","stimezoneid","childoperation","ChildscreenName","openChildModal","ReloadData","inputData","searchSampleRef","current","searchSubSampleRef","searchTestRef","showFilter","testskip","testtake","showSample","status","warn","getTreeByProduct","comboData","inputParam","Specification","AgaramTree","ActiveKey","FocusKey","OpenNodes","Manufacturer","selectedSpec","sversion","ntemplatemanipulationcode","getNewRegSpecification","selectedNode","operation","methodUrl","ntreetemplatemanipulationcode","activeKey","focusKey","primaryKey","AddComponents","sreceiveddate","stzdreceivedate","scomments","nallottedspeccode","openPortal","openModal","getTest","nneedsubsample","specBasedComponent","componentTest","TestCombined","loadTest","formatMessage","id","addsubSample","columnList","userinfo","childColumnList","SubSamplecomboComponents","SubSamplewithoutCombocomponent","parentcolumnlist","childcolumnlist","newcomboData","loadSubSample","editSubSample","Unit","Componnet","lstUnitMap","comp","lstUnit","sunitname","nunitcode","insertRegistration","RegistrationGetSample","selectedSample","RegistrationGetSubSample","RegistrationGetTest","selectedSubSample","selectedTest","multipleselectionFlag","respObject","loadEsign","showConfirmAlert","loadPreregister","postParamList","getRegistrationSample","selectedFilter","activeSampleTab","getRegistrationsubSampleDetail","isServiceRequired","inputParamData","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntransactionstatus","napprovalconfigcode","activeTestTab","ndesigntemplatemappingcode","checkBoxOperation","activeName","dataStateName","subSample","skipInfo","oldSelectedSubSample","childTabsKey","removeElementFromArray","selectedPreregno","wholeSubSampleList","map","b","ntransactionsamplecode","forEach","subsample","index","includes","splice","subsampleskip","subsampletake","bool","oldSelectedTest","RegistrationTestComment","RegistrationParameter","wholeTestList","ntransactiontestcode","test","keepOld","ResponseData","RegistrationTestComment1","resultResponseData","RegistrationParameter1","ntransactiontestcode1","ResponseData1","RegistrationTestComment2","ntransactionTestCode","sampleGridDataState","sort","filter","attachmentskip","TestSelected","isGrandChildGetRequired","toString","join","getRegistrationTestDetail","dataStateArray","arr","selectedTransactionsamplecode","selectedTransactioncode","acceptRegistration","rtn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    filterRecordBasedOnTwoArrays, sortData,\r\n    rearrangeDateFormat, convertDateTimetoString, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, updatedObjectWithNewElement, replaceUpdatedObject, parentChildComboLoad\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { intl } from '../components/App';\r\nimport { initRequest } from './LoginAction';\r\nimport { RegistrationSubType, RegistrationType, transactionStatus } from '../components/Enumeration';\r\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction'\r\nimport { getTestChildTabDetail } from './index.js'\r\nimport { constructOptionList } from '../components/CommonScript';\r\n\r\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getRegTypeBySampleType\", Map)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        rsapi.post(\"/registration/getRegSubTypeByRegType\", Map)\r\n            .then(response => {\r\n                // const RegistrationSubType = response.data[\"RegistrationSubType\"];\r\n\r\n                //  console.log(response.data);\r\n                // RegistrationSubType.length > 0 ?\r\n                //     selectedRecord[\"nregsubtypecode\"] = {\r\n                //         \"value\": RegistrationSubType[0].nregsubtypecode,\r\n                //         \"label\": RegistrationSubType[0].sregsubtypename\r\n                //     } : selectedRecord[\"nregsubtypecode\"] = \"\";\r\n                // const [labelname] = event.item;\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getRegSubTypeByRegType\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getComponentTestBySpec(Map, selectedRecord, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getComponentTestBySpec\", Map)\r\n            .then(response => {\r\n                const { Component, Test } = response.data;\r\n                let slno = Component.length > 0 ? Component[0].slno : -1;\r\n                let selectedComponent = Component.length > 0 ? Component[0] : undefined\r\n                let SelectedTest = [];\r\n                let SelectedSource = [];\r\n\r\n                if (Object.keys(Test).length > 0) {\r\n                    SelectedTest = Test[slno];\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component, Test, SelectedTest, selectedComponent, loading: false,\r\n                        SelectedSource, selectedRecord, popUptestDataState: { skip: 0, take: 10 }, Source: []\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getTestfromDB(objComponent, LoginProps, nflag) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let component = { ...objComponent };\r\n        component[\"ncomponentcode\"] = objComponent[\"ncomponentcode\"] ? objComponent[\"ncomponentcode\"].value : -1;\r\n        component[\"nstoragelocationcode\"] = objComponent[\"nstoragelocationcode\"] ? objComponent[\"nstoragelocationcode\"].value : -1;\r\n        component[\"nstorageconditioncode\"] = objComponent[\"nstorageconditioncode\"] ? objComponent[\"nstorageconditioncode\"].value : -1;\r\n        component[\"slno\"] = LoginProps.Component ? Object.keys(LoginProps.Component).length + 1 : 0;\r\n        component[\"scomponentname\"] = objComponent[\"ncomponentcode\"].label;\r\n        component[\"sstoragelocationname\"] = objComponent[\"nstoragelocationcode\"] && objComponent[\"nstoragelocationcode\"].label ? objComponent[\"nstoragelocationcode\"].label : \"\";\r\n        component[\"sstorageconditionname\"] = objComponent[\"nstorageconditioncode\"] && objComponent[\"nstorageconditioncode\"].label ? objComponent[\"nstorageconditioncode\"].label : \"\";\r\n        component[\"ntzdmanufdate\"] = objComponent[\"ntzdmanufdate\"] ? objComponent[\"ntzdmanufdate\"].value : -1;\r\n        component[\"ntzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].value : -1;\r\n        component[\"stzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].label : \"\";\r\n        component[\"nplasmafilecode\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].value : -1;\r\n        component[\"splasmafilenumber\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].label : \"\";\r\n        const dreceiveddate = objComponent[\"dreceiveddate\"];\r\n        component[\"dreceiveddate\"] = dreceiveddate;//formatInputDate(objComponent[\"dreceiveddate\"], false);\r\n        component[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, LoginProps.userInfo);//formatInputDateWithoutT(objComponent[\"dreceiveddate\"], false);//formatDate(objComponent[\"sreceiveddate\"]);\r\n        // rsapi.post(\"/registration/getTestfromDB\", { \"Component\": component })\r\n        rsapi.post(\"/registration/getTestfromDB\", {\r\n            nspecsampletypecode: component.nspecsampletypecode,\r\n            slno: component.slno\r\n        })\r\n            .then(response => {\r\n                let TestData = response.data;\r\n                let slno = component.slno;\r\n                let SelectedTest = [];\r\n                let loadComponent = true;\r\n                let selectComponent = {};\r\n                let showSaveContinue = true;\r\n                let SelectedSource = [];\r\n                // let openChildModal = true;\r\n                let selectedComponent = undefined;\r\n                let parentPopUpSize = \"lg\"\r\n                // selectComponent = objComponent\r\n                if (nflag === 1) {\r\n                    loadComponent = true;\r\n                    objComponent[\"smanuflotno\"] = \"\";\r\n                    objComponent[\"dreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime)//new Date(LoginProps.CurrentTime);\r\n                    objComponent[\"sreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime)//new Date(LoginProps.CurrentTime);\r\n                    selectComponent = objComponent;\r\n                } else {\r\n                    loadComponent = false;\r\n                    parentPopUpSize = \"xl\"\r\n                    // openChildModal = false;\r\n                    showSaveContinue = false;\r\n                    selectComponent = undefined\r\n                }\r\n                let Test = LoginProps.Test || [];\r\n                let Component = LoginProps.Component || [];\r\n                Component.unshift(component);\r\n                selectedComponent = component;\r\n                Test[slno] = response.data;\r\n                SelectedTest = TestData;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component, Test, SelectedTest, selectComponent, selectedComponent,\r\n                        loadComponent, showSaveContinue, parentPopUpSize, loading: false, SelectedSource\r\n                    }\r\n                });\r\n                // console.log(response.data);\r\n            })\r\n            .catch(error => {\r\n                //   console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function EditComponent(Map, component, userInfo) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        urlArray = [ComponentTestBySpec, timezone]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n                const TimeZoneField = response[1].data;\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n\r\n                component[\"ncomponentcode\"] = { label: component.scomponentname, value: component.ncomponentcode }\r\n                component[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, component[\"sreceiveddate\"]);\r\n                component[\"scomments\"] = component[\"scomments\"]\r\n\r\n                let ntzdreceivedate = component.ntzdreceivedate;\r\n                if (component.ntzdreceivedate !== null && typeof component.ntzdreceivedate === \"object\") {\r\n                    ntzdreceivedate = component.ntzdreceivedate.value;\r\n                }\r\n                component[\"ntzdreceivedate\"] = component.ntzdreceivedate ?\r\n                    {\r\n                        \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].stimezoneid, \"value\":\r\n                            TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].ntimezonecode\r\n                    } : \"\"\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true, childoperation: \"update\",\r\n                        lstComponent, ChildscreenName: \"Component\",\r\n                        openChildModal: false, selectComponent: component, parentPopUpSize: \"lg\",\r\n                        timeZoneList, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function ReloadData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    //masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // let selectedFilter = inputData.selectedFilter;\r\n                // selectedFilter[\"fromdate\"] = \"\";\r\n                // selectedFilter[\"todate\"] = \"\";\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        showSample: undefined,\r\n                        //selectedFilter\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTreeByProduct(Map, selectedRecord, comboData, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getTreeByProduct\", Map)\r\n            .then(response => {\r\n                let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes, Manufacturer } = [];\r\n                const selectedSpec = {}\r\n                if (response.data[\"rtn\"] === true) {\r\n                    Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\",\r\n                        \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                    AgaramTree = response.data[\"AgaramTree\"];\r\n                    ActiveKey = response.data[\"ActiveKey\"];\r\n                    FocusKey = response.data[\"FocusKey\"];\r\n                    OpenNodes = response.data[\"OpenNodes\"];\r\n                    //Manufacturer = response.data[\"Manufacturer\"];\r\n                    selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\r\n                        \"value\": Specification[0].value,\r\n                        \"label\": Specification[0].label\r\n                    } : \"\";\r\n\r\n                    selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1\r\n                }\r\n                selectedRecord = { ...selectedRecord, ...selectedSpec }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Specification,\r\n                        selectedRecord,\r\n                        AgaramTree, ActiveKey, FocusKey, OpenNodes,\r\n                        Test: [],\r\n                        SelectedTest: [],\r\n                        loading: false,\r\n                        comboData,\r\n                        ...inputParam,\r\n                        selectedSpec,\r\n                        Component: [],\r\n                        selectComponent: {},\r\n                        selectedComponent: {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport const getNewRegSpecification = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        if (inputParam.selectedNode !== null) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam, ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode })\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\r\n                    let selectedComponent = undefined;\r\n                    inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? { value: Specification[0].value, label: Specification[0].label, item: Specification[0].item } : \"\";\r\n                    inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\r\n                    inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ActiveKey: inputParam.activeKey,\r\n                            FocusKey: inputParam.focusKey,\r\n                            primaryKey: inputParam.primaryKey,\r\n                            Specification: Specification,\r\n                            selectedNode: inputParam.selectedNode,\r\n                            selectedRecord: inputParam.selectedRecord,\r\n                            Test: [],\r\n                            selectedComponent,\r\n                            SelectedTest: [],\r\n                            loading: false,\r\n                            showSample: undefined\r\n                        }\r\n                    }\r\n                    );\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function AddComponents(Map) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = []\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        urlArray = [ComponentTestBySpec, timezone\r\n        ]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n                let dreceiveddate = null;\r\n                if (lstComponent[0].item.sreceiveddate)\r\n                    dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate);//new Date(lstComponent[0].item.sreceiveddate);//|| [];\r\n\r\n                let selectComponent = {\r\n                    sreceiveddate: dreceiveddate,\r\n                    dreceiveddate,\r\n                    ntzdreceivedate: { \"label\": Map[\"userinfo\"].stimezoneid, \"value\": Map[\"userinfo\"].ntimezonecode },\r\n                    stzdreceivedate: Map[\"userinfo\"].stimezoneid,\r\n                    scomments: \"\",\r\n                    nallottedspeccode: lstComponent[0].item.nallottedspeccode\r\n                };\r\n                let CurrentTime = dreceiveddate;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true,\r\n                        lstComponent, dreceiveddate, ChildscreenName: \"Component\",\r\n                        showSaveContinue: true, openChildModal: false, childoperation: \"create\", selectComponent\r\n                        , parentPopUpSize: \"lg\", CurrentTime, timeZoneList, loading: false,\r\n                        openPortal: true, openModal: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\nexport function getTest(objComponent, LoginProps, nneedsubsample, specBasedComponent) {\r\n    return function (dispatch) {\r\n        if (Object.keys(objComponent).length > 0) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/registration/getTestfromDB\", {\r\n                nspecsampletypecode: objComponent.nspecsampletypecode,\r\n                slno: objComponent.slno,\r\n                nneedsubsample: nneedsubsample,\r\n                nallottedspeccode: objComponent.nallottedspeccode,\r\n                specBasedComponent: specBasedComponent\r\n\r\n            })\r\n                .then(response => {\r\n                    let TestData = response.data;\r\n                    let Test = LoginProps.Test || [];\r\n                    let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n                    const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestgrouptestcode\");\r\n                    // const lstComponentMap = constructOptionList(TestCombined|| [], \"ntestgrouptestcode\",\r\n                    //\"stestsynonym\", undefined, undefined, true);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            TestCombined, loadTest: true, openChildModal: false, ChildscreenName: \"Test\",\r\n                            childoperation: \"create\", parentPopUpSize: \"lg\", loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function addsubSample(masterData, columnList,\r\n    selectComponent, userinfo, childColumnList,\r\n    SubSamplecomboComponents, SubSamplewithoutCombocomponent,\r\n    specBasedComponent, Map) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        // let urlArray = []\r\n        // const Unit = rsapi.post(\"/unit/getUnit\",\r\n        //     { userinfo })\r\n        // let Componnet = {}\r\n        // if (specBasedComponent === 4) {\r\n        //     Componnet = rsapi.post(\"/component/getComponent\",\r\n        //         { userinfo })\r\n        // } else {\r\n        //     Componnet = rsapi.post(\"/registration/getComponentBySpec\",\r\n        //         Map);\r\n        // }\r\n        // urlArray = [Unit, Componnet\r\n        // ]\r\n        // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n        //     parentcolumnlist: columnList,\r\n        //     childcolumnlist: childColumnList,\r\n        //     userinfo\r\n        // })\r\n        // Axios.all(urlArray)\r\n\r\n        rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo\r\n        }).then(response => {\r\n            const newcomboData = parentChildComboLoad(columnList, response.data,\r\n                selectComponent, childColumnList, SubSamplewithoutCombocomponent)\r\n\r\n            // const lstUnitMap = constructOptionList(response[0].data || [], \"nunitcode\",\r\n            //             \"sunitname\", undefined, undefined, true);\r\n            //         let comp = []\r\n            //         if (specBasedComponent === 4) {\r\n            //             comp = response[1].data\r\n            //         } else {\r\n            //             comp = response[1].data.lstComponent\r\n            //         }\r\n            //         const lstComponentMap = constructOptionList(comp || [], \"ncomponentcode\",\r\n            //             \"scomponentname\", undefined, undefined, true);\r\n            //         const lstUnit = lstUnitMap.get(\"OptionList\");\r\n            //         const lstComponent = lstComponentMap.get(\"OptionList\");\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    ChildscreenName: \"SubSample\",\r\n                    showSaveContinue: true, \r\n                    openChildModal: false,\r\n                    childoperation: \"create\",\r\n                    parentPopUpSize: \"lg\",\r\n                    loading: false,\r\n                    lstComponent:[],\r\n                    openPortal: true,\r\n                    openModal: false,\r\n                    //Unit: lstUnit,\r\n                    operation: \"create\",\r\n                    loadSubSample: true\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function editSubSample(Map, component, userInfo, specBasedComponent) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = []\r\n        const Unit = rsapi.post(\"/unit/getUnit\",\r\n            { userinfo: userInfo })\r\n        let Componnet = {}\r\n        if (specBasedComponent === 4) {\r\n            Componnet = rsapi.post(\"/component/getComponent\",\r\n                { userinfo: userInfo })\r\n        } else {\r\n            Componnet = rsapi.post(\"/registration/getComponentBySpec\",\r\n                Map);\r\n        }\r\n\r\n        urlArray = [Unit, Componnet\r\n        ]\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                const lstUnitMap = constructOptionList(response[0].data || [], \"nunitcode\",\r\n                    \"sunitname\", undefined, undefined, true);\r\n                let comp = []\r\n                if (specBasedComponent === 4) {\r\n                    comp = response[1].data\r\n                } else {\r\n                    comp = response[1].data.lstComponent\r\n                }\r\n                const lstComponentMap = constructOptionList(comp || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const lstUnit = lstUnitMap.get(\"OptionList\");\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n\r\n                component[\"nunitcode\"] = { label: component.sunitname, value: component.nunitcode }\r\n                component[\"ssubsamplename\"] = component[\"ssubsamplename\"];\r\n                component[\"ssampleqty\"] = component[\"ssampleqty\"];\r\n                component[\"scomments\"] = component[\"scomments\"]\r\n                component[\"ncomponentcode\"] = { label: component.scomponentname, value: component.ncomponentcode }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadSubSample: true, childoperation: \"update\",\r\n                        ChildscreenName: \"SubSample\", Unit: lstUnit,\r\n                        openChildModal: false, selectComponent: component,\r\n                        parentPopUpSize: \"lg\", loading: false, lstComponent\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function insertRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/createRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"RegistrationGetSample\"], masterData.RegistrationGetSample);\r\n                let selectedSample = response.data[\"selectedSample\"];\r\n                let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\r\n                let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                let selectedSubSample = RegistrationGetSubSample;\r\n                RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                let selectedTest = response.data[\"selectedTest\"];;\r\n                if (inputParam.nneedsubsample === 3) {\r\n                    RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"]\r\n                    selectedSubSample = response.data[\"selectedSubSample\"];\r\n                }\r\n\r\n\r\n                if (inputParam.multipleselectionFlag) {\r\n                    selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\r\n                    updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\r\n                    updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\r\n                    RegistrationGetSubSample = masterData.RegistrationGetSubSample;\r\n                    RegistrationGetTest = masterData.RegistrationGetTest;\r\n                }\r\n\r\n                masterData = {\r\n                    ...masterData, ...response.data,\r\n                    selectedSample, selectedSubSample, selectedTest,\r\n                    RegistrationGetSubSample, RegistrationGetTest, RegistrationGetSample\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    showConfirmAlert: false,\r\n                    selectedRecord: undefined,\r\n                    loading: false,\r\n                    loadPreregister: false,\r\n                    showSample: undefined,\r\n                    openPortal: false,\r\n                    selectedSpec: {},\r\n                    selectComponent: {},\r\n                    SelectedTest: {},\r\n                    selectedComponent: {},\r\n                    Component: [],\r\n                    selectedRecord: {},\r\n                    SelectedTest: [],\r\n                    Test: [],\r\n                    selectedComponent: {}\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getRegistrationSample(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                let respObject = {};\r\n                if (inputData.selectedFilter) {\r\n                    respObject = { selectedFilter: { ...inputData.selectedFilter } };\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        showSample: undefined,\r\n                        ...respObject,\r\n                        activeSampleTab: inputData.inputData.activeSampleTab\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedsubsample: inputData.nneedsubsample,\r\n            checkBoxOperation: inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"registration/getRegistrationSubSample\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let masterData = {}\r\n                    let skipInfo = {}\r\n                    if (subSample === 3) {\r\n                        let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            selectedSubSample: inputData.masterData.RegistrationGetSubSample.length > 0 ?\r\n                                [inputData.masterData.RegistrationGetSubSample[0]] : [],\r\n                        }\r\n                        if (inputData.checkBoxOperation === 1) {\r\n\r\n                            const wholeSubSampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                        }\r\n                        let { testskip, testtake, subsampleskip, subsampletake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.RegistrationGetSubSample.length < inputData.subsampleskip) {\r\n                            testskip = 0;\r\n                            subsampleskip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake, subsampleskip, subsampletake }\r\n                        }\r\n                    } else {\r\n\r\n                        let oldSelectedTest = inputData.masterData.selectedTest\r\n                        //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                            selectedSubSample: inputData.masterData.RegistrationGetSubSample,\r\n                        }\r\n                        let RegistrationTestComment = [];\r\n                        let RegistrationParameter = [];\r\n                        if (inputData.checkBoxOperation === 1) {\r\n                            const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.forEach((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedTest: oldSelectedTest,\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                    inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\"\r\n                            }\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                        inputData.masterData.RegistrationTestComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n                        else if (inputData.checkBoxOperation === 5) {\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                        }\r\n                        else {\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                        [...response.data.RegistrationTestComment] : [];\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n                        masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                        masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            inputParam\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            // if(){\r\n\r\n            // }else{\r\n\r\n            // }\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\r\n                let selectedSample = inputData.selectedSample;\r\n                let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                    [inputData.masterData.RegistrationGetTest[0]] : [];\r\n                let selectedSubSample = inputData.masterData.RegistrationGetSubSample;\r\n                if (subSample === 3) {\r\n                    selectedSubSample = inputData.masterData.RegistrationGetSubSample.length > 0 ?\r\n                        [inputData.masterData.RegistrationGetSubSample[0]] : [];\r\n                    selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        [inputData.masterData.RegistrationGetTest[0]] : [];\r\n                }\r\n                let masterData = { ...inputData.masterData, selectedSample, selectedSubSample, selectedTest }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: 3\r\n                }\r\n                if (subSample === 3) {\r\n                    if (selectedTest.length == 0) {\r\n                        inputData[\"npreregno\"] = selectedSubSample.map(x => x.npreregno).join(\",\")\r\n                        inputData[\"ntransactionsamplecode\"] = selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\")\r\n                        inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"]\r\n                        dispatch(getRegistrationTestDetail(inputData, true));\r\n                    } else {\r\n                        dispatch(getTestChildTabDetail(inputData, true));\r\n                    }\r\n                } else {\r\n                    dispatch(getTestChildTabDetail(inputData, true));\r\n                }\r\n\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSample: inputData.selectedSample,\r\n                    selectedPreregno: inputData.npreregno,\r\n                    selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                    selectedSubSample: inputData.masterData.RegistrationGetSubSample\r\n                }\r\n                const wholeSubSampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                oldSelectedSubSample.forEach((subsample, index) => {\r\n                    if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                        oldSelectedSubSample.splice(index, 1)\r\n                    }\r\n                })\r\n                const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.forEach((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedSubSample.length > 0 && oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest,\r\n                        selectedSubSample: oldSelectedSubSample\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                    inputData.masterData.RegistrationTestComment : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                    inputData.masterData.RegistrationParameter : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function getRegistrationTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"registration/getRegistrationTest\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.selectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                        inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\",\r\n                        inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedSubSample: inputData.selectedSubSample,\r\n                        selectedTransactionsamplecode: inputData.ntransactionsamplecode,\r\n                        selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                            [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                        // RegistrationTestComment,\r\n                    }\r\n                    //let wholeRegistrationTestComments = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationParameter = [];\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.forEach((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n\r\n                        })\r\n\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: oldSelectedTest,\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\"\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                    inputData.masterData.RegistrationTestComment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 5) {\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                        // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                    }\r\n                    else {\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                    [...response.data.RegistrationTestComment] : [];\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                    masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                    let { testskip, testtake } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            inputParam\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\r\n                let selectedSubSample = inputData.selectedSubSample;\r\n                // let selectedPreregno = inputData.npreregno;\r\n                let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\r\n                // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n                let masterData = { ...inputData.masterData, selectedSubSample, selectedTest }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: 3\r\n                }\r\n                dispatch(getTestChildTabDetail(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSubSample: inputData.selectedSubSample,\r\n                    selectedTransactioncode: inputData.ntransactionsamplecode,\r\n                    selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                }\r\n\r\n                const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.forEach((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest,\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                    inputData.masterData.RegistrationTestComment : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                    inputData.masterData.RegistrationParameter : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\nexport function acceptRegistration(inputParam, LoginProps) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/acceptRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\"\r\n                    || response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\"\r\n                    || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\r\n                    replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                    replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                    delete response.data[\"RegistrationGetSample\"];\r\n                    delete response.data[\"RegistrationGetSubSample\"];\r\n                    delete response.data[\"RegistrationGetTest\"];\r\n                    let masterData = {\r\n                        ...LoginProps, ...response.data,\r\n                        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    if (response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\"\r\n                        || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\r\n                        toast.warn(intl.formatMessage({ id: response.data.rtn }));\r\n                    }\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}