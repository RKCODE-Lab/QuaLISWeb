{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { transactionStatus } from '../components/Enumeration';\nimport { intl } from \"../components/App\";\nimport ConfirmMessage from '../components/confirm-alert/confirm-message.component';\nexport function getTechniqueDetail(technique, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"technique/getTechnique\", {\n      ntechniquecode: technique.ntechniquecode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditTechniqueService(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"technique/getActiveTechniqueById\", {\n      [inputParam.primaryKeyName]: inputParam.masterData.SelectedTechnique[inputParam.primaryKeyName],\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      //const masterData = {...inputParam.masterData, SelectedTestPriceVersion: response.data};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          operation: inputParam.operation,\n          loading: false,\n          screenName: inputParam.screenName,\n          selectedRecord: response.data,\n          ncontrolCode: inputParam.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAddTestService(screenName, operation, masterData, userInfo, ncontrolCode, confirmMessage) {\n  return function (dispatch) {\n    //if (masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT){     \n    dispatch(initRequest(true));\n    rsapi.post(\"technique/getTechniqueConducted\", {\n      \"ntechniquecode\": masterData.SelectedTechnique[\"ntechniquecode\"],\n      userinfo: userInfo\n    }).then(response => {\n      if (response.data !== null && response.data.length > 0) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_TESTTRAININGALREADYCONDUCTED\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            //pricingTestList:testList, \n            openChildModal: false,\n            operation,\n            screenName,\n            ncontrolCode,\n            loading: false\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openChildModal: false,\n            operation,\n            screenName,\n            ncontrolCode,\n            loading: false\n          }\n        });\n        rsapi.post(\"technique/getTechniqueScheduled\", {\n          \"ntechniquecode\": masterData.SelectedTechnique[\"ntechniquecode\"],\n          userinfo: userInfo\n        }).then(response => {\n          if (response.data !== null && response.data.length > 0) {\n            confirmMessage.confirm(\"addMessage\", intl.formatMessage({\n              id: \"IDS_ADDTEST\"\n            }), intl.formatMessage({\n              id: \"IDS_TESTTRAININGSCHEDULEDADD\"\n            }), intl.formatMessage({\n              id: \"IDS_OK\"\n            }), intl.formatMessage({\n              id: \"IDS_CANCEL\"\n            }), () => rsapi.post(\"technique/getTechniqueTest\", {\n              \"ntechniquecode\": masterData.SelectedTechnique[\"ntechniquecode\"],\n              userinfo: userInfo\n            }).then(response => {\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  techniqueTestList: response.data,\n                  openChildModal: true,\n                  operation,\n                  screenName,\n                  ncontrolCode,\n                  loading: false\n                }\n              });\n            }).catch(error => {\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  loading: false\n                }\n              });\n\n              if (error.response.status === 500) {\n                toast.error(error.message);\n              } else {\n                toast.warn(error.response.data);\n              }\n            }));\n          } else {\n            rsapi.post(\"technique/getTechniqueTest\", {\n              \"ntechniquecode\": masterData.SelectedTechnique[\"ntechniquecode\"],\n              userinfo: userInfo\n            }).then(response => {\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  techniqueTestList: response.data,\n                  openChildModal: true,\n                  operation,\n                  screenName,\n                  ncontrolCode,\n                  loading: false\n                }\n              });\n            }).catch(error => {\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  loading: false\n                }\n              });\n\n              if (error.response.status === 500) {\n                toast.error(error.message);\n              } else {\n                toast.warn(error.response.data);\n              }\n            });\n          }\n        });\n      }\n    }); // }\n    // else{\n    //     toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTTESTPRICEVERSION\"}));\n    // }\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/actions/TechniqueAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","toast","initRequest","transactionStatus","intl","ConfirmMessage","getTechniqueDetail","technique","userInfo","masterData","dispatch","post","ntechniquecode","userinfo","then","response","data","type","payload","operation","modalName","undefined","loading","catch","error","status","message","warn","getEditTechniqueService","inputParam","primaryKeyName","SelectedTechnique","openModal","screenName","selectedRecord","ncontrolCode","ncontrolcode","getAddTestService","confirmMessage","length","formatMessage","id","openChildModal","confirm","techniqueTestList"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAAQC,cAAR,QAA6B,cAA7B;AACA,SAASC,QAAT,QAAwB,4BAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,cAAP,MAA2B,uDAA3B;AAGA,OAAO,SAASC,kBAAT,CAA6BC,SAA7B,EAAwCC,QAAxC,EAAkDC,UAAlD,EAA8D;AACjE,SAAO,UAAUC,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOJ,KAAK,CAACa,IAAN,CAAW,wBAAX,EAAqC;AAACC,MAAAA,cAAc,EAACL,SAAS,CAACK,cAA1B;AACUC,MAAAA,QAAQ,EAACL;AADnB,KAArC,EAEPM,IAFO,CAEFC,QAAQ,IAAE;AACXN,MAAAA,UAAU,GAAG,EAAC,GAAGA,UAAJ;AAAgB,WAAGM,QAAQ,CAACC;AAA5B,OAAb;AACAhB,MAAAA,QAAQ,CAACS,UAAD,CAAR;AACAC,MAAAA,QAAQ,CAAC;AAACO,QAAAA,IAAI,EAAElB,cAAP;AAAuBmB,QAAAA,OAAO,EAAC;AAACT,UAAAA,UAAD;AAAaU,UAAAA,SAAS,EAAC,IAAvB;AAA6BC,UAAAA,SAAS,EAACC,SAAvC;AACnCC,UAAAA,OAAO,EAAC;AAD2B;AAA/B,OAAD,CAAR;AAEJ,KAPO,EAQPC,KARO,CAQDC,KAAK,IAAE;AACTd,MAAAA,QAAQ,CAAC;AAACO,QAAAA,IAAI,EAAElB,cAAP;AAAuBmB,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACD,UAAIE,KAAK,CAACT,QAAN,CAAeU,MAAf,KAA0B,GAA9B,EAAkC;AAC9BxB,QAAAA,KAAK,CAACuB,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGI;AACAzB,QAAAA,KAAK,CAAC0B,IAAN,CAAWH,KAAK,CAACT,QAAN,CAAeC,IAA1B;AACH;AAEJ,KAjBO,CAAP;AAkBH,GApBG;AAoBF;AAEF,OAAO,SAASY,uBAAT,CAAiCC,UAAjC,EAA4C;AAC/C,SAAO,UAASnB,QAAT,EAAkB;AACrBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAJ,IAAAA,KAAK,CAACa,IAAN,CAAW,kCAAX,EAA8C;AAAC,OAACkB,UAAU,CAACC,cAAZ,GAA4BD,UAAU,CAACpB,UAAX,CAAsBsB,iBAAtB,CAAwCF,UAAU,CAACC,cAAnD,CAA7B;AAAgGjB,MAAAA,QAAQ,EAACgB,UAAU,CAACrB;AAApH,KAA9C,EAECM,IAFD,CAEMC,QAAQ,IAAE;AACZ;AAGAL,MAAAA,QAAQ,CAAC;AAACO,QAAAA,IAAI,EAAElB,cAAP;AAAuBmB,QAAAA,OAAO,EAAC;AAAEc,UAAAA,SAAS,EAAC,IAAZ;AACGb,UAAAA,SAAS,EAACU,UAAU,CAACV,SADxB;AAEGG,UAAAA,OAAO,EAAC,KAFX;AAGGW,UAAAA,UAAU,EAACJ,UAAU,CAACI,UAHzB;AAIGC,UAAAA,cAAc,EAACnB,QAAQ,CAACC,IAJ3B;AAKGmB,UAAAA,YAAY,EAACN,UAAU,CAACO;AAL3B;AAA/B,OAAD,CAAR;AAMH,KAZD,EAaCb,KAbD,CAaOC,KAAK,IAAE;AACVd,MAAAA,QAAQ,CAAC;AAACO,QAAAA,IAAI,EAAElB,cAAP;AAAuBmB,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACT,QAAN,CAAeU,MAAf,KAA0B,GAA9B,EAAkC;AAC9BxB,QAAAA,KAAK,CAACuB,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGI;AACAzB,QAAAA,KAAK,CAAC0B,IAAN,CAAWH,KAAK,CAACT,QAAN,CAAeC,IAA1B;AACH;AACJ,KArBD;AAsBH,GAxBD;AAyBH;AAED,OAAO,SAASqB,iBAAT,CAA2BJ,UAA3B,EAAuCd,SAAvC,EAAkDV,UAAlD,EAA8DD,QAA9D,EAAwE2B,YAAxE,EAAqFG,cAArF,EAAoG;AACvG,SAAO,UAAU5B,QAAV,EAAoB;AACvB;AAEAA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEAJ,IAAAA,KAAK,CAACa,IAAN,CAAW,iCAAX,EAA6C;AAAC,wBAAiBF,UAAU,CAACsB,iBAAX,CAA6B,gBAA7B,CAAlB;AAC7ClB,MAAAA,QAAQ,EAACL;AADoC,KAA7C,EAECM,IAFD,CAEMC,QAAQ,IAAE;AACd,UAAGA,QAAQ,CAACC,IAAT,KAAgB,IAAhB,IAAwBD,QAAQ,CAACC,IAAT,CAAcuB,MAAd,GAAsB,CAAjD,EACA;AAEEtC,QAAAA,KAAK,CAAC0B,IAAN,CAAWvB,IAAI,CAACoC,aAAL,CAAmB;AAACC,UAAAA,EAAE,EAAE;AAAL,SAAnB,CAAX;AACA/B,QAAAA,QAAQ,CAAC;AAACO,UAAAA,IAAI,EAAElB,cAAP;AAAuBmB,UAAAA,OAAO,EAAC;AAAC;AACrCwB,YAAAA,cAAc,EAAC,KADqB;AAEpCvB,YAAAA,SAFoC;AAEzBc,YAAAA,UAFyB;AAEbE,YAAAA,YAFa;AAGpCb,YAAAA,OAAO,EAAC;AAH4B;AAA/B,SAAD,CAAR;AAID,OARD,MAUA;AACEZ,QAAAA,QAAQ,CAAC;AAACO,UAAAA,IAAI,EAAElB,cAAP;AAAuBmB,UAAAA,OAAO,EAAC;AACpCwB,YAAAA,cAAc,EAAC,KADqB;AAEpCvB,YAAAA,SAFoC;AAEzBc,YAAAA,UAFyB;AAEbE,YAAAA,YAFa;AAGpCb,YAAAA,OAAO,EAAC;AAH4B;AAA/B,SAAD,CAAR;AAIAxB,QAAAA,KAAK,CAACa,IAAN,CAAW,iCAAX,EAA6C;AAAC,4BAAiBF,UAAU,CAACsB,iBAAX,CAA6B,gBAA7B,CAAlB;AAC7ClB,UAAAA,QAAQ,EAACL;AADoC,SAA7C,EAECM,IAFD,CAEMC,QAAQ,IAAE;AACd,cAAGA,QAAQ,CAACC,IAAT,KAAgB,IAAhB,IAAwBD,QAAQ,CAACC,IAAT,CAAcuB,MAAd,GAAsB,CAAjD,EACA;AAEED,YAAAA,cAAc,CAACK,OAAf,CAAuB,YAAvB,EAAqCvC,IAAI,CAACoC,aAAL,CAAmB;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAAnB,CAArC,EAAgFrC,IAAI,CAACoC,aAAL,CAAmB;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAAnB,CAAhF,EACArC,IAAI,CAACoC,aAAL,CAAmB;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAAnB,CADA,EACsCrC,IAAI,CAACoC,aAAL,CAAmB;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAAnB,CADtC,EAEA,MAAO3C,KAAK,CAACa,IAAN,CAAW,4BAAX,EAAwC;AAAC,gCAAiBF,UAAU,CAACsB,iBAAX,CAA6B,gBAA7B,CAAlB;AAC/ClB,cAAAA,QAAQ,EAACL;AADsC,aAAxC,EAGVM,IAHU,CAGLC,QAAQ,IAAE;AAERL,cAAAA,QAAQ,CAAC;AAACO,gBAAAA,IAAI,EAAElB,cAAP;AAAuBmB,gBAAAA,OAAO,EAAC;AACA0B,kBAAAA,iBAAiB,EAAC7B,QAAQ,CAACC,IAD3B;AAGA0B,kBAAAA,cAAc,EAAC,IAHf;AAIAvB,kBAAAA,SAJA;AAIWc,kBAAAA,UAJX;AAIuBE,kBAAAA,YAJvB;AAMAb,kBAAAA,OAAO,EAAC;AANR;AAA/B,eAAD,CAAR;AAOH,aAZM,EAaNC,KAbM,CAaAC,KAAK,IAAE;AACVd,cAAAA,QAAQ,CAAC;AAACO,gBAAAA,IAAI,EAAElB,cAAP;AAAuBmB,gBAAAA,OAAO,EAAE;AAACI,kBAAAA,OAAO,EAAC;AAAT;AAAhC,eAAD,CAAR;;AACA,kBAAIE,KAAK,CAACT,QAAN,CAAeU,MAAf,KAA0B,GAA9B,EAAkC;AAC9BxB,gBAAAA,KAAK,CAACuB,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,eAFD,MAGI;AACAzB,gBAAAA,KAAK,CAAC0B,IAAN,CAAWH,KAAK,CAACT,QAAN,CAAeC,IAA1B;AACH;AACJ,aArBM,CAFP;AAwBD,WA3BD,MA6BA;AACElB,YAAAA,KAAK,CAACa,IAAN,CAAW,4BAAX,EAAwC;AAAC,gCAAiBF,UAAU,CAACsB,iBAAX,CAA6B,gBAA7B,CAAlB;AACxClB,cAAAA,QAAQ,EAACL;AAD+B,aAAxC,EAGHM,IAHG,CAGEC,QAAQ,IAAE;AAERL,cAAAA,QAAQ,CAAC;AAACO,gBAAAA,IAAI,EAAElB,cAAP;AAAuBmB,gBAAAA,OAAO,EAAC;AACA0B,kBAAAA,iBAAiB,EAAC7B,QAAQ,CAACC,IAD3B;AAGA0B,kBAAAA,cAAc,EAAC,IAHf;AAIAvB,kBAAAA,SAJA;AAIWc,kBAAAA,UAJX;AAIuBE,kBAAAA,YAJvB;AAMAb,kBAAAA,OAAO,EAAC;AANR;AAA/B,eAAD,CAAR;AAOH,aAZD,EAaCC,KAbD,CAaOC,KAAK,IAAE;AACVd,cAAAA,QAAQ,CAAC;AAACO,gBAAAA,IAAI,EAAElB,cAAP;AAAuBmB,gBAAAA,OAAO,EAAE;AAACI,kBAAAA,OAAO,EAAC;AAAT;AAAhC,eAAD,CAAR;;AACA,kBAAIE,KAAK,CAACT,QAAN,CAAeU,MAAf,KAA0B,GAA9B,EAAkC;AAC9BxB,gBAAAA,KAAK,CAACuB,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,eAFD,MAGI;AACAzB,gBAAAA,KAAK,CAAC0B,IAAN,CAAWH,KAAK,CAACT,QAAN,CAAeC,IAA1B;AACH;AACJ,aArBD;AAsBD;AAEH,SAzDA;AA0DD;AAEH,KA9EA,EALuB,CAqF3B;AACA;AACA;AACA;AACH,GAzFG;AAyFF","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport { sortData} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { transactionStatus } from '../components/Enumeration';\r\nimport { intl } from \"../components/App\";\r\nimport ConfirmMessage from '../components/confirm-alert/confirm-message.component';\r\n\r\n\r\nexport function getTechniqueDetail (technique, userInfo, masterData) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"technique/getTechnique\", {ntechniquecode:technique.ntechniquecode, \r\n                                                          userinfo:userInfo})\r\n   .then(response=>{     \r\n        masterData = {...masterData, ...response.data};       \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\nexport function getEditTechniqueService(inputParam){\r\n    return function(dispatch){\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"technique/getActiveTechniqueById\",{[inputParam.primaryKeyName]:inputParam.masterData.SelectedTechnique[inputParam.primaryKeyName],userinfo:inputParam.userInfo \r\n                                                                    })\r\n        .then(response=>{\r\n            //const masterData = {...inputParam.masterData, SelectedTestPriceVersion: response.data};\r\n            \r\n            \r\n            dispatch({type: DEFAULT_RETURN, payload:{ openModal:true,\r\n                                                       operation:inputParam.operation, \r\n                                                       loading:false,\r\n                                                       screenName:inputParam.screenName,   \r\n                                                       selectedRecord:response.data,\r\n                                                       ncontrolCode:inputParam.ncontrolcode,}})\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })\r\n    }\r\n}\r\n\r\nexport function getAddTestService(screenName, operation, masterData, userInfo, ncontrolCode,confirmMessage){\r\n    return function (dispatch) {    \r\n        //if (masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT){     \r\n        \r\n        dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"technique/getTechniqueConducted\",{\"ntechniquecode\":masterData.SelectedTechnique[\"ntechniquecode\"], \r\n        userinfo:userInfo})\r\n        .then(response=>{\r\n          if(response.data!==null && response.data.length >0)\r\n          {\r\n            \r\n            toast.warn(intl.formatMessage({id: \"IDS_TESTTRAININGALREADYCONDUCTED\"}));\r\n            dispatch({type: DEFAULT_RETURN, payload:{//pricingTestList:testList, \r\n                openChildModal:false,\r\n                operation, screenName, ncontrolCode,\r\n                loading:false}});\r\n          }\r\n          else\r\n          {\r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                openChildModal:false,\r\n                operation, screenName, ncontrolCode,\r\n                loading:false}});\r\n            rsapi.post(\"technique/getTechniqueScheduled\",{\"ntechniquecode\":masterData.SelectedTechnique[\"ntechniquecode\"], \r\n            userinfo:userInfo})\r\n            .then(response=>{\r\n              if(response.data!==null && response.data.length >0)\r\n              {\r\n                \r\n                confirmMessage.confirm(\"addMessage\", intl.formatMessage({ id: \"IDS_ADDTEST\" }), intl.formatMessage({ id: \"IDS_TESTTRAININGSCHEDULEDADD\" }),\r\n                intl.formatMessage({ id: \"IDS_OK\" }), intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                () =>  rsapi.post(\"technique/getTechniqueTest\",{\"ntechniquecode\":masterData.SelectedTechnique[\"ntechniquecode\"], \r\n                userinfo:userInfo})\r\n    \r\n            .then(response=>{\r\n                                               \r\n                    dispatch({type: DEFAULT_RETURN, payload:{\r\n                                                            techniqueTestList:response.data,\r\n                                                          \r\n                                                            openChildModal:true,\r\n                                                            operation, screenName, ncontrolCode,\r\n                                                            \r\n                                                            loading:false}});\r\n                })\r\n                .catch(error=>{\r\n                    dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                    if (error.response.status === 500){\r\n                        toast.error(error.message);\r\n                    } \r\n                    else{               \r\n                        toast.warn(error.response.data);\r\n                    }      \r\n                }));\r\n              }\r\n              else\r\n              {\r\n                rsapi.post(\"technique/getTechniqueTest\",{\"ntechniquecode\":masterData.SelectedTechnique[\"ntechniquecode\"], \r\n                userinfo:userInfo})\r\n    \r\n            .then(response=>{\r\n                                               \r\n                    dispatch({type: DEFAULT_RETURN, payload:{\r\n                                                            techniqueTestList:response.data,\r\n                                                           \r\n                                                            openChildModal:true,\r\n                                                            operation, screenName, ncontrolCode,\r\n                                                            \r\n                                                            loading:false}});\r\n                })\r\n                .catch(error=>{\r\n                    dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                    if (error.response.status === 500){\r\n                        toast.error(error.message);\r\n                    } \r\n                    else{               \r\n                        toast.warn(error.response.data);\r\n                    }      \r\n                })\r\n              }\r\n    \r\n           })      \r\n          }\r\n\r\n       })\r\n         \r\n    // }\r\n    // else{\r\n    //     toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTTESTPRICEVERSION\"}));\r\n    // }\r\n}}"]},"metadata":{},"sourceType":"module"}